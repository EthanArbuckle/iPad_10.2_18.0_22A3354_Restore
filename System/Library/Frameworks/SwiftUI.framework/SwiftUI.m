uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t partial apply for closure #1 in UpdateChildOutputs.visit<A>(key:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = **(_QWORD **)(v1 + 32);
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t partial apply for closure #1 in UpdateChildTransition.visit<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8);
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t partial apply for closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = a1;
  v15 = v10;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v12, v13, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], a8);
}

uint64_t _s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return closure #1 in compareValues<A>(_:_:options:)(a1, *(_QWORD *)(v8 + 24), *(_DWORD *)(v8 + 32), *(_QWORD *)(v8 + 16), a2, a6, a7, a8);
}

uint64_t closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[4];
  int v10;

  v9[2] = a4;
  v9[3] = a1;
  v10 = a3;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a2, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)v9, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], a8);
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v2[5], v2[2], v2[3], v2[4]);
}

uint64_t partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGCompareValues();
  *a1 = result;
  return result;
}

uint64_t IncrementalViewPhase.value.getter@<X0>(unsigned int *a1@<X8>)
{
  int v2;
  _DWORD *Value;
  unsigned int v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  int v8;
  unsigned int v9;

  v2 = *(_DWORD *)AGGraphGetValue();
  Value = (_DWORD *)AGGraphGetValue();
  v4 = *Value + (v2 & 0xFFFFFFFE);
  v5 = *Value | v2;
  result = AGGraphGetValue();
  v7 = v4 + 2 * *(_DWORD *)result;
  v8 = v7 | 1;
  v9 = v7 & 0xFFFFFFFE | v5 & 1;
  if (*(_BYTE *)(result + 4) == 2)
    v9 = v8;
  *a1 = v9;
  return result;
}

uint64_t partial apply for closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(a1, *(uint64_t (**)(void))(v1 + 24));
}

uint64_t _sSo11AGAttributea14AttributeGraphE10mutateBody2as12invalidating_yxm_SbyxzXEtlFySvXEfU_TA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t partial apply for closure #1 in Attribute.setValue(_:)@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in Attribute.setValue(_:)(a1);
}

uint64_t _s14AttributeGraph0A0V8setValueySbxFSbSPyxGXEfU_TA_0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGGraphSetValue();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Attribute.setValue(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AGGraphSetValue();
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FocusItem(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 60))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 48) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)(a1 + 40) & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityLargeContentViewBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL static ScenePhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

ValueMetadata *type metadata accessor for ScenePhase()
{
  return &type metadata for ScenePhase;
}

id @objc HostingScrollView.PlatformContainer.frame.getter(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v5, *a3);
}

uint64_t initializeWithCopy for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  id v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = v5;
  swift_unknownObjectWeakCopyInit();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t key path getter for EnvironmentValues.pixelLength : EnvironmentValues@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t block_destroy_helper_51()
{
  return swift_release();
}

uint64_t block_destroy_helper_52()
{
  return swift_release();
}

uint64_t block_destroy_helper_53()
{
  return swift_release();
}

uint64_t block_destroy_helper_54()
{
  return swift_release();
}

uint64_t block_destroy_helper_55()
{
  return swift_release();
}

uint64_t block_destroy_helper_56()
{
  return swift_release();
}

uint64_t block_destroy_helper_57()
{
  return swift_release();
}

uint64_t block_destroy_helper_58()
{
  return swift_release();
}

uint64_t block_destroy_helper_59()
{
  return swift_release();
}

uint64_t block_destroy_helper_60()
{
  return swift_release();
}

uint64_t block_destroy_helper_61()
{
  return swift_release();
}

uint64_t block_destroy_helper_62()
{
  return swift_release();
}

uint64_t block_destroy_helper_63()
{
  return swift_release();
}

uint64_t block_destroy_helper_64()
{
  return swift_release();
}

uint64_t block_destroy_helper_65()
{
  return swift_release();
}

uint64_t block_destroy_helper_66()
{
  return swift_release();
}

uint64_t block_destroy_helper_67()
{
  return swift_release();
}

uint64_t block_destroy_helper_68()
{
  return swift_release();
}

uint64_t block_destroy_helper_69()
{
  return swift_release();
}

uint64_t block_destroy_helper_70()
{
  return swift_release();
}

uint64_t block_destroy_helper_71()
{
  return swift_release();
}

uint64_t block_destroy_helper_72()
{
  return swift_release();
}

uint64_t block_destroy_helper_73()
{
  return swift_release();
}

uint64_t block_destroy_helper_74()
{
  return swift_release();
}

uint64_t block_destroy_helper_75()
{
  return swift_release();
}

uint64_t block_destroy_helper_76()
{
  return swift_release();
}

uint64_t block_destroy_helper_77()
{
  return swift_release();
}

uint64_t block_destroy_helper_78()
{
  return swift_release();
}

uint64_t block_destroy_helper_79()
{
  return swift_release();
}

uint64_t block_destroy_helper_80()
{
  return swift_release();
}

uint64_t block_destroy_helper_81()
{
  return swift_release();
}

uint64_t block_destroy_helper_82()
{
  return swift_release();
}

uint64_t block_destroy_helper_83()
{
  return swift_release();
}

uint64_t block_destroy_helper_84()
{
  return swift_release();
}

uint64_t block_destroy_helper_85()
{
  return swift_release();
}

uint64_t block_destroy_helper_86()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for AccessibilityAttachmentModifier()
{
  return &type metadata for AccessibilityAttachmentModifier;
}

uint64_t getEnumTagSinglePayload for Toolbar.UpdateContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t destructiveInjectEnumTag for FocusStore.Entry.Target()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t UIHostingViewDebugLayer.name.getter()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  objc_super v15;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = objc_msgSend(v0, sel_delegate);
  if (v3)
  {
    v4 = v3;
    swift_getObjectType();
    v5 = swift_conformsToProtocol2();
    if (v5)
      v6 = v5;
    else
      v6 = 0;
    if (v5)
      v7 = v4;
    else
      v7 = 0;
    if (v7)
    {
      v8 = swift_getObjectType();
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v8, v6);
      v11 = v10;
      swift_unknownObjectRelease();
      if (v11)
        return v9;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  v15.receiver = v1;
  v15.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v15, sel_name);
  if (!v12)
    return 0;
  v13 = v12;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v9;
}

uint64_t _UIHostingView.debugName.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  char v9;
  Swift::String_optional v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;

  v1 = v0;
  swift_getObjectType();
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  v3 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v4 = (void *)MEMORY[0x18D75CC88](0xD000000000000011, 0x8000000187BD8FE0);
  v5 = objc_msgSend(v3, sel_initWithSuiteName_, v4);

  if (v5)
  {
    v6 = (void *)MEMORY[0x18D75CC88](0xD000000000000019, 0x8000000187BEF300);
    v7 = objc_msgSend(v5, sel_stringForKey_, v6);

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
  }
  String.lowercased()();
  swift_bridgeObjectRelease();
  v8 = 0;
  while (1)
  {
    v10 = String.Iterator.next()();
    if (!v10.value._object)
      break;
    if (v10.value._countAndFlagsBits == 42 && v10.value._object == (void *)0xE100000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v8 = -1;
    }
    else if (v10.value._countAndFlagsBits == 117 && v10.value._object == (void *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      v8 |= 1uLL;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
        v8 |= 1uLL;
    }
  }
  swift_bridgeObjectRelease();
  if (!v8)
    return 0;
  v11 = _typeName(_:qualified:)();
  type metadata accessor for DropDelegate?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  v14 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v13);
  *(_QWORD *)(v12 + 56) = v14;
  *(_QWORD *)(v12 + 64) = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFD08], v14);
  *(_QWORD *)(v12 + 32) = v1;
  v15 = v1;
  v16 = String.init(format:_:)();
  v18 = v17;
  v19._countAndFlagsBits = 10272;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v16;
  v20._object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 41;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = UIHostingViewDebugOptions.debugRepresentation<A>(for:)((uint64_t)v15, v8);
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t getEnumTagSinglePayload for ActionSheet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AGAttribute(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _IncrementalLayout_Child(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 95))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x18D75FFDC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_57(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_59(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_61(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_62(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_65(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_67(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_69(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_72(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_73(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_75(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_76(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_77(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_79(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_81(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_82(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_83(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_85(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_86(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t storeEnumTagSinglePayload for Toolbar.UpdateContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 88) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LiftPreviewLabelMarkingEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LiftPreviewLabelMarkingEffect(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type LiftPreviewLabelMarkingEffect and conformance LiftPreviewLabelMarkingEffect);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.SectionIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.SectionIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowSectionCollection.index(after:));
}

uint64_t partial apply for closure #1 in Attribute.init(value:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Attribute.init(value:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t closure #1 in Attribute.init(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v6[2] = a2;
  v6[3] = a1;
  v2 = type metadata accessor for External();
  v3 = type metadata accessor for Attribute();
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in closure #1 in Attribute.init(value:), (uint64_t)v6, v2, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
}

uint64_t partial apply for closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in closure #1 in Attribute.init(value:)(a1);
}

uint64_t closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for External();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v2);
  result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

void applyNode #1 (start:style:node:transform:section:) in _IncrementalLayout_Children.apply(from:style:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[104];

  outlined init with copy of _ViewList_Node(a3, (uint64_t)v3);
  __asm { BR              X10 }
}

void sub_186E4C0F4()
{
  uint64_t v0;
  unint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_OWORD *)(v7 + 88);
  v10 = *(_OWORD *)(v7 + 136);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v7 + 120);
  *(_OWORD *)(v0 + 272) = v10;
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v7 + 152);
  *(_QWORD *)(v7 + 77) = *(_QWORD *)(v7 + 165);
  v11 = *(_OWORD *)(v7 + 104);
  *(_OWORD *)(v0 + 224) = v9;
  *(_OWORD *)(v0 + 240) = v11;
  v12 = *(_QWORD *)(v0 + 232);
  if ((v1 & 1) != 0)
  {
    v13 = (unsigned __int128)(v12 * (__int128)(v1 >> 1)) >> 64;
    v12 *= v1 >> 1;
    if (v13 != v12 >> 63)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
  if (*v5 >= v12)
  {
    outlined destroy of _ViewList_Sublist(v0 + 224);
    *v5 -= v12;
    return;
  }
  *(_QWORD *)(v0 + 48) = *v6;
  _ViewList_SublistTransform.apply(sublist:)();
  v14 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 232);
  if (v15 >= v14)
  {
    if (v14 == v15)
    {
LABEL_10:
      outlined destroy of _ViewList_Sublist(v0 + 224);
      return;
    }
    *(_QWORD *)(v0 + 32) = HIWORD(v8);
    *(_QWORD *)(v0 + 40) = v0 + 256;
    *(_QWORD *)(v0 + 16) >>= 40;
    *(_QWORD *)(v0 + 24) = v0 + 64;
    *(_QWORD *)(v0 + 8) = HIDWORD(v4) & 1;
    while (v14 < v15)
    {
      *(_BYTE *)(v0 + 223) = 0;
      v16 = *(_QWORD *)(v0 + 248);
      *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 240);
      *(_QWORD *)(v0 + 152) = v16;
      _ViewList_ID.elementID(at:)();
      v17 = *(_QWORD *)(v0 + 56);
      v18 = *(_QWORD *)(v0 + 48);
      outlined init with copy of TableColumnList(*(_QWORD *)(v0 + 40), v0 + 144);
      v19 = *(_QWORD *)(v0 + 296);
      swift_bridgeObjectRetain();
      v20 = _ViewList_Sublist.list.getter();
      *(_QWORD *)(v0 + 184) = v18;
      *(_QWORD *)(v0 + 192) = v17;
      *(_QWORD *)(v0 + 200) = v19;
      *(_DWORD *)(v0 + 208) = v20;
      *(_BYTE *)(v0 + 212) = BYTE4(v20) & 1;
      *(_DWORD *)(v0 + 216) = v4;
      *(_BYTE *)(v0 + 220) = *(_QWORD *)(v0 + 8);
      v21 = *(_QWORD *)(v0 + 24);
      *(_BYTE *)(v0 + 221) = *(_QWORD *)(v0 + 16);
      *(_BYTE *)(v0 + 222) = *(_QWORD *)(v0 + 32);
      v22 = *v3;
      LODWORD(v17) = *((_DWORD *)v3 + 2);
      outlined init with copy of _IncrementalLayout_Child.Data(v0 + 144, v21);
      *(_QWORD *)(v0 + 48) = v22;
      *(_DWORD *)(v0 + 56) = v17;
      swift_retain();
      v2(v0 + 48, v0 + 223);
      outlined destroy of _IncrementalLayout_Child(v0 + 48);
      outlined destroy of _IncrementalLayout_Child.Data(v0 + 144);
      if (*(_BYTE *)(v0 + 223) != 1 && v15 != ++v14)
        continue;
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
}

void sub_186E4C3E0()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined init with copy of _ViewList_Node(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE2BF8] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE2208] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined init with take of Image.Resolved?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t protocol witness for DropAction.perform(_:_:) in conformance ItemProviderDropAction()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x18D75ED7C](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

uint64_t type metadata accessor for CVarArg(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined destroy of _ViewList_Sublist(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE4178] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of _ViewList_Node(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE2BF8] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of _IncrementalLayout_Child(uint64_t a1)
{
  destroy for _IncrementalLayout_Child(a1);
  return a1;
}

uint64_t destroy for _IncrementalLayout_Child(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of TableColumnList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of OptionalBinaryInteger(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for _DUIPreviewMode(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for AGAttribute(uint64_t a1)
{
  type metadata accessor for _DUIPreviewMode(a1, &lazy cache variable for type metadata for AGAttribute);
}

unint64_t lazy protocol witness table accessor for type External<()> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<()> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<()> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<()> and conformance External<A>);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewListOutputs>, MEMORY[0x1E0CE3698], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, MEMORY[0x1E0CE1C98], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<HVGridGeometry>, (uint64_t)&type metadata for HVGridGeometry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_PlacedChild>, (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, MEMORY[0x1E0CE2910], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 40 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, MEMORY[0x1E0CE32F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScenePhase>, (uint64_t)&type metadata for ScenePhase, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabEntry>, (uint64_t)&type metadata for TabEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 272);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[272 * v8])
      memmove(v12, v13, 272 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ButtonRepeatTiming.TimingEntry>, (uint64_t)&type metadata for ButtonRepeatTiming.TimingEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityProperties>, MEMORY[0x1E0CE58C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLargeContentViewTree>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 240);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[240 * v8])
      memmove(v12, v13, 240 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 336);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[336 * v8])
      memmove(v12, v13, 336 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableSections.Item>, (uint64_t)&type metadata for TableSections.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 272);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[272 * v8])
      memmove(v12, v13, 272 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SwiftUIAnySortComparator>, (uint64_t)&type metadata for SwiftUIAnySortComparator, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8])
      memmove(v12, v13, 120 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitHostedFocusItemLifecycle.Event>, (uint64_t)&type metadata for UIKitHostedFocusItemLifecycle.Event, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRelationshipScope.Relationship>, (uint64_t)&type metadata for AccessibilityRelationshipScope.Relationship, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PPTTestCase.Name>, (uint64_t)&type metadata for PPTTestCase.Name, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableBounds>, (uint64_t)&type metadata for FocusableBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusedValueList.Item>, (uint64_t)&type metadata for FocusedValueList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PopoverPresentation>, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 168);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[168 * v8])
      memmove(v12, v13, 168 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ArchivedViewState>, (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableFillerBounds>, (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 112 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MultimodalBadgeInfo>, (uint64_t)&type metadata for MultimodalBadgeInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityFocusStoreList.Item>, (uint64_t)&type metadata for AccessibilityFocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SharingActivityPickerPresentation>, (uint64_t)&type metadata for SharingActivityPickerPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8])
      memmove(v12, v13, 152 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationColumnState>, (uint64_t)&type metadata for NavigationColumnState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 304);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[304 * v8])
      memmove(v12, v13, 304 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationViewDestinationView>, (uint64_t)&type metadata for NavigationViewDestinationView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Cell>, (uint64_t)&type metadata for GridLayout.Cache.Cell, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.RowOrColumn>, (uint64_t)&type metadata for GridLayout.Cache.RowOrColumn, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8 << 6);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridIndex>, (uint64_t)&type metadata for GridIndex, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationRequest>, (uint64_t)&type metadata for NavigationRequest, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8])
      memmove(v12, v13, 136 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8])
      memmove(v12, v13, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ToolbarOutputs>, (uint64_t)&type metadata for _ToolbarOutputs, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ScrollableLayoutItem>, (uint64_t)&type metadata for _ScrollableLayoutItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyToken>, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollViewBehavior.ContainerInfo>, (uint64_t)&type metadata for ScrollViewBehavior.ContainerInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScalarDeceleration>, (uint64_t)&type metadata for ScalarDeceleration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 88 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityAction>, (uint64_t)&type metadata for CodableAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>, (uint64_t)&type metadata for ToolbarPlacement, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>, (uint64_t)&type metadata for SectionAccumulator.RowIDs.Chunk, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.Item>, (uint64_t)&type metadata for SectionAccumulator.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[184 * v8])
      memmove(v12, v13, 184 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.AccessibilityUpdater.AttachmentStorage>, (uint64_t)&type metadata for DisplayList.AccessibilityUpdater.AttachmentStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8])
      memmove(v12, v13, 120 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IdentifiedDocumentGroupConfiguration>, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8])
      memmove(v13, v14, v8 << 7);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Int?>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E0CE5600], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Color.Resolved>, MEMORY[0x1E0CE7110], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DragContext>, (uint64_t)&type metadata for DragContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8])
      memmove(v12, v13, 112 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationState.StackContent.Key>, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatedValueTrack<CGPoint><A>.VectorPath.Element>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatedValueTrack<CGPoint><A>.VectorPath.Element, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 96 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DocumentLaunchScreenAction>, (uint64_t)&type metadata for DocumentLaunchScreenAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_AnyDocumentIntroAccessory>, (uint64_t)&type metadata for _AnyDocumentIntroAccessory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabItem>, (uint64_t)&type metadata for TabItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<String.Index>>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Substring>, MEMORY[0x1E0DEBAF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<HostingScrollView.PlatformGroupContainer.SubstitutionCandidate>, (uint64_t)&type metadata for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_AccessibilityRotorEntryOutputs>, (uint64_t)&type metadata for _AccessibilityRotorEntryOutputs, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, MEMORY[0x1E0CE1C78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8])
      memmove(v12, v13, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Sections.Item>, (uint64_t)&type metadata for Sections.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 16 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNavigationRotorEntry>, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8])
      memmove(v12, v13, 136 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAppIntentAction>, (uint64_t)&type metadata for AccessibilityAppIntentAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationContentAbstractPosition>, (uint64_t)&type metadata for NavigationContentAbstractPosition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<EventID>, MEMORY[0x1E0CE7610], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Earmark>, (uint64_t)&type metadata for GridLayout.Cache.Earmark, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GeneralItem>, (uint64_t)&type metadata for GeneralItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 6;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.Child>, (uint64_t)&type metadata for JindoTripleVStack.Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 223;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 8);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[256 * v8])
      memmove(v13, v14, v8 << 8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroupState>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroupState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 80 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction.Resolved>, (uint64_t)&type metadata for AnyAccessibilityAction.Resolved, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Data>, MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandAccumulator>, (uint64_t)&type metadata for CommandAccumulator, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>, (void (*)(uint64_t))type metadata accessor for Range<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key()
{
  return 0;
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance SourceInput<A>()
{
  lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();
  return static GraphInput<>.isTriviallyReusable.getter();
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance SourceInput<A>()
{
  lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();
  return static GraphInput<>.makeReusable(indirectMap:value:)();
}

uint64_t AnySource.makeReusable(indirectMap:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unsigned int v3;
  char v4;
  void *v5;
  id v6;
  int IndirectAttribute;
  void (*v8)(_BYTE *, _QWORD);
  uint64_t *v9;
  uint64_t *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v13[32];

  v1 = v0;
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
  {
    v3 = result;
    if (*(_QWORD *)(IndirectAttributeMap.map.getter() + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)(v3), (v4 & 1) != 0))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v5 = (void *)IndirectAttributeMap.subgraph.getter();
      AGGraphClearUpdate();
      v6 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      IndirectAttribute = AGGraphCreateIndirectAttribute();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      v8 = (void (*)(_BYTE *, _QWORD))IndirectAttributeMap.map.modify();
      v10 = v9;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = *v10;
      *v10 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute, v3, isUniquelyReferenced_nonNull_native);
      *v10 = v12;
      swift_bridgeObjectRelease();
      v8(v13, 0);
    }
    result = AGCreateWeakAttribute();
    *(_QWORD *)(v1 + 16) = result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnySource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 29) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnySource(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 29))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateChildTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UpdateChildTransition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_DWORD *)(v16[7] + 4 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  type metadata accessor for AGAttribute(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 4 * result;
  *(_DWORD *)(a4[6] + v4) = a2;
  *(_DWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t AnyStyleModifier.makeReusable(indirectMap:)()
{
  unsigned int *v0;
  _DWORD *v1;
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  int IndirectAttribute;
  uint64_t result;
  void *v8;
  id v9;
  uint64_t (*v10)(_BYTE *, _QWORD);
  uint64_t *v11;
  uint64_t *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _BYTE v15[32];

  v1 = v0;
  v2 = *v0;
  v3 = IndirectAttributeMap.map.getter();
  if (*(_QWORD *)(v3 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v5 & 1) != 0))
  {
    IndirectAttribute = *(_DWORD *)(*(_QWORD *)(v3 + 56) + 4 * v4);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = (void *)IndirectAttributeMap.subgraph.getter();
    AGGraphClearUpdate();
    v9 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    IndirectAttribute = AGGraphCreateIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    v10 = (uint64_t (*)(_BYTE *, _QWORD))IndirectAttributeMap.map.modify();
    v12 = v11;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v12;
    *v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute, v2, isUniquelyReferenced_nonNull_native);
    *v12 = v14;
    swift_bridgeObjectRelease();
    result = v10(v15, 0);
  }
  *v1 = IndirectAttribute;
  return result;
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance StyleInput<A>()
{
  lazy protocol witness table accessor for type Stack<AnyStyleModifier> and conformance <A> Stack<A>();
  return static GraphInput<>.isTriviallyReusable.getter();
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance StyleInput<A>()
{
  lazy protocol witness table accessor for type Stack<AnyStyleModifier> and conformance <A> Stack<A>();
  return static GraphInput<>.makeReusable(indirectMap:value:)();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance StyleOverrideInput<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = protocol witness for CollectionViewListDataSourceBase.sectionIndexLabel(forSectionAt:) in conformance TableDataSourceAdaptor();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CollectionViewListDataSourceBase.sectionIndexLabel(forSectionAt:) in conformance TableDataSourceAdaptor()
{
  return 0;
}

uint64_t outlined destroy of _IncrementalLayout_Child.Data(uint64_t a1)
{
  destroy for _IncrementalLayout_Child.Data(a1);
  return a1;
}

uint64_t destroy for _IncrementalLayout_Child.Data(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of _IncrementalLayout_Child.Data(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IncrementalLayout_Child.Data(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for _IncrementalLayout_Child.Data(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 75) = *(_DWORD *)(a2 + 75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of SheetPreference.Value(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SheetPreference.Value(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for SheetPreference.Value(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(unsigned __int8 *)(a2 + 105);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  if (v4 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v6 = (_OWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    swift_retain();
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *v6;
    }
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v11 = (_OWORD *)(a1 + 32);
    v12 = (_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 56);
    if (v13)
    {
      v14 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v11, v12);
    }
    else
    {
      v15 = *(_OWORD *)(a2 + 48);
      *v11 = *v12;
      *(_OWORD *)(a1 + 48) = v15;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    }
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a1 + 105) = 1;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else if (v4)
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 90) = *(_OWORD *)(a2 + 90);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 105) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x18D75ED7C](*(_QWORD *)(v6 + 40), a2, 4);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x18D75ED7C](*(_QWORD *)(v6 + 40), a2, 4);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  v10 = v6 + 56;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_8;
  v11 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v11 + 4 * v9) == (_DWORD)a2)
    goto LABEL_7;
  v12 = ~v8;
  v9 = (v9 + 1) & v12;
  if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_9;
  }
  while (*(_DWORD *)(v11 + 4 * v9) != (_DWORD)a2)
  {
    v9 = (v9 + 1) & v12;
    if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_8;
  }
LABEL_7:
  result = 0;
LABEL_9:
  *a1 = a2;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = MEMORY[0x18D75ED7C](*(_QWORD *)(*v3 + 40), v5, 4);
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for AGAttribute(0);
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_DWORD *)(v10 + 4 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v12 + 48) + 4 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v4 = result;
  if (*(_QWORD *)(*v3 + 24) <= *(_QWORD *)(*v3 + 16))
  {
    if ((a3 & 1) != 0)
      specialized _NativeSet.resize(capacity:)();
    else
      specialized _NativeSet.copyAndResize(capacity:)();
    v6 = *v3;
    result = static Hasher._hash(seed:_:)();
    v7 = -1 << *(_BYTE *)(v6 + 32);
    a2 = result & ~v7;
    if (((*(_QWORD *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(v8 + 8 * a2) == v4)
      {
LABEL_12:
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      else
      {
        v9 = ~v7;
        while (1)
        {
          a2 = (a2 + 1) & v9;
          if (((*(_QWORD *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
            break;
          if (*(_QWORD *)(v8 + 8 * a2) == v4)
            goto LABEL_12;
        }
      }
    }
  }
  else if ((a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeSet.copy()();
  }
  v10 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2) = v4;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    *(_QWORD *)(v10 + 16) = v13;
  return result;
}

{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v4 = result;
  if (*(_QWORD *)(*v3 + 24) <= *(_QWORD *)(*v3 + 16))
  {
    if ((a3 & 1) != 0)
      specialized _NativeSet.resize(capacity:)();
    else
      specialized _NativeSet.copyAndResize(capacity:)();
    v6 = *v3;
    result = MEMORY[0x18D75ED7C](*(_QWORD *)(*v3 + 40), v4, 4);
    v7 = -1 << *(_BYTE *)(v6 + 32);
    a2 = result & ~v7;
    if (((*(_QWORD *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v8 = *(_QWORD *)(v6 + 48);
      if (*(_DWORD *)(v8 + 4 * a2) == v4)
      {
LABEL_12:
        result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      else
      {
        v9 = ~v7;
        while (1)
        {
          a2 = (a2 + 1) & v9;
          if (((*(_QWORD *)(v6 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
            break;
          if (*(_DWORD *)(v8 + 4 * a2) == v4)
            goto LABEL_12;
        }
      }
    }
  }
  else if ((a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeSet.copy()();
  }
  v10 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * a2) = v4;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    *(_QWORD *)(v10 + 16) = v13;
  return result;
}

{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  type metadata accessor for _SetStorage<AGAttribute>(0, &lazy cache variable for type metadata for _SetStorage<AGAttribute>, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, MEMORY[0x1E0CFED18]);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_29:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v13)
      goto LABEL_29;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_29;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_29;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
        {
          v9 = v16 + 3;
          if (v16 + 3 >= v13)
            goto LABEL_29;
          v17 = *(_QWORD *)(v6 + 8 * v9);
          if (!v17)
          {
            v9 = v16 + 4;
            if (v16 + 4 >= v13)
              goto LABEL_29;
            v17 = *(_QWORD *)(v6 + 8 * v9);
            v18 = v16 + 4;
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_28:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_29;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<UInt32>, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE108], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_29:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v13)
      goto LABEL_29;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_29;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_29;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
        {
          v9 = v16 + 3;
          if (v16 + 3 >= v13)
            goto LABEL_29;
          v17 = *(_QWORD *)(v6 + 8 * v9);
          if (!v17)
          {
            v9 = v16 + 4;
            if (v16 + 4 >= v13)
              goto LABEL_29;
            v17 = *(_QWORD *)(v6 + 8 * v9);
            v18 = v16 + 4;
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_28:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_29;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[3];

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<AccessibilityRelationshipScope.Key>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    result = (void *)outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    v17 = (_OWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v18 = v23[0];
    v19 = v23[2];
    v17[1] = v23[1];
    v17[2] = v19;
    *v17 = v18;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<UniqueID>, (void (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[40];

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v20);
    result = (void *)outlined init with take of ToolbarPlacement.Role((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[40];

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<Toolbar.BarLocation>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v20);
    result = (void *)outlined init with take of Toolbar.BarLocation((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  uint64_t v12;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = type metadata accessor for CommandGroupPlacementBox(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _SetStorage<AGAttribute>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CommandGroupPlacementBox>, v7, &lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, (uint64_t)&protocol conformance descriptor for CommandGroupPlacementBox);
  v8 = *v0;
  v9 = static _SetStorage.copy(original:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v10;
    return result;
  }
  v27 = v1;
  result = (void *)(v9 + 56);
  v12 = v8 + 56;
  v13 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 56 + 8 * v13)
    result = memmove(result, (const void *)(v8 + 56), 8 * v13);
  v15 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v16 = 1 << *(_BYTE *)(v8 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v8 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v19)
      goto LABEL_28;
    v24 = *(_QWORD *)(v12 + 8 * v23);
    ++v15;
    if (!v24)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v19)
        goto LABEL_28;
      v24 = *(_QWORD *)(v12 + 8 * v15);
      if (!v24)
      {
        v15 = v23 + 2;
        if (v23 + 2 >= v19)
          goto LABEL_28;
        v24 = *(_QWORD *)(v12 + 8 * v15);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v18 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v3 + 72) * v21;
    outlined init with copy of CommandGroupPlacementBox(*(_QWORD *)(v8 + 48) + v22, (uint64_t)v6);
    result = (void *)outlined init with take of TableCellFormula((uint64_t)v6, *(_QWORD *)(v10 + 48) + v22, type metadata accessor for CommandGroupPlacementBox);
  }
  v25 = v23 + 3;
  if (v25 >= v19)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_30;
  }
  v24 = *(_QWORD *)(v12 + 8 * v25);
  if (v24)
  {
    v15 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v15 >= v19)
      goto LABEL_28;
    v24 = *(_QWORD *)(v12 + 8 * v15);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[16];

  v1 = v0;
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(v2 + 48) + 16 * v15, (uint64_t)v20);
    result = (void *)outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], &lazy cache variable for type metadata for _SetStorage<IndexPath>, (unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E0CB1668]);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ArchivedViewState.ID>, (void (*)(void))lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = *(_QWORD *)(v17 + 16);
    *(_OWORD *)v18 = *(_OWORD *)v17;
    *(_QWORD *)(v18 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[48];

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarItemPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v20);
    result = (void *)outlined init with take of ToolbarItemPlacement.Role((uint64_t)v20, *(_QWORD *)(v4 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], &lazy cache variable for type metadata for _SetStorage<DateComponents>, (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E0CAEAD8]);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarDefaultItemKind.Kind>, (void (*)(void))lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<_ViewList_ID.Canonical>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_retain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void type metadata accessor for Attribute<EnvironmentValues>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<EnvironmentValues>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>);
  }
}

void type metadata accessor for Attribute<ViewList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<ViewList>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>);
  }
}

void type metadata accessor for MutableBox<CachedEnvironment>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MutableBox<CachedEnvironment>)
  {
    v0 = type metadata accessor for MutableBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>);
  }
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>(0, &lazy cache variable for type metadata for _SetStorage<AGAttribute>, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, MEMORY[0x1E0CFED18]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
      result = MEMORY[0x18D75ED7C](*(_QWORD *)(v4 + 40), v18, 4);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[48];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_43;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_43;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_43;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_43:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_49;
                  if (v12 >= v9)
                    goto LABEL_43;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v33);
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v33, (uint64_t)&v30);
      switch(*((_QWORD *)&v31 + 1))
      {
        case 0:
          v19 = 0;
          goto LABEL_33;
        case 1:
          v19 = 1;
          goto LABEL_33;
        case 2:
          v19 = 2;
          goto LABEL_33;
        case 3:
          v19 = 3;
          goto LABEL_33;
        case 4:
          v19 = 4;
          goto LABEL_33;
        case 5:
          v19 = 5;
          goto LABEL_33;
        case 6:
          v19 = 7;
LABEL_33:
          Hasher._combine(_:)(v19);
          break;
        default:
          v28[0] = v30;
          v28[1] = v31;
          v29 = v32;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v28);
          break;
      }
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_48;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      result = outlined init with take of ToolbarPlacement.Role((uint64_t)v33, *(_QWORD *)(v4 + 48) + 40 * v13);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t i;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_32;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_32;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_32;
            v16 = v6[v5];
            if (!v16)
            {
              v5 = v15 + 3;
              if (v15 + 3 >= v10)
              {
LABEL_32:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v5];
              for (i = v15 + 3; !v16; ++i)
              {
                v5 = i + 1;
                if (__OFADD__(i, 1))
                  goto LABEL_38;
                if (v5 >= v10)
                  goto LABEL_32;
                v16 = v6[v5];
              }
            }
          }
        }
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BYTE v33[48];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<Toolbar.BarLocation>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_51;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_51;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_51;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_51:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_57;
                  if (v12 >= v9)
                    goto LABEL_51;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of Toolbar.BarLocation(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v33);
      Hasher.init(_seed:)();
      outlined init with copy of Toolbar.BarLocation((uint64_t)v33, (uint64_t)&v30);
      switch(*((_QWORD *)&v31 + 1))
      {
        case 0:
          v19 = 0;
          goto LABEL_41;
        case 1:
          v19 = 1;
          goto LABEL_41;
        case 2:
          v19 = 2;
          goto LABEL_41;
        case 3:
          v19 = 3;
          goto LABEL_41;
        case 4:
          v19 = 4;
          goto LABEL_41;
        case 5:
          v19 = 5;
          goto LABEL_41;
        case 6:
          v19 = 6;
          goto LABEL_41;
        case 7:
          v19 = 7;
          goto LABEL_41;
        case 8:
          v19 = 8;
          goto LABEL_41;
        case 9:
          v19 = 9;
          goto LABEL_41;
        case 0xALL:
          v19 = 10;
          goto LABEL_41;
        case 0xBLL:
          v19 = 11;
          goto LABEL_41;
        case 0xCLL:
          v19 = 12;
          goto LABEL_41;
        case 0xDLL:
          v19 = 13;
          goto LABEL_41;
        case 0xELL:
          v19 = 15;
LABEL_41:
          Hasher._combine(_:)(v19);
          break;
        default:
          v28[0] = v30;
          v28[1] = v31;
          v29 = v32;
          Hasher._combine(_:)(0xEuLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v28);
          break;
      }
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_56;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      result = outlined init with take of Toolbar.BarLocation((uint64_t)v33, *(_QWORD *)(v4 + 48) + 40 * v13);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t i;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<UInt32>, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE108], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v1;
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_34;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_34;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_34;
            v16 = v6[v5];
            if (!v16)
            {
              v5 = v15 + 3;
              if (v15 + 3 >= v10)
                goto LABEL_34;
              v16 = v6[v5];
              if (!v16)
              {
                v5 = v15 + 4;
                if (v15 + 4 >= v10)
                {
LABEL_34:
                  if (v28 >= 64)
                    bzero((void *)(v2 + 56), 8 * v10);
                  else
                    *v6 = v26;
                  v1 = v27;
                  *(_QWORD *)(v2 + 16) = 0;
                  break;
                }
                v16 = v6[v5];
                for (i = v15 + 4; !v16; ++i)
                {
                  v5 = i + 1;
                  if (__OFADD__(i, 1))
                    goto LABEL_40;
                  if (v5 >= v10)
                    goto LABEL_34;
                  v16 = v6[v5];
                }
              }
            }
          }
        }
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
      result = MEMORY[0x18D75ED7C](*(_QWORD *)(v4 + 40), v18, 4);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  Swift::UInt v31[2];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<AccessibilityRelationshipScope.Key>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9)
          goto LABEL_33;
        v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v9)
            goto LABEL_33;
          v18 = v6[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v9)
              goto LABEL_33;
            v18 = v6[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v18 = v6[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_23:
        v8 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (__int128 *)(*(_QWORD *)(v2 + 48) + 48 * v16);
      v29 = *v20;
      v30 = v20[1];
      *(_OWORD *)v31 = v20[2];
      Hasher.init(_seed:)();
      AnyHashable.hash(into:)();
      Hasher._combine(_:)(v31[1]);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 48 * v13);
      *v14 = v29;
      v14[1] = v30;
      v14[2] = *(_OWORD *)v31;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v5 = 0;
  v31 = (_QWORD *)(v2 + 56);
  v6 = 1 << *(_BYTE *)(v2 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = v3 + 56;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_38;
    if (v15 >= v9)
      break;
    v16 = v31[v15];
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v9)
        break;
      v16 = v31[v5];
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v9)
          break;
        v16 = v31[v5];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v9)
            break;
          v16 = v31[v17];
          if (!v16)
          {
            while (1)
            {
              v5 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v5 >= v9)
                goto LABEL_33;
              v16 = v31[v5];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v5 = v17;
        }
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = (Swift::UInt *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v19 = *v18;
    v20 = v18[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x187154C3CLL);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v10 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (Swift::UInt *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v19;
    v12[1] = v20;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_33:
  v29 = 1 << *(_BYTE *)(v2 + 32);
  if (v29 > 63)
    bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v29;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for CommandGroupPlacementBox(0);
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CommandGroupPlacementBox>, v7, &lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, (uint64_t)&protocol conformance descriptor for CommandGroupPlacementBox);
  v8 = static _SetStorage.resize(original:capacity:move:)();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v33 = v0;
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v11 = *(_QWORD *)(v6 + 56);
    v35 = (_QWORD *)(v6 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v34 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 56;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v16 << 6);
      }
      else
      {
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v34)
          goto LABEL_33;
        v21 = v35[v20];
        ++v16;
        if (!v21)
        {
          v16 = v20 + 1;
          if (v20 + 1 >= v34)
            goto LABEL_33;
          v21 = v35[v16];
          if (!v21)
          {
            v16 = v20 + 2;
            if (v20 + 2 >= v34)
              goto LABEL_33;
            v21 = v35[v16];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v31 = 1 << *(_BYTE *)(v6 + 32);
                if (v31 > 63)
                  bzero(v35, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v31;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v21 = v35[v22];
              if (!v21)
              {
                while (1)
                {
                  v16 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_39;
                  if (v16 >= v34)
                    goto LABEL_33;
                  v21 = v35[v16];
                  ++v22;
                  if (v21)
                    goto LABEL_23;
                }
              }
              v16 = v22;
            }
          }
        }
LABEL_23:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v23 = *(_QWORD *)(v36 + 72);
      outlined init with take of TableCellFormula(*(_QWORD *)(v6 + 48) + v23 * v19, (uint64_t)v5, type metadata accessor for CommandGroupPlacementBox);
      Hasher.init(_seed:)();
      type metadata accessor for CommandGroupPlacement(0);
      UUID.hash(into:)();
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v9 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v17 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      result = outlined init with take of TableCellFormula((uint64_t)v5, *(_QWORD *)(v9 + 48) + v17 * v23, type metadata accessor for CommandGroupPlacementBox);
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v1 = v9;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26[8];
  Swift::UInt v27;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v25 = 1 << *(_BYTE *)(v2 + 32);
                if (v25 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v25;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      outlined init with take of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(v2 + 48) + 16 * v14, (uint64_t)v26);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v18 = -1 << *(_BYTE *)(v4 + 32);
      v19 = result & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v21 = 0;
        v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v23 = v20 == v22;
          if (v20 == v22)
            v20 = 0;
          v21 |= v23;
          v24 = *(_QWORD *)(v11 + 8 * v20);
        }
        while (v24 == -1);
        v12 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      result = outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v26, *(_QWORD *)(v4 + 48) + 16 * v12);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<CommandFlag>, (void (*)(void))lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v27 = v1;
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  int64_t v34;
  _QWORD *v35;
  __int128 v36;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ArchivedViewState.ID>, (void (*)(void))lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_37;
  v6 = 0;
  v35 = (_QWORD *)(v2 + 56);
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v34 = (unint64_t)(v7 + 63) >> 6;
  v10 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v6 << 6);
      goto LABEL_24;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_38;
    if (v15 >= v34)
      break;
    v16 = v35[v15];
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v34)
        break;
      v16 = v35[v6];
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v34)
          break;
        v16 = v35[v6];
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v34)
            break;
          v16 = v35[v17];
          if (!v16)
          {
            while (1)
            {
              v6 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v6 >= v34)
                goto LABEL_33;
              v16 = v35[v6];
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v6 = v17;
        }
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_24:
    v18 = v2;
    v19 = *(_QWORD *)(v2 + 48) + 24 * v14;
    v21 = *(_DWORD *)v19;
    v20 = *(_DWORD *)(v19 + 4);
    v23 = *(_DWORD *)(v19 + 8);
    v22 = *(_DWORD *)(v19 + 12);
    *(_QWORD *)&v4 = *(_QWORD *)(v19 + 16);
    v36 = v4;
    Hasher.init(_seed:)();
    Hasher.combine(bytes:)();
    Hasher._combine(_:)(DWORD1(v36));
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v5 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v28 = 0;
    v29 = (unint64_t)(63 - v25) >> 6;
    do
    {
      if (++v27 == v29 && (v28 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
      }
      v30 = v27 == v29;
      if (v27 == v29)
        v27 = 0;
      v28 |= v30;
      v31 = *(_QWORD *)(v10 + 8 * v27);
    }
    while (v31 == -1);
    v11 = __clz(__rbit64(~v31)) + (v27 << 6);
LABEL_7:
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v5 + 48) + 24 * v11;
    *(_DWORD *)v12 = v21;
    *(_DWORD *)(v12 + 4) = v20;
    *(_DWORD *)(v12 + 8) = v23;
    *(_DWORD *)(v12 + 12) = v22;
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v36 + 1);
    *(_QWORD *)(v12 + 16) = v36;
    ++*(_QWORD *)(v5 + 16);
    v2 = v18;
  }
LABEL_33:
  v32 = 1 << *(_BYTE *)(v2 + 32);
  if (v32 > 63)
    bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v35 = -1 << v32;
  v1 = v0;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_37:
  result = swift_release();
  *v1 = v5;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[48];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarItemPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of ToolbarItemPlacement.Role(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v27);
      Hasher.init(_seed:)();
      ToolbarItemPlacement.Role.hash(into:)();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        v13 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      result = outlined init with take of ToolbarItemPlacement.Role((uint64_t)v27, *(_QWORD *)(v4 + 48) + 48 * v13);
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarDefaultItemKind.Kind>, (void (*)(void))lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9)
          goto LABEL_33;
        v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v9)
            goto LABEL_33;
          v18 = v6[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v9)
              goto LABEL_33;
            v18 = v6[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v18 = v6[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_23:
        v8 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = *(_QWORD *)(v2 + 48) + 40 * v16;
      v29 = *(_OWORD *)v20;
      v30 = *(_OWORD *)(v20 + 16);
      v31 = *(_QWORD *)(v20 + 32);
      result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v4 + 48) + 40 * v13;
      *(_OWORD *)v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(_QWORD *)(v14 + 32) = v31;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<_ViewList_ID.Canonical>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9)
          goto LABEL_33;
        v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v9)
            goto LABEL_33;
          v18 = v6[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v9)
              goto LABEL_33;
            v18 = v6[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v30 = 1 << *(_BYTE *)(v2 + 32);
                if (v30 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v30;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v18 = v6[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_23:
        v8 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v16);
      v21 = *v20;
      v22 = v20[1];
      Hasher.init(_seed:)();
      _ViewList_ID.Canonical.hash(into:)();
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v4 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v13);
      *v14 = v21;
      v14[1] = v22;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityAttachmentModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t outlined destroy of _ViewListOutputs(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE3698] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of _ViewListOutputs.Views(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE3658] - 8) + 8))();
  return a1;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>(0, &lazy cache variable for type metadata for _SetStorage<AGAttribute>, (uint64_t (*)(uint64_t))type metadata accessor for AGAttribute, (unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, MEMORY[0x1E0CFED18]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    result = MEMORY[0x18D75ED7C](*(_QWORD *)(v4 + 40), v18, 4);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[48];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_45:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v16 >= v9)
      goto LABEL_43;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_43;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_43;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v32);
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v32, (uint64_t)&v29);
    switch(*((_QWORD *)&v30 + 1))
    {
      case 0:
        v19 = 0;
        goto LABEL_33;
      case 1:
        v19 = 1;
        goto LABEL_33;
      case 2:
        v19 = 2;
        goto LABEL_33;
      case 3:
        v19 = 3;
        goto LABEL_33;
      case 4:
        v19 = 4;
        goto LABEL_33;
      case 5:
        v19 = 5;
        goto LABEL_33;
      case 6:
        v19 = 7;
LABEL_33:
        Hasher._combine(_:)(v19);
        break;
      default:
        v27[0] = v29;
        v27[1] = v30;
        v28 = v31;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v27);
        break;
    }
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    result = outlined init with take of ToolbarPlacement.Role((uint64_t)v32, *(_QWORD *)(v4 + 48) + 40 * v13);
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_43:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_45;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_43;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_23;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v15 >= v10)
      goto LABEL_32;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_32;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_32;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
        {
          v5 = v15 + 3;
          if (v15 + 3 >= v10)
          {
LABEL_32:
            result = swift_release();
            v1 = v26;
            goto LABEL_34;
          }
          v16 = *(_QWORD *)(v6 + 8 * v5);
          v17 = v15 + 3;
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_23:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_35;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[48];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<Toolbar.BarLocation>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_53:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v16 >= v9)
      goto LABEL_51;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_51;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_51;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of Toolbar.BarLocation(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v32);
    Hasher.init(_seed:)();
    outlined init with copy of Toolbar.BarLocation((uint64_t)v32, (uint64_t)&v29);
    switch(*((_QWORD *)&v30 + 1))
    {
      case 0:
        v19 = 0;
        goto LABEL_41;
      case 1:
        v19 = 1;
        goto LABEL_41;
      case 2:
        v19 = 2;
        goto LABEL_41;
      case 3:
        v19 = 3;
        goto LABEL_41;
      case 4:
        v19 = 4;
        goto LABEL_41;
      case 5:
        v19 = 5;
        goto LABEL_41;
      case 6:
        v19 = 6;
        goto LABEL_41;
      case 7:
        v19 = 7;
        goto LABEL_41;
      case 8:
        v19 = 8;
        goto LABEL_41;
      case 9:
        v19 = 9;
        goto LABEL_41;
      case 0xALL:
        v19 = 10;
        goto LABEL_41;
      case 0xBLL:
        v19 = 11;
        goto LABEL_41;
      case 0xCLL:
        v19 = 12;
        goto LABEL_41;
      case 0xDLL:
        v19 = 13;
        goto LABEL_41;
      case 0xELL:
        v19 = 15;
LABEL_41:
        Hasher._combine(_:)(v19);
        break;
      default:
        v27[0] = v29;
        v27[1] = v30;
        v28 = v31;
        Hasher._combine(_:)(0xEuLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v27);
        break;
    }
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_54;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    result = outlined init with take of Toolbar.BarLocation((uint64_t)v32, *(_QWORD *)(v4 + 48) + 40 * v13);
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_51:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_53;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_51;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_55:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEA978], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25[8];
  Swift::UInt v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(_QWORD *)(v2 + 48) + 16 * v14, (uint64_t)v25);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v26);
    result = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v21 = 0;
      v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v23 = v20 == v22;
        if (v20 == v22)
          v20 = 0;
        v21 |= v23;
        v24 = *(_QWORD *)(v11 + 8 * v20);
      }
      while (v24 == -1);
      v12 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    result = outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v25, *(_QWORD *)(v4 + 48) + 16 * v12);
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<UInt32>, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEE108], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_36:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_25;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v15 >= v10)
      goto LABEL_34;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_34;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_34;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
        {
          v5 = v15 + 3;
          if (v15 + 3 >= v10)
            goto LABEL_34;
          v16 = *(_QWORD *)(v6 + 8 * v5);
          if (!v16)
          {
            v5 = v15 + 4;
            if (v15 + 4 >= v10)
            {
LABEL_34:
              result = swift_release();
              v1 = v26;
              goto LABEL_36;
            }
            v16 = *(_QWORD *)(v6 + 8 * v5);
            v17 = v15 + 4;
            if (!v16)
              break;
          }
        }
      }
    }
LABEL_24:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_25:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    result = MEMORY[0x18D75ED7C](*(_QWORD *)(v4 + 40), v18, 4);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_34;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_24;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  Swift::UInt v30[2];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<AccessibilityRelationshipScope.Key>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_33;
      v20 = *(_QWORD *)(v6 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_33;
        v20 = *(_QWORD *)(v6 + 8 * v12);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v8 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    outlined init with copy of AccessibilityRelationshipScope.Key(*(_QWORD *)(v2 + 48) + 48 * v18, (uint64_t)v29);
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(v30[1]);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_OWORD *)(*(_QWORD *)(v4 + 48) + 48 * v13);
    v15 = v29[0];
    v16 = *(_OWORD *)v30;
    v14[1] = v29[1];
    v14[2] = v16;
    *v14 = v15;
    ++*(_QWORD *)(v4 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_35;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v30 = (unint64_t)(v7 + 63) >> 6;
  v10 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v15 >= v30)
      break;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v30)
        break;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v30)
          break;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v30)
            break;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v5 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_37;
              if (v5 >= v30)
                goto LABEL_33;
              v16 = *(_QWORD *)(v6 + 8 * v5);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v5 = v17;
        }
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = (Swift::UInt *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v19 = *v18;
    v20 = v18[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v20);
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v25 = 0;
    v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x18715B9D0);
      }
      v27 = v24 == v26;
      if (v24 == v26)
        v24 = 0;
      v25 |= v27;
      v28 = *(_QWORD *)(v10 + 8 * v24);
    }
    while (v28 == -1);
    v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (Swift::UInt *)(*(_QWORD *)(v4 + 48) + 16 * v11);
    *v12 = v19;
    v12[1] = v20;
    ++*(_QWORD *)(v4 + 16);
  }
LABEL_33:
  result = swift_release();
  v1 = v0;
LABEL_35:
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;

  v1 = v0;
  v2 = type metadata accessor for CommandGroupPlacementBox(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CommandGroupPlacementBox>, v8, &lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, (uint64_t)&protocol conformance descriptor for CommandGroupPlacementBox);
  v9 = static _SetStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v7 + 32);
  v12 = *(_QWORD *)(v7 + 56);
  v32 = v0;
  v33 = v7 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v34 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v34)
      goto LABEL_33;
    v22 = *(_QWORD *)(v33 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v22 = *(_QWORD *)(v33 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v34)
          goto LABEL_33;
        v22 = *(_QWORD *)(v33 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    v24 = *(_QWORD *)(v3 + 72);
    outlined init with copy of CommandGroupPlacementBox(*(_QWORD *)(v7 + 48) + v24 * v20, (uint64_t)v6);
    Hasher.init(_seed:)();
    type metadata accessor for CommandGroupPlacement(0);
    UUID.hash(into:)();
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = outlined init with take of TableCellFormula((uint64_t)v6, *(_QWORD *)(v10 + 48) + v18 * v24, type metadata accessor for CommandGroupPlacementBox);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v34)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v32;
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v33 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v34)
      goto LABEL_33;
    v22 = *(_QWORD *)(v33 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<CommandFlag>, (void (*)(void))lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _SetStorage<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int64_t v34;
  __int128 v35;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ArchivedViewState.ID>, (void (*)(void))lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v5 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_35;
  }
  v6 = 0;
  v33 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v34 = (unint64_t)(v7 + 63) >> 6;
  v10 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v6 << 6);
      goto LABEL_24;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_36;
    if (v15 >= v34)
      break;
    v16 = *(_QWORD *)(v33 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v34)
        break;
      v16 = *(_QWORD *)(v33 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v34)
          break;
        v16 = *(_QWORD *)(v33 + 8 * v6);
        if (!v16)
        {
          v17 = v15 + 3;
          if (v17 >= v34)
            break;
          v16 = *(_QWORD *)(v33 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v6 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_37;
              if (v6 >= v34)
                goto LABEL_33;
              v16 = *(_QWORD *)(v33 + 8 * v6);
              ++v17;
              if (v16)
                goto LABEL_23;
            }
          }
          v6 = v17;
        }
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_24:
    v18 = v2;
    v19 = *(_QWORD *)(v2 + 48) + 24 * v14;
    v20 = *(_DWORD *)v19;
    v21 = *(_DWORD *)(v19 + 4);
    v23 = *(_DWORD *)(v19 + 8);
    v22 = *(_DWORD *)(v19 + 12);
    *(_QWORD *)&v4 = *(_QWORD *)(v19 + 16);
    v35 = v4;
    Hasher.init(_seed:)();
    Hasher.combine(bytes:)();
    Hasher._combine(_:)(DWORD1(v35));
    v24 = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v5 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    v28 = 0;
    v29 = (unint64_t)(63 - v25) >> 6;
    do
    {
      if (++v27 == v29 && (v28 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
      v30 = v27 == v29;
      if (v27 == v29)
        v27 = 0;
      v28 |= v30;
      v31 = *(_QWORD *)(v10 + 8 * v27);
    }
    while (v31 == -1);
    v11 = __clz(__rbit64(~v31)) + (v27 << 6);
LABEL_7:
    *(_QWORD *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v5 + 48) + 24 * v11;
    *(_DWORD *)v12 = v20;
    *(_DWORD *)(v12 + 4) = v21;
    *(_DWORD *)(v12 + 8) = v23;
    *(_DWORD *)(v12 + 12) = v22;
    *((_QWORD *)&v4 + 1) = *((_QWORD *)&v35 + 1);
    *(_QWORD *)(v12 + 16) = v35;
    ++*(_QWORD *)(v5 + 16);
    v2 = v18;
  }
LABEL_33:
  result = swift_release();
  v1 = v0;
LABEL_35:
  *v1 = v5;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _BYTE v26[48];

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarItemPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of ToolbarItemPlacement.Role(*(_QWORD *)(v2 + 48) + 48 * v15, (uint64_t)v26);
    Hasher.init(_seed:)();
    ToolbarItemPlacement.Role.hash(into:)();
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v10 + 8 * v21);
      }
      while (v25 == -1);
      v13 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    result = outlined init with take of ToolbarItemPlacement.Role((uint64_t)v26, *(_QWORD *)(v4 + 48) + 48 * v13);
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<UIOpenURLContext>(0, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E0D01698, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarDefaultItemKind.Kind>, (void (*)(void))lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_33;
      v20 = *(_QWORD *)(v6 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_33;
        v20 = *(_QWORD *)(v6 + 8 * v12);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v8 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v4 + 48) + 40 * v13;
    v15 = v29[0];
    v16 = v29[1];
    *(_QWORD *)(v14 + 32) = v30;
    *(_OWORD *)v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(_QWORD *)(v4 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<_ViewList_ID.Canonical>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v15 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_24;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v9)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v9)
        goto LABEL_33;
      v18 = *(_QWORD *)(v6 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v9)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v8 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_24:
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    Hasher.init(_seed:)();
    swift_retain();
    _ViewList_ID.Canonical.hash(into:)();
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v10 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    *v14 = v21;
    v14[1] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance <> StaticIf<A, B, C>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  static StaticIf<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40));
}

void static StaticIf<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;

  v12 = *a1;
  v13 = *((_DWORD *)a2 + 2);
  v14 = *((_DWORD *)a2 + 6);
  v15 = *((_DWORD *)a2 + 7);
  v17 = *((_DWORD *)a2 + 8);
  v16 = *((_DWORD *)a2 + 9);
  v18 = a2[5];
  v19 = a2[2];
  v20 = *a2;
  LODWORD(v21) = v13;
  v22 = v19;
  v23 = __PAIR64__(v15, v14);
  v24 = v17;
  v25 = v16;
  v26 = v18;
  if (((*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a8 + 8))(&v20, a5, a8) & 1) != 0)
  {
    v27 = v12;
    v20 = a5;
    v21 = a6;
    v22 = a7;
    v23 = a8;
    type metadata accessor for StaticIf();
  }
  v27 = v12;
  v20 = a5;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  type metadata accessor for StaticIf();
}

void sub_186E4E1C8()
{
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  JUMPOUT(0x186E4E260);
}

uint64_t getEnumTagSinglePayload for Button(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;

  v6 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + ((v7 + 75) & ~v7);
  if ((unint64_t)(v8 + 1) > 0x30)
    v9 = v8 + 1;
  else
    v9 = 48;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= 0xFD)
    v12 = 253;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = v7 | 7;
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = v9 + v14 + 1;
  if (a2 <= v12)
    goto LABEL_27;
  v16 = ((v15 + ((v13 + 2) & ~v13)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((a2 - v12 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_27:
      v23 = (a1 + v13 + 2) & ~v13;
      if (v11 > 0xFD)
        return (*(uint64_t (**)(uint64_t))(v10 + 48))((v15 + v23) & ~v14);
      v24 = *(unsigned __int8 *)(v23 + v9);
      if (v24 >= 3)
        return (v24 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_27;
LABEL_18:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v22 = v16;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return v12 + v21 + 1;
}

void protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance StaticSourceWriter<A, B>()
{
  static StaticSourceWriter._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StaticSourceWriter<A, B>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

void static StaticSourceWriter._makeInputs(modifier:inputs:)()
{
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_186E4E4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OffsetAttribute2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64))
    closure #1 in static StaticSourceWriter._makeInputs(modifier:inputs:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AnySource.init<A>(_:)(OffsetAttribute2, v3, v2, v5);
  v7 = type metadata accessor for SourceInput(0, v1, v0, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v7);
  lazy protocol witness table accessor for type AnySource and conformance AnySource();
  return _GraphInputs.append<A, B>(_:to:)();
}

uint64_t AnySource.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for SourceFormula(0, a2, a3, a4);
  AGCreateWeakAttribute();
  return v4;
}

uint64_t type metadata accessor for SourceFormula(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SourceFormula);
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = type metadata accessor for CVarArg(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for Attribute<ViewList>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for Range<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void _sSnySiGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0DEB418]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>))
  {
    type metadata accessor for ViewList();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (uint64_t (*)(uint64_t))type metadata accessor for ViewList, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>));
  }
}

uint64_t partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;

  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], a2);
}

unint64_t lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ViewResponderTransform and conformance ViewResponderTransform;
  if (!lazy protocol witness table cache variable for type ViewResponderTransform and conformance ViewResponderTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewResponderTransform, &type metadata for ViewResponderTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponderTransform and conformance ViewResponderTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryTransform and conformance GeometryTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeometryTransform and conformance GeometryTransform;
  if (!lazy protocol witness table cache variable for type GeometryTransform and conformance GeometryTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GeometryTransform, &type metadata for GeometryTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryTransform and conformance GeometryTransform);
  }
  return result;
}

uint64_t outlined retain of _ViewInputs(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of _GraphInputs(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _GraphInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined release of _ViewInputs(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

void type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for _SetStorage();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for VStack<TableHeaderViewCore>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries;
  if (!lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE50E8], MEMORY[0x1E0CE50F8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries);
  }
  return result;
}

void type metadata accessor for External<[Scrollable]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<[Scrollable]>)
  {
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(255, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<[Scrollable]>);
  }
}

void type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _AnyPreferenceKey();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewLeafView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (((v10 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + *(_QWORD *)(v9 + 64) <= 0x18
      ? (v12 = v11 > 7)
      : (v12 = 1),
        v12))
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v14 = (_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v15 = (void **)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v16 = *v15;
    *v14 = *v15;
    v17 = ((unint64_t)v14 + v10 + 8) & ~v10;
    v18 = ((unint64_t)v15 + v10 + 8) & ~v10;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v20 = v16;
    v19(v17, v18, v13);
  }
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AlignmentWritingModifier(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  return _ViewListOutputs.multiModifier<A>(_:inputs:)();
}

uint64_t partial apply for closure #1 in _IncrementalLayout_Children.apply(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return closure #1 in _IncrementalLayout_Children.apply(from:style:to:)(a1, a2, a3);
}

uint64_t closure #1 in _IncrementalLayout_Children.apply(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3;
  uint64_t v5;

  v5 = *a2;
  applyNode #1 (start:style:node:transform:section:) in _IncrementalLayout_Children.apply(from:style:to:)(a1, (uint64_t)&v5, a3);
  return v3 & 1;
}

void closure #1 in static StaticIf<>._makeView(view:inputs:)()
{
  type metadata accessor for StaticIf();
}

uint64_t sub_186E4EEC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v7[2] = a1;
  v8 = v2;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, v1, (uint64_t)v7, v2, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void type metadata accessor for Attribute<LayoutComputer>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Attribute();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t result;
  double *v33;
  double v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  __int128 v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unsigned int v74;
  char v77;
  int v78[7];
  char v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  double v83[4];
  _OWORD v84[3];
  _OWORD v85[2];
  int v86;
  __int128 v87;
  _OWORD v88[2];
  _OWORD v89[2];
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v81 = *(_QWORD *)(a2 + 48);
  v82 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v87 = *(_QWORD *)(a2 + 48);
  DWORD2(v87) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v6 = *(_QWORD *)a2;
    *(_OWORD *)v83 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v83[1] + 4) = *(_OWORD *)(a2 + 20);
    v7 = *(_DWORD *)(a2 + 36);
    v71 = *(_QWORD *)(a2 + 40);
    v73 = v6;
    v8 = *(_OWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 64);
    v88[1] = *(_OWORD *)(a2 + 32);
    v89[0] = v8;
    v89[1] = v9;
    v90 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v87 = *(_OWORD *)a2;
    v88[0] = v10;
    if ((v7 & 0x20) != 0)
    {
      *(_QWORD *)&v84[0] = v81;
      DWORD2(v84[0]) = v82;
      outlined retain of _ViewInputs(a2);
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v35 = v7;
        if ((v7 & 0x40) != 0)
        {
          v35 = v7 & 0xBF;
          DWORD1(v88[1]) = v7 & 0xFFFFFFBF;
        }
        if (v35 < 0)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, MEMORY[0x1E0CE4068], MEMORY[0x1E0CE4058], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          lazy protocol witness table accessor for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>();
          PreferenceKeys.add(_:)();
        }
      }
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    if ((v7 & 0x10) != 0)
    {
      v36 = *(_OWORD *)(a2 + 48);
      v84[2] = *(_OWORD *)(a2 + 32);
      v85[0] = v36;
      v85[1] = *(_OWORD *)(a2 + 64);
      v86 = *(_DWORD *)(a2 + 80);
      v37 = *(_OWORD *)(a2 + 16);
      v84[0] = *(_OWORD *)a2;
      v84[1] = v37;
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    v38 = *(_OWORD *)(a2 + 48);
    v84[2] = *(_OWORD *)(a2 + 32);
    v85[0] = v38;
    v85[1] = *(_OWORD *)(a2 + 64);
    v86 = *(_DWORD *)(a2 + 80);
    v39 = *(_OWORD *)(a2 + 16);
    v84[0] = *(_OWORD *)a2;
    v84[1] = v39;
    if ((_ViewInputs.isScrapeable.getter() & 1) != 0)
    {
      ScrapeableID.init()();
      v74 = v84[0];
      _ViewInputs.scrapeableParentID.setter();
    }
    else
    {
      v74 = 0;
    }
    v78[0] = a1;
    *(_QWORD *)&v84[0] = v87;
    DWORD2(v84[0]) = DWORD2(v87);
    *(_QWORD *)&v84[1] = *(_QWORD *)&v88[0];
    *(_OWORD *)((char *)&v84[1] + 8) = *(_OWORD *)((char *)v88 + 8);
    *((_QWORD *)&v84[2] + 1) = *((_QWORD *)&v88[1] + 1);
    *(_QWORD *)&v85[0] = *(_QWORD *)&v89[0];
    *(_OWORD *)((char *)v85 + 8) = *(_OWORD *)((char *)v89 + 8);
    *((_QWORD *)&v85[1] + 1) = *((_QWORD *)&v89[1] + 1);
    v86 = v90;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)(v78, (uint64_t *)v84, a3, (double *)&v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v7 & 0x10) != 0)
    {
      *(_QWORD *)&v84[0] = v81;
      DWORD2(v84[0]) = v82;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v84[0] = v80;
        v40 = _ViewOutputs.subscript.getter();
        v41 = *MEMORY[0x1E0CFED28];
        v69 = *MEMORY[0x1E0CFED28];
        if ((v40 & 0x100000000) == 0)
          v41 = v40;
      }
      else
      {
        v41 = *MEMORY[0x1E0CFED28];
        v69 = *MEMORY[0x1E0CFED28];
      }
      v70 = v41;
      _DisplayList_Identity.init()();
      v68 = v84[0];
      v42 = *(_OWORD *)(a2 + 48);
      v84[2] = *(_OWORD *)(a2 + 32);
      v85[0] = v42;
      v85[1] = *(_OWORD *)(a2 + 64);
      v86 = *(_DWORD *)(a2 + 80);
      v43 = *(_OWORD *)(a2 + 16);
      v84[0] = *(_OWORD *)a2;
      v84[1] = v43;
      v78[0] = v68;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v44 = v79;
      *(_QWORD *)&v84[0] = v73;
      *(_OWORD *)((char *)v84 + 8) = *(_OWORD *)v83;
      *(_OWORD *)((char *)&v84[1] + 4) = *(_OWORD *)((char *)&v83[1] + 4);
      DWORD1(v84[2]) = v7;
      *((_QWORD *)&v84[2] + 1) = v71;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v84[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v72 = v44 & 1;
      v67 = *(_OWORD *)v78;
      v66 = _GraphValue.value.getter();
      v45 = *(_OWORD *)(a2 + 48);
      v84[2] = *(_OWORD *)(a2 + 32);
      v85[0] = v45;
      v85[1] = *(_OWORD *)(a2 + 64);
      v86 = *(_DWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 16);
      v84[0] = *(_OWORD *)a2;
      v84[1] = v46;
      v65 = _ViewInputs.animatedSize()();
      v47 = *(_OWORD *)(a2 + 48);
      v84[2] = *(_OWORD *)(a2 + 32);
      v85[0] = v47;
      v85[1] = *(_OWORD *)(a2 + 64);
      v86 = *(_DWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 16);
      v84[0] = *(_OWORD *)a2;
      v84[1] = v48;
      v64 = _ViewInputs.animatedPosition()();
      v49 = *(_OWORD *)(a2 + 48);
      v84[2] = *(_OWORD *)(a2 + 32);
      v85[0] = v49;
      v85[1] = *(_OWORD *)(a2 + 64);
      v86 = *(_DWORD *)(a2 + 80);
      v50 = *(_OWORD *)(a2 + 16);
      v84[0] = *(_OWORD *)a2;
      v84[1] = v50;
      v51 = _ViewInputs.containerPosition.getter();
      v52 = *(_OWORD *)(a2 + 48);
      v84[2] = *(_OWORD *)(a2 + 32);
      v85[0] = v52;
      v85[1] = *(_OWORD *)(a2 + 64);
      v86 = *(_DWORD *)(a2 + 80);
      v53 = *(_OWORD *)(a2 + 16);
      v84[0] = *(_OWORD *)a2;
      v84[1] = v53;
      v54 = _ViewInputs.environment.getter();
      v55 = v80;
      v56 = DWORD2(v80);
      v57 = HIDWORD(v80);
      v84[0] = v80;
      v58 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v84[0] = v55;
      if ((v58 & 0x100000000) != 0)
        v59 = v69;
      else
        v59 = v58;
      *((_QWORD *)&v84[0] + 1) = __PAIR64__(v57, v56);
      v60 = _ViewOutputs.subscript.getter();
      LODWORD(v84[0]) = v68;
      if ((v60 & 0x100000000) != 0)
        v61 = v69;
      else
        v61 = v60;
      BYTE4(v84[0]) = v72;
      *(_OWORD *)((char *)v84 + 8) = v67;
      BYTE8(v84[1]) = v77;
      HIDWORD(v84[1]) = v66;
      *(_QWORD *)&v84[2] = __PAIR64__(v64, v65);
      *((_QWORD *)&v84[2] + 1) = __PAIR64__(v54, v51);
      *(_QWORD *)&v85[0] = __PAIR64__(v70, v59);
      DWORD2(v85[0]) = v61;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for DisplayListTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v84[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    v62 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v80, *((unint64_t *)&v80 + 1), v74);
    LOBYTE(v84[0]) = 0;
    v63 = v62;
    _ViewOutputs.subscript.setter();
    LOBYTE(v84[0]) = 1;
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v63, 0x100000000, a2);
    LOBYTE(v84[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v33 = a4;
    *(_QWORD *)a4 = v80;
    v34 = *((double *)&v80 + 1);
    goto LABEL_43;
  }
  *(_QWORD *)&v87 = v81;
  DWORD2(v87) = v82;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0
    || (*(_QWORD *)&v87 = v81, DWORD2(v87) = v82, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0))
  {
    v15 = *(_OWORD *)(a2 + 48);
    v88[1] = *(_OWORD *)(a2 + 32);
    v89[0] = v15;
    v89[1] = *(_OWORD *)(a2 + 64);
    v90 = *(_DWORD *)(a2 + 80);
    v16 = *(_OWORD *)(a2 + 16);
    v87 = *(_OWORD *)a2;
    v88[0] = v16;
    goto LABEL_9;
  }
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  v11 = v87;
  v12 = *(_OWORD *)(a2 + 48);
  v88[1] = *(_OWORD *)(a2 + 32);
  v89[0] = v12;
  v89[1] = *(_OWORD *)(a2 + 64);
  v90 = *(_DWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 16);
  v87 = *(_OWORD *)a2;
  v88[0] = v13;
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    outlined retain of _ViewInputs(a2);
    v14 = 0;
    goto LABEL_10;
  }
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  LODWORD(v84[0]) &= ~0x10u;
  PropertyList.subscript.setter();
  v14 = 1;
LABEL_10:
  LODWORD(v80) = a1;
  v17 = *(_OWORD *)(a2 + 48);
  v84[2] = *(_OWORD *)(a2 + 32);
  v85[0] = v17;
  v85[1] = *(_OWORD *)(a2 + 64);
  v86 = *(_DWORD *)(a2 + 80);
  v18 = *(_OWORD *)(a2 + 16);
  v84[0] = *(_OWORD *)a2;
  v84[1] = v18;
  static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)((int *)&v80, (uint64_t *)v84, a3, v83);
  if (v14)
  {
    v84[0] = *(_OWORD *)v83;
    _ViewOutputs.subscript.getter();
    v19 = *(_OWORD *)(a2 + 48);
    v84[2] = *(_OWORD *)(a2 + 32);
    v85[0] = v19;
    v85[1] = *(_OWORD *)(a2 + 64);
    v86 = *(_DWORD *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 16);
    v84[0] = *(_OWORD *)a2;
    v84[1] = v20;
    v21 = _ViewInputs.environment.getter();
    MEMORY[0x1E0C80A78](v21, v22);
    *(_QWORD *)&v84[0] = v81;
    DWORD2(v84[0]) = v82;
    MEMORY[0x1E0C80A78](v23, v24);
    outlined retain of [Text.Modifier]((uint64_t)&v81);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v84[0] = v81;
  DWORD2(v84[0]) = v82;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v84[0] & 0x80) != 0)
    {
      v84[0] = *(_OWORD *)v83;
      v25 = _ViewOutputs.subscript.getter();
      if ((v25 & 0x100000000) != 0)
        v26 = *MEMORY[0x1E0CFED28];
      else
        v26 = v25;
      v27 = *(_OWORD *)(a2 + 48);
      v84[2] = *(_OWORD *)(a2 + 32);
      v85[0] = v27;
      v85[1] = *(_OWORD *)(a2 + 64);
      v86 = *(_DWORD *)(a2 + 80);
      v28 = *(_OWORD *)(a2 + 16);
      v84[0] = *(_OWORD *)a2;
      v84[1] = v28;
      v29 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v30 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v84[0]) = v29;
      *((_QWORD *)&v84[0] + 1) = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v31 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v84[0] = __PAIR64__(v31, v26);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v84[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v83, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v33 = a4;
  *a4 = v83[0];
  v34 = v83[1];
LABEL_43:
  v33[1] = v34;
  return result;
}

{
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t result;
  double *v33;
  double v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  __int128 v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v74;
  int v75[7];
  char v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  double v80[4];
  _OWORD v81[3];
  _OWORD v82[2];
  int v83;
  __int128 v84;
  _OWORD v85[2];
  _OWORD v86[2];
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v78 = *(_QWORD *)(a2 + 48);
  v79 = *(_DWORD *)(a2 + 56);
  *(_QWORD *)&v84 = *(_QWORD *)(a2 + 48);
  DWORD2(v84) = *(_DWORD *)(a2 + 56);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v6 = *(_QWORD *)a2;
    *(_OWORD *)v80 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v80[1] + 4) = *(_OWORD *)(a2 + 20);
    v7 = *(_DWORD *)(a2 + 36);
    v69 = *(_QWORD *)(a2 + 40);
    v71 = v6;
    v8 = *(_OWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 64);
    v85[1] = *(_OWORD *)(a2 + 32);
    v86[0] = v8;
    v86[1] = v9;
    v87 = *(_DWORD *)(a2 + 80);
    v10 = *(_OWORD *)(a2 + 16);
    v84 = *(_OWORD *)a2;
    v85[0] = v10;
    if ((v7 & 0x20) != 0)
    {
      *(_QWORD *)&v81[0] = v78;
      DWORD2(v81[0]) = v79;
      outlined retain of _ViewInputs(a2);
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v35 = v7;
        if ((v7 & 0x40) != 0)
        {
          v35 = v7 & 0xBF;
          DWORD1(v85[1]) = v7 & 0xFFFFFFBF;
        }
        if (v35 < 0)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ViewRespondersKey>, MEMORY[0x1E0CE4068], MEMORY[0x1E0CE4058], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
          lazy protocol witness table accessor for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>();
          PreferenceKeys.add(_:)();
        }
      }
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    if ((v7 & 0x10) != 0)
    {
      v36 = *(_OWORD *)(a2 + 48);
      v81[2] = *(_OWORD *)(a2 + 32);
      v82[0] = v36;
      v82[1] = *(_OWORD *)(a2 + 64);
      v83 = *(_DWORD *)(a2 + 80);
      v37 = *(_OWORD *)(a2 + 16);
      v81[0] = *(_OWORD *)a2;
      v81[1] = v37;
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    v75[0] = a1;
    *(_QWORD *)&v81[0] = v84;
    DWORD2(v81[0]) = DWORD2(v84);
    *(_QWORD *)&v81[1] = *(_QWORD *)&v85[0];
    *(_OWORD *)((char *)&v81[1] + 8) = *(_OWORD *)((char *)v85 + 8);
    *((_QWORD *)&v81[2] + 1) = *((_QWORD *)&v85[1] + 1);
    *(_QWORD *)&v82[0] = *(_QWORD *)&v86[0];
    *(_OWORD *)((char *)v82 + 8) = *(_OWORD *)((char *)v86 + 8);
    *((_QWORD *)&v82[1] + 1) = *((_QWORD *)&v86[1] + 1);
    v83 = v87;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)(v75, (uint64_t)v81, a3, (double *)&v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v7 & 0x10) != 0)
    {
      *(_QWORD *)&v81[0] = v78;
      DWORD2(v81[0]) = v79;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        v81[0] = v77;
        v38 = _ViewOutputs.subscript.getter();
        v39 = *MEMORY[0x1E0CFED28];
        v68 = *MEMORY[0x1E0CFED28];
        if ((v38 & 0x100000000) == 0)
          v39 = v38;
        v67 = v39;
      }
      else
      {
        v67 = *MEMORY[0x1E0CFED28];
        v68 = *MEMORY[0x1E0CFED28];
      }
      _DisplayList_Identity.init()();
      v66 = v81[0];
      v40 = *(_OWORD *)(a2 + 48);
      v81[2] = *(_OWORD *)(a2 + 32);
      v82[0] = v40;
      v82[1] = *(_OWORD *)(a2 + 64);
      v83 = *(_DWORD *)(a2 + 80);
      v41 = *(_OWORD *)(a2 + 16);
      v81[0] = *(_OWORD *)a2;
      v81[1] = v41;
      v75[0] = v66;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      v42 = v76;
      *(_QWORD *)&v81[0] = v71;
      *(_OWORD *)((char *)v81 + 8) = *(_OWORD *)v80;
      *(_OWORD *)((char *)&v81[1] + 4) = *(_OWORD *)((char *)&v80[1] + 4);
      DWORD1(v81[2]) = v7;
      *((_QWORD *)&v81[2] + 1) = v69;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v81[0]) = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformViewModifier>, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      v70 = v42 & 1;
      v65 = *(_OWORD *)v75;
      v64 = _GraphValue.value.getter();
      v43 = *(_OWORD *)(a2 + 48);
      v81[2] = *(_OWORD *)(a2 + 32);
      v82[0] = v43;
      v82[1] = *(_OWORD *)(a2 + 64);
      v83 = *(_DWORD *)(a2 + 80);
      v44 = *(_OWORD *)(a2 + 16);
      v81[0] = *(_OWORD *)a2;
      v81[1] = v44;
      v63 = _ViewInputs.animatedSize()();
      v45 = *(_OWORD *)(a2 + 48);
      v81[2] = *(_OWORD *)(a2 + 32);
      v82[0] = v45;
      v82[1] = *(_OWORD *)(a2 + 64);
      v83 = *(_DWORD *)(a2 + 80);
      v46 = *(_OWORD *)(a2 + 16);
      v81[0] = *(_OWORD *)a2;
      v81[1] = v46;
      v62 = _ViewInputs.animatedPosition()();
      v47 = *(_OWORD *)(a2 + 48);
      v81[2] = *(_OWORD *)(a2 + 32);
      v82[0] = v47;
      v82[1] = *(_OWORD *)(a2 + 64);
      v83 = *(_DWORD *)(a2 + 80);
      v48 = *(_OWORD *)(a2 + 16);
      v81[0] = *(_OWORD *)a2;
      v81[1] = v48;
      v49 = _ViewInputs.containerPosition.getter();
      v50 = *(_OWORD *)(a2 + 48);
      v81[2] = *(_OWORD *)(a2 + 32);
      v82[0] = v50;
      v82[1] = *(_OWORD *)(a2 + 64);
      v83 = *(_DWORD *)(a2 + 80);
      v51 = *(_OWORD *)(a2 + 16);
      v81[0] = *(_OWORD *)a2;
      v81[1] = v51;
      v52 = _ViewInputs.environment.getter();
      v53 = v77;
      v54 = DWORD2(v77);
      v55 = HIDWORD(v77);
      v81[0] = v77;
      v56 = _ViewOutputs.subscript.getter();
      *(_QWORD *)&v81[0] = v53;
      if ((v56 & 0x100000000) != 0)
        v57 = v68;
      else
        v57 = v56;
      *((_QWORD *)&v81[0] + 1) = __PAIR64__(v55, v54);
      v58 = _ViewOutputs.subscript.getter();
      LODWORD(v81[0]) = v66;
      if ((v58 & 0x100000000) != 0)
        v59 = v68;
      else
        v59 = v58;
      BYTE4(v81[0]) = v70;
      *(_OWORD *)((char *)v81 + 8) = v65;
      BYTE8(v81[1]) = v74;
      HIDWORD(v81[1]) = v64;
      *(_QWORD *)&v81[2] = __PAIR64__(v62, v63);
      *((_QWORD *)&v81[2] + 1) = __PAIR64__(v52, v49);
      *(_QWORD *)&v82[0] = __PAIR64__(v67, v57);
      DWORD2(v82[0]) = v59;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v81[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    v60 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (__int128 *)a2, v77, *((unint64_t *)&v77 + 1), 0);
    LOBYTE(v81[0]) = 0;
    v61 = v60;
    _ViewOutputs.subscript.setter();
    LOBYTE(v81[0]) = 1;
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v61, 0x100000000, a2);
    LOBYTE(v81[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v33 = a4;
    *(_QWORD *)a4 = v77;
    v34 = *((double *)&v77 + 1);
    goto LABEL_40;
  }
  *(_QWORD *)&v84 = v78;
  DWORD2(v84) = v79;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0
    || (*(_QWORD *)&v84 = v78, DWORD2(v84) = v79, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0))
  {
    v15 = *(_OWORD *)(a2 + 48);
    v85[1] = *(_OWORD *)(a2 + 32);
    v86[0] = v15;
    v86[1] = *(_OWORD *)(a2 + 64);
    v87 = *(_DWORD *)(a2 + 80);
    v16 = *(_OWORD *)(a2 + 16);
    v84 = *(_OWORD *)a2;
    v85[0] = v16;
    goto LABEL_9;
  }
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  v11 = v84;
  v12 = *(_OWORD *)(a2 + 48);
  v85[1] = *(_OWORD *)(a2 + 32);
  v86[0] = v12;
  v86[1] = *(_OWORD *)(a2 + 64);
  v87 = *(_DWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 16);
  v84 = *(_OWORD *)a2;
  v85[0] = v13;
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    outlined retain of _ViewInputs(a2);
    v14 = 0;
    goto LABEL_10;
  }
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  LODWORD(v81[0]) &= ~0x10u;
  PropertyList.subscript.setter();
  v14 = 1;
LABEL_10:
  LODWORD(v77) = a1;
  v17 = *(_OWORD *)(a2 + 48);
  v81[2] = *(_OWORD *)(a2 + 32);
  v82[0] = v17;
  v82[1] = *(_OWORD *)(a2 + 64);
  v83 = *(_DWORD *)(a2 + 80);
  v18 = *(_OWORD *)(a2 + 16);
  v81[0] = *(_OWORD *)a2;
  v81[1] = v18;
  static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)((int *)&v77, (uint64_t)v81, a3, v80);
  if (v14)
  {
    v81[0] = *(_OWORD *)v80;
    _ViewOutputs.subscript.getter();
    v19 = *(_OWORD *)(a2 + 48);
    v81[2] = *(_OWORD *)(a2 + 32);
    v82[0] = v19;
    v82[1] = *(_OWORD *)(a2 + 64);
    v83 = *(_DWORD *)(a2 + 80);
    v20 = *(_OWORD *)(a2 + 16);
    v81[0] = *(_OWORD *)a2;
    v81[1] = v20;
    v21 = _ViewInputs.environment.getter();
    MEMORY[0x1E0C80A78](v21, v22);
    *(_QWORD *)&v81[0] = v78;
    DWORD2(v81[0]) = v79;
    MEMORY[0x1E0C80A78](v23, v24);
    outlined retain of [Text.Modifier]((uint64_t)&v78);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v81[0] = v78;
  DWORD2(v81[0]) = v79;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v81[0] & 0x80) != 0)
    {
      v81[0] = *(_OWORD *)v80;
      v25 = _ViewOutputs.subscript.getter();
      if ((v25 & 0x100000000) != 0)
        v26 = *MEMORY[0x1E0CFED28];
      else
        v26 = v25;
      v27 = *(_OWORD *)(a2 + 48);
      v81[2] = *(_OWORD *)(a2 + 32);
      v82[0] = v27;
      v82[1] = *(_OWORD *)(a2 + 64);
      v83 = *(_DWORD *)(a2 + 80);
      v28 = *(_OWORD *)(a2 + 16);
      v81[0] = *(_OWORD *)a2;
      v81[1] = v28;
      v29 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v30 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v81[0]) = v29;
      *((_QWORD *)&v81[0] + 1) = v30;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v31 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_QWORD *)&v81[0] = __PAIR64__(v31, v26);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v81[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v80, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v33 = a4;
  *a4 = v80[0];
  v34 = v80[1];
LABEL_40:
  v33[1] = v34;
  return result;
}

uint64_t destroy for PropertiesTransform(uint64_t a1)
{

  return swift_unknownObjectWeakDestroy();
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

double static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int OffsetAttribute2;
  uint64_t KeyPath;
  char v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  int v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  v9 = a2[6];
  v10 = *((_DWORD *)a2 + 20);
  v20 = *a2;
  LODWORD(v21) = v6;
  v22 = v7;
  v23 = *(_OWORD *)(a2 + 3);
  v24 = v8;
  v25 = v9;
  v26 = *(_OWORD *)(a2 + 7);
  v17 = v26;
  v27 = a2[9];
  v28 = v10;
  a3(&v18);
  v20 = v9;
  LODWORD(v21) = v17;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    v20 = v9;
    LODWORD(v21) = v17;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LODWORD(v20) = v5;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
      _GraphValue.value.getter();
      OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      KeyPath = swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      if ((v13 & 1) != 0)
      {
        LODWORD(v20) = OffsetAttribute2;
        v21 = KeyPath;
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        type metadata accessor for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>();
        lazy protocol witness table accessor for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>();
        Attribute.init<A>(body:value:flags:update:)();
      }
      else
      {
        AGGraphCreateOffsetAttribute2();
      }
      v14 = swift_release();
      v20 = v9;
      LODWORD(v21) = v17;
      MEMORY[0x1E0C80A78](v14, v15);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)a4 = v18;
  result = v19;
  a4[1] = v19;
  return result;
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance StatusBarKey(_WORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x18D75FF28](a1, v6, a5);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t __swift_memcpy11_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t _UIKitAddSubview(void *a1, void *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = (void *)objc_msgSend(a2, "layer");
  v7 = (void *)objc_msgSend(v6, "sublayers");
  v8 = v7;
  if (v7)
    v9 = objc_msgSend(v7, "count");
  else
    v9 = 0;
  v10 = objc_msgSend(a1, "layer");
  if (v9 <= a3 || (result = objc_msgSend(v8, "objectAtIndexedSubscript:", a3), result != v10))
  {
    if ((void *)CALayerGetSuperlayer() == v6)
    {
      if (a3 + 1 < v9 && objc_msgSend(v8, "objectAtIndexedSubscript:") == v10)
        v10 = objc_msgSend(v8, "objectAtIndexedSubscript:", a3);
      else
        v9 = a3;
      objc_msgSend(v6, "insertSublayer:atIndex:", v10, v9);
      return objc_msgSend(a2, "_invalidateSubviewCache");
    }
    else
    {
      return objc_msgSend(a2, "swiftui_insertRenderedSubview:atIndex:", a1, a3);
    }
  }
  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

BOOL _UIColorDependsOnTraitCollection(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___UIColorDependsOnTraitCollection_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = sel_resolvedColorWithTraitCollection_;
  v1 = _UIColorDependsOnTraitCollection_once;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_UIColorDependsOnTraitCollection_once, block);
  v3 = objc_msgSend(v2, "methodForSelector:", sel_resolvedColorWithTraitCollection_);

  return v3 != _UIColorDependsOnTraitCollection_UIColor_imp;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for SortableTableHeaderButton(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for UpdateCoalescingCollectionView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UpdateCoalescingCollectionView);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

void type metadata accessor for StaticIf()
{
  JUMPOUT(0x18D75FF28);
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

id _UIKitCreateCustomView(objc_class *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = (void *)objc_msgSend([a1 alloc], "_initWithLayer:", v3);

  return v4;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

__n128 __swift_memcpy106_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 90) = *(__int128 *)((char *)a2 + 90);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void type metadata accessor for (offset: Int, element: TableSections.Item)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t _VariableFrameDurationIsSupported()
{
  if (_VariableFrameDurationIsSupported_once != -1)
    dispatch_once(&_VariableFrameDurationIsSupported_once, &__block_literal_global_0);
  return _VariableFrameDurationIsSupported_supported;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _CUIIdiomForIdiom(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return qword_187BF66C0[a1];
}

uint64_t type metadata accessor for SourceInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SourceInput);
}

uint64_t type metadata accessor for ButtonStyleContainerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonStyleContainerModifier);
}

uint64_t type metadata accessor for UIHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIHostingController);
}

uint64_t type metadata accessor for PrimitiveButtonStyleContainerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrimitiveButtonStyleContainerModifier);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t objectdestroy_38Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void objectdestroy_38Tm_0()
{
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
}

uint64_t sub_186E508F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  swift_unknownObjectRelease();
  v4 = v1 + ((v3 + 64) & ~v3);
  __swift_destroy_boxed_opaque_existential_1(v4);

  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(a1 + 52);
  v6 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5 + *(int *)(v6 + 32));
  }
  return swift_deallocObject();
}

uint64_t outlined copy of AppIntentExecutor?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void ShadowRowCollection.endIndex.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t updated;
  _QWORD v17[3];
  uint64_t v18;

  v18 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  v17[0] = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17[1] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17[2] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)v17 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v17 - v12;
  v14 = v2 + *(int *)(a1 + 40);
  swift_checkMetadataState();
  dispatch thunk of Collection.endIndex.getter();
  updated = type metadata accessor for ShadowListUpdateRecorder(0, v5, v4, v15);
  ShadowListUpdateRecorder.finalIndex(_:)((uint64_t)v13, v18, v14, (uint64_t)v9, updated);
}

uint64_t sub_186E50B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 104) + 8))(v2, *(_QWORD *)(v4 - 96));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v1);
}

void ShadowListUpdateRecorder.finalIndex(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v24 = a4;
  v26 = a3;
  v29 = a1;
  v30 = a2;
  swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v28 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v31 = v16;
  v17 = (char *)&v19 + *(int *)(v16 + 48) - v15;
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16);
  v21((char *)&v19 - v15, v26, AssociatedTypeWitness, v14);
  v18 = *(_QWORD *)(v8 - 8);
  v25 = v17;
  v26 = v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v20(v17, v24, v8);
  v19 = a5;
  v24 = v5;
  ShadowListUpdateRecorder.updates.getter();
}

void sub_186E50D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 120) = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 112) = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v2 - 152) = v0;
  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = AssociatedConformanceWitness;
  *(_QWORD *)(v2 - 128) = v5;
  type metadata accessor for ListUpdate();
}

uint64_t sub_186E50DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, _QWORD, uint64_t);

  v4 = type metadata accessor for Array();
  v5 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v4);
  *(_QWORD *)(v3 - 152) = v4;
  *(_QWORD *)(v3 - 144) = v4;
  *(_QWORD *)(v3 - 136) = v5;
  *(_QWORD *)(v3 - 128) = v5;
  v6 = type metadata accessor for ConcatenatedCollection();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5358], v6);
  LOBYTE(v4) = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
    ShadowListUpdateRecorder.updates.getter();
  v7 = *(_QWORD *)(v3 - 184);
  v8 = v7 + *(int *)(*(_QWORD *)(v3 - 160) + 48);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 32);
  v9(v7, v2, v0);
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 200) + 32);
  v10(v8, *(_QWORD *)(v3 - 208), v1);
  v9(*(_QWORD *)(v3 - 176), v7, v0);
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v10)(*(_QWORD *)(v3 - 168), v8, v1);
}

uint64_t DeprecatedAlertBridge.preferencesDidChange(_:)(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  _QWORD v48[18];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  v5 = *MEMORY[0x1E0DEEDD8] & *v3;
  v6 = *(_QWORD *)(v5 + 0x58);
  v48[16] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v48[9] = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v48[14] = (char *)v48 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v48[3] = (char *)v48 - v13;
  v48[4] = v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v48[8] = (char *)v48 - v17;
  v18 = type metadata accessor for Optional();
  v48[13] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v48[10] = (char *)v48 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v48[2] = (char *)v48 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v48[7] = (char *)v48 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v48[6] = (char *)v48 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v48[12] = (char *)v48 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v48[11] = (char *)v48 - v36;
  v50 = v37;
  v38 = type metadata accessor for PreferenceList.Value();
  v49 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)v48 - v40;
  v42 = *a1;
  v48[5] = v5;
  v43 = *(_QWORD *)(v5 + 104);
  swift_getAssociatedTypeWitness();
  v51 = v42;
  v44 = v3;
  v45 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v48[15] = v43;
  v48[17] = v6;
  swift_getAssociatedConformanceWitness();
  PreferenceList.subscript.getter();
  v46 = *(_DWORD *)((char *)v44 + *(_QWORD *)((*v45 & *v44) + 0x80));
  PreferenceList.Value.seed.getter();
  if (v46 == -1 || (_DWORD)v51 == -1 || v46 != (_DWORD)v51)
    DeprecatedAlertBridge.presenter.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v41, v38);
}

void DeprecatedAlertBridge.presenter.getter()
{
  _QWORD *v0;

  if (MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70)))
    _UIHostingView.presenterViewController.getter();
  __break(1u);
}

void DeprecatedAlertBridge.host.getter()
{
  JUMPOUT(0x18D760234);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void closure #1 in static StaticSourceWriter._makeInputs(modifier:inputs:)()
{
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_186E51F68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

uint64_t $defer #1 <A, B>() in DeprecatedAlertBridge.preferencesDidChange(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v4;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v0);
  v2 = (char *)&v4 - v1;
  type metadata accessor for PreferenceList.Value();
  PreferenceList.Value.value.getter();
  return DeprecatedAlertBridge.lastPresentation.setter((uint64_t)v2);
}

uint64_t DeprecatedAlertBridge.lastPresentation.setter(uint64_t a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x98);
  swift_beginAccess();
  v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t _SwiftUIIsAppleInternalBuild()
{
  if (_SwiftUIIsAppleInternalBuild_once != -1)
    dispatch_once(&_SwiftUIIsAppleInternalBuild_once, &__block_literal_global_94);
  return _SwiftUIIsAppleInternalBuild_isInternal;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<()>, (uint64_t (*)(uint64_t))type metadata accessor for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[UIView]>, (uint64_t (*)(uint64_t))type metadata accessor for [UIView]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Selectable>, (unint64_t *)&lazy cache variable for type metadata for Selectable, (uint64_t)&protocol descriptor for Selectable);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnList>, (unint64_t *)&lazy cache variable for type metadata for TableColumnList, (uint64_t)&protocol descriptor for TableColumnList);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(tag: String, item: String)>, (uint64_t)&lazy cache variable for type metadata for (tag: String, item: String), (uint64_t)"tag item ", (void (*)(_QWORD, uint64_t, _QWORD, uint64_t))type metadata accessor for (seed: Int, removeIndex: Int));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<UIView>>, (uint64_t (*)(uint64_t))type metadata accessor for HitTestTrace<UIView>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ViewResponder>>, (uint64_t (*)(uint64_t))type metadata accessor for HitTestTrace<ViewResponder>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String?, String)>, (uint64_t (*)(uint64_t))type metadata accessor for (String?, String));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(key: String?, value: String)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: String?, value: String));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<ViewResponder>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<ViewResponder>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreviewModifier>, &lazy cache variable for type metadata for PreviewModifier, (uint64_t)&protocol descriptor for PreviewModifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCoreNotification>, &lazy cache variable for type metadata for AccessibilityCoreNotification, (uint64_t)&protocol descriptor for AccessibilityCoreNotification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitAnimationCooperating>, (unint64_t *)&lazy cache variable for type metadata for UIKitAnimationCooperating, (uint64_t)&protocol descriptor for UIKitAnimationCooperating);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<EventBindingSource>, (unint64_t *)&lazy cache variable for type metadata for EventBindingSource);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<DocumentCreationStrategy>, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy, (uint64_t)&protocol descriptor for DocumentCreationStrategy);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, (unint64_t *)&lazy cache variable for type metadata for CodingKey, MEMORY[0x1E0DEE8B0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<UIKitProxyFocusItem>, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<UIGestureRecognizer>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<UIGestureRecognizer>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<[UIAccessibilityLocationDescriptor]>, (uint64_t (*)(uint64_t))type metadata accessor for [UIAccessibilityLocationDescriptor]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<AccessibilityLinkElement>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<DocumentViewController>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<DocumentViewController>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<(String, String)>, (uint64_t)&lazy cache variable for type metadata for (String, String), MEMORY[0x1E0DEA968], (void (*)(_QWORD, uint64_t, _QWORD, uint64_t))type metadata accessor for (Badge, Spacer));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20]);
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance SourceInput<A>(_QWORD *a1@<X8>)
{
  protocol witness for SetAlgebra.init() in conformance UIRectEdge(a1);
}

void protocol witness for SetAlgebra.init() in conformance UIRectEdge(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityPlatformItemTransform(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for _CommandsOutputs()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PlatformItemList.Item()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PlatformItemList.Item;
  if (!type metadata singleton initialization cache for PlatformItemList.Item)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for FallbackDelegateBox<NSObject>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = type metadata accessor for NSObject(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityGestureAttachment, &type metadata for AccessibilityGestureAttachment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t ShadowRowCollection.index(after:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of Collection.index(after:)();
}

uint64_t type metadata accessor for FileExportOperation.Mode(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.Mode);
}

uint64_t type metadata accessor for ContextMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextMenuModifier);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomButtonMenuStyleWriter<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomButtonMenuStyleWriter<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ButtonStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t static StyleModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  char v45;

  v8 = *a1;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = a2[5];
  v12 = *((_DWORD *)a2 + 16);
  v13 = a2[9];
  v14 = *((_BYTE *)a2 + 80);
  v37 = *a2;
  v38 = v9;
  v39 = v10;
  v40 = *(_OWORD *)(a2 + 3);
  v41 = v11;
  v42 = *((_OWORD *)a2 + 3);
  v43 = v12;
  v44 = v13;
  v45 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = type metadata accessor for StyleOverrideInput(0, AssociatedTypeWitness, v16, v17);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleOverrideInput<A>, v18);
  PropertyList.subscript.getter();
  HIDWORD(v19) = HIDWORD(v29);
  if (!v29)
  {
    LODWORD(v28) = v8;
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    v19 = type metadata accessor for StyleModifierType(0, a5, a6, v20);
  }
  HIDWORD(v29) = HIDWORD(v19);
  v21 = swift_getAssociatedTypeWitness();
  v24 = type metadata accessor for StyleInput(0, v21, v22, v23);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for StyleInput<A>, v24);
  lazy protocol witness table accessor for type AnyStyleModifier and conformance AnyStyleModifier();
  _GraphInputs.append<A, B>(_:to:)();
  v28 = v37;
  LODWORD(v29) = v38;
  v30 = v39;
  v31 = v40;
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  v36 = v45;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v25 = swift_bridgeObjectRetain();
  a3(v25, &v28);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for StyleOverrideInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleOverrideInput);
}

uint64_t type metadata accessor for StyleModifierType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleModifierType);
}

uint64_t type metadata accessor for StyleInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleInput);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ButtonStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static ButtonStyleWriter._makeInputs(modifier:inputs:)(a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ButtonStyleWriter<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t type metadata accessor for ButtonStyleTypeBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonStyleTypeBox);
}

uint64_t ListDiffable.rowIndex(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v19 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v18 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v18 - v14;
  v16 = IndexPath.section.getter();
  ListDiffable.sectionIndex(atOffset:)(v16, a4, a5);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v19, v15, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 80))(v15, a4, a5);
  IndexPath.row.getter();
  swift_getAssociatedConformanceWitness();
  Collection.index(atOffset:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t ListDiffable.sectionIndex(atOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 56))(a2, a3, v8);
  swift_getAssociatedConformanceWitness();
  Collection.index(atOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, AssociatedTypeWitness);
}

void ShadowListUpdateRecorder.sectionIDs.getter(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = MEMORY[0x1E0C80A78](a1, v1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  ShadowSectionCollection.init(_:)();
}

uint64_t ShadowSectionCollection.startIndex.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 56))(v2, v1, v6);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.startIndex.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, AssociatedTypeWitness);
}

uint64_t ShadowRowCollection.startIndex.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t destroy for ShadowRowCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = (a1 + *(unsigned __int8 *)(v6 + 80) + (((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, AssociatedTypeWitness);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))((v8 + *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80), v9);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowSectionCollection<A>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

void ShadowRowCollection.init(_:section:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  _QWORD v24[26];
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a2;
  v24[19] = a1;
  v24[20] = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v4);
  v24[7] = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v24[10] = (char *)v24 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v24[21] = v9;
  v10 = swift_getAssociatedTypeWitness();
  v27 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v24[8] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v24[12] = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v24[13] = (char *)v24 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v24[14] = (char *)v24 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v24[16] = (char *)v24 - v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = swift_getAssociatedConformanceWitness();
  v29 = AssociatedTypeWitness;
  v30 = v10;
  v24[24] = AssociatedConformanceWitness;
  v24[25] = v10;
  v31 = AssociatedConformanceWitness;
  v32 = v23;
  type metadata accessor for ListUpdate();
}

void ShadowSectionCollection.init(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

uint64_t destroy for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for CollectionViewListDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 40);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    if (v7 == 1)
      goto LABEL_7;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v6 + 64) & 1) != 0)
    swift_bridgeObjectRelease();
  else
    __swift_destroy_boxed_opaque_existential_1(v6 + 24);
LABEL_7:
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for CollectionViewListDataSource(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = a3[9];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v14 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (v18)
  {
    if (v18 == 1)
    {
      v19 = *(_OWORD *)(v17 + 48);
      *(_OWORD *)(v16 + 32) = *(_OWORD *)(v17 + 32);
      *(_OWORD *)(v16 + 48) = v19;
      *(_DWORD *)(v16 + 63) = *(_DWORD *)(v17 + 63);
      v20 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v20;
      goto LABEL_10;
    }
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_QWORD *)(v16 + 8) = v18;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  }
  v21 = (_QWORD *)(v16 + 24);
  v22 = (_QWORD *)(v17 + 24);
  v23 = *(_BYTE *)(v17 + 64);
  if ((v23 & 1) != 0)
  {
    *v21 = *v22;
    swift_bridgeObjectRetain();
  }
  else
  {
    v24 = *(_OWORD *)(v17 + 48);
    *(_OWORD *)(v16 + 48) = v24;
    (**(void (***)(_QWORD *, _QWORD *))(v24 - 8))(v21, v22);
  }
  *(_BYTE *)(v16 + 64) = v23;
  *(_WORD *)(v16 + 65) = *(_WORD *)(v17 + 65);
LABEL_10:
  v25 = a3[11];
  v26 = a3[12];
  v27 = (_QWORD *)(a1 + v25);
  v28 = (_QWORD *)(a2 + v25);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v30 = a3[13];
  v31 = a3[14];
  v32 = a1 + v30;
  v33 = a2 + v30;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_QWORD *)(a1 + v31) = *(_QWORD *)(a2 + v31);
  swift_retain();
  swift_retain();
  return a1;
}

void ShadowListUpdateRecorder.initialIndex(_:)()
{
  ShadowListUpdateRecorder.updates.getter();
}

void sub_186E542B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 - 96);
  v3 = *(_QWORD *)(v1 - 88);
  *(_QWORD *)(v1 - 192) = v3;
  *(_QWORD *)(v1 - 184) = v2;
  *(_QWORD *)(v1 - 112) = v2;
  *(_QWORD *)(v1 - 104) = v3;
  *(_QWORD *)(v1 - 200) = v0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v1 - 144) = AssociatedTypeWitness;
  *(_QWORD *)(v1 - 136) = v5;
  *(_QWORD *)(v1 - 128) = AssociatedConformanceWitness;
  *(_QWORD *)(v1 - 120) = v7;
  type metadata accessor for ListUpdate();
}

uint64_t sub_186E543EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = type metadata accessor for Array();
  v3 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v2);
  *(_QWORD *)(v1 - 144) = v2;
  *(_QWORD *)(v1 - 136) = v2;
  *(_QWORD *)(v1 - 128) = v3;
  *(_QWORD *)(v1 - 120) = v3;
  v4 = type metadata accessor for ConcatenatedCollection();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5358], v4);
  v5 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    ShadowListUpdateRecorder.updates.getter();
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(*(_QWORD *)(v1 - 176), *(_QWORD *)(v1 - 160), v0);
}

void ShadowListUpdateRecorder.updates.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

uint64_t sub_186E54744()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v0);
  return concatenate<A, B>(_:_:)();
}

void type metadata accessor for ListUpdate()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShadowSectionCollection);
}

void ShadowListDataSource.sectionIDs.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated;

  updated = type metadata accessor for ShadowListUpdateRecorder(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a4);
  ShadowListUpdateRecorder.sectionIDs.getter(updated);
}

uint64_t type metadata accessor for ShadowListUpdateRecorder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShadowListUpdateRecorder);
}

uint64_t type metadata accessor for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShadowRowCollection);
}

uint64_t protocol witness for ListDiffable.rowIDs(forSectionAt:) in conformance CollectionViewListDataSource<A>@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = specialized CollectionViewListDataSource.rowIDs(forSectionAt:)(*a1);
  return swift_bridgeObjectRetain();
}

void ShadowListUpdateRecorder.rowIDs(forSectionAt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v8);
  ShadowListUpdateRecorder.initialIndex(_:)();
}

void sub_186E54930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  ShadowRowCollection.init(_:section:)(v2, v1, v0);
}

void ShadowListDataSource.rowIDs(forSectionAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t updated;

  updated = type metadata accessor for ShadowListUpdateRecorder(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), a4);
  ShadowListUpdateRecorder.rowIDs(forSectionAt:)(a1, updated);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowRowCollection<A>, a3);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedButtonStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance StyleInput<A>(_QWORD *a1@<X8>)
{
  protocol witness for SetAlgebra.init() in conformance UIRectEdge(a1);
}

void type metadata accessor for Attribute<ViewTraitCollection>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<ViewTraitCollection>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>);
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 40 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = a4[7] + 120 * result;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a3 + 112);
  v7 = *(_OWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 96) = v7;
  *(_OWORD *)(v4 + 64) = v8;
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 40 * result;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a4[7] + 40 * result;
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a3 + 32);
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t partial apply for closure #1 in static StaticIf<>._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:), (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))closure #1 in static StaticIf<>._makeView(view:inputs:));
}

uint64_t type metadata accessor for _TabViewStyleWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TabViewStyleWriter);
}

uint64_t partial apply for specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in _ScrollViewBoundsModifier.Child.value.getter(uint64_t (**a1)(_BYTE *))
{
  uint64_t v1;

  return closure #1 in closure #1 in _ScrollViewBoundsModifier.Child.value.getter(a1, *(_QWORD *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.listContentConfiguration : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a7, a4, a5, a6);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a4, a5, a6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a7, a4, a5, a6);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.listContentConfiguration.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t ShadowSectionCollection.endIndex.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 56))(v2, v1, v6);
  swift_getAssociatedConformanceWitness();
  Collection.index(atOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, AssociatedTypeWitness);
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance Alert.Presentation.Key@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 272) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance ActionSheet.Presentation.Key@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void partial apply for applyNode #1 (start:style:node:transform:) in _IncrementalLayout_Children.applyNodes(from:style:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  applyNode #1 (start:style:node:transform:) in _IncrementalLayout_Children.applyNodes(from:style:to:)(a1, a2, a3);
}

uint64_t partial apply for closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t partial apply for specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, BOOL *a2)
{
  return partial apply for specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:));
}

{
  return partial apply for specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:));
}

{
  return partial apply for specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:));
}

{
  return partial apply for specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:));
}

uint64_t partial apply for closure #1 in static StaticIf<>._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))closure #1 in static StaticIf<>._makeView(view:inputs:));
}

BOOL protocol witness for static AnyButtonStyleTypeBox.isEqual(to:) in conformance ButtonStyleTypeBox<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ButtonStyleTypeBox.isEqual(to:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

BOOL static ButtonStyleTypeBox.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ButtonStyleTypeBox(0, a3, a4, a4);
  return swift_dynamicCastMetatype() != 0;
}

uint64_t partial apply for closure #2 in static StaticIf<>._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return partial apply for closure #2 in SwiftUIGlue.makeForEachView<A, B, C>(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))closure #2 in static StaticIf<>._makeView(view:inputs:));
}

void closure #2 in static StaticIf<>._makeView(view:inputs:)()
{
  type metadata accessor for StaticIf();
}

uint64_t sub_186E5501C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v4 = v3 + *(int *)(a1 + 52);
  v8[2] = a1;
  v9 = v2;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, v1, (uint64_t)v8, v2, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v10;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityLargeContentViewModifier<A>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, ValueMetadata **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformItemListTransformModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static PlatformItemListTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

double static PlatformItemListTransformModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v14 = *(_DWORD *)(a2 + 80);
  v31 = *(_QWORD *)a2;
  LODWORD(v32) = v10;
  v33 = v11;
  v34 = *(_OWORD *)(a2 + 24);
  v35 = v13;
  v36 = v12;
  v28 = *(_OWORD *)(a2 + 56);
  v37 = v28;
  v38 = *(_QWORD *)(a2 + 72);
  v39 = v14;
  a3(&v29);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v15 = v31;
  if (((*(unsigned int (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5) & ~v15) == 0)
  {
    v31 = v12;
    LODWORD(v32) = v28;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      LODWORD(v31) = v9;
      type metadata accessor for PlatformItemListTransformModifier(255, a4, a5, v16);
      type metadata accessor for _GraphValue();
      v17 = _GraphValue.value.getter();
      v31 = v29;
      v32 = v30;
      v18 = _ViewOutputs.subscript.getter();
      v20 = *MEMORY[0x1E0CFED28];
      if ((v18 & 0x100000000) == 0)
        v20 = v18;
      v31 = __PAIR64__(v20, v17);
      MEMORY[0x1E0C80A78](v18, v19);
      v26 = type metadata accessor for PlatformItemListTransformModifier.Transform(0, a4, a5, v21);
      v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTransformModifier<A>.Transform, v26);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_17, (uint64_t)&v25, v26, MEMORY[0x1E0DEDCE8], v22, MEMORY[0x1E0DEDD18], v23);
      LOBYTE(v31) = 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *(_QWORD *)a6 = v29;
  result = v30;
  a6[1] = v30;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AccessibilityLargeContentViewHitTestingTransform()
{
  return 8;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedButtonStyleBody<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static ResolvedButtonStyleBody._makeViewList(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static ResolvedButtonStyleBody._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  char v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  char v52;

  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v26 = a2[7];
  v28 = a2[6];
  v11 = *((_DWORD *)a2 + 16);
  v12 = a2[9];
  v13 = *((_BYTE *)a2 + 80);
  static DynamicPropertyCache.fields(of:)();
  v14 = v44;
  v15 = v45;
  v16 = v46;
  v17 = HIDWORD(v46);
  v44 = v7;
  LODWORD(v45) = v8;
  v47 = *(_OWORD *)(a2 + 3);
  v46 = v9;
  v48 = v10;
  *(_QWORD *)&v49 = v28;
  *((_QWORD *)&v49 + 1) = v26;
  v50 = v11;
  v51 = v12;
  v52 = v13;
  v22 = v17;
  v23 = v6;
  v40 = v6;
  v25 = v15;
  v27 = v14;
  v30 = v14;
  v31 = v15;
  v29 = v16;
  LOBYTE(v32) = v16;
  HIDWORD(v32) = v17;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)((uint64_t)v39, (uint64_t)&v41, (uint64_t)&v40, (uint64_t)&v44, (uint64_t)&v30, a3, a4);
  v20 = v41;
  v21 = v42;
  LOBYTE(v6) = v43;
  swift_getAssociatedTypeWitness();
  v30 = v44;
  LODWORD(v31) = v45;
  v32 = v46;
  v33 = v47;
  v34 = v48;
  v35 = v49;
  v36 = v50;
  v37 = v51;
  v38 = v52;
  swift_getAssociatedConformanceWitness();
  static View.makeDebuggableViewList(view:inputs:)();
  if ((v6 & 1) == 0)
  {
    v41 = v20;
    v42 = v21;
    v40 = v23;
    v30 = v27;
    v31 = v25;
    LOBYTE(v32) = v29;
    HIDWORD(v32) = v22;
    type metadata accessor for ResolvedButtonStyleBody(0, a3, a4, v18);
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

double static FocusEventProxyModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  double result;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v10 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v12 = a2[5];
  v11 = a2[6];
  v14 = *((_DWORD *)a2 + 14);
  v13 = *((_DWORD *)a2 + 15);
  v15 = *((_DWORD *)a2 + 16);
  v16 = *((_DWORD *)a2 + 17);
  v17 = *((_DWORD *)a2 + 18);
  v18 = *((_DWORD *)a2 + 19);
  v19 = *((_DWORD *)a2 + 20);
  v33 = *a2;
  v4 = v33;
  LODWORD(v34) = v5;
  v35 = v6;
  v36 = v7;
  v37 = v8;
  v38 = v10;
  v39 = v9;
  v40 = v12;
  v41 = v11;
  v29 = v11;
  v42 = v14;
  v43 = v13;
  v27 = v15;
  v28 = v13;
  v44 = v15;
  v45 = v16;
  v25 = v17;
  v26 = v16;
  v46 = v17;
  v47 = v18;
  v23 = v19;
  v24 = v18;
  v48 = v19;
  a3(&v31, a1, &v33);
  v33 = v4;
  LODWORD(v34) = v5;
  v35 = v6;
  v36 = v7;
  v37 = v8;
  v38 = v10;
  v39 = v9;
  v40 = v12;
  if ((specialized static IOSFocusEnabledFlag.evaluate(inputs:)() & 1) != 0)
  {
    v33 = v29;
    LODWORD(v34) = v14;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v33 = v31;
      v34 = v32;
      v22 = _ViewOutputs.viewResponders()();
      type metadata accessor for FocusEventProxyResponder();
      swift_allocObject();
      v33 = v4;
      LODWORD(v34) = v5;
      v35 = v6;
      v36 = v7;
      v37 = v8;
      v38 = v10;
      v39 = v9;
      v40 = v12;
      v41 = v29;
      v42 = v14;
      v43 = v28;
      v44 = v27;
      v45 = v26;
      v46 = v25;
      v47 = v24;
      v48 = v23;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v20 = DefaultLayoutViewResponder.init(inputs:)();
      LODWORD(v33) = v22;
      v34 = *(double *)&v20;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      lazy protocol witness table accessor for type FocusEventProxyResponderFilter and conformance FocusEventProxyResponderFilter();
      Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      LOBYTE(v33) = 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *(_QWORD *)a4 = v31;
  result = v32;
  a4[1] = v32;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ButtonActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonActionModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ButtonActionModifier<A>@<D0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static ButtonActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorTransformModifier<A, B>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t *a4@<X4>, double *a5@<X8>)
{
  return static _AnchorTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a5);
}

double static _AnchorTransformModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, double *a7@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  v21 = *a1;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v11 = *(_OWORD *)(a2 + 5);
  v16 = *(_OWORD *)(a2 + 3);
  v17 = v11;
  v18 = *(_OWORD *)(a2 + 7);
  v19 = a2[9];
  v20 = v10;
  return static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)((uint64_t)&v13, 1, a3, a4, a5, a6, a7);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance AutomaticHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 256;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance PersistentSystemOverlaysKey(_WORD *a1@<X8>)
{
  *a1 = 512;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationTitleKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance PlaybackButton.State.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<ButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ExternalGestureActionModifier()
{
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey(&one-time initialization token for defaultValue, (uint64_t)static SearchKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ToolbarKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *((_QWORD *)&static ToolbarKey.defaultValue + 1);
  v3 = qword_1ECE20150;
  v4 = unk_1ECE20158;
  v5 = qword_1ECE20160;
  v6 = unk_1ECE20168;
  v7 = byte_1ECE20170;
  v8 = qword_1ECE20178;
  *(_QWORD *)a1 = static ToolbarKey.defaultValue;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance <> StaticIf<A, B, C>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  static StaticIf<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), *(_QWORD *)(a5 + 32), *(_QWORD *)(a5 + 40), a6);
}

void static StaticIf<>._makeView(modifier:inputs:body:)(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  v38 = a3;
  v39 = a4;
  v40 = a9;
  v13 = *a1;
  v14 = *a2;
  v15 = *((_DWORD *)a2 + 2);
  v16 = a2[2];
  v17 = *((_DWORD *)a2 + 6);
  v18 = *((_DWORD *)a2 + 7);
  v19 = *((_DWORD *)a2 + 8);
  v20 = *((_DWORD *)a2 + 9);
  v21 = a2[5];
  v26 = a2[6];
  v31 = *((_DWORD *)a2 + 14);
  v32 = *((_DWORD *)a2 + 15);
  v33 = *((_DWORD *)a2 + 16);
  v34 = *((_DWORD *)a2 + 17);
  v35 = *((_DWORD *)a2 + 18);
  v36 = *((_DWORD *)a2 + 19);
  v37 = *((_DWORD *)a2 + 20);
  v24[1] = v14;
  v41 = v14;
  v25 = v15;
  LODWORD(v42) = v15;
  v30 = v16;
  v43 = v16;
  v44 = __PAIR64__(v18, v17);
  v29 = v19;
  v45 = v19;
  v46 = v20;
  v28 = v20;
  v27 = v21;
  v47 = v21;
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a8 + 8))(&v41, a5, a8);
  if ((v22 & 1) != 0)
  {
    v24[0] = v24;
    MEMORY[0x1E0C80A78](v22, v23);
    LODWORD(v48) = v13;
    v41 = a5;
    v42 = a6;
    v43 = a7;
    v44 = a8;
    type metadata accessor for StaticIf();
  }
  v24[0] = v24;
  MEMORY[0x1E0C80A78](v22, v23);
  LODWORD(v48) = v13;
  v41 = a5;
  v42 = a6;
  v43 = a7;
  v44 = a8;
  type metadata accessor for StaticIf();
}

void sub_186E55E88()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  *(_QWORD *)(v2 - 192) = *(_QWORD *)(v2 - 296);
  *(_DWORD *)(v2 - 184) = *(_DWORD *)(v2 - 284);
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 256);
  *(_DWORD *)(v2 - 168) = v0;
  *(_DWORD *)(v2 - 164) = v1;
  v3 = *(_DWORD *)(v2 - 264);
  *(_DWORD *)(v2 - 160) = *(_DWORD *)(v2 - 260);
  *(_DWORD *)(v2 - 156) = v3;
  v4 = *(_QWORD *)(v2 - 280);
  *(_QWORD *)(v2 - 152) = *(_QWORD *)(v2 - 272);
  *(_QWORD *)(v2 - 144) = v4;
  LODWORD(v4) = *(_DWORD *)(v2 - 240);
  *(_DWORD *)(v2 - 136) = *(_DWORD *)(v2 - 244);
  *(_DWORD *)(v2 - 132) = v4;
  LODWORD(v4) = *(_DWORD *)(v2 - 232);
  *(_DWORD *)(v2 - 128) = *(_DWORD *)(v2 - 236);
  *(_DWORD *)(v2 - 124) = v4;
  LODWORD(v4) = *(_DWORD *)(v2 - 224);
  *(_DWORD *)(v2 - 120) = *(_DWORD *)(v2 - 228);
  *(_DWORD *)(v2 - 116) = v4;
  *(_DWORD *)(v2 - 112) = *(_DWORD *)(v2 - 220);
  JUMPOUT(0x186E55F48);
}

uint64_t EnvironmentValues.prominentListContentConfiguration.getter()
{
  return EnvironmentValues.listContentConfiguration.getter((unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentListContentConfigurationKey>, (uint64_t)&type metadata for ProminentListContentConfigurationKey, (uint64_t)&protocol witness table for ProminentListContentConfigurationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listContentConfiguration.getter()
{
  return EnvironmentValues.listContentConfiguration.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListContentConfigurationKey>, (uint64_t)&type metadata for ListContentConfigurationKey, (uint64_t)&protocol witness table for ListContentConfigurationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListContentConfigurationKey> and conformance EnvironmentPropertyKey<A>);
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContentShapeModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(__int128 *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  return static _ContentShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t getEnumTagSinglePayload for SheetPreference.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 106))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 105);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t getEnumTagSinglePayload for ArchivableAppIntentToggle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

void type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _EndedGesture<TapGesture>, MEMORY[0x1E0CE0D08], MEMORY[0x1E0CE0CF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2250]);
    lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>();
    v0 = type metadata accessor for AddGestureModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>);
  }
}

uint64_t destroy for ToolbarStorage(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double static _AllowsHitTestingModifier._makeView(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  double v9;
  _OWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 64);
  v10[3] = *(_OWORD *)(a2 + 48);
  v10[4] = v4;
  v10[0] = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 32);
  v10[1] = *(_OWORD *)(a2 + 16);
  v10[2] = v5;
  v6 = *a1;
  v11 = *(_DWORD *)(a2 + 80);
  lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier();
  static _RendererEffect._makeRendererEffect(effect:inputs:body:)();
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_AllowsHitTestingModifier>, (uint64_t)&type metadata for _AllowsHitTestingModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    _ViewOutputs.viewResponders()();
    type metadata accessor for AllowsHitTestingResponder();
    *(_BYTE *)(swift_allocObject() + 208) = 1;
    outlined retain of _ViewInputs((uint64_t)v10);
    DefaultLayoutViewResponder.init(inputs:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _ViewOutputs.subscript.setter();
  }
  specialized static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)(v6, (uint64_t)v10);
  *(_QWORD *)a3 = v8;
  result = v9;
  a3[1] = v9;
  return result;
}

uint64_t type metadata accessor for AllowsHitTestingResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AllowsHitTestingResponder;
  if (!type metadata singleton initialization cache for AllowsHitTestingResponder)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter;
  if (!lazy protocol witness table cache variable for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowsHitTestingFilter, &unk_1E1ADAD78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AlertTransformModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t partial apply for closure #1 in closure #4 in IncrementalLayoutViewCache.item(data:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  return closure #1 in closure #4 in IncrementalLayoutViewCache.item(data:)(a1, a2, a3, *(int **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), a4, *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), *(_QWORD **)(v4 + 80));
}

uint64_t closure #1 in closure #4 in IncrementalLayoutViewCache.item(data:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr, unint64_t *)@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t *, _QWORD);
  unsigned int v35;
  uint64_t v36;
  void (*v37)(unint64_t *, _QWORD);
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t result;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v60;
  __int128 v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int *v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  char v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  int v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)a1;
  v96 = *(_QWORD *)a1;
  v16 = *(_DWORD *)(a1 + 8);
  v85 = *(_QWORD *)(a1 + 16);
  v18 = *(_DWORD *)(a1 + 24);
  v17 = *(_DWORD *)(a1 + 28);
  v86 = *(_DWORD *)(a1 + 32);
  v88 = v16;
  v90 = *(_DWORD *)(a1 + 36);
  v19 = *(_QWORD *)(a1 + 40);
  v87 = v19;
  v63 = *(_QWORD *)(a1 + 48);
  v20 = *(_DWORD *)(a1 + 64);
  v83 = *(_DWORD *)(a1 + 60);
  v84 = *(_DWORD *)(a1 + 56);
  v92 = *(_DWORD *)(a1 + 72);
  v94 = *(_DWORD *)(a1 + 68);
  v100 = *(_DWORD *)(a1 + 76);
  v98 = *(_DWORD *)(a1 + 80);
  LODWORD(v119) = 0;
  WORD2(v119) = 0;
  BYTE6(v119) = 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<IncrementalLayoutCacheItem.State>, (uint64_t)&type metadata for IncrementalLayoutCacheItem.State, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<IncrementalLayoutCacheItem.State> and conformance External<A>();
  v74 = a4;
  *a4 = Attribute.init<A>(body:value:flags:update:)();
  *((_BYTE *)a4 + 4) = 0;
  v72 = *(_QWORD *)(a7 + 32);
  v71 = *(_DWORD *)(a7 + 40);
  v70 = *(_QWORD *)(a7 + 48);
  v68 = *(_DWORD *)(a7 + 60);
  v69 = *(_DWORD *)(a7 + 56);
  v66 = *(_DWORD *)(a7 + 68);
  v67 = *(_DWORD *)(a7 + 64);
  v65 = *(_QWORD *)(a7 + 72);
  v82 = *(_QWORD *)(a7 + 80);
  v80 = *(_DWORD *)(a7 + 92);
  v81 = *(_DWORD *)(a7 + 88);
  v78 = *(_DWORD *)(a7 + 100);
  v79 = *(_DWORD *)(a7 + 96);
  v76 = *(_DWORD *)(a7 + 108);
  v77 = *(_DWORD *)(a7 + 104);
  v75 = *(_DWORD *)(a7 + 112);
  _ViewInputs.size.getter();
  v119 = v15;
  LODWORD(v120) = v16;
  v121 = v85;
  v122 = __PAIR64__(v17, v18);
  *(_QWORD *)&v123 = __PAIR64__(v90, v86);
  *((_QWORD *)&v123 + 1) = v19;
  *(_QWORD *)&v124 = v63;
  *((_QWORD *)&v124 + 1) = __PAIR64__(v83, v84);
  *(_QWORD *)&v125 = __PAIR64__(v94, v20);
  *((_QWORD *)&v125 + 1) = __PAIR64__(v100, v92);
  LODWORD(v126) = v98;
  _ViewInputs.position.getter();
  HIDWORD(v120) = *(_DWORD *)(a7 + 140);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalViewGeometry and conformance IncrementalViewGeometry();
  swift_retain();
  v21 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  *(_DWORD *)a5 = v21;
  *(_BYTE *)(a5 + 4) = 0;
  v62 = v20;
  v22 = _ViewInputs.viewPhase.getter();
  v119 = v72;
  LODWORD(v120) = v71;
  v121 = v70;
  v122 = __PAIR64__(v68, v69);
  *(_QWORD *)&v123 = __PAIR64__(v66, v67);
  *((_QWORD *)&v123 + 1) = v65;
  *(_QWORD *)&v124 = v82;
  *((_QWORD *)&v124 + 1) = __PAIR64__(v80, v81);
  *(_QWORD *)&v125 = __PAIR64__(v78, v79);
  *((_QWORD *)&v125 + 1) = __PAIR64__(v76, v77);
  LODWORD(v126) = v75;
  v23 = _ViewInputs.viewPhase.getter();
  if ((a4[1] & 1) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v24 = *a4;
  v119 = __PAIR64__(v23, v22);
  LODWORD(v120) = v24;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalViewPhase and conformance IncrementalViewPhase();
  *(_DWORD *)a6 = Attribute.init<A>(body:value:flags:update:)();
  *(_BYTE *)(a6 + 4) = 0;
  v136 = v96;
  v137 = v16;
  v139 = __PAIR64__(v17, v18);
  *(_QWORD *)&v140 = __PAIR64__(v90, v86);
  *((_QWORD *)&v140 + 1) = v19;
  *(_QWORD *)&v141 = v63;
  *((_QWORD *)&v141 + 1) = __PAIR64__(v83, v84);
  *(_QWORD *)&v142 = __PAIR64__(v94, v20);
  *((_QWORD *)&v142 + 1) = __PAIR64__(v100, v92);
  v143 = v98;
  swift_beginAccess();
  v25 = *(_DWORD *)(v85 + 16);
  v26 = *(_QWORD *)(v85 + 24);
  v60 = *(_OWORD *)(v85 + 48);
  v61 = *(_OWORD *)(v85 + 32);
  v27 = *(_QWORD *)(v85 + 64);
  v28 = *(_QWORD *)(v85 + 72);
  v29 = *(_BYTE *)(v85 + 80);
  v30 = *(_BYTE *)(v85 + 81);
  v31 = *(_QWORD *)(v85 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = v25;
  *(_QWORD *)(v32 + 24) = v26;
  *(_OWORD *)(v32 + 32) = v61;
  *(_OWORD *)(v32 + 48) = v60;
  *(_QWORD *)(v32 + 64) = v27;
  *(_QWORD *)(v32 + 72) = v28;
  *(_BYTE *)(v32 + 80) = v29;
  *(_BYTE *)(v32 + 81) = v30;
  *(_QWORD *)(v32 + 88) = v31;
  swift_retain();
  v138 = v32;
  LOBYTE(v32) = *(_BYTE *)(a5 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v32 & 1) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Attribute<A>.origin()();
  _ViewInputs.position.setter();
  v119 = v72;
  LODWORD(v120) = v71;
  v121 = v70;
  v122 = __PAIR64__(v68, v69);
  *(_QWORD *)&v123 = __PAIR64__(v66, v67);
  *((_QWORD *)&v123 + 1) = v65;
  *(_QWORD *)&v124 = v82;
  *((_QWORD *)&v124 + 1) = __PAIR64__(v80, v81);
  *(_QWORD *)&v125 = __PAIR64__(v78, v79);
  *((_QWORD *)&v125 + 1) = __PAIR64__(v76, v77);
  LODWORD(v126) = v75;
  _ViewInputs.transform.getter();
  _ViewInputs.transform.setter();
  if ((*(_BYTE *)(a5 + 4) & 1) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  Attribute<A>.size()();
  _ViewInputs.size.setter();
  v119 = v72;
  LODWORD(v120) = v71;
  v121 = v70;
  v122 = __PAIR64__(v68, v69);
  *(_QWORD *)&v123 = __PAIR64__(v66, v67);
  *((_QWORD *)&v123 + 1) = v65;
  _GraphInputs.merge(_:ignoringPhase:)();
  if ((*(_BYTE *)(a6 + 4) & 1) != 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  _ViewInputs.viewPhase.setter();
  v119 = v72;
  LODWORD(v120) = v71;
  v121 = v70;
  v122 = __PAIR64__(v68, v69);
  *(_QWORD *)&v123 = __PAIR64__(v66, v67);
  *((_QWORD *)&v123 + 1) = v65;
  *(_QWORD *)&v124 = v82;
  *((_QWORD *)&v124 + 1) = __PAIR64__(v80, v81);
  *(_QWORD *)&v125 = __PAIR64__(v78, v79);
  *((_QWORD *)&v125 + 1) = __PAIR64__(v76, v77);
  LODWORD(v126) = v75;
  v33 = _ViewInputs.viewPhase.getter();
  v34 = (void (*)(unint64_t *, _QWORD))_GraphInputs.mergedInputs.modify();
  specialized Set._Variant.insert(_:)(&v102, v33);
  v34(&v119, 0);
  v119 = v96;
  LODWORD(v120) = v88;
  v121 = v85;
  v122 = __PAIR64__(v17, v18);
  *(_QWORD *)&v123 = __PAIR64__(v90, v86);
  *((_QWORD *)&v123 + 1) = v87;
  *(_QWORD *)&v124 = v63;
  *((_QWORD *)&v124 + 1) = __PAIR64__(v83, v84);
  *(_QWORD *)&v125 = __PAIR64__(v94, v62);
  *((_QWORD *)&v125 + 1) = __PAIR64__(v100, v92);
  LODWORD(v126) = v98;
  v35 = _ViewInputs.transaction.getter();
  if ((v74[1] & 1) != 0)
    goto LABEL_15;
  v119 = __PAIR64__(*v74, v35);
  v120 = 0;
  LOBYTE(v121) = 3;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalTransaction and conformance IncrementalTransaction();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transaction.setter();
  v119 = v96;
  LODWORD(v120) = v88;
  v121 = v85;
  v122 = __PAIR64__(v17, v18);
  *(_QWORD *)&v123 = __PAIR64__(v90, v86);
  *((_QWORD *)&v123 + 1) = v87;
  *(_QWORD *)&v124 = v63;
  *((_QWORD *)&v124 + 1) = __PAIR64__(v83, v84);
  *(_QWORD *)&v125 = __PAIR64__(v94, v62);
  *((_QWORD *)&v125 + 1) = __PAIR64__(v100, v92);
  LODWORD(v126) = v98;
  v36 = _ViewInputs.transaction.getter();
  v37 = (void (*)(unint64_t *, _QWORD))_GraphInputs.mergedInputs.modify();
  specialized Set._Variant.insert(_:)(&v102, v36);
  v37(&v119, 0);
  v119 = 0;
  LOBYTE(v120) = 1;
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  PropertyList.subscript.setter();
  v38 = v140;
  v39 = DWORD1(v140);
  v41 = DWORD2(v141);
  v40 = HIDWORD(v141);
  v43 = v142;
  v42 = DWORD1(v142);
  v45 = DWORD2(v142);
  v44 = HIDWORD(v142);
  v46 = v143;
  v99 = v138;
  v101 = v136;
  v119 = v136;
  v91 = v139;
  v93 = v137;
  LODWORD(v120) = v137;
  v121 = v138;
  v122 = v139;
  v89 = HIDWORD(v139);
  v123 = v140;
  v95 = v141;
  v97 = *((_QWORD *)&v140 + 1);
  v124 = v141;
  v125 = v142;
  LODWORD(v126) = v143;
  result = _ViewInputs.transaction.getter();
  *(_DWORD *)a8 = result;
  *(_BYTE *)(a8 + 4) = 0;
  if (!a10)
  {
    v119 = v101;
    LODWORD(v120) = v93;
    v121 = v99;
    v122 = __PAIR64__(v89, v91);
    *(_QWORD *)&v123 = __PAIR64__(v39, v38);
    *((_QWORD *)&v123 + 1) = v97;
    *(_QWORD *)&v124 = v95;
    *((_QWORD *)&v124 + 1) = __PAIR64__(v40, v41);
    *(_QWORD *)&v125 = __PAIR64__(v42, v43);
    *((_QWORD *)&v125 + 1) = __PAIR64__(v44, v45);
    LODWORD(v126) = v46;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(&v102, &v119);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v55 = v103;
    *a9 = v102;
    a9[1] = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  if ((v74[1] & 1) == 0)
  {
    v48 = *(_QWORD *)(a11 + 48);
    LODWORD(v119) = *v74;
    v120 = v101;
    LODWORD(v121) = v93;
    v122 = v99;
    *(_QWORD *)&v123 = __PAIR64__(v89, v91);
    *((_QWORD *)&v123 + 1) = __PAIR64__(v39, v38);
    *(_QWORD *)&v124 = v97;
    *((_QWORD *)&v124 + 1) = v95;
    *(_QWORD *)&v125 = __PAIR64__(v40, v41);
    *((_QWORD *)&v125 + 1) = __PAIR64__(v42, v43);
    v126 = __PAIR64__(v44, v45);
    v127 = v46;
    v128 = *(_QWORD *)(a11 + 40);
    *(_QWORD *)&v129 = v48;
    *((_QWORD *)&v129 + 1) = a2;
    v133 = 0;
    v130 = a3;
    v131 = 0;
    v132 = 0;
    v134 = 1;
    v135 = 0;
    lazy protocol witness table accessor for type MakeChildTransition and conformance MakeChildTransition();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    AnyTransition.visitBase<A>(applying:)();
    swift_release();
    v49 = v133;
    v50 = v134;
    *(_DWORD *)a12 = v133;
    *(_BYTE *)(a12 + 4) = v50;
    v51 = v135;
    *a13 = v135;
    v52 = v132;
    v53 = v131;
    v54 = v130;
    *a9 = v131;
    a9[1] = v52;
    LODWORD(v102) = v119;
    v103 = v120;
    v104 = v121;
    v105 = v122;
    v106 = v123;
    v107 = v124;
    v108 = v125;
    v109 = v126;
    v110 = v127;
    v111 = v128;
    v112 = v129;
    v113 = v54;
    v114 = v53;
    v115 = v52;
    v116 = v49;
    v117 = v50;
    v118 = v51;
    swift_bridgeObjectRetain();
    outlined release of MakeChildTransition((uint64_t)&v102);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalViewGeometry and conformance IncrementalViewGeometry()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalViewGeometry and conformance IncrementalViewGeometry;
  if (!lazy protocol witness table cache variable for type IncrementalViewGeometry and conformance IncrementalViewGeometry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalViewGeometry, &unk_1E1AE1718);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalViewGeometry and conformance IncrementalViewGeometry);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalViewGeometry and conformance IncrementalViewGeometry;
  if (!lazy protocol witness table cache variable for type IncrementalViewGeometry and conformance IncrementalViewGeometry)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalViewGeometry, &unk_1E1AE1718);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalViewGeometry and conformance IncrementalViewGeometry);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalTransaction and conformance IncrementalTransaction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalTransaction and conformance IncrementalTransaction;
  if (!lazy protocol witness table cache variable for type IncrementalTransaction and conformance IncrementalTransaction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalTransaction, &unk_1E1ADC140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalTransaction and conformance IncrementalTransaction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalTransaction and conformance IncrementalTransaction;
  if (!lazy protocol witness table cache variable for type IncrementalTransaction and conformance IncrementalTransaction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalTransaction, &unk_1E1ADC140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalTransaction and conformance IncrementalTransaction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalViewPhase and conformance IncrementalViewPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalViewPhase and conformance IncrementalViewPhase;
  if (!lazy protocol witness table cache variable for type IncrementalViewPhase and conformance IncrementalViewPhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalViewPhase, &unk_1E1AD32A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalViewPhase and conformance IncrementalViewPhase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalViewPhase and conformance IncrementalViewPhase;
  if (!lazy protocol witness table cache variable for type IncrementalViewPhase and conformance IncrementalViewPhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalViewPhase, &unk_1E1AD32A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalViewPhase and conformance IncrementalViewPhase);
  }
  return result;
}

uint64_t partial apply for closure #1 in MakeChildTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in MakeChildTransition.visit<A>(_:)(a1, a2, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t closure #1 in MakeChildTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 20);
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = v5;
  return a3(&v8);
}

unint64_t lazy protocol witness table accessor for type External<IncrementalLayoutCacheItem.State> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<IncrementalLayoutCacheItem.State> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<IncrementalLayoutCacheItem.State> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for External<IncrementalLayoutCacheItem.State>, (uint64_t)&type metadata for IncrementalLayoutCacheItem.State, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<IncrementalLayoutCacheItem.State> and conformance External<A>);
  }
  return result;
}

uint64_t destroy for EnvironmentChangeModifier()
{
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CaptureViewRespondersModifier()
{
  lazy protocol witness table accessor for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NascentViewDestinationsExtractor()
{
  return static ViewModifier.makeUnaryViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IgnoreViewRespondersModifier()
{
  lazy protocol witness table accessor for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.RawContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.RawContent> and conformance SourceInput<A>);
}

uint64_t type metadata accessor for CommandGroupPlacement(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for CommandGroupPlacement);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance AccessibilityNodesKey@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = *((_QWORD *)&static AccessibilityNodesKey.defaultValue + 1);
  *a1 = static AccessibilityNodesKey.defaultValue;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedSectionStyle(int *a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static StyleableView._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t static OnTestViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v19 = a2[2];
  v17 = *((_DWORD *)a2 + 7);
  v18 = *((_DWORD *)a2 + 6);
  v20 = *((_DWORD *)a2 + 2);
  v21 = *((_DWORD *)a2 + 8);
  v4 = a2[5];
  v5 = a2[6];
  v16 = *((_DWORD *)a2 + 15);
  v6 = *((_DWORD *)a2 + 17);
  v9 = *((_DWORD *)a2 + 14);
  v10 = *((_DWORD *)a2 + 16);
  v14 = *((_DWORD *)a2 + 9);
  v15 = *((_DWORD *)a2 + 18);
  v11 = *((_DWORD *)a2 + 19);
  v12 = *((_DWORD *)a2 + 20);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnTestViewModifier>, (uint64_t)&unk_1E1ACA538, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  _ViewInputs.viewPhase.getter();
  v24 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnTestEffect and conformance OnTestEffect();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  v7 = AGGraphSetFlags();
  v22 = v3;
  v23 = v20;
  v25 = v19;
  v26 = v18;
  v27 = v17;
  v28 = v21;
  v29 = v14;
  v30 = v4;
  v31 = v5;
  v32 = v9;
  v33 = v16;
  v34 = v10;
  v35 = v6;
  v36 = v15;
  v37 = v11;
  v38 = v12;
  return a3(v7, &v22);
}

unint64_t lazy protocol witness table accessor for type OnTestEffect and conformance OnTestEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnTestEffect and conformance OnTestEffect;
  if (!lazy protocol witness table cache variable for type OnTestEffect and conformance OnTestEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnTestEffect, &unk_1E1AB2958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnTestEffect and conformance OnTestEffect);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PersistentSystemOverlaysKey.Overlays(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186E577BC + 4 * byte_187C36FC5[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_186E577F0 + 4 * byte_187C36FC0[v4]))();
}

uint64_t sub_186E577F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_186E577F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x186E57800);
  return result;
}

uint64_t sub_186E5780C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x186E57814);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_186E57818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_186E57820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollViewBoundsModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _ScrollViewBoundsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentShapeKindModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContentShapeKindModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t partial apply for closure #1 in static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t initializeBufferWithCopyOfBuffer for EnvironmentChangeModifier2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t storeEnumTagSinglePayload for NavigationTitleStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AnyShareConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AlertTransformModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SheetPreference.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 90) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 106) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 106) = 0;
    if (a2)
      *(_BYTE *)(result + 105) = -(char)a2;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DragItemTimings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 90) = 0;
    if (a2)
      *(_BYTE *)(result + 89) = a2 + 2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DragItemTimings(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 90))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 89);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivableAppIntentToggle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t partial apply for closure #1 in AnchorWriter.value.getter(uint64_t a1)
{
  return closure #1 in AnchorWriter.value.getter(a1);
}

uint64_t storeEnumTagSinglePayload for ToolbarRole(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186E57C40 + 4 * byte_187C8D2D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186E57C74 + 4 * asc_187C8D2D0[v4]))();
}

uint64_t sub_186E57C74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186E57C7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186E57C84);
  return result;
}

uint64_t sub_186E57C90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186E57C98);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186E57C9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186E57CA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

BOOL EnvironmentValues.accessibilityVoiceOverEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(0);
}

void storeEnumTagSinglePayload for Button(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v8 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64) + ((v9 + 75) & ~v9);
  if ((unint64_t)(v10 + 1) > 0x30)
    v11 = v10 + 1;
  else
    v11 = 48;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v12 + 84) <= 0xFDu)
    v13 = 253;
  else
    v13 = *(_DWORD *)(v12 + 84);
  v14 = ((v11 + 1 + *(unsigned __int8 *)(v12 + 80) + (((v9 | 7) + 2) & ~(v9 | 7))) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(_QWORD *)(v12 + 64);
  if (a3 <= v13)
  {
    v15 = 0u;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 - v13 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (v13 < a2)
  {
    v16 = ~v13 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_186E57F90()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x186E57F7CLL);
}

void sub_186E57FA0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x186E57F7CLL);
}

void sub_186E57FA8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x186E57F7CLL);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CaptureViewRespondersModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 8);
  v7 = a2[5];
  v8 = a2[6];
  v9 = *((_DWORD *)a2 + 20);
  v10 = *((_DWORD *)a2 + 9) | 0x80;
  v13 = *a2;
  v14 = v4;
  v15 = v5;
  v16 = a2[3];
  v17 = v6;
  v18 = v10;
  v19 = v7;
  v20 = v8;
  v21 = *(_OWORD *)(a2 + 7);
  v22 = a2[9];
  v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoreViewRespondersModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 8);
  v7 = a2[5];
  v8 = a2[6];
  v9 = *((_DWORD *)a2 + 20);
  v10 = *((_DWORD *)a2 + 9) & 0xFFFFFF7F;
  v13 = *a2;
  v14 = v4;
  v15 = v5;
  v16 = a2[3];
  v17 = v6;
  v18 = v10;
  v19 = v7;
  v20 = v8;
  v21 = *(_OWORD *)(a2 + 7);
  v22 = a2[9];
  v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContextMenuModifierCore<A>(int *a1, __int128 *a2, void (*a3)(uint64_t, __int128 *), uint64_t a4, uint64_t a5)
{
  return static ContextMenuModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsSharingPickerHost()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static UIViewRepresentable._makeViewList(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

uint64_t partial apply for closure #1 in closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(uint64_t (**a1)(_BYTE *, double, double))
{
  uint64_t *v1;

  return closure #1 in closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(a1, v1[4], v1[5], v1[6]);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance BridgedEnvironmentKeysKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static BridgedEnvironmentKeysKey.defaultValue;
  return swift_bridgeObjectRetain();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.Sizing>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Sizing>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Sizing>);
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.Header(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  char v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_BYTE *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header, (uint64_t)&type metadata for SectionStyleConfiguration.Header, &lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Header> and conformance SourceInput<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SectionStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _CoordinateSpaceModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CoordinateSpaceModifier<A>, a5);
  return static ViewInputsModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DividerStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DividerStyleModifier<A>, a5);
  return static StyleModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentShapeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t partial apply for closure #1 in applyNode #1 (start:style:node:transform:section:) in _IncrementalLayout_Children.apply(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3;
  uint64_t v5;

  v5 = *a2;
  applyNode #1 (start:style:node:transform:section:) in _IncrementalLayout_Children.apply(from:style:to:)(a1, (uint64_t)&v5, a3);
  return v3 & 1;
}

BOOL EnvironmentValues.accessibilitySwitchControlEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(1);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v19;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<Swift.AnyObject>);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<Swift.AnyObject>);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _BYTE v18[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v18);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(v16 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_release();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v19;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(v16 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(v16 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of UpdateViewDestinationRequest(a1, v16[7] + 160 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of UpdateViewDestinationRequest(a1, v16[7] + 160 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of NavigationDestinationPresentation(a1, v16[7] + 96 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of NavigationDestinationPresentation(a1, v16[7] + 96 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  _OWORD v20[8];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
      return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>);
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v18;
  v16 = *v4;
  if ((v14 & 1) != 0)
    return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>);
LABEL_11:
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v20);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, v20, a1, v16);
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  _BYTE v20[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7] + 40 * v10;
      v18 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v17 = *(_OWORD *)a1;
      *(_OWORD *)(v17 + 16) = v18;
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(a1 + 32);
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = result;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v20);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v20, a1, v16);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyVGrid<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVGrid<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyVGrid<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static LazyVGrid._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t partial apply for closure #1 in static LazyVGrid._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static LazyHGrid._makeView(view:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t (*)(_QWORD))type metadata accessor for LazyVGrid, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t)&protocol witness table for LazyVGridLayout, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t static LazyVGrid._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v11 = *((_DWORD *)a2 + 20);
  v12 = type metadata accessor for _VariadicView.Tree();
  LODWORD(v21) = v7;
  type metadata accessor for LazyVGrid(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  v14 = a2[3];
  v15 = a2[4];
  v18 = *(_OWORD *)(a2 + 7);
  v19 = *(_OWORD *)(a2 + 5);
  v16 = a2[9];
  _GraphValue.subscript.getter();
  v20[1] = a4;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v14;
  v25 = v15;
  v26 = v19;
  v27 = v18;
  v28 = v16;
  v29 = v11;
  v20[0] = &protocol witness table for LazyVGridLayout;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v20);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SharingActivityPickerPresentation.Key@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static SharingActivityPickerPresentation.Key.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PresentationOptionsPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of PresentationOptionsPreference((uint64_t)&static PresentationOptionsPreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ContentScrollViewPreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static ContentScrollViewPreferenceKey.defaultValue;
  return swift_bridgeObjectRetain();
}

void destroy for PresentationOptionsPreference(_QWORD *a1)
{
  void *v2;

  swift_bridgeObjectRelease();
  if (a1[2])
  {
    swift_release();
    swift_release();
  }
  v2 = (void *)a1[6];
  if ((unint64_t)v2 >= 3)

  if (a1[15])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 12));
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance InspectorAnchorPreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static InspectorAnchorPreferenceKey.defaultValue, a1);
}

void protocol witness for static Rule.initialValue.getter in conformance AccessibilityLargeContentViewHitTestingTransform(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void protocol witness for static PreviewTraitProtocol.defaultValue.getter in conformance PreviewModifierTrait(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnabledTechnologiesKey(_WORD *a1@<X8>)
{
  *a1 = 0;
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance AnyShareConfiguration.Key@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance AlwaysOnTimelinesKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static AlwaysOnTimelinesKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PopoverPresentation.Key@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static PopoverPresentation.Key.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FileImportOperation.Key@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for FileImportOperation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FileExportOperation.Key@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for FileExportOperation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ConfirmationDialog.PreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static ConfirmationDialog.PreferenceKey.defaultValue;
  return swift_bridgeObjectRetain();
}

void protocol witness for static View._makeView(view:inputs:) in conformance SubscriptionView<A, B>()
{
  static SubscriptionView._makeView(view:inputs:)();
}

uint64_t partial apply for closure #1 in ScrollViewReader.body.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ScrollViewReader.body.getter(a1, *(uint64_t (**)(uint64_t *))(v1 + 32));
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance InspectorStorage.PreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static InspectorStorage.PreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance LazyVStackLayout()
{
  return 256;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance AlertStorage.PreferenceKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static AlertStorage.PreferenceKey.defaultValue;
  return swift_bridgeObjectRetain();
}

ProtocolDescriptor *_toolbarContentProtocolDescriptor()
{
  return &protocol descriptor for ToolbarContent;
}

uint64_t _UIApplicationDefaultContentSizeCategory()
{
  return objc_msgSend(MEMORY[0x1E0DC3470], "_defaultContentSizeCategory");
}

uint64_t _observableObjectProtocolDescriptor()
{
  return MEMORY[0x1E0C95EC0];
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t ScrollViewAdjustedConfiguration.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t Value;
  uint64_t (*v3)(void);
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;

  Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)a1);
  v3 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v4 = (uint64_t *)AGGraphGetValue();
  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = v6;
  a1[14] = v5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ScrollToTopGestureAction?, (uint64_t)&type metadata for ScrollToTopGestureAction, (uint64_t (*)(_QWORD, uint64_t))v3);
  v7 = (uint64_t *)AGGraphGetValue();
  v8 = *v7;
  v9 = v7[1];
  v10 = a1[6];
  outlined copy of AppIntentExecutor?(*v7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  a1[6] = v8;
  a1[7] = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for RefreshAction?, (uint64_t)&type metadata for RefreshAction, (uint64_t (*)(_QWORD, uint64_t))v3);
  v11 = (uint64_t *)AGGraphGetValue();
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = a1[10];
  outlined copy of AppIntentExecutor?(*v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  a1[10] = v12;
  a1[11] = v13;
  a1[12] = v14;
  type metadata accessor for SafeAreaTransitionState?();
  a1[9] = *(_QWORD *)(AGGraphGetValue() + 8);
  swift_unknownObjectWeakAssign();
  static EdgeInsets.zero.getter();
  result = static EdgeInsets.== infix(_:_:)();
  if ((result & 1) != 0)
  {
    v17 = AGGraphGetValue();
    v18 = *(_QWORD *)v17;
    v46 = *(_QWORD *)(v17 + 16);
    v44 = *(_BYTE *)(v17 + 8);
    v45 = *(_BYTE *)(v17 + 24);
    v43 = *(_QWORD *)(v17 + 32);
    v40 = *(_QWORD *)(v17 + 48);
    v41 = *(_BYTE *)(v17 + 40);
    v42 = *(_BYTE *)(v17 + 56);
    v19 = *(_QWORD *)(v17 + 64);
    v20 = *(_BYTE *)(v17 + 72);
    v21 = *(_QWORD *)(v17 + 80);
    v22 = *(_BYTE *)(v17 + 88);
    v23 = *(_QWORD *)(v17 + 96);
    v24 = *(_BYTE *)(v17 + 104);
    v25 = *(_QWORD *)(v17 + 112);
    v26 = *(_BYTE *)(v17 + 120);
    static Edge.Set.all.getter();
    OptionalEdgeInsets.init()();
    v63 = v19;
    v64 = v20;
    v65 = v21;
    v66 = v22;
    v67 = v23;
    v68 = v24;
    v69 = v25;
    v70 = v26;
    static OptionalEdgeInsets.none.getter();
    v47 = v55;
    v48 = v56;
    v49 = v57;
    v50 = v58;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    v54 = v62;
    v27 = MEMORY[0x18D7593E8](&v63, &v47);
    if ((v27 & 1) != 0)
      v28 = v18;
    else
      v28 = v19;
    v71 = v28;
    v29 = v44;
    v30 = v45;
    if ((v27 & 1) == 0)
      v29 = v20;
    v72 = v29 & 1;
    v31 = v46;
    if ((v27 & 1) == 0)
    {
      v31 = v21;
      v30 = v22;
    }
    v32 = v43;
    if ((v27 & 1) == 0)
      v32 = v23;
    v33 = v41;
    if ((v27 & 1) == 0)
      v33 = v24;
    v34 = v40;
    if ((v27 & 1) == 0)
      v34 = v25;
    v73 = v31;
    v74 = v30 & 1;
    v35 = v42;
    if ((v27 & 1) == 0)
      v35 = v26;
    v75 = v32;
    v76 = v33 & 1;
    v77 = v34;
    v78 = v35 & 1;
    result = OptionalEdgeInsets.in(edges:)();
    a1[1] = v36;
    a1[2] = v37;
    a1[3] = v38;
    a1[4] = v39;
  }
  return result;
}

double static AccessibilityViewModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  void (*v21)(__int128 *__return_ptr, __int128 *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  double result;
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  _BYTE v80[28];
  _BYTE v81[48];
  _BYTE v82[32];
  int v83;
  __int128 v84;
  _BYTE v85[32];
  _BYTE v86[32];
  int v87;
  _BYTE v88[48];
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;

  v73 = a3;
  v92 = *MEMORY[0x1E0C80C00];
  v12 = a2[3];
  *(_OWORD *)&v88[32] = a2[2];
  v89 = v12;
  v90 = a2[4];
  v91 = *((_DWORD *)a2 + 20);
  v13 = *a2;
  v14 = a2[1];
  v79 = DWORD2(v89);
  v78 = v89;
  v15 = *a1;
  *(_OWORD *)v88 = v13;
  *(_OWORD *)&v88[16] = v14;
  *(_QWORD *)&v84 = v89;
  DWORD2(v84) = DWORD2(v89);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
    *(_OWORD *)&v85[16] = *(_OWORD *)&v88[32];
    *(_OWORD *)v86 = v89;
    *(_OWORD *)&v86[16] = v90;
    v87 = v91;
    v84 = *(_OWORD *)v88;
    *(_OWORD *)v85 = *(_OWORD *)&v88[16];
    outlined retain of _ViewInputs((uint64_t)v88);
    v72 = v7;
    static AccessibilityViewModifier.configureInputsForGeometry(_:)((uint64_t)&v84, a5, a6);
    v65 = *(_QWORD *)v88;
    *(_OWORD *)v80 = *(_OWORD *)&v88[8];
    *(_OWORD *)&v80[12] = *(_OWORD *)&v88[20];
    *(_QWORD *)&v64 = *(_QWORD *)&v88[40];
    v66 = *(_DWORD *)&v88[36];
    if ((v88[36] & 0x10) != 0)
    {
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    v70 = a6;
    v71 = a5;
    v69 = a7;
    v68 = v16;
    if ((v16 & 2) != 0
      && (*(_OWORD *)&v81[32] = *(_OWORD *)&v88[32],
          *(_OWORD *)v82 = v89,
          *(_OWORD *)&v82[16] = v90,
          v83 = v91,
          *(_OWORD *)v81 = *(_OWORD *)v88,
          *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16],
          (_ViewInputs.isScrapeable.getter() & 1) != 0))
    {
      v17 = a4;
      ScrapeableID.init()();
      v67 = *(_DWORD *)v81;
      _ViewInputs.scrapeableParentID.setter();
    }
    else
    {
      v17 = a4;
      v67 = 0;
    }
    LODWORD(v75) = v15;
    v19 = v15;
    *(_QWORD *)v81 = v84;
    *(_DWORD *)&v81[8] = DWORD2(v84);
    *(_OWORD *)&v81[24] = *(_OWORD *)&v85[8];
    *(_QWORD *)&v81[16] = *(_QWORD *)v85;
    *(_QWORD *)&v81[40] = *(_QWORD *)&v85[24];
    *(_QWORD *)v82 = *(_QWORD *)v86;
    *(_OWORD *)&v82[8] = *(_OWORD *)&v86[8];
    *(_QWORD *)&v82[24] = *(_QWORD *)&v86[24];
    v83 = v87;
    v20 = v70;
    v21 = *(void (**)(__int128 *__return_ptr, __int128 *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = v17;
    v23 = v71;
    v21(&v77, &v75, v81, v73, v22, v71, v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v66 & 0x10) != 0)
    {
      *(_QWORD *)v81 = v78;
      *(_DWORD *)&v81[8] = v79;
      if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      {
        *(_OWORD *)v81 = v77;
        v24 = _ViewOutputs.subscript.getter();
        v25 = *MEMORY[0x1E0CFED28];
        if ((v24 & 0x100000000) != 0)
          v26 = *MEMORY[0x1E0CFED28];
        else
          v26 = v24;
        LODWORD(v73) = v26;
      }
      else
      {
        v25 = *MEMORY[0x1E0CFED28];
        LODWORD(v73) = *MEMORY[0x1E0CFED28];
      }
      _DisplayList_Identity.init()();
      v63 = *(_DWORD *)v81;
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      LODWORD(v75) = v63;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs((uint64_t)v88);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs((uint64_t)v88);
      v40 = v76;
      *(_QWORD *)v81 = v65;
      *(_OWORD *)&v81[8] = *(_OWORD *)v80;
      *(_OWORD *)&v81[20] = *(_OWORD *)&v80[12];
      *(_DWORD *)&v81[36] = v66;
      *(_QWORD *)&v81[40] = v64;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs((uint64_t)v88);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs((uint64_t)v88);
      v66 = v74;
      *(_DWORD *)v81 = v15;
      type metadata accessor for _GraphValue();
      LODWORD(v65) = v40 & 1;
      v64 = v75;
      v62 = _GraphValue.value.getter();
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      v61 = _ViewInputs.animatedSize()();
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      v60 = _ViewInputs.animatedPosition()();
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      v41 = _ViewInputs.containerPosition.getter();
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      v42 = _ViewInputs.environment.getter();
      v43 = v77;
      v45 = DWORD2(v77);
      v44 = HIDWORD(v77);
      *(_OWORD *)v81 = v77;
      v46 = _ViewOutputs.subscript.getter();
      *(_QWORD *)v81 = v43;
      if ((v46 & 0x100000000) != 0)
        v47 = v25;
      else
        v47 = v46;
      *(_DWORD *)&v81[8] = v45;
      *(_DWORD *)&v81[12] = v44;
      v48 = _ViewOutputs.subscript.getter();
      *(_DWORD *)v81 = v63;
      v81[4] = v65;
      if ((v48 & 0x100000000) != 0)
        v50 = v25;
      else
        v50 = v48;
      *(_OWORD *)&v81[8] = v64;
      v81[24] = v66;
      *(_DWORD *)&v81[28] = v62;
      *(_DWORD *)&v81[32] = v61;
      *(_DWORD *)&v81[36] = v60;
      *(_DWORD *)&v81[40] = v41;
      v23 = v71;
      *(_DWORD *)&v81[44] = v42;
      *(_DWORD *)v82 = v47;
      *(_DWORD *)&v82[4] = v73;
      *(_DWORD *)&v82[8] = v50;
      MEMORY[0x1E0C80A78](v48, v49);
      v20 = v70;
      v58 = type metadata accessor for DisplayListTransform(0, v71, v70, v51);
      v59 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayListTransform<A>, v58);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>, MEMORY[0x1E0CE1148], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v81, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_19, (uint64_t)&v57, v58, MEMORY[0x1E0DEDCE8], v52, MEMORY[0x1E0DEDD18], v53);
      v81[0] = 0;
      _ViewOutputs.subscript.setter();
    }
    v76 = v19;
    *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
    *(_OWORD *)v82 = v89;
    *(_OWORD *)&v82[16] = v90;
    v83 = v91;
    *(_OWORD *)v81 = *(_OWORD *)v88;
    *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
    v75 = v77;
    v74 = v67;
    v54 = static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)((uint64_t)&v76, (uint64_t *)v81, (uint64_t)&v75, &v74, v23, v20);
    v81[0] = 0;
    v55 = v54;
    _ViewOutputs.subscript.setter();
    v56 = v69;
    if ((v68 & 1) != 0)
    {
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      v75 = v77;
      LOBYTE(v76) = 1;
      static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v55, 0x100000000, (uint64_t)v81);
      v81[0] = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *v56 = v77;
    result = *((double *)&v77 + 1);
    v56[1] = *((_QWORD *)&v77 + 1);
    return result;
  }
  *(_QWORD *)&v84 = v78;
  DWORD2(v84) = v79;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(_QWORD *)&v84 = v78, DWORD2(v84) = v79, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    v72 = a4;
    outlined retain of _ViewInputs((uint64_t)v88);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v88);
    v18 = v84;
    *(_OWORD *)&v85[16] = *(_OWORD *)&v88[32];
    *(_OWORD *)v86 = v89;
    *(_OWORD *)&v86[16] = v90;
    v87 = v91;
    v84 = *(_OWORD *)v88;
    *(_OWORD *)v85 = *(_OWORD *)&v88[16];
    if ((v18 & 0x10) != 0)
    {
      outlined retain of _ViewInputs((uint64_t)v88);
      PropertyList.subscript.getter();
      *(_DWORD *)v81 &= ~0x10u;
      PropertyList.subscript.setter();
      v27 = 1;
      a4 = v72;
      goto LABEL_20;
    }
    a4 = v72;
  }
  else
  {
    *(_OWORD *)&v85[16] = *(_OWORD *)&v88[32];
    *(_OWORD *)v86 = v89;
    *(_OWORD *)&v86[16] = v90;
    v87 = v91;
    v84 = *(_OWORD *)v88;
    *(_OWORD *)v85 = *(_OWORD *)&v88[16];
  }
  outlined retain of _ViewInputs((uint64_t)v88);
  v27 = 0;
LABEL_20:
  LODWORD(v77) = v15;
  *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
  *(_OWORD *)v82 = v89;
  *(_OWORD *)&v82[16] = v90;
  v83 = v91;
  *(_OWORD *)v81 = *(_OWORD *)v88;
  *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
  (*(void (**)(_BYTE *__return_ptr, __int128 *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64))(v80, &v77, v81, v73, a4, a5, a6);
  if (v27)
  {
    *(_OWORD *)v81 = *(_OWORD *)v80;
    v28 = _ViewOutputs.subscript.getter();
    if ((v28 & 0x100000000) != 0)
      v29 = *MEMORY[0x1E0CFED28];
    else
      v29 = v28;
    *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
    *(_OWORD *)v82 = v89;
    *(_OWORD *)&v82[16] = v90;
    v83 = v91;
    *(_OWORD *)v81 = *(_OWORD *)v88;
    *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
    v30 = _ViewInputs.environment.getter();
    MEMORY[0x1E0C80A78](v30, v31);
    v58 = __PAIR64__(v32, v29);
    *(_QWORD *)v81 = v78;
    *(_DWORD *)&v81[8] = v79;
    MEMORY[0x1E0C80A78](v32, v33);
    outlined retain of [Text.Modifier]((uint64_t)&v78);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)v81 = v78;
  *(_DWORD *)&v81[8] = v79;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)v88);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v88);
    if ((v81[0] & 0x80) != 0)
    {
      *(_OWORD *)v81 = *(_OWORD *)v80;
      v34 = _ViewOutputs.subscript.getter();
      if ((v34 & 0x100000000) != 0)
        v35 = *MEMORY[0x1E0CFED28];
      else
        v35 = v34;
      *(_OWORD *)&v81[32] = *(_OWORD *)&v88[32];
      *(_OWORD *)v82 = v89;
      *(_OWORD *)&v82[16] = v90;
      v83 = v91;
      *(_OWORD *)v81 = *(_OWORD *)v88;
      *(_OWORD *)&v81[16] = *(_OWORD *)&v88[16];
      v36 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      v37 = PropertyList.Tracker.__allocating_init()();
      *(_DWORD *)v81 = v36;
      *(_QWORD *)&v81[8] = v37;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      v38 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(_DWORD *)v81 = v35;
      *(_DWORD *)&v81[4] = v38;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      *(_DWORD *)v81 = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v80, (uint64_t)v88);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a7 = *(_QWORD *)v80;
  result = *(double *)&v80[8];
  a7[1] = *(_QWORD *)&v80[8];
  return result;
}

uint64_t static AccessibilityViewModifier.configureInputsForGeometry(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(result + 36);
  if ((v3 & 0x20) != 0)
  {
    v4 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    if ((result & 1) != 0)
    {
      result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if ((result & 1) != 0)
      {
        if ((v3 & 0x40) != 0)
        {
          v3 &= ~0x40u;
          *(_DWORD *)(v4 + 36) = v3;
        }
        if ((v3 & 0x80) != 0)
        {
          type metadata accessor for _AnyPreferenceKey<ViewRespondersKey>();
          lazy protocol witness table accessor for type _AnyPreferenceKey<ViewRespondersKey> and conformance _AnyPreferenceKey<A>();
          return PreferenceKeys.add(_:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v3 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v5 = *((_DWORD *)a2 + 20);
  v8 = *a2;
  v9 = v3;
  v10 = v4;
  v6 = *(_OWORD *)(a2 + 5);
  v11 = *(_OWORD *)(a2 + 3);
  v12 = v6;
  v13 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  v15 = v5;
  return a3(a1, &v8);
}

uint64_t outlined init with take of HashableWeakBox<UIViewController>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE2D98]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of HashableWeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2D98]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of HashableWeakBox<UIViewController>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for HashableWeakBox<UIViewController>, (uint64_t (*)(uint64_t))type metadata accessor for UIViewController, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE2D98]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_DWORD *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return UpdateViewCache.updateValue()();
}

_DWORD *UpdateViewCache.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _DWORD *result;
  uint64_t v4;

  v1 = v0;
  v2 = *(_DWORD *)(v0 + 16);
  result = (_DWORD *)AGGraphGetValue();
  if (v2 != *result >> 1)
  {
    v4 = *(_QWORD *)(v1 + 8);
    if (!v4)
    {
      __break(1u);
      goto LABEL_9;
    }
    (*(void (**)(void))(*(_QWORD *)v4 + 264))();
    *(_DWORD *)(v1 + 16) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  type metadata accessor for IncrementalLayoutViewCache();
  result = (_DWORD *)AGGraphGetOutputValue();
  if (result)
    return result;
  if (!*(_QWORD *)(v1 + 8))
  {
LABEL_9:
    __break(1u);
    return result;
  }
  return (_DWORD *)AGGraphSetOutputValue();
}

uint64_t LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(uint64_t a1, uint64_t a2)
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(a1, a2);
}

{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t partial apply for closure #1 in OnPlatformContainerSelectionModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in OnPlatformContainerSelectionModifier.body(content:)(a1, v1 + 16);
}

uint64_t @objc UIHostingController.prefersHomeIndicatorAutoHidden.getter()
{
  return UIHostingController.prefersHomeIndicatorAutoHidden.getter() & 1;
}

BOOL UIHostingController._prefersHomeIndicatorAutoHidden.getter()
{
  return UIHostingController._persistentSystemOverlays.getter() == 2;
}

id @objc UIHostingController.childForHomeIndicatorAutoHidden.getter(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)UIHostingController.childForHomeIndicatorAutoHidden.getter();

  return v2;
}

unint64_t UIHostingController._childForHomeIndicatorAutoHidden.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t result;
  id v11;

  if (UIHostingController._persistentSystemOverlays.getter()
    || (UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.getter() & 1) == 0)
  {
    return 0;
  }
  v1 = objc_msgSend(v0, sel_childViewControllers);
  v2 = type metadata accessor for UIViewController();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(char **)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      goto LABEL_11;
LABEL_5:
    v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
    }
    else if ((v3 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v5 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v6 = (char *)*(id *)(v3 + 8 * (_QWORD)v5 + 32);
LABEL_10:
        v4 = v6;
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_26;
    }
    v6 = (char *)MEMORY[0x18D75E3BC](v5, v3);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4)
    goto LABEL_5;
LABEL_11:
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v4, sel_childViewControllerForHomeIndicatorAutoHidden);

  if (v7)
    return (unint64_t)v7;
  v8 = objc_msgSend(v0, sel_childViewControllers);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_14:
  result = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
LABEL_31:
    v11 = (id)MEMORY[0x18D75E3BC](result, v2);
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v2 + 8 * result + 32);
LABEL_19:
    v7 = v11;
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController);
}

uint64_t key path setter for EnvironmentValues.layoutDirection : EnvironmentValues()
{
  return EnvironmentValues.layoutDirection.setter();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, uint64_t a2, char a3)
{
  char v6;
  Swift::Int v7;

  v6 = a3 & 1;
  Hasher.init(_seed:)();
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(a1);
    Hasher._combine(_:)(a2);
  }
  else
  {
    String.hash(into:)();
  }
  v7 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  char v29;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = v4;
  v6 = v4 + 64;
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = a4 & ~v7;
  if (((*(_QWORD *)(v4 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = a3;
    v10 = a2;
    v34 = ~v7;
    v33 = a2;
    do
    {
      v13 = *(_QWORD *)(v5 + 48) + 24 * v8;
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v13 + 8);
      v16 = *(_BYTE *)(v13 + 16);
      if ((v16 & 1) != 0)
      {
        if ((v9 & 1) != 0)
        {
          if (v14 == a1 && *(_QWORD *)(v13 + 8) == v33)
            return v8;
          goto LABEL_7;
        }
        v35 = _typeName(_:qualified:)();
        v37 = v17;
        v18._countAndFlagsBits = 45;
        v18._object = (void *)0xE100000000000000;
        String.append(_:)(v18);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20 = v10;
        v21 = v35;
        v22 = v37;
        swift_bridgeObjectRetain();
        v23 = a1;
      }
      else
      {
        if ((v9 & 1) == 0)
        {
          v24 = v14 == a1 && v15 == v10;
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            return v8;
          goto LABEL_7;
        }
        outlined copy of SceneID(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), 0);
        swift_bridgeObjectRetain();
        v36 = _typeName(_:qualified:)();
        v38 = v25;
        v26._countAndFlagsBits = 45;
        v26._object = (void *)0xE100000000000000;
        String.append(_:)(v26);
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v23 = v36;
        v20 = v38;
        v21 = v14;
        v22 = v15;
      }
      if (v21 == v23 && v22 == v20)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of SceneID(v14, v15, v16);
        return v8;
      }
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID(v14, v15, v16);
      v9 = a3;
      v10 = a2;
      if ((v29 & 1) != 0)
        return v8;
LABEL_7:
      v8 = (v8 + 1) & v34;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = v12 + 24 * v7;
      if ((*(_BYTE *)(v13 + 16) & 1) != 0)
      {
        if ((a3 & 1) == 0)
          goto LABEL_3;
      }
      else if ((a3 & 1) != 0)
      {
        goto LABEL_3;
      }
      v14 = *(_QWORD *)v13 == a1 && *(_QWORD *)(v13 + 8) == a2;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return v7;
LABEL_3:
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v7 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v7;
    swift_bridgeObjectRelease();
    return outlined destroy of AnyHashable(a2);
  }
  else
  {
    v6 = MEMORY[0x1E0DEE9B8] + 8;
    outlined destroy of AccessibilityTableContext?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v8);
    outlined destroy of AnyHashable(a2);
    return outlined destroy of AccessibilityTableContext?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of OptionalBinaryInteger((__int128 *)a1, (uint64_t)&v21);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *v3;
    *v3 = 0x8000000000000000;
    v6 = *((_QWORD *)&v22 + 1);
    v7 = v23;
    v8 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v21, *((uint64_t *)&v22 + 1));
    v9 = MEMORY[0x1E0C80A78](v8, v8);
    v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v12 + 16))(v11, v9);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, &v20, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    *v3 = v20;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyAccessibilityPropertiesEntry?(a1);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) != 0)
    {
      v16 = v14;
      v17 = swift_isUniquelyReferenced_nonNull_native();
      v18 = *v3;
      v20 = *v3;
      *v3 = 0x8000000000000000;
      if ((v17 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v18 = v20;
      }
      outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v18 + 56) + 40 * v16), (uint64_t)&v21);
      specialized _NativeDictionary._delete(at:)(v16, v18);
      *v3 = v18;
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
    }
    return outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v21);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = v2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<Swift.AnyObject>?);
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    v7 = v6;
    if ((v6 & 1) != 0)
    {
      v8 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v10 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v10 = v13;
      }
      outlined init with take of WeakBox<Swift.AnyObject>(*(_QWORD *)(v10 + 56) + 8 * v8, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE77D8]);
      specialized _NativeDictionary._delete(at:)(v8, v10);
      *v3 = v10;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
    }
    v16 = (v7 & 1) == 0;
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v15, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<Swift.AnyObject>?);
  }
  else
  {
    outlined init with take of WeakBox<Swift.AnyObject>(a1, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE77D8]);
    v11 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v15, a2, v11);
    *v2 = v14;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v9;
    swift_bridgeObjectRelease();
    v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    v7 = MEMORY[0x1E0DEE9B8] + 8;
    outlined destroy of AccessibilityTableContext?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v10);
    v8 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
    return outlined destroy of AccessibilityTableContext?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v7);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  if (*(_QWORD *)(a1 + 128) >> 1 == 4294967294)
  {
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v6 & 1) != 0)
    {
      v7 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v9 = *v2;
      v12 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v9 = v12;
      }
      outlined init with take of UpdateViewDestinationRequest(*(_QWORD *)(v9 + 56) + 160 * v7, (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v7, v9);
      *v3 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
      v15 = 0x1FFFFFFFCLL;
      v16 = 0;
      v17 = 0;
      v18 = 0;
    }
    return outlined destroy of AccessibilityTableContext?((uint64_t)v14, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  }
  else
  {
    outlined init with take of UpdateViewDestinationRequest(a1, (uint64_t)v14);
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, v10);
    *v2 = v13;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char v5;
  uint64_t v7;
  char v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[5];
  uint64_t v15;
  char v16;

  v3 = v2;
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    outlined destroy of AccessibilityTableContext?(a1, &lazy cache variable for type metadata for NavigationDestinationPresentation?, (uint64_t)&type metadata for NavigationDestinationPresentation);
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v11 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v11 = v13;
      }
      outlined init with take of NavigationDestinationPresentation(*(_QWORD *)(v11 + 56) + 96 * v9, (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      v16 = -1;
    }
    return outlined destroy of AccessibilityTableContext?((uint64_t)v14, &lazy cache variable for type metadata for NavigationDestinationPresentation?, (uint64_t)&type metadata for NavigationDestinationPresentation);
  }
  else
  {
    outlined init with take of NavigationDestinationPresentation(a1, (uint64_t)v14);
    v5 = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, v5);
    *v2 = v12;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  __int128 v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of OptionalBinaryInteger((__int128 *)a1, (uint64_t)v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of LocationBasedSensoryFeedback?(a1, (unint64_t *)&lazy cache variable for type metadata for CommandAction?, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for CommandAction?, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _BYTE v7[16];

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    outlined destroy of IdentifiedDocumentGroupConfiguration(a2);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>?);
  }
  else
  {
    outlined init with take of TableCellFormula(a1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<PlatformDocument>);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    swift_bridgeObjectRelease();
    return outlined destroy of IdentifiedDocumentGroupConfiguration(a2);
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void @objc UIHostingContentView._containerViewIsHidden(forReuse:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = a1;
  UIHostingContentView._containerViewIsHidden(forReuse:)(a3);

}

uint64_t UIHostingContentView.updateViewGraphForDisplay(isHidden:)(char a1)
{
  _QWORD *v1;
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = a1 & 1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = _UIHostingView.isHiddenForReuse.getter();
  if ((result & 1) != v3)
  {
    _UIHostingView.isHiddenForReuse.setter(v3);
    specialized _UIHostingView.focusBridge.getter();
    swift_retain();
    FocusBridge.canAcceptFocus.setter((a1 & 1) == 0);
    swift_release();
    if ((a1 & 1) == 0 && *((_BYTE *)v1 + *(_QWORD *)((*v4 & *v1) + 0xA00)) == 1)
    {
      static Semantics.v6.getter();
      v6 = isLinkedOnOrAfter(_:)();
      if ((v6 & 1) != 0)
      {
        MEMORY[0x1E0C80A78](v6, v7);
        static Update.ensure<A>(_:)();
      }
    }
    type metadata accessor for UIHostingContentView();
  }
  return result;
}

uint64_t destroy for InsettableGroupedListBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + v8 + ((v6 + 16) & v7) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
    goto LABEL_5;
  }
  v10 = *v9;
  if ((unint64_t)*v9 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  if ((_DWORD)v10 == -1)
  {
LABEL_5:
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + v8 + ((v6 + 16) & v7) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void UIHostingController.__allocating_init(rootView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized UIHostingController.__allocating_init(rootView:)(a1, a2, a3, a4);
}

uint64_t sub_186E5ADB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(v1);
  return a1;
}

uint64_t CubicGradientProvider.resolve(in:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  int64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  char v24;

  v7 = *(_QWORD *)(a2 + 16);
  if (!a3)
  {
    v8 = *(_QWORD *)(a2 + 16);
    if (v7)
      goto LABEL_6;
LABEL_14:
    result = default argument 1 of ResolvedGradient.init(stops:colorSpace:)();
    *(_QWORD *)a5 = MEMORY[0x1E0DEE9D8];
    *(_BYTE *)(a5 + 8) = v21;
    return result;
  }
  if (*(_QWORD *)(a3 + 16) <= v7)
    v8 = *(_QWORD *)(a2 + 16);
  else
    v8 = *(_QWORD *)(a3 + 16);
  if (!v8)
    goto LABEL_14;
LABEL_6:
  v20 = *a1;
  v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0, MEMORY[0x1E0DEE9D8]);
  v10 = 0;
  v11 = a4 + 44;
  do
  {
    if (v10 < v7)
    {
      v21 = v20;
      swift_retain();
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
    }
    ResolvedGradient.Stop.init(color:location:interpolation:)();
    v12 = v21;
    v13 = v23;
    v15 = *((_QWORD *)v9 + 2);
    v14 = *((_QWORD *)v9 + 3);
    if (v15 >= v14 >> 1)
    {
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v9);
      v12 = v21;
      v13 = v23;
      v9 = v17;
    }
    *((_QWORD *)v9 + 2) = v15 + 1;
    v16 = &v9[48 * v15];
    *((_OWORD *)v16 + 2) = v12;
    ++v10;
    *((_QWORD *)v16 + 6) = v22;
    *(_OWORD *)(v16 + 56) = v13;
    v16[72] = v24;
    v11 += 16;
  }
  while (v8 != v10);
  result = default argument 1 of ResolvedGradient.init(stops:colorSpace:)();
  *(_QWORD *)a5 = v9;
  *(_BYTE *)(a5 + 8) = v21;
  return result;
}

uint64_t key path setter for EnvironmentValues.tint : EnvironmentValues()
{
  swift_retain();
  return EnvironmentValues.tint.setter();
}

uint64_t DragGesture.init<A>(minimumDistance:coordinateSpace:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  _QWORD v11[6];

  if (one-time initialization token for all != -1)
    swift_once();
  *(_BYTE *)(a4 + 49) = static _EventDirections.all;
  *(double *)a4 = a5;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v11, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return outlined init with take of CoordinateSpace((uint64_t)v11, a4 + 8);
}

void closure #1 in InsettableGroupedListBodyRule.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_186E5B160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 128) = v7;
  *(_QWORD *)(v8 - 120) = v4;
  *(_QWORD *)(v8 - 112) = v6;
  *(_QWORD *)(v8 - 104) = v5;
  *(_QWORD *)(v8 - 96) = v3;
  *(_QWORD *)(v8 - 88) = v2;
  type metadata accessor for InsettableGroupedListBodyRule();
}

void sub_186E5B1A4()
{
  InsettableGroupedListBodyRule.base.getter();
}

uint64_t sub_186E5B1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  View.styleContext<A>(_:)();
  v4 = type metadata accessor for StyleContextWriter();
  v5 = type metadata accessor for ModifiedContent();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v4);
  *(_QWORD *)(v3 - 144) = &protocol witness table for ListStyleContent;
  *(_QWORD *)(v3 - 136) = v6;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v3 - 144);
  v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))static ViewBuilder.buildExpression<A>(_:))(v7, v5, v7);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v5, *(_QWORD *)(v3 - 152));
}

void closure #1 in closure #2 in InsettableGroupedListBody.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for InsettableGroupedListBody();
}

uint64_t sub_186E5B2E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  ((void (*)(uint64_t, uint64_t, uint64_t))static ViewBuilder.buildExpression<A>(_:))(v3 + *(int *)(a1 + 56), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

uint64_t PlatformFallbackButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char *v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v31 = a1;
  v32 = a2;
  v2 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v31 - v13;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v31 - v17;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
  v20 = v19;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v31 - v22;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v31, (uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v24 = v5[1];
  *v10 = *v5;
  v10[1] = v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v5[*(int *)(v2 + 24)], (uint64_t)&v10[*(int *)(v7 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10, (uint64_t)v14);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14, (uint64_t)v18);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14);
  outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v18, (uint64_t)v23, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
  v25 = &v23[*(int *)(v20 + 36)];
  *(_QWORD *)v25 = 0;
  v25[8] = 0;
  outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>((uint64_t)v18, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
  KeyPath = swift_getKeyPath();
  v27 = v32;
  outlined init with copy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v23, v32, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>();
  v29 = v27 + *(int *)(v28 + 36);
  *(_QWORD *)v29 = KeyPath;
  *(_BYTE *)(v29 + 8) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>((uint64_t)v23, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
}

uint64_t BorderlessButtonStyleBase.defaultWeight.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(unsigned __int8 *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 25);
  outlined copy of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  specialized Environment.wrappedValue.getter(v1, v2, v3, v4 | (v5 << 8), (uint64_t)&v10);
  outlined consume of Environment<KeyboardShortcut?>.Content(v1, v2, v3, v4, v5);
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    return static Font.Weight.regular.getter();
  }
  v6 = v12;
  v7 = v13;
  v8 = v10 == 13 && v11 == 0xE100000000000000;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_11;
  swift_bridgeObjectRelease();
  if (!v6 && !v7)
    return static Font.Weight.semibold.getter();
  return static Font.Weight.regular.getter();
}

uint64_t outlined init with copy of ModifiedContent<AnyView, RootModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeWithCopy for InsettableGroupedListBody(_QWORD *__dst, _QWORD *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ~v8;
  v10 = (v8 + 16) & ~v8;
  v11 = *(_QWORD *)(v7 + 64);
  v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF)
      LODWORD(v13) = -1;
    v14 = v10 + v11;
    if ((_DWORD)v13 != -1)
      goto LABEL_5;
LABEL_7:
    *__dst = *__src;
    v15 = (_QWORD *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v12;
    v24 = ((unint64_t)v15 + v8 + 8) & v9;
    v16 = ((unint64_t)v12 + v8 + 8) & v9;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v17(v24, v16, v6);
    goto LABEL_8;
  }
  v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9))
    goto LABEL_7;
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  v18 = ((unint64_t)__dst + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)__src + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_OWORD *)v19;
  v21 = *(_OWORD *)(v19 + 16);
  *(_WORD *)(v18 + 32) = *(_WORD *)(v19 + 32);
  *(_OWORD *)v18 = v20;
  *(_OWORD *)(v18 + 16) = v21;
  v22 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v22 + 16))((*(unsigned __int8 *)(v22 + 80) + 34 + v18) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80), (*(unsigned __int8 *)(v22 + 80) + 34 + v19) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  return __dst;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HostingContentViewRootModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier, (uint64_t)&unk_1E1B19BE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle, (uint64_t)&type metadata for SidebarLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>);
  }
}

void UIHostingConfiguration<>.init(content:)()
{
  type metadata accessor for UIHostingConfiguration();
}

uint64_t sub_186E5B9A0(int *a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = a1[14];
  v5 = OptionalEdgeInsets.init()();
  v6 = v2 + a1[16];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 1;
  *(_BYTE *)(v2 + a1[17]) = 1;
  *(_BYTE *)(v2 + a1[18]) = 0;
  result = v1(v5);
  *(_BYTE *)(v2 + v4) = 0;
  return result;
}

uint64_t View.accessibilityLabel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = Text.init(_:tableName:bundle:comment:)();
  v10 = v9;
  v12 = v11 & 1;
  View.accessibilityLabel(_:)(v8, v9, v11 & 1, v13, a5, a6);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in BridgedListState.CommitMutation.apply()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = type metadata accessor for BridgedListState(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BridgedListState.CommitMutation(0);
  outlined init with copy of BridgedListState(a2 + *(int *)(v7 + 20), (uint64_t)v6);
  AGGraphSetValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for BridgedListState);
}

_QWORD *assignWithCopy for BridgedListState(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v15 = type metadata accessor for IndexPath();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v7, v8, v15);
      v16 = *(int *)(v9 + 20);
      v17 = &v7[v16];
      v18 = &v8[v16];
      v19 = *(_OWORD *)v18;
      v17[16] = v18[16];
      *(_OWORD *)v17 = v19;
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_9;
    }
  }
  else
  {
    if (!v13)
    {
      v20 = type metadata accessor for IndexPath();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v7, v8, v20);
      v21 = *(int *)(v9 + 20);
      v22 = &v7[v21];
      v23 = &v8[v21];
      v24 = *(_OWORD *)v23;
      v22[16] = v23[16];
      *(_OWORD *)v22 = v24;
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      goto LABEL_9;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for BridgedListState.ScrollTarget);
  }
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_9:
  v25 = a3[6];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_OWORD *)v27;
  v29 = *((_OWORD *)v27 + 1);
  v30 = *((_OWORD *)v27 + 3);
  *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
  *((_OWORD *)v26 + 3) = v30;
  *(_OWORD *)v26 = v28;
  *((_OWORD *)v26 + 1) = v29;
  v31 = *((_OWORD *)v27 + 4);
  v32 = *((_OWORD *)v27 + 5);
  v33 = *((_OWORD *)v27 + 6);
  v26[112] = v27[112];
  *((_OWORD *)v26 + 5) = v32;
  *((_OWORD *)v26 + 6) = v33;
  *((_OWORD *)v26 + 4) = v31;
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  return a1;
}

Swift::Void __swiftcall UpdateCoalescingCollectionView.safeAreaInsetsDidChange()()
{
  char *v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;
  int v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v7, sel_safeAreaInsetsDidChange);
  v1 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates;
  v2 = *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  v3 = __CFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v4;
  specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  v5 = *(_DWORD *)&v0[v1];
  v3 = v5 != 0;
  v6 = v5 - 1;
  if (!v3)
    goto LABEL_9;
  *(_DWORD *)&v0[v1] = v6;
  if (!v6 && v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1)
    specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
}

Swift::Void __swiftcall AppSceneDelegate.scenesDidChange(phaseChanged:)(Swift::Bool phaseChanged)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *v52;
  id v53;
  id *v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  void *v74;
  id v75;
  void *v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  _QWORD *v101;
  id v102;
  void *v103;
  id v104;
  uint64_t v105;
  void *v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  char v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[25];
  _BYTE v138[48];
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _BYTE v146[25];
  char v147;
  _BYTE v148[152];
  uint64_t v149;
  uint64_t v150[19];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v2 = v1;
  MEMORY[0x18D75B908]();
  AppSceneDelegate.sceneItem()(v150);
  outlined init with copy of SceneList.Item((uint64_t)v150, (uint64_t)v148);
  v4 = &unk_1EDE1C000;
  if (!phaseChanged && *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_lastVersion) == v149)
  {
    outlined destroy of SceneList.Item((uint64_t)v148);
LABEL_87:
    outlined destroy of SceneList.Item((uint64_t)v150);
    static Update.end()();
    return;
  }
  outlined destroy of SceneList.Item((uint64_t)v148);
  outlined init with copy of SceneList.Item.Value(v150, (uint64_t)&v140);
  v5 = &unk_1EDE1C000;
  switch(v147)
  {
    case 0:
      v6 = *((_QWORD *)&v140 + 1);
      v7 = v141;
      v8 = BYTE8(v141);
      v9 = v142;
      v10 = v143;
      v11 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window;
      v12 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      if (v12)
      {
        v124 = BYTE8(v141);
        v13 = v140;
        v14 = objc_msgSend(v12, sel_rootViewController);
        if (v14)
        {
          v15 = v14;
          v121 = v9;
          type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
          v16 = swift_dynamicCastClass();
          if (v16)
          {
            v17 = v16;
            AppSceneDelegate.makeRootView(_:)(v13, &v131);
            specialized UIHostingController.rootView.setter((uint64_t)&v131);
            v18 = *(_QWORD **)(v17 + direct field offset for UIHostingController.host);
            v19 = v153;
            v20 = (_QWORD *)((char *)v18 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v18) + 0x118));
            v21 = *v20;
            *v20 = v152;
            v20[1] = v19;
            swift_retain();
            v22 = v18;
            swift_retain();
            outlined consume of EnvironmentValues?(v21);
            LOWORD(v131) = 2;
            type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
            lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>();
            ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

            v23 = *(void **)(v2 + v11);
            if (v23)
            {
              v24 = objc_msgSend(v23, sel_windowScene);
              v4 = (_QWORD *)&unk_1EDE1C000;
              if (v24)
              {
                v25 = v24;
                v26 = objc_msgSend(v24, sel_sizeRestrictions);

                if (v26)
                {

                  __asm { BR              X10 }
                }
              }
              swift_release();

              outlined consume of Text?(*((uint64_t *)&v13 + 1), v7, v124, v121);
              outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
            }
            else
            {
              swift_release();

              outlined consume of Text?(*((uint64_t *)&v13 + 1), v7, v124, v121);
              outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
              v4 = (_QWORD *)&unk_1EDE1C000;
            }
            goto LABEL_75;
          }
          swift_release();

          v86 = *((_QWORD *)&v13 + 1);
          v88 = v124;
          v87 = v7;
          v89 = v9;
LABEL_55:
          outlined consume of Text?(v86, v87, v88, v89);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
          goto LABEL_76;
        }
        swift_release();
        v86 = *((_QWORD *)&v13 + 1);
        v88 = v124;
        v87 = v7;
      }
      else
      {
        swift_release();
        v86 = v6;
        v87 = v7;
        v88 = v8;
      }
      v89 = v9;
      goto LABEL_55;
    case 2:
      v135 = v144;
      v136 = v145;
      *(_OWORD *)v137 = *(_OWORD *)v146;
      *(_OWORD *)&v137[9] = *(_OWORD *)&v146[9];
      v131 = v140;
      v132 = v141;
      v133 = v142;
      v134 = v143;
      v39 = &unk_1EDE1C000;
      v51 = AppSceneDelegate.isDocumentViewControllerRootEnabled.getter();
      v52 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      if ((v51 & 1) == 0)
      {
        v5 = &unk_1EDE1C000;
        if (v52)
        {
          v78 = objc_msgSend(v52, sel_rootViewController);
          if (v78)
          {
            v79 = v78;
            type metadata accessor for DocumentBrowserViewController();
            v80 = swift_dynamicCastClass();
            if (v80)
            {
              v81 = v80;
              AppSceneDelegate.rootModifier.getter((uint64_t)&v128);
              v82 = v81 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier;
              swift_beginAccess();
              outlined assign with copy of RootModifier((uint64_t)&v128, v82);
              swift_endAccess();
              DocumentBrowserViewController.updateHosts()();
              v5 = &unk_1EDE1C000;
              outlined destroy of RootModifier((uint64_t)&v128);
            }

          }
        }
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v131);
        goto LABEL_76;
      }
      if (!v52 || (v53 = objc_msgSend(v52, sel_rootViewController)) == 0)
      {
        v56 = 0;
        v44 = 0;
        goto LABEL_52;
      }
      v42 = v53;
      type metadata accessor for UIKitNavigationController();
      v54 = (id *)swift_dynamicCastClass();
      v44 = (unint64_t)v54;
      if (!v54)
      {

        v56 = 0;
        goto LABEL_52;
      }
      v55 = objc_msgSend(v54, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v46 >> 62)
        goto LABEL_101;
      v56 = *(void **)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v56)
        goto LABEL_31;
      goto LABEL_102;
    case 5:
      v70 = v140;
      v71 = v141;
      v72 = *((_QWORD *)&v141 + 1);
      v73 = v142;
      v74 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      if (!v74)
        goto LABEL_61;
      v75 = objc_msgSend(v74, sel_rootViewController);
      if (!v75)
        goto LABEL_61;
      v76 = v75;
      type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      if (swift_dynamicCastClass())
      {
        v126 = v72;
        if ((_QWORD)v73 == 1)
        {
          *(_QWORD *)&v131 = *((_QWORD *)&v73 + 1);
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
          lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
          swift_retain();
          v77 = AnyView.init<A>(_:)();
        }
        else
        {
          swift_retain();
          v77 = *((_QWORD *)&v73 + 1);
        }
        AppSceneDelegate.makeRootView(_:)(v77, &v131);
        swift_release();
        specialized UIHostingController.rootView.setter((uint64_t)&v131);
        v90 = *(_QWORD **)(v70 + direct field offset for UIHostingController.host);
        v91 = v153;
        v92 = (_QWORD *)((char *)v90 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v90) + 0x118));
        v93 = *v92;
        *v92 = v152;
        v92[1] = v91;
        swift_retain();
        v94 = v90;
        swift_retain();
        outlined consume of EnvironmentValues?(v93);
        LOWORD(v131) = 2;
        type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        outlined consume of SceneID(v70, *((uint64_t *)&v70 + 1), v71);
        outlined consume of UISceneAdaptorConfiguration.Kind(v126, v73);
        swift_release();
        v4 = &unk_1EDE1C000;
        goto LABEL_75;
      }

LABEL_61:
      outlined consume of SceneID(v70, *((uint64_t *)&v70 + 1), v71);
      outlined consume of UISceneAdaptorConfiguration.Kind(v72, v73);
      swift_release();
      goto LABEL_76;
    case 7:
      v27 = *((_QWORD *)&v141 + 1);
      v28 = v2;
      v29 = v142;
      v30 = BYTE8(v142);
      v31 = v143;
      v32 = v144;
      v33 = v145;
      v123 = *(_OWORD *)v146;
      v34 = v28;
      v35 = *(void **)(v28 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      v127 = *((_QWORD *)&v145 + 1);
      if (!v35)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v83 = v27;
        v84 = v29;
        v85 = v30;
LABEL_57:
        outlined consume of Text?(v83, v84, v85, v31);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*((uint64_t *)&v32 + 1));
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v127);
        v2 = v34;
        goto LABEL_70;
      }
      v120 = v142;
      v122 = *((_QWORD *)&v140 + 1);
      v119 = *((_QWORD *)&v142 + 1);
      v36 = v141;
      v37 = v140;
      v38 = objc_msgSend(v35, sel_rootViewController);
      if (!v38)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v83 = *((_QWORD *)&v36 + 1);
        v85 = v119;
        v84 = v120;
        goto LABEL_57;
      }
      v39 = v38;
      type metadata accessor for UIKitNavigationController();
      v40 = (void *)swift_dynamicCastClass();
      v41 = v33;
      v42 = (void *)*((_QWORD *)&v32 + 1);
      v2 = v34;
      if (!v40)
      {
        swift_bridgeObjectRelease();

        swift_release();
        outlined consume of Text?(*((uint64_t *)&v36 + 1), v120, v119, v31);
        swift_release();
        goto LABEL_69;
      }
      v117 = v37;
      v43 = objc_msgSend(v40, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v44 >> 62)
      {
        swift_bridgeObjectRetain();
        v45 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v46 = *((_QWORD *)&v31 + 1);
      v4 = (_QWORD *)v31;
      if (!v45)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_release();
        outlined consume of Text?(*((uint64_t *)&v36 + 1), v120, v119, v31);
        swift_release();
        goto LABEL_69;
      }
      if ((v44 & 0xC000000000000001) != 0)
      {
        v47 = (id)MEMORY[0x18D75E3BC](0, v44);
        goto LABEL_21;
      }
      if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v47 = *(id *)(v44 + 32);
LABEL_21:
        v48 = v47;
        swift_bridgeObjectRelease();
        type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIHostingController<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
        v49 = swift_dynamicCastClass();
        if (v49)
        {
          if (static AppGraph.shared)
          {
            v114 = v49;
            v116 = v41;
            if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E0CFED28])
            {
              v50 = MEMORY[0x1E0DEE9D8];
            }
            else
            {
              v50 = *(_QWORD *)AGGraphGetValue();
              swift_bridgeObjectRetain();
            }
            v115 = v48;
            swift_retain();
            v97 = SceneList.allDocumentGroups()(v50);
            swift_bridgeObjectRelease();
            swift_retain();
            swift_bridgeObjectRetain();
            outlined copy of Text?(*((uint64_t *)&v36 + 1), v120, v119, v31);
            swift_bridgeObjectRetain();
            swift_retain();
            outlined copy of AppIntentExecutor?(*((uint64_t *)&v32 + 1));
            outlined copy of AppIntentExecutor?(v127);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            AppSceneDelegate.rootModifier.getter((uint64_t)&v137[24]);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v131 = v117;
            *((_QWORD *)&v131 + 1) = v122;
            v132 = v36;
            *(_QWORD *)&v133 = v120;
            *((_QWORD *)&v133 + 1) = v119;
            v134 = v31;
            v135 = v32;
            *(_QWORD *)&v136 = v116;
            *((_QWORD *)&v136 + 1) = v127;
            *(_OWORD *)v137 = v123;
            *(_QWORD *)&v137[16] = v97;
            outlined init with copy of DocumentGroupsIntroRootView((uint64_t)&v131, (uint64_t)&v128);
            specialized UIHostingController.rootView.setter((uint64_t)&v128);
            v98 = *(_QWORD **)(v114 + direct field offset for UIHostingController.host);
            v99 = v153;
            v100 = (_QWORD *)((char *)v98 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v98) + 0x118));
            v118 = *v100;
            *v100 = v152;
            v100[1] = v99;
            swift_retain();
            v101 = v98;
            swift_retain();
            outlined consume of EnvironmentValues?(v118);
            LOWORD(v128) = 2;
            type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
            lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
            ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of Text?(*((uint64_t *)&v36 + 1), v120, v119, *((uint64_t *)&v31 + 1));
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*((uint64_t *)&v32 + 1));
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v127);

            swift_release();
            swift_bridgeObjectRelease();
            outlined destroy of DocumentGroupsIntroRootView((uint64_t)&v131);
            v4 = (_QWORD *)&unk_1EDE1C000;
LABEL_75:
            v5 = &unk_1EDE1C000;
            goto LABEL_76;
          }
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Text?(*((uint64_t *)&v36 + 1), v120, v119, v31);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*((uint64_t *)&v32 + 1));
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v127);

LABEL_70:
          swift_bridgeObjectRelease();
          v95 = v151;
          v96 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_lastVersion;
LABEL_86:
          *(_QWORD *)(v2 + v96) = v95;
          goto LABEL_87;
        }
        swift_bridgeObjectRelease();

        swift_release();
        outlined consume of Text?(*((uint64_t *)&v36 + 1), v120, v119, v31);
        swift_release();
LABEL_69:
        swift_bridgeObjectRelease();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*((uint64_t *)&v32 + 1));
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v127);
        goto LABEL_70;
      }
      __break(1u);
LABEL_101:
      swift_bridgeObjectRetain();
      v56 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v56)
      {
LABEL_102:
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
LABEL_31:
      if ((v46 & 0xC000000000000001) != 0)
      {
        v57 = (id)MEMORY[0x18D75E3BC](0, v46);
LABEL_34:
        v56 = v57;
        swift_bridgeObjectRelease();
        type metadata accessor for DocumentViewController();
        v58 = swift_dynamicCastClass();
        if (!v58)
        {
LABEL_52:
          outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v131);

          v5 = v39;
          goto LABEL_76;
        }
        v59 = v58;
        v60 = v152;
        v61 = v153;
        v62 = v58 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController;
        v63 = MEMORY[0x18D760234](v58 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController);
        if (v63)
        {
          v64 = (void *)v63;
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for URLDocumentHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for URLDocumentHostingController);
          v65 = swift_dynamicCastClass();
          if (v65)
          {
            v66 = *(void **)(v65 + direct field offset for UIHostingController.host);
            swift_retain();
            v67 = v66;
            v125 = v56;
            swift_retain();

            v68 = (_QWORD *)((char *)v67 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v67) + 0x118));
            v69 = *v68;
            *v68 = v60;
            v68[1] = v61;
            swift_retain();
            swift_retain();
            outlined consume of EnvironmentValues?(v69);
            LOWORD(v128) = 2;
            type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>(0);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, DocumentBaseModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
            ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
            swift_release();
            swift_release();

          }
          else
          {
            v108 = v56;

          }
        }
        else
        {
          v102 = v56;
        }
        v109 = v56;
        AppSceneDelegate.rootModifier.getter((uint64_t)&v128);
        DocumentViewController.rootModifier.setter((uint64_t)&v128);

        v110 = MEMORY[0x18D760234](v62);
        if (v110)
        {
          v111 = (void *)v110;
          type metadata accessor for DocumentHostingController();
          if (!swift_dynamicCastClass())
          {

            goto LABEL_97;
          }
          v112 = v59 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier;
          swift_beginAccess();
          outlined init with copy of SwiftUIAnySortComparator?(v112, (uint64_t)v138, &lazy cache variable for type metadata for RootModifier?, (uint64_t)&type metadata for RootModifier);
          if (v139 == 1)
          {
            v113 = v109;

            outlined destroy of AccessibilityTableContext?((uint64_t)v138, &lazy cache variable for type metadata for RootModifier?, (uint64_t)&type metadata for RootModifier);
LABEL_97:
            outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v131);
            v4 = (_QWORD *)&unk_1EDE1C000;
            v5 = v39;
LABEL_76:
            v103 = *(void **)(v2 + v5[34]);
            if (!v103)
            {
LABEL_85:
              v95 = v151;
              v96 = v4[36];
              goto LABEL_86;
            }
            if (v154)
            {
              v104 = v103;
              v105 = swift_bridgeObjectRetain();
              specialized AccessibilityProperties.subscript.getter(v105, (uint64_t)&v128);
              if (v129)
              {
                if (v130 < 2u)
                {
                  v106 = (void *)MEMORY[0x18D75CC88](v128, v129);
                  swift_bridgeObjectRelease();
LABEL_84:
                  objc_msgSend(v103, sel_setAccessibilityIdentifier_, v106);
                  swift_bridgeObjectRelease();

                  goto LABEL_85;
                }
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              v107 = v103;
            }
            v106 = 0;
            goto LABEL_84;
          }
          outlined init with take of RootModifier((uint64_t)v138, (uint64_t)&v128);
          v109 = v109;
          DocumentHostingController.updateRootView(with:rootModifier:)((uint64_t)&v131, (uint64_t)&v128);

          outlined destroy of RootModifier((uint64_t)&v128);
        }
        else
        {

        }
        goto LABEL_97;
      }
      if (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v57 = *(id *)(v46 + 32);
        goto LABEL_34;
      }
      __break(1u);
LABEL_105:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return;
    default:
      goto LABEL_105;
  }
}

void ListBatchUpdates.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v0 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v1 = type metadata accessor for CountingIndex();
  v2 = MEMORY[0x1E0CE1E60];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v0);
  MEMORY[0x18D75FFDC](v2, v1);
  type metadata accessor for ListUpdate();
}

void sub_186E5D140()
{
  static Array._allocateUninitialized(_:)();
  CollectionChanges.init()();
}

void sub_186E5D164()
{
  CollectionChanges.init()();
}

uint64_t sub_186E5D17C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  v1 = Dictionary.init(dictionaryLiteral:)();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  result = Dictionary.init(dictionaryLiteral:)();
  *v6 = v5;
  v6[1] = v4;
  v6[2] = a1;
  v6[3] = v1;
  v6[4] = result;
  return result;
}

void ListBatchUpdates.formUpdates<A>(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[10];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v25[6] = a5;
  v25[3] = a4;
  v29 = a3;
  v30 = a2;
  v25[9] = a1;
  v7 = *(_QWORD *)(a3 + 16);
  v28 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v27 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CountingIndexListDataSource(0, v7, *(_QWORD *)(v9 + 24), v10);
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v25[7] = (char *)v25 - v13;
  v25[5] = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v25[4] = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for CountingIndexListDataSource(0, a4, a5, v17);
  v25[8] = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v18);
  v25[2] = (char *)v25 - v19;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v20 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v21 = type metadata accessor for CountingIndex();
  v22 = MEMORY[0x1E0CE1E60];
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v20);
  v24 = MEMORY[0x18D75FFDC](v22, v21);
  v33 = v20;
  v34 = v21;
  v35 = v23;
  v36 = v24;
  type metadata accessor for ListUpdate();
}

void sub_186E5D5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(1);
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(1);
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(1);
  v3 = *(_QWORD *)(v1 - 224);
  v2 = *(_QWORD *)(v1 - 216);
  v4 = *(_QWORD *)(v1 - 232);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v3, *(_QWORD *)(v1 - 184), v4);
  v5 = *(_QWORD *)(v1 - 240);
  v6 = v3;
  v7 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v5, v6, v4);
  v9 = *(_QWORD *)(v1 - 168);
  v8 = *(_QWORD *)(v1 - 160);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v9, *(_QWORD *)(v1 - 144), v0);
  v10 = *(_QWORD *)(v1 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v9, v0);
  ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(v5, v10, *(_QWORD *)(v1 - 152), v7, *(_QWORD *)(v1 - 208));
}

uint64_t sub_186E5D7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 136) + 8))(v0, *(_QWORD *)(v2 - 128));
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 192) + 8))(v1, *(_QWORD *)(v2 - 176));
}

uint64_t destroy for FormatInputToString(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

void static _FlipForRTLEffect._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  type metadata accessor for _GraphValue<_FlipForRTLEffect>();
  v11 = a2[3];
  v12 = a2[4];
  v14 = *(_OWORD *)(a2 + 7);
  v15 = *(_OWORD *)(a2 + 5);
  v13 = a2[9];
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type Child and conformance Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = v11;
  v21 = v12;
  v22 = v15;
  v23 = v14;
  v24 = v13;
  v25 = v10;
  static _LayoutDirectionBehaviorEffect._makeView(modifier:inputs:body:)(&v16, (uint64_t)&v17, a3, a4);
}

unint64_t lazy protocol witness table accessor for type Child and conformance Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Child and conformance Child;
  if (!lazy protocol witness table cache variable for type Child and conformance Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Child, &unk_1E1B0AC60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Child and conformance Child);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Child and conformance Child;
  if (!lazy protocol witness table cache variable for type Child and conformance Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Child, &unk_1E1B0AC60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Child and conformance Child);
  }
  return result;
}

double static _LayoutDirectionBehaviorEffect._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  double result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v18 = *a1;
  v4 = *(_QWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  v31 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v21 = *(_DWORD *)(a2 + 32);
  v22 = *(_DWORD *)(a2 + 68);
  v25 = *(_DWORD *)(a2 + 72);
  v29 = *(_DWORD *)(a2 + 80);
  v30 = *(_DWORD *)(a2 + 60);
  v5 = *(_DWORD *)(a2 + 8);
  v32 = *(_DWORD *)(a2 + 24);
  v26 = *(_DWORD *)(a2 + 64);
  v27 = *(_DWORD *)(a2 + 28);
  v17 = *(_DWORD *)(a2 + 36);
  v23 = *(_DWORD *)(a2 + 56);
  v24 = *(_DWORD *)(a2 + 76);
  swift_getKeyPath();
  v15 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v44 = v4;
  v45 = v5;
  v46 = v28;
  *(_QWORD *)&v47 = __PAIR64__(v27, v32);
  *((_QWORD *)&v47 + 1) = __PAIR64__(v17, v21);
  v48 = v31;
  v49 = v20;
  *(_QWORD *)&v50 = __PAIR64__(v30, v23);
  *((_QWORD *)&v50 + 1) = __PAIR64__(v22, v26);
  v51 = __PAIR64__(v24, v25);
  v52 = v29;
  type metadata accessor for _GraphValue<_LayoutDirectionBehaviorEffect>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  _GraphValue.value.getter();
  _ViewInputs.animatedSize()();
  _ViewInputs.animatedPosition()();
  _ViewInputs.transform.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLTransform and conformance FlipForRTLTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  _GraphValue.value.getter();
  _ViewInputs.position.getter();
  _ViewInputs.size.getter();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLFrame and conformance FlipForRTLFrame();
  Attribute.init<A>(body:value:flags:update:)();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.position.setter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.size.setter();
  _GraphValue.value.getter();
  _ViewInputs.containerPosition.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.containerPosition.setter();
  v35 = v4;
  v36 = __PAIR64__(v15, v5);
  v37 = v28;
  v38 = v47;
  v39 = v31;
  v40 = v20;
  v41 = v50;
  v42 = __PAIR64__(v24, v25);
  v43 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  a3(&v33, v6, &v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v35 = v20;
  LODWORD(v36) = v23;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    _DisplayList_Identity.init()();
    v12 = v35;
    v35 = v4;
    LODWORD(v36) = v5;
    v37 = v28;
    *(_QWORD *)&v38 = __PAIR64__(v27, v32);
    *((_QWORD *)&v38 + 1) = __PAIR64__(v17, v21);
    v39 = v31;
    v40 = v20;
    *(_QWORD *)&v41 = __PAIR64__(v30, v23);
    *((_QWORD *)&v41 + 1) = __PAIR64__(v22, v26);
    v42 = __PAIR64__(v24, v25);
    v43 = v29;
    _ViewInputs.pushIdentity(_:)();
    LODWORD(v35) = v18;
    v19 = _GraphValue.value.getter();
    v35 = v4;
    LODWORD(v36) = v5;
    v37 = v28;
    *(_QWORD *)&v38 = __PAIR64__(v27, v32);
    *((_QWORD *)&v38 + 1) = __PAIR64__(v17, v21);
    v39 = v31;
    v40 = v20;
    *(_QWORD *)&v41 = __PAIR64__(v30, v23);
    *((_QWORD *)&v41 + 1) = __PAIR64__(v22, v26);
    v42 = __PAIR64__(v24, v25);
    v43 = v29;
    v16 = _ViewInputs.animatedPosition()();
    v35 = v4;
    LODWORD(v36) = v5;
    v37 = v28;
    *(_QWORD *)&v38 = __PAIR64__(v27, v32);
    *((_QWORD *)&v38 + 1) = __PAIR64__(v17, v21);
    v39 = v31;
    v40 = v20;
    *(_QWORD *)&v41 = __PAIR64__(v30, v23);
    *((_QWORD *)&v41 + 1) = __PAIR64__(v22, v26);
    v42 = __PAIR64__(v24, v25);
    v43 = v29;
    v11 = _ViewInputs.animatedSize()();
    v35 = v4;
    LODWORD(v36) = v5;
    v37 = v28;
    *(_QWORD *)&v38 = __PAIR64__(v27, v32);
    *((_QWORD *)&v38 + 1) = __PAIR64__(v17, v21);
    v39 = v31;
    v40 = v20;
    *(_QWORD *)&v41 = __PAIR64__(v30, v23);
    *((_QWORD *)&v41 + 1) = __PAIR64__(v22, v26);
    v42 = __PAIR64__(v24, v25);
    v43 = v29;
    v7 = _ViewInputs.containerPosition.getter();
    v35 = v33;
    v36 = *(_QWORD *)&v34;
    v8 = _ViewOutputs.subscript.getter();
    v9 = *MEMORY[0x1E0CFED28];
    if ((v8 & 0x100000000) == 0)
      v9 = v8;
    v35 = __PAIR64__(v19, v12);
    v36 = __PAIR64__(v11, v16);
    v37 = __PAIR64__(v7, v15);
    LODWORD(v38) = v9;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v35) = 0;
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a4 = v33;
  result = v34;
  a4[1] = v34;
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition;
  if (!lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLContainerPosition, &unk_1E1AF2EE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition;
  if (!lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLContainerPosition, &unk_1E1AF2EE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLContainerPosition and conformance FlipForRTLContainerPosition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment;
  if (!lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLEnvironment, &unk_1E1AD7170);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment;
  if (!lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLEnvironment, &unk_1E1AD7170);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLEnvironment and conformance FlipForRTLEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList;
  if (!lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLDisplayList, &unk_1E1B19DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList;
  if (!lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLDisplayList, &unk_1E1B19DF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLDisplayList and conformance FlipForRTLDisplayList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLTransform and conformance FlipForRTLTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform;
  if (!lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLTransform, &unk_1E1ACDD80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform;
  if (!lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLTransform, &unk_1E1ACDD80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLTransform and conformance FlipForRTLTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlipForRTLFrame and conformance FlipForRTLFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame;
  if (!lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLFrame, &unk_1E1ABB298);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame;
  if (!lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlipForRTLFrame, &unk_1E1ABB298);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlipForRTLFrame and conformance FlipForRTLFrame);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.scrollProperties : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.scrollProperties.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

double ScrollViewDisplayListFrame.value.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Value;
  char v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  double v31;
  unint64_t v33;
  double v34;
  __int128 v35;
  __int128 v36;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)&v35);
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    v10 = v35;
    if ((v35 & 1) != 0)
    {
      static Edge.Set.horizontal.getter();
      if ((v10 & 2) == 0)
        goto LABEL_8;
    }
    else if ((v35 & 2) == 0)
    {
      goto LABEL_8;
    }
    static Edge.Set.vertical.getter();
    goto LABEL_8;
  }
  static Edge.Set.all.getter();
LABEL_8:
  v33 = HIDWORD(a3);
  outlined destroy of ScrollViewConfiguration((uint64_t)&v35);
  EdgeInsets.in(_:)();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  v11 = (__int128 *)AGGraphGetValue();
  v12 = v11[1];
  v35 = *v11;
  v36 = v12;
  MEMORY[0x18D75BE3C]();
  CGSize.outset(by:)();
  v14 = v13;
  v16 = v15;
  v17 = *(double *)AGGraphGetValue();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DED4F0], v4);
  *(_QWORD *)&v35 = v14;
  v34 = v16;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v17);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, v17);
  v18 = *(double *)&v35;
  v19 = v34;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  type metadata accessor for CGSize(0);
  v20 = (double *)AGGraphGetValue();
  v21 = v18 + *v20;
  v22 = v19 + v20[1];
  v35 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v35 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  EdgeInsets.negatedInsets.getter();
  CGPoint.offset(by:)();
  v24 = v23;
  v26 = v25;
  v27 = (double *)AGGraphGetValue();
  v28 = v24 + *v27;
  v29 = v26 + v27[1];
  v30 = (double *)AGGraphGetValue();
  v31 = v29 - v30[1];
  *(double *)&v35 = v28 - *v30;
  *((double *)&v35 + 1) = v31;
  *(double *)&v36 = v21;
  *((double *)&v36 + 1) = v22;
  AGGraphGetValue();
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)();
  return *(double *)&v35;
}

void type metadata accessor for SafeAreaTransitionState?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SafeAreaTransitionState?)
  {
    type metadata accessor for ContainerBackgroundHost(255, &lazy cache variable for type metadata for SafeAreaTransitionState);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SafeAreaTransitionState?);
  }
}

uint64_t LazyHStack.init(alignment:spacing:pinnedViews:content:)(uint64_t a1, uint64_t a2)
{
  double v2;
  void (*v3)(double);

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v3(v2);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t specialized _IncrementalStack_State.reset()()
{
  uint64_t v0;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = _Q1;
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = v7;
  v8 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 120) = v8;
  return result;
}

{
  uint64_t v0;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_BYTE *)(v0 + 32) = 1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v0 + 88) = _Q0;
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 104) = v7;
  v8 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = v8;
  return result;
}

uint64_t UIViewResponder.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 152);
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t View.listRowSeparator(_:edges:)(char a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 17) = a2;
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

{
  return View.listRowSeparator(_:edges:)(a1, a2);
}

void @objc PlatformViewHost.removeFromSuperview()(void *a1)
{
  id v1;

  v1 = a1;
  PlatformViewHost.removeFromSuperview()();

}

Swift::Void __swiftcall PlatformViewHost.removeFromSuperview()()
{
  char *v0;
  objc_class *ObjectType;
  _QWORD *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  objc_super v17;
  objc_super v18;
  id v19;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  (*(void (**)(char *, char *, uint64_t, double))(v7 + 16))((char *)&v16 - v8, &v0[*(_QWORD *)(v3 + 120)], AssociatedTypeWitness, v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if (swift_dynamicCast())
  {
    v9 = v19;
    objc_msgSend(v19, sel_willMoveToParentViewController_, 0);
    v10 = objc_msgSend(v9, sel_view);
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v10, sel_removeFromSuperview);

      v17.receiver = v0;
      v17.super_class = ObjectType;
      objc_msgSendSuper2(&v17, sel_removeFromSuperview);
      objc_msgSend(v9, sel_removeFromParentViewController);
      v12 = &v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0x80)];
      if (MEMORY[0x18D760234](v12))
      {
        v13 = *((_QWORD *)v12 + 1);
        v14 = swift_getObjectType();
        v15 = (void *)ViewRendererHost.uiViewController.getter(v14, v13);
        swift_unknownObjectRelease();
        if (v15)
        {
          objc_msgSend(v15, sel__noWarn_setOverrideTraitCollection_forChild_, 0, v9);

        }
      }

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v18.receiver = v0;
    v18.super_class = ObjectType;
    objc_msgSendSuper2(&v18, sel_removeFromSuperview);
  }
}

uint64_t @objc PlatformViewHost.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t AssociatedTypeWitness;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_release();
  swift_release();
  swift_release();
  v3 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x78);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v3, AssociatedTypeWitness);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)a1 + *(_QWORD *)((*v2 & *a1) + 0x80));
  swift_release();
  swift_weakDestroy();
  swift_release();
  return outlined destroy of PlatformViewLayoutInvalidator?((uint64_t)a1 + *(_QWORD *)((*v2 & *a1) + 0xC0));
}

uint64_t outlined destroy of weak FallbackResponderProvider?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t key path getter for EnvironmentValues.effectiveLabelStyle : EnvironmentValues@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>, (uint64_t)&type metadata for EffectiveLabelStyleKey, (uint64_t)&protocol witness table for EffectiveLabelStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>, (uint64_t)&type metadata for EffectiveLabelStyleKey, (uint64_t)&protocol witness table for EffectiveLabelStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.effectiveLabelStyle.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t Transaction.animationReason.setter()
{
  return Transaction._animationReason.setter();
}

uint64_t partial apply for closure #1 in List.init(selection:content:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in List.init(selection:content:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in List.init(selection:content:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t closure #1 in List.init(selection:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v7 = type metadata accessor for OptionalSelectionManagerProjection(0, a2, a4, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalSelectionManagerProjection<A>, v7);
  return Binding.projecting<A>(_:)();
}

{
  uint64_t v6;
  uint64_t v7;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v7 = type metadata accessor for SetSelectionManagerProjection(0, a2, a4, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetSelectionManagerProjection<A>, v7);
  return Binding.projecting<A>(_:)();
}

uint64_t type metadata accessor for OptionalSelectionManagerProjection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalSelectionManagerProjection);
}

void MakeRepresentable.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for UICollectionViewListCoordinator();
}

void sub_186E5F440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  Value = (_QWORD *)AGGraphGetValue();
  v7 = *Value + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)*Value) + 0x100);
  swift_beginAccess();
  v8 = 1;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v1))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v0, v7, v1);
    MEMORY[0x18D75B9C8](v1);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v1);
    v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, v8, 1, v3);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 192) + 8))(v2, *(_QWORD *)(v5 - 184));
  *(_QWORD *)(v5 - 112) = *(_QWORD *)(v5 - 176);
  *(_QWORD *)(v5 - 104) = v3;
  v9 = *(_QWORD *)(v5 - 160);
  *(_QWORD *)(v5 - 96) = *(_QWORD *)(v5 - 168);
  *(_QWORD *)(v5 - 88) = v9;
  type metadata accessor for UICollectionViewListCoordinator();
}

uint64_t sub_186E5F524()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(id *)AGGraphGetValue();
  v4 = AGCreateWeakAttribute();
  v5 = AGCreateWeakAttribute();
  v6 = AGCreateWeakAttribute();
  result = AGCreateWeakAttribute();
  *(_QWORD *)v0 = v3;
  *(_BYTE *)(v0 + 8) = v1;
  *(_WORD *)(v0 + 9) = *(_WORD *)(v2 - 112);
  *(_BYTE *)(v0 + 11) = *(_BYTE *)(v2 - 110);
  *(_QWORD *)(v0 + 12) = v4;
  *(_QWORD *)(v0 + 20) = v5;
  *(_QWORD *)(v0 + 28) = v6;
  *(_QWORD *)(v0 + 36) = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.headerProminence : EnvironmentValues()
{
  return EnvironmentValues.headerProminence.setter();
}

void type metadata completion function for ListCollectionViewCellBase()
{
  unint64_t v0;

  type metadata accessor for UIListContentConfiguration?(319);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t View.accessibilitySortPriority(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;
  char v5;

  v4 = a3;
  v5 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5750], (uint64_t)&v4, 1, a1, MEMORY[0x1E0CE5750], a2);
}

uint64_t type metadata completion function for WrappedButtonStyleBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t ConditionallyBorderedStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  char v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t (*v42)();
  ValueMetadata *v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a1;
  v56 = a4;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle);
  v52 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v53 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v54 = (uint64_t)&v51 - v11;
  v12 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, v16, v17, v18);
  v20 = v19;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v51 - v26;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle);
  v51 = v28;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v51 - v34;
  a3 &= 1u;
  outlined copy of Environment<Bool>.Content(a2, a3);
  v36 = specialized Environment.wrappedValue.getter(a2, a3);
  outlined consume of Environment<Bool>.Content(a2, a3);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v55, (uint64_t)v15, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v37 = v15[1];
  *v23 = *v15;
  v23[1] = v37;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v15[*(int *)(v12 + 24)], (uint64_t)&v23[*(int *)(v20 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v23, (uint64_t)v27);
  if ((v36 & 1) != 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v27, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    v38 = &v31[*(int *)(v51 + 36)];
    *(_QWORD *)v38 = 0;
    v38[8] = 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    outlined init with take of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>((uint64_t)v31, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle);
    outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>((uint64_t)v35, v56, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    v39 = (uint64_t)v35;
    v40 = (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>;
    v41 = &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>;
    v42 = lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle;
    v43 = &type metadata for BorderedButtonStyle;
  }
  else
  {
    KeyPath = swift_getKeyPath();
    v45 = swift_getKeyPath();
    v46 = v53;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v27, v53, (uint64_t (*)(_QWORD))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    v47 = v46 + *(int *)(v52 + 36);
    *(_QWORD *)v47 = KeyPath;
    *(_BYTE *)(v47 + 8) = 0;
    *(_QWORD *)(v47 + 16) = v45;
    *(_BYTE *)(v47 + 24) = 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    v48 = v46;
    v49 = v54;
    outlined init with take of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v48, v54, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle);
    outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v49, v56, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    v39 = v49;
    v40 = &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>;
    v41 = &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>;
    v42 = lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle;
    v43 = &type metadata for BorderlessButtonStyle;
  }
  return outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v39, v40, v41, (uint64_t (*)(void))v42, (uint64_t)v43);
}

uint64_t outlined init with take of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;

  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle);
    v7 = v6;
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>(255, a3, a4, a5);
    v9 = type metadata accessor for ModifiedContent();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>)
  {
    v4 = type metadata accessor for Button(0, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>);
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for PrimitiveButtonStyleContainerModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined destroy of ModifiedContent<AnyView, RootModifier>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.listStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ListStyleWriter(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for ListStyleWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListStyleWriter);
}

uint64_t View.aspectRatio(_:contentMode:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  char v7;
  char v8;

  v6 = a1;
  v7 = a2 & 1;
  v8 = a3 & 1;
  return MEMORY[0x18D75B4AC](&v6, a4, MEMORY[0x1E0CE45F8], a5);
}

uint64_t outlined destroy of BarAppearanceBridge.PlatformStorage(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _BYTE v5[32];
  uint64_t v6;

  v1 = MEMORY[0x18D760234](v0 + 24);
  if (!v1)
    return 0;
  v2 = (void *)v1;
  UIHostingController.overrides.getter((uint64_t)v5);

  v3 = MEMORY[0x18D760234](&v6);
  outlined destroy of HostingControllerOverrides((uint64_t)v5);
  return v3;
}

uint64_t ModifiedContent<>.accessibilitySortPriority(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v4;
  char v5;

  v4 = a3;
  v5 = 0;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5750], (uint64_t)&v4, 1, a1, a2);
}

uint64_t EnvironmentValues.scenePhase.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  UpdateBridgedState.updateValue()();
}

{
  ScrollStateRequestTransform.updateValue()();
}

{
  HoverResponderChild.updateValue()();
}

{
  UIKitHostedFocusItemLifecycle.updateValue()();
}

{
  ScrollStateEnqueueRequests.updateValue()();
}

{
  specialized IncrementalChildPrefetcher.updateValue()(0x8000000187BD5BD0, (uint64_t)&type metadata for LazyVStackLayout, specialized IncrementalChildPrefetcher.step(info:));
}

{
  IncrementalFocusableFillerBoundsProvider.updateValue()();
}

{
  AppearanceEffect.updateValue()();
}

{
  GeometryTransform.updateValue()();
}

{
  specialized PropertiesTransform.updateValue()();
}

{
  AccessibilityHostedViewBridgeTransform.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  DisplayList.HostedViews.ResponderFilter.updateValue()();
}

{
  DisplayList.HostedViews.updateValue()();
}

{
  BoundInputsView.Info.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  UpdateNavigationEventHandlers.updateValue()();
}

{
  BoundNavigationPathDetector.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  UpdateCollectionViewTableCoordinator.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  UpdateContextMenuInteraction.updateValue()();
}

{
  ToolbarPlacementEnvironment.updateValue()();
}

{
  ToolbarMakeEntries.updateValue()();
}

{
  AnyHoverEffectContainer.updateValue()();
}

{
  PlatformAccessibilityContent.updateValue()();
}

{
  OnFocusObserver.updateValue()();
}

{
  DragLiftIdentity.updateValue()();
}

{
  DefaultLayoutResponderFilter.updateValue()();
}

{
  specialized IncrementalChildPrefetcher.updateValue()(0x8000000187BD5CE0, (uint64_t)&type metadata for LazyHStackLayout, specialized IncrementalChildPrefetcher.step(info:));
}

{
  specialized IncrementalChildPrefetcher.updateValue()((uint64_t *)0x8000000187BD5D50, (unint64_t)&type metadata for LazyFixedSizeHStackLayout);
}

{
  specialized IncrementalChildPrefetcher.updateValue()((uint64_t *)0x8000000187BD5E20, (unint64_t)&type metadata for LazyFixedSizeVStackLayout);
}

{
  specialized IncrementalChildPrefetcher.updateValue()(0x8000000187BD5F30, (uint64_t)&type metadata for LazyHGridLayout, specialized IncrementalChildPrefetcher.step(info:));
}

{
  specialized IncrementalChildPrefetcher.updateValue()(0x8000000187BD5FE0, (uint64_t)&type metadata for LazyVGridLayout, specialized IncrementalChildPrefetcher.step(info:));
}

{
  AGGraphGetValue();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _QWORD *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  Value = (_QWORD *)AGGraphGetValue();
  v1 = Value[6];
  v2 = Value[7];
  v3 = Value[8];
  v4 = (void *)Value[9];
  type metadata accessor for ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>>();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v1, v2, v3, v4);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v1, v2, v3, v4);
}

{
  _QWORD *Value;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  Value = (_QWORD *)AGGraphGetValue();
  v1 = (void *)Value[9];
  v2 = (void *)Value[10];
  v3 = (void *)Value[11];
  v4 = (void *)Value[12];
  type metadata accessor for ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>>();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v1, v2, v3, v4);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v1, v2, v3, v4);
}

{
  _QWORD *Value;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  Value = (_QWORD *)AGGraphGetValue();
  v1 = (void *)Value[9];
  v2 = (void *)Value[10];
  v3 = (void *)Value[11];
  v4 = (void *)Value[12];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v1, v2, v3, v4);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v1, v2, v3, v4);
}

{
  void *v0;
  id v1;
  void *v2;

  AGGraphGetValue();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v0 = *(void **)AGGraphGetValue();
  swift_bridgeObjectRetain();
  v1 = v0;
  AccessibilityAttachment.init(properties:platformElement:)();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();

}

{
  swift_retain();
  swift_getAtKeyPath();
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t Value;
  uint64_t v5;

  v0 = type metadata accessor for SearchToolbarItem();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SearchToolbarItem);
  swift_retain();
  swift_getAtKeyPath();
  __break(1u);
}

{
  void *v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();

}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  __break(1u);
}

Swift::Void __swiftcall UpdateBridgedState.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OutputValue;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = v0;
  OutputValue = AGGraphGetOutputValue();
  if (!OutputValue
    || (v3 = (_DWORD *)OutputValue,
        v4 = type metadata accessor for BridgedListState(0),
        *(_DWORD *)(AGGraphGetValue() + *(int *)(v4 + 28)) != *v3))
  {
    AGGraphClearUpdate();
    v5 = MEMORY[0x18D760234](v1 + 8);
    if (v5)
    {
      v6 = (void *)v5;
      *(_QWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState) = AGCreateWeakAttribute();
      UpdateCoalescingCollectionView.updateContent()();

    }
    AGGraphSetUpdate();
    type metadata accessor for BridgedListState(0);
    AGGraphGetValue();
    AGGraphSetOutputValue();
  }
}

id UpdateCoalescingCollectionView.contentSize.didset(double a1, double a2)
{
  char *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  id result;
  double v10;
  double v11;
  int v13;
  int v14;

  v3 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates;
  v4 = *(_DWORD *)&v2[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  v5 = __CFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  *(_DWORD *)&v2[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v6;
  result = objc_msgSend(v2, sel_contentSize);
  if (v11 != a1 || v10 != a2)
    result = (id)specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  v13 = *(_DWORD *)&v2[v3];
  v5 = v13 != 0;
  v14 = v13 - 1;
  if (!v5)
    goto LABEL_14;
  *(_DWORD *)&v2[v3] = v14;
  if (!v14 && v2[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1)
    return (id)specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  return result;
}

void ListBatchUpdates.computeMoves<A>(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[15];
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t AssociatedTypeWitness;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v149 = a5;
  v143 = a2;
  v142 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v153 = *(_QWORD *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v118 = type metadata accessor for CountingIndexCollection();
  v117 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118, v7);
  v116 = (char *)v104 - v8;
  swift_getAssociatedTypeWitness();
  v152 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v157 = AssociatedConformanceWitness;
  v158 = v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for CountingIndex();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for CountingIndex();
  v155 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v115 = swift_getTupleTypeMetadata2();
  v105 = type metadata accessor for Optional();
  v104[14] = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v14);
  v104[13] = (char *)v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v107 = (char *)v104 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v104[12] = (char *)v104 - v21;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v114 = type metadata accessor for CountingIndexCollection();
  v113 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114, v22);
  v112 = (char *)v104 - v23;
  v159 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v145 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v24);
  v141 = (char *)v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v119 = (char *)v104 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v125 = (char *)v104 - v31;
  v154 = TupleTypeMetadata2;
  v138 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  v104[11] = (char *)v104 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v140 = (char *)v104 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v104[10] = (char *)v104 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v139 = (char *)v104 - v43;
  v150 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v44, v45);
  v137 = (char *)v104 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v124 = (char *)v104 - v49;
  v136 = type metadata accessor for CountingIndexCollection();
  v135 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136, v50);
  v134 = (char *)v104 - v51;
  v151 = swift_getTupleTypeMetadata2();
  v148 = type metadata accessor for Optional();
  v147 = *(_QWORD *)(v148 - 8);
  MEMORY[0x1E0C80A78](v148, v52);
  v111 = (char *)v104 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54, v55);
  v110 = (char *)v104 - v56;
  MEMORY[0x1E0C80A78](v57, v58);
  v109 = (char *)v104 - v59;
  MEMORY[0x1E0C80A78](v60, v61);
  v121 = (char *)v104 - v62;
  MEMORY[0x1E0C80A78](v63, v64);
  v108 = (char *)v104 - v65;
  swift_getAssociatedTypeWitness();
  v144 = a4;
  swift_getAssociatedConformanceWitness();
  v133 = type metadata accessor for CountingIndexCollection();
  v132 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133, v66);
  v131 = (char *)v104 - v67;
  v68 = swift_getAssociatedTypeWitness();
  v156 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v69);
  v123 = (char *)v104 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71, v72);
  v122 = (char *)v104 - v73;
  MEMORY[0x1E0C80A78](v74, v75);
  v127 = (char *)v104 - v76;
  MEMORY[0x1E0C80A78](v77, v78);
  v120 = (char *)v104 - v79;
  MEMORY[0x1E0C80A78](v80, v81);
  v128 = (char *)v104 - v82;
  MEMORY[0x1E0C80A78](v83, v84);
  v130 = (char *)v104 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v86, v87);
  v129 = (char *)v104 - v88;
  MEMORY[0x1E0C80A78](v89, v90);
  v104[9] = (char *)v104 - v91;
  MEMORY[0x1E0C80A78](v92, v93);
  v126 = (char *)v104 - v94;
  MEMORY[0x1E0C80A78](v95, v96);
  v106 = (char *)v104 - v97;
  v100 = MEMORY[0x1E0C80A78](v98, v99);
  v101 = MEMORY[0x1E0CE1E60];
  v102 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v11, v100);
  v103 = MEMORY[0x18D75FFDC](v101, v12);
  v160 = v11;
  v161 = v12;
  v162 = v102;
  v163 = v103;
  type metadata accessor for ListUpdate();
}

uint64_t sub_186E60DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BYTE v36[96];

  *(_QWORD *)(v6 - 176) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v6 - 784) = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v6 - 792) = &v36[-v11];
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v6 - 768) = &v36[-v14];
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v6 - 776) = &v36[-v17];
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v36[-v20];
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v6 - 304) = &v36[-v24];
  v25 = Array.init()();
  *(_QWORD *)(v6 - 136) = *v4;
  *(_QWORD *)(v6 - 128) = v25;
  v26 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v26);
  *(_QWORD *)(v6 - 288) = v26;
  RandomAccessCollection<>.indices.getter();
  v28 = *(_QWORD *)(v6 - 120);
  v27 = *(_QWORD *)(v6 - 112);
  if (v28 != v27)
  {
    if (v27 >= v28)
    {
      *(_QWORD *)(v6 - 248) = v4 + 3;
      *(_QWORD *)(v6 - 560) = v4 + 4;
      *(_QWORD *)(v6 - 160) = v2;
      *(_QWORD *)(v6 - 280) = v3;
      *(_QWORD *)(v6 - 256) = v5;
      *(_QWORD *)(v6 - 240) = a1;
      *(_QWORD *)(v6 - 272) = v21;
      *(_QWORD *)(v6 - 184) = v27;
      if (v28 < v27)
      {
        if (v28)
        {
          v33 = *(_QWORD *)(v6 - 304);
          Array.subscript.getter();
          Array._makeMutableAndUnique()();
          v34 = *v4;
          Array._checkSubscript_mutating(_:)(0);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 176) + 40))(v34+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 176) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 176) + 80)), v33, a1);
        }
        Array.subscript.getter();
        v35 = (char *)&loc_186E610C8 + dword_187130E2C[swift_getEnumCaseMultiPayload()];
        __asm { BR              X9 }
      }
      __break(1u);
      JUMPOUT(0x186E62B9CLL);
    }
    __break(1u);
    JUMPOUT(0x186E62BACLL);
  }
  *(_QWORD *)(v6 - 120) = 0;
  type metadata accessor for PartialRangeFrom<Int>();
  v30 = v29;
  v31 = *(_QWORD *)(v6 - 288);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF58], v31);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC928], v30);
  RangeReplaceableCollection.removeSubrange<A>(_:)();
  *(_QWORD *)(v6 - 120) = *(_QWORD *)(v6 - 128);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v31);
  return Array.append<A>(contentsOf:)();
}

void sub_186E62BB4()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _CoordinateSpaceModifier<A>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return static _CoordinateSpaceModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static _CoordinateSpaceModifier._makeViewInputs(modifier:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  _DWORD v28[4];
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v28[0] = *a1;
  type metadata accessor for _CoordinateSpaceModifier(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v22 = _GraphValue.value.getter();
  v5 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 60);
  v16 = *(_DWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 68);
  v14 = *(_DWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 76);
  v12 = *(_DWORD *)(a2 + 72);
  v10 = *(_DWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 40);
  v19 = *(_DWORD *)(a2 + 24);
  v20 = *(_DWORD *)(a2 + 32);
  v21 = *(_DWORD *)(a2 + 28);
  v18 = *(_DWORD *)(a2 + 36);
  v29 = *(_QWORD *)(a2 + 16);
  v30 = v19;
  v31 = v21;
  v32 = v20;
  v33 = v18;
  v34 = v17;
  v35 = v5;
  v36 = v16;
  v37 = v15;
  v38 = v14;
  v39 = v13;
  v40 = v12;
  v41 = v11;
  v42 = v10;
  v28[0] = v22;
  v28[1] = _ViewInputs.transform.getter();
  v28[2] = _ViewInputs.animatedPosition()();
  v28[3] = _ViewInputs.animatedCGSize()();
  v26 = type metadata accessor for CoordinateSpaceTransform(0, a3, a4, v6);
  v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoordinateSpaceTransform<A>, v26);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<ViewTransform>, MEMORY[0x1E0CE2248], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_16, (uint64_t)v25, v26, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return _ViewInputs.transform.setter();
}

uint64_t type metadata accessor for CoordinateSpaceTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CoordinateSpaceTransform);
}

Swift::Void __swiftcall ScrollViewHelper.updateGraphState(isPreferred:)(Swift::Bool isPreferred)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[4];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;

  v2 = v1;
  if (*(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates))
  {
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) & 1) == 0)
      *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) = isPreferred;
    return;
  }
  v69 = 0;
  v39 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags) & 1) != 0)
  {
    LOBYTE(v54) = 2;
    Transaction.subscript.setter();
  }
  v3 = 0xF000000000000004;
  v38 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate;
  v36 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate);
  v4 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate;
  if (MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_delegate))
  {
    v5 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(&v54, ObjectType, v5);
    swift_unknownObjectRelease();
    v44 = v55;
    v45 = v54;
    v42 = v57;
    v43 = v56;
    v46 = v60;
    v47 = v58;
    v49 = v62;
    v50 = v59;
    v48 = v63;
    v7 = v65;
    v51 = v64;
    v52 = v61;
    v8 = v66;
    v9 = v67;
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v42 = 0;
    v43 = 0;
    v46 = 0;
    v47 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v48 = 0;
    v7 = 0;
    v9 = 0;
    v8 = 0xF000000000000004;
  }
  ScrollPhaseState.init(phase:velocity:)();
  v10 = v54;
  v11 = v55;
  v12 = v56;
  if (!MEMORY[0x18D760234](v4))
  {
    v40 = 0;
    v41 = 0;
    v18 = 1;
    if ((~v8 & 0xF000000000000004) == 0)
      goto LABEL_11;
LABEL_13:
    v32 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState + 4);
    v31 = v9 | ((unint64_t)*(unsigned int *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__layoutState) << 32);
    v20 = v44;
    v19 = v45;
    v22 = v42;
    v21 = v43;
    v25 = v46;
    v23 = v47;
    v27 = v49;
    v24 = v50;
    v29 = v51;
    v26 = v52;
    v28 = v48;
    v30 = v7;
    v3 = v8;
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v4 + 8);
  v14 = swift_getObjectType();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v14, v13);
  v40 = v16;
  v41 = v15;
  LOBYTE(v13) = v17;
  swift_unknownObjectRelease();
  v18 = v13 & 1;
  if ((~v8 & 0xF000000000000004) != 0)
    goto LABEL_13;
LABEL_11:
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
LABEL_14:
  v54 = v19;
  v55 = v20;
  v56 = v21;
  v57 = v22;
  v58 = v23;
  v59 = v24;
  v60 = v25;
  v61 = v26;
  v62 = v27;
  v63 = v28;
  v64 = v29;
  v65 = v30;
  v66 = v3;
  v67 = v31;
  v68 = v32;
  v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__phaseState);
  v53[0] = v10;
  v53[1] = v11;
  v53[2] = v12;
  v53[3] = v33;
  v37 = v18;
  if ((v18 & 1) != 0)
  {
    v40 = 0;
    v41 = 0;
    v35 = 0;
  }
  else
  {
    v35 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper__containerSize);
  }
  v34 = v69;
  outlined copy of SystemScrollLayoutState?(v45, v44, v43, v42, v47, v50, v46, v52, v49, v48, v51, v7, v8);
  swift_retain();
  specialized static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(&v54, v53, v41, v40, v35, v37, v36 & 1, v34);
  swift_release();
  outlined consume of SystemScrollLayoutState?(v45, v44, v43, v42, v47, v50, v46, v52, v49, v48, v51, v7, v8);
  outlined consume of SystemScrollLayoutState?(v45, v44, v43, v42, v47, v50, v46, v52, v49, v48, v51, v7, v8);
  swift_release();
  *(_BYTE *)(v2 + v38) = 2;
  *(_QWORD *)(v2 + v39) = 0;
}

unint64_t outlined consume of SystemScrollLayoutState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  unint64_t result;

  result = a13;
  if ((~a13 & 0xF000000000000004) != 0)
    return outlined consume of SystemScrollLayoutState.ContentOffsetMode(a13);
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if (*(_DWORD *)(a1 + 4) != *MEMORY[0x1E0CFED28])
  {
    AGGraphGetValue();
    v1 = MEMORY[0x18D75BE3C]();
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(0, v1, v2);
    v3 = MEMORY[0x18D75BE3C]();
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(1, v3, v4);
  }
  AGGraphGetValue();
  _FrameLayout.init(width:height:alignment:)();
  return AGGraphSetOutputValue();
}

{
  if (*(_BYTE *)a1 == 2 && *(_DWORD *)(a1 + 4) != *MEMORY[0x1E0CFED28])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, MEMORY[0x1E0CE6918], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    AGGraphGetValue();
  }
  return AGGraphSetOutputValue();
}

{
  ScrollViewDisplayListFrame.value.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  type metadata accessor for CGRect(0);
  return AGGraphSetOutputValue();
}

{
  uint64_t v2[6];

  v2[5] = *MEMORY[0x1E0C80C00];
  ScrollableProvider.value.getter(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), v2);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

{
  uint64_t result;

  lazy protocol witness table accessor for type EmptyTuplePhase and conformance EmptyTuplePhase();
  result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    {
      type metadata accessor for [EventID : EventType]();
      if (*(_QWORD *)(*(_QWORD *)AGGraphGetValue() + 16))
        *(_BYTE *)(a1 + 8) = 1;
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<EmptyTuple>, (uint64_t)&type metadata for EmptyTuple, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 4) == *MEMORY[0x1E0CFED28])
  {
    v1 = (char *)MEMORY[0x1E0DEE9D8];
    v2 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v1 = *(char **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    v2 = *((_QWORD *)v1 + 2);
    if (!v2)
      goto LABEL_10;
  }
  v3 = 0;
  v4 = 281;
  do
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
    if (v3 >= *((_QWORD *)v1 + 2))
      __break(1u);
    ++v3;
    v1[v4] = *(_BYTE *)AGGraphGetValue();
    v4 += 272;
  }
  while (v2 != v3);
LABEL_10:
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  swift_retain();
  ContentSize.value.getter(v1, v2, v3);
  swift_release();
  return AGGraphSetOutputValue();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ResolvedSystemTextField(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  v15 = *(_OWORD *)(a1 + 4);
  v11 = *(_QWORD *)(a1 + 20);
  v12 = *(_QWORD *)(a1 + 28);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v5, type metadata accessor for SystemTextFieldConfiguration);
  *(_QWORD *)v9 = swift_getKeyPath();
  v9[8] = 0;
  outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v9[*(int *)(v6 + 20)], type metadata accessor for SystemTextFieldConfiguration);
  v13 = &v9[*(int *)(v6 + 24)];
  *(_OWORD *)v13 = v15;
  *((_QWORD *)v13 + 2) = v11;
  *((_QWORD *)v13 + 3) = v12;
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for ResolvedSystemTextField);
}

{
  void *v1;
  _BYTE v3[8];
  _BYTE v4[8];
  _BYTE v5[16];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  outlined init with copy of BridgedPopUpButtonProvider(a1, (uint64_t)v4);
  v1 = (void *)MEMORY[0x18D760234](v4);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  outlined init with take of TableCellFormula((uint64_t)v3, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>);
  v5[8] = 0;
  outlined destroy of BridgedPopUpButtonProvider((uint64_t)v4);
  type metadata accessor for WeakBox<UIButton>?(0);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIButton>?);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for TextEditorStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for UIKitTextViewAdaptor(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v25 - v12;
  v14 = *(_BYTE *)(a1 + 4);
  Value = AGGraphGetValue();
  v25 = *(_OWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v5, type metadata accessor for TextEditorStyleConfiguration);
  *(_QWORD *)v9 = swift_getKeyPath();
  v9[8] = 0;
  v18 = (uint64_t)&v9[v6[6]];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = *((_QWORD *)v5 + 2);
  v21 = *((_QWORD *)v5 + 3);
  *((_OWORD *)v9 + 1) = *(_OWORD *)v5;
  *((_QWORD *)v9 + 4) = v20;
  *((_QWORD *)v9 + 5) = v21;
  v22 = (uint64_t)&v5[*(int *)(v2 + 20)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  outlined init with take of TableCellFormula(v22, v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  v23 = &v9[v6[7]];
  *(_OWORD *)v23 = v25;
  *((_QWORD *)v23 + 2) = v16;
  *((_QWORD *)v23 + 3) = v17;
  v9[v6[8]] = v14;
  outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v13, type metadata accessor for UIKitTextViewAdaptor);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for UIKitTextViewAdaptor);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + 9))
    v6 = 256;
  else
    v6 = 0;
  v7 = v6 | *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 10))
    v8 = 0x10000;
  else
    v8 = 0;
  if (*(_BYTE *)(a1 + 11))
    v9 = 0x1000000;
  else
    v9 = 0;
  UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter(*(_QWORD *)a1, v7 | v8 | v9, (uint64_t)v5);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_BYTE *)(a1 + 8);
  v8[1] = *(_QWORD *)a1;
  v9 = v6;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PreferenceValueAttribute<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, MEMORY[0x1E0CE5CA0]);
  PreferenceValueAttribute.value.getter();
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ToolbarStorage.SearchItem?);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  if ((v1 & 0x10) != 0)
  {
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    PreferenceKeys.remove<A>(_:)();
    if ((v1 & 4) != 0)
    {
LABEL_3:
      if ((v1 & 1) != 0)
        goto LABEL_4;
LABEL_9:
      PreferenceKeys.remove<A>(_:)();
      if ((v1 & 8) != 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  PreferenceKeys.remove<A>(_:)();
  if ((v1 & 1) == 0)
    goto LABEL_9;
LABEL_4:
  if ((v1 & 8) == 0)
LABEL_5:
    PreferenceKeys.remove<A>(_:)();
LABEL_6:
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  int v1;

  v1 = *(_DWORD *)(a1 + 4);
  AGCreateWeakAttribute();
  if (v1 != *MEMORY[0x1E0CFED28])
    AGCreateWeakAttribute();
  return AGGraphSetOutputValue();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  double v9;
  uint64_t Value;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  double v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(0, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>, &lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v17 - v6;
  *(_QWORD *)&v8 = *(_QWORD *)a1;
  v17 = v8;
  v18 = *(double *)&v8;
  v19 = *(_OWORD *)(a1 + 8);
  v9 = PrimitiveButtonGesture.Child.effectiveOutset.getter();
  Value = AGGraphGetValue();
  v11 = *(_QWORD *)(Value + 40);
  v12 = *(_BYTE *)(Value + 48);
  v13 = *(_BYTE *)(Value + 16);
  v14 = *(_OWORD *)(Value + 24);
  v15 = *(_OWORD *)Value;
  v18 = v9;
  *(_QWORD *)&v19 = v11;
  BYTE8(v19) = v12;
  v20 = v15;
  v21 = v13;
  v22 = v14;
  type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>, MEMORY[0x1E0CE2E88]);
  Gesture.requiredTapCount(_:)();
  AGGraphSetOutputValue();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

{
  uint64_t View;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v8[176];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  View = type metadata accessor for DisplayList.HostedViewState.FetchView(0);
  MEMORY[0x1E0C80A78](View, v3);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, type metadata accessor for DisplayList.HostedViewState.FetchView);
  DisplayList.HostedViewState.FetchView.value.getter((uint64_t)v8);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for DisplayList.HostedViewState.FetchView);
  AGGraphSetOutputValue();
  return outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v8);
}

{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
  *(_BYTE *)(v3 + 24) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter;
  *(_QWORD *)(v4 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  if (__OFSUB__(*(_QWORD *)(a1 + 8), 1))
    __break(1u);
  AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>, (uint64_t)&type metadata for ListDisclosureGroupIndentationTraitKey, (uint64_t)&protocol witness table for ListDisclosureGroupIndentationTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  return AGGraphSetOutputValue();
}

{
  uint64_t v1;

  v1 = 0x100000000;
  if (!*(_BYTE *)(a1 + 12))
    v1 = 0;
  FocusableBoundsTransform.value.getter(*(_QWORD *)a1, v1 | *(unsigned int *)(a1 + 8));
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  void (*v1)(_QWORD *__return_ptr, uint64_t *);
  uint64_t Value;
  int v3;
  uint64_t v5;
  int v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v1 = *(void (**)(_QWORD *__return_ptr, uint64_t *))(a1 + 8);
  Value = AGGraphGetValue();
  v3 = *(_DWORD *)(Value + 8);
  v5 = *(_QWORD *)Value;
  v6 = v3;
  swift_retain();
  swift_retain();
  v1(v7, &v5);
  swift_release();
  swift_release();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ScrollViewProxy?, (uint64_t)&type metadata for _ScrollViewProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(char a1, double a2, double a3)
{
  int v5;
  uint64_t Value;
  uint64_t v7;
  double v9;
  uint64_t v10;

  v5 = a1 & 1;
  AGGraphGetValue();
  if ((Axis.Set.contains(_:)() & 1) == 0)
    return 0;
  Value = AGGraphGetValue();
  if (*(_QWORD *)(Value + 24))
  {
    MEMORY[0x1E0C80A78](Value, v7);
    Attribute.syncMainIfReferences<A>(do:)();
    return v10;
  }
  else
  {
    if (v5)
      v9 = a3;
    else
      v9 = a2;
    return *(_QWORD *)&v9;
  }
}

Swift::Void __swiftcall ScrollViewCommitMutation.apply()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _DWORD *v3;

  v1 = *(unsigned __int8 *)(v0 + 120);
  v2 = *(_BYTE *)(v0 + 176);
  v3 = (_DWORD *)MEMORY[0x1E0CFED28];
  if ((~*(_QWORD *)(v0 + 96) & 0xF000000000000004) != 0 && AGWeakAttributeGetAttribute() != *v3)
    AGGraphSetValue();
  if (v1 != 5 && AGWeakAttributeGetAttribute() != *v3)
    AGGraphSetValue();
  if ((v2 & 1) == 0 && AGWeakAttributeGetAttribute() != *v3)
  {
    type metadata accessor for CGSize(0);
    AGGraphSetValue();
  }
}

uint64_t ScrollBehaviorModifier.ChildEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[208];
  uint64_t v8;
  uint64_t v9[25];
  _BYTE v10[72];
  uint64_t v11;
  uint64_t v12;

  ScrollBehaviorModifier.ChildEnvironment.environment.getter(&v11);
  Value = AGGraphGetValue();
  outlined init with copy of ResolvedScrollBehavior(Value, (uint64_t)&v8);
  v3 = v9[3];
  __swift_project_boxed_opaque_existential_1(&v8, v9[2]);
  (*(void (**)(uint64_t *))(v3 + 24))(&v11);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v8);
  v4 = AGGraphGetValue();
  outlined init with copy of ResolvedScrollBehavior(v4, (uint64_t)v10);
  if (v12)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined assign with take of ResolvedScrollBehavior?((uint64_t)v10, (uint64_t)v9);
  outlined init with copy of ScrollEnvironmentProperties((int *)&v8, (uint64_t)v7);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  v5 = v12;
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    v5 = v12;
  }
  else
  {
    swift_release();
  }
  result = outlined destroy of ScrollEnvironmentProperties((uint64_t)&v8);
  *a1 = v11;
  a1[1] = v5;
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return UpdatedHostingScrollView.updateValue()();
}

{
  _QWORD v1[3];

  v1[2] = *MEMORY[0x1E0C80C00];
  FlipForRTLDisplayList.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  return specialized IncrementalLayoutComputer.updateValue()();
}

{
  return specialized IncrementalChildPlacements.updateValue()();
}

{
  return ResolvedScrollBehaviorModifier.TrackedEnvironment.updateValue()();
}

{
  return IncrementalTransaction.updateValue()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t Value;
  char *v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for _TaskModifier.InnerModifier(0);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _TaskModifier(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v3, type metadata accessor for _TaskModifier);
  v5 = &v3[*(int *)(v0 + 20)];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, type metadata accessor for _TaskModifier.InnerModifier);
}

{
  return specialized IncrementalChildPlacements.updateValue()();
}

{
  return AllowsHitTestingFilter.updateValue()();
}

{
  AGGraphGetValue();
  swift_retain();
  AGGraphSetOutputValue();
  return outlined consume of HoverCallback();
}

{
  _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier.value.getter();
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for IncrementalLayoutViewCache();
  v0 = *(_QWORD *)AGGraphGetValue();
  swift_beginAccess();
  swift_retain();
  v1 = swift_bridgeObjectRetain();
  v2 = specialized _NativeDictionary.filter(_:)(v1, v0);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 160) = v2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v0 + 200) = 0;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  return UpdateViewGeometry.updateValue()();
}

{
  return UpdateFocusableViewResponder.updateValue()();
}

{
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;

  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v3 = Value[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*Value, v3);
  AGGraphSetOutputValue();
  return outlined consume of Binding<NavigationSplitViewColumn>?(v2, v3);
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v4 = *Value;
  type metadata accessor for ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>>();
  outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
  AGGraphSetOutputValue();
  return outlined consume of Binding<NavigationSplitViewColumn>?(v4, v2);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_BYTE *)(Value + 16);
  if (!v2)
  {
    outlined consume of Binding<NavigationSplitViewColumn>?(*(_QWORD *)Value, 0);
    goto LABEL_5;
  }
  v7 = *(_QWORD *)Value;
  v8 = v2;
  v9 = v3 & 1;
  outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
  outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v6);
  swift_release();
  swift_release();
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
  if ((v6 & 1) != 0)
  {
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  v4 = 1;
LABEL_6:
  LOBYTE(v7) = v4;
  type metadata accessor for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>();
  return AGGraphSetOutputValue();
}

{
  return ScrollViewLayoutComputer.updateValue()();
}

{
  return OnTestEffect.updateValue()();
}

{
  unsigned int v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  IncrementalViewPhase.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;

  v0 = *(_QWORD *)(AGGraphGetValue() + 8);
  swift_retain();
  swift_retain();
  if ((EnvironmentValues.accessibilityInvertColors.getter() & 1) != 0)
    AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>, (uint64_t)&type metadata for IgnoreInvertColorsFilterActiveKey, (uint64_t)&protocol witness table for IgnoreInvertColorsFilterActiveKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  ScrollViewDisplayList.value.getter();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[25];
  _BYTE v8[72];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  Value = (uint64_t *)AGGraphGetValue();
  v1 = Value[1];
  v9 = *Value;
  v10 = v1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = AGGraphGetValue();
  outlined init with copy of SwiftUIAnySortComparator?(v2, (uint64_t)v8, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v8, (uint64_t)v7, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
  outlined init with copy of ScrollEnvironmentProperties((int *)&v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v10)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v6);
  v6 = 0;
  LOWORD(v7[0]) = 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v10)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    v3 = v10;
  }
  else
  {
    swift_release();
    v3 = 0;
  }
  v6 = v9;
  v7[0] = v3;
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  int v0;

  v0 = *(unsigned __int8 *)AGGraphGetValue();
  if (v0 == 2 || ((v0 & 1) == 0) == *(_BYTE *)AGGraphGetValue())
    AGGraphGetValue();
  else
    ViewOrigin.init()();
  return AGGraphSetOutputValue();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v5 = Value[1];
  swift_retain();
  swift_retain();
  EnvironmentValues.configureForRoot()();
  AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v1 = one-time initialization token for configuredForPlatform;
  swift_retain();
  if (v1 != -1)
    swift_once();
  v2 = static EnvironmentValues.configuredForPlatform;
  if (v4)
  {
    swift_release();
    if (!v2 || v4 != v2)
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  type metadata accessor for [SceneID : KeyboardShortcut]();
  AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey>, (uint64_t)&type metadata for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t)&protocol witness table for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = ScrollTargetRole.SetLayout.value.getter();
  v2 = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v0;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void *v0;
  uint64_t v1;
  id v2;

  type metadata accessor for UIScrollView?();
  v0 = *(void **)AGGraphGetValue();
  if (v0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_187BF9830;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(_BYTE *)(v1 + 72) = 0;
    swift_unknownObjectWeakAssign();
    v2 = v0;
    *(_QWORD *)(v1 + 48) = AGCreateWeakAttribute();
    *(_QWORD *)(v1 + 56) = AGCreateWeakAttribute();
    *(_QWORD *)(v1 + 64) = AGCreateWeakAttribute();

  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_187BF9830;
  type metadata accessor for HostingScrollView();
  v1 = *(void **)AGGraphGetValue();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 72) = 0;
  swift_unknownObjectWeakAssign();
  v2 = v1;
  *(_QWORD *)(v0 + 48) = AGCreateWeakAttribute();
  *(_QWORD *)(v0 + 56) = AGCreateWeakAttribute();
  v3 = AGCreateWeakAttribute();

  *(_QWORD *)(v0 + 64) = v3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  __int128 *Value;
  void (*v1)(_OWORD *, _QWORD);
  float64x2_t *v2;
  float64x2_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Value = (__int128 *)AGGraphGetValue();
  v5 = *Value;
  v6 = Value[1];
  type metadata accessor for CGSize(0);
  v4 = *(float64x2_t *)AGGraphGetValue();
  v1 = (void (*)(_OWORD *, _QWORD))ViewSize.value.modify();
  *v2 = vsubq_f64(*v2, v4);
  v1(v7, 0);
  v7[0] = v5;
  v7[1] = v6;
  return AGGraphSetOutputValue();
}

{
  _BYTE v1[208];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  ScrollViewAdjustedProperties.value.getter(v1);
  AGGraphSetOutputValue();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v1);
}

{
  _QWORD v1[16];

  v1[15] = *MEMORY[0x1E0C80C00];
  ScrollViewAdjustedConfiguration.value.getter(v1);
  AGGraphSetOutputValue();
  return outlined destroy of ScrollViewConfiguration((uint64_t)v1);
}

{
  uint64_t Value;
  _OWORD v2[4];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)AGGraphGetValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    outlined init with copy of SwiftUIAnySortComparator?(Value, (uint64_t)v2, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
  }
  else
  {
    v3 = 0;
    memset(v2, 0, sizeof(v2));
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphSetOutputValue();
  return outlined destroy of AccessibilityTableContext?((uint64_t)v2, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
}

{
  uint64_t v0;

  v0 = *(_QWORD *)(AGGraphGetValue() + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  __int128 v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  IsFocusedEnvironmentChild.value.getter(&v1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 8, (uint64_t)v6);
  v1 = v7;
  v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  v5 = *(_OWORD *)AGGraphGetValue();
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t, uint64_t))(v2 + 8))(&v4, &v5, v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return AGGraphSetOutputValue();
}

{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x1E0C80C00];
  FlipForRTLTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  double v0;
  double v1;
  double v2;
  double v3;
  void (*v4)(_OWORD *, _QWORD);
  double *v5;
  double v6;
  void (*v7)(_OWORD *, _QWORD);
  float64x2_t *v8;
  float64x2_t v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)AGGraphGetValue();
  AGGraphGetValue();
  EdgeInsets.originOffset.getter();
  v1 = v0;
  v3 = v2;
  v4 = (void (*)(_OWORD *, _QWORD))ViewOrigin.value.modify();
  v6 = v3 + v5[1];
  *v5 = v1 + *v5;
  v5[1] = v6;
  v4(v12, 0);
  type metadata accessor for CGSize(0);
  v10 = *(float64x2_t *)AGGraphGetValue();
  v7 = (void (*)(_OWORD *, _QWORD))ViewOrigin.value.modify();
  *v8 = vaddq_f64(v10, *v8);
  v7(v12, 0);
  v12[0] = v11;
  return AGGraphSetOutputValue();
}

{
  ResolvedSafeAreaInsets.value.getter();
  return AGGraphSetOutputValue();
}

{
  return ScrollViewResponder.updateValue()();
}

{
  return UpdateViewFocusItem.updateValue()();
}

{
  return ResolvedScrollBehaviorModifier.MakeBehavior.updateValue()();
}

{
  return RootEnvironmentModifier.Child.updateValue()();
}

{
  return specialized IncrementalLayoutComputer.updateValue()();
}

{
  return ViewResponderTransform.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()(type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return ArchivedAccessibilityAttachment.updateValue()();
}

{
  return ArchivedLayoutComputer.updateValue()();
}

{
  return ArchivedDisplayList.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return ScrollViewFocusableBorder.updateValue()();
}

{
  return ScrollViewChildContainerSize.updateValue()();
}

{
  return ScrollViewDefaultAnchors.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()(type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(_QWORD), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
}

{
  return specialized ViewResponderFilter.updateValue()((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(_QWORD), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  type metadata accessor for CGSize(0);
  AGGraphGetValue();
  lazy protocol witness table accessor for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer();
  lazy protocol witness table accessor for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine();
  return StatefulRule<>.update<A>(to:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized _NavigationSplitReader.PreparedColumn.updateValue()();
}

{
  return specialized _NavigationSplitReader.PreparedColumn.updateValue()();
}

{
  return specialized _NavigationSplitReader.PreparedColumn.updateValue()();
}

{
  return _NavigationSplitReader.UpdateRequiredCompactColumn.updateValue()();
}

{
  return _NavigationSplitReader.UpdatePreferredCompactColumn.updateValue()();
}

{
  return _NavigationSplitReader.DerivedAttributes.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()(type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(_QWORD), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()(type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(_QWORD), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()(type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(_QWORD), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (void (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()(type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized PlatformItemListGenerator.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()(&lazy cache variable for type metadata for (value: ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, changed: Bool), type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
}

{
  return specialized ViewResponderFilter.updateValue()((uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(_QWORD), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()(type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(_QWORD), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  static Signpost.platformUpdate.getter();
  return Signpost.traceInterval<A>(object:_:_:closure:)();
}

{
  return ContextMenuResponderFilter.updateValue()();
}

{
  return OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()();
}

{
  return MultimodalBadgeInfoProvider.updateValue()();
}

{
  return GridBadgeInfosActionBinding.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return PlatformAccessibilityEnv.updateValue()();
}

{
  return BaseModifier.SelectionObserver.updateValue()();
}

{
  return DropResponderFilter.updateValue()();
}

{
  return TooltipModifier.TooltipResponderUpdater.updateValue()();
}

{
  return DragSnapshotResponderFilter.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return ResponderUpdater.updateValue()();
}

{
  return ScaledLayoutComputer.updateValue()();
}

{
  return DefaultFocusViewResponderFilter.updateValue()();
}

{
  return FocusSectionResponderFilter.updateValue()();
}

{
  return FocusNamespaceFilter.updateValue()();
}

{
  return FocusEventProxyResponderFilter.updateValue()();
}

{
  return DefaultFocusSectionResponderFilter.updateValue()();
}

{
  return FocusStateBindingResponderFilter.updateValue()();
}

{
  return TemporalStateDisplayList.updateValue()();
}

{
  return AlignmentModifiedLayoutComputer.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return HoverEffectResponderFilter.updateValue()();
}

{
  return specialized ScrollActionDispatcher.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return DragReorderableChildModifier.ResponderFilter.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return NavigationTitleBinder.updateValue()();
}

{
  return OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.updateValue()();
}

{
  return SpringLoadedResponderFilter.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return specialized ScrollActionDispatcher.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return MultimodalScrollGeometryState.updateValue()();
}

{
  return LayoutScrollableTransform.updateValue()();
}

{
  return TupleEvents.updateValue()();
}

{
  return PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()();
}

{
  return SizeFittingLayoutComputer.updateValue()();
}

{
  return SizeFittingMux.updateValue()();
}

{
  return MapKitPlatformItem.Child.updateValue()();
}

{
  return specialized IncrementalLayoutComputer.updateValue()();
}

{
  return specialized IncrementalChildPlacements.updateValue()();
}

{
  return specialized PlatformItemRule.updateValue()();
}

{
  return specialized PlatformItemRule.updateValue()();
}

{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    AGGraphGetValue();
    v1 = swift_bridgeObjectRetain();
    UIKitDialogBridge.updateAlertActionsEnabled(_:)(v1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  return NavigationItemAdaptorModifier.MakeAdaptor.updateValue()();
}

{
  uint64_t result;

  type metadata accessor for (_:)();
  result = AGGraphGetOutputValue();
  if (!result)
  {
    swift_retain();
    AGGraphSetOutputValue();
    return swift_release();
  }
  return result;
}

{
  return specialized IncrementalLayoutComputer.updateValue()();
}

{
  return specialized IncrementalChildPlacements.updateValue()((void (*)(_OWORD *__return_ptr))specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:), (uint64_t)partial apply for specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:), (uint64_t)&unk_1E1B1FD90, (uint64_t)closure #2 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)partial apply, (void (*)(uint64_t, double, double))specialized IncrementalChildPlacements.logTranslation(_:reason:), (double (*)(_BYTE *, __int128 *, uint64_t))specialized IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:), dword_1E1AEECF8, &dword_1E1AEECF8[1], dword_1E1AEECD0, &dword_1E1AEECD0[1]);
}

{
  return specialized IncrementalLayoutComputer.updateValue()();
}

{
  return specialized IncrementalChildPlacements.updateValue()((void (*)(_OWORD *__return_ptr))specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:), (uint64_t)partial apply for specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:), (uint64_t)&unk_1E1B1FDB8, (uint64_t)closure #2 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)partial apply, (void (*)(uint64_t, double, double))specialized IncrementalChildPlacements.logTranslation(_:reason:), (double (*)(_BYTE *, __int128 *, uint64_t))specialized IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:), dword_1E1AEED48, &dword_1E1AEED48[1], dword_1E1AEED20, &dword_1E1AEED20[1]);
}

{
  return TransactionWrapper.updateValue()();
}

{
  return specialized IncrementalLayoutComputer.updateValue()();
}

{
  return specialized IncrementalChildPlacements.updateValue()();
}

{
  return DocumentIntroductionSceneList.MakeList.updateValue()();
}

{
  uint64_t (*v0)(__int128 *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = AccessibilityLargeContentViewTransform.value.getter();
  v2 = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v0;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  uint64_t *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v16 - v2;
  v4 = (int *)type metadata accessor for UIKitCalendarView(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of _TraitWritingTableRowModifier<DropOntoTraitKey>(Value, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
  outlined init with take of TableCellFormula((uint64_t)v3, (uint64_t)v7, type metadata accessor for MultiDatePickerStyleConfiguration);
  v9 = (uint64_t *)&v7[v4[5]];
  *v9 = swift_getKeyPath();
  v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v11 = (uint64_t *)&v7[v4[6]];
  *v11 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v10);
  swift_storeEnumTagMultiPayload();
  v12 = (uint64_t *)&v7[v4[7]];
  *v12 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v10);
  swift_storeEnumTagMultiPayload();
  v13 = &v7[v4[8]];
  *(_QWORD *)v13 = swift_getKeyPath();
  v13[8] = 0;
  v14 = &v7[v4[9]];
  *(_QWORD *)v14 = swift_getKeyPath();
  v14[8] = 0;
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for UIKitCalendarView);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for ResolvedMultiDatePicker(0);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v10 - v6;
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v3, type metadata accessor for ResolvedMultiDatePicker);
  outlined init with take of TableCellFormula((uint64_t)v3, (uint64_t)v7, type metadata accessor for MultiDatePickerStyleConfiguration);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
}

{
  uint64_t Value;
  _BYTE v2[72];
  _BYTE v3[112];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
  Value = AGGraphGetValue();
  outlined init with copy of Slice<SubviewsCollection>(Value, (uint64_t)v2);
  lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  ForEach<>.init(_:content:)();
  type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
}

{
  AGGraphGetValue();
  type metadata accessor for ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>>();
  swift_bridgeObjectRetain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  type metadata accessor for ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>>();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  Value = AGGraphGetValue();
  v2 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_WORD *)(Value + 16);
  v5 = *(_QWORD *)(Value + 32);
  v6 = *(_QWORD *)(Value + 40);
  v7 = *(_BYTE *)(Value + 48);
  type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  outlined consume of StateOrBinding<Bool>(v2, v3, v4, 1);
  return outlined consume of StateOrBinding<Bool>(v5, v6, v7, 1);
}

{
  AGGraphGetValue();
  type metadata accessor for ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>>();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  Value = AGGraphGetValue();
  v2 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_BYTE *)(Value + 16);
  type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>();
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  return outlined consume of StateOrBinding<Bool>(v2, v3, v4, 1);
}

{
  type metadata accessor for ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>>();
  return AGGraphSetOutputValue();
}

{
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[2];
  v4 = *Value;
  type metadata accessor for ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>>();
  outlined copy of AppIntentExecutor?(v1);
  outlined copy of AppIntentExecutor?(v2);
  AGGraphSetOutputValue();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v3;

  Value = (uint64_t *)AGGraphGetValue();
  v1 = Value[2];
  v3 = *Value;
  outlined copy of AppIntentExecutor?(*Value);
  outlined copy of AppIntentExecutor?(v1);
  AGGraphSetOutputValue();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

{
  id v0;
  void *v2;

  v2 = *(void **)(AGGraphGetValue() + 24);
  type metadata accessor for ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>>();
  swift_retain();
  swift_retain();
  v0 = v2;
  AGGraphSetOutputValue();

  swift_release();
  return swift_release();
}

{
  id v0;
  void *v2;

  v2 = *(void **)(AGGraphGetValue() + 24);
  swift_retain();
  swift_retain();
  v0 = v2;
  AGGraphSetOutputValue();

  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unsigned __int8 *Value;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  type metadata accessor for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>();
  v1 = v0;
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = (unsigned __int8 *)AGGraphGetValue();
  v6 = *Value;
  v25 = Value[1];
  v26 = v6;
  v7 = *((_QWORD *)Value + 1);
  v8 = *((_QWORD *)Value + 2);
  v9 = Value[24];
  v10 = Value[25];
  v11 = *(_QWORD *)(Value + 28);
  v12 = Value[36];
  v23 = Value[37];
  v24 = v12;
  v22 = Value[38];
  v21 = *((_QWORD *)Value + 5);
  v13 = Value[48];
  v19 = Value[49];
  v20 = v13;
  v14 = *((_QWORD *)Value + 7);
  v15 = *((_QWORD *)Value + 8);
  outlined copy of AppIntentExecutor?(v7);
  outlined copy of AppIntentExecutor?(v14);
  if (one-time initialization token for defaultStyleModifier != -1)
    swift_once();
  v16 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  v17 = __swift_project_value_buffer(v16, (uint64_t)static ResolvedUIKitButtonBody.defaultStyleModifier);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v17, (uint64_t)&v4[*(int *)(v1 + 36)], type metadata accessor for UIKitSystemButtonConfigurationModifier);
  *v4 = v26;
  v4[1] = v25;
  *((_QWORD *)v4 + 1) = v7;
  *((_QWORD *)v4 + 2) = v8;
  v4[24] = v9;
  v4[25] = v10;
  *(_QWORD *)(v4 + 28) = v11;
  v4[36] = v24;
  v4[37] = v23;
  v4[38] = v22;
  *((_QWORD *)v4 + 5) = v21;
  v4[48] = v20;
  v4[49] = v19;
  *((_QWORD *)v4 + 7) = v14;
  *((_QWORD *)v4 + 8) = v15;
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v3;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 56);
  v3 = *(_QWORD *)(Value + 8);
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v1);
  AGGraphSetOutputValue();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

{
  type metadata accessor for ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>>();
  return AGGraphSetOutputValue();
}

{
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePicker);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v5 - v2;
  specialized MakeResolvedRepresentation.value.getter((uint64_t)v5 - v2);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePicker);
}

{
  uint64_t v0;
  char v1;
  uint64_t v3;
  char v4;

  AGGraphGetValue();
  if (one-time initialization token for defaultStyleModifier != -1)
    swift_once();
  v0 = static ResolvedLabeledContent.defaultStyleModifier;
  v1 = byte_1EDEFF858;
  v3 = static ResolvedLabeledContent.defaultStyleModifier;
  v4 = byte_1EDEFF858;
  type metadata accessor for ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>();
  outlined copy of Environment<Bool>.Content(v0, v1);
  AGGraphSetOutputValue();
  return outlined consume of Environment<Bool>.Content(v3, v4);
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v2;

  LOBYTE(v2) = 0;
  type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>();
  lazy protocol witness table accessor for type GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content> and conformance GroupBox<A, B>();
  View._addingBackgroundGroup()();
  if (one-time initialization token for contain != -1)
    swift_once();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  swift_retain_n();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = 0;
  swift_release();
  type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

{
  type metadata accessor for ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>>();
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(swift_allocObject() + 16) = 2;
  if (one-time initialization token for contain != -1)
    swift_once();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v0 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  _QWORD v2[16];

  v2[15] = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  outlined init with copy of ResolvedTableStyle(Value, (uint64_t)v2);
  type metadata accessor for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>();
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>);
}

{
  uint64_t Value;
  _QWORD v2[16];

  v2[15] = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  outlined init with copy of ResolvedTableStyle(Value, (uint64_t)v2);
  AGGraphSetOutputValue();
  return outlined destroy of ResolvedTableStyle((uint64_t)v2);
}

{
  type metadata accessor for ModifiedContent<ResolvedLabelStyle, LabelStyleModifier<DefaultLabelStyle>>();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for StaticIf<MultiViewLabel, Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, PlatformItemLabelView<TextPlatformItemListFlags, LabelStyleConfiguration.Title, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, AccessibilityFrameModifier>>>();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  type metadata accessor for ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>>();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v3 = Value[2];
  v5 = *Value;
  type metadata accessor for ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
  outlined copy of BadgeLabel?(v1, v2, v3);
  AGGraphSetOutputValue();
  return outlined consume of BadgeLabel?(v5, v2, v3);
}

{
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v3 = Value[1];
  v4 = Value[2];
  outlined copy of BadgeLabel?(*Value, v3, v4);
  AGGraphSetOutputValue();
  return outlined consume of BadgeLabel?(v2, v3, v4);
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[2];
  v4 = *Value;
  type metadata accessor for ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>>();
  outlined copy of AppIntentExecutor?(v1);
  outlined copy of AppIntentExecutor?(v2);
  AGGraphSetOutputValue();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v3 = Value[2];
  v4 = Value[3];
  outlined copy of AppIntentExecutor?(*Value);
  outlined copy of AppIntentExecutor?(v1);
  outlined copy of AppIntentExecutor?(v3);
  specialized AccessibilityMenuModifier.body(content:)(v1, v2, v3, v4, v1, v2, (uint64_t)&v7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  AGGraphSetOutputValue();
  v5 = v8;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_BYTE *)(Value + 16);
  v5 = *(_QWORD *)Value;
  type metadata accessor for ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>>();
  outlined copy of Text.Storage(v1, v2, v3);
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  outlined consume of Text.Storage(v5, v2, v3);
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_BYTE *)(Value + 16);
  v4 = *(_QWORD *)(Value + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v2;
  *(_BYTE *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v4;
  outlined copy of Text.Storage(v1, v2, v3);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v1, v2, v3);
  swift_bridgeObjectRetain();
  specialized View.accessibility<A>(_:_:isEnabled:)(v5, 1, v1, v2, v3, v4, (uint64_t)v7);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v1, v2, v3);
  swift_bridgeObjectRelease();
  type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>();
  AGGraphSetOutputValue();
  outlined consume of Text.Storage(v7[0], v7[1], v8);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  type metadata accessor for ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>>();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Form<FormStyleConfiguration.Content>, (uint64_t)&type metadata for FormStyleConfiguration.Content, (uint64_t)&protocol witness table for FormStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Form);
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  type metadata accessor for ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>>();
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  _BYTE v2[80];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  outlined init with copy of IndexViewBody(Value, (uint64_t)v2);
  type metadata accessor for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>();
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>);
}

{
  uint64_t Value;
  _BYTE v2[80];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  outlined init with copy of IndexViewBody(Value, (uint64_t)v2);
  AGGraphSetOutputValue();
  return outlined destroy of IndexViewBody((uint64_t)v2);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 8);
  v2 = *(_QWORD *)(Value + 24);
  type metadata accessor for ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>>();
  swift_retain();
  outlined copy of AppIntentExecutor?(v1);
  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 8);
  v2 = *(_QWORD *)(Value + 24);
  swift_retain();
  outlined copy of AppIntentExecutor?(v1);
  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  AGGraphSetOutputValue();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  return swift_release();
}

{
  uint64_t v0;

  if (*(_QWORD *)(AGGraphGetValue() + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v0 = *(_QWORD *)(AGGraphGetValue() + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(AGGraphGetValue() + 8);
  type metadata accessor for @Sendable ()();
  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for @Sendable ()();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;

  AGGraphGetValue();
  Value = AGGraphGetValue();
  if ((~*(_QWORD *)(Value + 16) & 0xFFFFFFFE) == 0 && (*(_QWORD *)(Value + 24) & 0xFEFELL) == 2)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.appendSymbolEffect(_:for:)();
  }
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  int v0;

  AGGraphGetValue();
  v0 = *(unsigned __int8 *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  if (v0 == 1)
    EnvironmentValues.symbolEffects.setter();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  UnaryScrollablePreferenceProvider.value.getter();
  type metadata accessor for [Scrollable]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, (uint64_t)&type metadata for ScrollViewGesture, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;

  v0 = *(_QWORD *)(AGGraphGetValue() + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>, (uint64_t)&type metadata for ScrollViewKey, (uint64_t)&protocol witness table for ScrollViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  UnsupportedDisplayList.value.getter();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  EnvironmentValues.accessibilityEnabled.setter();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v0 = (int *)type metadata accessor for InterpolatableArchiveContent(0);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (_QWORD *)((char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for _ArchivedView(0);
  Value = AGGraphGetValue();
  v6 = *(_QWORD *)(Value + 32);
  v7 = Value + *(int *)(v4 + 24);
  v8 = (char *)v3 + v0[5];
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v7, v9);
  v10 = *(_QWORD *)(AGGraphGetValue() + *(int *)(v4 + 28)) != 0;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v11 = *(_QWORD *)AGGraphGetValue();
  *v3 = v6;
  *((_BYTE *)v3 + v0[6]) = v10;
  *(_QWORD *)((char *)v3 + v0[7]) = v11;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, type metadata accessor for InterpolatableArchiveContent);
}

{
  specialized DisplayList.HostedViews.Preference.value.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[6];
  _OWORD v34[2];
  _OWORD v35[6];
  _OWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v0 = *(_OWORD **)AGGraphGetValue();
  swift_beginAccess();
  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[4];
  v33[2] = v0[3];
  v33[3] = v3;
  v4 = v0[5];
  v5 = v0[6];
  v6 = v0[7];
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)((char *)v0 + 124);
  v7 = *(_OWORD *)((char *)v34 + 12);
  v33[5] = v5;
  v34[0] = v6;
  v33[4] = v4;
  v33[0] = v1;
  v33[1] = v2;
  v8 = v0[1];
  v9 = v0[2];
  v10 = v0[4];
  v28 = v0[3];
  v29 = v10;
  v26 = v8;
  v27 = v9;
  v11 = v0[5];
  v12 = v0[6];
  v13 = v0[7];
  *(_OWORD *)((char *)v32 + 12) = v7;
  v32[0] = v13;
  v30 = v11;
  v31 = v12;
  swift_retain();
  outlined retain of DisplayList.HostedViewState((uint64_t)v33);
  DisplayList.HostedViewState.splicedDisplayList()((uint64_t)&v25);
  v14 = v0[5];
  v15 = v0[6];
  v16 = v0[7];
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v0 + 124);
  v36[0] = v16;
  v17 = v0[1];
  v18 = v0[2];
  v19 = v0[4];
  v35[2] = v0[3];
  v35[3] = v19;
  v35[4] = v14;
  v35[5] = v15;
  v35[0] = v17;
  v35[1] = v18;
  v20 = v27;
  v0[1] = v26;
  v0[2] = v20;
  v21 = v29;
  v0[3] = v28;
  v0[4] = v21;
  v22 = v31;
  v0[5] = v30;
  v0[6] = v22;
  v23 = v32[0];
  *(_OWORD *)((char *)v0 + 124) = *(_OWORD *)((char *)v32 + 12);
  v0[7] = v23;
  outlined release of DisplayList.HostedViewState((uint64_t)v35);
  swift_release();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  ScrollGeometryTransformProvider.value.getter();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _OWORD v1[7];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  ScrollGeometryProvider.value.getter(v1);
  return AGGraphSetOutputValue();
}

{
  __int128 v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  ScrollViewResponderSize.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t Value;

  type metadata accessor for _ContiguousArrayStorage<Scrollable>();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_187BF9830;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, v0 + 32);
  type metadata accessor for [Scrollable]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  Value = (uint64_t *)AGGraphGetValue();
  v1 = *Value;
  v2 = Value[1];
  v3 = Value[2];
  v4 = Value[3];
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, MEMORY[0x1E0CE2910], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v5 + 32) = 1;
    *(_QWORD *)(v5 + 40) = v1;
    *(_QWORD *)(v5 + 48) = v2;
    *(_QWORD *)(v5 + 56) = v3;
    *(_QWORD *)(v5 + 64) = v4;
  }
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x1E0C80C00];
  ScrollViewChildTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    AGGraphGetValue();
    EdgeInsets.originOffset.getter();
    ViewOrigin.init(_:)();
  }
  else
  {
    ViewOrigin.init()();
  }
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[16];

  v6[15] = *MEMORY[0x1E0C80C00];
  AGGraphGetValue();
  Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v6);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    static Edge.Set.all.getter();
    if ((Axis.Set.contains(_:)() & 1) != 0)
      static Edge.Set.horizontal.getter();
    if ((Axis.Set.contains(_:)() & 1) != 0)
      static Edge.Set.vertical.getter();
  }
  outlined destroy of ScrollViewConfiguration((uint64_t)v6);
  EdgeInsets.in(_:)();
  v6[0] = v1;
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return AGGraphSetOutputValue();
}

{
  ScrollViewAdjustedSafeArea.value.getter();
  return AGGraphSetOutputValue();
}

{
  ScrollViewRTLAlignmentAdjustment.value.getter();
  type metadata accessor for CGSize(0);
  return AGGraphSetOutputValue();
}

{
  ScrollViewAlignmentAdjustment.value.getter();
  type metadata accessor for CGSize(0);
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  _BYTE v2[216];
  _QWORD v3[2];
  int v4;
  _BYTE v5[232];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v0 = *(_QWORD *)(AGGraphGetValue() + 16);
  if (*(_QWORD *)(v0 + 16))
  {
    outlined init with copy of PlatformItem(v0 + 32, (uint64_t)v3);
  }
  else
  {
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v2);
    *(_OWORD *)&v5[216] = 0u;
    v6 = 0u;
    v7 = 0u;
    v8 = xmmword_187BFE310;
    v3[0] = &outlined read-only object #0 of specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
    v3[1] = 0;
    v4 = 0;
    outlined init with take of Image.Resolved?((uint64_t)v2, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    v9 = 0;
    v10 = 1;
    v12 = 0;
    v11 = 0;
  }
  AGGraphSetOutputValue();
  return outlined destroy of PlatformItem((uint64_t)v3);
}

{
  lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds();
  Rule.withObservation<A>(do:)();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for NavigationStateHost();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for NavigationSeedHost(0);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;

  v0 = type metadata accessor for BridgedListState(0);
  if ((*(_BYTE *)(AGGraphGetValue() + *(int *)(v0 + 24) + 112) & 1) != 0)
    static ScrollGeometry.zero.getter();
  return AGGraphSetOutputValue();
}

{
  _BYTE v1[376];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  _NavigationSplitReader.Core.value.getter((uint64_t)v1);
  type metadata accessor for ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationStat();
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationStat);
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  _NavigationStackStyleConfiguration.Item.Child.value.getter();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 8);
  v2 = *(_QWORD *)(Value + 56);
  swift_retain();
  outlined copy of AppIntentExecutor?(v1);
  outlined copy of AppIntentExecutor?(v2);
  swift_getAtKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
  return AGGraphSetOutputValue();
}

{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E0CE5CA0]);
  PreferenceValueAttribute.value.getter();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = *(_QWORD *)AGGraphGetValue();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter;
  *(_QWORD *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x1E0C80C00];
  UIViewSnapshotResponder.Transform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;

  v0 = *(_BYTE *)AGGraphGetValue();
  v1 = swift_allocObject();
  *(_BYTE *)(v1 + 16) = v0;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter;
  *(_QWORD *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v1 = Value[1];
  v6 = v2;
  v7 = v1;
  swift_retain();
  swift_retain();
  static SymbolVariants.fill.getter();
  v3 = (void (*)(_BYTE *, _QWORD))EnvironmentValues.symbolVariants.modify();
  SymbolVariants.formUnion(_:)();
  v3(v5, 0);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _QWORD v1[3];

  v1[2] = *MEMORY[0x1E0C80C00];
  UpdateDefaultTabFill.AdaptiveFillSymbols.value.getter(v1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x1E0C80C00];
  CoordinateSpaceNameTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;

  v0 = *(_QWORD *)(AGGraphGetValue() + 8);
  AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _QWORD *Value;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  Value = (_QWORD *)AGGraphGetValue();
  v1 = Value[1];
  *(_QWORD *)&v5[0] = *Value;
  *((_QWORD *)&v5[0] + 1) = v1;
  v2 = *(_BYTE *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI10VisibilityO_s5NeverOytTg503_s7c114UI28CustomizationOptionsModifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA10E6OXEfU_AD0X6ValuesVTf1cn_n(v2, (uint64_t)v5);
  v3 = AGGraphGetValue();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI27ToolbarCustomizationOptionsV_s5NeverOytTB503_s7c4UI28fG107Modifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA07ToolbarcD0VXEfU0_AD0X6ValuesVTf1cn_n(*(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16), (uint64_t)v5);
  v5[1] = v5[0];
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;

  v0 = *(_QWORD *)(AGGraphGetValue() + 8);
  AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabeledContentPresentation?, (uint64_t)&type metadata for AccessibilityLabeledContentPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (*(_BYTE *)AGGraphGetValue() == 2)
    AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  char v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  BaseModifier.Child.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_BYTE *)(Value + 16);
  AGGraphGetValue();
  outlined copy of Text.Storage(v1, v2, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v1, v2, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  __int128 v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  ContentOffset.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  _BYTE v2[64];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  outlined init with copy of PlatformItem.SelectionContent(Value, (uint64_t)v2);
  AGGraphSetOutputValue();
  return outlined destroy of PlatformButtonActionTransform((uint64_t)v2);
}

{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = *(unsigned __int8 *)AGGraphGetValue();
  if (*(_BYTE *)AGGraphGetValue() == 1)
    v0 |= 4uLL;
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v3 = 0;
  memset(v2, 0, sizeof(v2));
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  *(_QWORD *)&v10 = AGCreateWeakAttribute();
  *((_QWORD *)&v10 + 1) = AGCreateWeakAttribute();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v2, (uint64_t)&v11 + 8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
  v4 = v10;
  *((_QWORD *)&v5 + 1) = *((_QWORD *)&v11 + 1);
  v6 = v12;
  v7 = v13;
  *(_QWORD *)&v5 = v0;
  outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v8, (uint64_t)&v5 + 8);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  outlined destroy of AccessibilityTableContext?((uint64_t)v8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
  AGGraphSetOutputValue();
  return outlined destroy of PlatformItem.SelectionContent((uint64_t)&v10);
}

{
  ScaledDisplayList.value.getter();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  CGFloat v1;
  uint64_t v2;
  CGAffineTransform v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v5 = *(_QWORD *)Value;
  v6 = *(_OWORD *)(Value + 8);
  v7 = *(_OWORD *)(Value + 24);
  v1 = 1.0 / *(double *)AGGraphGetValue();
  *(_OWORD *)&v4.a = *(_OWORD *)AGGraphGetValue();
  v2 = swift_retain();
  MEMORY[0x18D755E9C](v2);
  ViewTransform.appendPosition(_:scale:)();
  CGAffineTransformMakeScale(&v4, v1, v1);
  ViewTransform.appendAffineTransform(_:inverse:)(&v4, 0);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void (*v0)(__int128 *, _QWORD);
  float64x2_t *v1;
  double v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)AGGraphGetValue();
  v3 = 1.0 / *(double *)AGGraphGetValue();
  v0 = (void (*)(__int128 *, _QWORD))ViewOrigin.value.modify();
  *v1 = vmulq_n_f64(*v1, v3);
  v0(&v5, 0);
  v5 = v4;
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  EnvironmentValues.pixelLength.getter();
  AGGraphGetValue();
  EnvironmentValues.defaultPixelLength.setter();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v0 = *(_QWORD *)(AGGraphGetValue() + 8);
  v1 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v0)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v2 = (char *)v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, (char *)v6);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  *(_QWORD *)&v2[8 * v4 + 32] = v1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  _OWORD v4[7];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
  }
  else
  {
    Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v2);
    outlined init with take of Image.Resolved?((uint64_t)&v3, (uint64_t)v4, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)&v2, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  AGGraphSetOutputValue();
  return outlined destroy of ConditionalDraggingModifier((uint64_t)&v2);
}

{
  uint64_t Value;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _OWORD v5[3];
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v6 = *(_QWORD *)Value;
  v7 = *(_OWORD *)(Value + 8);
  v8 = *(_OWORD *)(Value + 24);
  v5[0] = *(_OWORD *)AGGraphGetValue();
  v1 = swift_retain();
  *(double *)&v2 = MEMORY[0x18D755E9C](v1);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v3, v2));
  lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  outlined destroy of AnyHashable((uint64_t)v5);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  _OWORD v4[7];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v2);
    outlined init with take of Image.Resolved?((uint64_t)&v3, (uint64_t)v4, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  else
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Image.Resolved?((uint64_t)v4, (uint64_t)&v2, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  AGGraphSetOutputValue();
  return outlined destroy of ConditionalDraggingModifier((uint64_t)&v2);
}

{
  uint64_t v0;
  uint64_t v2;

  v0 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  outlined copy of AppIntentExecutor?(v0);
  swift_getAtKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v0);
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (())?, (uint64_t (*)(uint64_t))type metadata accessor for (), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphSetOutputValue();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;

  AnchorGeometry.init(position:size:transform:)();
  type metadata accessor for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>(0);
  Value = AGGraphGetValue();
  v1 = *(_QWORD *)(Value + 16);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = *(_OWORD *)Value;
  *(_QWORD *)(v2 + 32) = v1;
  *(_QWORD *)(v2 + 40) = v5;
  *(_DWORD *)(v2 + 48) = v6;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for specialized closure #1 in AnchorTransform.value.getter;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (unint64_t *)&lazy cache variable for type metadata for [SharingActivityPickerPresentation], (uint64_t)&type metadata for SharingActivityPickerPresentation);
  swift_retain();
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return AGGraphSetOutputValue();
}

{
  uint64_t v1[3];

  v1[2] = *MEMORY[0x1E0C80C00];
  AccessibilityLabeledContentLabelModifier.Attachment.value.getter(v1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = AccessibilityArchivableAttachmentModifier.ArchivableTransform.value.getter();
  v4 = v0;
  v5 = v1 & 1;
  AGGraphSetOutputValue();
  outlined consume of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  if (AGGraphGetWeakValue())
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    Dictionary.init(minimumCapacity:)();
  }
  AccessibilityAttachment.init(properties:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _QWORD v1[6];

  v1[5] = *MEMORY[0x1E0C80C00];
  MultimodalScrollGeometryTransformProvider.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  _s7SwiftUI19SimultaneousGestureVyAA022TransformBasedRotationD033_BE4F31EA7CD17BEECFB3DECC6C6E6203LLVAA05TouchfgD0AELLVGMaTm_0(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E0CE49F0]);
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  type metadata accessor for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E0CE49F0]);
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t (*v0)(void);
  uint64_t v1;

  v0 = MEMORY[0x1E0CE17C0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for GesturePhase<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
  AGGraphGetValue();
  v1 = MEMORY[0x1E0DEE9C0] + 8;
  GesturePhase.withValue<A>(_:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v1, (uint64_t (*)(_QWORD, uint64_t))v0);
  return AGGraphSetOutputValue();
}

{
  _QWORD v1[4];

  v1[3] = *MEMORY[0x1E0C80C00];
  SpatialTapGesture.Phase.value.getter((uint64_t)v1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for GesturePhase<SpatialTapGesture.Value>, (uint64_t)&type metadata for SpatialTapGesture.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(0, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>, &lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>> and conformance ModifierGesture<A, B>);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v3);
  v5 = (char *)v7 - v4;
  SpatialTapGesture.Child.value.getter();
  AGGraphSetOutputValue();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v1 = Value[1];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in _HoverRegionModifier.HoverBehavior.value.getter;
  *(_QWORD *)(v4 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v0 = *(_QWORD *)AGGraphGetValue();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in PreferenceTransform.value.getter;
  *(_QWORD *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 16, (uint64_t)v5);
  v1 = v6;
  v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v5[0] = v3;
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Value;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TokenFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v28 - v10;
  type metadata accessor for SearchFieldConfiguration.Data?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v11, type metadata accessor for TokenFieldConfiguration);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for TokenFieldConfiguration);
  v17 = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v17, (uint64_t)v7, type metadata accessor for TokenFieldConfiguration);
  v18 = &v7[*(int *)(v4 + 24)];
  v19 = *((_QWORD *)v18 + 3);
  if (!v19)
    __break(1u);
  v21 = *(_QWORD *)v18;
  v20 = *((_QWORD *)v18 + 1);
  v22 = *((_DWORD *)v18 + 4) & 1;
  outlined copy of Text.Storage(*(_QWORD *)v18, v20, v22);
  swift_bridgeObjectRetain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for TokenFieldConfiguration);
  v23 = AGCreateWeakAttribute();
  outlined init with take of TableCellFormula((uint64_t)v3, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  v24 = type metadata accessor for SearchFieldConfiguration.Data(0);
  v25 = &v15[*(int *)(v24 + 20)];
  *(_QWORD *)v25 = v21;
  *((_QWORD *)v25 + 1) = v20;
  v25[16] = v22;
  *((_QWORD *)v25 + 3) = v19;
  v26 = &v15[*(int *)(v24 + 24)];
  *(_QWORD *)v26 = v23;
  v26[8] = 0;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v15, 0, 1, v24);
  AGGraphSetOutputValue();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldConfiguration.Data?);
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)AGGraphGetValue() & 1) != 0)
  {
    static Semantics.v6.getter();
    v0 = isLinkedOnOrAfter(_:)();
  }
  else
  {
    v0 = (*(_BYTE *)AGGraphGetValue() & 0xFE) != 6;
  }
  v1 = swift_allocObject();
  *(_BYTE *)(v1 + 16) = v0 & 1;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter;
  *(_QWORD *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v2;

  if (AGGraphGetWeakValue())
    v0 = swift_bridgeObjectRetain();
  else
    v0 = 1;
  v2 = v0;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphSetOutputValue();
  return outlined consume of WidgetAuxiliaryTextImagePreference?(v2);
}

{
  uint64_t *Value;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  __int16 v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[14];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  v1 = (_OWORD *)Value[3];
  if (v1)
  {
    v2 = Value[12];
    v3 = Value[13];
    v5 = Value[10];
    v4 = Value[11];
    v6 = Value[9];
    v24 = Value[7];
    v25 = Value[8];
    v22 = Value[5];
    v23 = Value[6];
    v21 = Value[4];
    v8 = Value[1];
    v7 = Value[2];
    v9 = *Value;
    AGGraphGetValue();
    LOWORD(v26) = v9 & 0x101;
    v27 = v8;
    v28 = v7 & 0x1FF;
    v29 = v1;
    v30 = v21;
    v31 = v22;
    v32 = v23;
    v33 = v24;
    v34 = v25;
    v35 = v6;
    v36 = v5;
    v37 = v4;
    v38 = v2;
    v39 = v3;
    outlined copy of SwipeActions.Configuration?(v9, v8, v7, (uint64_t)v1, v21, v22, v23, v24, v25, v6, v5, v4, v2);
    v10 = swift_bridgeObjectRetain();
    SwipeActions.Value.init(itemList:configuration:)(v10, (unsigned __int8 *)&v26, v40);
    v1 = (_OWORD *)swift_allocObject();
    v11 = v40[11];
    v1[11] = v40[10];
    v1[12] = v11;
    v12 = v40[13];
    v1[13] = v40[12];
    v1[14] = v12;
    v13 = v40[7];
    v1[7] = v40[6];
    v1[8] = v13;
    v14 = v40[9];
    v1[9] = v40[8];
    v1[10] = v14;
    v15 = v40[3];
    v1[3] = v40[2];
    v1[4] = v15;
    v16 = v40[5];
    v1[5] = v40[4];
    v1[6] = v16;
    v17 = v40[1];
    v18 = partial apply for closure #2 in SwipeActions.MakeValueTransform.value.getter;
    v1[1] = v40[0];
    v1[2] = v17;
  }
  else
  {
    v18 = (double (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v1;
  v26 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v27 = v19;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  v2 = *Value;
  v1 = Value[1];
  v3 = Value[2];
  v4 = Value[3];
  v6 = Value[4];
  v5 = Value[5];
  v8 = Value[6];
  v7 = Value[7];
  v9 = Value[8];
  v10 = Value[9];
  v11 = Value[10];
  v12 = Value[11];
  v13 = Value[12];
  v14 = Value[13];
  if (v4)
  {
    v20 = Value[8];
    v21 = Value[7];
    v18 = *((_OWORD *)Value + 2);
    v19 = Value[6];
    v15 = Value[9];
    AGGraphGetValue();
    LOWORD(v22) = v2 & 0x101;
    *((_QWORD *)&v22 + 1) = v1;
    LOWORD(v23) = v3 & 0x1FF;
    *((_QWORD *)&v23 + 1) = v4;
    v24 = v18;
    LOBYTE(v25) = v19;
    *((_QWORD *)&v25 + 1) = v21;
    *(_QWORD *)&v26 = v20;
    *((_QWORD *)&v26 + 1) = v15;
    *(_QWORD *)&v27 = v11;
    *((_QWORD *)&v27 + 1) = v12;
    *(_QWORD *)&v28 = v13;
    *((_QWORD *)&v28 + 1) = v14;
    outlined copy of SwipeActions.Configuration?(v2, v1, v3, v4, v18, *((uint64_t *)&v18 + 1), v19, v21, v20, v15, v11, v12, v13);
    v16 = swift_bridgeObjectRetain();
    SwipeActions.Value.init(itemList:configuration:)(v16, (unsigned __int8 *)&v22, &v36);
  }
  else
  {
    *(_QWORD *)&v36 = *Value;
    *((_QWORD *)&v36 + 1) = v1;
    v37 = (unint64_t)v3;
    *(_QWORD *)&v38 = v6;
    *((_QWORD *)&v38 + 1) = v5;
    *(_QWORD *)&v39 = v8;
    *((_QWORD *)&v39 + 1) = v7;
    *(_QWORD *)&v40 = v9;
    *((_QWORD *)&v40 + 1) = v10;
    *(_QWORD *)&v41 = v11;
    *((_QWORD *)&v41 + 1) = v12;
    *(_QWORD *)&v42 = v13;
    *((_QWORD *)&v42 + 1) = v14;
    *(_QWORD *)&v43 = v2;
    *((_QWORD *)&v43 + 1) = v1;
    v44 = (unint64_t)v3;
    *(_QWORD *)&v45 = v6;
    *((_QWORD *)&v45 + 1) = v5;
    *(_QWORD *)&v46 = v8;
    *((_QWORD *)&v46 + 1) = v7;
    *(_QWORD *)&v47 = v9;
    *((_QWORD *)&v47 + 1) = v10;
    *(_QWORD *)&v48 = v11;
    *((_QWORD *)&v48 + 1) = v12;
    *(_QWORD *)&v49 = v13;
    *((_QWORD *)&v49 + 1) = v14;
  }
  AGGraphSetOutputValue();
  v32 = v46;
  v33 = v47;
  v34 = v48;
  v35 = v49;
  v28 = v42;
  v29 = v43;
  v30 = v44;
  v31 = v45;
  v24 = v38;
  v25 = v39;
  v26 = v40;
  v27 = v41;
  v22 = v36;
  v23 = v37;
  return outlined release of SwipeActions.Value((uint64_t)&v22);
}

{
  uint64_t (*v0)(void);
  char v1;
  uint64_t WeakValue;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v1 = *(_BYTE *)AGGraphGetValue();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))v0);
  WeakValue = AGGraphGetWeakValue();
  v3 = 6;
  if (WeakValue)
  {
    v4 = *(_QWORD *)(WeakValue + 8);
    if (v4 == 6)
      v3 = 6;
    else
      v3 = v4;
  }
  v5 = swift_allocObject();
  *(_BYTE *)(v5 + 16) = v1;
  *(_BYTE *)(v5 + 17) = v3;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = partial apply for closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter;
  *(_QWORD *)(v6 + 24) = v5;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v0 = *(_BYTE *)AGGraphGetValue();
  v1 = swift_allocObject();
  *(_BYTE *)(v1 + 16) = v0;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter;
  *(_QWORD *)(v2 + 24) = v1;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _UNKNOWN **v14;
  int v15;
  _BYTE v16[64];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Value = AGGraphGetValue();
  v1 = *(_DWORD *)Value;
  v2 = *(_BYTE *)(Value + 4);
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_QWORD *)(Value + 16);
  v5 = *(_QWORD *)(Value + 24);
  swift_weakInit();
  v15 = 0;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = 0;
  v14 = &protocol witness table for FocusableViewResponder;
  swift_weakAssign();
  v13 = 0;
  outlined init with take of FocusItem((uint64_t)&v7, (uint64_t)v16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  swift_retain();
  AGGraphSetOutputValue();
  return outlined destroy of AccessibilityTableContext?((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem);
}

unint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return ScrollViewAdjustedState.updateValue()();
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  _BYTE v5[96];
  _BYTE v6[96];
  _BYTE v7[88];
  uint64_t v8;
  _BYTE v9[88];
  uint64_t v10;

  outlined init with copy of Toolbar.UpdateContext?(a1, (uint64_t)v7);
  outlined init with copy of Toolbar.UpdateContext?(a2, (uint64_t)v9);
  if (!v8)
  {
    if (!v10)
    {
      outlined destroy of TableRowList?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      return 1;
    }
LABEL_7:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for (Toolbar.UpdateContext?, Toolbar.UpdateContext?));
    return 0;
  }
  outlined init with copy of Toolbar.UpdateContext?((uint64_t)v7, (uint64_t)v6);
  if (!v10)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v6);
    goto LABEL_7;
  }
  outlined init with take of Toolbar.UpdateContext((uint64_t)v9, (uint64_t)v5);
  v3 = specialized static Toolbar.UpdateContext.== infix(_:_:)((uint64_t)v6, (uint64_t)v5);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v5);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v6);
  outlined destroy of TableRowList?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  return v3;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  unsigned __int8 v16;
  _QWORD v17[4];
  unsigned __int8 v18;
  _BYTE v19[32];
  unsigned __int8 v20;
  _BYTE v21[48];

  outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v17);
  v5 = v17[0];
  v4 = v17[1];
  v13 = v17[3];
  v14 = v17[2];
  v6 = v18;
  outlined init with take of TableColumnCustomizationID?(a1, (uint64_t)v15);
  v8 = v15[0];
  v7 = v15[1];
  v9 = v15[2];
  v10 = v15[3];
  v11 = v16;
  outlined init with take of TableColumnCustomizationID?(a1, (uint64_t)v21);
  if (v21[32] != 255)
  {
    outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v19);
    if (v20 != 255)
    {
      if ((v11 & 1) != 0)
      {
        if ((v6 & 1) == 0 || (v8 != v5 || v7 != v4) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return 0;
        if (v9 == v14 && v10 == v13)
          return 1;
      }
      else
      {
        if ((v6 & 1) != 0)
          return 0;
        if (v8 == v5 && v7 == v4)
          return 1;
      }
      return (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
    }
LABEL_9:
    outlined retain of TableColumnCustomizationID?(a1);
    outlined retain of TableColumnCustomizationID?(a2);
    outlined consume of TableColumnCustomizationID?(v8, v7, v9, v10, v11);
    outlined consume of TableColumnCustomizationID?(v5, v4, v14, v13, v6);
    return 0;
  }
  outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v19);
  if (v20 != 255)
    goto LABEL_9;
  return 1;
}

_BYTE *FlipForRTLDisplayList.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  __int16 v4;
  char v5;
  uint64_t Value;
  _BYTE *result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;

  if (*(_DWORD *)(v1 + 24) == *MEMORY[0x1E0CFED28])
  {
    DisplayList.init()();
    v3 = v12;
    v4 = v13;
    v5 = v14;
  }
  else
  {
    Value = AGGraphGetValue();
    v3 = *(_QWORD *)Value;
    v4 = *(_WORD *)(Value + 8);
    v5 = *(_BYTE *)(Value + 10);
    swift_bridgeObjectRetain();
  }
  if ((DisplayList.isEmpty.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return (_BYTE *)DisplayList.init()();
  }
  else
  {
    result = (_BYTE *)AGGraphGetValue();
    v8 = *result;
    if (v8 == 2 || (result = (_BYTE *)AGGraphGetValue(), ((v8 & 1) == 0) == *result))
    {
      *(_QWORD *)a1 = v3;
      *(_WORD *)(a1 + 8) = v4;
      *(_BYTE *)(a1 + 10) = v5;
    }
    else
    {
      AGGraphGetValue();
      ViewSize.width.getter();
      v10 = v9;
      AGGraphGetValue();
      MEMORY[0x18D755E9C]();
      AGGraphGetValue();
      MEMORY[0x18D755E9C]();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0xBFF0000000000000;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 40) = 0x3FF0000000000000;
      *(_QWORD *)(v11 + 48) = v10;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_BYTE *)(v11 + 88) = 0;
      AGGraphGetValue();
      MEMORY[0x18D75BE3C]();
      DisplayList.Version.init(forUpdate:)();
      DisplayList.Item.init(_:frame:identity:version:)();
      return (_BYTE *)DisplayList.init(_:)();
    }
  }
  return result;
}

uint64_t specialized IncrementalLayoutComputer.updateValue()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v10 = *(_DWORD *)(v0 + 12);
    LOBYTE(v24) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    v5 = HIDWORD(v24);
    Value = AGGraphGetValue();
    v3 = *(_QWORD *)Value;
    v8 = *(_QWORD *)(Value + 16);
    v9 = *(_QWORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 24);
    v7 = *(_DWORD *)(Value + 28);
    type metadata accessor for IncrementalLayoutViewCache();
    v4 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    v11 = v24;
    v12 = v25;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>();
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    v41 = v20;
    v42 = v21;
    v43 = v22;
    v37 = v16;
    v38 = v17;
    v39 = v18;
    v40 = v19;
    v34 = v13;
    v35 = v14;
    v24 = v3;
    v25 = v9;
    v26 = v8;
    v27 = v6;
    v28 = v7;
    v29 = v11;
    v30 = v5;
    v31 = v12;
    v32 = v10;
    v33 = v4;
    v44 = v23;
    v36 = v15;
    return outlined release of IncrementalLayoutComputer<LazyHGridLayout>.Engine((uint64_t)&v24);
  }
  return result;
}

{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>();
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>();
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeHStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>();
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t result;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    SizeAndSpacingContext.init(context:owner:environment:)();
    type metadata accessor for IncrementalLayoutViewCache();
    AGGraphGetValue();
    AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeVStackLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>();
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    return swift_release();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;

  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v10 = *(_DWORD *)(v0 + 12);
    LOBYTE(v24) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    v5 = HIDWORD(v24);
    Value = AGGraphGetValue();
    v3 = *(_QWORD *)Value;
    v8 = *(_QWORD *)(Value + 16);
    v9 = *(_QWORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 24);
    v7 = *(_DWORD *)(Value + 28);
    type metadata accessor for IncrementalLayoutViewCache();
    v4 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    v11 = v24;
    v12 = v25;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHGridLayout>.Engine, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer.Engine);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>();
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHGridLayout>.Engine and conformance IncrementalLayoutComputer<A>.Engine();
    StatefulRule<>.update<A>(to:)();
    v41 = v20;
    v42 = v21;
    v43 = v22;
    v37 = v16;
    v38 = v17;
    v39 = v18;
    v40 = v19;
    v34 = v13;
    v35 = v14;
    v24 = v3;
    v25 = v9;
    v26 = v8;
    v27 = v6;
    v28 = v7;
    v29 = v11;
    v30 = v5;
    v31 = v12;
    v32 = v10;
    v33 = v4;
    v44 = v23;
    v36 = v15;
    return outlined release of IncrementalLayoutComputer<LazyHGridLayout>.Engine((uint64_t)&v24);
  }
  return result;
}

void @objc PlatformViewHost._layoutMetricsInvalidatedForHostedView()(void *a1)
{
  id v1;

  v1 = a1;
  PlatformViewHost._layoutMetricsInvalidatedForHostedView()();

}

Swift::Void __swiftcall PlatformViewHost._layoutMetricsInvalidatedForHostedView()()
{
  _QWORD *v0;
  _QWORD *v1;
  objc_class *ObjectType;
  _QWORD *v3;
  uint64_t v4;
  objc_class *v5;
  id v6;
  objc_super v7;
  objc_super v8;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *MEMORY[0x1E0DEEDD8] & *v0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel__layoutMetricsInvalidatedForHostedView);
  (*(void (**)(objc_super *__return_ptr, char *))(*(_QWORD *)(v4 + 88) + 144))(&v8, (char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x78));
  if (((uint64_t)v8.receiver & 1) != 0 && (*((_BYTE *)v1 + *(_QWORD *)((*v3 & *v1) + 0xB0)) & 1) == 0)
  {
    v5 = (objc_class *)swift_getObjectType();
    v8.receiver = v1;
    v8.super_class = v5;
    v6 = objc_msgSendSuper2(&v8, sel_hostedView);
    if (v6)
    {

      PlatformViewHost.enqueueLayoutInvalidation()();
    }
  }
}

Swift::Void __swiftcall PlatformViewHost.enqueueLayoutInvalidation()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v9[24];

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v3 = (uint64_t)v0 + v2[24];
  swift_beginAccess();
  outlined init with copy of PlatformViewLayoutInvalidator?(v3, (uint64_t)v9);
  LOBYTE(v3) = v9[16];
  outlined destroy of PlatformViewLayoutInvalidator?((uint64_t)v9);
  if ((v3 & 1) != 0)
  {
    v4 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xD0);
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    v4[48] = 1;
  }
  else
  {
    v5 = *(_QWORD *)((*v1 & *v0) + 0xC8);
    if ((*((_BYTE *)v0 + v5) & 1) == 0)
    {
      *((_BYTE *)v0 + v5) = 1;
      if (one-time initialization token for defaultUseSetNeedsLayout != -1)
        swift_once();
      v6 = static UIKitUpdateCycle.defaultUseSetNeedsLayout;
      v7 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v8 = (_QWORD *)swift_allocObject();
      v8[2] = v2[10];
      v8[3] = v2[11];
      v8[4] = v7;
      swift_retain();
      if (v6 == 1)
        static Update.enqueueAction(_:)();
      else
        onNextMainRunLoop(do:)();
      swift_release();
      swift_release();
    }
  }
}

uint64_t static SourceFormula.makeView<A>(view:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;

  v10 = *a6;
  v11 = *((_DWORD *)a6 + 2);
  v12 = a6[2];
  v13 = *((_DWORD *)a6 + 6);
  v14 = *((_DWORD *)a6 + 7);
  v15 = *((_DWORD *)a6 + 8);
  v18 = *((_DWORD *)a6 + 9);
  v19 = a6[5];
  v20 = a6[6];
  v21 = *((_DWORD *)a6 + 14);
  v22 = *((_DWORD *)a6 + 15);
  v23 = *((_DWORD *)a6 + 16);
  v24 = *((_DWORD *)a6 + 17);
  v25 = *((_DWORD *)a6 + 18);
  v26 = *((_DWORD *)a6 + 19);
  v27 = *((_DWORD *)a6 + 20);
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E0CFED28])
    return _ViewOutputs.init()();
  if ((a5 & 0x100000000) != 0)
  {
    _GraphValue.init(_:)();
    v29 = v10;
    v30 = v11;
    v31 = v12;
    v32 = v13;
    v33 = v14;
    v34 = v15;
    v35 = v18;
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = v24;
    v42 = v25;
    v43 = v26;
    v44 = v27;
  }
  else
  {
    v17 = type metadata accessor for Optional();
    _GraphValue.init(_:)();
    v29 = v10;
    v30 = v11;
    v31 = v12;
    v32 = v13;
    v33 = v14;
    v34 = v15;
    v35 = v18;
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = v24;
    v42 = v25;
    v43 = v26;
    v44 = v27;
    v28 = a9;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v17, &v28);
  }
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PrimitiveButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];
  int v7;

  v2 = *a1;
  v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  v7 = *(_DWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, &lazy protocol witness table cache variable for type SourceInput<PrimitiveButtonStyleConfiguration.Label> and conformance SourceInput<A>);
}

uint64_t protocol witness for static AnySourceFormula.makeView<A>(view:source:inputs:) in conformance SourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return static SourceFormula.makeView<A>(view:source:inputs:)(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, *(_QWORD *)(a9 + 16), a7, *(_QWORD *)(a9 + 24));
}

uint64_t FocusBridge.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of FocusItem?(v0 + 88);
  swift_weakDestroy();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t key path setter for EnvironmentValues.colorScheme : EnvironmentValues()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  _OWORD v30[2];
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v39 = a1;
  v40 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v41 = v8;
  v42 = 0;
  v43 = v11 & v9;
  v44 = a2;
  v45 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
  if (!*((_QWORD *)&v36 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v32 = v35;
    v33 = v36;
    v34 = v37;
    outlined init with take of Any(&v38, v31);
    v13 = *a5;
    v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
    v16 = *(_QWORD *)(v13 + 16);
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      break;
    v19 = v14;
    if (*(_QWORD *)(v13 + 24) >= v18)
    {
      if ((a4 & 1) != 0)
      {
        if ((v14 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v19 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
      v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v19 & 1) != (v21 & 1))
        goto LABEL_22;
      v15 = v20;
      if ((v19 & 1) != 0)
      {
LABEL_6:
        outlined init with copy of Any((uint64_t)v31, (uint64_t)v30);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        outlined destroy of AnyHashable((uint64_t)&v32);
        v12 = (_OWORD *)(*(_QWORD *)(*a5 + 56) + 32 * v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
        outlined init with take of Any(v30, v12);
        goto LABEL_7;
      }
    }
    v22 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    v23 = v22[6] + 40 * v15;
    v24 = v32;
    v25 = v33;
    *(_QWORD *)(v23 + 32) = v34;
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    outlined init with take of Any(v31, (_OWORD *)(v22[7] + 32 * v15));
    v26 = v22[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_21;
    v22[2] = v28;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
    a4 = 1;
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[160];
  _BYTE v41[160];
  uint64_t v42;
  _BYTE v43[128];
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v45 = a1;
  v46 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v47 = v8;
  v48 = 0;
  v49 = v11 & v9;
  v50 = a2;
  v51 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
  if (v44 >> 1 == 4294967294)
    goto LABEL_17;
  v12 = v42;
  outlined init with take of UpdateViewDestinationRequest((uint64_t)v43, (uint64_t)v41);
  v13 = (_QWORD *)*a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v22 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_QWORD *)(v22[6] + 8 * v15) = v12;
    outlined init with take of UpdateViewDestinationRequest((uint64_t)v41, v22[7] + 160 * v15);
    v23 = v22[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v22[2] = v25;
    goto LABEL_16;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of UpdateViewDestinationRequest((uint64_t)v41, (uint64_t)v40);
    outlined destroy of UpdateViewDestinationRequest((uint64_t)v41);
    outlined assign with take of UpdateViewDestinationRequest((uint64_t)v40, *(_QWORD *)(*a5 + 56) + 160 * v15);
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
    if (v44 >> 1 == 4294967294)
    {
LABEL_17:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      return swift_release();
    }
    while (1)
    {
      v27 = v42;
      outlined init with take of UpdateViewDestinationRequest((uint64_t)v43, (uint64_t)v41);
      v28 = *a5;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
      v31 = *(_QWORD *)(v28 + 16);
      v32 = (v29 & 1) == 0;
      v33 = v31 + v32;
      if (__OFADD__(v31, v32))
        goto LABEL_28;
      v34 = v29;
      if (*(_QWORD *)(v28 + 24) < v33)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, 1);
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        if ((v34 & 1) != (v36 & 1))
          break;
        v30 = v35;
      }
      if ((v34 & 1) != 0)
      {
        outlined init with copy of UpdateViewDestinationRequest((uint64_t)v41, (uint64_t)v40);
        outlined destroy of UpdateViewDestinationRequest((uint64_t)v41);
        outlined assign with take of UpdateViewDestinationRequest((uint64_t)v40, *(_QWORD *)(*a5 + 56) + 160 * v30);
      }
      else
      {
        v37 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v30 >> 6) + 64) |= 1 << v30;
        *(_QWORD *)(v37[6] + 8 * v30) = v27;
        outlined init with take of UpdateViewDestinationRequest((uint64_t)v41, v37[7] + 160 * v30);
        v38 = v37[2];
        v24 = __OFADD__(v38, 1);
        v39 = v38 + 1;
        if (v24)
          goto LABEL_29;
        v37[2] = v39;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v42);
      if (v44 >> 1 == 4294967294)
        goto LABEL_17;
    }
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[40];
  __int128 v29[2];
  __int128 v30[2];
  __int128 v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v33 = a1;
  v34 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v35 = v8;
  v36 = 0;
  v37 = v11 & v9;
  v38 = a2;
  v39 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(v31);
  if (!v32)
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v13 = *(_QWORD *)&v31[0];
    outlined init with take of OptionalBinaryInteger((__int128 *)((char *)v31 + 8), (uint64_t)v30);
    v14 = *a5;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    v17 = *(_QWORD *)(v14 + 16);
    v18 = (v15 & 1) == 0;
    v19 = v17 + v18;
    if (__OFADD__(v17, v18))
      break;
    v20 = v15;
    if (*(_QWORD *)(v14 + 24) >= v19)
    {
      if ((a4 & 1) != 0)
      {
        if ((v15 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v20 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v20 & 1) != (v22 & 1))
        goto LABEL_22;
      v16 = v21;
      if ((v20 & 1) != 0)
      {
LABEL_6:
        outlined init with copy of TableColumnList(*(_QWORD *)(*a5 + 56) + 40 * v16, (uint64_t)v28);
        outlined init with copy of TableColumnList((uint64_t)v28, (uint64_t)v29);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        v12 = *(_QWORD *)(*a5 + 56) + 40 * v16;
        __swift_destroy_boxed_opaque_existential_1(v12);
        outlined init with take of OptionalBinaryInteger(v29, v12);
        goto LABEL_7;
      }
    }
    v23 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(_QWORD *)(v23[6] + 8 * v16) = v13;
    outlined init with take of OptionalBinaryInteger(v30, v23[7] + 40 * v16);
    v24 = v23[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_21;
    v23[2] = v26;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()(v31);
    a4 = 1;
    if (!v32)
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  Swift::UInt32 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[120];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  Swift::UInt32 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v72 = a1;
  v73 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v74 = v8;
  v75 = 0;
  v76 = v11 & v9;
  v77 = a2;
  v78 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v63);
  if (*((_QWORD *)&v64 + 1) == 1)
    goto LABEL_17;
  v60 = v69;
  v61 = v70;
  v55 = v64;
  v56 = v65;
  v57 = v66;
  v12 = v63;
  v62 = v71;
  v58 = v67;
  v59 = v68;
  v13 = (_QWORD *)*a5;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(v63);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v19 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v22 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_DWORD *)(v22[6] + 4 * v15) = v12;
    v23 = v22[7] + 120 * v15;
    v24 = v55;
    v25 = v56;
    v26 = v58;
    *(_OWORD *)(v23 + 32) = v57;
    *(_OWORD *)(v23 + 48) = v26;
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    v27 = v59;
    v28 = v60;
    v29 = v61;
    *(_QWORD *)(v23 + 112) = v62;
    *(_OWORD *)(v23 + 80) = v28;
    *(_OWORD *)(v23 + 96) = v29;
    *(_OWORD *)(v23 + 64) = v27;
    v30 = v22[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v22[2] = v32;
    goto LABEL_16;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    if ((v19 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of InspectorStorage((uint64_t)&v55, (uint64_t)v54);
    outlined destroy of InspectorStorage((uint64_t)&v55);
    outlined assign with take of InspectorStorage((uint64_t)v54, *(_QWORD *)(*a5 + 56) + 120 * v15);
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v63);
    if (*((_QWORD *)&v64 + 1) == 1)
    {
LABEL_17:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      return swift_release();
    }
    while (1)
    {
      v60 = v69;
      v61 = v70;
      v55 = v64;
      v56 = v65;
      v57 = v66;
      v34 = v63;
      v62 = v71;
      v58 = v67;
      v59 = v68;
      v35 = *a5;
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v63);
      v38 = *(_QWORD *)(v35 + 16);
      v39 = (v36 & 1) == 0;
      v40 = v38 + v39;
      if (__OFADD__(v38, v39))
        goto LABEL_28;
      v41 = v36;
      if (*(_QWORD *)(v35 + 24) < v40)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, 1);
        v42 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if ((v41 & 1) != (v43 & 1))
          break;
        v37 = v42;
      }
      if ((v41 & 1) != 0)
      {
        outlined init with copy of InspectorStorage((uint64_t)&v55, (uint64_t)v54);
        outlined destroy of InspectorStorage((uint64_t)&v55);
        outlined assign with take of InspectorStorage((uint64_t)v54, *(_QWORD *)(*a5 + 56) + 120 * v37);
      }
      else
      {
        v44 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v37 >> 6) + 64) |= 1 << v37;
        *(_DWORD *)(v44[6] + 4 * v37) = v34;
        v45 = v44[7] + 120 * v37;
        v46 = v55;
        v47 = v56;
        v48 = v58;
        *(_OWORD *)(v45 + 32) = v57;
        *(_OWORD *)(v45 + 48) = v48;
        *(_OWORD *)v45 = v46;
        *(_OWORD *)(v45 + 16) = v47;
        v49 = v59;
        v50 = v60;
        v51 = v61;
        *(_QWORD *)(v45 + 112) = v62;
        *(_OWORD *)(v45 + 80) = v50;
        *(_OWORD *)(v45 + 96) = v51;
        *(_OWORD *)(v45 + 64) = v49;
        v52 = v44[2];
        v31 = __OFADD__(v52, 1);
        v53 = v52 + 1;
        if (v31)
          goto LABEL_29;
        v44[2] = v53;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v63);
      if (*((_QWORD *)&v64 + 1) == 1)
        goto LABEL_17;
    }
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  Swift::UInt32 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  _QWORD *v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[15];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[248];
  _BYTE v107[248];
  Swift::UInt32 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v124 = a1;
  v125 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v126 = v8;
  v127 = 0;
  v128 = v11 & v9;
  v129 = a2;
  v130 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v108);
  outlined init with take of SwipeActions.Value?((uint64_t)&v108, (uint64_t)v106, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of SwipeActions.Value?((uint64_t)v106, (uint64_t)v107, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v107) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v49 = v108;
    v103 = v121;
    v104 = v122;
    v105 = v123;
    v99 = v117;
    v100 = v118;
    v101 = v119;
    v102 = v120;
    v95 = v113;
    v96 = v114;
    v97 = v115;
    v98 = v116;
    v91 = v109;
    v92 = v110;
    v93 = v111;
    v94 = v112;
    v50 = *a5;
    v52 = specialized __RawDictionaryStorage.find<A>(_:)(v108);
    v53 = *(_QWORD *)(v50 + 16);
    v54 = (v51 & 1) == 0;
    v55 = v53 + v54;
    if (__OFADD__(v53, v54))
      break;
    v56 = v51;
    if (*(_QWORD *)(v50 + 24) >= v55)
    {
      if ((a4 & 1) != 0)
      {
        if ((v51 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v56 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, a4 & 1);
      v57 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
      if ((v56 & 1) != (v58 & 1))
        goto LABEL_22;
      v52 = v57;
      if ((v56 & 1) != 0)
      {
LABEL_7:
        v13 = *a5;
        v14 = (__int128 *)(*(_QWORD *)(*a5 + 56) + 240 * v52);
        v16 = v14[1];
        v15 = v14[2];
        v75 = *v14;
        v76 = v16;
        v77 = v15;
        v17 = v14[6];
        v19 = v14[3];
        v18 = v14[4];
        v80 = v14[5];
        v81 = v17;
        v78 = v19;
        v79 = v18;
        v20 = v14[10];
        v22 = v14[7];
        v21 = v14[8];
        v84 = v14[9];
        v85 = v20;
        v82 = v22;
        v83 = v21;
        v23 = v14[14];
        v25 = v14[11];
        v24 = v14[12];
        v88 = v14[13];
        v89 = v23;
        v86 = v25;
        v87 = v24;
        outlined retain of AlertStorage(&v75);
        outlined release of AlertStorage(&v91);
        v26 = (_OWORD *)(*(_QWORD *)(v13 + 56) + 240 * v52);
        v27 = v26[11];
        v28 = v26[12];
        v29 = v26[14];
        v90[13] = v26[13];
        v90[14] = v29;
        v90[11] = v27;
        v90[12] = v28;
        v30 = v26[7];
        v31 = v26[8];
        v32 = v26[10];
        v90[9] = v26[9];
        v90[10] = v32;
        v90[7] = v30;
        v90[8] = v31;
        v33 = v26[3];
        v34 = v26[4];
        v35 = v26[6];
        v90[5] = v26[5];
        v90[6] = v35;
        v90[3] = v33;
        v90[4] = v34;
        v37 = v26[1];
        v36 = v26[2];
        v90[0] = *v26;
        v90[1] = v37;
        v90[2] = v36;
        outlined release of AlertStorage(v90);
        v39 = v76;
        v38 = v77;
        *v26 = v75;
        v26[1] = v39;
        v26[2] = v38;
        v40 = v81;
        v42 = v78;
        v41 = v79;
        v26[5] = v80;
        v26[6] = v40;
        v26[3] = v42;
        v26[4] = v41;
        v43 = v85;
        v45 = v82;
        v44 = v83;
        v26[9] = v84;
        v26[10] = v43;
        v26[7] = v45;
        v26[8] = v44;
        v46 = v89;
        v48 = v86;
        v47 = v87;
        v26[13] = v88;
        v26[14] = v46;
        v26[11] = v48;
        v26[12] = v47;
        goto LABEL_8;
      }
    }
    v59 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v52 >> 6) + 64) |= 1 << v52;
    *(_DWORD *)(v59[6] + 4 * v52) = v49;
    v60 = (_OWORD *)(v59[7] + 240 * v52);
    v61 = v91;
    v62 = v93;
    v60[1] = v92;
    v60[2] = v62;
    *v60 = v61;
    v63 = v94;
    v64 = v95;
    v65 = v97;
    v60[5] = v96;
    v60[6] = v65;
    v60[3] = v63;
    v60[4] = v64;
    v66 = v98;
    v67 = v99;
    v68 = v101;
    v60[9] = v100;
    v60[10] = v68;
    v60[7] = v66;
    v60[8] = v67;
    v69 = v102;
    v70 = v103;
    v71 = v105;
    v60[13] = v104;
    v60[14] = v71;
    v60[11] = v69;
    v60[12] = v70;
    v72 = v59[2];
    v73 = __OFADD__(v72, 1);
    v74 = v72 + 1;
    if (v73)
      goto LABEL_21;
    v59[2] = v74;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v108);
    outlined init with take of SwipeActions.Value?((uint64_t)&v108, (uint64_t)v106, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    outlined init with take of SwipeActions.Value?((uint64_t)v106, (uint64_t)v107, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    a4 = 1;
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v107) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  _OWORD *v34;
  __int128 v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _OWORD v44[7];
  _BYTE v45[28];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[2];
  _BYTE v54[192];
  _BYTE v55[192];
  __int128 v56;
  _OWORD v57[9];
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  _OWORD v67[3];

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v59 = a1;
  v60 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v61 = v8;
  v62 = 0;
  v63 = v11 & v9;
  v64 = a2;
  v65 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v56);
  outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)&v56, (uint64_t)v54);
  outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)v54, (uint64_t)v55);
  if (_s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOg((uint64_t)v55) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    v66 = v56;
    v67[0] = v57[0];
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)((char *)v57 + 9);
    v52 = v57[8];
    v53[0] = v58[0];
    *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)((char *)v58 + 12);
    v48 = v57[4];
    v49 = v57[5];
    v50 = v57[6];
    v51 = v57[7];
    v46 = v57[2];
    v47 = v57[3];
    v24 = *a5;
    v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v66);
    v27 = *(_QWORD *)(v24 + 16);
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (*(_QWORD *)(v24 + 24) >= v29)
    {
      if ((a4 & 1) != 0)
      {
        if ((v25 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v30 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, a4 & 1);
      v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v66);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_22;
      v26 = v31;
      if ((v30 & 1) != 0)
      {
LABEL_7:
        v13 = (_OWORD *)(*(_QWORD *)(*a5 + 56) + 144 * v26);
        v44[0] = *v13;
        v14 = v13[4];
        v16 = v13[1];
        v15 = v13[2];
        v44[3] = v13[3];
        v44[4] = v14;
        v44[1] = v16;
        v44[2] = v15;
        v18 = v13[6];
        v17 = v13[7];
        v19 = v13[5];
        *(_OWORD *)&v45[12] = *(_OWORD *)((char *)v13 + 124);
        v44[6] = v18;
        *(_OWORD *)v45 = v17;
        v44[5] = v19;
        outlined release of NavigationRequest((uint64_t)v44);
        v20 = v53[0];
        v13[6] = v52;
        v13[7] = v20;
        *(_OWORD *)((char *)v13 + 124) = *(_OWORD *)((char *)v53 + 12);
        v21 = v49;
        v13[2] = v48;
        v13[3] = v21;
        v22 = v51;
        v13[4] = v50;
        v13[5] = v22;
        v23 = v47;
        *v13 = v46;
        v13[1] = v23;
        goto LABEL_8;
      }
    }
    v33 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    v34 = (_OWORD *)(v33[6] + 48 * v26);
    v35 = v67[0];
    *v34 = v66;
    v34[1] = v35;
    *(_OWORD *)((char *)v34 + 25) = *(_OWORD *)((char *)v67 + 9);
    v36 = (_OWORD *)(v33[7] + 144 * v26);
    v37 = v49;
    v36[2] = v48;
    v36[3] = v37;
    v38 = v47;
    *v36 = v46;
    v36[1] = v38;
    *(_OWORD *)((char *)v36 + 124) = *(_OWORD *)((char *)v53 + 12);
    v39 = v53[0];
    v36[6] = v52;
    v36[7] = v39;
    v40 = v51;
    v36[4] = v50;
    v36[5] = v40;
    v41 = v33[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_21;
    v33[2] = v43;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v56);
    outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)&v56, (uint64_t)v54);
    outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)v54, (uint64_t)v55);
    a4 = 1;
    if (_s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOg((uint64_t)v55) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void (*v16)(_OWORD *);
  uint64_t result;
  _OWORD v18[4];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of AnyHashable(*(_QWORD *)(v3 + 48) + 40 * v10, (uint64_t)v25);
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)&v25[2] + 8);
    goto LABEL_23;
  }
  v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    v13 = *(_QWORD *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      v9 = (v13 - 1) & v13;
      v10 = __clz(__rbit64(v13)) + (v11 << 6);
      v7 = v11;
      goto LABEL_3;
    }
    v14 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      v13 = *(_QWORD *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        v11 = v14;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        v13 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          v11 = v5 + 3;
          goto LABEL_7;
        }
        v14 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          v13 = *(_QWORD *)(v4 + 8 * v14);
          if (v13)
            goto LABEL_10;
          v11 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            v13 = *(_QWORD *)(v4 + 8 * v11);
            if (v13)
              goto LABEL_7;
            v7 = v12 - 1;
            v15 = v5 + 6;
            while (v12 != v15)
            {
              v13 = *(_QWORD *)(v4 + 8 * v15++);
              if (v13)
              {
                v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v26 = 0;
  memset(v25, 0, sizeof(v25));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v16 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of TableCellFormula((uint64_t)v25, (uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for (key: AnyHashable, value: Any)?);
  if (*((_QWORD *)&v21 + 1))
  {
    v18[2] = v22;
    v18[3] = v23;
    v19 = v24;
    v18[0] = v20;
    v18[1] = v21;
    v16(v18);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v18, &lazy cache variable for type metadata for (key: AnyHashable, value: Any));
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void (*v30)(int *);
  uint64_t result;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  _OWORD v55[15];
  _BYTE v56[244];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(v3 + 56);
    v10 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v8);
    v11 = (_OWORD *)(v9 + 240 * v8);
    v13 = v11[1];
    v12 = v11[2];
    v55[0] = *v11;
    v55[1] = v13;
    v55[2] = v12;
    v14 = v11[6];
    v16 = v11[3];
    v15 = v11[4];
    v55[5] = v11[5];
    v55[6] = v14;
    v55[3] = v16;
    v55[4] = v15;
    v17 = v11[10];
    v19 = v11[7];
    v18 = v11[8];
    v55[9] = v11[9];
    v55[10] = v17;
    v55[7] = v19;
    v55[8] = v18;
    v20 = v11[14];
    v22 = v11[11];
    v21 = v11[12];
    v55[13] = v11[13];
    v55[14] = v20;
    v55[11] = v22;
    v55[12] = v21;
    v23 = v11[10];
    *(_OWORD *)&v56[180] = v11[11];
    v24 = v11[13];
    *(_OWORD *)&v56[196] = v11[12];
    *(_OWORD *)&v56[212] = v24;
    *(_OWORD *)&v56[228] = v11[14];
    v25 = v11[6];
    *(_OWORD *)&v56[116] = v11[7];
    v26 = v11[9];
    *(_OWORD *)&v56[132] = v11[8];
    *(_OWORD *)&v56[148] = v26;
    *(_OWORD *)&v56[164] = v23;
    v27 = v11[2];
    *(_OWORD *)&v56[52] = v11[3];
    v28 = v11[5];
    *(_OWORD *)&v56[68] = v11[4];
    *(_OWORD *)&v56[84] = v28;
    *(_OWORD *)&v56[100] = v25;
    v29 = v11[1];
    *(_OWORD *)&v56[4] = *v11;
    *(_OWORD *)&v56[20] = v29;
    *(_OWORD *)&v56[36] = v27;
    v1[3] = v6;
    v1[4] = v7;
    v30 = (void (*)(int *))v1[5];
    v38 = v10;
    v51 = *(_OWORD *)&v56[192];
    v52 = *(_OWORD *)&v56[208];
    v53 = *(_OWORD *)&v56[224];
    v54 = *(_DWORD *)&v56[240];
    v47 = *(_OWORD *)&v56[128];
    v48 = *(_OWORD *)&v56[144];
    v49 = *(_OWORD *)&v56[160];
    v50 = *(_OWORD *)&v56[176];
    v43 = *(_OWORD *)&v56[64];
    v44 = *(_OWORD *)&v56[80];
    v45 = *(_OWORD *)&v56[96];
    v46 = *(_OWORD *)&v56[112];
    v39 = *(_OWORD *)v56;
    v40 = *(_OWORD *)&v56[16];
    v41 = *(_OWORD *)&v56[32];
    v42 = *(_OWORD *)&v56[48];
    outlined retain of AlertStorage(v55);
    v30(&v38);
    outlined release of AlertStorage(v55);
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  }
  v32 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v33 = (unint64_t)(v1[2] + 64) >> 6;
    if (v32 < v33)
    {
      v34 = v1[1];
      v35 = *(_QWORD *)(v34 + 8 * v32);
      if (v35)
      {
LABEL_7:
        v7 = (v35 - 1) & v35;
        v8 = __clz(__rbit64(v35)) + (v32 << 6);
        v6 = v32;
        goto LABEL_3;
      }
      v36 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v33)
      {
        v35 = *(_QWORD *)(v34 + 8 * v36);
        if (v35)
        {
LABEL_10:
          v32 = v36;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v33)
        {
          v35 = *(_QWORD *)(v34 + 8 * (v5 + 3));
          if (v35)
          {
            v32 = v5 + 3;
            goto LABEL_7;
          }
          v36 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v33)
          {
            v35 = *(_QWORD *)(v34 + 8 * v36);
            if (v35)
              goto LABEL_10;
            v32 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v33)
            {
              v35 = *(_QWORD *)(v34 + 8 * v32);
              if (v35)
                goto LABEL_7;
              v6 = v33 - 1;
              v37 = v5 + 6;
              while (v33 != v37)
              {
                v35 = *(_QWORD *)(v34 + 8 * v37++);
                if (v35)
                {
                  v32 = v37 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    _s7SwiftUI12ViewIdentityV_AA12AlertStorageVtSgWOi0_((uint64_t)&v38);
    return outlined init with take of TableCellFormula((uint64_t)&v38, a1, (uint64_t (*)(_QWORD))type metadata accessor for (ViewIdentity, AlertStorage)?);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  _OWORD v19[8];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v10);
    outlined init with copy of InspectorStorage(*(_QWORD *)(v3 + 56) + 120 * v10, (uint64_t)v29);
    LODWORD(v28) = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v28 = 0;
  v29[0] = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v29[1] = 1;
  v36 = 0;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of TableCellFormula((uint64_t)&v28, (uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for (key: ViewIdentity, value: InspectorStorage)?);
  if ((_QWORD)v21 == 1)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 1;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 120) = 0;
  }
  else
  {
    v19[4] = v24;
    v19[5] = v25;
    v19[6] = v26;
    v19[7] = v27;
    v19[0] = v20;
    v19[1] = v21;
    v19[2] = v22;
    v19[3] = v23;
    v17(v19);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage));
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_BYTE *);
  uint64_t result;
  _BYTE v19[184];
  _BYTE v20[24];
  uint64_t v21;
  _OWORD v22[11];
  char v23;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v10);
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(v3 + 56) + 176 * v10, (uint64_t)v22 + 8);
    LODWORD(v22[0]) = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v23 = 0;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_BYTE *))v1[5];
  result = outlined init with take of TableCellFormula((uint64_t)v22, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?);
  if (v21)
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v20, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t)&type metadata for ViewIdentity, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
    v17(v19);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v19, &lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog));
  }
  else
  {
    *(_BYTE *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  void (*v27)(_OWORD *);
  uint64_t result;
  _OWORD v29[7];
  char v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[7];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v3 + 48) + 40 * v10, (uint64_t)v37);
    v11 = *(_QWORD *)(v3 + 56) + 80 * v10;
    v12 = *(_BYTE *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_BYTE *)(v11 + 24);
    v16 = *(_QWORD *)(v11 + 32);
    v17 = *(_BYTE *)(v11 + 40);
    v18 = *(_QWORD *)(v11 + 48);
    v19 = *(_BYTE *)(v11 + 56);
    v20 = *(_WORD *)(v11 + 57);
    v21 = *(_QWORD *)(v11 + 64);
    LOBYTE(v11) = *(_BYTE *)(v11 + 72);
    BYTE8(v38) = v12;
    v39 = v13;
    *(_QWORD *)&v40 = v14;
    BYTE8(v40) = v15;
    *(_QWORD *)&v41 = v16;
    BYTE8(v41) = v17;
    v42[0] = v18;
    LOBYTE(v42[1]) = v19;
    *(_WORD *)((char *)&v42[1] + 1) = v20;
    v42[2] = v21;
    LOBYTE(v42[3]) = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_23;
  }
  v22 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v23 = (unint64_t)(v6 + 64) >> 6;
  if (v22 < v23)
  {
    v24 = *(_QWORD *)(v4 + 8 * v22);
    if (v24)
    {
LABEL_7:
      v9 = (v24 - 1) & v24;
      v10 = __clz(__rbit64(v24)) + (v22 << 6);
      v7 = v22;
      goto LABEL_3;
    }
    v25 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v23)
    {
      v24 = *(_QWORD *)(v4 + 8 * v25);
      if (v24)
      {
LABEL_10:
        v22 = v25;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v23)
      {
        v24 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v24)
        {
          v22 = v5 + 3;
          goto LABEL_7;
        }
        v25 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v23)
        {
          v24 = *(_QWORD *)(v4 + 8 * v25);
          if (v24)
            goto LABEL_10;
          v22 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v23)
          {
            v24 = *(_QWORD *)(v4 + 8 * v22);
            if (v24)
              goto LABEL_7;
            v7 = v23 - 1;
            v26 = v5 + 6;
            while (v23 != v26)
            {
              v24 = *(_QWORD *)(v4 + 8 * v26++);
              if (v24)
              {
                v22 = v26 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v38 = 0u;
  memset(v37, 0, sizeof(v37));
  v39 = 1;
  v40 = 0u;
  v41 = 0u;
  memset(v42, 0, 25);
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v27 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of TableCellFormula((uint64_t)v37, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?);
  if ((_QWORD)v32 == 1)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_QWORD *)(a1 + 48) = 1;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 97) = 0u;
  }
  else
  {
    v29[4] = v33;
    v29[5] = v34;
    v29[6] = v35;
    v29[0] = v31[0];
    v29[1] = v31[1];
    v30 = v36;
    v29[2] = v31[2];
    v29[3] = v32;
    v27(v29);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(__int128 *);
  __int128 v24;
  uint64_t result;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v8);
    v10 = *(_QWORD *)(v3 + 56) + 120 * v8;
    v12 = *(_QWORD *)v10;
    v11 = *(_QWORD *)(v10 + 8);
    v13 = *(_BYTE *)(v10 + 16);
    v14 = *(_BYTE *)(v10 + 56);
    v15 = *(_QWORD *)(v10 + 64);
    v17 = *(_BYTE *)(v10 + 73);
    v18 = *(_QWORD *)(v10 + 80);
    v19 = *(_QWORD *)(v10 + 88);
    v20 = *(_QWORD *)(v10 + 96);
    v21 = *(_QWORD *)(v10 + 104);
    v22 = *(_QWORD *)(v10 + 112);
    v46 = *(_BYTE *)(v10 + 72);
    v16 = v46;
    v23 = (void (*)(__int128 *))v1[5];
    *(_QWORD *)&v32 = v9;
    *((_QWORD *)&v32 + 1) = v12;
    v33 = v11;
    v34 = v13;
    v35 = *(_OWORD *)(v10 + 24);
    v24 = *(_OWORD *)(v10 + 40);
    v1[3] = v6;
    v1[4] = v7;
    v36 = v24;
    v37 = v14;
    v38 = v15;
    v39 = v16;
    v40 = v17;
    v41 = v18;
    v42 = v19;
    v43 = v20;
    v44 = v21;
    v45 = v22;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v23(&v32);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  }
  v26 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v27 = (unint64_t)(v1[2] + 64) >> 6;
    if (v26 < v27)
    {
      v28 = v1[1];
      v29 = *(_QWORD *)(v28 + 8 * v26);
      if (v29)
      {
LABEL_7:
        v7 = (v29 - 1) & v29;
        v8 = __clz(__rbit64(v29)) + (v26 << 6);
        v6 = v26;
        goto LABEL_3;
      }
      v30 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v27)
      {
        v29 = *(_QWORD *)(v28 + 8 * v30);
        if (v29)
        {
LABEL_10:
          v26 = v30;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v27)
        {
          v29 = *(_QWORD *)(v28 + 8 * (v5 + 3));
          if (v29)
          {
            v26 = v5 + 3;
            goto LABEL_7;
          }
          v30 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v27)
          {
            v29 = *(_QWORD *)(v28 + 8 * v30);
            if (v29)
              goto LABEL_10;
            v26 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v27)
            {
              v29 = *(_QWORD *)(v28 + 8 * v26);
              if (v29)
                goto LABEL_7;
              v6 = v27 - 1;
              v31 = v5 + 6;
              while (v27 != v31)
              {
                v29 = *(_QWORD *)(v28 + 8 * v31++);
                if (v29)
                {
                  v26 = v31 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    _s7SwiftUI9NamespaceV2IDV_AA20OrnamentPresentationVtSgWOi0_(&v32);
    return outlined init with take of TableCellFormula((uint64_t)&v32, a1, (uint64_t (*)(_QWORD))type metadata accessor for (Namespace.ID, OrnamentPresentation)?);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  unsigned __int8 v19;
  _OWORD v20[6];
  unsigned __int8 v21;
  _OWORD v22[6];
  unsigned __int8 v23;
  _OWORD v24[6];
  char v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    outlined init with copy of NavigationDestinationPresentation(*(_QWORD *)(v3 + 56) + 96 * v10, (uint64_t)v24 + 8);
    *(_QWORD *)&v24[0] = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v25 = -1;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of TableCellFormula((uint64_t)v24, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)?);
  v19 = v23;
  if (v23 == 255)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 96) = v19;
  }
  else
  {
    v20[4] = v22[4];
    v20[5] = v22[5];
    v21 = v23;
    v20[0] = v22[0];
    v20[1] = v22[1];
    v20[2] = v22[2];
    v20[3] = v22[3];
    v17(v20);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation));
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_BYTE *);
  uint64_t result;
  _BYTE v19[168];
  _BYTE v20[136];
  unint64_t v21;
  _OWORD v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    outlined init with copy of UpdateViewDestinationRequest(*(_QWORD *)(v3 + 56) + 160 * v10, (uint64_t)v22 + 8);
    *(_QWORD *)&v22[0] = v11;
    goto LABEL_23;
  }
  v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    v14 = *(_QWORD *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v12 << 6);
      v7 = v12;
      goto LABEL_3;
    }
    v15 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        v12 = v15;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        v14 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          v12 = v5 + 3;
          goto LABEL_7;
        }
        v15 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (v14)
            goto LABEL_10;
          v12 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v12);
            if (v14)
              goto LABEL_7;
            v7 = v13 - 1;
            v16 = v5 + 6;
            while (v13 != v16)
            {
              v14 = *(_QWORD *)(v4 + 8 * v16++);
              if (v14)
              {
                v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v23 = 0;
  v24 = 0x1FFFFFFFCLL;
  memset(v22, 0, sizeof(v22));
  v26 = 0;
  v27 = 0;
  v25 = 0;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v17 = (void (*)(_BYTE *))v1[5];
  result = outlined init with take of TableCellFormula((uint64_t)v22, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for (key: Namespace.ID, value: UpdateViewDestinationRequest)?);
  if (v21 >> 1 == 4294967294)
  {
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0x1FFFFFFFCLL;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v20, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for (key: Namespace.ID, value: UpdateViewDestinationRequest), MEMORY[0x1E0CE7DD0], (uint64_t)&type metadata for UpdateViewDestinationRequest, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
    v17(v19);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v19, &lazy cache variable for type metadata for (key: Namespace.ID, value: UpdateViewDestinationRequest));
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void (*v25)(__int128 *);
  uint64_t result;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  __int128 v33;
  char v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[19];
  _OWORD v46[7];
  _OWORD v47[2];
  _BYTE v48[147];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = *(_QWORD *)(v3 + 48) + 48 * v8;
    v10 = *(_BYTE *)(v9 + 16);
    v11 = *(_BYTE *)(v9 + 40);
    v12 = (_OWORD *)(*(_QWORD *)(v3 + 56) + 144 * v8);
    v13 = *(_OWORD *)v9;
    v14 = *(_OWORD *)(v9 + 24);
    v46[0] = *v12;
    v15 = v12[4];
    v17 = v12[1];
    v16 = v12[2];
    v46[3] = v12[3];
    v46[4] = v15;
    v46[1] = v17;
    v46[2] = v16;
    v19 = v12[6];
    v18 = v12[7];
    v20 = v12[5];
    *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)((char *)v12 + 124);
    v46[6] = v19;
    v47[0] = v18;
    v46[5] = v20;
    v21 = v12[1];
    *(_OWORD *)&v48[7] = *v12;
    v22 = v12[5];
    *(_OWORD *)&v48[71] = v12[4];
    v23 = v12[2];
    *(_OWORD *)&v48[55] = v12[3];
    *(_OWORD *)&v48[39] = v23;
    *(_OWORD *)&v48[23] = v21;
    *(_OWORD *)&v48[131] = *(_OWORD *)((char *)v12 + 124);
    v24 = v12[6];
    *(_OWORD *)&v48[119] = v12[7];
    *(_OWORD *)&v48[103] = v24;
    *(_OWORD *)&v48[87] = v22;
    v1[3] = v6;
    v1[4] = v7;
    v25 = (void (*)(__int128 *))v1[5];
    v33 = v13;
    v34 = v10;
    v35 = v14;
    v36 = v11;
    v43 = *(_OWORD *)&v48[96];
    v44 = *(_OWORD *)&v48[112];
    *(_OWORD *)v45 = *(_OWORD *)&v48[128];
    *(_DWORD *)&v45[15] = *(_DWORD *)&v48[143];
    v39 = *(_OWORD *)&v48[32];
    v40 = *(_OWORD *)&v48[48];
    v41 = *(_OWORD *)&v48[64];
    v42 = *(_OWORD *)&v48[80];
    v37 = *(_OWORD *)v48;
    v38 = *(_OWORD *)&v48[16];
    outlined retain of NavigationRequest((uint64_t)v46);
    v25(&v33);
    outlined release of NavigationRequest((uint64_t)v46);
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  }
  v27 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v28 = (unint64_t)(v1[2] + 64) >> 6;
    if (v27 < v28)
    {
      v29 = v1[1];
      v30 = *(_QWORD *)(v29 + 8 * v27);
      if (v30)
      {
LABEL_7:
        v7 = (v30 - 1) & v30;
        v8 = __clz(__rbit64(v30)) + (v27 << 6);
        v6 = v27;
        goto LABEL_3;
      }
      v31 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v28)
      {
        v30 = *(_QWORD *)(v29 + 8 * v31);
        if (v30)
        {
LABEL_10:
          v27 = v31;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v28)
        {
          v30 = *(_QWORD *)(v29 + 8 * (v5 + 3));
          if (v30)
          {
            v27 = v5 + 3;
            goto LABEL_7;
          }
          v31 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v28)
          {
            v30 = *(_QWORD *)(v29 + 8 * v31);
            if (v30)
              goto LABEL_10;
            v27 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v28)
            {
              v30 = *(_QWORD *)(v29 + 8 * v27);
              if (v30)
                goto LABEL_7;
              v6 = v28 - 1;
              v32 = v5 + 6;
              while (v28 != v32)
              {
                v30 = *(_QWORD *)(v29 + 8 * v32++);
                if (v30)
                {
                  v27 = v32 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    _s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOi0_((uint64_t)&v33);
    return outlined init with take of TableCellFormula((uint64_t)&v33, a1, (uint64_t (*)(_QWORD))type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  __n128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int64_t v47;

  type metadata accessor for (key: UUID, value: PlatformItemList)();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (key: UUID, value: PlatformItemList)?, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17.n128_f64[0] = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v44 - v16;
  v19 = *v1;
  v20 = v1[1];
  v22 = v1[2];
  v21 = v1[3];
  v23 = v21;
  v24 = v1[4];
  v44 = v8;
  if (v24)
  {
    v46 = v13;
    v47 = v21;
    v45 = v22;
    v25 = v20;
    v26 = v5;
    v27 = a1;
    v28 = (v24 - 1) & v24;
    v29 = __clz(__rbit64(v24)) | (v21 << 6);
LABEL_3:
    v30 = *(_QWORD *)(v19 + 48);
    v31 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v18, v30 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v29, v31);
    *(_QWORD *)&v18[*(int *)(v4 + 48)] = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v4);
    v5 = v26;
    swift_bridgeObjectRetain();
    a1 = v27;
    v20 = v25;
    v22 = v45;
    v13 = v46;
    goto LABEL_25;
  }
  v32 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
LABEL_23:
    v23 = v16;
    goto LABEL_24;
  }
  v33 = (unint64_t)(v22 + 64) >> 6;
  if (v32 < v33)
  {
    v34 = *(_QWORD *)(v20 + 8 * v32);
    if (v34)
    {
LABEL_7:
      v45 = v22;
      v46 = v13;
      v25 = v20;
      v26 = v5;
      v27 = a1;
      v28 = (v34 - 1) & v34;
      v29 = __clz(__rbit64(v34)) + (v32 << 6);
      v47 = v32;
      goto LABEL_3;
    }
    v35 = v21 + 2;
    v23 = v21 + 1;
    if (v21 + 2 < v33)
    {
      v34 = *(_QWORD *)(v20 + 8 * v35);
      if (v34)
      {
LABEL_10:
        v32 = v35;
        goto LABEL_7;
      }
      v23 = v21 + 2;
      if (v21 + 3 < v33)
      {
        v34 = *(_QWORD *)(v20 + 8 * (v21 + 3));
        if (v34)
        {
          v32 = v21 + 3;
          goto LABEL_7;
        }
        v35 = v21 + 4;
        v23 = v21 + 3;
        if (v21 + 4 < v33)
        {
          v34 = *(_QWORD *)(v20 + 8 * v35);
          if (v34)
            goto LABEL_10;
          v32 = v21 + 5;
          v23 = v21 + 4;
          if (v21 + 5 < v33)
          {
            v34 = *(_QWORD *)(v20 + 8 * v32);
            if (v34)
              goto LABEL_7;
            v16 = v33 - 1;
            v36 = v21 + 6;
            while (v33 != v36)
            {
              v34 = *(_QWORD *)(v20 + 8 * v36++);
              if (v34)
              {
                v32 = v36 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v47 = v23;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v18, 1, 1, v4, v17);
  v28 = 0;
LABEL_25:
  *v1 = v19;
  v1[1] = v20;
  v37 = v47;
  v1[2] = v22;
  v1[3] = v37;
  v1[4] = v28;
  v38 = (void (*)(uint64_t))v1[5];
  outlined init with take of CGSize?((uint64_t)v18, (uint64_t)v13, &lazy cache variable for type metadata for (key: UUID, value: PlatformItemList)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: PlatformItemList));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    type metadata accessor for (UUID, PlatformItemList)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a1, 1, 1, v39);
  }
  else
  {
    v41 = (uint64_t)v13;
    v42 = (uint64_t)v44;
    outlined init with take of TableCellFormula(v41, (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for (key: UUID, value: PlatformItemList));
    v38(v42);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v42, (uint64_t (*)(_QWORD))type metadata accessor for (key: UUID, value: PlatformItemList));
    type metadata accessor for (UUID, PlatformItemList)();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(a1, 0, 1, v43);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *);
  uint64_t result;
  _QWORD v14[2];
  char v15;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(_BYTE *)(v1 + 96);
  if (v2 == *(_QWORD *)(v1 + 56))
  {
    v5 = *(_BYTE *)(v1 + 72);
    if ((*(_BYTE *)(v1 + 96) & 1) != 0)
    {
      if (!*(_BYTE *)(v1 + 72))
        goto LABEL_4;
LABEL_14:
      *(_QWORD *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_WORD *)(a1 + 88) = -256;
      return result;
    }
    if (v3 != *(_QWORD *)(v1 + 64))
      v5 = 1;
    if ((v5 & 1) == 0)
      goto LABEL_14;
  }
LABEL_4:
  v6 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v9 = __OFADD__(v8, v7);
  v10 = v8 + v7;
  if (v9)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v6 == v10)
  {
    v11 = 0;
LABEL_10:
    *(_QWORD *)(v1 + 80) = v6;
    *(_QWORD *)(v1 + 88) = v11;
    *(_BYTE *)(v1 + 96) = v6 == v10;
    v12 = *(uint64_t (**)(_QWORD *))(v1 + 104);
    v14[0] = v2;
    v14[1] = v3;
    v15 = v4;
    return v12(v14);
  }
  if ((*(_BYTE *)(v1 + 96) & 1) != 0)
    goto LABEL_18;
  v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
    goto LABEL_10;
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized static ViewAlias._viewListCount(inputs:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(void), uint64_t a7, unint64_t *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, unint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v19;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;

  *(_QWORD *)&v25 = a1;
  *((_QWORD *)&v25 + 1) = a2;
  v26 = a3;
  v27 = a4;
  type metadata accessor for SourceInput<ListStyleContent>(0, a5, a6, a7);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(a8, a5, a6, a7);
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v24 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  v12 = *(_QWORD *)(v21 + 48);
  v13 = *(_QWORD *)(v21 + 16);
  v14 = *(_QWORD *)(v21 + 24);
  v15 = *(_QWORD *)(v21 + 32);
  v16 = *(unsigned int *)(v21 + 40);
  v17 = *(_BYTE *)(v21 + 44);
  swift_retain();
  swift_release();
  v24 = v12;
  PropertyList.subscript.setter();
  if (!v13)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.setter();
  v21 = v25;
  v22 = v26;
  v23 = v27;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, __int128 *, uint64_t, uint64_t))(v14 + 24);
  LOBYTE(v24) = v17;
  v19 = v18(v13, v14, v15, v16 | ((unint64_t)v17 << 32), &v21, v13, v14);
  swift_bridgeObjectRelease();
  swift_release();
  return v19;
}

uint64_t protocol witness for static AnySourceFormula.viewListCount(source:inputs:) in conformance SourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return static SourceFormula.viewListCount(source:inputs:)(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32), a5, *(_QWORD *)(a6 + 16), *(_QWORD *)(a6 + 24));
}

uint64_t static SourceFormula.viewListCount(source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a5 + 8);
  v8 = *(_DWORD *)(a5 + 16);
  v9 = *(_QWORD *)(a5 + 24);
  v11[0] = *(_QWORD *)a5;
  v11[1] = v7;
  v12 = v8;
  v13 = v9;
  if ((a4 & 0x100000000) != 0)
    return (*(uint64_t (**)(_QWORD *))(a7 + 40))(v11);
  else
    return static Optional<A>._viewListCount(inputs:)();
}

Swift::Void __swiftcall AppSceneDelegate.scene(_:willConnectTo:options:)(UIScene *_, UISceneSession willConnectTo, UISceneConnectionOptions options)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t ObjCClassMetadata;
  id v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  UIScene *v43;
  _QWORD *v44;
  UIScene *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Class v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  objc_class *v61;
  char **v62;
  Class v63;
  uint64_t v64;
  Swift::String v65;
  Swift::String v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  NSDictionary v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  NSDictionary v87;
  UIScene *v88;
  id v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  void *v93;
  id v94;
  void *v95;
  void *v96;
  UIScene *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  UISceneConnectionOptions *v107;
  void *v108;
  objc_class *v109;
  char *v110;
  uint64_t (*v111)(uint64_t);
  UIScene *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  void *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  void *v123;
  char *v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  const void *v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  void *v141;
  id v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  UIScene *v148;
  uint64_t (*v149)(uint64_t);
  uint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  void *v156;
  UIScene *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  UIScene *v167;
  UIScene *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t);
  unint64_t v174;
  uint64_t v175;
  UIScene *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  Class isa;
  char *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  int v189;
  void *v190;
  void *v191;
  __int128 v192;
  uint64_t (*v193)(uint64_t);
  void *ObjectType;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 v203;

  v4 = v3;
  isa = willConnectTo.super.isa;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v182 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v164 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v181 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v186 = (char *)&v164 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchTime();
  v180 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v183 = (char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v185 = (char *)&v164 - v20;
  MEMORY[0x18D75B908](v19);
  v21 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window;
  if (*(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window)
    || (objc_opt_self(), (v22 = swift_dynamicCastObjCClass()) == 0)
    || (v23 = static AppGraph.shared) == 0)
  {
    static Update.end()();
    return;
  }
  v172 = v22;
  v178 = v10;
  v176 = _;
  swift_retain();
  AppSceneDelegate.appDelegate.getter();
  v25 = v24;
  v26 = *(void **)&v24[OBJC_IVAR____TtC7SwiftUI11AppDelegate_fallbackDelegate];
  swift_unknownObjectRetain();

  v179 = v11;
  v169 = v23;
  if (v26)
  {
    if (!objc_msgSend(v26, sel_respondsToSelector_, sel_application_configurationForConnectingSceneSession_options_)|| (objc_msgSend(v26, sel_respondsToSelector_, sel_application_configurationForConnectingSceneSession_options_) & 1) == 0|| (v27 = (void *)objc_opt_self(), swift_unknownObjectRetain(), v28 = objc_msgSend(v27, sel_sharedApplication), v29 = objc_msgSend(v26, sel_application_configurationForConnectingSceneSession_options_, v28, isa, options.super.isa), v28, swift_unknownObjectRelease(),
          !v29))
    {
      swift_unknownObjectRelease();
      goto LABEL_16;
    }
    if (!objc_msgSend(v29, sel_delegateClass))
      goto LABEL_71;
    ObjCClassMetadata = swift_getObjCClassMetadata();
    v31 = objc_msgSend(v29, sel_sceneDelegate);
    if (swift_conformsToProtocol2())
      v32 = ObjCClassMetadata;
    else
      v32 = 0;
    if (v32)
    {
      project #1 <A>(_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(ObjCClassMetadata, v4, (uint64_t)v31, ObjCClassMetadata);
      swift_unknownObjectRelease();
LABEL_71:
      swift_unknownObjectRelease();

      goto LABEL_16;
    }
    v177 = (uint64_t)v31;
    lazy protocol witness table accessor for type ObservableObjectDescriptor and conformance ObservableObjectDescriptor();
    static ProtocolDescriptor.conformance(of:)();
    v160 = v192;
    if ((_QWORD)v192)
    {
      v175 = *((_QWORD *)&v192 + 1);
      v161 = v177;
      ObjectType = (void *)swift_getObjectType();
      v195 = 0;
      *(_QWORD *)&v192 = v161;
      swift_unknownObjectRetain();
      MakeObservableObjectDelegateBox.visit<A>(type:)(v160, v160, v175, v162);
      *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox) = v195;
      swift_retain();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_release();
      outlined destroy of MakeObservableObjectDelegateBox((uint64_t)&v192);
    }
    else
    {
      type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for FallbackDelegateBox<NSObject>, (unint64_t *)&lazy cache variable for type metadata for NSObject, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FallbackDelegateBox);
      v163 = swift_allocObject();
      *(_QWORD *)(v163 + 16) = v177;
      *(_BYTE *)(v163 + 24) = 1;
      *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox) = v163;
      swift_unknownObjectRelease();

      swift_release();
    }
  }
LABEL_16:
  v201 = 0;
  v202 = 0;
  v203 = -1;
  v33 = -[objc_class stateRestorationActivity](isa, sel_stateRestorationActivity);
  v177 = v14;
  v165 = v7;
  if (!v33)
  {
LABEL_21:
    v37 = MEMORY[0x1E0DEE9E0];
    goto LABEL_22;
  }
  v34 = v33;
  v35 = objc_msgSend(v33, sel_userInfo);
  if (!v35)
  {

    goto LABEL_21;
  }
  v36 = v35;
  v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v38 = objc_msgSend(v34, sel_title);
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v41;

    v201 = v40;
    v202 = v42;
    v203 = 0;
  }
  else
  {

  }
LABEL_22:
  v43 = v176;
  type metadata accessor for SceneStorageValues();
  v44 = (_QWORD *)swift_allocObject();
  swift_bridgeObjectRetain();
  v44[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v44[6] = 0;
  swift_unknownObjectWeakInit();
  v44[2] = v37;
  v44[4] = *(_QWORD *)(v37 + 16);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues) = v44;
  swift_release();
  type metadata accessor for SceneBridge();
  swift_allocObject();
  v45 = v43;
  v46 = SceneBridge.init()();
  v47 = v172;
  swift_unknownObjectWeakAssign();
  v168 = v45;

  *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge) = v46;
  v171 = v46;
  swift_retain();
  swift_release();
  v48 = -[objc_class URLContexts](options.super.isa, sel_URLContexts);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type UIOpenURLContext and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  v49 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v200 = v49;
  MEMORY[0x1E0C80A78](v50, v51);
  *(&v164 - 8) = v4;
  *(&v164 - 7) = (uint64_t)&v201;
  *(&v164 - 6) = v37;
  *(&v164 - 5) = (uint64_t)options.super.isa;
  v52 = isa;
  *(&v164 - 4) = (uint64_t)&v200;
  *(&v164 - 3) = (uint64_t)v52;
  *(&v164 - 2) = v47;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIWindow);
  static Update.ensure<A>(_:)();
  swift_bridgeObjectRelease();
  v176 = (UIScene *)v192;
  v53 = -[objc_class userInfo](v52, sel_userInfo);
  if (v53)
  {
    v54 = v53;
    v55 = MEMORY[0x1E0DEE9B8] + 8;
    v56 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v199 = v56;
    v57 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
    v58 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
    if (v58 == 255)
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000019, 0x8000000187BD33F0, &v192);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v192, (unint64_t *)&lazy cache variable for type metadata for Any?, v55);
      v61 = (objc_class *)v171;
      v62 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
      if (v199)
      {
LABEL_31:
        v63 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    else
    {
      v60 = *v57;
      v59 = v57[1];
      v61 = (objc_class *)v171;
      if ((v58 & 1) != 0)
      {
        *(_QWORD *)&v192 = _typeName(_:qualified:)();
        *((_QWORD *)&v192 + 1) = v64;
        v65._countAndFlagsBits = 45;
        v65._object = (void *)0xE100000000000000;
        String.append(_:)(v65);
        LOBYTE(v188) = v59;
        v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v66);
        v52 = isa;
        swift_bridgeObjectRelease();
        outlined consume of SceneID?(v60, v59, v58);
        v59 = *((_QWORD *)&v192 + 1);
        v60 = v192;
        v56 = v199;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      v62 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
      ObjectType = (void *)MEMORY[0x1E0DEA968];
      *(_QWORD *)&v192 = v60;
      *((_QWORD *)&v192 + 1) = v59;
      outlined init with take of Any(&v192, &v188);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v187 = v56;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v188, 0xD000000000000019, 0x8000000187BD33F0, isUniquelyReferenced_nonNull_native);
      v68 = v187;
      v199 = v187;
      swift_bridgeObjectRelease();
      if (v68)
        goto LABEL_31;
    }
    v63 = 0;
LABEL_32:
    -[objc_class setUserInfo:](v52, sel_setUserInfo_, v63);

    goto LABEL_33;
  }
  -[objc_class setUserInfo:](v52, sel_setUserInfo_, 0);
  swift_bridgeObjectRelease();
  v61 = (objc_class *)v171;
  v62 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
LABEL_33:
  v69 = objc_msgSend(v52, v62[327]);
  if (v69)
  {
    v70 = v69;
    v71 = MEMORY[0x1E0DEE9B8] + 8;
    v72 = (void *)MEMORY[0x1E0DEA968];
    v73 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v199 = v73;
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType))
    {
      makeStableTypeData(_:)();
      v188 = v192;
      v189 = (int)v193;
      v74 = StrongHash.description.getter();
      ObjectType = v72;
      *(_QWORD *)&v192 = v74;
      *((_QWORD *)&v192 + 1) = v75;
      outlined init with take of Any(&v192, &v188);
      v76 = swift_isUniquelyReferenced_nonNull_native();
      v187 = v73;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v188, 0xD00000000000001BLL, 0x8000000187BD8250, v76);
      v77 = v187;
      v199 = v187;
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000001BLL, 0x8000000187BD8250, &v192);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v192, (unint64_t *)&lazy cache variable for type metadata for Any?, v71);
      v77 = v199;
    }
    v52 = isa;
    v62 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
    if (v77)
    {
      v78.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v78.super.isa = 0;
    }
    -[objc_class setUserInfo:](v52, sel_setUserInfo_, v78.super.isa);

  }
  else
  {
    -[objc_class setUserInfo:](v52, sel_setUserInfo_, 0);
    swift_bridgeObjectRelease();
  }
  v79 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
  v80 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8);
  if (v80 >> 60 != 15)
  {
    v81 = *v79;
    outlined copy of Data._Representation(*v79, *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8));
    v82 = objc_msgSend(v52, v62[327]);
    if (v82)
    {
      v83 = v82;
      v175 = MEMORY[0x1E0DEE9B8] + 8;
      v84 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      ObjectType = (void *)MEMORY[0x1E0CB0338];
      *(_QWORD *)&v192 = v81;
      *((_QWORD *)&v192 + 1) = v80;
      outlined init with take of Any(&v192, &v188);
      outlined copy of Data._Representation(v81, v80);
      v85 = swift_isUniquelyReferenced_nonNull_native();
      v199 = v84;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v188, 0xD00000000000001CLL, 0x8000000187BD8230, v85);
      v86 = v199;
      swift_bridgeObjectRelease();
      if (v86)
      {
        v87.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v87.super.isa = 0;
      }
      -[objc_class setUserInfo:](v52, sel_setUserInfo_, v87.super.isa);
      outlined consume of Data?(v81, v80);

    }
    else
    {
      -[objc_class setUserInfo:](v52, sel_setUserInfo_, 0);
      outlined consume of Data?(v81, v80);
      swift_bridgeObjectRelease();
    }
  }
  v88 = v176;
  v89 = -[UIScene rootViewController](v176, sel_rootViewController);
  v90 = swift_unknownObjectWeakAssign();
  v91 = (void *)*((_QWORD *)v61 + 10);
  if (v91)
  {
    v92 = MEMORY[0x18D760234](v90);
    if (v92)
    {
      v93 = (void *)v92;
      v94 = v91;
      objc_msgSend(v93, sel_setUserActivity_, v94);
      v95 = (void *)*((_QWORD *)v61 + 10);
      *((_QWORD *)v61 + 10) = 0;

      objc_msgSend(v94, sel_becomeCurrent);
      v89 = v93;
    }
  }

  v96 = *(void **)(v4 + v21);
  *(_QWORD *)(v4 + v21) = v88;
  v97 = v88;

  -[UIScene makeKeyAndVisible](v97, sel_makeKeyAndVisible);
  AppSceneDelegate.sceneItem()(&v192);
  v98 = v197;
  v99 = v198;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of SceneList.Item((uint64_t)&v192);
  v100 = *(_QWORD *)(v98 + 16);
  v170 = v4;
  v167 = v97;
  if (v100)
  {
    swift_bridgeObjectRetain();
    v101 = v98 + 40;
    do
    {
      specialized _do #1 <A>(_:) in handleConnectionOptionsCallbacks #1 (_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(*(_QWORD *)(v101 - 8), (uint64_t)options.super.isa, v99, *(_QWORD *)(v101 - 8));
      v101 += 16;
      --v100;
    }
    while (v100);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v102 = v165;
  v103 = v185;
  v104 = v183;
  v105 = v180;
  swift_bridgeObjectRelease();
  v180 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v166 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  MEMORY[0x18D75C8BC](v104, 0.1);
  v106 = *(void (**)(char *, uint64_t))(v105 + 8);
  v106(v104, v177);
  v107 = (UISceneConnectionOptions *)swift_allocObject();
  v107[2].super.isa = v61;
  v107[3].super.isa = options.super.isa;
  v195 = partial apply for closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:);
  v196 = (uint64_t)v107;
  *(_QWORD *)&v192 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v192 + 1) = 1107296256;
  v193 = thunk for @escaping @callee_guaranteed () -> ();
  ObjectType = &block_descriptor_8;
  v108 = _Block_copy(&v192);
  swift_retain();
  v109 = options.super.isa;
  swift_release();
  v110 = v186;
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)&v192 = MEMORY[0x1E0DEE9D8];
  v111 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v112 = (UIScene *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], v111, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v114 = v113;
  v115 = lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v116 = v178;
  v174 = v115;
  v175 = v114;
  v176 = v112;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v117 = (void *)v166;
  MEMORY[0x18D75D918](v103, v110, v116, v108);
  _Block_release(v108);

  v182 = *(_QWORD *)(v182 + 8);
  ((void (*)(char *, uint64_t))v182)(v116, v102);
  v118 = v177;
  v181 = *(_QWORD *)(v181 + 8);
  ((void (*)(char *, uint64_t))v181)(v110, v179);
  v173 = v106;
  v106(v103, v118);
  v166 = (uint64_t)v109;
  v119 = -[objc_class userActivities](v109, sel_userActivities);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  lazy protocol witness table accessor for type UIScene and conformance NSObject(&lazy protocol witness table cache variable for type NSUserActivity and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for NSUserActivity);
  v120 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v121 = (void *)specialized Collection.first.getter(v120);
  v122 = v185;
  swift_bridgeObjectRelease();
  if (v121)
  {
    v123 = (void *)static OS_dispatch_queue.main.getter();
    v124 = v183;
    static DispatchTime.now()();
    MEMORY[0x18D75C8BC](v124, 0.1);
    v125 = v173;
    v173(v124, v118);
    v126 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v127 = swift_allocObject();
    *(_QWORD *)(v127 + 16) = v121;
    *(_QWORD *)(v127 + 24) = v126;
    v195 = partial apply for closure #3 in AppSceneDelegate.scene(_:willConnectTo:options:);
    v196 = v127;
    *(_QWORD *)&v192 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v192 + 1) = 1107296256;
    v193 = thunk for @escaping @callee_guaranteed () -> ();
    ObjectType = &block_descriptor_30;
    v128 = _Block_copy(&v192);
    v129 = v121;
    swift_release();
    static DispatchQoS.unspecified.getter();
    *(_QWORD *)&v192 = MEMORY[0x1E0DEE9D8];
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18D75D918](v185, v110, v116, v128);
    v130 = v128;
    v122 = v185;
    _Block_release(v130);

    ((void (*)(char *, uint64_t))v182)(v116, v102);
    ((void (*)(char *, uint64_t))v181)(v110, v179);
    v125(v122, v118);
  }
  v131 = v173;
  v132 = swift_bridgeObjectRetain();
  v133 = (void *)specialized Collection.first.getter(v132);
  swift_bridgeObjectRelease();
  v134 = v170;
  if (v133)
  {
    v135 = (void *)static OS_dispatch_queue.main.getter();
    v136 = v183;
    static DispatchTime.now()();
    MEMORY[0x18D75C8BC](v136, 0.1);
    v137 = v177;
    v131(v136, v177);
    v138 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v139 = swift_allocObject();
    *(_QWORD *)(v139 + 16) = v133;
    *(_QWORD *)(v139 + 24) = v138;
    v195 = partial apply for closure #4 in AppSceneDelegate.scene(_:willConnectTo:options:);
    v196 = v139;
    *(_QWORD *)&v192 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v192 + 1) = 1107296256;
    v193 = thunk for @escaping @callee_guaranteed () -> ();
    ObjectType = &block_descriptor_23;
    v140 = v122;
    v141 = _Block_copy(&v192);
    v142 = v133;
    swift_release();
    static DispatchQoS.unspecified.getter();
    *(_QWORD *)&v192 = MEMORY[0x1E0DEE9D8];
    v143 = v178;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18D75D918](v140, v186, v143, v141);
    _Block_release(v141);

    ((void (*)(char *, uint64_t))v182)(v143, v102);
    ((void (*)(char *, uint64_t))v181)(v186, v179);
    v173(v140, v137);
  }
  v144 = v169;
  GraphHost.addPreference<A>(_:)();
  specialized AppGraph.addObserver(_:)(v134, v144);
  v145 = *(_QWORD *)(v134 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneDelegateBox);
  v146 = v179;
  v147 = MEMORY[0x1E0DEE9D8];
  v148 = v168;
  if (v145)
  {
    v149 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 80);
    v150 = swift_retain();
    v151 = (void *)v149(v150);
    swift_release();
    if (v151)
    {
      v191 = &unk_1EDF2A8C8;
      if (swift_dynamicCastObjCProtocolConditional())
      {
        v190 = &unk_1EDF2AAE8;
        v152 = (void *)swift_dynamicCastObjCProtocolConditional();
        if (v152)
        {
          v153 = v152;
          if ((objc_msgSend(v152, sel_respondsToSelector_, sel_scene_willConnectToSession_options_) & 1) != 0)
            objc_msgSend(v153, sel_scene_willConnectToSession_options_, v148, isa, v166);
        }
      }

    }
  }
  v154 = (void *)static OS_dispatch_queue.main.getter();
  v155 = swift_allocObject();
  *(_QWORD *)(v155 + 16) = v172;
  v195 = partial apply for closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:);
  v196 = v155;
  *(_QWORD *)&v192 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v192 + 1) = 1107296256;
  v193 = thunk for @escaping @callee_guaranteed () -> ();
  ObjectType = &block_descriptor_14;
  v156 = _Block_copy(&v192);
  v157 = v148;
  swift_release();
  v158 = v186;
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)&v192 = v147;
  v159 = v178;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18D75D930](0, v158, v159, v156);
  _Block_release(v156);

  ((void (*)(char *, uint64_t))v182)(v159, v102);
  ((void (*)(char *, uint64_t))v181)(v158, v146);
  if ((static AppSceneDelegate.hasConnectedFirstScene & 1) == 0)
    static AppSceneDelegate.hasConnectedFirstScene = 1;
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of SceneID?(v201, v202, v203);
  static Update.end()();
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UIScene and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for NSObject(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for ViewLeafView(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t @objc DragAndDropBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

  swift_release();
  outlined destroy of AccessibilityTableContext?(a1 + direct field offset for DragAndDropBridge.activeDrop, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(a1 + direct field offset for DragAndDropBridge.onSessionBegan));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(a1 + direct field offset for DragAndDropBridge.onSessionEnded));
}

_WORD *assignWithCopy for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  char v54;
  char v55;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *(_QWORD *)v9;
      v26 = *((_QWORD *)v9 + 1);
      v27 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v26, v27);
      *(_QWORD *)v8 = v25;
      *((_QWORD *)v8 + 1) = v26;
      v8[16] = v27;
      v28 = (void *)*((_QWORD *)v9 + 3);
      *((_QWORD *)v8 + 3) = v28;
      v29 = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      *((_QWORD *)v8 + 5) = v29;
      v30 = v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v54 = v9[34];
        v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v15, v54);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v54;
        v16 = *((_QWORD *)v9 + 5);
        v17 = *((_QWORD *)v9 + 6);
        v18 = *((_QWORD *)v9 + 7);
        v19 = *((_QWORD *)v9 + 8);
        v55 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v55);
        *((_QWORD *)v8 + 5) = v16;
        *((_QWORD *)v8 + 6) = v17;
        *((_QWORD *)v8 + 7) = v18;
        *((_QWORD *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v55;
        v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v21 = &v8[v20];
        v22 = &v9[v20];
        v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      v31 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v31;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  v32 = a3[5];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = v34[8];
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v34, v36);
  v37 = *(_QWORD *)v33;
  v38 = v33[8];
  *(_QWORD *)v33 = v35;
  v33[8] = v36;
  outlined consume of Environment<Bool>.Content(v37, v38);
  v39 = a3[6];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)v41;
  v43 = v41[8];
  outlined copy of Environment<SceneBridge?>.Content(*(_QWORD *)v41, v43);
  v44 = *(_QWORD *)v40;
  v45 = v40[8];
  *(_QWORD *)v40 = v42;
  v40[8] = v43;
  outlined consume of Environment<AnyShapeStyle?>.Content(v44, v45);
  v46 = a3[7];
  v47 = (char *)a1 + v46;
  v48 = (char *)a2 + v46;
  v49 = *(_QWORD *)v48;
  v50 = v48[8];
  outlined copy of Environment<SceneBridge?>.Content(*(_QWORD *)v48, v50);
  v51 = *(_QWORD *)v47;
  v52 = v47[8];
  *(_QWORD *)v47 = v49;
  v47[8] = v50;
  outlined consume of Environment<AnyShapeStyle?>.Content(v51, v52);
  return a1;
}

void closure #2 in InsettableGroupedListBody.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for InsettableGroupedListBody.TableViewRoot();
}

void sub_186E666AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1E0C80A78](a1, a2);
  v16 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v15 - 248) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v15 - 272) = (char *)&a9 - v18;
  type metadata accessor for ViewInputFlagModifier<PreferBaselineAlignedHeaders>(255);
  v19 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v15 - 240) = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v15 - 264) = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v15 - 256) = (char *)&a9 - v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v14 + 16))(v13, v9, v11, v24);
  *(_QWORD *)(v15 - 128) = v10;
  *(_QWORD *)(v15 - 120) = v12;
  v26 = *(_QWORD *)(v15 - 280);
  *(_QWORD *)(v15 - 112) = *(_QWORD *)(v15 - 288);
  *(_QWORD *)(v15 - 104) = v26;
  type metadata accessor for InsettableGroupedListBody();
}

void sub_186E667D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  outlined init with take of SectionInsetMode(v1 + *(int *)(a1 + 52), v3 - 128);
  InsettableGroupedListBody.TableViewRoot.init(selection:insetMode:)(v2);
}

uint64_t sub_186E66808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);

  *(_QWORD *)(v8 - 208) = v1;
  *(_QWORD *)(v8 - 200) = v5;
  *(_QWORD *)(v8 - 192) = v3;
  *(_QWORD *)(v8 - 184) = v7;
  *(_QWORD *)(v8 - 176) = v0;
  v9 = *(_QWORD *)(v8 - 272);
  _VariadicView.Tree.init(_:content:)();
  *(_QWORD *)(v8 - 144) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.TableViewRoot, v4);
  *(_QWORD *)(v8 - 136) = v3;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v6, v8 - 144);
  v11 = lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
  v12 = *(_QWORD *)(v8 - 264);
  View.input<A>(_:)((uint64_t)&type metadata for PreferBaselineAlignedHeaders, v6, (uint64_t)&type metadata for PreferBaselineAlignedHeaders, v10, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 248) + 8))(v9, v6);
  *(_QWORD *)(v8 - 160) = v10;
  *(_QWORD *)(v8 - 152) = &protocol witness table for ViewInputFlagModifier<A>;
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v8 - 160);
  v14 = *(_QWORD *)(v8 - 256);
  ((void (*)(uint64_t, uint64_t, uint64_t))static ViewBuilder.buildExpression<A>(_:))(v12, v2, v13);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 240) + 8);
  v15(v12, v2);
  static ViewBuilder.buildBlock<A>(_:)(v14, v2, *(_QWORD *)(v8 - 232));
  return v15(v14, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarPlacement.Role()
{
  Hasher.init(_seed:)();
  ToolbarPlacement.Role.hash(into:)();
  return Hasher._finalize()();
}

uint64_t closure #1 in AppGraph.instantiateOutputs()(uint64_t a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  void (*v17)(unint64_t *);
  unint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_DWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 96);
  v6 = *(_DWORD *)(a1 + 100);
  v8 = *(_DWORD *)(a1 + 104);
  v7 = *(_DWORD *)(a1 + 108);
  v9 = *(_QWORD *)(a1 + 112);
  v25 = *(_QWORD *)(a1 + 16);
  v26 = *(_OWORD *)(a1 + 24);
  v30 = HIDWORD(v2);
  v31 = v3;
  v32 = v4;
  v33 = v5;
  v34 = v6;
  v35 = v8;
  v36 = v7;
  v37 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  GraphHost.Data.$hostPreferenceKeys.getter();
  PreferencesInputs.init(hostKeys:)();
  v10 = v25;
  v11 = v26;
  v25 = v2;
  LODWORD(v26) = v3;
  *((_QWORD *)&v26 + 1) = v4;
  *(_QWORD *)&v27 = __PAIR64__(v6, v5);
  *((_QWORD *)&v27 + 1) = __PAIR64__(v7, v8);
  *(_QWORD *)&v28 = v9;
  *((_QWORD *)&v28 + 1) = v10;
  v29 = v11;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = v12;
  v21 = v13;
  v22 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)&v23 = v14;
  v15 = _GraphInputs.environment.getter();
  v16 = *(_DWORD *)(a1 + 220);
  v19 = __PAIR64__(*(_DWORD *)(a1 + 200), v15);
  v20 = v16;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironment and conformance RootEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<HostPreferencesKey>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<HostPreferencesKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<SceneList.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<SceneList.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  type metadata accessor for _AnyPreferenceKey<ScrollPhasePreferenceKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<CommandsList.Key>);
  lazy protocol witness table accessor for type _AnyPreferenceKey<CommandsList.Key> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  LODWORD(v19) = *(_DWORD *)(a1 + 212);
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  PropertyList.subscript.setter();
  LODWORD(v19) = *(_DWORD *)(a1 + 216);
  lazy protocol witness table accessor for type FocusStoreInputKey and conformance FocusStoreInputKey();
  PropertyList.subscript.setter();
  v17 = *(void (**)(unint64_t *))(a1 + 176);
  v19 = v2;
  v20 = v3;
  v21 = v4;
  v22 = v27;
  v23 = v28;
  v24 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v17(&v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return swift_release();
}

void UIHostingContentView.updateBackgroundHostIfNeeded(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for UIHostingConfiguration();
}

void sub_186E66D5C(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  UIHostingContentView._configuration.getter();
}

void sub_186E66D90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  void (*v9)(void);

  v6 = *(unsigned __int8 *)(v3 + *(int *)(v2 + 56));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  v7 = *(_QWORD *)((*v4 & *v0) + 0x9C8);
  v8 = *(void **)((char *)v0 + v7);
  if (v6 == 1)
  {
    if (v8)
      UIHostingContentView._configuration.getter();
    UIHostingContentView.makeBackgroundHost()();
  }
  v9 = *(void (**)(void))(v5 - 120);
  if (v8)
  {
    *(_QWORD *)((char *)v0 + v7) = 0;

    if (v9)
      v9();
  }
}

void @objc UIHostingContentView._containerBackgroundView.getter(void *a1)
{
  id v1;

  v1 = a1;
  specialized UIHostingContentView._containerBackgroundView.getter();
}

id sub_186E66EA4(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;

  return v2;
}

void closure #1 in InsettableGroupedListBody.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];

  v13[0] = a5;
  v13[4] = a6;
  v13[3] = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13[2] = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding();
  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11, v12);
  v13[5] = a2;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  type metadata accessor for InsettableGroupedListBody.CollectionViewBody();
}

void sub_186E66F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  *(_QWORD *)(v9 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v4 + 16))(v2, v8, v3, v12);
  *(_QWORD *)(v9 - 120) = v6;
  *(_QWORD *)(v9 - 112) = v5;
  v13 = *(_QWORD *)(v9 - 160);
  *(_QWORD *)(v9 - 104) = v7;
  *(_QWORD *)(v9 - 96) = v13;
  type metadata accessor for InsettableGroupedListBody();
}

void sub_186E67004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  outlined init with take of SectionInsetMode(v2 + *(int *)(a1 + 52), v4 - 120);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 16))(*(_QWORD *)(v4 - 144), v2 + *(int *)(a1 + 56), v1);
  InsettableGroupedListBody.CollectionViewBody.init(selection:insetMode:content:)(v3);
}

uint64_t sub_186E67058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.CollectionViewBody, v0);
  ((void (*)(uint64_t, uint64_t, uint64_t))static ViewBuilder.buildExpression<A>(_:))(v2, v0, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 152) + 8);
  v5(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v3 - 128));
  return v5(v1, v0);
}

void static CollectionViewListUtilities.makeOutputs<A, B>(inputs:coordinator:coordinatorKind:)(__int128 *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  _OWORD v68[2];
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;

  *(_QWORD *)&v63 = a6;
  *((_QWORD *)&v63 + 1) = a7;
  *(_QWORD *)&v62 = a4;
  *((_QWORD *)&v62 + 1) = a5;
  v59 = a3;
  v61 = a2;
  v60 = a8;
  v87 = *MEMORY[0x1E0C80C00];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v49 - v11;
  v13 = (int *)type metadata accessor for BridgedListState(0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (double *)((char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = a1[3];
  v83 = a1[2];
  v84 = v17;
  v85 = a1[4];
  v86 = *((_DWORD *)a1 + 20);
  v18 = a1[1];
  v81 = *a1;
  v82 = v18;
  v66 = v17;
  v67 = DWORD2(v17);
  *(_QWORD *)&v68[0] = v17;
  DWORD2(v68[0]) = DWORD2(v17);
  v19 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v65 = v19;
  if ((v19 & 1) != 0)
  {
    static ScrollGeometry.zero.getter();
    v21 = *((_QWORD *)&v68[0] + 1);
    v20 = *(_QWORD *)&v68[0];
    v23 = *((_QWORD *)&v68[1] + 1);
    v22 = *(_QWORD *)&v68[1];
    v25 = *((_QWORD *)&v69 + 1);
    v24 = v69;
    v26 = v70;
    v27 = v71;
    v28 = v72;
    v29 = v73;
    v30 = v74;
    v31 = v75;
    v32 = v76;
    v33 = v77;
  }
  v50 = v24;
  v51 = v25;
  v52 = v26;
  v53 = v27;
  v54 = v28;
  v55 = v29;
  v56 = v30;
  v57 = v31;
  v58 = v32;
  v64 = v33;
  v34 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v12, 1, 1, v34);
  v35 = static SemanticFeature.isEnabled.getter();
  v36 = 15.0;
  if ((v35 & 1) != 0)
    v36 = 16.0;
  *v16 = v36;
  outlined init with take of BridgedListState.ScrollTarget?((uint64_t)v12, (uint64_t)v16 + v13[5]);
  v37 = (char *)v16 + v13[6];
  *(_QWORD *)v37 = v20;
  *((_QWORD *)v37 + 1) = v21;
  *((_QWORD *)v37 + 2) = v22;
  *((_QWORD *)v37 + 3) = v23;
  v38 = v51;
  *((_QWORD *)v37 + 4) = v50;
  *((_QWORD *)v37 + 5) = v38;
  v39 = v53;
  *((_QWORD *)v37 + 6) = v52;
  *((_QWORD *)v37 + 7) = v39;
  v40 = v55;
  *((_QWORD *)v37 + 8) = v54;
  *((_QWORD *)v37 + 9) = v40;
  v41 = v57;
  *((_QWORD *)v37 + 10) = v56;
  *((_QWORD *)v37 + 11) = v41;
  v42 = v64;
  *((_QWORD *)v37 + 12) = v58;
  *((_QWORD *)v37 + 13) = v42;
  v37[112] = (v65 & 1) == 0;
  *(_DWORD *)((char *)v16 + v13[7]) = 0;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for External<BridgedListState>, type metadata accessor for BridgedListState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<BridgedListState> and conformance External<A>();
  v65 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of BridgedListState((uint64_t)v16);
  v68[0] = v81;
  v68[1] = v82;
  v69 = v83;
  v43 = _GraphInputs.scrollPhaseState.getter();
  LODWORD(v58) = *MEMORY[0x1E0CFED28];
  if (v43 == (_DWORD)v58)
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v78) = v68[0];
    v80 = *(_OWORD *)((char *)v68 + 8);
    v44 = MEMORY[0x1E0CE3390];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E0CE3390], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>, &lazy cache variable for type metadata for External<ScrollPhaseState>, v44);
    v43 = Attribute.init<A>(body:value:flags:update:)();
  }
  LODWORD(v55) = v43;
  LODWORD(v68[0]) = v65;
  swift_unknownObjectWeakInit();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateBridgedState and conformance UpdateBridgedState();
  v45 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of UpdateBridgedState((uint64_t)v68);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  swift_unknownObjectWeakInit();
  outlined init with take of ListScrollViewProvider((uint64_t)&v78, (uint64_t)v68);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UIScrollView?();
  lazy protocol witness table accessor for type ListScrollViewProvider and conformance ListScrollViewProvider();
  v46 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v64) = v46;
  outlined destroy of ListScrollViewProvider((uint64_t)v68);
  v57 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Scrollable> and conformance External<A>();
  v47 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v56) = v47;
  v54 = &v49;
  v78 = v61;
  v79 = v59 & 1;
  *(_QWORD *)&v80 = __PAIR64__(v43, v45);
  DWORD2(v80) = v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v68[0] = v62;
  v68[1] = v63;
  type metadata accessor for ListRepresentable();
}

void sub_186E6761C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 - 32) = a1;
  v1[28] = v6;
  v1[29] = v5;
  v1[30] = v2;
  v1[31] = v3;
  type metadata accessor for MakeRepresentable();
}

void sub_186E67638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v3 - 24) = a1;
  *(_QWORD *)(v3 - 16) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeRepresentable<A, B>, a1);
  v7 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 336, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, v2, a1, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  v9 = v4[16];
  *(_OWORD *)(v1 + 256) = v4[15];
  *(_OWORD *)(v1 + 272) = v9;
  v4[4] = v4[17];
  *(_DWORD *)(v1 + 304) = *(_DWORD *)(v5 - 112);
  v10 = v4[14];
  *(_OWORD *)(v1 + 224) = v4[13];
  *(_OWORD *)(v1 + 240) = v10;
  outlined retain of _ViewInputs(v5 - 192);
  _ViewInputs.scrollable.setter();
  _GraphInputs.scrollPhaseState.setter();
  PreferenceKeys.remove<A>(_:)();
  _GraphValue.init(_:)();
  v11 = *(_DWORD *)(v1 + 232);
  v12 = *(_QWORD *)(v1 + 240);
  v13 = *(_DWORD *)(v1 + 304);
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 224);
  *(_DWORD *)(v1 + 344) = v11;
  *(_QWORD *)(v1 + 352) = v12;
  *(_OWORD *)((char *)v4 + 136) = *(_OWORD *)(v1 + 248);
  *(_OWORD *)((char *)v4 + 152) = *(_OWORD *)(v1 + 264);
  *(_OWORD *)((char *)v4 + 168) = *(_OWORD *)((char *)v4 + 56);
  *(_QWORD *)(v1 + 408) = *(_QWORD *)(v1 + 296);
  *(_DWORD *)(v1 + 416) = v13;
  static View.makeDebuggableView(view:inputs:)();
  AGCreateWeakAttribute();
  AGCreateWeakAttribute();
  AGCreateWeakAttribute();
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 344) = *(_QWORD *)(v1 + 192);
  _ViewOutputs.subscript.getter();
  *(_QWORD *)(v1 + 96) = (unint64_t)AGCreateWeakAttribute() >> 32;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  *(_DWORD *)(swift_allocObject() + 16) = 0;
  v14 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 344) = v14;
  v15 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 360) = v15;
  type metadata accessor for CollectionViewListScrollable();
}

uint64_t sub_186E67848(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  _QWORD *v52;

  *(_QWORD *)(v1 + 360) = a1;
  *(_QWORD *)(v1 + 368) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListScrollable<A, B>, a1);
  v12 = swift_allocObject();
  *(_QWORD *)(v1 + 336) = v12;
  *(_DWORD *)(v12 + 16) = v7;
  *(_DWORD *)(v12 + 20) = v6;
  *(_DWORD *)(v12 + 24) = v8;
  *(_DWORD *)(v12 + 28) = v3;
  *(_DWORD *)(v12 + 32) = v4;
  *(_DWORD *)(v12 + 36) = v5;
  v13 = *(_QWORD *)(v1 + 96);
  *(_DWORD *)(v12 + 40) = v2;
  *(_DWORD *)(v12 + 44) = v13;
  *(_QWORD *)(v12 + 48) = v10;
  AGGraphSetValue();
  __swift_destroy_boxed_opaque_existential_1(v1 + 336);
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 344) = *(_DWORD *)(v1 + 216);
  v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 344) = *(_DWORD *)(v1 + 216);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0 || (v14 & 1) != 0)
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [Scrollable](0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    v15 = Attribute.init<A>(body:value:flags:update:)();
    *(_BYTE *)(v1 + 336) = 0;
    _ViewOutputs.subscript.setter();
    if ((v14 & 1) != 0)
    {
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      v16 = Dictionary.init(minimumCapacity:)();
      *(_BYTE *)(v1 + 336) = 0;
      *(_DWORD *)(v1 + 340) = v15;
      *(_QWORD *)(v1 + 344) = v16;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<UInt32> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      _GraphValue.init(_:)();
      v17 = *(_DWORD *)(v1 + 152);
      v18 = *(_QWORD *)(v1 + 184);
      v19 = *(_QWORD *)(v1 + 192);
      *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 208);
      *(_DWORD *)(v1 + 344) = *(_DWORD *)(v1 + 216);
      swift_bridgeObjectRetain();
      v20 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if ((v20 & 1) != 0)
        specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v17, (__int128 *)(v11 - 192), v18, v19, 0);
      swift_bridgeObjectRelease();
      *(_BYTE *)(v1 + 336) = (v20 & 1) == 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *(_DWORD *)(v1 + 336) = *(_DWORD *)(v1 + 148);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryProvider and conformance ScrollGeometryProvider();
  Attribute.init<A>(body:value:flags:update:)();
  v21 = v9[16];
  v9[9] = v9[15];
  v9[10] = v21;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v22 = v9[14];
  v9[7] = v9[13];
  v9[8] = v22;
  _ViewInputs.position.getter();
  v23 = v9[16];
  v9[9] = v9[15];
  v9[10] = v23;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v24 = v9[14];
  v9[7] = v9[13];
  v9[8] = v24;
  _ViewInputs.transform.getter();
  ScrollGeometryTransformProvider.init(position:transform:)();
  *(_QWORD *)(v1 + 152) = *(_QWORD *)(v1 + 336);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider();
  Attribute.init<A>(body:value:flags:update:)();
  v25 = v9[16];
  v9[9] = v9[15];
  v9[10] = v25;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v26 = v9[14];
  v9[7] = v9[13];
  v9[8] = v26;
  *(_BYTE *)(v1 + 152) = 2;
  *(_BYTE *)(v1 + 183) = 0;
  _ViewInputs.intern<A>(_:id:)();
  ScrollGeometryStateProvider.init(geometry:scrollableAxes:transform:)();
  v27 = *(_DWORD *)(v1 + 344);
  *(_QWORD *)(v1 + 152) = *(_QWORD *)(v1 + 336);
  *(_DWORD *)(v1 + 160) = v27;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  v28 = MEMORY[0x1E0DEAEC8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 344) = *(_DWORD *)(v1 + 216);
  MEMORY[0x1E0C80A78](v29, v30);
  outlined retain of [Text.Modifier](v1 + 208);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v31 = v9[16];
  v9[9] = v9[15];
  v9[10] = v31;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v32 = v9[14];
  v9[7] = v9[13];
  v9[8] = v32;
  _ViewInputs.environment.getter();
  v33 = v9[16];
  v9[9] = v9[15];
  v9[10] = v33;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v34 = v9[14];
  v9[7] = v9[13];
  v9[8] = v34;
  _ViewInputs.size.getter();
  v35 = v9[16];
  v9[9] = v9[15];
  v9[10] = v35;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v36 = v9[14];
  v9[7] = v9[13];
  v9[8] = v36;
  _ViewInputs.position.getter();
  v37 = v9[16];
  v9[9] = v9[15];
  v9[10] = v37;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v38 = v9[14];
  v9[7] = v9[13];
  v9[8] = v38;
  _ViewInputs.transform.getter();
  v39 = v9[16];
  v9[9] = v9[15];
  v9[10] = v39;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v40 = v9[14];
  v9[7] = v9[13];
  v9[8] = v40;
  _ViewInputs.safeAreaInsets.getter();
  ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)();
  v41 = *(_DWORD *)(v1 + 360);
  *(_QWORD *)(v1 + 152) = *(_QWORD *)(v1 + 336);
  *(_OWORD *)(v1 + 160) = *(_OWORD *)((char *)v9 + 120);
  *(_DWORD *)(v1 + 176) = v41;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets();
  v42 = Attribute.init<A>(body:value:flags:update:)();
  v43 = v9[16];
  v9[9] = v9[15];
  v9[10] = v43;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v44 = v9[14];
  v9[7] = v9[13];
  v9[8] = v44;
  v45 = _ViewInputs.position.getter();
  v46 = v9[16];
  v9[9] = v9[15];
  v9[10] = v46;
  v9[11] = v9[17];
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v11 - 112);
  v47 = v9[14];
  v9[7] = v9[13];
  v9[8] = v47;
  v48 = _ViewInputs.size.getter();
  *(_DWORD *)(v1 + 336) = *(_DWORD *)(v1 + 136);
  *(_DWORD *)(v1 + 340) = v45;
  *(_DWORD *)(v1 + 344) = v48;
  *(_DWORD *)(v1 + 348) = v42;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))v28);
  lazy protocol witness table accessor for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider();
  v49 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 344) = *(_DWORD *)(v1 + 216);
  MEMORY[0x1E0C80A78](v49, v50);
  outlined retain of [Text.Modifier](v1 + 208);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v52 = *(_QWORD **)(v1 + 88);
  *v52 = *(_QWORD *)(v1 + 184);
  v52[1] = *(_QWORD *)(v1 + 192);
  return result;
}

void type metadata accessor for CGRect?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for CGRect(255);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a3;
  v7 = a1;
  v11 = specialized UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(a4, v8, v9, v10);

  return v11;
}

uint64_t ShadowRowCollection.count.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 44));
}

uint64_t ListDiffable.rowIDs(forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v12 - v9;
  ListDiffable.sectionIndex(atOffset:)(a1, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 80))(v10, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

void @objc UIHostingContentView.frame.setter(void *a1)
{
  a1;
  UIHostingContentView.frame.setter();
}

void sub_186E68258()
{
  void *v0;

}

void performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(_QWORD *a1, void *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, int *);
  uint64_t v37;
  void (*v38)(char *, int *);
  char *v39;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  id v86;
  uint64_t aBlock;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t (*v91)();
  uint64_t v92;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v7 = v6[12];
  v8 = type metadata accessor for Optional();
  v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  v82 = v8;
  v80 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v81 = (char *)&v74 - v11;
  v84 = *(_QWORD *)(v7 - 8);
  v12 = *(_QWORD *)(v84 + 64);
  MEMORY[0x1E0C80A78](v13, v14);
  v78 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v79 = (char *)&v74 - v17;
  v76 = v6[14];
  v18 = *(_QWORD *)(*(_QWORD *)(v76 + 8) + 8);
  v83 = v7;
  v20 = (int *)type metadata accessor for ListCoreBatchUpdates(0, v7, v18, v19);
  v21 = *((_QWORD *)v20 - 1);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v74 - v23;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], v9);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v74 - v27;
  v77 = v6;
  *((_BYTE *)a1 + v6[26]) = 1;
  LOBYTE(v6) = UICollectionViewListCoordinatorBase.isAnimated.getter();
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = a2;
  *(_QWORD *)(v29 + 24) = a1;
  *(_BYTE *)(v29 + 32) = v6 & 1;
  *(_BYTE *)(v29 + 33) = a3;
  v30 = a2;
  v31 = a1;
  v85 = a3;
  if ((a3 & 1) != 0)
    UICollectionViewListCoordinatorBase.updateEditingState(_:)(v30);
  v86 = v30;
  v32 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v28, 1, 1, v32);
  v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v34 = (uint64_t)v31 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v31) + 0xD8);
  swift_beginAccess();
  outlined assign with take of IndexPath?((uint64_t)v28, v34);
  swift_endAccess();
  v35 = (char *)v31 + *(_QWORD *)((*v33 & *v31) + 0xB0);
  swift_beginAccess();
  v36 = *(void (**)(char *, char *, int *))(v21 + 16);
  v36(v24, v35, v20);
  LOBYTE(v34) = ListCoreBatchUpdates.isEmpty.getter(v20, v37);
  v38 = *(void (**)(char *, int *))(v21 + 8);
  v38(v24, v20);
  if ((v34 & 1) == 0)
  {
    v74 = v12;
    v75 = v29;
    v39 = (char *)v31 + *(_QWORD *)((*v33 & *v31) + 0xC8);
    swift_beginAccess();
    v41 = v80;
    isEscapingClosureAtFileLocation = (uint64_t)v81;
    v42 = v82;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v81, v39, v82);
    v43 = v83;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(isEscapingClosureAtFileLocation, 1, v83) != 1)
    {
LABEL_11:
      v53 = v84;
      v54 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 32);
      v55 = v79;
      v54(v79, isEscapingClosureAtFileLocation, v43);
      v56 = v78;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v78, v55, v43);
      v57 = (*(unsigned __int8 *)(v53 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      v58 = (v74 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
      v59 = (_QWORD *)swift_allocObject();
      v60 = v43;
      v61 = v59;
      v59[2] = v60;
      v62 = v60;
      v63 = v77;
      v64 = v76;
      v59[3] = v77[13];
      v59[4] = v64;
      v59[5] = v63[15];
      v59[6] = v31;
      v65 = v56;
      v66 = v62;
      ((void (*)(char *, char *))v54)((char *)v59 + v57, v65);
      v67 = v86;
      *(_QWORD *)((char *)v61 + v58) = v86;
      v68 = swift_allocObject();
      *(_QWORD *)(v68 + 16) = partial apply for closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      *(_QWORD *)(v68 + 24) = v61;
      v91 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
      v92 = v68;
      v69 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v88 = 1107296256;
      v89 = thunk for @escaping @callee_guaranteed () -> ();
      v90 = &block_descriptor_34;
      v70 = _Block_copy(&aBlock);
      v71 = v67;
      v72 = v31;
      swift_release();
      v91 = (uint64_t (*)())partial apply for closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      v92 = v75;
      aBlock = v69;
      v88 = 1107296256;
      v89 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      v90 = &block_descriptor_37;
      v73 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v71, sel_performBatchUpdates_completion_, v70, v73);
      _Block_release(v73);
      _Block_release(v70);
      swift_release();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v79, v66);
      swift_release();
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(isEscapingClosureAtFileLocation, v42);
    v29 = v75;
  }
  if ((v85 & 1) != 0)
  {
    v36(v24, v35, v20);
    v45 = ListCoreBatchUpdates.isEmpty.getter(v20, v44);
    v38(v24, v20);
    if ((v45 & 1) != 0)
    {
      v91 = (uint64_t (*)())partial apply for closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      v92 = v29;
      aBlock = MEMORY[0x1E0C809B0];
      v88 = 1107296256;
      v89 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      v90 = &block_descriptor_24_1;
      v46 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v86, sel_performBatchUpdates_completion_, 0, v46);
      swift_release();
      _Block_release(v46);
      return;
    }
  }
  v47 = (void *)objc_opt_self();
  v43 = swift_allocObject();
  v48 = v86;
  *(_QWORD *)(v43 + 16) = v86;
  *(_QWORD *)(v43 + 24) = v31;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = partial apply for closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
  *(_QWORD *)(v49 + 24) = v43;
  v91 = partial apply for thunk for @callee_guaranteed () -> ();
  v92 = v49;
  aBlock = MEMORY[0x1E0C809B0];
  v88 = 1107296256;
  v89 = thunk for @escaping @callee_guaranteed () -> ();
  v90 = &block_descriptor_43;
  v50 = _Block_copy(&aBlock);
  v51 = v48;
  v52 = v31;
  swift_retain();
  swift_release();
  objc_msgSend(v47, sel_performWithoutAnimation_, v50);
  swift_release();
  _Block_release(v50);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
}

void closure #1 in LazyPageTabViewStyle.Body.value.getter()
{
  type metadata accessor for _TabViewValue();
}

void sub_186E689E8(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  LazyPageTabViewStyle.Body.base.getter();
}

uint64_t sub_186E68A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v7 = type metadata accessor for TabViewStyleConfiguration.Content(0, v1, v0, v6);
  v8 = ((uint64_t (*)(uint64_t, uint64_t, _UNKNOWN **))static ViewBuilder.buildExpression<A>(_:))(v7, v7, &protocol witness table for TabViewStyleConfiguration<A>.Content);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, v2);
}

uint64_t LazyPageTabView.scrollStateBinding.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Optional();
  v25 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v24 - v5;
  v7 = type metadata accessor for Binding();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v24 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v26, v8, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v6, 1, 1, v2);
    static Binding.constant(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v22, v12, v7);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v22, v7);
    Binding.init<A>(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v22, v7);
  }
}

uint64_t View.presentationCommon(_:onDismiss:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  _BYTE v18[184];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  outlined init with copy of AnyHashable?(a4, (uint64_t)v17);
  v11 = swift_allocObject();
  outlined init with take of Image.Resolved?((uint64_t)v18, v11 + 16, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  *(_QWORD *)(v11 + 200) = a2;
  *(_QWORD *)(v11 + 208) = a3;
  outlined init with take of Image.Resolved?((uint64_t)v17, v11 + 216, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  v17[0] = partial apply for closure #1 in View.presentationCommon(_:onDismiss:id:);
  v17[1] = v11;
  outlined release of Alert?((uint64_t)v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of Alert?);
  outlined copy of AppIntentExecutor?(a2);
  type metadata accessor for AlertTransformModifier<Alert.Presentation.Key>(0, v12, v13, v14);
  MEMORY[0x18D75B4AC](v17, a5, v15, a6);
  return swift_release();
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  uint64_t v18[9];

  outlined init with take of Image.Resolved?(a1, (uint64_t)v18, &lazy cache variable for type metadata for ActionSheet?, (uint64_t)&type metadata for ActionSheet);
  outlined init with copy of AnyHashable?(a4, (uint64_t)v17);
  v11 = swift_allocObject();
  outlined init with take of Image.Resolved?((uint64_t)v18, v11 + 16, &lazy cache variable for type metadata for ActionSheet?, (uint64_t)&type metadata for ActionSheet);
  *(_QWORD *)(v11 + 88) = a2;
  *(_QWORD *)(v11 + 96) = a3;
  outlined init with take of Image.Resolved?((uint64_t)v17, v11 + 104, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  v17[0] = partial apply for closure #1 in View.presentationCommon(_:onDismiss:id:);
  v17[1] = v11;
  outlined retain of ActionSheet?(v18);
  outlined copy of AppIntentExecutor?(a2);
  type metadata accessor for AlertTransformModifier<ActionSheet.Presentation.Key>(0, v12, v13, v14);
  MEMORY[0x18D75B4AC](v17, a5, v15, a6);
  return swift_release();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance PlatformViewChild<A>()
{
  PlatformViewChild.destroy()();
}

Swift::Void __swiftcall PlatformViewChild.destroy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v0;
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Optional();
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v31 - v8;
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v38 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v10, v11);
  v34 = (char *)&v31 - v12;
  v35 = v4;
  v36 = v3;
  v13 = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v31 - v17;
  v19 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v31 - v22;
  v39 = *(_QWORD *)(v1 + 56);
  v40 = *(_QWORD *)(v1 + 64);
  _DynamicPropertyBuffer.destroy()();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v1 + *(int *)(v2 + 80), v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v18, v13);
    PlatformViewChild.representedViewProvider.getter(v2, (uint64_t)v9);
    v25 = v37;
    v24 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v9, 1, v38) == 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v13);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
    }
    else
    {
      v26 = v34;
      v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v34, v9, v24);
      v29 = MEMORY[0x1E0C80A78](v27, v28);
      v30 = v36;
      *(&v31 - 4) = v35;
      *(&v31 - 3) = v30;
      *(&v31 - 2) = (uint64_t)v26;
      *(&v31 - 1) = (uint64_t)v23;
      MEMORY[0x18D75B938](partial apply for closure #1 in PlatformViewChild.destroy(), v29);
      PlatformViewChild.reset()(v2);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v13);
    }
  }
  PreferenceBridge.invalidate()();
}

uint64_t protocol witness for static PlatformViewRepresentable.dismantleViewProvider(_:coordinator:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static PlatformViewControllerRepresentableAdaptor.dismantleViewProvider(_:coordinator:)(*a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static PlatformViewControllerRepresentableAdaptor.dismantleViewProvider(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

void PlatformViewChild.reset()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;

  v3 = v1 + *(int *)(a1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v3, 1, 1, AssociatedTypeWitness);
  v6 = *(int *)(a1 + 84);

  *(_QWORD *)(v1 + v6) = 0;
}

void UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  void *v18;
  id v19;
  id v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  _OWORD v25[2];
  _BYTE v26[40];
  _BYTE v27[32];
  char v28;

  outlined init with take of UIEdgeInsets?(a1, (uint64_t)v25);
  v23 = (float64x2_t)v25[0];
  v24 = (float64x2_t)v25[1];
  if ((*(_BYTE *)(v4 + 48) & 1) != 0)
  {
    outlined init with take of UIEdgeInsets?(a1, (uint64_t)v27);
    if ((v28 & 1) != 0)
      return;
  }
  else
  {
    v21 = *(float64x2_t *)(v4 + 32);
    v22 = *(float64x2_t *)(v4 + 16);
    outlined init with take of UIEdgeInsets?(a1, (uint64_t)v27);
    if (v28 != 1
      && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v22, v23), (int32x4_t)vceqq_f64(v21, v24))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
    {
      return;
    }
  }
  v8 = (*(double (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  outlined init with take of UIEdgeInsets?(a1, (uint64_t)v26);
  if ((v26[32] & 1) == 0
    && (v8 == v23.f64[0] ? (v15 = v10 == v23.f64[1]) : (v15 = 0),
        v15 ? (v16 = v12 == v24.f64[0]) : (v16 = 0),
        v16 ? (v17 = v14 == v24.f64[1]) : (v17 = 0),
        v17))
  {
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_BYTE *)(v4 + 48) = 1;
  }
  else
  {
    outlined init with take of UIEdgeInsets?(a1, v4 + 16);
    v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    v19 = objc_msgSend(v18, sel_superview);

    if (v19)
    {
      v20 = objc_msgSend(v19, sel_layer);

      objc_msgSend(v20, sel_setNeedsLayout);
    }
  }
}

uint64_t outlined init with take of UIEdgeInsets?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIEdgeInsets?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ResolvedScrollBehaviorModifier.TrackedEnvironment.updateValue()()
{
  char v0;
  char v1;
  uint64_t result;
  char v3;

  AGGraphGetValue();
  v1 = v0;
  result = AGGraphGetOutputValue();
  if (result)
  {
    if ((v1 & 1) == 0)
      return result;
    swift_retain();
    swift_retain_n();
    v3 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
    if ((v3 & 1) == 0)
    {
      swift_release();
      return swift_release();
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  PropertyList.Tracker.reset()();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.isEnabled : EnvironmentValues()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplaying:forItemAt:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v16;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  v13 = a4;
  v14 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplaying:forItemAt:)();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t type metadata completion function for ToolbarStorage.Entry.Kind()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ToolbarStorage.Item(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ToolbarStorage.GroupItem(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void static UIViewRepresentable._makeView(view:inputs:)(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;

  v7 = *a1;
  v8 = *((_DWORD *)a1 + 2);
  v9 = a1[2];
  v10 = a1[3];
  v11 = a1[4];
  v20 = *(_OWORD *)(a1 + 5);
  v12 = a1[7];
  v13 = a1[8];
  v14 = a1[9];
  v15 = *((_DWORD *)a1 + 20);
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v17 = type metadata accessor for PlatformViewRepresentableAdaptor(0, a2, a3, v16);
    type metadata accessor for _GraphValue();
    _GraphValue.unsafeBitCast<A>(to:)();
    v21 = v7;
    LODWORD(v22) = v8;
    v23 = v9;
    v24 = v10;
    v25 = v11;
    v26 = v20;
    v27 = v12;
    v28 = v13;
    v29 = v14;
    v30 = v15;
    v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformViewRepresentableAdaptor<A>, v17);
    static PlatformViewRepresentable._makeView(view:inputs:)(&v31, (uint64_t)&v21, v17, v18, a4);
  }
}

uint64_t type metadata accessor for PlatformViewRepresentableAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewRepresentableAdaptor);
}

uint64_t assignWithCopy for ToolbarButtonStyle(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1);
    if ((*((_BYTE *)a2 + 41) & 1) != 0)
    {
      if (*((_BYTE *)a2 + 40) == 1)
      {
        v4 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v4;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 1;
      }
      else
      {
        v5 = *a2;
        v6 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v5;
        *(_OWORD *)(a1 + 16) = v6;
      }
      *(_BYTE *)(a1 + 41) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 41) = 0;
      swift_retain();
    }
  }
  v7 = *((_QWORD *)a2 + 6);
  v8 = *((_BYTE *)a2 + 56);
  outlined copy of Environment<Bool>.Content(v7, v8);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *((_QWORD *)a2 + 8);
  v12 = *((_BYTE *)a2 + 72);
  outlined copy of Environment<Bool>.Content(v11, v12);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  return a1;
}

void InsettableGroupedListBody.body.getter()
{
  type metadata accessor for InsettableGroupedListBody.CollectionViewBody();
}

void sub_186E69984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 120) = v2;
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = v1;
  *(_QWORD *)(v4 - 96) = v0;
  type metadata accessor for InsettableGroupedListBody.TableViewRoot();
}

void sub_186E6999C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)(v2 - 320) = a1;
  *(_QWORD *)(v2 - 328) = type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<PreferBaselineAlignedHeaders>(255);
  v3 = type metadata accessor for ModifiedContent();
  v4 = lazy protocol witness table accessor for type CollectionViewGroupedListsEnabled and conformance CollectionViewGroupedListsEnabled();
  *(_QWORD *)(v2 - 312) = v4;
  *(_QWORD *)(v2 - 120) = &unk_1E1B027B0;
  *(_QWORD *)(v2 - 112) = v1;
  *(_QWORD *)(v2 - 104) = v3;
  *(_QWORD *)(v2 - 96) = v4;
  type metadata accessor for StaticIf();
}

void sub_186E69A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;

  *(_QWORD *)(v9 - 304) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v9 - 208) = v7;
  *(_QWORD *)(v9 - 200) = v8;
  *(_QWORD *)(v9 - 192) = v5;
  *(_QWORD *)(v9 - 184) = v2;
  *(_QWORD *)(v9 - 176) = v3;
  *(_QWORD *)(v9 - 272) = v7;
  *(_QWORD *)(v9 - 264) = v8;
  *(_QWORD *)(v9 - 256) = v5;
  *(_QWORD *)(v9 - 248) = v2;
  *(_QWORD *)(v9 - 240) = v3;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.CollectionViewBody, v6, v12);
  *(_QWORD *)(v9 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsettableGroupedListBody<A, B>.TableViewRoot, *(_QWORD *)(v9 - 320));
  *(_QWORD *)(v9 - 128) = v5;
  *(_QWORD *)(v9 - 152) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], *(_QWORD *)(v9 - 328), v9 - 136);
  *(_QWORD *)(v9 - 144) = &protocol witness table for ViewInputFlagModifier<A>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v9 - 152);
  StaticIf<>.init(_:then:else:)((uint64_t)&unk_1E1B027B0, (void (*)(void))partial apply for closure #1 in InsettableGroupedListBody.body.getter);
}

uint64_t sub_186E69B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 168) = v1;
  *(_QWORD *)(v5 - 160) = v0;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v2, v5 - 168);
  ((void (*)(uint64_t, uint64_t, uint64_t))static ViewBuilder.buildExpression<A>(_:))(v4, v2, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 304) + 8);
  v7(v4, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, *(_QWORD *)(v5 - 296));
  return v7(v3, v2);
}

uint64_t View.allowsHitTesting(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _AllowsHitTestingModifier, a3);
}

uint64_t View.accessibilityIgnoresInvertColors(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier, a3);
}

BOOL BarAppearanceBridge.uiHasStatusBarOpinion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  char v10;
  _OWORD v11[2];
  uint64_t v12;

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  v3 = *v2;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v11);
    return 0;
  }
  v6 = *(_QWORD *)(v3 + 56) + 80 * v4;
  v7 = *(unsigned __int8 *)(v6 + 57);
  v8 = *(unsigned __int8 *)(v6 + 58);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v11);
  if (v7 == 2)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v11[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
    EnvironmentValues.explicitPreferredColorScheme.getter();
    swift_release();
    swift_release();
    swift_release();
    if (v10 == 2)
      return 1;
  }
  return v8 != 0;
}

uint64_t BarEnvironmentViewModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI23BarEnvironmentViewModel__visibility;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Published<Visibility>, (uint64_t)&type metadata for Visibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC7SwiftUI23BarEnvironmentViewModel__colorScheme;
  type metadata accessor for Published<ColorScheme?>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

UISplitViewControllerColumn_optional __swiftcall UISplitViewController.column(forViewController:)(UIViewController *forViewController)
{
  void *v1;
  id v3;
  void *v4;
  UIViewController *v5;
  id v7;
  void *v8;
  UIViewController *v9;
  Swift::Bool v10;
  UISplitViewControllerColumn v11;
  id v12;
  void *v13;
  UIViewController *v14;
  id v15;
  void *v16;
  UIViewController *v17;
  id v18;
  char v19;
  UISplitViewControllerColumn_optional result;

  if (objc_msgSend(v1, sel_style))
  {
    v3 = objc_msgSend(v1, sel_viewControllerForColumn_, 0);
    if (v3)
    {
      v4 = v3;
      objc_opt_self();
      v5 = (UIViewController *)swift_dynamicCastObjCClass();

      if (v5 && v5 == forViewController)
      {
        v11 = UISplitViewControllerColumnPrimary;
        v10 = 0;
        goto LABEL_25;
      }
    }
  }
  if (objc_msgSend(v1, sel_style)
    && (v7 = objc_msgSend(v1, sel_viewControllerForColumn_, 2)) != 0
    && (v8 = v7, objc_opt_self(), v9 = (UIViewController *)swift_dynamicCastObjCClass(), v8, v9)
    && v9 == forViewController)
  {
    v10 = 0;
    v11 = UISplitViewControllerColumnSecondary;
  }
  else
  {
    if (!objc_msgSend(v1, sel_style)
      || (v12 = objc_msgSend(v1, sel_viewControllerForColumn_, 1)) == 0
      || (v13 = v12, objc_opt_self(), v14 = (UIViewController *)swift_dynamicCastObjCClass(), v13, !v14)
      || v14 != forViewController)
    {
      if (objc_msgSend(v1, sel_style))
      {
        v15 = objc_msgSend(v1, sel_viewControllerForColumn_, 3);
        if (v15)
        {
          v16 = v15;
          objc_opt_self();
          if (swift_dynamicCastObjCClass())
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            v17 = forViewController;
            v18 = v16;
            v19 = static NSObject.== infix(_:_:)();

            if ((v19 & 1) != 0)
            {
              v10 = 0;
              v11 = UISplitViewControllerColumnCompact;
              goto LABEL_25;
            }
          }
          else
          {

          }
        }
      }
      v11 = UISplitViewControllerColumnPrimary;
      v10 = 1;
      goto LABEL_25;
    }
    v10 = 0;
    v11 = UISplitViewControllerColumnSupplementary;
  }
LABEL_25:
  result.value = v11;
  result.is_nil = v10;
  return result;
}

uint64_t key path setter for EnvironmentValues.canCollapseSections : EnvironmentValues()
{
  return EnvironmentValues.canCollapseSections.setter();
}

uint64_t EnvironmentValues.canCollapseSections.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t closure #1 in static PointerOffset.of(_:)partial apply@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)partial apply(a1, a2);
}

{
  return partial apply for closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_17(a1, a2);
}

{
  type metadata accessor for ProgressViewValue(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for Binding<Bool>?();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6(a1, a2);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for TokenFieldConfiguration(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_9(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)partial apply(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_18(a1, a2);
}

{
  type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t UIHostingController.rootView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  specialized UIHostingController.rootView.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

uint64_t InsettableGroupedListBody.CollectionViewBody.effectiveListPadding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  _OWORD v6[4];
  __int16 v7;

  v3 = *(_OWORD *)(v1 + 80);
  v6[2] = *(_OWORD *)(v1 + 64);
  v6[3] = v3;
  v7 = *(_WORD *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 48);
  v6[0] = *(_OWORD *)(v1 + 32);
  v6[1] = v4;
  outlined retain of Environment<ListPadding>((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter(a1);
  return outlined retain of Environment<ListPadding>((uint64_t)v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined consume of Environment<ListPadding>.Content);
}

uint64_t outlined retain of Environment<ListPadding>(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_WORD *)(a1 + 64));
  return a1;
}

void specialized Environment.wrappedValue.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(v1 + 65) == 1)
  {
    v3 = *(_BYTE *)(v1 + 64);
    v4 = *(_QWORD *)(v1 + 56);
    v5 = *(_DWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 40);
    v7 = *(_DWORD *)(v1 + 32);
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(_DWORD *)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 8);
    *(_BYTE *)a1 = *(_QWORD *)v1;
    *(_QWORD *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 16) = v9 & 1;
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = v7 & 1;
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = v5 & 1;
    *(_QWORD *)(a1 + 56) = v4;
    *(_BYTE *)(a1 + 64) = v3 & 1;
  }
  else
  {
    outlined retain of Environment<ListPadding>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined copy of Environment<ListPadding>.Content);
    v11 = static os_log_type_t.fault.getter();
    v12 = static Log.runtimeIssuesLog.getter();
    v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v16 = v15;
      *(_DWORD *)v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x646461507473694CLL, 0xEB00000000676E69, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v15, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of Environment<ListPadding>(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined consume of Environment<ListPadding>.Content);
    swift_release();
    swift_release();
  }
}

uint64_t key path getter for EnvironmentValues.sceneSession : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.sceneSession.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.sceneSession.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[16];

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1E1ABCAC8, (uint64_t)&protocol witness table for SceneSessionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1E1ABCAC8, (uint64_t)&protocol witness table for SceneSessionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((v3[8] & 1) != 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UISceneSession>?);
    return 0;
  }
  else
  {
    v1 = MEMORY[0x18D760234](v3);
    outlined destroy of WeakBox<UISceneSession>((uint64_t)v3);
  }
  return v1;
}

uint64_t outlined destroy of WeakBox<UISceneSession>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for WeakBox<UISceneSession>, &lazy cache variable for type metadata for UISceneSession, 0x1E0DC3BF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.task(priority:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v10 = type metadata accessor for _TaskModifier(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (char *)v13 + *(int *)(v14 + 20);
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a1, v16);
  *v13 = a2;
  v13[1] = a3;
  swift_retain();
  MEMORY[0x18D75B4AC](v13, a4, v10, a5);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for _TaskModifier);
}

void @objc UIHostingController.__ivar_destroyer(uint64_t a1)
{

  outlined destroy of HostingControllerOverrides(a1 + direct field offset for UIHostingController.overrides);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

}

uint64_t @objc SheetBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(a1 + direct field offset for SheetBridge.interactiveDismissHandler));
  outlined destroy of PresentationState(a1 + direct field offset for SheetBridge.presentationState);
  swift_unknownObjectWeakDestroy();
  swift_release();
  return swift_release();
}

void @objc SheetBridge.__deallocating_deinit(void *a1)
{
  id v1;

  v1 = a1;
  SheetBridge.__deallocating_deinit();
}

void SheetBridge.__deallocating_deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  char v7;
  __int128 v8;
  _OWORD v9[15];

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  if ((*((_BYTE *)v0 + direct field offset for SheetBridge.hasWindow) & 1) == 0)
  {
    v3 = (uint64_t)v0 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v3, (uint64_t)v9);
    PresentationState.Base.presentedVC.getter();
    v5 = v4;
    outlined destroy of PresentationState((uint64_t)v9);
    if (v5)
    {
      v6 = objc_msgSend(v5, sel_presentingViewController);
      if (!v6)
        v6 = v5;
      static Transaction.current.getter();
      v7 = Transaction.disablesAnimations.getter();
      swift_release();
      objc_msgSend(v6, sel_dismissViewControllerAnimated_completion_, (v7 & 1) == 0, 0);

    }
  }
  v8 = *(_OWORD *)((v2 & v1) + 0x60);
  v9[0] = *(_OWORD *)((v2 & v1) + 0x50);
  v9[1] = v8;
  type metadata accessor for SheetBridge();
}

id sub_186E6A9CC(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  void *v54;
  objc_super v56;

  v56.receiver = v54;
  v56.super_class = a1;
  return -[objc_class dealloc](&v56, sel_dealloc);
}

uint64_t outlined destroy of PresentationState(uint64_t a1)
{
  destroy for PresentationState(a1);
  return a1;
}

void destroy for PresentationState(uint64_t a1)
{
  id v2;

  switch(*(_BYTE *)(a1 + 233))
  {
    case 0:
    case 1:
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      swift_release();
      swift_release();
      swift_release();
      v2 = *(id *)(a1 + 112);
      goto LABEL_18;
    case 2:
    case 3:
    case 5:

      swift_release();
      if (*(_QWORD *)(a1 + 16))
        swift_release();
      if (*(_QWORD *)(a1 + 64))
        __swift_destroy_boxed_opaque_existential_1(a1 + 40);
      goto LABEL_27;
    case 4:
    case 6:
    case 9:
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      goto LABEL_27;
    case 7:
      v2 = *(id *)a1;
LABEL_18:

      return;
    case 8:
      swift_release();
      if (*(_QWORD *)(a1 + 8))
        swift_release();
      if (*(_QWORD *)(a1 + 56))
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      if (*(_QWORD *)(a1 + 136))
        swift_release();
      if (*(_QWORD *)(a1 + 184))
        __swift_destroy_boxed_opaque_existential_1(a1 + 160);
LABEL_27:
      swift_release();
      swift_release();
      swift_release();
      break;
    default:
      return;
  }
}

uint64_t outlined init with copy of PresentationState(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PresentationState(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for PresentationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  void *v87;
  __int128 v88;
  uint64_t v89;
  id v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _OWORD *v110;
  _OWORD *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;

  switch(*(_BYTE *)(a2 + 233))
  {
    case 0:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v5 = (_OWORD *)(a2 + 8);
      v4 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v4)
      {
        v6 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v4;
        *(_QWORD *)(a1 + 16) = v6;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v5;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v49 = (_OWORD *)(a1 + 32);
      v50 = (_OWORD *)(a2 + 32);
      v51 = *(_QWORD *)(a2 + 56);
      if (v51)
      {
        v52 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v51;
        *(_QWORD *)(a1 + 64) = v52;
        (**(void (***)(_OWORD *, _OWORD *))(v51 - 8))(v49, v50);
      }
      else
      {
        v85 = *(_OWORD *)(a2 + 48);
        *v49 = *v50;
        *(_OWORD *)(a1 + 48) = v85;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v86 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v86;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v87 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v87;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 233) = 0;
      goto LABEL_53;
    case 1:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v15 = (_OWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v14)
      {
        v16 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = v16;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v15;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v53 = (_OWORD *)(a1 + 32);
      v54 = (_OWORD *)(a2 + 32);
      v55 = *(_QWORD *)(a2 + 56);
      if (v55)
      {
        v56 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v55;
        *(_QWORD *)(a1 + 64) = v56;
        (**(void (***)(_OWORD *, _OWORD *))(v55 - 8))(v53, v54);
      }
      else
      {
        v88 = *(_OWORD *)(a2 + 48);
        *v53 = *v54;
        *(_OWORD *)(a1 + 48) = v88;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v89 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v89;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v87 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v87;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 233) = 1;
LABEL_53:
      swift_retain();
      swift_retain();
      swift_retain();
      v90 = v87;
      return a1;
    case 2:
      v17 = *(void **)a2;
      v18 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v18;
      v20 = (_OWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 16);
      v21 = v17;
      swift_retain();
      if (v19)
      {
        v22 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v19;
        *(_QWORD *)(a1 + 24) = v22;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v20;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v57 = (_OWORD *)(a1 + 40);
      v58 = (_OWORD *)(a2 + 40);
      v59 = *(_QWORD *)(a2 + 64);
      if (v59)
      {
        v60 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v59;
        *(_QWORD *)(a1 + 72) = v60;
        (**(void (***)(_OWORD *, _OWORD *))(v59 - 8))(v57, v58);
      }
      else
      {
        v91 = *(_OWORD *)(a2 + 56);
        *v57 = *v58;
        *(_OWORD *)(a1 + 56) = v91;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      v92 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v92;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v93 = 2;
      goto LABEL_74;
    case 3:
      v23 = *(void **)a2;
      v24 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v24;
      v26 = (_OWORD *)(a2 + 16);
      v25 = *(_QWORD *)(a2 + 16);
      v27 = v23;
      swift_retain();
      if (v25)
      {
        v28 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v25;
        *(_QWORD *)(a1 + 24) = v28;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v26;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v61 = (_OWORD *)(a1 + 40);
      v62 = (_OWORD *)(a2 + 40);
      v63 = *(_QWORD *)(a2 + 64);
      if (v63)
      {
        v64 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v63;
        *(_QWORD *)(a1 + 72) = v64;
        (**(void (***)(_OWORD *, _OWORD *))(v63 - 8))(v61, v62);
      }
      else
      {
        v94 = *(_OWORD *)(a2 + 56);
        *v61 = *v62;
        *(_OWORD *)(a1 + 56) = v94;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      v95 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v95;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v93 = 3;
      goto LABEL_74;
    case 4:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v30 = (_OWORD *)(a2 + 8);
      v29 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v29)
      {
        v31 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v29;
        *(_QWORD *)(a1 + 16) = v31;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v30;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v65 = (_OWORD *)(a1 + 32);
      v66 = (_OWORD *)(a2 + 32);
      v67 = *(_QWORD *)(a2 + 56);
      if (v67)
      {
        v68 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v67;
        *(_QWORD *)(a1 + 64) = v68;
        (**(void (***)(_OWORD *, _OWORD *))(v67 - 8))(v65, v66);
      }
      else
      {
        v96 = *(_OWORD *)(a2 + 48);
        *v65 = *v66;
        *(_OWORD *)(a1 + 48) = v96;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v97 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v97;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v93 = 4;
      goto LABEL_74;
    case 5:
      v32 = *(void **)a2;
      v33 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v33;
      v35 = (_OWORD *)(a2 + 16);
      v34 = *(_QWORD *)(a2 + 16);
      v36 = v32;
      swift_retain();
      if (v34)
      {
        v37 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v34;
        *(_QWORD *)(a1 + 24) = v37;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v35;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v69 = (_OWORD *)(a1 + 40);
      v70 = (_OWORD *)(a2 + 40);
      v71 = *(_QWORD *)(a2 + 64);
      if (v71)
      {
        v72 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v71;
        *(_QWORD *)(a1 + 72) = v72;
        (**(void (***)(_OWORD *, _OWORD *))(v71 - 8))(v69, v70);
      }
      else
      {
        v98 = *(_OWORD *)(a2 + 56);
        *v69 = *v70;
        *(_OWORD *)(a1 + 56) = v98;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      v99 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v99;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v93 = 5;
      goto LABEL_74;
    case 6:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v39 = (_OWORD *)(a2 + 8);
      v38 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v38)
      {
        v40 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v38;
        *(_QWORD *)(a1 + 16) = v40;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v39;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v73 = (_OWORD *)(a1 + 32);
      v74 = (_OWORD *)(a2 + 32);
      v75 = *(_QWORD *)(a2 + 56);
      if (v75)
      {
        v76 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v75;
        *(_QWORD *)(a1 + 64) = v76;
        (**(void (***)(_OWORD *, _OWORD *))(v75 - 8))(v73, v74);
      }
      else
      {
        v100 = *(_OWORD *)(a2 + 48);
        *v73 = *v74;
        *(_OWORD *)(a1 + 48) = v100;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v101 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v101;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v93 = 6;
      goto LABEL_74;
    case 7:
      v41 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 233) = 7;
      v42 = v41;
      return a1;
    case 8:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v44 = (_OWORD *)(a2 + 8);
      v43 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v43)
      {
        v45 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v43;
        *(_QWORD *)(a1 + 16) = v45;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v44;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v77 = (_OWORD *)(a1 + 32);
      v78 = (_OWORD *)(a2 + 32);
      v79 = *(_QWORD *)(a2 + 56);
      if (v79)
      {
        v80 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v79;
        *(_QWORD *)(a1 + 64) = v80;
        (**(void (***)(_OWORD *, _OWORD *))(v79 - 8))(v77, v78);
      }
      else
      {
        v102 = *(_OWORD *)(a2 + 48);
        *v77 = *v78;
        *(_OWORD *)(a1 + 48) = v102;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      v103 = *(_QWORD *)(a2 + 136);
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v104 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v104;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v105 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v105;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_retain();
      swift_retain();
      swift_retain();
      v106 = v105;
      swift_retain();
      if (v103)
      {
        v107 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 136) = v103;
        *(_QWORD *)(a1 + 144) = v107;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      }
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v110 = (_OWORD *)(a1 + 160);
      v111 = (_OWORD *)(a2 + 160);
      v112 = *(_QWORD *)(a2 + 184);
      if (v112)
      {
        v113 = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 184) = v112;
        *(_QWORD *)(a1 + 192) = v113;
        (**(void (***)(_OWORD *, _OWORD *))(v112 - 8))(v110, v111);
      }
      else
      {
        v114 = *(_OWORD *)(a2 + 176);
        *v110 = *v111;
        *(_OWORD *)(a1 + 176) = v114;
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      }
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      v115 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v115;
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      v93 = 8;
      goto LABEL_74;
    case 9:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v47 = (_OWORD *)(a2 + 8);
      v46 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v46)
      {
        v48 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v46;
        *(_QWORD *)(a1 + 16) = v48;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v47;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v81 = (_OWORD *)(a1 + 32);
      v82 = (_OWORD *)(a2 + 32);
      v83 = *(_QWORD *)(a2 + 56);
      if (v83)
      {
        v84 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v83;
        *(_QWORD *)(a1 + 64) = v84;
        (**(void (***)(_OWORD *, _OWORD *))(v83 - 8))(v81, v82);
      }
      else
      {
        v108 = *(_OWORD *)(a2 + 48);
        *v81 = *v82;
        *(_OWORD *)(a1 + 48) = v108;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v109 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v109;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v93 = 9;
LABEL_74:
      *(_BYTE *)(a1 + 233) = v93;
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    default:
      v7 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v7;
      *(_OWORD *)(a1 + 218) = *(_OWORD *)(a2 + 218);
      v8 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v8;
      v9 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v9;
      v10 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v10;
      v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v13;
      break;
  }
  return a1;
}

void PresentationState.Base.presentedVC.getter()
{
  uint64_t v0;
  _BYTE v1[248];

  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_186E6B3B8()
{
  uint64_t v1;
  uint64_t v2;

  outlined destroy of SheetPreference((uint64_t)&v2);
  return v1;
}

uint64_t outlined init with copy of PresentationState.Base(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PresentationState.Base(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for PresentationState.Base(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  _OWORD *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  uint64_t v90;
  id v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  id v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;

  v4 = *(unsigned __int8 *)(a2 + 233);
  if (v4 >= 0xA)
    v4 = *(_DWORD *)a2 + 10;
  switch(v4)
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = (_OWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v5)
      {
        v7 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v5;
        *(_QWORD *)(a1 + 16) = v7;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v6;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v50 = (_OWORD *)(a1 + 32);
      v51 = (_OWORD *)(a2 + 32);
      v52 = *(_QWORD *)(a2 + 56);
      if (v52)
      {
        v53 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v52;
        *(_QWORD *)(a1 + 64) = v53;
        (**(void (***)(_OWORD *, _OWORD *))(v52 - 8))(v50, v51);
      }
      else
      {
        v86 = *(_OWORD *)(a2 + 48);
        *v50 = *v51;
        *(_OWORD *)(a1 + 48) = v86;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v87 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v87;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v88 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v88;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 233) = 0;
      goto LABEL_55;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v16 = (_OWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v15)
      {
        v17 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v17;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v16;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v54 = (_OWORD *)(a1 + 32);
      v55 = (_OWORD *)(a2 + 32);
      v56 = *(_QWORD *)(a2 + 56);
      if (v56)
      {
        v57 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v56;
        *(_QWORD *)(a1 + 64) = v57;
        (**(void (***)(_OWORD *, _OWORD *))(v56 - 8))(v54, v55);
      }
      else
      {
        v89 = *(_OWORD *)(a2 + 48);
        *v54 = *v55;
        *(_OWORD *)(a1 + 48) = v89;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v90 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v90;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v88 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v88;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 233) = 1;
LABEL_55:
      swift_retain();
      swift_retain();
      swift_retain();
      v91 = v88;
      return a1;
    case 2u:
      v18 = *(void **)a2;
      v19 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v19;
      v21 = (_OWORD *)(a2 + 16);
      v20 = *(_QWORD *)(a2 + 16);
      v22 = v18;
      swift_retain();
      if (v20)
      {
        v23 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 24) = v23;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v21;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v58 = (_OWORD *)(a1 + 40);
      v59 = (_OWORD *)(a2 + 40);
      v60 = *(_QWORD *)(a2 + 64);
      if (v60)
      {
        v61 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v60;
        *(_QWORD *)(a1 + 72) = v61;
        (**(void (***)(_OWORD *, _OWORD *))(v60 - 8))(v58, v59);
      }
      else
      {
        v92 = *(_OWORD *)(a2 + 56);
        *v58 = *v59;
        *(_OWORD *)(a1 + 56) = v92;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      v93 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v93;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v94 = 2;
      goto LABEL_76;
    case 3u:
      v24 = *(void **)a2;
      v25 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v25;
      v27 = (_OWORD *)(a2 + 16);
      v26 = *(_QWORD *)(a2 + 16);
      v28 = v24;
      swift_retain();
      if (v26)
      {
        v29 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 24) = v29;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v27;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v62 = (_OWORD *)(a1 + 40);
      v63 = (_OWORD *)(a2 + 40);
      v64 = *(_QWORD *)(a2 + 64);
      if (v64)
      {
        v65 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v64;
        *(_QWORD *)(a1 + 72) = v65;
        (**(void (***)(_OWORD *, _OWORD *))(v64 - 8))(v62, v63);
      }
      else
      {
        v95 = *(_OWORD *)(a2 + 56);
        *v62 = *v63;
        *(_OWORD *)(a1 + 56) = v95;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      v96 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v96;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v94 = 3;
      goto LABEL_76;
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v31 = (_OWORD *)(a2 + 8);
      v30 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v30)
      {
        v32 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v30;
        *(_QWORD *)(a1 + 16) = v32;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v31;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v66 = (_OWORD *)(a1 + 32);
      v67 = (_OWORD *)(a2 + 32);
      v68 = *(_QWORD *)(a2 + 56);
      if (v68)
      {
        v69 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v68;
        *(_QWORD *)(a1 + 64) = v69;
        (**(void (***)(_OWORD *, _OWORD *))(v68 - 8))(v66, v67);
      }
      else
      {
        v97 = *(_OWORD *)(a2 + 48);
        *v66 = *v67;
        *(_OWORD *)(a1 + 48) = v97;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v98 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v98;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v94 = 4;
      goto LABEL_76;
    case 5u:
      v33 = *(void **)a2;
      v34 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v34;
      v36 = (_OWORD *)(a2 + 16);
      v35 = *(_QWORD *)(a2 + 16);
      v37 = v33;
      swift_retain();
      if (v35)
      {
        v38 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a1 + 16) = v35;
        *(_QWORD *)(a1 + 24) = v38;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v36;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v70 = (_OWORD *)(a1 + 40);
      v71 = (_OWORD *)(a2 + 40);
      v72 = *(_QWORD *)(a2 + 64);
      if (v72)
      {
        v73 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a1 + 64) = v72;
        *(_QWORD *)(a1 + 72) = v73;
        (**(void (***)(_OWORD *, _OWORD *))(v72 - 8))(v70, v71);
      }
      else
      {
        v99 = *(_OWORD *)(a2 + 56);
        *v70 = *v71;
        *(_OWORD *)(a1 + 56) = v99;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      v100 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v100;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v94 = 5;
      goto LABEL_76;
    case 6u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v40 = (_OWORD *)(a2 + 8);
      v39 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v39)
      {
        v41 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v41;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v40;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v74 = (_OWORD *)(a1 + 32);
      v75 = (_OWORD *)(a2 + 32);
      v76 = *(_QWORD *)(a2 + 56);
      if (v76)
      {
        v77 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v76;
        *(_QWORD *)(a1 + 64) = v77;
        (**(void (***)(_OWORD *, _OWORD *))(v76 - 8))(v74, v75);
      }
      else
      {
        v101 = *(_OWORD *)(a2 + 48);
        *v74 = *v75;
        *(_OWORD *)(a1 + 48) = v101;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v102 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v102;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v94 = 6;
      goto LABEL_76;
    case 7u:
      v42 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 233) = 7;
      v43 = v42;
      return a1;
    case 8u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v45 = (_OWORD *)(a2 + 8);
      v44 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v44)
      {
        v46 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v44;
        *(_QWORD *)(a1 + 16) = v46;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v45;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v78 = (_OWORD *)(a1 + 32);
      v79 = (_OWORD *)(a2 + 32);
      v80 = *(_QWORD *)(a2 + 56);
      if (v80)
      {
        v81 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v80;
        *(_QWORD *)(a1 + 64) = v81;
        (**(void (***)(_OWORD *, _OWORD *))(v80 - 8))(v78, v79);
      }
      else
      {
        v103 = *(_OWORD *)(a2 + 48);
        *v78 = *v79;
        *(_OWORD *)(a1 + 48) = v103;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      v104 = *(_QWORD *)(a2 + 136);
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v105 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v105;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v106 = *(void **)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v106;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_retain();
      swift_retain();
      swift_retain();
      v107 = v106;
      swift_retain();
      if (v104)
      {
        v108 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a1 + 136) = v104;
        *(_QWORD *)(a1 + 144) = v108;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      }
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v111 = (_OWORD *)(a1 + 160);
      v112 = (_OWORD *)(a2 + 160);
      v113 = *(_QWORD *)(a2 + 184);
      if (v113)
      {
        v114 = *(_QWORD *)(a2 + 192);
        *(_QWORD *)(a1 + 184) = v113;
        *(_QWORD *)(a1 + 192) = v114;
        (**(void (***)(_OWORD *, _OWORD *))(v113 - 8))(v111, v112);
      }
      else
      {
        v115 = *(_OWORD *)(a2 + 176);
        *v111 = *v112;
        *(_OWORD *)(a1 + 176) = v115;
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      }
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      v116 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 216) = v116;
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      v94 = 8;
      goto LABEL_76;
    case 9u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v48 = (_OWORD *)(a2 + 8);
      v47 = *(_QWORD *)(a2 + 8);
      swift_retain();
      if (v47)
      {
        v49 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = v47;
        *(_QWORD *)(a1 + 16) = v49;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v48;
      }
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v82 = (_OWORD *)(a1 + 32);
      v83 = (_OWORD *)(a2 + 32);
      v84 = *(_QWORD *)(a2 + 56);
      if (v84)
      {
        v85 = *(_QWORD *)(a2 + 64);
        *(_QWORD *)(a1 + 56) = v84;
        *(_QWORD *)(a1 + 64) = v85;
        (**(void (***)(_OWORD *, _OWORD *))(v84 - 8))(v82, v83);
      }
      else
      {
        v109 = *(_OWORD *)(a2 + 48);
        *v82 = *v83;
        *(_OWORD *)(a1 + 48) = v109;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      v110 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v110;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v94 = 9;
LABEL_76:
      *(_BYTE *)(a1 + 233) = v94;
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    default:
      v8 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v8;
      *(_OWORD *)(a1 + 218) = *(_OWORD *)(a2 + 218);
      v9 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v9;
      v10 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v10;
      v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v12;
      v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      v14 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v14;
      break;
  }
  return a1;
}

void @objc UIHostingController.loadView()(void *a1)
{
  id v1;

  v1 = a1;
  UIHostingController.loadView()();

}

Swift::Void __swiftcall UIHostingController.loadView()()
{
  char *v0;

  objc_msgSend(v0, sel_setView_, *(_QWORD *)&v0[direct field offset for UIHostingController.host]);
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7E18], MEMORY[0x1E0CE7E28]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

void type metadata completion function for ToolbarBridge()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ToolbarStorage.SearchItem?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ToolbarStorage.NavigationProperties?(319);
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

void @objc _UIHostingView.bounds.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;

  v9 = a1;
  _UIHostingView.frame.setter((SEL *)&selRef_bounds, (SEL *)&selRef_setBounds_, a2, a3, a4, a5);

}

void @objc PlatformViewHost.didMoveToWindow()(void *a1)
{
  id v1;

  v1 = a1;
  PlatformViewHost.didMoveToWindow()();

}

Swift::Void __swiftcall PlatformViewHost.didMoveToWindow()()
{
  _QWORD *v0;
  _QWORD *v1;
  objc_class *ObjectType;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  id receiver;
  id v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int v18;
  id v19;
  objc_class *v20;
  id v21;
  void *v22;
  id v23;
  objc_super v24;
  objc_super v25;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v9 = (char *)&v24 - v8;
  v10 = objc_msgSend(v1, sel_window, v7);

  if (!v10)
    goto LABEL_9;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, (char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x78), AssociatedTypeWitness);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_9;
  receiver = v25.receiver;
  v12 = objc_msgSend(v25.receiver, sel_view);
  if (v12)
  {
    v13 = v12;
    v14 = (char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x80);
    if (MEMORY[0x18D760234](v14)
      && (v15 = *((_QWORD *)v14 + 1),
          v16 = swift_getObjectType(),
          v17 = (id)ViewRendererHost.uiViewController.getter(v16, v15),
          swift_unknownObjectRelease(),
          v17))
    {
      v18 = *((unsigned __int8 *)v1 + *(_QWORD *)((*v3 & *v1) + 0x88));
      if (v18 != 2)
      {
        if ((v18 & 1) != 0)
        {
          objc_msgSend(v17, sel_addChildViewController_, receiver);
        }
        else
        {
          v17 = v17;
          v19 = objc_msgSend(receiver, sel_parentViewController);

          if (!v19 || (v19, v19 != v17))
            objc_msgSend(v17, sel_addChildViewController_, receiver);
          v20 = (objc_class *)swift_getObjectType();
          v25.receiver = v1;
          v25.super_class = v20;
          v21 = objc_msgSendSuper2(&v25, sel_hostedView);
          if (v21)
          {
            v22 = v21;

            goto LABEL_9;
          }
        }
        v23 = v13;
        PlatformViewHost.hostedView.setter(v13);
        objc_msgSend(receiver, sel_didMoveToParentViewController_, v17);

        goto LABEL_9;
      }

    }
    else
    {

    }
LABEL_9:
    v24.receiver = v1;
    v24.super_class = ObjectType;
    objc_msgSendSuper2(&v24, sel_didMoveToWindow);
    return;
  }
  __break(1u);
}

void @objc PlatformViewHost.willMove(toSuperview:)(void *a1, uint64_t a2, UIView_optional *a3)
{
  UIView_optional *v5;
  id v6;

  v5 = a3;
  v6 = a1;
  PlatformViewHost.willMove(toSuperview:)(a3);

}

Swift::Void __swiftcall PlatformViewHost.willMove(toSuperview:)(UIView_optional *toSuperview)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  id v12;
  id v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  objc_class *v32;
  char *v33;
  char *v34;
  char *v35;
  UIView_optional *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  _BYTE v42[4];
  int v43;
  uint64_t v44;
  _BYTE *v45;
  id v46;
  id v47;
  objc_super v48;
  id v49;
  objc_super v50;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  if (!toSuperview)
    goto LABEL_9;
  (*(void (**)(_BYTE *, char *, uint64_t, double))(v9 + 16))(&v42[-v10], &v2[*(_QWORD *)(v6 + 120)], AssociatedTypeWitness, v11);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_9;
  v12 = v49;
  v13 = objc_msgSend(v49, sel_view);
  if (v13)
  {
    v14 = v13;
    v15 = &v2[*(_QWORD *)((*v5 & *(_QWORD *)v2) + 0x80)];
    if (MEMORY[0x18D760234](v15))
    {
      v16 = *((_QWORD *)v15 + 1);
      v17 = swift_getObjectType();
      v18 = (void *)ViewRendererHost.uiViewController.getter(v17, v16);
      swift_unknownObjectRelease();
      if (v18)
      {
        v19 = v2[*(_QWORD *)((*v5 & *(_QWORD *)v2) + 0x88)];
        if (v19 != 2)
        {
          v21 = v18;
          v22 = objc_msgSend(v12, sel_parentViewController);

          if ((v19 & 1) != 0)
          {
            if (!v22 || (v22, v22 != v21))
            {
              v23 = objc_msgSend(v2, sel_window);

              if (v23)
              {
                objc_msgSend(v21, sel_addChildViewController_, v12);
                v24 = v14;
                PlatformViewHost.hostedView.setter(v14);
              }
            }
          }
          else if (!v22 || (v22, v22 != v21))
          {
            objc_msgSend(v21, sel_addChildViewController_, v12);
          }
          v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E88]), sel_init);
          v47 = v21;
          v25 = &v2[*(_QWORD *)((*v5 & *(_QWORD *)v2) + 0x68)];
          swift_beginAccess();
          v26 = *v5 & *(_QWORD *)v2;
          v27 = *(_DWORD *)&v2[*(_QWORD *)(v26 + 0x70)];
          v28 = *(_QWORD *)v25;
          v29 = *((_QWORD *)v25 + 1);
          v30 = &v2[*(_QWORD *)(v26 + 144)];
          v31 = *(_QWORD *)v30;
          LODWORD(v45) = v30[8];
          v43 = *((_DWORD *)v30 + 3);
          v32 = (objc_class *)type metadata accessor for EnvironmentWrapper();
          v33 = (char *)objc_allocWithZone(v32);
          v34 = &v33[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
          *(_QWORD *)v34 = v28;
          *((_QWORD *)v34 + 1) = v29;
          *(_DWORD *)&v33[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v27;
          v35 = &v33[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
          v44 = v31;
          *(_QWORD *)v35 = v31;
          v35[8] = (char)v45;
          *((_DWORD *)v35 + 3) = v43;
          v48.receiver = v33;
          v48.super_class = v32;
          swift_retain_n();
          swift_retain_n();
          swift_retain_n();
          v36 = -[UIView_optional init](&v48, sel_init);
          v45 = v42;
          MEMORY[0x1E0C80A78](v36, v37);
          *(_QWORD *)&v42[-32] = v28;
          *(_QWORD *)&v42[-24] = v29;
          v42[-16] = 0;
          v38 = v46;
          v39 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
          swift_release();
          swift_release();
          swift_release();

          v40 = v39;
          v41 = v47;
          objc_msgSend(v47, sel__noWarn_setOverrideTraitCollection_forChild_, v40, v12);

          goto LABEL_9;
        }

      }
    }
    v20 = v14;
    PlatformViewHost.hostedView.setter(v14);

LABEL_9:
    v50.receiver = v2;
    v50.super_class = ObjectType;
    -[UIView_optional willMoveToSuperview:](&v50, sel_willMoveToSuperview_, toSuperview, v11);
    return;
  }
  __break(1u);
}

void specialized UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  id v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  _OWORD v14[2];
  _BYTE v15[40];
  _BYTE v16[32];
  char v17;

  outlined init with take of SwipeActions.Value?(a1, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v12 = (float64x2_t)v14[1];
  v13 = (float64x2_t)v14[0];
  if ((*(_BYTE *)(v2 + 48) & 1) != 0)
  {
    outlined init with take of SwipeActions.Value?(a1, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    if (v17 == 1)
      return;
  }
  else
  {
    v10 = *(float64x2_t *)(v2 + 16);
    v8 = *(float64x2_t *)(v2 + 32);
    outlined init with take of SwipeActions.Value?(a1, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    if (v17 != 1
      && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v10, v13), (int32x4_t)vceqq_f64(v8, v12))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
    {
      return;
    }
  }
  v9 = *(float64x2_t *)&a2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16];
  v11 = *(float64x2_t *)&a2[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
  outlined init with take of SwipeActions.Value?(a1, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if (v15[32] == 1
    || (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v11, v13), (int32x4_t)vceqq_f64(v9, v12))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) != 0)
  {
    outlined init with take of SwipeActions.Value?(a1, v2 + 16, (uint64_t)&lazy cache variable for type metadata for UIEdgeInsets?, (uint64_t)type metadata accessor for UIEdgeInsets, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    v5 = objc_msgSend(a2, sel_superview);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, sel_layer);

      objc_msgSend(v7, sel_setNeedsLayout);
    }
  }
  else
  {
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_BYTE *)(v2 + 48) = 1;
  }
}

void @objc PlatformViewHost.hostedView.setter(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  PlatformViewHost.hostedView.setter(a3);

}

uint64_t type metadata completion function for Button()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ButtonAction();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in __App.ShoeboxAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v8, v9, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v7, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

void UIHostingController.safeAreaRegions.setter(uint64_t a1)
{
  id v2;

  v2 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.safeAreaRegions.setter(a1);

}

uint64_t _UIHostingView.safeAreaRegions.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x108));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  return _UIHostingView.safeAreaRegionsDidChange(from:)(v4);
}

uint64_t _UIHostingView.safeAreaRegionsDidChange(from:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  result = _UIHostingView.safeAreaRegions.getter();
  if (result != a1)
  {
    v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v4 & v3) + 0x50), *(_QWORD *)((v4 & v3) + 0x58), v6);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

void List.init(selection:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  _QWORD v20[18];

  v20[3] = a3;
  v20[4] = a2;
  v20[2] = a1;
  v20[5] = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v20[1] = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SelectionManagerBox(255, v14, v15, v14);
  v16 = type metadata accessor for Binding();
  v17 = type metadata accessor for Optional();
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v16 - 8) + 56))(a8, 1, 1, v16, v19);
  v20[14] = a4;
  v20[15] = a5;
  v20[16] = a6;
  v20[17] = a7;
  type metadata accessor for List();
}

uint64_t sub_186E6CB0C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v4 + a1[14]) = 0;
  v12 = v4 + a1[15];
  *(_QWORD *)v12 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 0;
  *(_QWORD *)(v10 - 160) = v2;
  *(_QWORD *)(v10 - 152) = v1;
  *(_QWORD *)(v10 - 144) = v8;
  *(_QWORD *)(v10 - 136) = v3;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v13 = type metadata accessor for Optional();
  v14 = v6;
  v15 = *(_QWORD *)(v10 - 208);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in List.init(selection:content:), v10 - 176, MEMORY[0x1E0DEDCE8], v14, v16, v7);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v4, v7, v9);
  v18 = *(_QWORD *)(v10 - 216);
  (*(void (**)(uint64_t))(v10 - 192))(v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v15, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 184) + 32))(v4 + a1[13], v18, v1);
}

uint64_t static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29[3];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;

  v9 = *(_OWORD *)(a1 + 48);
  v29[2] = *(_OWORD *)(a1 + 32);
  v30 = v9;
  v31 = *(_OWORD *)(a1 + 64);
  v32 = *(_DWORD *)(a1 + 80);
  v10 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  v29[1] = v10;
  v11 = swift_allocObject();
  a2();
  v33 = v30;
  v34 = DWORD2(v30);
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v13 = *(_QWORD *)(v11 + 16);
  v15 = *(_DWORD *)(v11 + 24);
  v14 = *(_DWORD *)(v11 + 28);
  if ((v12 & 1) != 0)
  {
    _ViewOutputs.subscript.getter();
    type metadata accessor for AccessibilityRepresentationModifier(255, a3, a4, v16);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
      closure #1 in static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)(1, a3, a4, v17);
    v19 = type metadata accessor for AccessibilityProxyModifier(0, a3, a4, v17);
    AGGraphCreateOffsetAttribute2();
    v21 = type metadata accessor for AccessibilityRepresentationModifier.ProxyModifier(0, a3, a4, v20);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRepresentationModifier<A>.ProxyModifier, v21);
    _GraphValue.init<A>(_:)();
    swift_retain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProxyModifier<A>, v19);
    static ViewModifier._makeView(modifier:inputs:body:)();
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v11 + 16) = v27;
    *(_QWORD *)(v11 + 24) = v28;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v26 = *(_QWORD *)(v11 + 16);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    v23 = type metadata accessor for AccessibilityRepresentationModifier.BridgedAttachment(0, a3, a4, v22);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityRepresentationModifier<A>.BridgedAttachment, v23);
    _GraphValue.init<A>(_:)();
    v24 = *(_QWORD *)(v11 + 16);
    v25 = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain();
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v26, v29, v24, v25, 0);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    _ViewOutputs.subscript.setter();
    swift_endAccess();
    *(_QWORD *)a5 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(a5 + 8) = *(_QWORD *)(v11 + 24);
    swift_bridgeObjectRetain();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_release();
    *(_QWORD *)a5 = v13;
    *(_DWORD *)(a5 + 8) = v15;
    *(_DWORD *)(a5 + 12) = v14;
  }
  return result;
}

void partial apply for closure #1 in static SubscriptionView._makeView(view:inputs:)()
{
  closure #1 in static SubscriptionView._makeView(view:inputs:)();
}

void partial apply for closure #1 in static SubscriptionView._makeViewList(view:inputs:)()
{
  closure #1 in static SubscriptionView._makeView(view:inputs:)();
}

void closure #1 in static SubscriptionView._makeView(view:inputs:)()
{
  type metadata accessor for SubscriptionView();
}

uint64_t sub_186E6D0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v7[2] = a1;
  v8 = v2;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, v1, (uint64_t)v7, v2, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

_QWORD *initializeWithCopy for ActionDispatcherSubscriber(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for CombineIdentifier();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_retain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance ActionDispatcherSubscriber<A>(_QWORD *a1)
{
  return specialized ActionDispatcherSubscriber.receive(subscription:)(a1);
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

void @objc PlatformViewHost.updateConstraints()(void *a1)
{
  id v1;

  v1 = a1;
  PlatformViewHost.updateConstraints()();

}

Swift::Void __swiftcall PlatformViewHost.updateConstraints()()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  id v3;
  void *v4;
  Class isa;
  void *v6;
  objc_super v7;
  objc_super v8;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  LODWORD(v8.receiver) = -1;
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    || (lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature(),
        (static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0))
  {
    v8.receiver = v0;
    v8.super_class = (Class)swift_getObjectType();
    v3 = objc_msgSendSuper2(&v8, sel_hostedView);
    if (v3)
    {
      v4 = v3;
      if (objc_msgSend(v3, sel__wantsConstraintBasedLayout))
        objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    }
  }
  else
  {
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v6 = (void *)MEMORY[0x18D75CC88](0xD000000000000014, 0x8000000187BEE960);
    objc_msgSend(v1, sel_setValue_forKey_, isa, v6);

  }
  v7.receiver = v1;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel_updateConstraints);
}

_QWORD *specialized _UIHostingView.init(rootView:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  void *v139;
  uint64_t inited;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t i;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v162;
  objc_super v163;
  _BYTE v164[16];
  __int128 v165;
  uint64_t v166;
  ValueMetadata *v167;
  unint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v6 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v5) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x90)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x98)) = 0;
  v7 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA0);
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA8)) = 0;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC8)) = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD0)) = 0;
  v8 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD8);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  v9 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE0);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x100)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x108)) = -1;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x138)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x148)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x150)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x158)) = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x160)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x168)) = 0;
  v10 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x170);
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x178)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x180)) = 2;
  v11 = *(_QWORD *)((*v4 & *v6) + 0x188);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>());
  *(_QWORD *)((char *)v6 + v11) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>);
  v13 = *(_QWORD *)((*v4 & *v6) + 0x190);
  v14 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v6 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x198)) = 1;
  v15 = *(_QWORD *)((*v4 & *v6) + 0x1A0);
  type metadata accessor for FocusBridge();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = v18;
  EnvironmentValues.init()();
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_QWORD *)(v16 + 136) = 1;
  *(_DWORD *)(v16 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_WORD *)(v16 + 176) = 1;
  *(_QWORD *)((char *)v6 + v15) = v16;
  v19 = *(_QWORD *)((*v4 & *v6) + 0x1A8);
  type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>(0);
  *(_QWORD *)((char *)v6 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1B0)) = 0;
  v21 = *(_QWORD *)((*v4 & *v6) + 0x1B8);
  type metadata accessor for TooltipBridge<ModifiedContent<AnyView, RootModifier>>(0);
  *(_QWORD *)((char *)v6 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v23 = *(_QWORD *)((*v4 & *v6) + 0x1C0);
  type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>(0);
  *(_QWORD *)((char *)v6 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1D0)) = 0;
  v25 = *(_QWORD *)((*v4 & *v6) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>(0);
  v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(_QWORD *)(v26 + 24) = v17;
  *(_QWORD *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + v25) = v26;
  swift_weakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1E8)) = 0;
  v27 = *(_QWORD *)((*v4 & *v6) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>(0);
  *(_QWORD *)((char *)v6 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  v29 = *(_QWORD *)((*v4 & *v6) + 0x1F8);
  type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>(0);
  *(_QWORD *)((char *)v6 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x200)) = 0;
  v31 = *(_QWORD *)((*v4 & *v6) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>(0);
  v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)((char *)v6 + v31) = v32;
  v33 = *(_QWORD *)((*v4 & *v6) + 0x210);
  type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>(0);
  *(_QWORD *)((char *)v6 + v33) = objc_msgSend(objc_allocWithZone(v34), sel_init);
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x218)) = 0;
  v35 = *(_QWORD *)((*v4 & *v6) + 0x220);
  *(_QWORD *)((char *)v6 + v35) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x228)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x230)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x238)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x248)) = 0;
  v36 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x250);
  *(_QWORD *)v36 = 0;
  v36[8] = 0;
  *((_DWORD *)v36 + 3) = 0;
  v37 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x258));
  v38 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v17);
  *v37 = 0;
  v37[1] = v38;
  v37[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v39 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x278)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x280)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x288)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x290)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x298)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x2A0)) = 0;
  v162 = a1;
  v40 = outlined init with copy of ModifiedContent<_ViewList_View, ListTableCellModifier>(a1, (uint64_t)v6 + *(_QWORD *)((*v4 & *v6) + 0x60), (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier);
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v165, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v165 = v43;
  *((_QWORD *)&v165 + 1) = v45;
  v166 = v47;
  LOWORD(v167) = v49 & 0x101;
  BYTE2(v167) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v165 = 0;
  WORD4(v165) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v165 = 0uLL;
  v166 = 0;
  LOBYTE(v167) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v167 = &type metadata for HoverEventDispatcher;
  v168 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v165 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilDoubleTapEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilSqueezeEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v167 = &type metadata for KeyEventDispatcher;
  v168 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v165 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>(0);
  v163.receiver = v6;
  v163.super_class = v52;
  v53 = objc_msgSendSuper2(&v163, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = qword_1ECE02220;
    v59 = qword_1ECE02228;
    v60 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, v59, v60);
      v62 = ViewGraph.preferenceBridge.getter();
      if (!v62 || (v63 = v62, swift_release(), v56 != v63))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v64 = swift_release();
      if ((v60 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, v60 & 1);
      if ((v60 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v64, v65);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
LABEL_10:
        v66 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v4 & *v55) + 0x110));
        v67 = *v66;
        *(_OWORD *)v66 = v165;
        outlined consume of EnvironmentValues?(v67);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v165 = v58;
    *((_QWORD *)&v165 + 1) = v59;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
    goto LABEL_10;
  }
LABEL_11:
  v68 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v69 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v70 = (char **)(v69 + 24);
  swift_beginAccess();
  v71 = *(char **)(v69 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v69 + 24) = v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    *v70 = v71;
  }
  v74 = *((_QWORD *)v71 + 2);
  v73 = *((_QWORD *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *v70 = v71;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v76 = v75;
  v77 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v71 + 2) = v74 + 1;
  v78 = &v71[24 * v74];
  *((_QWORD *)v78 + 4) = v76;
  *((_QWORD *)v78 + 5) = v77;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  v79 = *(_QWORD *)((*v4 & *v68) + 0x210);
  swift_unknownObjectWeakAssign();
  v80 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x188));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x190));
  swift_unknownObjectWeakAssign();
  v83 = v82;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    swift_unknownObjectWeakAssign();

  }
  v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    v87 = v86;
    v88 = *(void (**)(uint64_t))((*v4 & *v86) + 0x1D0);
    v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  v90 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1A0));
  v91 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v90 + 40) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v92 = FocusBridge.host.getter();
  if (v92)
  {
    v94 = (void *)v92;
    v95 = v93;
    v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v97 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1A8));
  v98 = swift_unknownObjectWeakAssign();
  v99 = MEMORY[0x18D760234](v98);
  if (!v99)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = (void *)v99;
  v101 = swift_getObjectType();
  v102 = v97;
  swift_retain();

  if (((*(uint64_t (**)(void))(v101 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v103 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1F0));
  v110 = swift_unknownObjectWeakAssign();
  v111 = MEMORY[0x18D760234](v110);
  if (!v111)
    goto LABEL_48;
  v112 = (void *)v111;
  v113 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v114 = objc_msgSend(v68, sel_traitCollection);
  v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (v116 = objc_msgSend(v68, sel_traitCollection),
        v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<AnyView, RootModifier>>(0);
    v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v120 = *(_QWORD *)((*v4 & *v68) + 0x200);
    v121 = *(void **)((char *)v68 + v120);
    *(_QWORD *)((char *)v68 + v120) = v119;

  }
  v122 = *(char **)((char *)v68 + v79);
  v123 = MEMORY[0x18D760234](&v122[direct field offset for ContextMenuBridge.host]);
  if (!v123)
LABEL_49:
    __break(1u);
  v124 = (void *)v123;
  v125 = swift_getObjectType();
  v126 = v122;
  swift_retain();

  if (((*(uint64_t (**)(void))(v125 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v127 = *(char **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x220));
  *(_QWORD *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v54;
  v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v128, v129);
  v130 = v127;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v131 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x78));
  v132 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v131 + 24) = v132;
  swift_unknownObjectWeakAssign();
  v133 = *(_QWORD *)((*v4 & *v68) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v131 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v134 = (void *)objc_opt_self();
  v135 = objc_msgSend(v134, sel_defaultCenter);
  v136 = v68;
  v137 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v136, sel_willBeginSnapshotSession, v137, 0);

  v138 = v136;
  v139 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_didEndSnapshotSession, v139, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v141 = (void *)*MEMORY[0x1E0C99720];
  v142 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v142;
  v143 = (void *)*MEMORY[0x1E0DC5320];
  v144 = v141;
  v145 = v142;
  v146 = v143;
  v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v147[2] = 3;
  v147[6] = v146;
  v148 = v147[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v148, 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[5], 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[6], 0);
  swift_bridgeObjectRelease_n();
  v149 = *(_QWORD *)((char *)v68 + v133);
  v150 = *(_QWORD *)(v149 + 48);
  if (v150)
  {
    v151 = v138;
    swift_retain();
    objc_msgSend(v151, sel_addGestureRecognizer_, v150);
  }
  else
  {
    v152 = v138;
    swift_retain();
  }
  objc_msgSend(v138, sel_addGestureRecognizer_, *(_QWORD *)(v149 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v153 = objc_msgSend(v134, sel_defaultCenter);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v154 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v155 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v155)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v155; ++i)
    {
      v157 = *(_QWORD *)(v154 + 8 * i + 32);
      objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityBooleanDidChange_, v157, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v158 = one-time initialization token for didUpdateListLayout;
  v159 = v138;
  if (v158 != -1)
    swift_once();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v159, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v160 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v160, (uint64_t)v164);
  v164[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v164, (uint64_t)v159);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>(v162, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E0CE7518], (uint64_t)&type metadata for RootModifier);
  return v159;
}

{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char **v71;
  char *v72;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  Class v119;
  id v120;
  uint64_t v121;
  void *v122;
  char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  uint64_t inited;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  id v146;
  id v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v163;
  uint64_t ObjectType;
  objc_super v165;
  _BYTE v166[16];
  __int128 v167;
  uint64_t v168;
  ValueMetadata *v169;
  unint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v5 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v4) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x90)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x98)) = 0;
  v6 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA0);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA8)) = 0;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC8)) = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD0)) = 0;
  v7 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD8);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE0);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x100)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x108)) = -1;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x138)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x148)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x150)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x158)) = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x160)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x168)) = 0;
  v9 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x170);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x178)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x180)) = 2;
  v10 = *(_QWORD *)((*v3 & *v5) + 0x188);
  type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v12 = objc_allocWithZone(v11);
  *(_QWORD *)((char *)v5 + v10) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, Alert.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>);
  v13 = *(_QWORD *)((*v3 & *v5) + 0x190);
  type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)((char *)v5 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, ActionSheet.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x198)) = 1;
  v16 = *(_QWORD *)((*v3 & *v5) + 0x1A0);
  type metadata accessor for FocusBridge();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  swift_unknownObjectWeakInit();
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = v18;
  *(_QWORD *)(v17 + 64) = v19;
  EnvironmentValues.init()();
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_QWORD *)(v17 + 136) = 1;
  *(_DWORD *)(v17 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v17 + 160) = 0;
  *(_QWORD *)(v17 + 168) = 0;
  *(_WORD *)(v17 + 176) = 1;
  *(_QWORD *)((char *)v5 + v16) = v17;
  v20 = *(_QWORD *)((*v3 & *v5) + 0x1A8);
  type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v5 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1B0)) = 0;
  v22 = *(_QWORD *)((*v3 & *v5) + 0x1B8);
  type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v5 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  v24 = *(_QWORD *)((*v3 & *v5) + 0x1C0);
  type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v5 + v24) = objc_msgSend(objc_allocWithZone(v25), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1D0)) = 0;
  v26 = *(_QWORD *)((*v3 & *v5) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  v27 = swift_allocObject();
  *(_WORD *)(v27 + 16) = 2;
  *(_QWORD *)(v27 + 24) = v18;
  *(_QWORD *)(v27 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + v26) = v27;
  swift_weakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1E8)) = 0;
  v28 = *(_QWORD *)((*v3 & *v5) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v5 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  v30 = *(_QWORD *)((*v3 & *v5) + 0x1F8);
  type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v5 + v30) = objc_msgSend(objc_allocWithZone(v31), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x200)) = 0;
  v32 = *(_QWORD *)((*v3 & *v5) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v33 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v18);
  *(_QWORD *)((char *)v5 + v32) = v33;
  v34 = *(_QWORD *)((*v3 & *v5) + 0x210);
  type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v5 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x218)) = 0;
  v36 = *(_QWORD *)((*v3 & *v5) + 0x220);
  *(_QWORD *)((char *)v5 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x228)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x230)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x238)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x248)) = 0;
  v37 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x250);
  *(_QWORD *)v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  v38 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x258));
  v39 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v18);
  *v38 = 0;
  v38[1] = v39;
  v38[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v40 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x270);
  *(_QWORD *)v40 = 0;
  v40[8] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x278)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x280)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x288)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x290)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x298)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x2A0)) = 0;
  v163 = a1;
  v41 = outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(a1, (uint64_t)v5 + *(_QWORD *)((*v3 & *v5) + 0x60), (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  v42 = MEMORY[0x18D75B908](v41);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v167, v42);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v43 = swift_retain();
  v44 = specialized FocusViewGraph.init(graph:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_release();
  *(_QWORD *)&v167 = v44;
  *((_QWORD *)&v167 + 1) = v46;
  v168 = v48;
  LOWORD(v169) = v50 & 0x101;
  BYTE2(v169) = BYTE2(v50) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v167 = 0;
  WORD4(v167) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v167 = 0uLL;
  v168 = 0;
  LOBYTE(v169) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x78)) = EventBindingManager.__allocating_init()();
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  v169 = &type metadata for HoverEventDispatcher;
  v170 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v167 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilDoubleTapEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilSqueezeEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v52 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  v169 = &type metadata for KeyEventDispatcher;
  v170 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v167 = v52;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
  v165.receiver = v5;
  v165.super_class = v53;
  v54 = objc_msgSendSuper2(&v165, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v55 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v56 = v54;
  ViewRendererHost.initializeViewGraph()();
  v57 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v58 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v59 = qword_1ECE02220;
    v60 = qword_1ECE02228;
    v61 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v62 = swift_retain();
      outlined copy of RepresentableContextValues?(v62, v58, v59, v60, v61);
      v63 = ViewGraph.preferenceBridge.getter();
      if (!v63 || (v64 = v63, swift_release(), v57 != v64))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v65 = swift_release();
      if ((v61 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v65 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, v61 & 1);
      if ((v61 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v65, v66);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
        outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
LABEL_10:
        v67 = (_QWORD *)((char *)v56 + *(_QWORD *)((*v3 & *v56) + 0x110));
        v68 = *v67;
        *(_OWORD *)v67 = v167;
        outlined consume of EnvironmentValues?(v68);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v167 = v59;
    *((_QWORD *)&v167 + 1) = v60;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 0);
    outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
    goto LABEL_10;
  }
LABEL_11:
  v69 = v56;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v70 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v71 = (char **)(v70 + 24);
  swift_beginAccess();
  v72 = *(char **)(v70 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v70 + 24) = v72;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
    *v71 = v72;
  }
  v75 = *((_QWORD *)v72 + 2);
  v74 = *((_QWORD *)v72 + 3);
  if (v75 >= v74 >> 1)
  {
    v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v72);
    *v71 = v72;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v77 = v76;
  v78 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v72 + 2) = v75 + 1;
  v79 = &v72[24 * v75];
  *((_QWORD *)v79 + 4) = v77;
  *((_QWORD *)v79 + 5) = v78;
  *((_DWORD *)v79 + 12) = -1;
  swift_release();
  swift_release();
  v80 = *(_QWORD *)((*v3 & *v69) + 0x210);
  swift_unknownObjectWeakAssign();
  v81 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x188));
  swift_unknownObjectWeakAssign();
  v82 = v81;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v83 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x190));
  swift_unknownObjectWeakAssign();
  v84 = v83;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v85)
  {
    v86 = v85;
    swift_unknownObjectWeakAssign();

  }
  v87 = specialized _UIHostingView.sheetBridge.getter((uint64_t)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v87)
  {
    v88 = v87;
    v89 = *(void (**)(uint64_t))((*v3 & *v87) + 0x1D0);
    v90 = swift_retain();
    v89(v90);

    swift_release();
  }
  v91 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1A0));
  v92 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v91 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v91 + 40) = v92;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v93 = FocusBridge.host.getter();
  if (v93)
  {
    v95 = (void *)v93;
    v96 = v94;
    v97 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v96 + 8) + 16))(v97);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v98 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1A8));
  v99 = swift_unknownObjectWeakAssign();
  v100 = MEMORY[0x18D760234](v99);
  if (!v100)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v101 = (void *)v100;
  v102 = swift_getObjectType();
  v103 = v98;
  swift_retain();

  if (((*(uint64_t (**)(void))(v102 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v104 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v105 = v104;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v106 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v107 = v106;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v108 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v109 = v108;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v110 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1F0));
  v111 = swift_unknownObjectWeakAssign();
  v112 = MEMORY[0x18D760234](v111);
  if (!v112)
    goto LABEL_48;
  v113 = (void *)v112;
  v114 = v110;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v115 = objc_msgSend(v69, sel_traitCollection);
  v116 = objc_msgSend(v115, sel_userInterfaceIdiom);

  if (v116 == (id)1
    || (v117 = objc_msgSend(v69, sel_traitCollection),
        v118 = objc_msgSend(v117, sel_userInterfaceIdiom),
        v117,
        v118 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>(0);
    v120 = objc_msgSend(objc_allocWithZone(v119), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v121 = *(_QWORD *)((*v3 & *v69) + 0x200);
    v122 = *(void **)((char *)v69 + v121);
    *(_QWORD *)((char *)v69 + v121) = v120;

  }
  v123 = *(char **)((char *)v69 + v80);
  v124 = MEMORY[0x18D760234](&v123[direct field offset for ContextMenuBridge.host]);
  if (!v124)
LABEL_49:
    __break(1u);
  v125 = (void *)v124;
  v126 = swift_getObjectType();
  v127 = v123;
  swift_retain();

  if (((*(uint64_t (**)(void))(v126 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v128 = *(char **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x220));
  *(_QWORD *)&v128[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v55;
  v129 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v129, v130);
  v131 = v128;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v132 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x78));
  v133 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v132 + 24) = v133;
  swift_unknownObjectWeakAssign();
  v134 = *(_QWORD *)((*v3 & *v69) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v132 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v135 = (void *)objc_opt_self();
  v136 = objc_msgSend(v135, sel_defaultCenter);
  v137 = v69;
  v138 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v137, sel_willBeginSnapshotSession, v138, 0);

  v139 = v137;
  v140 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_didEndSnapshotSession, v140, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v142 = (void *)*MEMORY[0x1E0C99720];
  v143 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v143;
  v144 = (void *)*MEMORY[0x1E0DC5320];
  v145 = v142;
  v146 = v143;
  v147 = v144;
  v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v148[2] = 3;
  v148[6] = v147;
  v149 = v148[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v149, 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[5], 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[6], 0);
  swift_bridgeObjectRelease_n();
  v150 = *(_QWORD *)((char *)v69 + v134);
  v151 = *(_QWORD *)(v150 + 48);
  if (v151)
  {
    v152 = v139;
    swift_retain();
    objc_msgSend(v152, sel_addGestureRecognizer_, v151);
  }
  else
  {
    v153 = v139;
    swift_retain();
  }
  objc_msgSend(v139, sel_addGestureRecognizer_, *(_QWORD *)(v150 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v154 = objc_msgSend(v135, sel_defaultCenter);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v155 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v156 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v156)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v156; ++i)
    {
      v158 = *(_QWORD *)(v155 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityBooleanDidChange_, v158, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v159 = one-time initialization token for didUpdateListLayout;
  v160 = v139;
  if (v159 != -1)
    swift_once();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v160, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v161 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v161, (uint64_t)v166);
  v166[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v166, (uint64_t)v160);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(v163, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
  return v160;
}

{
  _QWORD *v1;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  void *v139;
  uint64_t inited;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t i;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v162;
  objc_super v163;
  _BYTE v164[16];
  __int128 v165;
  uint64_t v166;
  ValueMetadata *v167;
  unint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v6 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v5) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x90)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x98)) = 0;
  v7 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA0);
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA8)) = 0;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC8)) = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD0)) = 0;
  v8 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD8);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  v9 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE0);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x100)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x108)) = -1;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x138)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x148)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x150)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x158)) = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x160)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x168)) = 0;
  v10 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x170);
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x178)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x180)) = 2;
  v11 = *(_QWORD *)((*v4 & *v6) + 0x188);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>());
  *(_QWORD *)((char *)v6 + v11) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, Alert.Presentation>);
  v13 = *(_QWORD *)((*v4 & *v6) + 0x190);
  v14 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v6 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x198)) = 1;
  v15 = *(_QWORD *)((*v4 & *v6) + 0x1A0);
  type metadata accessor for FocusBridge();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = v18;
  EnvironmentValues.init()();
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_QWORD *)(v16 + 136) = 1;
  *(_DWORD *)(v16 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_WORD *)(v16 + 176) = 1;
  *(_QWORD *)((char *)v6 + v15) = v16;
  v19 = *(_QWORD *)((*v4 & *v6) + 0x1A8);
  type metadata accessor for DragAndDropBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1B0)) = 0;
  v21 = *(_QWORD *)((*v4 & *v6) + 0x1B8);
  type metadata accessor for TooltipBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v23 = *(_QWORD *)((*v4 & *v6) + 0x1C0);
  type metadata accessor for EditMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1D0)) = 0;
  v25 = *(_QWORD *)((*v4 & *v6) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(_QWORD *)(v26 + 24) = v17;
  *(_QWORD *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + v25) = v26;
  swift_weakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1E8)) = 0;
  v27 = *(_QWORD *)((*v4 & *v6) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  v29 = *(_QWORD *)((*v4 & *v6) + 0x1F8);
  type metadata accessor for PencilEventsBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x200)) = 0;
  v31 = *(_QWORD *)((*v4 & *v6) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)((char *)v6 + v31) = v32;
  v33 = *(_QWORD *)((*v4 & *v6) + 0x210);
  type metadata accessor for ContextMenuBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v33) = objc_msgSend(objc_allocWithZone(v34), sel_init);
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x218)) = 0;
  v35 = *(_QWORD *)((*v4 & *v6) + 0x220);
  *(_QWORD *)((char *)v6 + v35) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x228)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x230)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x238)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x248)) = 0;
  v36 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x250);
  *(_QWORD *)v36 = 0;
  v36[8] = 0;
  *((_DWORD *)v36 + 3) = 0;
  v37 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x258));
  v38 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v17);
  *v37 = 0;
  v37[1] = v38;
  v37[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v39 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x278)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x280)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x288)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x290)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x298)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x2A0)) = 0;
  v162 = a1;
  v40 = outlined init with copy of ModifiedContent<_ViewList_View, CollectionViewCellModifier>(a1, (uint64_t)v6 + *(_QWORD *)((*v4 & *v6) + 0x60), (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v165, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v165 = v43;
  *((_QWORD *)&v165 + 1) = v45;
  v166 = v47;
  LOWORD(v167) = v49 & 0x101;
  BYTE2(v167) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v165 = 0;
  WORD4(v165) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v165 = 0uLL;
  v166 = 0;
  LOBYTE(v167) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v167 = &type metadata for HoverEventDispatcher;
  v168 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v165 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilDoubleTapEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilSqueezeEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v167 = &type metadata for KeyEventDispatcher;
  v168 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v165 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
  v163.receiver = v6;
  v163.super_class = v52;
  v53 = objc_msgSendSuper2(&v163, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = qword_1ECE02220;
    v59 = qword_1ECE02228;
    v60 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, v59, v60);
      v62 = ViewGraph.preferenceBridge.getter();
      if (!v62 || (v63 = v62, swift_release(), v56 != v63))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v64 = swift_release();
      if ((v60 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, v60 & 1);
      if ((v60 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v64, v65);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
LABEL_10:
        v66 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v4 & *v55) + 0x110));
        v67 = *v66;
        *(_OWORD *)v66 = v165;
        outlined consume of EnvironmentValues?(v67);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v165 = v58;
    *((_QWORD *)&v165 + 1) = v59;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
    goto LABEL_10;
  }
LABEL_11:
  v68 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v69 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v70 = (char **)(v69 + 24);
  swift_beginAccess();
  v71 = *(char **)(v69 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v69 + 24) = v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    *v70 = v71;
  }
  v74 = *((_QWORD *)v71 + 2);
  v73 = *((_QWORD *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *v70 = v71;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v76 = v75;
  v77 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v71 + 2) = v74 + 1;
  v78 = &v71[24 * v74];
  *((_QWORD *)v78 + 4) = v76;
  *((_QWORD *)v78 + 5) = v77;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  v79 = *(_QWORD *)((*v4 & *v68) + 0x210);
  swift_unknownObjectWeakAssign();
  v80 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x188));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x190));
  swift_unknownObjectWeakAssign();
  v83 = v82;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    swift_unknownObjectWeakAssign();

  }
  v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    v87 = v86;
    v88 = *(void (**)(uint64_t))((*v4 & *v86) + 0x1D0);
    v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  v90 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1A0));
  v91 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v90 + 40) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v92 = FocusBridge.host.getter();
  if (v92)
  {
    v94 = (void *)v92;
    v95 = v93;
    v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v97 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1A8));
  v98 = swift_unknownObjectWeakAssign();
  v99 = MEMORY[0x18D760234](v98);
  if (!v99)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = (void *)v99;
  v101 = swift_getObjectType();
  v102 = v97;
  swift_retain();

  if (((*(uint64_t (**)(void))(v101 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v103 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1F0));
  v110 = swift_unknownObjectWeakAssign();
  v111 = MEMORY[0x18D760234](v110);
  if (!v111)
    goto LABEL_48;
  v112 = (void *)v111;
  v113 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v114 = objc_msgSend(v68, sel_traitCollection);
  v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (v116 = objc_msgSend(v68, sel_traitCollection),
        v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0);
    v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v120 = *(_QWORD *)((*v4 & *v68) + 0x200);
    v121 = *(void **)((char *)v68 + v120);
    *(_QWORD *)((char *)v68 + v120) = v119;

  }
  v122 = *(char **)((char *)v68 + v79);
  v123 = MEMORY[0x18D760234](&v122[direct field offset for ContextMenuBridge.host]);
  if (!v123)
LABEL_49:
    __break(1u);
  v124 = (void *)v123;
  v125 = swift_getObjectType();
  v126 = v122;
  swift_retain();

  if (((*(uint64_t (**)(void))(v125 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v127 = *(char **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x220));
  *(_QWORD *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v54;
  v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v128, v129);
  v130 = v127;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v131 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x78));
  v132 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v131 + 24) = v132;
  swift_unknownObjectWeakAssign();
  v133 = *(_QWORD *)((*v4 & *v68) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v131 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v134 = (void *)objc_opt_self();
  v135 = objc_msgSend(v134, sel_defaultCenter);
  v136 = v68;
  v137 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v136, sel_willBeginSnapshotSession, v137, 0);

  v138 = v136;
  v139 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_didEndSnapshotSession, v139, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v141 = (void *)*MEMORY[0x1E0C99720];
  v142 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v142;
  v143 = (void *)*MEMORY[0x1E0DC5320];
  v144 = v141;
  v145 = v142;
  v146 = v143;
  v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v147[2] = 3;
  v147[6] = v146;
  v148 = v147[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v148, 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[5], 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[6], 0);
  swift_bridgeObjectRelease_n();
  v149 = *(_QWORD *)((char *)v68 + v133);
  v150 = *(_QWORD *)(v149 + 48);
  if (v150)
  {
    v151 = v138;
    swift_retain();
    objc_msgSend(v151, sel_addGestureRecognizer_, v150);
  }
  else
  {
    v152 = v138;
    swift_retain();
  }
  objc_msgSend(v138, sel_addGestureRecognizer_, *(_QWORD *)(v149 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v153 = objc_msgSend(v134, sel_defaultCenter);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v154 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v155 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v155)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v155; ++i)
    {
      v157 = *(_QWORD *)(v154 + 8 * i + 32);
      objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityBooleanDidChange_, v157, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v158 = one-time initialization token for didUpdateListLayout;
  v159 = v138;
  if (v158 != -1)
    swift_once();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v159, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v160 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v160, (uint64_t)v164);
  v164[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v164, (uint64_t)v159);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<TableRowView, CollectionViewCellModifier>(v162, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
  return v159;
}

{
  _QWORD *v1;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  id v135;
  _QWORD *v136;
  void *v137;
  _QWORD *v138;
  void *v139;
  uint64_t inited;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t i;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v162;
  objc_super v163;
  _BYTE v164[16];
  __int128 v165;
  uint64_t v166;
  ValueMetadata *v167;
  unint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v6 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v5) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x90)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x98)) = 0;
  v7 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA0);
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA8)) = 0;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC8)) = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD0)) = 0;
  v8 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD8);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  v9 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE0);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x100)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x108)) = -1;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x138)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x148)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x150)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x158)) = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x160)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x168)) = 0;
  v10 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x170);
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x178)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x180)) = 2;
  v11 = *(_QWORD *)((*v4 & *v6) + 0x188);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>());
  *(_QWORD *)((char *)v6 + v11) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, Alert.Presentation>);
  v13 = *(_QWORD *)((*v4 & *v6) + 0x190);
  v14 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v6 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x198)) = 1;
  v15 = *(_QWORD *)((*v4 & *v6) + 0x1A0);
  type metadata accessor for FocusBridge();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = v18;
  EnvironmentValues.init()();
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_QWORD *)(v16 + 136) = 1;
  *(_DWORD *)(v16 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_WORD *)(v16 + 176) = 1;
  *(_QWORD *)((char *)v6 + v15) = v16;
  v19 = *(_QWORD *)((*v4 & *v6) + 0x1A8);
  type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v6 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1B0)) = 0;
  v21 = *(_QWORD *)((*v4 & *v6) + 0x1B8);
  type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v6 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v23 = *(_QWORD *)((*v4 & *v6) + 0x1C0);
  type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v6 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1D0)) = 0;
  v25 = *(_QWORD *)((*v4 & *v6) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(_QWORD *)(v26 + 24) = v17;
  *(_QWORD *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + v25) = v26;
  swift_weakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1E8)) = 0;
  v27 = *(_QWORD *)((*v4 & *v6) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v6 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  v29 = *(_QWORD *)((*v4 & *v6) + 0x1F8);
  type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v6 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x200)) = 0;
  v31 = *(_QWORD *)((*v4 & *v6) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)((char *)v6 + v31) = v32;
  v33 = *(_QWORD *)((*v4 & *v6) + 0x210);
  type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v6 + v33) = objc_msgSend(objc_allocWithZone(v34), sel_init);
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x218)) = 0;
  v35 = *(_QWORD *)((*v4 & *v6) + 0x220);
  *(_QWORD *)((char *)v6 + v35) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x228)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x230)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x238)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x248)) = 0;
  v36 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x250);
  *(_QWORD *)v36 = 0;
  v36[8] = 0;
  *((_DWORD *)v36 + 3) = 0;
  v37 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x258));
  v38 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v17);
  *v37 = 0;
  v37[1] = v38;
  v37[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v39 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x278)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x280)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x288)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x290)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x298)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x2A0)) = 0;
  v162 = a1;
  v40 = outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v6 + *(_QWORD *)((*v4 & *v6) + 0x60), &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v165, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v165 = v43;
  *((_QWORD *)&v165 + 1) = v45;
  v166 = v47;
  LOWORD(v167) = v49 & 0x101;
  BYTE2(v167) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v165 = 0;
  WORD4(v165) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v165 = 0uLL;
  v166 = 0;
  LOBYTE(v167) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v167 = &type metadata for HoverEventDispatcher;
  v168 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v165 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilDoubleTapEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilSqueezeEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v167 = &type metadata for KeyEventDispatcher;
  v168 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v165 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
  v163.receiver = v6;
  v163.super_class = v52;
  v53 = objc_msgSendSuper2(&v163, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = qword_1ECE02220;
    v59 = qword_1ECE02228;
    v60 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, v59, v60);
      v62 = ViewGraph.preferenceBridge.getter();
      if (!v62 || (v63 = v62, swift_release(), v56 != v63))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v64 = swift_release();
      if ((v60 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, v60 & 1);
      if ((v60 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v64, v65);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
LABEL_10:
        v66 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v4 & *v55) + 0x110));
        v67 = *v66;
        *(_OWORD *)v66 = v165;
        outlined consume of EnvironmentValues?(v67);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v165 = v58;
    *((_QWORD *)&v165 + 1) = v59;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
    goto LABEL_10;
  }
LABEL_11:
  v68 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v69 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v70 = (char **)(v69 + 24);
  swift_beginAccess();
  v71 = *(char **)(v69 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v69 + 24) = v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    *v70 = v71;
  }
  v74 = *((_QWORD *)v71 + 2);
  v73 = *((_QWORD *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *v70 = v71;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v76 = v75;
  v77 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v71 + 2) = v74 + 1;
  v78 = &v71[24 * v74];
  *((_QWORD *)v78 + 4) = v76;
  *((_QWORD *)v78 + 5) = v77;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  v79 = *(_QWORD *)((*v4 & *v68) + 0x210);
  swift_unknownObjectWeakAssign();
  v80 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x188));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x190));
  swift_unknownObjectWeakAssign();
  v83 = v82;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    swift_unknownObjectWeakAssign();

  }
  v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    v87 = v86;
    v88 = *(void (**)(uint64_t))((*v4 & *v86) + 0x1D0);
    v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  v90 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1A0));
  v91 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v90 + 40) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v92 = FocusBridge.host.getter();
  if (v92)
  {
    v94 = (void *)v92;
    v95 = v93;
    v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v97 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1A8));
  v98 = swift_unknownObjectWeakAssign();
  v99 = MEMORY[0x18D760234](v98);
  if (!v99)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = (void *)v99;
  v101 = swift_getObjectType();
  v102 = v97;
  swift_retain();

  if (((*(uint64_t (**)(void))(v101 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v103 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x1F0));
  v110 = swift_unknownObjectWeakAssign();
  v111 = MEMORY[0x18D760234](v110);
  if (!v111)
    goto LABEL_48;
  v112 = (void *)v111;
  v113 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v114 = objc_msgSend(v68, sel_traitCollection);
  v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (v116 = objc_msgSend(v68, sel_traitCollection),
        v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>(0);
    v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v120 = *(_QWORD *)((*v4 & *v68) + 0x200);
    v121 = *(void **)((char *)v68 + v120);
    *(_QWORD *)((char *)v68 + v120) = v119;

  }
  v122 = *(char **)((char *)v68 + v79);
  v123 = MEMORY[0x18D760234](&v122[direct field offset for ContextMenuBridge.host]);
  if (!v123)
LABEL_49:
    __break(1u);
  v124 = (void *)v123;
  v125 = swift_getObjectType();
  v126 = v122;
  swift_retain();

  if (((*(uint64_t (**)(void))(v125 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v127 = *(char **)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x220));
  *(_QWORD *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v54;
  v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v128, v129);
  v130 = v127;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v131 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v4 & *v68) + 0x78));
  v132 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v131 + 24) = v132;
  swift_unknownObjectWeakAssign();
  v133 = *(_QWORD *)((*v4 & *v68) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v131 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v134 = (void *)objc_opt_self();
  v135 = objc_msgSend(v134, sel_defaultCenter);
  v136 = v68;
  v137 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v136, sel_willBeginSnapshotSession, v137, 0);

  v138 = v136;
  v139 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_didEndSnapshotSession, v139, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v141 = (void *)*MEMORY[0x1E0C99720];
  v142 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v142;
  v143 = (void *)*MEMORY[0x1E0DC5320];
  v144 = v141;
  v145 = v142;
  v146 = v143;
  v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v147[2] = 3;
  v147[6] = v146;
  v148 = v147[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v148, 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[5], 0);
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_externalEnvironmentDidChange, v147[6], 0);
  swift_bridgeObjectRelease_n();
  v149 = *(_QWORD *)((char *)v68 + v133);
  v150 = *(_QWORD *)(v149 + 48);
  if (v150)
  {
    v151 = v138;
    swift_retain();
    objc_msgSend(v151, sel_addGestureRecognizer_, v150);
  }
  else
  {
    v152 = v138;
    swift_retain();
  }
  objc_msgSend(v138, sel_addGestureRecognizer_, *(_QWORD *)(v149 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v153 = objc_msgSend(v134, sel_defaultCenter);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v153, sel_addObserver_selector_name_object_, v138, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v154 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v155 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v155)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v155; ++i)
    {
      v157 = *(_QWORD *)(v154 + 8 * i + 32);
      objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityBooleanDidChange_, v157, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v138, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v158 = one-time initialization token for didUpdateListLayout;
  v159 = v138;
  if (v158 != -1)
    swift_once();
  objc_msgSend(v135, sel_addObserver_selector_name_object_, v159, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v160 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v160, (uint64_t)v164);
  v164[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v164, (uint64_t)v159);
  swift_endAccess();

  static Update.end()();
  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(v162, &lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, &lazy cache variable for type metadata for <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0);
  return v159;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  Class v10;
  id v11;
  uint64_t v12;
  Class v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  uint64_t inited;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  id v146;
  id v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t ObjectType;
  unint64_t v164;
  objc_super v166;
  _BYTE v167[16];
  __int128 v168;
  uint64_t v169;
  ValueMetadata *v170;
  unint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v11 = objc_allocWithZone(v10);
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>);
  v12 = *(_QWORD *)((*v2 & *v4) + 0x190);
  type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v14 = objc_allocWithZone(v13);
  *(_QWORD *)((char *)v4 + v12) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v15 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = v18;
  EnvironmentValues.init()();
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_QWORD *)(v16 + 136) = 1;
  *(_DWORD *)(v16 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_WORD *)(v16 + 176) = 1;
  *(_QWORD *)((char *)v4 + v15) = v16;
  v19 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for DragAndDropBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for TooltipBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for EditMenuBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(_QWORD *)(v26 + 24) = v17;
  *(_QWORD *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v25) = v26;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  v29 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for PencilEventsBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)((char *)v4 + v31) = v32;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ContextMenuBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone(v34), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v35 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v35) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v36 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v36 = 0;
  v36[8] = 0;
  *((_DWORD *)v36 + 3) = 0;
  v37 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v38 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v17);
  *v37 = 0;
  v37[1] = v38;
  v37[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v39 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  v40 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v4 + *(_QWORD *)((*v2 & *v4) + 0x60), (uint64_t (*)(_QWORD))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v168, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, lazy protocol witness table accessor for type ModifiedContent<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v168 = v43;
  *((_QWORD *)&v168 + 1) = v45;
  v169 = v47;
  LOWORD(v170) = v49 & 0x101;
  BYTE2(v170) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v168 = 0;
  WORD4(v168) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v168 = 0uLL;
  v169 = 0;
  LOBYTE(v170) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v170 = &type metadata for HoverEventDispatcher;
  v171 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v168 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  v170 = &type metadata for PencilDoubleTapEventDispatcher;
  v171 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  v170 = &type metadata for PencilSqueezeEventDispatcher;
  v171 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v170 = &type metadata for KeyEventDispatcher;
  v171 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v168 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v166.receiver = v4;
  v166.super_class = v52;
  v53 = objc_msgSendSuper2(&v166, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = qword_1ECE02220;
    v59 = qword_1ECE02228;
    v60 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, v59, v60);
      v62 = ViewGraph.preferenceBridge.getter();
      if (!v62 || (v63 = v62, swift_release(), v56 != v63))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v64 = swift_release();
      if ((v60 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, v60 & 1);
      if ((v60 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v64, v65);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
LABEL_10:
        v66 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v2 & *v55) + 0x110));
        v67 = *v66;
        *(_OWORD *)v66 = v168;
        outlined consume of EnvironmentValues?(v67);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v168 = v58;
    *((_QWORD *)&v168 + 1) = v59;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
    goto LABEL_10;
  }
LABEL_11:
  v68 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v69 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v70 = (char **)(v69 + 24);
  swift_beginAccess();
  v71 = *(char **)(v69 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v69 + 24) = v71;
  v164 = v54;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    *v70 = v71;
  }
  v74 = *((_QWORD *)v71 + 2);
  v73 = *((_QWORD *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *v70 = v71;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v76 = v75;
  v77 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v71 + 2) = v74 + 1;
  v78 = &v71[24 * v74];
  *((_QWORD *)v78 + 4) = v76;
  *((_QWORD *)v78 + 5) = v77;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  v79 = *(_QWORD *)((*v2 & *v68) + 0x210);
  swift_unknownObjectWeakAssign();
  v80 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x188));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x190));
  swift_unknownObjectWeakAssign();
  v83 = v82;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    swift_unknownObjectWeakAssign();

  }
  v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v86)
  {
    v87 = v86;
    v88 = *(void (**)(uint64_t))((*v2 & *v86) + 0x1D0);
    v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  v90 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1A0));
  v91 = lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  *(_QWORD *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v90 + 40) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v92 = FocusBridge.host.getter();
  if (v92)
  {
    v94 = (void *)v92;
    v95 = v93;
    v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v97 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1A8));
  v98 = swift_unknownObjectWeakAssign();
  v99 = MEMORY[0x18D760234](v98);
  if (!v99)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = (void *)v99;
  v101 = swift_getObjectType();
  v102 = v97;
  swift_retain();

  if (((*(uint64_t (**)(void))(v101 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v103 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1F0));
  v110 = swift_unknownObjectWeakAssign();
  v111 = MEMORY[0x18D760234](v110);
  if (!v111)
    goto LABEL_48;
  v112 = (void *)v111;
  v113 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v114 = objc_msgSend(v68, sel_traitCollection);
  v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (v116 = objc_msgSend(v68, sel_traitCollection),
        v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for PointerBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t (*)(uint64_t))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, lazy protocol witness table accessor for type TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0> and conformance TestIDView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v120 = *(_QWORD *)((*v2 & *v68) + 0x200);
    v121 = *(void **)((char *)v68 + v120);
    *(_QWORD *)((char *)v68 + v120) = v119;

  }
  v122 = *(char **)((char *)v68 + v79);
  v123 = MEMORY[0x18D760234](&v122[direct field offset for ContextMenuBridge.host]);
  if (!v123)
LABEL_49:
    __break(1u);
  v124 = (void *)v123;
  v125 = swift_getObjectType();
  v126 = v122;
  swift_retain();

  if (((*(uint64_t (**)(void))(v125 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v127 = *(char **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x220));
  *(_QWORD *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v164;
  v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v128, v129);
  v130 = v127;
  swift_retain();
  v131 = v2;
  static Update.ensure<A>(_:)();

  swift_release();
  v132 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x78));
  v133 = lazy protocol witness table accessor for type _UIHostingView<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v132 + 24) = v133;
  swift_unknownObjectWeakAssign();
  v134 = *(_QWORD *)((*v131 & *v68) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v132 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v135 = (void *)objc_opt_self();
  v136 = objc_msgSend(v135, sel_defaultCenter);
  v137 = v68;
  v138 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v137, sel_willBeginSnapshotSession, v138, 0);

  v139 = v137;
  v140 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_didEndSnapshotSession, v140, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v142 = (void *)*MEMORY[0x1E0C99720];
  v143 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v143;
  v144 = (void *)*MEMORY[0x1E0DC5320];
  v145 = v142;
  v146 = v143;
  v147 = v144;
  v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v148[2] = 3;
  v148[6] = v147;
  v149 = v148[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v149, 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[5], 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[6], 0);
  swift_bridgeObjectRelease_n();
  v150 = *(_QWORD *)((char *)v68 + v134);
  v151 = *(_QWORD *)(v150 + 48);
  if (v151)
  {
    v152 = v139;
    swift_retain();
    objc_msgSend(v152, sel_addGestureRecognizer_, v151);
  }
  else
  {
    v153 = v139;
    swift_retain();
  }
  objc_msgSend(v139, sel_addGestureRecognizer_, *(_QWORD *)(v150 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v154 = objc_msgSend(v135, sel_defaultCenter);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v155 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v156 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v156)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v156; ++i)
    {
      v158 = *(_QWORD *)(v155 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityBooleanDidChange_, v158, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v159 = one-time initialization token for didUpdateListLayout;
  v160 = v139;
  if (v159 != -1)
    swift_once();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v160, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v161 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v161, (uint64_t)v167);
  v167[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v167, (uint64_t)v160);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  return v160;
}

{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char **v71;
  char *v72;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  Class v119;
  id v120;
  uint64_t v121;
  void *v122;
  char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  uint64_t inited;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  id v146;
  id v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v163;
  uint64_t ObjectType;
  objc_super v165;
  _BYTE v166[16];
  __int128 v167;
  uint64_t v168;
  ValueMetadata *v169;
  unint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v5 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v4) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x90)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x98)) = 0;
  v6 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA0);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA8)) = 0;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC8)) = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD0)) = 0;
  v7 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD8);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE0);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x100)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x108)) = -1;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x138)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x148)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x150)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x158)) = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x160)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x168)) = 0;
  v9 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x170);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x178)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x180)) = 2;
  v10 = *(_QWORD *)((*v3 & *v5) + 0x188);
  type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v12 = objc_allocWithZone(v11);
  *(_QWORD *)((char *)v5 + v10) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>);
  v13 = *(_QWORD *)((*v3 & *v5) + 0x190);
  type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)((char *)v5 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, ActionSheet.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for DeprecatedAlertBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, Alert.Presentation>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x198)) = 1;
  v16 = *(_QWORD *)((*v3 & *v5) + 0x1A0);
  type metadata accessor for FocusBridge();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  swift_unknownObjectWeakInit();
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = v18;
  *(_QWORD *)(v17 + 64) = v19;
  EnvironmentValues.init()();
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_QWORD *)(v17 + 136) = 1;
  *(_DWORD *)(v17 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v17 + 160) = 0;
  *(_QWORD *)(v17 + 168) = 0;
  *(_WORD *)(v17 + 176) = 1;
  *(_QWORD *)((char *)v5 + v16) = v17;
  v20 = *(_QWORD *)((*v3 & *v5) + 0x1A8);
  type metadata accessor for DragAndDropBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v5 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1B0)) = 0;
  v22 = *(_QWORD *)((*v3 & *v5) + 0x1B8);
  type metadata accessor for TooltipBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v5 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  v24 = *(_QWORD *)((*v3 & *v5) + 0x1C0);
  type metadata accessor for EditMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v5 + v24) = objc_msgSend(objc_allocWithZone(v25), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1D0)) = 0;
  v26 = *(_QWORD *)((*v3 & *v5) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  v27 = swift_allocObject();
  *(_WORD *)(v27 + 16) = 2;
  *(_QWORD *)(v27 + 24) = v18;
  *(_QWORD *)(v27 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + v26) = v27;
  swift_weakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1E8)) = 0;
  v28 = *(_QWORD *)((*v3 & *v5) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v5 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  v30 = *(_QWORD *)((*v3 & *v5) + 0x1F8);
  type metadata accessor for PencilEventsBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v5 + v30) = objc_msgSend(objc_allocWithZone(v31), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x200)) = 0;
  v32 = *(_QWORD *)((*v3 & *v5) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v33 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v18);
  *(_QWORD *)((char *)v5 + v32) = v33;
  v34 = *(_QWORD *)((*v3 & *v5) + 0x210);
  type metadata accessor for ContextMenuBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  *(_QWORD *)((char *)v5 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x218)) = 0;
  v36 = *(_QWORD *)((*v3 & *v5) + 0x220);
  *(_QWORD *)((char *)v5 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x228)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x230)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x238)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x248)) = 0;
  v37 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x250);
  *(_QWORD *)v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  v38 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x258));
  v39 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v18);
  *v38 = 0;
  v38[1] = v39;
  v38[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v40 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x270);
  *(_QWORD *)v40 = 0;
  v40[8] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x278)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x280)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x288)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x290)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x298)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x2A0)) = 0;
  v163 = a1;
  v41 = outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>(a1, (uint64_t)v5 + *(_QWORD *)((*v3 & *v5) + 0x60), (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  v42 = MEMORY[0x18D75B908](v41);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v167, v42);
  type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v43 = swift_retain();
  v44 = specialized FocusViewGraph.init(graph:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_release();
  *(_QWORD *)&v167 = v44;
  *((_QWORD *)&v167 + 1) = v46;
  v168 = v48;
  LOWORD(v169) = v50 & 0x101;
  BYTE2(v169) = BYTE2(v50) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v167 = 0;
  WORD4(v167) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v167 = 0uLL;
  v168 = 0;
  LOBYTE(v169) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x78)) = EventBindingManager.__allocating_init()();
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  v169 = &type metadata for HoverEventDispatcher;
  v170 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v167 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilDoubleTapEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilSqueezeEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v52 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  v169 = &type metadata for KeyEventDispatcher;
  v170 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v167 = v52;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
  v165.receiver = v5;
  v165.super_class = v53;
  v54 = objc_msgSendSuper2(&v165, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v55 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v56 = v54;
  ViewRendererHost.initializeViewGraph()();
  v57 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v58 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v59 = qword_1ECE02220;
    v60 = qword_1ECE02228;
    v61 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v62 = swift_retain();
      outlined copy of RepresentableContextValues?(v62, v58, v59, v60, v61);
      v63 = ViewGraph.preferenceBridge.getter();
      if (!v63 || (v64 = v63, swift_release(), v57 != v64))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v65 = swift_release();
      if ((v61 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v65 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, v61 & 1);
      if ((v61 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v65, v66);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
        outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
LABEL_10:
        v67 = (_QWORD *)((char *)v56 + *(_QWORD *)((*v3 & *v56) + 0x110));
        v68 = *v67;
        *(_OWORD *)v67 = v167;
        outlined consume of EnvironmentValues?(v68);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v167 = v59;
    *((_QWORD *)&v167 + 1) = v60;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 0);
    outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
    goto LABEL_10;
  }
LABEL_11:
  v69 = v56;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v70 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v71 = (char **)(v70 + 24);
  swift_beginAccess();
  v72 = *(char **)(v70 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v70 + 24) = v72;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
    *v71 = v72;
  }
  v75 = *((_QWORD *)v72 + 2);
  v74 = *((_QWORD *)v72 + 3);
  if (v75 >= v74 >> 1)
  {
    v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v72);
    *v71 = v72;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v77 = v76;
  v78 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v72 + 2) = v75 + 1;
  v79 = &v72[24 * v75];
  *((_QWORD *)v79 + 4) = v77;
  *((_QWORD *)v79 + 5) = v78;
  *((_DWORD *)v79 + 12) = -1;
  swift_release();
  swift_release();
  v80 = *(_QWORD *)((*v3 & *v69) + 0x210);
  swift_unknownObjectWeakAssign();
  v81 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x188));
  swift_unknownObjectWeakAssign();
  v82 = v81;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v83 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x190));
  swift_unknownObjectWeakAssign();
  v84 = v83;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v85)
  {
    v86 = v85;
    swift_unknownObjectWeakAssign();

  }
  v87 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v87)
  {
    v88 = v87;
    v89 = *(void (**)(uint64_t))((*v3 & *v87) + 0x1D0);
    v90 = swift_retain();
    v89(v90);

    swift_release();
  }
  v91 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1A0));
  v92 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v91 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v91 + 40) = v92;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v93 = FocusBridge.host.getter();
  if (v93)
  {
    v95 = (void *)v93;
    v96 = v94;
    v97 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v96 + 8) + 16))(v97);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v98 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1A8));
  v99 = swift_unknownObjectWeakAssign();
  v100 = MEMORY[0x18D760234](v99);
  if (!v100)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v101 = (void *)v100;
  v102 = swift_getObjectType();
  v103 = v98;
  swift_retain();

  if (((*(uint64_t (**)(void))(v102 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v104 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v105 = v104;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v106 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v107 = v106;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v108 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v109 = v108;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v110 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1F0));
  v111 = swift_unknownObjectWeakAssign();
  v112 = MEMORY[0x18D760234](v111);
  if (!v112)
    goto LABEL_48;
  v113 = (void *)v112;
  v114 = v110;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v115 = objc_msgSend(v69, sel_traitCollection);
  v116 = objc_msgSend(v115, sel_userInterfaceIdiom);

  if (v116 == (id)1
    || (v117 = objc_msgSend(v69, sel_traitCollection),
        v118 = objc_msgSend(v117, sel_userInterfaceIdiom),
        v117,
        v118 == (id)6))
  {
    type metadata accessor for PointerBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>(0);
    v120 = objc_msgSend(objc_allocWithZone(v119), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v121 = *(_QWORD *)((*v3 & *v69) + 0x200);
    v122 = *(void **)((char *)v69 + v121);
    *(_QWORD *)((char *)v69 + v121) = v120;

  }
  v123 = *(char **)((char *)v69 + v80);
  v124 = MEMORY[0x18D760234](&v123[direct field offset for ContextMenuBridge.host]);
  if (!v124)
LABEL_49:
    __break(1u);
  v125 = (void *)v124;
  v126 = swift_getObjectType();
  v127 = v123;
  swift_retain();

  if (((*(uint64_t (**)(void))(v126 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v128 = *(char **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x220));
  *(_QWORD *)&v128[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v55;
  v129 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v129, v130);
  v131 = v128;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v132 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x78));
  v133 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v132 + 24) = v133;
  swift_unknownObjectWeakAssign();
  v134 = *(_QWORD *)((*v3 & *v69) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v132 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v135 = (void *)objc_opt_self();
  v136 = objc_msgSend(v135, sel_defaultCenter);
  v137 = v69;
  v138 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v137, sel_willBeginSnapshotSession, v138, 0);

  v139 = v137;
  v140 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_didEndSnapshotSession, v140, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v142 = (void *)*MEMORY[0x1E0C99720];
  v143 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v143;
  v144 = (void *)*MEMORY[0x1E0DC5320];
  v145 = v142;
  v146 = v143;
  v147 = v144;
  v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v148[2] = 3;
  v148[6] = v147;
  v149 = v148[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v149, 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[5], 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[6], 0);
  swift_bridgeObjectRelease_n();
  v150 = *(_QWORD *)((char *)v69 + v134);
  v151 = *(_QWORD *)(v150 + 48);
  if (v151)
  {
    v152 = v139;
    swift_retain();
    objc_msgSend(v152, sel_addGestureRecognizer_, v151);
  }
  else
  {
    v153 = v139;
    swift_retain();
  }
  objc_msgSend(v139, sel_addGestureRecognizer_, *(_QWORD *)(v150 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v154 = objc_msgSend(v135, sel_defaultCenter);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v155 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v156 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v156)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v156; ++i)
    {
      v158 = *(_QWORD *)(v155 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityBooleanDidChange_, v158, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v159 = one-time initialization token for didUpdateListLayout;
  v160 = v139;
  if (v159 != -1)
    swift_once();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v160, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v161 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v161, (uint64_t)v166);
  v166[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v166, (uint64_t)v160);
  swift_endAccess();

  static Update.end()();
  outlined destroy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(v163, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  return v160;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  objc_class *v50;
  id v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  Class v116;
  id v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  _QWORD *v135;
  void *v136;
  _QWORD *v137;
  void *v138;
  uint64_t inited;
  void *v140;
  void *v141;
  void *v142;
  id v143;
  id v144;
  id v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t i;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t ObjectType;
  unint64_t v162;
  objc_super v164;
  _BYTE v165[16];
  __int128 v166;
  uint64_t v167;
  ValueMetadata *v168;
  unint64_t v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<TabItem.RootView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DragAndDropBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v19 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TooltipBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EditMenuBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(_QWORD *)(v24 + 24) = v15;
  *(_QWORD *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v23) = v24;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PencilEventsBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v29 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v29) = v30;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ContextMenuBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v34 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  v35 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v35 = 0;
  v35[1] = v36;
  v35[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v37 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  v38 = outlined init with copy of TabItem.RootView(a1, (uint64_t)v4 + *(_QWORD *)((*v2 & *v4) + 0x60));
  v39 = MEMORY[0x18D75B908](v38);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v166, v39);
  type metadata accessor for ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v40 = swift_retain();
  v41 = specialized FocusViewGraph.init(graph:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release();
  *(_QWORD *)&v166 = v41;
  *((_QWORD *)&v166 + 1) = v43;
  v167 = v45;
  LOWORD(v168) = v47 & 0x101;
  BYTE2(v168) = BYTE2(v47) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v166 = 0;
  WORD4(v166) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v166 = 0uLL;
  v167 = 0;
  LOBYTE(v168) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v168 = &type metadata for HoverEventDispatcher;
  v169 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v166 = v48;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v168 = &type metadata for PencilDoubleTapEventDispatcher;
  v169 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v168 = &type metadata for PencilSqueezeEventDispatcher;
  v169 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v49 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v168 = &type metadata for KeyEventDispatcher;
  v169 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v166 = v49;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v164.receiver = v4;
  v164.super_class = v50;
  v51 = objc_msgSendSuper2(&v164, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v52 = lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  v53 = v51;
  ViewRendererHost.initializeViewGraph()();
  v54 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v55 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v56 = qword_1ECE02220;
    v57 = qword_1ECE02228;
    v58 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v59 = swift_retain();
      outlined copy of RepresentableContextValues?(v59, v55, v56, v57, v58);
      v60 = ViewGraph.preferenceBridge.getter();
      if (!v60 || (v61 = v60, swift_release(), v54 != v61))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v62 = swift_release();
      if ((v58 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v62 = outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, v58 & 1);
      if ((v58 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v62, v63);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
LABEL_10:
        v64 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v2 & *v53) + 0x110));
        v65 = *v64;
        *(_OWORD *)v64 = v166;
        outlined consume of EnvironmentValues?(v65);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v166 = v56;
    *((_QWORD *)&v166 + 1) = v57;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 0);
    outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
    goto LABEL_10;
  }
LABEL_11:
  v66 = v53;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v67 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v68 = (char **)(v67 + 24);
  swift_beginAccess();
  v69 = *(char **)(v67 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v67 + 24) = v69;
  v162 = v52;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
    *v68 = v69;
  }
  v72 = *((_QWORD *)v69 + 2);
  v71 = *((_QWORD *)v69 + 3);
  if (v72 >= v71 >> 1)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v69);
    *v68 = v69;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v74 = v73;
  v75 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v69 + 2) = v72 + 1;
  v76 = &v69[24 * v72];
  *((_QWORD *)v76 + 4) = v74;
  *((_QWORD *)v76 + 5) = v75;
  *((_DWORD *)v76 + 12) = -1;
  swift_release();
  swift_release();
  v77 = *(_QWORD *)((*v2 & *v66) + 0x210);
  swift_unknownObjectWeakAssign();
  v78 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x188));
  swift_unknownObjectWeakAssign();
  v79 = v78;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v80 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x190));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    v83 = v82;
    swift_unknownObjectWeakAssign();

  }
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    v86 = *(void (**)(uint64_t))((*v2 & *v84) + 0x1D0);
    v87 = swift_retain();
    v86(v87);

    swift_release();
  }
  v88 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1A0));
  v89 = lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v88 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v88 + 40) = v89;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v90 = FocusBridge.host.getter();
  if (v90)
  {
    v92 = (void *)v90;
    v93 = v91;
    v94 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v93 + 8) + 16))(v94);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v95 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1A8));
  v96 = swift_unknownObjectWeakAssign();
  v97 = MEMORY[0x18D760234](v96);
  if (!v97)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v98 = (void *)v97;
  v99 = swift_getObjectType();
  v100 = v95;
  swift_retain();

  if (((*(uint64_t (**)(void))(v99 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v101 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v102 = v101;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v103 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1F0));
  v108 = swift_unknownObjectWeakAssign();
  v109 = MEMORY[0x18D760234](v108);
  if (!v109)
    goto LABEL_48;
  v110 = (void *)v109;
  v111 = v107;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v112 = objc_msgSend(v66, sel_traitCollection);
  v113 = objc_msgSend(v112, sel_userInterfaceIdiom);

  if (v113 == (id)1
    || (v114 = objc_msgSend(v66, sel_traitCollection),
        v115 = objc_msgSend(v114, sel_userInterfaceIdiom),
        v114,
        v115 == (id)6))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PointerBridge<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v117 = objc_msgSend(objc_allocWithZone(v116), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v118 = *(_QWORD *)((*v2 & *v66) + 0x200);
    v119 = *(void **)((char *)v66 + v118);
    *(_QWORD *)((char *)v66 + v118) = v117;

  }
  v120 = *(char **)((char *)v66 + v77);
  v121 = MEMORY[0x18D760234](&v120[direct field offset for ContextMenuBridge.host]);
  if (!v121)
LABEL_49:
    __break(1u);
  v122 = (void *)v121;
  v123 = swift_getObjectType();
  v124 = v120;
  swift_retain();

  if (((*(uint64_t (**)(void))(v123 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v125 = *(char **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x220));
  *(_QWORD *)&v125[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v162;
  v126 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v126, v127);
  v128 = v125;
  swift_retain();
  v129 = v2;
  static Update.ensure<A>(_:)();

  swift_release();
  v130 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x78));
  v131 = lazy protocol witness table accessor for type _UIHostingView<TabItem.RootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v130 + 24) = v131;
  swift_unknownObjectWeakAssign();
  v132 = *(_QWORD *)((*v129 & *v66) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v130 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v133 = (void *)objc_opt_self();
  v134 = objc_msgSend(v133, sel_defaultCenter);
  v135 = v66;
  v136 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v135, sel_willBeginSnapshotSession, v136, 0);

  v137 = v135;
  v138 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_didEndSnapshotSession, v138, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v140 = (void *)*MEMORY[0x1E0C99720];
  v141 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v141;
  v142 = (void *)*MEMORY[0x1E0DC5320];
  v143 = v140;
  v144 = v141;
  v145 = v142;
  v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v146[2] = 3;
  v146[6] = v145;
  v147 = v146[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v147, 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[5], 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[6], 0);
  swift_bridgeObjectRelease_n();
  v148 = *(_QWORD *)((char *)v66 + v132);
  v149 = *(_QWORD *)(v148 + 48);
  if (v149)
  {
    v150 = v137;
    swift_retain();
    objc_msgSend(v150, sel_addGestureRecognizer_, v149);
  }
  else
  {
    v151 = v137;
    swift_retain();
  }
  objc_msgSend(v137, sel_addGestureRecognizer_, *(_QWORD *)(v148 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v152 = objc_msgSend(v133, sel_defaultCenter);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v153 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v154 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v154)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v154; ++i)
    {
      v156 = *(_QWORD *)(v153 + 8 * i + 32);
      objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityBooleanDidChange_, v156, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v157 = one-time initialization token for didUpdateListLayout;
  v158 = v137;
  if (v157 != -1)
    swift_once();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v158, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v159 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v159, (uint64_t)v165);
  v165[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v165, (uint64_t)v158);
  swift_endAccess();

  static Update.end()();
  outlined destroy of TabItem.RootView(a1);
  return v158;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  objc_class *v50;
  id v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  Class v116;
  id v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  _QWORD *v135;
  void *v136;
  _QWORD *v137;
  void *v138;
  uint64_t inited;
  void *v140;
  void *v141;
  void *v142;
  id v143;
  id v144;
  id v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t i;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t ObjectType;
  unint64_t v162;
  objc_super v164;
  _BYTE v165[16];
  __int128 v166;
  uint64_t v167;
  ValueMetadata *v168;
  unint64_t v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<DocumentGroupsIntroRootView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DragAndDropBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v19 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TooltipBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EditMenuBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(_QWORD *)(v24 + 24) = v15;
  *(_QWORD *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v23) = v24;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PencilEventsBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v29 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v29) = v30;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ContextMenuBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v34 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  v35 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v35 = 0;
  v35[1] = v36;
  v35[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v37 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  v38 = outlined init with copy of DocumentGroupsIntroRootView(a1, (uint64_t)v4 + *(_QWORD *)((*v2 & *v4) + 0x60));
  v39 = MEMORY[0x18D75B908](v38);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v166, v39);
  type metadata accessor for ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DocumentGroupsIntroRootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v40 = swift_retain();
  v41 = specialized FocusViewGraph.init(graph:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release();
  *(_QWORD *)&v166 = v41;
  *((_QWORD *)&v166 + 1) = v43;
  v167 = v45;
  LOWORD(v168) = v47 & 0x101;
  BYTE2(v168) = BYTE2(v47) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v166 = 0;
  WORD4(v166) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v166 = 0uLL;
  v167 = 0;
  LOBYTE(v168) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v168 = &type metadata for HoverEventDispatcher;
  v169 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v166 = v48;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v168 = &type metadata for PencilDoubleTapEventDispatcher;
  v169 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v168 = &type metadata for PencilSqueezeEventDispatcher;
  v169 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v49 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v168 = &type metadata for KeyEventDispatcher;
  v169 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v166 = v49;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v164.receiver = v4;
  v164.super_class = v50;
  v51 = objc_msgSendSuper2(&v164, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v52 = lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
  v53 = v51;
  ViewRendererHost.initializeViewGraph()();
  v54 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v55 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v56 = qword_1ECE02220;
    v57 = qword_1ECE02228;
    v58 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v59 = swift_retain();
      outlined copy of RepresentableContextValues?(v59, v55, v56, v57, v58);
      v60 = ViewGraph.preferenceBridge.getter();
      if (!v60 || (v61 = v60, swift_release(), v54 != v61))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v62 = swift_release();
      if ((v58 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v62 = outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, v58 & 1);
      if ((v58 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v62, v63);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
LABEL_10:
        v64 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v2 & *v53) + 0x110));
        v65 = *v64;
        *(_OWORD *)v64 = v166;
        outlined consume of EnvironmentValues?(v65);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v166 = v56;
    *((_QWORD *)&v166 + 1) = v57;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 0);
    outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
    goto LABEL_10;
  }
LABEL_11:
  v66 = v53;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v67 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v68 = (char **)(v67 + 24);
  swift_beginAccess();
  v69 = *(char **)(v67 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v67 + 24) = v69;
  v162 = v52;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
    *v68 = v69;
  }
  v72 = *((_QWORD *)v69 + 2);
  v71 = *((_QWORD *)v69 + 3);
  if (v72 >= v71 >> 1)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v69);
    *v68 = v69;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v74 = v73;
  v75 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v69 + 2) = v72 + 1;
  v76 = &v69[24 * v72];
  *((_QWORD *)v76 + 4) = v74;
  *((_QWORD *)v76 + 5) = v75;
  *((_DWORD *)v76 + 12) = -1;
  swift_release();
  swift_release();
  v77 = *(_QWORD *)((*v2 & *v66) + 0x210);
  swift_unknownObjectWeakAssign();
  v78 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x188));
  swift_unknownObjectWeakAssign();
  v79 = v78;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v80 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x190));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    v83 = v82;
    swift_unknownObjectWeakAssign();

  }
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    v86 = *(void (**)(uint64_t))((*v2 & *v84) + 0x1D0);
    v87 = swift_retain();
    v86(v87);

    swift_release();
  }
  v88 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1A0));
  v89 = lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v88 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v88 + 40) = v89;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v90 = FocusBridge.host.getter();
  if (v90)
  {
    v92 = (void *)v90;
    v93 = v91;
    v94 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v93 + 8) + 16))(v94);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v95 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1A8));
  v96 = swift_unknownObjectWeakAssign();
  v97 = MEMORY[0x18D760234](v96);
  if (!v97)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v98 = (void *)v97;
  v99 = swift_getObjectType();
  v100 = v95;
  swift_retain();

  if (((*(uint64_t (**)(void))(v99 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v101 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v102 = v101;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v103 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1F0));
  v108 = swift_unknownObjectWeakAssign();
  v109 = MEMORY[0x18D760234](v108);
  if (!v109)
    goto LABEL_48;
  v110 = (void *)v109;
  v111 = v107;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v112 = objc_msgSend(v66, sel_traitCollection);
  v113 = objc_msgSend(v112, sel_userInterfaceIdiom);

  if (v113 == (id)1
    || (v114 = objc_msgSend(v66, sel_traitCollection),
        v115 = objc_msgSend(v114, sel_userInterfaceIdiom),
        v114,
        v115 == (id)6))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PointerBridge<DocumentGroupsIntroRootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type DocumentGroupsIntroRootView and conformance DocumentGroupsIntroRootView, (uint64_t)&type metadata for DocumentGroupsIntroRootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v117 = objc_msgSend(objc_allocWithZone(v116), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v118 = *(_QWORD *)((*v2 & *v66) + 0x200);
    v119 = *(void **)((char *)v66 + v118);
    *(_QWORD *)((char *)v66 + v118) = v117;

  }
  v120 = *(char **)((char *)v66 + v77);
  v121 = MEMORY[0x18D760234](&v120[direct field offset for ContextMenuBridge.host]);
  if (!v121)
LABEL_49:
    __break(1u);
  v122 = (void *)v121;
  v123 = swift_getObjectType();
  v124 = v120;
  swift_retain();

  if (((*(uint64_t (**)(void))(v123 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v125 = *(char **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x220));
  *(_QWORD *)&v125[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v162;
  v126 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v126, v127);
  v128 = v125;
  swift_retain();
  v129 = v2;
  static Update.ensure<A>(_:)();

  swift_release();
  v130 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x78));
  v131 = lazy protocol witness table accessor for type _UIHostingView<DocumentGroupsIntroRootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v130 + 24) = v131;
  swift_unknownObjectWeakAssign();
  v132 = *(_QWORD *)((*v129 & *v66) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v130 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v133 = (void *)objc_opt_self();
  v134 = objc_msgSend(v133, sel_defaultCenter);
  v135 = v66;
  v136 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v135, sel_willBeginSnapshotSession, v136, 0);

  v137 = v135;
  v138 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_didEndSnapshotSession, v138, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v140 = (void *)*MEMORY[0x1E0C99720];
  v141 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v141;
  v142 = (void *)*MEMORY[0x1E0DC5320];
  v143 = v140;
  v144 = v141;
  v145 = v142;
  v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v146[2] = 3;
  v146[6] = v145;
  v147 = v146[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v147, 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[5], 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[6], 0);
  swift_bridgeObjectRelease_n();
  v148 = *(_QWORD *)((char *)v66 + v132);
  v149 = *(_QWORD *)(v148 + 48);
  if (v149)
  {
    v150 = v137;
    swift_retain();
    objc_msgSend(v150, sel_addGestureRecognizer_, v149);
  }
  else
  {
    v151 = v137;
    swift_retain();
  }
  objc_msgSend(v137, sel_addGestureRecognizer_, *(_QWORD *)(v148 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v152 = objc_msgSend(v133, sel_defaultCenter);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v153 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v154 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v154)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v154; ++i)
    {
      v156 = *(_QWORD *)(v153 + 8 * i + 32);
      objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityBooleanDidChange_, v156, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v157 = one-time initialization token for didUpdateListLayout;
  v158 = v137;
  if (v157 != -1)
    swift_once();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v158, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v159 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v159, (uint64_t)v165);
  v165[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v165, (uint64_t)v158);
  swift_endAccess();

  static Update.end()();
  outlined destroy of DocumentGroupsIntroRootView(a1);
  return v158;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  Class v118;
  id v119;
  uint64_t v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  uint64_t inited;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  id v146;
  id v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t ObjectType;
  unint64_t v164;
  objc_super v166;
  _BYTE v167[16];
  __int128 v168;
  uint64_t v169;
  ValueMetadata *v170;
  unint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<_ViewList_View, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<_ViewList_View, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  v18 = MEMORY[0x1E0CE0A40];
  v19 = MEMORY[0x1E0CE0A30];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for DragAndDropBridge<_ViewList_View>, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TooltipBridge<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EditMenuBridge<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(_QWORD *)(v26 + 24) = v15;
  *(_QWORD *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v25) = v26;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  v29 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PencilEventsBridge<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v31) = v32;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContextMenuBridge<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone(v34), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v35 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v35) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v36 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v36 = 0;
  v36[8] = 0;
  *((_DWORD *)v36 + 3) = 0;
  v37 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v38 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v37 = 0;
  v37[1] = v38;
  v37[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v39 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  v40 = outlined init with copy of _ViewList_View(a1, (uint64_t)v4 + *(_QWORD *)((*v2 & *v4) + 0x60));
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v168, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v168 = v43;
  *((_QWORD *)&v168 + 1) = v45;
  v169 = v47;
  LOWORD(v170) = v49 & 0x101;
  BYTE2(v170) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v168 = 0;
  WORD4(v168) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v168 = 0uLL;
  v169 = 0;
  LOBYTE(v170) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v170 = &type metadata for HoverEventDispatcher;
  v171 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v168 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  v170 = &type metadata for PencilDoubleTapEventDispatcher;
  v171 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  v170 = &type metadata for PencilSqueezeEventDispatcher;
  v171 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v170 = &type metadata for KeyEventDispatcher;
  v171 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v168 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v168);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v166.receiver = v4;
  v166.super_class = v52;
  v53 = objc_msgSendSuper2(&v166, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>();
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = qword_1ECE02220;
    v59 = qword_1ECE02228;
    v60 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, v59, v60);
      v62 = ViewGraph.preferenceBridge.getter();
      if (!v62 || (v63 = v62, swift_release(), v56 != v63))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v64 = swift_release();
      if ((v60 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, v60 & 1);
      if ((v60 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v64, v65);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
LABEL_10:
        v66 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v2 & *v55) + 0x110));
        v67 = *v66;
        *(_OWORD *)v66 = v168;
        outlined consume of EnvironmentValues?(v67);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v168 = v58;
    *((_QWORD *)&v168 + 1) = v59;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
    goto LABEL_10;
  }
LABEL_11:
  v68 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v69 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v70 = (char **)(v69 + 24);
  swift_beginAccess();
  v71 = *(char **)(v69 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v69 + 24) = v71;
  v164 = v54;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    *v70 = v71;
  }
  v74 = *((_QWORD *)v71 + 2);
  v73 = *((_QWORD *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *v70 = v71;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v76 = v75;
  v77 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v71 + 2) = v74 + 1;
  v78 = &v71[24 * v74];
  *((_QWORD *)v78 + 4) = v76;
  *((_QWORD *)v78 + 5) = v77;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  v79 = *(_QWORD *)((*v2 & *v68) + 0x210);
  swift_unknownObjectWeakAssign();
  v80 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x188));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x190));
  swift_unknownObjectWeakAssign();
  v83 = v82;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    swift_unknownObjectWeakAssign();

  }
  v86 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??);
  if (v86)
  {
    v87 = v86;
    v88 = *(void (**)(uint64_t))((*v2 & *v86) + 0x1D0);
    v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  v90 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1A0));
  v91 = lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>();
  *(_QWORD *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v90 + 40) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v92 = FocusBridge.host.getter();
  if (v92)
  {
    v94 = (void *)v92;
    v95 = v93;
    v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v97 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1A8));
  v98 = swift_unknownObjectWeakAssign();
  v99 = MEMORY[0x18D760234](v98);
  if (!v99)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = (void *)v99;
  v101 = swift_getObjectType();
  v102 = v97;
  swift_retain();

  if (((*(uint64_t (**)(void))(v101 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v103 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1F0));
  v110 = swift_unknownObjectWeakAssign();
  v111 = MEMORY[0x18D760234](v110);
  if (!v111)
    goto LABEL_48;
  v112 = (void *)v111;
  v113 = v109;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v114 = objc_msgSend(v68, sel_traitCollection);
  v115 = objc_msgSend(v114, sel_userInterfaceIdiom);

  if (v115 == (id)1
    || (v116 = objc_msgSend(v68, sel_traitCollection),
        v117 = objc_msgSend(v116, sel_userInterfaceIdiom),
        v116,
        v117 == (id)6))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PointerBridge<_ViewList_View>, MEMORY[0x1E0CE0A40], MEMORY[0x1E0CE0A30], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v119 = objc_msgSend(objc_allocWithZone(v118), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v120 = *(_QWORD *)((*v2 & *v68) + 0x200);
    v121 = *(void **)((char *)v68 + v120);
    *(_QWORD *)((char *)v68 + v120) = v119;

  }
  v122 = *(char **)((char *)v68 + v79);
  v123 = MEMORY[0x18D760234](&v122[direct field offset for ContextMenuBridge.host]);
  if (!v123)
LABEL_49:
    __break(1u);
  v124 = (void *)v123;
  v125 = swift_getObjectType();
  v126 = v122;
  swift_retain();

  if (((*(uint64_t (**)(void))(v125 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v127 = *(char **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x220));
  *(_QWORD *)&v127[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v164;
  v128 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v128, v129);
  v130 = v127;
  swift_retain();
  v131 = v2;
  static Update.ensure<A>(_:)();

  swift_release();
  v132 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x78));
  v133 = lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v132 + 24) = v133;
  swift_unknownObjectWeakAssign();
  v134 = *(_QWORD *)((*v131 & *v68) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v132 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v135 = (void *)objc_opt_self();
  v136 = objc_msgSend(v135, sel_defaultCenter);
  v137 = v68;
  v138 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v137, sel_willBeginSnapshotSession, v138, 0);

  v139 = v137;
  v140 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_didEndSnapshotSession, v140, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v142 = (void *)*MEMORY[0x1E0C99720];
  v143 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v143;
  v144 = (void *)*MEMORY[0x1E0DC5320];
  v145 = v142;
  v146 = v143;
  v147 = v144;
  v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v148[2] = 3;
  v148[6] = v147;
  v149 = v148[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v149, 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[5], 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[6], 0);
  swift_bridgeObjectRelease_n();
  v150 = *(_QWORD *)((char *)v68 + v134);
  v151 = *(_QWORD *)(v150 + 48);
  if (v151)
  {
    v152 = v139;
    swift_retain();
    objc_msgSend(v152, sel_addGestureRecognizer_, v151);
  }
  else
  {
    v153 = v139;
    swift_retain();
  }
  objc_msgSend(v139, sel_addGestureRecognizer_, *(_QWORD *)(v150 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v154 = objc_msgSend(v135, sel_defaultCenter);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v155 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v156 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v156)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v156; ++i)
    {
      v158 = *(_QWORD *)(v155 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityBooleanDidChange_, v158, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v159 = one-time initialization token for didUpdateListLayout;
  v160 = v139;
  if (v159 != -1)
    swift_once();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v160, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v161 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v161, (uint64_t)v167);
  v167[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v167, (uint64_t)v160);
  swift_endAccess();

  static Update.end()();
  outlined destroy of _ViewList_View(a1);
  return v160;
}

{
  _QWORD *v1;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char **v69;
  char *v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  void (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  Class v117;
  id v118;
  uint64_t v119;
  void *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  _QWORD *v135;
  void *v136;
  _QWORD *v137;
  void *v138;
  uint64_t inited;
  void *v140;
  void *v141;
  void *v142;
  id v143;
  id v144;
  id v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t i;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  objc_super v161;
  _BYTE v162[16];
  __int128 v163;
  uint64_t v164;
  ValueMetadata *v165;
  unint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v6 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v5) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x90)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x98)) = 0;
  v7 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA0);
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xA8)) = 0;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xB8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xC8)) = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD0)) = 0;
  v8 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xD8);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  v9 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE0);
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[32] = 1;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xE8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0xF8)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x100)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x108)) = -1;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x138)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x148)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x150)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x158)) = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x160)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x168)) = 0;
  v10 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x170);
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x178)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x180)) = 2;
  v11 = *(_QWORD *)((*v4 & *v6) + 0x188);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>());
  *(_QWORD *)((char *)v6 + v11) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, Alert.Presentation>);
  v13 = *(_QWORD *)((*v4 & *v6) + 0x190);
  v14 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v6 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x198)) = 1;
  v15 = *(_QWORD *)((*v4 & *v6) + 0x1A0);
  type metadata accessor for FocusBridge();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = v17;
  *(_QWORD *)(v16 + 64) = v18;
  EnvironmentValues.init()();
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_QWORD *)(v16 + 136) = 1;
  *(_DWORD *)(v16 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_WORD *)(v16 + 176) = 1;
  *(_QWORD *)((char *)v6 + v15) = v16;
  v19 = *(_QWORD *)((*v4 & *v6) + 0x1A8);
  type metadata accessor for DragAndDropBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1B0)) = 0;
  v21 = *(_QWORD *)((*v4 & *v6) + 0x1B8);
  type metadata accessor for TooltipBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v23 = *(_QWORD *)((*v4 & *v6) + 0x1C0);
  type metadata accessor for EditMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1D0)) = 0;
  v25 = *(_QWORD *)((*v4 & *v6) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(_QWORD *)(v26 + 24) = v17;
  *(_QWORD *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + v25) = v26;
  swift_weakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x1E8)) = 0;
  v27 = *(_QWORD *)((*v4 & *v6) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  v29 = *(_QWORD *)((*v4 & *v6) + 0x1F8);
  type metadata accessor for PencilEventsBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x200)) = 0;
  v31 = *(_QWORD *)((*v4 & *v6) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)((char *)v6 + v31) = v32;
  v33 = *(_QWORD *)((*v4 & *v6) + 0x210);
  type metadata accessor for ContextMenuBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  *(_QWORD *)((char *)v6 + v33) = objc_msgSend(objc_allocWithZone(v34), sel_init);
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x218)) = 0;
  v35 = *(_QWORD *)((*v4 & *v6) + 0x220);
  *(_QWORD *)((char *)v6 + v35) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x228)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x230)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x238)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x248)) = 0;
  v36 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x250);
  *(_QWORD *)v36 = 0;
  v36[8] = 0;
  *((_DWORD *)v36 + 3) = 0;
  v37 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x258));
  v38 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v17);
  *v37 = 0;
  v37[1] = v38;
  v37[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v39 = (char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x278)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x280)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x288)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x290)) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x298)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v4 & *v6) + 0x2A0)) = 0;
  v40 = outlined init with copy of ModifiedContent<_ViewList_View, ListTableCellModifier>(a1, (uint64_t)v6 + *(_QWORD *)((*v4 & *v6) + 0x60), &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier);
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v163, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewList_View, ListTableCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v163 = v43;
  *((_QWORD *)&v163 + 1) = v45;
  v164 = v47;
  LOWORD(v165) = v49 & 0x101;
  BYTE2(v165) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v163 = 0;
  WORD4(v163) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v163 = 0uLL;
  v164 = 0;
  LOBYTE(v165) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v165 = &type metadata for HoverEventDispatcher;
  v166 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v163 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v163);
  v165 = &type metadata for PencilDoubleTapEventDispatcher;
  v166 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v163);
  v165 = &type metadata for PencilSqueezeEventDispatcher;
  v166 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v163);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  v165 = &type metadata for KeyEventDispatcher;
  v166 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v163 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v163);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v4 & *v6) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
  v161.receiver = v6;
  v161.super_class = v52;
  v53 = objc_msgSendSuper2(&v161, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = xmmword_1ECE02220;
    v59 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v60 = swift_retain();
      outlined copy of RepresentableContextValues?(v60, v57, v58, *((uint64_t *)&v58 + 1), v59);
      v61 = ViewGraph.preferenceBridge.getter();
      if (!v61 || (v62 = v61, swift_release(), v56 != v62))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v63 = swift_release();
      if ((v59 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v63 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), v59 & 1);
      if ((v59 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v63, v64);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
        outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
LABEL_10:
        v65 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v4 & *v55) + 0x110));
        v66 = *v65;
        *(_OWORD *)v65 = v163;
        outlined consume of EnvironmentValues?(v66);
        goto LABEL_11;
      }
    }
    v163 = v58;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, *((uint64_t *)&v58 + 1), 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, *((uint64_t *)&v58 + 1), v59);
    goto LABEL_10;
  }
LABEL_11:
  v67 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v68 = *(_QWORD *)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v69 = (char **)(v68 + 24);
  swift_beginAccess();
  v70 = *(char **)(v68 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v68 + 24) = v70;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v70 + 2) + 1, 1, v70);
    *v69 = v70;
  }
  v73 = *((_QWORD *)v70 + 2);
  v72 = *((_QWORD *)v70 + 3);
  if (v73 >= v72 >> 1)
  {
    v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v70);
    *v69 = v70;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v75 = v74;
  v76 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v70 + 2) = v73 + 1;
  v77 = &v70[24 * v73];
  *((_QWORD *)v77 + 4) = v75;
  *((_QWORD *)v77 + 5) = v76;
  *((_DWORD *)v77 + 12) = -1;
  swift_release();
  swift_release();
  v78 = *(_QWORD *)((*v4 & *v67) + 0x210);
  swift_unknownObjectWeakAssign();
  v79 = *(void **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x188));
  swift_unknownObjectWeakAssign();
  v80 = v79;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v81 = *(void **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x190));
  swift_unknownObjectWeakAssign();
  v82 = v81;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    v84 = v83;
    swift_unknownObjectWeakAssign();

  }
  v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v85)
  {
    v86 = v85;
    v87 = *(void (**)(uint64_t))((*v4 & *v85) + 0x1D0);
    v88 = swift_retain();
    v87(v88);

    swift_release();
  }
  v89 = *(_QWORD *)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x1A0));
  v90 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v89 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v89 + 40) = v90;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v91 = FocusBridge.host.getter();
  if (v91)
  {
    v93 = (void *)v91;
    v94 = v92;
    v95 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v94 + 8) + 16))(v95);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v96 = *(void **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x1A8));
  v97 = swift_unknownObjectWeakAssign();
  v98 = MEMORY[0x18D760234](v97);
  if (!v98)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v99 = (void *)v98;
  v100 = swift_getObjectType();
  v101 = v96;
  swift_retain();

  if (((*(uint64_t (**)(void))(v100 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v102 = *(void **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v103 = v102;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v104 = *(void **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v105 = v104;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v106 = *(void **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v107 = v106;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v108 = *(void **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x1F0));
  v109 = swift_unknownObjectWeakAssign();
  v110 = MEMORY[0x18D760234](v109);
  if (!v110)
    goto LABEL_48;
  v111 = (void *)v110;
  v112 = v108;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v113 = objc_msgSend(v67, sel_traitCollection);
  v114 = objc_msgSend(v113, sel_userInterfaceIdiom);

  if (v114 == (id)1
    || (v115 = objc_msgSend(v67, sel_traitCollection),
        v116 = objc_msgSend(v115, sel_userInterfaceIdiom),
        v115,
        v116 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
    v118 = objc_msgSend(objc_allocWithZone(v117), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v119 = *(_QWORD *)((*v4 & *v67) + 0x200);
    v120 = *(void **)((char *)v67 + v119);
    *(_QWORD *)((char *)v67 + v119) = v118;

  }
  v121 = *(char **)((char *)v67 + v78);
  v122 = MEMORY[0x18D760234](&v121[direct field offset for ContextMenuBridge.host]);
  if (!v122)
LABEL_49:
    __break(1u);
  v123 = (void *)v122;
  v124 = swift_getObjectType();
  v125 = v121;
  swift_retain();

  if (((*(uint64_t (**)(void))(v124 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v126 = *(char **)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x220));
  *(_QWORD *)&v126[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v54;
  v127 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v127, v128);
  v129 = v126;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v130 = *(_QWORD *)((char *)v67 + *(_QWORD *)((*v4 & *v67) + 0x78));
  v131 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v130 + 24) = v131;
  swift_unknownObjectWeakAssign();
  v132 = *(_QWORD *)((*v4 & *v67) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v130 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v133 = (void *)objc_opt_self();
  v134 = objc_msgSend(v133, sel_defaultCenter);
  v135 = v67;
  v136 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v135, sel_willBeginSnapshotSession, v136, 0);

  v137 = v135;
  v138 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_didEndSnapshotSession, v138, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v140 = (void *)*MEMORY[0x1E0C99720];
  v141 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v141;
  v142 = (void *)*MEMORY[0x1E0DC5320];
  v143 = v140;
  v144 = v141;
  v145 = v142;
  v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v146[2] = 3;
  v146[6] = v145;
  v147 = v146[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v147, 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[5], 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[6], 0);
  swift_bridgeObjectRelease_n();
  v148 = *(_QWORD *)((char *)v67 + v132);
  v149 = *(_QWORD *)(v148 + 48);
  if (v149)
  {
    v150 = v137;
    swift_retain();
    objc_msgSend(v150, sel_addGestureRecognizer_, v149);
  }
  else
  {
    v151 = v137;
    swift_retain();
  }
  objc_msgSend(v137, sel_addGestureRecognizer_, *(_QWORD *)(v148 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v152 = objc_msgSend(v133, sel_defaultCenter);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v153 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v154 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v154)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v154; ++i)
    {
      v156 = *(_QWORD *)(v153 + 8 * i + 32);
      objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityBooleanDidChange_, v156, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v157 = one-time initialization token for didUpdateListLayout;
  v158 = v137;
  if (v157 != -1)
    swift_once();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v158, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v159 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v159, (uint64_t)v162);
  v162[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v162, (uint64_t)v158);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E0CE0A40], (uint64_t)&type metadata for ListTableCellModifier);
  return v158;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  objc_class *v50;
  id v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char **v67;
  char *v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  Class v115;
  id v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  id v133;
  _QWORD *v134;
  void *v135;
  _QWORD *v136;
  void *v137;
  uint64_t inited;
  void *v139;
  void *v140;
  void *v141;
  id v142;
  id v143;
  id v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t i;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t ObjectType;
  uint64_t v161;
  objc_super v163;
  _BYTE v164[16];
  __int128 v165;
  uint64_t v166;
  ValueMetadata *v167;
  unint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v19 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for TooltipBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(_QWORD *)(v24 + 24) = v15;
  *(_QWORD *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v23) = v24;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v29 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v29) = v30;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v34 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  v35 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v35 = 0;
  v35[1] = v36;
  v35[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v37 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  v38 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v4 + *(_QWORD *)((*v2 & *v4) + 0x60), (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  v39 = MEMORY[0x18D75B908](v38);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v165, v39);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier>, HitTestBindingModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v40 = swift_retain();
  v41 = specialized FocusViewGraph.init(graph:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release();
  *(_QWORD *)&v165 = v41;
  *((_QWORD *)&v165 + 1) = v43;
  v166 = v45;
  LOWORD(v167) = v47 & 0x101;
  BYTE2(v167) = BYTE2(v47) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v165 = 0;
  WORD4(v165) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v165 = 0uLL;
  v166 = 0;
  LOBYTE(v167) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v167 = &type metadata for HoverEventDispatcher;
  v168 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v165 = v48;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilDoubleTapEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilSqueezeEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v49 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v167 = &type metadata for KeyEventDispatcher;
  v168 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v165 = v49;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for Range<AttributedString.Index>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v163.receiver = v4;
  v163.super_class = v50;
  v51 = objc_msgSendSuper2(&v163, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v52 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v53 = v51;
  ViewRendererHost.initializeViewGraph()();
  v54 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v55 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v56 = xmmword_1ECE02220;
    v57 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v58 = swift_retain();
      outlined copy of RepresentableContextValues?(v58, v55, v56, *((uint64_t *)&v56 + 1), v57);
      v59 = ViewGraph.preferenceBridge.getter();
      if (!v59 || (v60 = v59, swift_release(), v54 != v60))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v61 = swift_release();
      if ((v57 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v61 = outlined copy of RepresentableContextValues.EnvironmentStorage(v56, *((uint64_t *)&v56 + 1), v57 & 1);
      if ((v57 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v61, v62);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v56, *((uint64_t *)&v56 + 1), 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v54, v55, v56, *((uint64_t *)&v56 + 1), v57);
        outlined consume of RepresentableContextValues?(v54, v55, v56, *((uint64_t *)&v56 + 1), v57);
LABEL_10:
        v63 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v2 & *v53) + 0x110));
        v64 = *v63;
        *(_OWORD *)v63 = v165;
        outlined consume of EnvironmentValues?(v64);
        goto LABEL_11;
      }
    }
    v165 = v56;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v56, *((uint64_t *)&v56 + 1), 0);
    outlined consume of RepresentableContextValues?(v54, v55, v56, *((uint64_t *)&v56 + 1), v57);
    goto LABEL_10;
  }
LABEL_11:
  v65 = v53;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v66 = *(_QWORD *)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v67 = (char **)(v66 + 24);
  swift_beginAccess();
  v68 = *(char **)(v66 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v66 + 24) = v68;
  v161 = v52;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v68 + 2) + 1, 1, v68);
    *v67 = v68;
  }
  v71 = *((_QWORD *)v68 + 2);
  v70 = *((_QWORD *)v68 + 3);
  if (v71 >= v70 >> 1)
  {
    v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v71 + 1, 1, v68);
    *v67 = v68;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v73 = v72;
  v74 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v68 + 2) = v71 + 1;
  v75 = &v68[24 * v71];
  *((_QWORD *)v75 + 4) = v73;
  *((_QWORD *)v75 + 5) = v74;
  *((_DWORD *)v75 + 12) = -1;
  swift_release();
  swift_release();
  v76 = *(_QWORD *)((*v2 & *v65) + 0x210);
  swift_unknownObjectWeakAssign();
  v77 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x188));
  swift_unknownObjectWeakAssign();
  v78 = v77;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v79 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x190));
  swift_unknownObjectWeakAssign();
  v80 = v79;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    v82 = v81;
    swift_unknownObjectWeakAssign();

  }
  v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    v84 = v83;
    v85 = *(void (**)(uint64_t))((*v2 & *v83) + 0x1D0);
    v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  v87 = *(_QWORD *)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1A0));
  v88 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v89 = FocusBridge.host.getter();
  if (v89)
  {
    v91 = (void *)v89;
    v92 = v90;
    v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v94 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1A8));
  v95 = swift_unknownObjectWeakAssign();
  v96 = MEMORY[0x18D760234](v95);
  if (!v96)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v97 = (void *)v96;
  v98 = swift_getObjectType();
  v99 = v94;
  swift_retain();

  if (((*(uint64_t (**)(void))(v98 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v100 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v101 = v100;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v102 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v103 = v102;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v104 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v105 = v104;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v106 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1F0));
  v107 = swift_unknownObjectWeakAssign();
  v108 = MEMORY[0x18D760234](v107);
  if (!v108)
    goto LABEL_48;
  v109 = (void *)v108;
  v110 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v111 = objc_msgSend(v65, sel_traitCollection);
  v112 = objc_msgSend(v111, sel_userInterfaceIdiom);

  if (v112 == (id)1
    || (v113 = objc_msgSend(v65, sel_traitCollection),
        v114 = objc_msgSend(v113, sel_userInterfaceIdiom),
        v113,
        v114 == (id)6))
  {
    type metadata accessor for Range<AttributedString.Index>(0, &lazy cache variable for type metadata for PointerBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v116 = objc_msgSend(objc_allocWithZone(v115), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v117 = *(_QWORD *)((*v2 & *v65) + 0x200);
    v118 = *(void **)((char *)v65 + v117);
    *(_QWORD *)((char *)v65 + v117) = v116;

  }
  v119 = *(char **)((char *)v65 + v76);
  v120 = MEMORY[0x18D760234](&v119[direct field offset for ContextMenuBridge.host]);
  if (!v120)
LABEL_49:
    __break(1u);
  v121 = (void *)v120;
  v122 = swift_getObjectType();
  v123 = v119;
  swift_retain();

  if (((*(uint64_t (**)(void))(v122 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v124 = *(char **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x220));
  *(_QWORD *)&v124[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v161;
  v125 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v125, v126);
  v127 = v124;
  swift_retain();
  v128 = v2;
  static Update.ensure<A>(_:)();

  swift_release();
  v129 = *(_QWORD *)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x78));
  v130 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v129 + 24) = v130;
  swift_unknownObjectWeakAssign();
  v131 = *(_QWORD *)((*v128 & *v65) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v129 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v132 = (void *)objc_opt_self();
  v133 = objc_msgSend(v132, sel_defaultCenter);
  v134 = v65;
  v135 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v134, sel_willBeginSnapshotSession, v135, 0);

  v136 = v134;
  v137 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_didEndSnapshotSession, v137, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v139 = (void *)*MEMORY[0x1E0C99720];
  v140 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v140;
  v141 = (void *)*MEMORY[0x1E0DC5320];
  v142 = v139;
  v143 = v140;
  v144 = v141;
  v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v145[2] = 3;
  v145[6] = v144;
  v146 = v145[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_externalEnvironmentDidChange, v146, 0);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_externalEnvironmentDidChange, v145[5], 0);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_externalEnvironmentDidChange, v145[6], 0);
  swift_bridgeObjectRelease_n();
  v147 = *(_QWORD *)((char *)v65 + v131);
  v148 = *(_QWORD *)(v147 + 48);
  if (v148)
  {
    v149 = v136;
    swift_retain();
    objc_msgSend(v149, sel_addGestureRecognizer_, v148);
  }
  else
  {
    v150 = v136;
    swift_retain();
  }
  objc_msgSend(v136, sel_addGestureRecognizer_, *(_QWORD *)(v147 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v151 = objc_msgSend(v132, sel_defaultCenter);
    objc_msgSend(v151, sel_addObserver_selector_name_object_, v136, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v151, sel_addObserver_selector_name_object_, v136, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v152 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v153 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v153)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v153; ++i)
    {
      v155 = *(_QWORD *)(v152 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_accessibilityBooleanDidChange_, v155, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v156 = one-time initialization token for didUpdateListLayout;
  v157 = v136;
  if (v156 != -1)
    swift_once();
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v157, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v158 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v158, (uint64_t)v164);
  v164[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v164, (uint64_t)v157);
  swift_endAccess();

  static Update.end()();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>);
  return v157;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  objc_class *v50;
  id v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  id v100;
  void *v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  Class v116;
  id v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  _QWORD *v135;
  void *v136;
  _QWORD *v137;
  void *v138;
  uint64_t inited;
  void *v140;
  void *v141;
  void *v142;
  id v143;
  id v144;
  id v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t i;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t ObjectType;
  unint64_t v162;
  objc_super v164;
  _BYTE v165[16];
  __int128 v166;
  uint64_t v167;
  ValueMetadata *v168;
  unint64_t v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BarItemView, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BarItemView, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BarItemView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DragAndDropBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v19 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TooltipBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EditMenuBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(_QWORD *)(v24 + 24) = v15;
  *(_QWORD *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v23) = v24;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PencilEventsBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v29 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v29) = v30;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ContextMenuBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v34 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  v35 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v35 = 0;
  v35[1] = v36;
  v35[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v37 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  v38 = outlined init with copy of BarItemView(a1, (uint64_t)v4 + *(_QWORD *)((*v2 & *v4) + 0x60));
  v39 = MEMORY[0x18D75B908](v38);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v166, v39);
  type metadata accessor for ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BarItemView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v40 = swift_retain();
  v41 = specialized FocusViewGraph.init(graph:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release();
  *(_QWORD *)&v166 = v41;
  *((_QWORD *)&v166 + 1) = v43;
  v167 = v45;
  LOWORD(v168) = v47 & 0x101;
  BYTE2(v168) = BYTE2(v47) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v166 = 0;
  WORD4(v166) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v166 = 0uLL;
  v167 = 0;
  LOBYTE(v168) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v168 = &type metadata for HoverEventDispatcher;
  v169 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v166 = v48;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v168 = &type metadata for PencilDoubleTapEventDispatcher;
  v169 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v168 = &type metadata for PencilSqueezeEventDispatcher;
  v169 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  v49 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v168 = &type metadata for KeyEventDispatcher;
  v169 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v166 = v49;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v166);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v164.receiver = v4;
  v164.super_class = v50;
  v51 = objc_msgSendSuper2(&v164, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v52 = lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
  v53 = v51;
  ViewRendererHost.initializeViewGraph()();
  v54 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v55 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v56 = qword_1ECE02220;
    v57 = qword_1ECE02228;
    v58 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v59 = swift_retain();
      outlined copy of RepresentableContextValues?(v59, v55, v56, v57, v58);
      v60 = ViewGraph.preferenceBridge.getter();
      if (!v60 || (v61 = v60, swift_release(), v54 != v61))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v62 = swift_release();
      if ((v58 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v62 = outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, v58 & 1);
      if ((v58 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v62, v63);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
LABEL_10:
        v64 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v2 & *v53) + 0x110));
        v65 = *v64;
        *(_OWORD *)v64 = v166;
        outlined consume of EnvironmentValues?(v65);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v166 = v56;
    *((_QWORD *)&v166 + 1) = v57;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 0);
    outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
    goto LABEL_10;
  }
LABEL_11:
  v66 = v53;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v67 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v68 = (char **)(v67 + 24);
  swift_beginAccess();
  v69 = *(char **)(v67 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v67 + 24) = v69;
  v162 = v52;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
    *v68 = v69;
  }
  v72 = *((_QWORD *)v69 + 2);
  v71 = *((_QWORD *)v69 + 3);
  if (v72 >= v71 >> 1)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v69);
    *v68 = v69;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v74 = v73;
  v75 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v69 + 2) = v72 + 1;
  v76 = &v69[24 * v72];
  *((_QWORD *)v76 + 4) = v74;
  *((_QWORD *)v76 + 5) = v75;
  *((_DWORD *)v76 + 12) = -1;
  swift_release();
  swift_release();
  v77 = *(_QWORD *)((*v2 & *v66) + 0x210);
  swift_unknownObjectWeakAssign();
  v78 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x188));
  swift_unknownObjectWeakAssign();
  v79 = v78;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v80 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x190));
  swift_unknownObjectWeakAssign();
  v81 = v80;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v82 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v82)
  {
    v83 = v82;
    swift_unknownObjectWeakAssign();

  }
  v84 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v84)
  {
    v85 = v84;
    v86 = *(void (**)(uint64_t))((*v2 & *v84) + 0x1D0);
    v87 = swift_retain();
    v86(v87);

    swift_release();
  }
  v88 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1A0));
  v89 = lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v88 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v88 + 40) = v89;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v90 = FocusBridge.host.getter();
  if (v90)
  {
    v92 = (void *)v90;
    v93 = v91;
    v94 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v93 + 8) + 16))(v94);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v95 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1A8));
  v96 = swift_unknownObjectWeakAssign();
  v97 = MEMORY[0x18D760234](v96);
  if (!v97)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v98 = (void *)v97;
  v99 = swift_getObjectType();
  v100 = v95;
  swift_retain();

  if (((*(uint64_t (**)(void))(v99 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v101 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v102 = v101;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v103 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1F0));
  v108 = swift_unknownObjectWeakAssign();
  v109 = MEMORY[0x18D760234](v108);
  if (!v109)
    goto LABEL_48;
  v110 = (void *)v109;
  v111 = v107;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v112 = objc_msgSend(v66, sel_traitCollection);
  v113 = objc_msgSend(v112, sel_userInterfaceIdiom);

  if (v113 == (id)1
    || (v114 = objc_msgSend(v66, sel_traitCollection),
        v115 = objc_msgSend(v114, sel_userInterfaceIdiom),
        v114,
        v115 == (id)6))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PointerBridge<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v117 = objc_msgSend(objc_allocWithZone(v116), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v118 = *(_QWORD *)((*v2 & *v66) + 0x200);
    v119 = *(void **)((char *)v66 + v118);
    *(_QWORD *)((char *)v66 + v118) = v117;

  }
  v120 = *(char **)((char *)v66 + v77);
  v121 = MEMORY[0x18D760234](&v120[direct field offset for ContextMenuBridge.host]);
  if (!v121)
LABEL_49:
    __break(1u);
  v122 = (void *)v121;
  v123 = swift_getObjectType();
  v124 = v120;
  swift_retain();

  if (((*(uint64_t (**)(void))(v123 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v125 = *(char **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x220));
  *(_QWORD *)&v125[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v162;
  v126 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v126, v127);
  v128 = v125;
  swift_retain();
  v129 = v2;
  static Update.ensure<A>(_:)();

  swift_release();
  v130 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x78));
  v131 = lazy protocol witness table accessor for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v130 + 24) = v131;
  swift_unknownObjectWeakAssign();
  v132 = *(_QWORD *)((*v129 & *v66) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v130 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v133 = (void *)objc_opt_self();
  v134 = objc_msgSend(v133, sel_defaultCenter);
  v135 = v66;
  v136 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v135, sel_willBeginSnapshotSession, v136, 0);

  v137 = v135;
  v138 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_didEndSnapshotSession, v138, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v140 = (void *)*MEMORY[0x1E0C99720];
  v141 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v141;
  v142 = (void *)*MEMORY[0x1E0DC5320];
  v143 = v140;
  v144 = v141;
  v145 = v142;
  v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v146[2] = 3;
  v146[6] = v145;
  v147 = v146[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v147, 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[5], 0);
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_externalEnvironmentDidChange, v146[6], 0);
  swift_bridgeObjectRelease_n();
  v148 = *(_QWORD *)((char *)v66 + v132);
  v149 = *(_QWORD *)(v148 + 48);
  if (v149)
  {
    v150 = v137;
    swift_retain();
    objc_msgSend(v150, sel_addGestureRecognizer_, v149);
  }
  else
  {
    v151 = v137;
    swift_retain();
  }
  objc_msgSend(v137, sel_addGestureRecognizer_, *(_QWORD *)(v148 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v152 = objc_msgSend(v133, sel_defaultCenter);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v152, sel_addObserver_selector_name_object_, v137, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v153 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v154 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v154)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v154; ++i)
    {
      v156 = *(_QWORD *)(v153 + 8 * i + 32);
      objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityBooleanDidChange_, v156, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v137, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v157 = one-time initialization token for didUpdateListLayout;
  v158 = v137;
  if (v157 != -1)
    swift_once();
  objc_msgSend(v134, sel_addObserver_selector_name_object_, v158, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v159 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v159, (uint64_t)v165);
  v165[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v165, (uint64_t)v158);
  swift_endAccess();

  static Update.end()();
  outlined destroy of BarItemView(a1);
  return v158;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  objc_class *v50;
  id v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char **v67;
  char *v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  Class v115;
  id v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  id v133;
  _QWORD *v134;
  void *v135;
  _QWORD *v136;
  void *v137;
  uint64_t inited;
  void *v139;
  void *v140;
  void *v141;
  id v142;
  id v143;
  id v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t i;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t ObjectType;
  unint64_t v161;
  objc_super v163;
  _BYTE v164[16];
  __int128 v165;
  uint64_t v166;
  ValueMetadata *v167;
  unint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BridgedNavigationView.RootView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DragAndDropBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v19 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TooltipBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EditMenuBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(_QWORD *)(v24 + 24) = v15;
  *(_QWORD *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v23) = v24;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PencilEventsBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v29 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v29) = v30;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ContextMenuBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v34 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  v35 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v35 = 0;
  v35[1] = v36;
  v35[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v37 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  v38 = outlined init with copy of BridgedNavigationView.RootView(a1, (uint64_t)v4 + *(_QWORD *)((*v2 & *v4) + 0x60));
  v39 = MEMORY[0x18D75B908](v38);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v165, v39);
  type metadata accessor for ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BridgedNavigationView.RootView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v40 = swift_retain();
  v41 = specialized FocusViewGraph.init(graph:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release();
  *(_QWORD *)&v165 = v41;
  *((_QWORD *)&v165 + 1) = v43;
  v166 = v45;
  LOWORD(v167) = v47 & 0x101;
  BYTE2(v167) = BYTE2(v47) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v165 = 0;
  WORD4(v165) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v165 = 0uLL;
  v166 = 0;
  LOBYTE(v167) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v167 = &type metadata for HoverEventDispatcher;
  v168 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v165 = v48;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilDoubleTapEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v167 = &type metadata for PencilSqueezeEventDispatcher;
  v168 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  v49 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v167 = &type metadata for KeyEventDispatcher;
  v168 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v165 = v49;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v163.receiver = v4;
  v163.super_class = v50;
  v51 = objc_msgSendSuper2(&v163, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v52 = lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
  v53 = v51;
  ViewRendererHost.initializeViewGraph()();
  v54 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v55 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v56 = xmmword_1ECE02220;
    v57 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v58 = swift_retain();
      outlined copy of RepresentableContextValues?(v58, v55, v56, *((uint64_t *)&v56 + 1), v57);
      v59 = ViewGraph.preferenceBridge.getter();
      if (!v59 || (v60 = v59, swift_release(), v54 != v60))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v61 = swift_release();
      if ((v57 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v61 = outlined copy of RepresentableContextValues.EnvironmentStorage(v56, *((uint64_t *)&v56 + 1), v57 & 1);
      if ((v57 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v61, v62);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v56, *((uint64_t *)&v56 + 1), 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v54, v55, v56, *((uint64_t *)&v56 + 1), v57);
        outlined consume of RepresentableContextValues?(v54, v55, v56, *((uint64_t *)&v56 + 1), v57);
LABEL_10:
        v63 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v2 & *v53) + 0x110));
        v64 = *v63;
        *(_OWORD *)v63 = v165;
        outlined consume of EnvironmentValues?(v64);
        goto LABEL_11;
      }
    }
    v165 = v56;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v56, *((uint64_t *)&v56 + 1), 0);
    outlined consume of RepresentableContextValues?(v54, v55, v56, *((uint64_t *)&v56 + 1), v57);
    goto LABEL_10;
  }
LABEL_11:
  v65 = v53;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v66 = *(_QWORD *)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v67 = (char **)(v66 + 24);
  swift_beginAccess();
  v68 = *(char **)(v66 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v66 + 24) = v68;
  v161 = v52;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v68 + 2) + 1, 1, v68);
    *v67 = v68;
  }
  v71 = *((_QWORD *)v68 + 2);
  v70 = *((_QWORD *)v68 + 3);
  if (v71 >= v70 >> 1)
  {
    v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v71 + 1, 1, v68);
    *v67 = v68;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v73 = v72;
  v74 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v68 + 2) = v71 + 1;
  v75 = &v68[24 * v71];
  *((_QWORD *)v75 + 4) = v73;
  *((_QWORD *)v75 + 5) = v74;
  *((_DWORD *)v75 + 12) = -1;
  swift_release();
  swift_release();
  v76 = *(_QWORD *)((*v2 & *v65) + 0x210);
  swift_unknownObjectWeakAssign();
  v77 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x188));
  swift_unknownObjectWeakAssign();
  v78 = v77;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v79 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x190));
  swift_unknownObjectWeakAssign();
  v80 = v79;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v81 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v81)
  {
    v82 = v81;
    swift_unknownObjectWeakAssign();

  }
  v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    v84 = v83;
    v85 = *(void (**)(uint64_t))((*v2 & *v83) + 0x1D0);
    v86 = swift_retain();
    v85(v86);

    swift_release();
  }
  v87 = *(_QWORD *)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1A0));
  v88 = lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v87 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v87 + 40) = v88;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v89 = FocusBridge.host.getter();
  if (v89)
  {
    v91 = (void *)v89;
    v92 = v90;
    v93 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v92 + 8) + 16))(v93);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v94 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1A8));
  v95 = swift_unknownObjectWeakAssign();
  v96 = MEMORY[0x18D760234](v95);
  if (!v96)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v97 = (void *)v96;
  v98 = swift_getObjectType();
  v99 = v94;
  swift_retain();

  if (((*(uint64_t (**)(void))(v98 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v100 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v101 = v100;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v102 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v103 = v102;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v104 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v105 = v104;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v106 = *(void **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x1F0));
  v107 = swift_unknownObjectWeakAssign();
  v108 = MEMORY[0x18D760234](v107);
  if (!v108)
    goto LABEL_48;
  v109 = (void *)v108;
  v110 = v106;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v111 = objc_msgSend(v65, sel_traitCollection);
  v112 = objc_msgSend(v111, sel_userInterfaceIdiom);

  if (v112 == (id)1
    || (v113 = objc_msgSend(v65, sel_traitCollection),
        v114 = objc_msgSend(v113, sel_userInterfaceIdiom),
        v113,
        v114 == (id)6))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PointerBridge<BridgedNavigationView.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BridgedNavigationView.RootView and conformance BridgedNavigationView.RootView, (uint64_t)&type metadata for BridgedNavigationView.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v116 = objc_msgSend(objc_allocWithZone(v115), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v117 = *(_QWORD *)((*v2 & *v65) + 0x200);
    v118 = *(void **)((char *)v65 + v117);
    *(_QWORD *)((char *)v65 + v117) = v116;

  }
  v119 = *(char **)((char *)v65 + v76);
  v120 = MEMORY[0x18D760234](&v119[direct field offset for ContextMenuBridge.host]);
  if (!v120)
LABEL_49:
    __break(1u);
  v121 = (void *)v120;
  v122 = swift_getObjectType();
  v123 = v119;
  swift_retain();

  if (((*(uint64_t (**)(void))(v122 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v124 = *(char **)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x220));
  *(_QWORD *)&v124[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v161;
  v125 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v125, v126);
  v127 = v124;
  swift_retain();
  v128 = v2;
  static Update.ensure<A>(_:)();

  swift_release();
  v129 = *(_QWORD *)((char *)v65 + *(_QWORD *)((*v2 & *v65) + 0x78));
  v130 = lazy protocol witness table accessor for type _UIHostingView<BridgedNavigationView.RootView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v129 + 24) = v130;
  swift_unknownObjectWeakAssign();
  v131 = *(_QWORD *)((*v128 & *v65) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v129 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v132 = (void *)objc_opt_self();
  v133 = objc_msgSend(v132, sel_defaultCenter);
  v134 = v65;
  v135 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v134, sel_willBeginSnapshotSession, v135, 0);

  v136 = v134;
  v137 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_didEndSnapshotSession, v137, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v139 = (void *)*MEMORY[0x1E0C99720];
  v140 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v140;
  v141 = (void *)*MEMORY[0x1E0DC5320];
  v142 = v139;
  v143 = v140;
  v144 = v141;
  v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v145[2] = 3;
  v145[6] = v144;
  v146 = v145[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_externalEnvironmentDidChange, v146, 0);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_externalEnvironmentDidChange, v145[5], 0);
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_externalEnvironmentDidChange, v145[6], 0);
  swift_bridgeObjectRelease_n();
  v147 = *(_QWORD *)((char *)v65 + v131);
  v148 = *(_QWORD *)(v147 + 48);
  if (v148)
  {
    v149 = v136;
    swift_retain();
    objc_msgSend(v149, sel_addGestureRecognizer_, v148);
  }
  else
  {
    v150 = v136;
    swift_retain();
  }
  objc_msgSend(v136, sel_addGestureRecognizer_, *(_QWORD *)(v147 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v151 = objc_msgSend(v132, sel_defaultCenter);
    objc_msgSend(v151, sel_addObserver_selector_name_object_, v136, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v151, sel_addObserver_selector_name_object_, v136, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v152 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v153 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v153)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v153; ++i)
    {
      v155 = *(_QWORD *)(v152 + 8 * i + 32);
      objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_accessibilityBooleanDidChange_, v155, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v136, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v156 = one-time initialization token for didUpdateListLayout;
  v157 = v136;
  if (v156 != -1)
    swift_once();
  objc_msgSend(v133, sel_addObserver_selector_name_object_, v157, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v158 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v158, (uint64_t)v164);
  v164[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v164, (uint64_t)v157);
  swift_endAccess();

  static Update.end()();
  outlined destroy of BridgedNavigationView.RootView(a1);
  return v157;
}

{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  Class v11;
  id v12;
  uint64_t v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  Class v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  objc_class *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char **v71;
  char *v72;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  _QWORD *v87;
  void *v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  void *v108;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  Class v119;
  id v120;
  uint64_t v121;
  void *v122;
  char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  _QWORD *v137;
  void *v138;
  _QWORD *v139;
  void *v140;
  uint64_t inited;
  void *v142;
  void *v143;
  void *v144;
  id v145;
  id v146;
  id v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t i;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t ObjectType;
  uint64_t v164;
  objc_super v165;
  _BYTE v166[16];
  __int128 v167;
  uint64_t v168;
  ValueMetadata *v169;
  unint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v5 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v4) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x90)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x98)) = 0;
  v6 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA0);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA8)) = 0;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC8)) = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD0)) = 0;
  v7 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD8);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE0);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x100)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x108)) = -1;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x138)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x148)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x150)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x158)) = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x160)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x168)) = 0;
  v9 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x170);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x178)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x180)) = 2;
  v10 = *(_QWORD *)((*v3 & *v5) + 0x188);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>, (uint64_t)&type metadata for Alert.Presentation, (uint64_t)&protocol witness table for Alert.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v12 = objc_allocWithZone(v11);
  *(_QWORD *)((char *)v5 + v10) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>);
  v13 = *(_QWORD *)((*v3 & *v5) + 0x190);
  type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>(0, &lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, ActionSheet.Presentation>, (uint64_t)&type metadata for ActionSheet.Presentation, (uint64_t)&protocol witness table for ActionSheet.Presentation, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for DeprecatedAlertBridge);
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)((char *)v5 + v13) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, ActionSheet.Presentation>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x198)) = 1;
  v16 = *(_QWORD *)((*v3 & *v5) + 0x1A0);
  type metadata accessor for FocusBridge();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  swift_unknownObjectWeakInit();
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = v18;
  *(_QWORD *)(v17 + 64) = v19;
  EnvironmentValues.init()();
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_QWORD *)(v17 + 136) = 1;
  *(_DWORD *)(v17 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v17 + 160) = 0;
  *(_QWORD *)(v17 + 168) = 0;
  *(_WORD *)(v17 + 176) = 1;
  *(_QWORD *)((char *)v5 + v16) = v17;
  v20 = *(_QWORD *)((*v3 & *v5) + 0x1A8);
  type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
  *(_QWORD *)((char *)v5 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1B0)) = 0;
  v22 = *(_QWORD *)((*v3 & *v5) + 0x1B8);
  type metadata accessor for TooltipBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
  *(_QWORD *)((char *)v5 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  v24 = *(_QWORD *)((*v3 & *v5) + 0x1C0);
  type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
  *(_QWORD *)((char *)v5 + v24) = objc_msgSend(objc_allocWithZone(v25), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1D0)) = 0;
  v26 = *(_QWORD *)((*v3 & *v5) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
  v27 = swift_allocObject();
  *(_WORD *)(v27 + 16) = 2;
  *(_QWORD *)(v27 + 24) = v18;
  *(_QWORD *)(v27 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + v26) = v27;
  swift_weakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1E8)) = 0;
  v28 = *(_QWORD *)((*v3 & *v5) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
  *(_QWORD *)((char *)v5 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  v30 = *(_QWORD *)((*v3 & *v5) + 0x1F8);
  type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
  *(_QWORD *)((char *)v5 + v30) = objc_msgSend(objc_allocWithZone(v31), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x200)) = 0;
  v32 = *(_QWORD *)((*v3 & *v5) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, EmptyModifier>>(0);
  v33 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v33 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v18);
  *(_QWORD *)((char *)v5 + v32) = v33;
  v34 = *(_QWORD *)((*v3 & *v5) + 0x210);
  type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
  *(_QWORD *)((char *)v5 + v34) = objc_msgSend(objc_allocWithZone(v35), sel_init);
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x218)) = 0;
  v36 = *(_QWORD *)((*v3 & *v5) + 0x220);
  *(_QWORD *)((char *)v5 + v36) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x228)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x230)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x238)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x248)) = 0;
  v37 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x250);
  *(_QWORD *)v37 = 0;
  v37[8] = 0;
  *((_DWORD *)v37 + 3) = 0;
  v38 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x258));
  v39 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v18);
  *v38 = 0;
  v38[1] = v39;
  v38[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v40 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x270);
  *(_QWORD *)v40 = 0;
  v40[8] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x278)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x280)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x288)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x290)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x298)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x2A0)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x60)) = a1;
  v41 = swift_retain();
  v42 = MEMORY[0x18D75B908](v41);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v167, v42);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v43 = swift_retain();
  v44 = specialized FocusViewGraph.init(graph:)(v43);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_release();
  *(_QWORD *)&v167 = v44;
  *((_QWORD *)&v167 + 1) = v46;
  v168 = v48;
  LOWORD(v169) = v50 & 0x101;
  BYTE2(v169) = BYTE2(v50) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v167 = 0;
  WORD4(v167) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v167 = 0uLL;
  v168 = 0;
  LOBYTE(v169) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x78)) = EventBindingManager.__allocating_init()();
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  v169 = &type metadata for HoverEventDispatcher;
  v170 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v167 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilDoubleTapEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v169 = &type metadata for PencilSqueezeEventDispatcher;
  v170 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  v52 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  v169 = &type metadata for KeyEventDispatcher;
  v170 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v167 = v52;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
  v165.receiver = v5;
  v165.super_class = v53;
  v54 = objc_msgSendSuper2(&v165, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v55 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v56 = v54;
  ViewRendererHost.initializeViewGraph()();
  v57 = static RepresentableContextValues.current;
  v164 = v55;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v58 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v59 = qword_1ECE02220;
    v60 = qword_1ECE02228;
    v61 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v62 = swift_retain();
      outlined copy of RepresentableContextValues?(v62, v58, v59, v60, v61);
      v63 = ViewGraph.preferenceBridge.getter();
      if (!v63 || (v64 = v63, swift_release(), v57 != v64))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v65 = swift_release();
      if ((v61 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v65 = outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, v61 & 1);
      if ((v61 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v65, v66);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
        outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
LABEL_10:
        v67 = (_QWORD *)((char *)v56 + *(_QWORD *)((*v3 & *v56) + 0x110));
        v68 = *v67;
        *(_OWORD *)v67 = v167;
        outlined consume of EnvironmentValues?(v68);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v167 = v59;
    *((_QWORD *)&v167 + 1) = v60;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v59, v60, 0);
    outlined consume of RepresentableContextValues?(v57, v58, v59, v60, v61);
    goto LABEL_10;
  }
LABEL_11:
  v69 = v56;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v70 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v71 = (char **)(v70 + 24);
  swift_beginAccess();
  v72 = *(char **)(v70 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v70 + 24) = v72;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
    *v71 = v72;
  }
  v75 = *((_QWORD *)v72 + 2);
  v74 = *((_QWORD *)v72 + 3);
  if (v75 >= v74 >> 1)
  {
    v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v72);
    *v71 = v72;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v77 = v76;
  v78 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v72 + 2) = v75 + 1;
  v79 = &v72[24 * v75];
  *((_QWORD *)v79 + 4) = v77;
  *((_QWORD *)v79 + 5) = v78;
  *((_DWORD *)v79 + 12) = -1;
  swift_release();
  swift_release();
  v80 = *(_QWORD *)((*v3 & *v69) + 0x210);
  swift_unknownObjectWeakAssign();
  v81 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x188));
  swift_unknownObjectWeakAssign();
  v82 = v81;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v83 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x190));
  swift_unknownObjectWeakAssign();
  v84 = v83;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, EmptyModifier>, SheetPreference.Key>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v85)
  {
    v86 = v85;
    swift_unknownObjectWeakAssign();

  }
  v87 = specialized _UIHostingView.sheetBridge.getter((uint64_t)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, EmptyModifier>, SheetPreference.Key>, (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *, _UNKNOWN **, void (*)()))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, EmptyModifier>, Alert.Presentation>, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v87)
  {
    v88 = v87;
    v89 = *(void (**)(uint64_t))((*v3 & *v87) + 0x1D0);
    v90 = swift_retain();
    v89(v90);

    swift_release();
  }
  v91 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1A0));
  v92 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  *(_QWORD *)(v91 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v91 + 40) = v92;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v93 = FocusBridge.host.getter();
  if (v93)
  {
    v95 = (void *)v93;
    v96 = v94;
    v97 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v96 + 8) + 16))(v97);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v98 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1A8));
  v99 = swift_unknownObjectWeakAssign();
  v100 = MEMORY[0x18D760234](v99);
  if (!v100)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v101 = (void *)v100;
  v102 = swift_getObjectType();
  v103 = v98;
  swift_retain();

  if (((*(uint64_t (**)(void))(v102 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v104 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v105 = v104;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v106 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v107 = v106;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v108 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v109 = v108;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v110 = *(void **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x1F0));
  v111 = swift_unknownObjectWeakAssign();
  v112 = MEMORY[0x18D760234](v111);
  if (!v112)
    goto LABEL_48;
  v113 = (void *)v112;
  v114 = v110;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v115 = objc_msgSend(v69, sel_traitCollection);
  v116 = objc_msgSend(v115, sel_userInterfaceIdiom);

  if (v116 == (id)1
    || (v117 = objc_msgSend(v69, sel_traitCollection),
        v118 = objc_msgSend(v117, sel_userInterfaceIdiom),
        v117,
        v118 == (id)6))
  {
    type metadata accessor for PointerBridge<ModifiedContent<AnyView, EmptyModifier>>(0);
    v120 = objc_msgSend(objc_allocWithZone(v119), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v121 = *(_QWORD *)((*v3 & *v69) + 0x200);
    v122 = *(void **)((char *)v69 + v121);
    *(_QWORD *)((char *)v69 + v121) = v120;

  }
  v123 = *(char **)((char *)v69 + v80);
  v124 = MEMORY[0x18D760234](&v123[direct field offset for ContextMenuBridge.host]);
  if (!v124)
LABEL_49:
    __break(1u);
  v125 = (void *)v124;
  v126 = swift_getObjectType();
  v127 = v123;
  swift_retain();

  if (((*(uint64_t (**)(void))(v126 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v128 = *(char **)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x220));
  *(_QWORD *)&v128[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v164;
  v129 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v129, v130);
  v131 = v128;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v132 = *(_QWORD *)((char *)v69 + *(_QWORD *)((*v3 & *v69) + 0x78));
  v133 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  swift_beginAccess();
  *(_QWORD *)(v132 + 24) = v133;
  swift_unknownObjectWeakAssign();
  v134 = *(_QWORD *)((*v3 & *v69) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v132 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v135 = (void *)objc_opt_self();
  v136 = objc_msgSend(v135, sel_defaultCenter);
  v137 = v69;
  v138 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v137, sel_willBeginSnapshotSession, v138, 0);

  v139 = v137;
  v140 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_didEndSnapshotSession, v140, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v142 = (void *)*MEMORY[0x1E0C99720];
  v143 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v143;
  v144 = (void *)*MEMORY[0x1E0DC5320];
  v145 = v142;
  v146 = v143;
  v147 = v144;
  v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v148[2] = 3;
  v148[6] = v147;
  v149 = v148[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v149, 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[5], 0);
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_externalEnvironmentDidChange, v148[6], 0);
  swift_bridgeObjectRelease_n();
  v150 = *(_QWORD *)((char *)v69 + v134);
  v151 = *(_QWORD *)(v150 + 48);
  if (v151)
  {
    v152 = v139;
    swift_retain();
    objc_msgSend(v152, sel_addGestureRecognizer_, v151);
  }
  else
  {
    v153 = v139;
    swift_retain();
  }
  objc_msgSend(v139, sel_addGestureRecognizer_, *(_QWORD *)(v150 + 56), v164, 0);
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v154 = objc_msgSend(v135, sel_defaultCenter);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v139, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v155 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v156 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v156)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v156; ++i)
    {
      v158 = *(_QWORD *)(v155 + 8 * i + 32);
      objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityBooleanDidChange_, v158, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v139, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v159 = one-time initialization token for didUpdateListLayout;
  v160 = v139;
  if (v159 != -1)
    swift_once();
  objc_msgSend(v136, sel_addObserver_selector_name_object_, v160, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v161 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v161, (uint64_t)v166);
  v166[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v166, (uint64_t)v160);
  swift_endAccess();

  static Update.end()();
  return v160;
}

{
  return specialized _UIHostingView.init(rootView:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, Alert.Presentation>, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, ActionSheet.Presentation>, (uint64_t (*)(_QWORD))type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for TooltipBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>, (uint64_t)closure #1 in RepresentableContextValues.environment.getterpartial apply, (uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??,
           (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??,
           &lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>,
           (uint64_t (*)(_QWORD))type metadata accessor for PointerBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>,
           (uint64_t)closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)partial apply,
           &lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>> and conformance _UIHostingView<A>);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  Class v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  objc_class *v52;
  id v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char **v70;
  char *v71;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  void *v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  _QWORD *v111;
  id v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  Class v122;
  id v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  void *v139;
  id v140;
  _QWORD *v141;
  void *v142;
  _QWORD *v143;
  void *v144;
  uint64_t inited;
  void *v146;
  void *v147;
  void *v148;
  id v149;
  id v150;
  id v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t i;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t ObjectType;
  objc_super v169;
  _BYTE v170[16];
  __int128 v171;
  uint64_t v172;
  ValueMetadata *v173;
  unint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<AnyView, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<AnyView, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  v18 = MEMORY[0x1E0CE7518];
  v19 = MEMORY[0x1E0CE7508];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for DragAndDropBridge<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TooltipBridge<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EditMenuBridge<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v23) = objc_msgSend(objc_allocWithZone(v24), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 2;
  *(_QWORD *)(v26 + 24) = v15;
  *(_QWORD *)(v26 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v25) = v26;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  v29 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PencilEventsBridge<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v29) = objc_msgSend(objc_allocWithZone(v30), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v32 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v31) = v32;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContextMenuBridge<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone(v34), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v35 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v35) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v36 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v36 = 0;
  v36[8] = 0;
  *((_DWORD *)v36 + 3) = 0;
  v37 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v38 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v37 = 0;
  v37[1] = v38;
  v37[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v39 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v39 = 0;
  v39[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x60)) = a1;
  v40 = swift_retain();
  v41 = MEMORY[0x18D75B908](v40);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v171, v41);
  type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v42 = swift_retain();
  v43 = specialized FocusViewGraph.init(graph:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_release();
  *(_QWORD *)&v171 = v43;
  *((_QWORD *)&v171 + 1) = v45;
  v172 = v47;
  LOWORD(v173) = v49 & 0x101;
  BYTE2(v173) = BYTE2(v49) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v171 = 0;
  WORD4(v171) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v171 = 0uLL;
  v172 = 0;
  LOBYTE(v173) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v50 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v173 = &type metadata for HoverEventDispatcher;
  v174 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v171 = v50;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  v173 = &type metadata for PencilDoubleTapEventDispatcher;
  v174 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  v173 = &type metadata for PencilSqueezeEventDispatcher;
  v174 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  v51 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v173 = &type metadata for KeyEventDispatcher;
  v174 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v171 = v51;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v171);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v18, v19, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v169.receiver = v4;
  v169.super_class = v52;
  v53 = objc_msgSendSuper2(&v169, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v54 = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  v55 = v53;
  ViewRendererHost.initializeViewGraph()();
  v56 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v57 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v58 = qword_1ECE02220;
    v59 = qword_1ECE02228;
    v60 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v61 = swift_retain();
      outlined copy of RepresentableContextValues?(v61, v57, v58, v59, v60);
      v62 = ViewGraph.preferenceBridge.getter();
      if (!v62 || (v63 = v62, swift_release(), v56 != v63))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v64 = swift_release();
      if ((v60 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v64 = outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, v60 & 1);
      if ((v60 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v64, v65);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 1);
        static Update.ensure<A>(_:)();
        v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
        outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
LABEL_10:
        v66 = (_QWORD *)((char *)v55 + *(_QWORD *)((*v2 & *v55) + 0x110));
        v67 = *v66;
        *(_OWORD *)v66 = v171;
        outlined consume of EnvironmentValues?(v67);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v171 = v58;
    *((_QWORD *)&v171 + 1) = v59;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v58, v59, 0);
    outlined consume of RepresentableContextValues?(v56, v57, v58, v59, v60);
    goto LABEL_10;
  }
LABEL_11:
  v68 = v55;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v69 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v70 = (char **)(v69 + 24);
  swift_beginAccess();
  v71 = *(char **)(v69 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v69 + 24) = v71;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v71 + 2) + 1, 1, v71);
    *v70 = v71;
  }
  v74 = *((_QWORD *)v71 + 2);
  v73 = *((_QWORD *)v71 + 3);
  if (v74 >= v73 >> 1)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v71);
    *v70 = v71;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v76 = v75;
  v77 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v71 + 2) = v74 + 1;
  v78 = &v71[24 * v74];
  *((_QWORD *)v78 + 4) = v76;
  *((_QWORD *)v78 + 5) = v77;
  *((_DWORD *)v78 + 12) = -1;
  swift_release();
  swift_release();
  v79 = *(_QWORD *)((*v2 & *v68) + 0x210);
  swift_unknownObjectWeakAssign();
  v80 = v2;
  v81 = *(void **)((char *)v68 + *(_QWORD *)((*v2 & *v68) + 0x188));
  swift_unknownObjectWeakAssign();
  v82 = v81;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v83 = *(void **)((char *)v68 + *(_QWORD *)((*v80 & *v68) + 0x190));
  swift_unknownObjectWeakAssign();
  v84 = v83;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v85)
  {
    v86 = v85;
    swift_unknownObjectWeakAssign();

  }
  v87 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  v88 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v87)
  {
    v89 = v87;
    v90 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v87) + 0x1D0);
    v91 = swift_retain();
    v90(v91);

    swift_release();
  }
  v92 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v88 & *v68) + 0x1A0));
  v93 = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v92 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v92 + 40) = v93;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v94 = FocusBridge.host.getter();
  if (v94)
  {
    v96 = (void *)v94;
    v97 = v95;
    v98 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v97 + 8) + 16))(v98);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v99 = *(void **)((char *)v68 + *(_QWORD *)((*v88 & *v68) + 0x1A8));
  v100 = swift_unknownObjectWeakAssign();
  v101 = MEMORY[0x18D760234](v100);
  if (!v101)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v102 = (void *)v101;
  v103 = swift_getObjectType();
  v104 = v99;
  swift_retain();

  if (((*(uint64_t (**)(void))(v103 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v105 = *(void **)((char *)v68 + *(_QWORD *)((*v88 & *v68) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v68 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v68) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v109 = *(void **)((char *)v68 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v68) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v110 = v109;
  v111 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v112 = v110;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v113 = *(void **)((char *)v68 + *(_QWORD *)((*v111 & *v68) + 0x1F0));
  v114 = swift_unknownObjectWeakAssign();
  v115 = MEMORY[0x18D760234](v114);
  if (!v115)
    goto LABEL_48;
  v116 = (void *)v115;
  v117 = v113;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v118 = objc_msgSend(v68, sel_traitCollection);
  v119 = objc_msgSend(v118, sel_userInterfaceIdiom);

  if (v119 == (id)1
    || (v120 = objc_msgSend(v68, sel_traitCollection),
        v121 = objc_msgSend(v120, sel_userInterfaceIdiom),
        v120,
        v121 == (id)6))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PointerBridge<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v123 = objc_msgSend(objc_allocWithZone(v122), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v124 = *(_QWORD *)((*v111 & *v68) + 0x200);
    v125 = *(void **)((char *)v68 + v124);
    *(_QWORD *)((char *)v68 + v124) = v123;

  }
  v126 = *(char **)((char *)v68 + v79);
  v127 = MEMORY[0x18D760234](&v126[direct field offset for ContextMenuBridge.host]);
  if (!v127)
LABEL_49:
    __break(1u);
  v128 = (void *)v127;
  v129 = swift_getObjectType();
  v130 = v126;
  swift_retain();

  if (((*(uint64_t (**)(void))(v129 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v131 = v111;
  v132 = *(char **)((char *)v68 + *(_QWORD *)((*v111 & *v68) + 0x220));
  *(_QWORD *)&v132[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v54;
  v133 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v133, v134);
  v135 = v132;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v136 = *(_QWORD *)((char *)v68 + *(_QWORD *)((*v131 & *v68) + 0x78));
  v137 = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v136 + 24) = v137;
  swift_unknownObjectWeakAssign();
  v138 = *(_QWORD *)((*v131 & *v68) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v136 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v139 = (void *)objc_opt_self();
  v140 = objc_msgSend(v139, sel_defaultCenter);
  v141 = v68;
  v142 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v140, sel_addObserver_selector_name_object_, v141, sel_willBeginSnapshotSession, v142, 0);

  v143 = v141;
  v144 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v140, sel_addObserver_selector_name_object_, v143, sel_didEndSnapshotSession, v144, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v146 = (void *)*MEMORY[0x1E0C99720];
  v147 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v147;
  v148 = (void *)*MEMORY[0x1E0DC5320];
  v149 = v146;
  v150 = v147;
  v151 = v148;
  v152 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v152[2] = 3;
  v152[6] = v151;
  v153 = v152[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v140, sel_addObserver_selector_name_object_, v143, sel_externalEnvironmentDidChange, v153, 0);
  objc_msgSend(v140, sel_addObserver_selector_name_object_, v143, sel_externalEnvironmentDidChange, v152[5], 0);
  objc_msgSend(v140, sel_addObserver_selector_name_object_, v143, sel_externalEnvironmentDidChange, v152[6], 0);
  swift_bridgeObjectRelease_n();
  v154 = *(_QWORD *)((char *)v68 + v138);
  v155 = *(_QWORD *)(v154 + 48);
  if (v155)
  {
    v156 = v143;
    swift_retain();
    objc_msgSend(v156, sel_addGestureRecognizer_, v155);
  }
  else
  {
    v157 = v143;
    swift_retain();
  }
  objc_msgSend(v143, sel_addGestureRecognizer_, *(_QWORD *)(v154 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v158 = objc_msgSend(v139, sel_defaultCenter);
    objc_msgSend(v158, sel_addObserver_selector_name_object_, v143, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v158, sel_addObserver_selector_name_object_, v143, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v159 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v160 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v160)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v160; ++i)
    {
      v162 = *(_QWORD *)(v159 + 8 * i + 32);
      objc_msgSend(v140, sel_addObserver_selector_name_object_, v143, sel_accessibilityBooleanDidChange_, v162, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v140, sel_addObserver_selector_name_object_, v143, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v163 = one-time initialization token for didUpdateListLayout;
  v164 = v143;
  if (v163 != -1)
    swift_once();
  objc_msgSend(v140, sel_addObserver_selector_name_object_, v164, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v165 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v165, (uint64_t)v170);
  v170[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v170, (uint64_t)v164);
  swift_endAccess();

  static Update.end()();
  return v164;
}

{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  Class v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  uint64_t v28;
  Class v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  objc_class *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char **v77;
  char *v78;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  void (*v97)(uint64_t);
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  id v111;
  void *v112;
  id v113;
  void *v114;
  id v115;
  void *v116;
  id v117;
  _QWORD *v118;
  id v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  Class v129;
  id v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  char *v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  void *v146;
  id v147;
  _QWORD *v148;
  void *v149;
  _QWORD *v150;
  void *v151;
  uint64_t inited;
  void *v153;
  void *v154;
  void *v155;
  id v156;
  id v157;
  id v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t i;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t ObjectType;
  objc_super v175;
  _BYTE v176[16];
  __int128 v177;
  uint64_t v178;
  ValueMetadata *v179;
  unint64_t v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v5 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v4) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x90)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x98)) = 0;
  v6 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA0);
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xA8)) = 0;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xB8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xC8)) = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD0)) = 0;
  v7 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xD8);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  v8 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE0);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  *(_DWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xE8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF0)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0xF8)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x100)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x108)) = -1;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x138)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x148)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x150)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x158)) = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x160)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x168)) = 0;
  v9 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x170);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x178)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x180)) = 2;
  v10 = *(_QWORD *)((*v3 & *v5) + 0x188);
  v11 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>());
  *(_QWORD *)((char *)v5 + v10) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BoundInputsView, Alert.Presentation>);
  v12 = *(_QWORD *)((*v3 & *v5) + 0x190);
  v13 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v5 + v12) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<BoundInputsView, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x198)) = 1;
  v14 = *(_QWORD *)((*v3 & *v5) + 0x1A0);
  type metadata accessor for FocusBridge();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  swift_unknownObjectWeakInit();
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v16;
  *(_QWORD *)(v15 + 64) = v17;
  EnvironmentValues.init()();
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_QWORD *)(v15 + 136) = 1;
  *(_DWORD *)(v15 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v15 + 160) = 0;
  *(_QWORD *)(v15 + 168) = 0;
  *(_WORD *)(v15 + 176) = 1;
  *(_QWORD *)((char *)v5 + v14) = v15;
  v18 = *(_QWORD *)((*v3 & *v5) + 0x1A8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for DragAndDropBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v5 + v18) = objc_msgSend(objc_allocWithZone(v19), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1B0)) = 0;
  v20 = *(_QWORD *)((*v3 & *v5) + 0x1B8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TooltipBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v5 + v20) = objc_msgSend(objc_allocWithZone(v21), sel_init);
  v22 = *(_QWORD *)((*v3 & *v5) + 0x1C0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EditMenuBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v5 + v22) = objc_msgSend(objc_allocWithZone(v23), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1D0)) = 0;
  v24 = *(_QWORD *)((*v3 & *v5) + 0x1D8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v25 = swift_allocObject();
  *(_WORD *)(v25 + 16) = 2;
  *(_QWORD *)(v25 + 24) = v16;
  *(_QWORD *)(v25 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + v24) = v25;
  swift_weakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x1E8)) = 0;
  v26 = *(_QWORD *)((*v3 & *v5) + 0x1F0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v5 + v26) = objc_msgSend(objc_allocWithZone(v27), sel_init);
  v28 = *(_QWORD *)((*v3 & *v5) + 0x1F8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v5 + v28) = objc_msgSend(objc_allocWithZone(v29), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x200)) = 0;
  v30 = *(_QWORD *)((*v3 & *v5) + 0x208);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v31 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v16);
  *(_QWORD *)((char *)v5 + v30) = v31;
  v32 = *(_QWORD *)((*v3 & *v5) + 0x210);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ContextMenuBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v5 + v32) = objc_msgSend(objc_allocWithZone(v33), sel_init);
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x218)) = 0;
  v34 = *(_QWORD *)((*v3 & *v5) + 0x220);
  *(_QWORD *)((char *)v5 + v34) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x228)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x230)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x238)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x248)) = 0;
  v35 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x250);
  *(_QWORD *)v35 = 0;
  v35[8] = 0;
  *((_DWORD *)v35 + 3) = 0;
  v36 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x258));
  v37 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
  *v36 = 0;
  v36[1] = v37;
  v36[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v38 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x270);
  *(_QWORD *)v38 = 0;
  v38[8] = 1;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x278)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x280)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x288)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x290)) = 0;
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x298)) = 0;
  *((_BYTE *)v5 + *(_QWORD *)((*v3 & *v5) + 0x2A0)) = 0;
  v39 = (char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x60);
  v40 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v39 = *(_OWORD *)a1;
  *((_OWORD *)v39 + 1) = v40;
  v41 = *(_OWORD *)(a1 + 32);
  v42 = *(_OWORD *)(a1 + 48);
  v43 = *(_OWORD *)(a1 + 64);
  *((_QWORD *)v39 + 10) = *(_QWORD *)(a1 + 80);
  *((_OWORD *)v39 + 3) = v42;
  *((_OWORD *)v39 + 4) = v43;
  *((_OWORD *)v39 + 2) = v41;
  v44 = outlined retain of BoundInputsView(a1);
  v45 = MEMORY[0x18D75B908](v44);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v177, v45);
  type metadata accessor for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  _s7SwiftUI15ModifiedContentVyACyACyAA7AnyViewVAA13EmptyModifierVGAA013EditModeScopeH0VGAA014HitTestBindingH0VGACyxq_GAA0F0A2aPRzAA0fH0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<BoundInputsView, EditModeScopeModifier>, HitTestBindingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<BoundInputsView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v46 = swift_retain();
  v47 = specialized FocusViewGraph.init(graph:)(v46);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  swift_release();
  *(_QWORD *)&v177 = v47;
  *((_QWORD *)&v177 + 1) = v49;
  v178 = v51;
  LOWORD(v179) = v53 & 0x101;
  BYTE2(v179) = BYTE2(v53) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v177 = 0;
  WORD4(v177) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v177 = 0uLL;
  v178 = 0;
  LOBYTE(v179) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x78)) = EventBindingManager.__allocating_init()();
  v54 = specialized Dictionary.init(dictionaryLiteral:)(v16);
  v179 = &type metadata for HoverEventDispatcher;
  v180 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v177 = v54;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
  v179 = &type metadata for PencilDoubleTapEventDispatcher;
  v180 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
  v179 = &type metadata for PencilSqueezeEventDispatcher;
  v180 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
  v55 = specialized Dictionary.init(dictionaryLiteral:)(v16);
  v179 = &type metadata for KeyEventDispatcher;
  v180 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v177 = v55;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v5 + *(_QWORD *)((*v3 & *v5) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v175.receiver = v5;
  v175.super_class = v56;
  v57 = objc_msgSendSuper2(&v175, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v61 = lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>((uint64_t)v57, v58, v59, v60);
  v62 = v57;
  ViewRendererHost.initializeViewGraph()();
  v63 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v64 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v65 = qword_1ECE02220;
    v66 = qword_1ECE02228;
    v67 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v68 = swift_retain();
      outlined copy of RepresentableContextValues?(v68, v64, v65, v66, v67);
      v69 = ViewGraph.preferenceBridge.getter();
      if (!v69 || (v70 = v69, swift_release(), v63 != v70))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v71 = swift_release();
      if ((v67 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v71 = outlined copy of RepresentableContextValues.EnvironmentStorage(v65, v66, v67 & 1);
      if ((v67 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v71, v72);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v65, v66, 1);
        static Update.ensure<A>(_:)();
        v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        outlined consume of RepresentableContextValues?(v63, v64, v65, v66, v67);
        outlined consume of RepresentableContextValues?(v63, v64, v65, v66, v67);
LABEL_10:
        v73 = (_QWORD *)((char *)v62 + *(_QWORD *)((*v3 & *v62) + 0x110));
        v74 = *v73;
        *(_OWORD *)v73 = v177;
        outlined consume of EnvironmentValues?(v74);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v177 = v65;
    *((_QWORD *)&v177 + 1) = v66;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v65, v66, 0);
    outlined consume of RepresentableContextValues?(v63, v64, v65, v66, v67);
    goto LABEL_10;
  }
LABEL_11:
  v75 = v62;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v76 = *(_QWORD *)((char *)v75 + *(_QWORD *)((*v3 & *v75) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v77 = (char **)(v76 + 24);
  swift_beginAccess();
  v78 = *(char **)(v76 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v76 + 24) = v78;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v78 + 2) + 1, 1, v78);
    *v77 = v78;
  }
  v81 = *((_QWORD *)v78 + 2);
  v80 = *((_QWORD *)v78 + 3);
  if (v81 >= v80 >> 1)
  {
    v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v78);
    *v77 = v78;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v83 = v82;
  v84 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v78 + 2) = v81 + 1;
  v85 = &v78[24 * v81];
  *((_QWORD *)v85 + 4) = v83;
  *((_QWORD *)v85 + 5) = v84;
  *((_DWORD *)v85 + 12) = -1;
  swift_release();
  swift_release();
  v86 = *(_QWORD *)((*v3 & *v75) + 0x210);
  swift_unknownObjectWeakAssign();
  v87 = v3;
  v88 = *(void **)((char *)v75 + *(_QWORD *)((*v3 & *v75) + 0x188));
  swift_unknownObjectWeakAssign();
  v89 = v88;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v90 = *(void **)((char *)v75 + *(_QWORD *)((*v87 & *v75) + 0x190));
  swift_unknownObjectWeakAssign();
  v91 = v90;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v92 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v92)
  {
    v93 = v92;
    swift_unknownObjectWeakAssign();

  }
  v94 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  v95 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v94)
  {
    v96 = v94;
    v97 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v94) + 0x1D0);
    v98 = swift_retain();
    v97(v98);

    swift_release();
  }
  v99 = *(_QWORD *)((char *)v75 + *(_QWORD *)((*v95 & *v75) + 0x1A0));
  v100 = lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
  *(_QWORD *)(v99 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v99 + 40) = v100;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v101 = FocusBridge.host.getter();
  if (v101)
  {
    v103 = (void *)v101;
    v104 = v102;
    v105 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v104 + 8) + 16))(v105);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v106 = *(void **)((char *)v75 + *(_QWORD *)((*v95 & *v75) + 0x1A8));
  v107 = swift_unknownObjectWeakAssign();
  v108 = MEMORY[0x18D760234](v107);
  if (!v108)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v109 = (void *)v108;
  v110 = swift_getObjectType();
  v111 = v106;
  swift_retain();

  if (((*(uint64_t (**)(void))(v110 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v112 = *(void **)((char *)v75 + *(_QWORD *)((*v95 & *v75) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v113 = v112;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v114 = *(void **)((char *)v75 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v75) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v115 = v114;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v116 = *(void **)((char *)v75 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v75) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v117 = v116;
  v118 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v119 = v117;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v120 = *(void **)((char *)v75 + *(_QWORD *)((*v118 & *v75) + 0x1F0));
  v121 = swift_unknownObjectWeakAssign();
  v122 = MEMORY[0x18D760234](v121);
  if (!v122)
    goto LABEL_48;
  v123 = (void *)v122;
  v124 = v120;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v125 = objc_msgSend(v75, sel_traitCollection);
  v126 = objc_msgSend(v125, sel_userInterfaceIdiom);

  if (v126 == (id)1
    || (v127 = objc_msgSend(v75, sel_traitCollection),
        v128 = objc_msgSend(v127, sel_userInterfaceIdiom),
        v127,
        v128 == (id)6))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PointerBridge<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t)&protocol witness table for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v130 = objc_msgSend(objc_allocWithZone(v129), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v131 = *(_QWORD *)((*v118 & *v75) + 0x200);
    v132 = *(void **)((char *)v75 + v131);
    *(_QWORD *)((char *)v75 + v131) = v130;

  }
  v133 = *(char **)((char *)v75 + v86);
  v134 = MEMORY[0x18D760234](&v133[direct field offset for ContextMenuBridge.host]);
  if (!v134)
LABEL_49:
    __break(1u);
  v135 = (void *)v134;
  v136 = swift_getObjectType();
  v137 = v133;
  swift_retain();

  if (((*(uint64_t (**)(void))(v136 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v138 = v118;
  v139 = *(char **)((char *)v75 + *(_QWORD *)((*v118 & *v75) + 0x220));
  *(_QWORD *)&v139[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v61;
  v140 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v140, v141);
  v142 = v139;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v143 = *(_QWORD *)((char *)v75 + *(_QWORD *)((*v138 & *v75) + 0x78));
  v144 = lazy protocol witness table accessor for type _UIHostingView<BoundInputsView> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v143 + 24) = v144;
  swift_unknownObjectWeakAssign();
  v145 = *(_QWORD *)((*v138 & *v75) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v143 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v146 = (void *)objc_opt_self();
  v147 = objc_msgSend(v146, sel_defaultCenter);
  v148 = v75;
  v149 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v147, sel_addObserver_selector_name_object_, v148, sel_willBeginSnapshotSession, v149, 0);

  v150 = v148;
  v151 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v147, sel_addObserver_selector_name_object_, v150, sel_didEndSnapshotSession, v151, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v153 = (void *)*MEMORY[0x1E0C99720];
  v154 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v154;
  v155 = (void *)*MEMORY[0x1E0DC5320];
  v156 = v153;
  v157 = v154;
  v158 = v155;
  v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v159[2] = 3;
  v159[6] = v158;
  v160 = v159[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v147, sel_addObserver_selector_name_object_, v150, sel_externalEnvironmentDidChange, v160, 0);
  objc_msgSend(v147, sel_addObserver_selector_name_object_, v150, sel_externalEnvironmentDidChange, v159[5], 0);
  objc_msgSend(v147, sel_addObserver_selector_name_object_, v150, sel_externalEnvironmentDidChange, v159[6], 0);
  swift_bridgeObjectRelease_n();
  v161 = *(_QWORD *)((char *)v75 + v145);
  v162 = *(_QWORD *)(v161 + 48);
  if (v162)
  {
    v163 = v150;
    swift_retain();
    objc_msgSend(v163, sel_addGestureRecognizer_, v162);
  }
  else
  {
    v164 = v150;
    swift_retain();
  }
  objc_msgSend(v150, sel_addGestureRecognizer_, *(_QWORD *)(v161 + 56), ObjectType, 0);
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v165 = objc_msgSend(v146, sel_defaultCenter);
    objc_msgSend(v165, sel_addObserver_selector_name_object_, v150, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v165, sel_addObserver_selector_name_object_, v150, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v166 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v167 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v167)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v167; ++i)
    {
      v169 = *(_QWORD *)(v166 + 8 * i + 32);
      objc_msgSend(v147, sel_addObserver_selector_name_object_, v150, sel_accessibilityBooleanDidChange_, v169, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v147, sel_addObserver_selector_name_object_, v150, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v170 = one-time initialization token for didUpdateListLayout;
  v171 = v150;
  if (v170 != -1)
    swift_once();
  objc_msgSend(v147, sel_addObserver_selector_name_object_, v171, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v172 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v172, (uint64_t)v176);
  v176[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v176, (uint64_t)v171);
  swift_endAccess();

  static Update.end()();
  return v171;
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  Class v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  uint64_t v27;
  Class v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  objc_class *v50;
  id v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  void (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  _QWORD *v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  Class v120;
  id v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  _QWORD *v139;
  void *v140;
  _QWORD *v141;
  void *v142;
  uint64_t inited;
  void *v144;
  void *v145;
  void *v146;
  id v147;
  id v148;
  id v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t i;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t ObjectType;
  objc_super v167;
  _BYTE v168[16];
  __int128 v169;
  uint64_t v170;
  ValueMetadata *v171;
  unint64_t v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v4 = v1;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v1 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x90)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x98)) = 0;
  v5 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA0);
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xA8)) = 0;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xB8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xC8)) = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD0)) = 0;
  v6 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xD8);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE0);
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xE8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF0)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0xF8)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x100)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x108)) = -1;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x138)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x148)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x150)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x158)) = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x160)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x168)) = 0;
  v8 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x170);
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x178)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x180)) = 2;
  v9 = *(_QWORD *)((*v2 & *v4) + 0x188);
  v10 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>());
  *(_QWORD *)((char *)v4 + v9) = specialized DeprecatedAlertBridge.init(style:)(1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, Alert.Presentation>);
  v11 = *(_QWORD *)((*v2 & *v4) + 0x190);
  v12 = objc_allocWithZone((Class)type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>());
  *(_QWORD *)((char *)v4 + v11) = specialized DeprecatedAlertBridge.init(style:)(0, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<InputAccessoryBar, ActionSheet.Presentation>);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x198)) = 1;
  v13 = *(_QWORD *)((*v2 & *v4) + 0x1A0);
  type metadata accessor for FocusBridge();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_QWORD *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(_QWORD *)((char *)v4 + v13) = v14;
  v17 = *(_QWORD *)((*v2 & *v4) + 0x1A8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for DragAndDropBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DragAndDropBridge);
  *(_QWORD *)((char *)v4 + v17) = objc_msgSend(objc_allocWithZone(v18), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1B0)) = 0;
  v19 = *(_QWORD *)((*v2 & *v4) + 0x1B8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for TooltipBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TooltipBridge);
  *(_QWORD *)((char *)v4 + v19) = objc_msgSend(objc_allocWithZone(v20), sel_init);
  v21 = *(_QWORD *)((*v2 & *v4) + 0x1C0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for EditMenuBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for EditMenuBridge);
  *(_QWORD *)((char *)v4 + v21) = objc_msgSend(objc_allocWithZone(v22), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1D0)) = 0;
  v23 = *(_QWORD *)((*v2 & *v4) + 0x1D8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitStatusBarBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitStatusBarBridge);
  v24 = swift_allocObject();
  *(_WORD *)(v24 + 16) = 2;
  *(_QWORD *)(v24 + 24) = v15;
  *(_QWORD *)(v24 + 32) = -1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + v23) = v24;
  swift_weakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x1E8)) = 0;
  v25 = *(_QWORD *)((*v2 & *v4) + 0x1F0);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AVKitCaptureButtonBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AVKitCaptureButtonBridge);
  *(_QWORD *)((char *)v4 + v25) = objc_msgSend(objc_allocWithZone(v26), sel_init);
  v27 = *(_QWORD *)((*v2 & *v4) + 0x1F8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PencilEventsBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PencilEventsBridge);
  *(_QWORD *)((char *)v4 + v27) = objc_msgSend(objc_allocWithZone(v28), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x200)) = 0;
  v29 = *(_QWORD *)((*v2 & *v4) + 0x208);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitSensoryFeedbackCache<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitSensoryFeedbackCache);
  v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v30 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)((char *)v4 + v29) = v30;
  v31 = *(_QWORD *)((*v2 & *v4) + 0x210);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ContextMenuBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ContextMenuBridge);
  *(_QWORD *)((char *)v4 + v31) = objc_msgSend(objc_allocWithZone(v32), sel_init);
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x218)) = 0;
  v33 = *(_QWORD *)((*v2 & *v4) + 0x220);
  *(_QWORD *)((char *)v4 + v33) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x228)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x230)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x238)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x248)) = 0;
  v34 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x250);
  *(_QWORD *)v34 = 0;
  v34[8] = 0;
  *((_DWORD *)v34 + 3) = 0;
  v35 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x258));
  v36 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v15);
  *v35 = 0;
  v35[1] = v36;
  v35[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v37 = (char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x270);
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x278)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x280)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x288)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x290)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x298)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)((*v2 & *v4) + 0x2A0)) = 0;
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x60)) = a1;
  v38 = swift_bridgeObjectRetain();
  v39 = MEMORY[0x18D75B908](v38);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(ObjectType + 1768))(&v169, v39);
  type metadata accessor for ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier>();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<InputAccessoryBar, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x68)) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v40 = swift_retain();
  v41 = specialized FocusViewGraph.init(graph:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_release();
  *(_QWORD *)&v169 = v41;
  *((_QWORD *)&v169 + 1) = v43;
  v170 = v45;
  LOWORD(v171) = v47 & 0x101;
  BYTE2(v171) = BYTE2(v47) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  *(_QWORD *)&v169 = 0;
  WORD4(v169) = 0;
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  v169 = 0uLL;
  v170 = 0;
  LOBYTE(v171) = 0;
  ViewGraph.append<A>(feature:)();
  type metadata accessor for EventBindingManager();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x78)) = EventBindingManager.__allocating_init()();
  v48 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v171 = &type metadata for HoverEventDispatcher;
  v172 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  *(_QWORD *)&v169 = v48;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  v171 = &type metadata for PencilDoubleTapEventDispatcher;
  v172 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  v171 = &type metadata for PencilSqueezeEventDispatcher;
  v172 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  v49 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v171 = &type metadata for KeyEventDispatcher;
  v172 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  *(_QWORD *)&v169 = v49;
  EventBindingManager.addForwardedEventDispatcher(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)((char *)v4 + *(_QWORD *)((*v2 & *v4) + 0x140)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _UIHostingView<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  v167.receiver = v4;
  v167.super_class = v50;
  v51 = objc_msgSendSuper2(&v167, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v52 = lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  v53 = v51;
  ViewRendererHost.initializeViewGraph()();
  v54 = static RepresentableContextValues.current;
  if ((_QWORD)static RepresentableContextValues.current != 1)
  {
    v55 = *((_QWORD *)&static RepresentableContextValues.current + 1);
    v56 = qword_1ECE02220;
    v57 = qword_1ECE02228;
    v58 = byte_1ECE02230;
    if ((_QWORD)static RepresentableContextValues.current)
    {
      v59 = swift_retain();
      outlined copy of RepresentableContextValues?(v59, v55, v56, v57, v58);
      v60 = ViewGraph.preferenceBridge.getter();
      if (!v60 || (v61 = v60, swift_release(), v54 != v61))
      {
        swift_retain();
        ViewGraph.preferenceBridge.setter();
      }
      v62 = swift_release();
      if ((v58 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      swift_retain();
      v62 = outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, v58 & 1);
      if ((v58 & 1) != 0)
      {
LABEL_7:
        MEMORY[0x1E0C80A78](v62, v63);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 1);
        static Update.ensure<A>(_:)();
        v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
        outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
LABEL_10:
        v64 = (_QWORD *)((char *)v53 + *(_QWORD *)((*v2 & *v53) + 0x110));
        v65 = *v64;
        *(_OWORD *)v64 = v169;
        outlined consume of EnvironmentValues?(v65);
        goto LABEL_11;
      }
    }
    *(_QWORD *)&v169 = v56;
    *((_QWORD *)&v169 + 1) = v57;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v56, v57, 0);
    outlined consume of RepresentableContextValues?(v54, v55, v56, v57, v58);
    goto LABEL_10;
  }
LABEL_11:
  v66 = v53;
  swift_retain();
  DisplayList.ViewRenderer.host.setter();
  swift_release();
  swift_unknownObjectWeakAssign();
  v67 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x1D8));
  swift_unknownObjectWeakAssign();
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v68 = (char **)(v67 + 24);
  swift_beginAccess();
  v69 = *(char **)(v67 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v67 + 24) = v69;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v69 + 2) + 1, 1, v69);
    *v68 = v69;
  }
  v72 = *((_QWORD *)v69 + 2);
  v71 = *((_QWORD *)v69 + 3);
  if (v72 >= v71 >> 1)
  {
    v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v69);
    *v68 = v69;
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<StatusBarKey>, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  v74 = v73;
  v75 = lazy protocol witness table accessor for type _AnyPreferenceKey<StatusBarKey> and conformance _AnyPreferenceKey<A>();
  *((_QWORD *)v69 + 2) = v72 + 1;
  v76 = &v69[24 * v72];
  *((_QWORD *)v76 + 4) = v74;
  *((_QWORD *)v76 + 5) = v75;
  *((_DWORD *)v76 + 12) = -1;
  swift_release();
  swift_release();
  v77 = *(_QWORD *)((*v2 & *v66) + 0x210);
  swift_unknownObjectWeakAssign();
  v78 = v2;
  v79 = *(void **)((char *)v66 + *(_QWORD *)((*v2 & *v66) + 0x188));
  swift_unknownObjectWeakAssign();
  v80 = v79;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v81 = *(void **)((char *)v66 + *(_QWORD *)((*v78 & *v66) + 0x190));
  swift_unknownObjectWeakAssign();
  v82 = v81;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v83 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  if (v83)
  {
    v84 = v83;
    swift_unknownObjectWeakAssign();

  }
  v85 = specialized _UIHostingView.sheetBridge.getter((uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??, (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??);
  v86 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v85)
  {
    v87 = v85;
    v88 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v85) + 0x1D0);
    v89 = swift_retain();
    v88(v89);

    swift_release();
  }
  v90 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v86 & *v66) + 0x1A0));
  v91 = lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  *(_QWORD *)(v90 + 32) = &protocol witness table for _UIHostingView<A>;
  *(_QWORD *)(v90 + 40) = v91;
  swift_unknownObjectWeakAssign();
  swift_retain();
  v92 = FocusBridge.host.getter();
  if (v92)
  {
    v94 = (void *)v92;
    v95 = v93;
    v96 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v95 + 8) + 16))(v96);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  v97 = *(void **)((char *)v66 + *(_QWORD *)((*v86 & *v66) + 0x1A8));
  v98 = swift_unknownObjectWeakAssign();
  v99 = MEMORY[0x18D760234](v98);
  if (!v99)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v100 = (void *)v99;
  v101 = swift_getObjectType();
  v102 = v97;
  swift_retain();

  if (((*(uint64_t (**)(void))(v101 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }

  swift_release();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  v103 = *(void **)((char *)v66 + *(_QWORD *)((*v86 & *v66) + 0x1B8));
  swift_unknownObjectWeakAssign();
  v104 = v103;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v105 = *(void **)((char *)v66 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v66) + 0x1C0));
  swift_unknownObjectWeakAssign();
  v106 = v105;
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v107 = *(void **)((char *)v66 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v66) + 0x1F8));
  swift_unknownObjectWeakAssign();
  v108 = v107;
  v109 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v110 = v108;
  swift_retain();
  GraphHost.addPreference<A>(_:)();

  swift_release();
  v111 = *(void **)((char *)v66 + *(_QWORD *)((*v109 & *v66) + 0x1F0));
  v112 = swift_unknownObjectWeakAssign();
  v113 = MEMORY[0x18D760234](v112);
  if (!v113)
    goto LABEL_48;
  v114 = (void *)v113;
  v115 = v111;
  swift_retain();

  GraphHost.addPreference<A>(_:)();
  swift_release();
  v116 = objc_msgSend(v66, sel_traitCollection);
  v117 = objc_msgSend(v116, sel_userInterfaceIdiom);

  if (v117 == (id)1
    || (v118 = objc_msgSend(v66, sel_traitCollection),
        v119 = objc_msgSend(v118, sel_userInterfaceIdiom),
        v118,
        v119 == (id)6))
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for PointerBridge<InputAccessoryBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type InputAccessoryBar and conformance InputAccessoryBar, (uint64_t)&type metadata for InputAccessoryBar, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PointerBridge);
    v121 = objc_msgSend(objc_allocWithZone(v120), sel_init);
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v122 = *(_QWORD *)((*v109 & *v66) + 0x200);
    v123 = *(void **)((char *)v66 + v122);
    *(_QWORD *)((char *)v66 + v122) = v121;

  }
  v124 = *(char **)((char *)v66 + v77);
  v125 = MEMORY[0x18D760234](&v124[direct field offset for ContextMenuBridge.host]);
  if (!v125)
LABEL_49:
    __break(1u);
  v126 = (void *)v125;
  v127 = swift_getObjectType();
  v128 = v124;
  swift_retain();

  if (((*(uint64_t (**)(void))(v127 + 1784))() & 1) != 0)
  {
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
  }
  swift_release();

  v129 = v109;
  v130 = *(char **)((char *)v66 + *(_QWORD *)((*v109 & *v66) + 0x220));
  *(_QWORD *)&v130[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = v52;
  v131 = swift_unknownObjectWeakAssign();
  MEMORY[0x1E0C80A78](v131, v132);
  v133 = v130;
  swift_retain();
  static Update.ensure<A>(_:)();

  swift_release();
  v134 = *(_QWORD *)((char *)v66 + *(_QWORD *)((*v129 & *v66) + 0x78));
  v135 = lazy protocol witness table accessor for type _UIHostingView<InputAccessoryBar> and conformance _UIHostingView<A>();
  swift_beginAccess();
  *(_QWORD *)(v134 + 24) = v135;
  swift_unknownObjectWeakAssign();
  v136 = *(_QWORD *)((*v129 & *v66) + 0x140);
  swift_beginAccess();
  *(_QWORD *)(v134 + 40) = MEMORY[0x1E0CE4210];
  swift_unknownObjectWeakAssign();
  v137 = (void *)objc_opt_self();
  v138 = objc_msgSend(v137, sel_defaultCenter);
  v139 = v66;
  v140 = (void *)MEMORY[0x18D75CC88](0xD000000000000032, 0x8000000187BDA5E0);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v139, sel_willBeginSnapshotSession, v140, 0);

  v141 = v139;
  v142 = (void *)MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BDA620);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_didEndSnapshotSession, v142, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  v144 = (void *)*MEMORY[0x1E0C99720];
  v145 = (void *)*MEMORY[0x1E0C998A0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0C99720];
  *(_QWORD *)(inited + 40) = v145;
  v146 = (void *)*MEMORY[0x1E0DC5320];
  v147 = v144;
  v148 = v145;
  v149 = v146;
  v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 3, 1, (_QWORD *)inited);
  v150[2] = 3;
  v150[6] = v149;
  v151 = v150[4];
  swift_bridgeObjectRetain();
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_externalEnvironmentDidChange, v151, 0);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_externalEnvironmentDidChange, v150[5], 0);
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_externalEnvironmentDidChange, v150[6], 0);
  swift_bridgeObjectRelease_n();
  v152 = *(_QWORD *)((char *)v66 + v136);
  v153 = *(_QWORD *)(v152 + 48);
  if (v153)
  {
    v154 = v141;
    swift_retain();
    objc_msgSend(v154, sel_addGestureRecognizer_, v153);
  }
  else
  {
    v155 = v141;
    swift_retain();
  }
  objc_msgSend(v141, sel_addGestureRecognizer_, *(_QWORD *)(v152 + 56));
  swift_release();

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v156 = objc_msgSend(v137, sel_defaultCenter);
    objc_msgSend(v156, sel_addObserver_selector_name_object_, v141, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v156, sel_addObserver_selector_name_object_, v141, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
  if (one-time initialization token for didChangeNotifications != -1)
    swift_once();
  v157 = static AccessibilityCore.UserSettings.didChangeNotifications;
  v158 = *(_QWORD *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v158)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v158; ++i)
    {
      v160 = *(_QWORD *)(v157 + 8 * i + 32);
      objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_accessibilityBooleanDidChange_, v160, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v141, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E0DC4510], 0);
  v161 = one-time initialization token for didUpdateListLayout;
  v162 = v141;
  if (v161 != -1)
    swift_once();
  objc_msgSend(v138, sel_addObserver_selector_name_object_, v162, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_unknownObjectWeakInit();
  v163 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<Swift.AnyObject>(v163, (uint64_t)v168);
  v168[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v168, (uint64_t)v162);
  swift_endAccess();

  static Update.end()();
  return v162;
}

{
  return specialized _UIHostingView.init(rootView:)(a1, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, Alert.Presentation>, (uint64_t (*)(_QWORD))type metadata accessor for DeprecatedAlertBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, ActionSheet.Presentation>, (uint64_t (*)(_QWORD))type metadata accessor for DragAndDropBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for TooltipBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for EditMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, type metadata accessor for UIKitStatusBarBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for PencilEventsBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(_QWORD))type metadata accessor for ContextMenuBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, &lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t)closure #1 in RepresentableContextValues.environment.getterpartial apply, (uint64_t (*)(uint64_t))specialized closure #1 in _UIHostingView.sheetBridge.getter, (void (*)(uint64_t))outlined consume of SheetBridge<InputAccessoryBar, SheetPreference.Key>??,
           (void (*)(void *))outlined copy of SheetBridge<InputAccessoryBar, SheetPreference.Key>??,
           &lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>,
           (uint64_t (*)(_QWORD))type metadata accessor for PointerBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>,
           (uint64_t)closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)partial apply,
           &lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>);
}

uint64_t key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

id @objc ListCollectionViewCell.init(frame:)(void *a1, double a2, double a3, double a4, double a5)
{
  objc_super v10;

  v10.receiver = a1;
  v10.super_class = (Class)type metadata accessor for ListCollectionViewCell();
  return objc_msgSendSuper2(&v10, sel_initWithFrame_, a2, a3, a4, a5);
}

uint64_t type metadata accessor for ListCollectionViewCell()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ListCollectionViewCell;
  if (!type metadata singleton initialization cache for ListCollectionViewCell)
    return swift_getSingletonMetadata();
  return result;
}

id @objc ListCollectionViewCellBase.init(frame:)(double a1, double a2, double a3, double a4)
{
  return ListCollectionViewCellBase.init(frame:)(a1, a2, a3, a4);
}

id ListCollectionViewCellBase.init(frame:)(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v9 = *MEMORY[0x1E0DEEDD8] & *v4;
  *((_BYTE *)v4 + direct field offset for ListCollectionViewCellBase.wasEditing) = 0;
  *((_BYTE *)v4 + direct field offset for ListCollectionViewCellBase.wasSwiped) = 0;
  v10 = (char *)v4 + direct field offset for ListCollectionViewCellBase.cellHostWidth;
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v11 = (char *)v4 + direct field offset for ListCollectionViewCellBase.lastConfiguration;
  v12 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *((_BYTE *)v4 + direct field offset for ListCollectionViewCellBase.shouldHugContent) = 0;
  v13 = (_QWORD *)((char *)v4 + direct field offset for ListCollectionViewCellBase.viewListID);
  *v13 = 0;
  v13[1] = 0;
  v14 = (char *)v4 + direct field offset for ListCollectionViewCellBase.selectionBehavior;
  v14[64] = 0;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *(_OWORD *)v14 = xmmword_187BF9840;
  *((_OWORD *)v14 + 1) = 0u;
  v15 = (_QWORD *)((char *)v4 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior);
  *v15 = 1;
  v15[1] = 0;
  v15[2] = 0;
  *(_DWORD *)((char *)v4 + direct field offset for ListCollectionViewCellBase.popUpButtonSeed) = -1;
  *(_QWORD *)((char *)v4 + direct field offset for ListCollectionViewCellBase.host) = 0;
  v17 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)(v9 + 168), *(_QWORD *)(v9 + 176), v16);
  v20.receiver = v4;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v18, sel__setAllowsStateUpdatesWhenEvaluatingBackgroundAppearance_, 1);
  objc_msgSend(v18, sel_setAutomaticallyUpdatesContentConfiguration_, 0);

  return v18;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> Section<A, B, C>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)(a4 - 24);
  v10 = vextq_s8(*(int8x16_t *)(a4 - 16), *(int8x16_t *)(a4 - 16), 8uLL);
  v11 = v7;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, a3, &v10);
  return static PubliclyPrimitiveView._makeViewList(view:inputs:)(a1, a2, a3, v8);
}

uint64_t static PubliclyPrimitiveView._makeViewList(view:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_DWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_BYTE *)(a2 + 80);
  v21 = *a1;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = *(_OWORD *)(a2 + 24);
  v16 = v7;
  v17 = *(_OWORD *)(a2 + 48);
  v18 = v8;
  v19 = v9;
  v20 = v10;
  return static PubliclyPrimitiveView.defaultMakeViewList(view:inputs:)(&v21, &v12, a3, a4);
}

void protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance PropertiesTransform<A>(uint64_t a1, uint64_t a2)
{
  static PropertiesTransform.willRemove(attribute:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance PlatformViewChild<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static PlatformViewChild.willRemove(attribute:)(a1, a2, a3, MEMORY[0x1E0CE3268]);
}

uint64_t static PlatformViewChild.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  AGGraphGetAttributeInfo();
  v5 = swift_retain();
  a4(v5);
  return swift_release();
}

uint64_t View.accessibilityHint(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(_BYTE *)(v12 + 48) = a3 & 1;
  *(_QWORD *)(v12 + 56) = a4;
  v14 = v12;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5870], (uint64_t)&v14, 1, a5, MEMORY[0x1E0CE5870], a6);
  return swift_bridgeObjectRelease();
}

uint64_t View.textSizing(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

void InsettableGroupedListBody.CollectionViewBody.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for CollectionViewListRoot();
}

void sub_186E6F4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  InsettableGroupedListBody.CollectionViewBody.style.getter(v9, v15, v10);
  InsettableGroupedListBody.CollectionViewBody.collectionViewListRoot(style:)(v10, v9, (uint64_t)v12);
}

uint64_t sub_186E6F54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v2);
  ((void (*)(uint64_t, uint64_t, _UNKNOWN **))static ViewBuilder.buildExpression<A>(_:))(v4, v1, &protocol witness table for CollectionViewListRoot<A, B>);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v1, v0);
  return v8(v5, v1);
}

uint64_t destroy for CollectionViewListRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (v5 + a1 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ~v12;
  v14 = (uint64_t *)((((v9 + (v12 | 7) + 8) & ~(v12 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v14 + v12 + 8) & v13);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v11 + 8))(((unint64_t)v14 + v12 + 8) & v13, v10);
  }
  v15 = *v14;
  if ((unint64_t)*v14 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  result = (v15 + 1);
  if ((_DWORD)v15 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for CollectionViewListRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  size_t v34;
  _QWORD *v35;
  unint64_t v36;
  void (*v37)(unint64_t, unint64_t, uint64_t);
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v44;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
  v14 = *(_QWORD *)(v9 + 64);
  v15 = v12 + v14;
  v16 = v13 + v14;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  v20 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_DWORD *)(v23 + 80);
  v25 = v24 + 8;
  v26 = *(_DWORD *)(v23 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v27 = (_QWORD *)(((unint64_t)v20 + v24 + 8) & v26);
  v28 = (_QWORD *)(((unint64_t)v21 + v24 + 8) & v26);
  v29 = ~v24;
  v30 = (v24 + 16) & ~v24;
  v31 = *(_QWORD *)(v23 + 64);
  v32 = (uint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    v33 = *v32;
    if ((unint64_t)*v32 >= 0xFFFFFFFF)
      LODWORD(v33) = -1;
    v34 = v30 + v31;
    if ((_DWORD)v33 != -1)
      goto LABEL_5;
LABEL_7:
    *v27 = *v28;
    v35 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v35 = *v32;
    v44 = ((unint64_t)v35 + v25) & v29;
    v36 = ((unint64_t)v32 + v25) & v29;
    v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 16);
    swift_retain();
    swift_retain();
    v37(v44, v36, v22);
    goto LABEL_8;
  }
  v34 = v30 + v31;
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v32 + v25) & v29))
    goto LABEL_7;
LABEL_5:
  memcpy(v27, v28, v34);
LABEL_8:
  v38 = ((unint64_t)v27 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((unint64_t)v28 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v38 = *(_OWORD *)v39;
  v40 = *(_OWORD *)(v39 + 16);
  v41 = *(_OWORD *)(v39 + 32);
  v42 = *(_OWORD *)(v39 + 48);
  *(_BYTE *)(v38 + 64) = *(_BYTE *)(v39 + 64);
  *(_OWORD *)(v38 + 32) = v41;
  *(_OWORD *)(v38 + 48) = v42;
  *(_OWORD *)(v38 + 16) = v40;
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if ((a2 & 0x100) == 0)
  {
    swift_retain();
    v4 = static os_log_type_t.fault.getter();
    v5 = static Log.runtimeIssuesLog.getter();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v10 = v8;
      *(_DWORD *)v7 = 136315138;
      v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000187BDF3F0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v8, -1, -1);
      MEMORY[0x18D760108](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat?>.Content(a1, a2, 0);
    swift_release();
    swift_release();
    return v11;
  }
  return a1;
}

{
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if ((a2 & 0x10000) != 0)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    v4 = static os_log_type_t.fault.getter();
    v5 = static Log.runtimeIssuesLog.getter();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v10 = v8;
      *(_DWORD *)v7 = 136315138;
      v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x8000000187BDF5A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_186E48000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v8, -1, -1);
      MEMORY[0x18D760108](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Color?>.Content(a1, a2);
    swift_release();
    swift_release();
    return v11;
  }
  return a1;
}

uint64_t key path getter for EnvironmentValues.isFocused : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isFocused.getter();
  *a1 = result & 1;
  return result;
}

uint64_t EnvironmentValues.isFocused.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unsigned __int8 v10;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v10;
}

uint64_t EnvironmentValues.isFocused.getter()
{
  return EnvironmentValues.isFocused.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t partial apply for closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)()
{
  type metadata accessor for ([Int], [Int])?();
  return Collection.withContiguousStorage<A>(_:)();
}

void CollectionChanges.formChanges<A, B>(from:to:)()
{
  type metadata accessor for CollectionChanges.Element();
}

uint64_t iterateRange #1 <A, B><A1, B1><A2>(from:length:in:) in CollectionChanges.formChanges<A, B>(from:to:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, char *a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t, double);
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  _QWORD v34[2];
  char *v35;
  uint64_t TupleTypeMetadata2;
  char *v37;
  void (*v38)(char *, uint64_t);

  v37 = a3;
  v38 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v5);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v35 = (char *)v34 - v10;
  v11 = *(_QWORD **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v34 - v19;
  v21 = (void (*)(char *, uint64_t, uint64_t, double))v11[2];
  v21((char *)v34 - v19, a1, AssociatedTypeWitness, v18);
  dispatch thunk of Collection.endIndex.getter();
  Collection.formIndex(_:offsetBy:limitedBy:)();
  v38 = (void (*)(char *, uint64_t))v11[1];
  v38(v15, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v21)(v15, a1, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    v24 = TupleTypeMetadata2;
    v25 = *(int *)(TupleTypeMetadata2 + 48);
    v34[1] = AssociatedConformanceWitness;
    v26 = v35;
    v27 = &v35[v25];
    v28 = (void (*)(char *, char *, uint64_t))v11[4];
    v28(v35, v20, AssociatedTypeWitness);
    v28(v27, v15, AssociatedTypeWitness);
    v29 = &v7[*(int *)(v24 + 48)];
    ((void (*)(char *, char *, uint64_t))v21)(v7, v26, AssociatedTypeWitness);
    ((void (*)(char *, char *, uint64_t))v21)(v29, v27, AssociatedTypeWitness);
    v30 = v37;
    v28(v37, v7, AssociatedTypeWitness);
    v31 = (uint64_t (*)(char *, uint64_t))v38;
    v38(v29, AssociatedTypeWitness);
    v32 = &v7[*(int *)(v24 + 48)];
    v28(v7, v26, AssociatedTypeWitness);
    v28(v32, v27, AssociatedTypeWitness);
    v33 = type metadata accessor for Range();
    v28(&v30[*(int *)(v33 + 36)], v32, AssociatedTypeWitness);
    return v31(v7, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CollectionChanges.changedOffsets<A, B>(from:to:limit:)()
{
  uint64_t v1;

  type metadata accessor for ([Int], [Int])?();
  Collection.withContiguousStorage<A>(_:)();
  return v1;
}

void type metadata accessor for ([Int], [Int])?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ([Int], [Int])?)
  {
    type metadata accessor for ([Int], [Int])();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ([Int], [Int])?);
  }
}

void type metadata accessor for CollectionChanges.Element()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for CountingIndexListDataSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountingIndexListDataSource);
}

uint64_t initializeWithCopy for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  v9 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 + v12 + 8;
  v14 = (v13 + a1) & ~v12;
  v15 = (v13 + a2) & ~v12;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v14, v15, AssociatedTypeWitness);
  v17 = *(_QWORD *)(v11 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v18 = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v17 + v20 + v14) & ~v20;
  v22 = (v17 + v20 + v15) & ~v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v21, v22, v18);
  *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v21) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v19 + 64) + 7 + v22) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithCopy for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void CollectionChanges.endIndex.getter()
{
  type metadata accessor for CollectionChanges.Element();
}

uint64_t CountingIndexListDataSource.rowIDs(forSectionAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  v18 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v16 - v7;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v16 - v12;
  swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for CountingIndex();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 16) - 8) + 16))(v8, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 80))(v8, v4, v3);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v18, v13, v9);
}

void CollectionChanges.subscript.getter()
{
  type metadata accessor for CollectionChanges.Element();
}

uint64_t sub_186E70BB4()
{
  return Array.subscript.getter();
}

void CollectionChanges.init()()
{
  type metadata accessor for CollectionChanges.Element();
}

uint64_t sub_186E70BFC()
{
  return Array.init()();
}

void type metadata accessor for CollectionChanges()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t View.accessibilityShowsLargeContentViewer<A>(_:largeContentView:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a6;
  v23 = a4;
  v8 = a1;
  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AccessibilityLargeContentViewModifier(0, v13, v14, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v22 - v19;
  a2(v18);
  *v20 = v8;
  (*(void (**)(_BYTE *, char *, uint64_t))(v9 + 32))(&v20[*(int *)(v15 + 36)], v11, a5);
  MEMORY[0x18D75B4AC](v20, v23, v15, v24);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v20, v15);
}

uint64_t destroy for AccessibilityLargeContentViewModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues()
{
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t destroy for AccessibilityProxyModifier(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t key path setter for EnvironmentValues.refresh : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t IncrementalTransaction.updateValue()()
{
  uint64_t v0;
  uint64_t result;

  AGGraphGetValue();
  result = AGGraphGetValue();
  if (!*(_BYTE *)(result + 4))
  {
    swift_retain();
    Transaction.disableAnimations()();
    goto LABEL_8;
  }
  if (*(_BYTE *)(result + 4) == 1 || *(_BYTE *)(v0 + 16) == 2)
  {
    swift_retain();
LABEL_8:
    *(_BYTE *)(v0 + 16) = *(_BYTE *)(AGGraphGetValue() + 4);
    AGGraphSetOutputValue();
    return swift_release();
  }
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    Transaction.addAnimationListener(_:)();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.isPresentingContextMenu.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.activeContextMenu : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.activeContextMenu.getter();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t EnvironmentValues.activeContextMenu.getter()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v3;
  char v4;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveContextMenuKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveContextMenuKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v1 = 0x100000000;
  if (!v4)
    v1 = 0;
  return v1 | v3;
}

uint64_t View.hoverEffect(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v9;

  v9 = *a1;
  v7 = lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect();
  return View.hoverEffect<A>(_:isEnabled:)((uint64_t)&v9, 1, a2, (uint64_t)&type metadata for HoverEffect, a3, v7, a4);
}

uint64_t View.hoverEffect(_:isEnabled:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  uint64_t v11;

  v11 = *a1;
  v9 = lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect();
  return View.hoverEffect<A>(_:isEnabled:)((uint64_t)&v11, a2, a3, (uint64_t)&type metadata for HoverEffect, a4, v9, a5);
}

uint64_t View.contentShape<A>(_:eoFill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v21 = a5;
  v7 = a2;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for _ContentShapeModifier(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v17);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v19, v11, a4);
  v19[*(int *)(v14 + 36)] = v7;
  MEMORY[0x18D75B4AC](v19, a3, v14, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t _ContentShapeModifier.init(shape:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for _ContentShapeModifier(0, a3, a4, v9);
  *(_BYTE *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

BOOL partial apply for specialized closure #2 in StackPlacement.placeSection(_:from:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return specialized closure #1 in closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, *(_QWORD *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000187BD6020);
}

{
  uint64_t v2;

  return specialized closure #1 in closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, *(_QWORD *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000187BD5BF0);
}

{
  uint64_t v2;

  return specialized closure #1 in closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, *(_QWORD *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000187BD5D00);
}

{
  uint64_t v2;

  return specialized closure #1 in closure #1 in StackPlacement.place(children:from:position:stopping:style:)(a1, a2, *(_QWORD *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000187BD5F70);
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = a3;
  v16 = a4;
  v17 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(v16, v12, v14, v11);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t partial apply for closure #1 in closure #1 in PlatformViewChild.updateValue()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _DynamicPropertyBuffer.update(container:phase:)();
  *a1 = result & 1;
  return result;
}

uint64_t AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[3];

  v42 = a2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProxyModifier<A>);
  v3 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for VStack();
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for Optional();
  v53[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v7);
  v53[1] = &protocol witness table for HiddenModifierAllowingAccessibility;
  v11 = MEMORY[0x1E0CE2E70];
  v52[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v53);
  v52[1] = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v51 = MEMORY[0x18D75FFDC](v11, v9, v52);
  v38 = v10;
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v10, &v51);
  v36 = type metadata accessor for _BackgroundModifier();
  v12 = type metadata accessor for ModifiedContent();
  v40 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v35 - v14;
  v35 = type metadata accessor for AccessibilityProxyModifier.GeometryTransformModifier(255, v5, v6, v16);
  v17 = type metadata accessor for ModifiedContent();
  v39 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v35 - v24;
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v3, v23);
  View.transformPreference<A>(_:_:)();
  v49 = v50;
  v43 = v5;
  v44 = v6;
  v45 = v41;
  static Alignment.center.getter();
  v27 = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityNodesKey> and conformance _PreferenceTransformModifier<A>();
  v48[0] = v26;
  v48[1] = v27;
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v48);
  View.background<A>(alignment:content:)();
  swift_release();
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v36);
  v47[0] = v28;
  v47[1] = v29;
  v30 = MEMORY[0x1E0CE2E70];
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v47);
  MEMORY[0x18D75B4AC](v31, v12, v35, v31);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v12);
  v46[0] = v31;
  v46[1] = &protocol witness table for AccessibilityProxyModifier<A>.GeometryTransformModifier;
  v32 = MEMORY[0x18D75FFDC](v30, v17, v46);
  static ViewBuilder.buildExpression<A>(_:)(v20, v17, v32);
  v33 = *(void (**)(char *, uint64_t))(v39 + 8);
  v33(v20, v17);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v25, v17, v42);
  return ((uint64_t (*)(char *, uint64_t))v33)(v25, v17);
}

uint64_t UIViewRepresentableContext.environment.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v3 + 32) == 1)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    return outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
  }
  else
  {
    *a3 = v4;
    a3[1] = v5;
    swift_retain();
    return swift_retain();
  }
}

void View.onReceive<A>(_:perform:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];

  v24[0] = a6;
  v24[1] = a2;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v21, v23, v22, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a7, v21, a3);
  v24[2] = a4;
  v24[3] = a3;
  v24[4] = v24[0];
  v24[5] = a5;
  type metadata accessor for SubscriptionView();
}

uint64_t sub_186E71BF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4 + *(int *)(a1 + 52), v5, v3);
  v8 = (_QWORD *)(v4 + *(int *)(a1 + 56));
  *v8 = *(_QWORD *)(v6 - 120);
  v8[1] = v1;
  return swift_retain();
}

void SubscriptionView.init(content:publisher:action:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for SubscriptionView();
}

uint64_t sub_186E71CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v8;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 52), v4, v1);
  v8 = (_QWORD *)(v5 + *(int *)(a1 + 56));
  *v8 = v3;
  v8[1] = v2;
  return result;
}

unint64_t outlined consume of Material?(unint64_t result)
{
  if (result != 8)
    return outlined consume of Material.ID(result);
  return result;
}

void @objc PlatformViewHost.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  PlatformViewHost.layoutSubviews()();

}

Swift::Void __swiftcall PlatformViewHost.layoutSubviews()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  PlatformViewHost.layoutHostedView()();
}

void PlatformViewHost.layoutHostedView()()
{
  void *v0;
  void *v1;
  int v2;
  id v3;
  void *v4;
  objc_super v5;
  CGRect v6;
  CGRect v7;

  v1 = v0;
  LODWORD(v5.receiver) = -1;
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
    v2 = static UserDefaultKeyedFeature.isEnabled.getter() ^ 1;
  }
  v5.receiver = v0;
  v5.super_class = (Class)swift_getObjectType();
  v3 = objc_msgSendSuper2(&v5, sel_hostedView);
  if (v3)
  {
    v4 = v3;
    if (v2 & 1 | ((objc_msgSend(v3, sel__wantsConstraintBasedLayout) & 1) == 0))
    {
      objc_msgSend(v1, sel_bounds);
      if (CGRectGetWidth(v6) != 0.0)
      {
        objc_msgSend(v1, sel_bounds);
        if (CGRectGetHeight(v7) != 0.0)
        {
          objc_msgSend(v1, sel_bounds);
          objc_msgSend(v4, sel_frameForAlignmentRect_);
          objc_msgSend(v4, sel_setFrame_);
        }
      }
    }

  }
}

id PlatformViewHost.hostedView.getter()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_hostedView);
}

void @objc PlatformViewHost._setHostsLayoutEngine(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4;

  v4 = a1;
  PlatformViewHost._setHostsLayoutEngine(_:)(a3);

}

Swift::Void __swiftcall PlatformViewHost._setHostsLayoutEngine(_:)(Swift::Bool a1)
{
  void *v1;
  objc_class *ObjectType;
  objc_super v4;
  int v5;

  ObjectType = (objc_class *)swift_getObjectType();
  v5 = -1;
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    || (lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature(),
        (static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0))
  {
    v4.receiver = v1;
    v4.super_class = ObjectType;
    objc_msgSendSuper2(&v4, sel__setHostsLayoutEngine_, a1);
  }
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyVGridLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static IncrementalLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static IncrementalLayout._makeView(root:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v27;
  unsigned int v28;
  int v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  int v34;
  _QWORD v35[9];
  __int128 v36;
  _BYTE v37[32];
  _BYTE v38[32];
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  _BYTE v45[32];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  v40 = *(_OWORD *)a2;
  v41 = v8;
  v42 = v6;
  *(_OWORD *)&v37[16] = v6;
  *(_OWORD *)v38 = v7;
  *(_OWORD *)&v38[16] = *(_OWORD *)(a2 + 64);
  v39 = *(_DWORD *)(a2 + 80);
  v36 = v40;
  *(_OWORD *)v37 = v8;
  v9 = WORD2(v6);
  *(_DWORD *)&v37[20] = DWORD1(v6) & 0xFFFFFFF3 | 4;
  LOBYTE(v43) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    PreferenceKeys.remove<A>(_:)();
  *(_QWORD *)&v43 = v36;
  DWORD2(v43) = DWORD2(v36);
  *(_OWORD *)&v44[8] = *(_OWORD *)&v37[8];
  *(_QWORD *)v44 = *(_QWORD *)v37;
  *(_QWORD *)&v44[24] = *(_QWORD *)&v37[24];
  *(_QWORD *)v45 = *(_QWORD *)v38;
  *(_OWORD *)&v45[8] = *(_OWORD *)&v38[8];
  *(_QWORD *)&v45[24] = *(_QWORD *)&v38[24];
  v46 = v39;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a3(v35, v10, &v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v30) = HIDWORD(v40);
  outlined retain of _GraphInputs((uint64_t)&v40);
  _ViewListInputs.init(_:)();
  *(_QWORD *)((char *)&v30 + 4) = *(_QWORD *)((char *)&v43 + 4);
  *(_QWORD *)v31 = *(_QWORD *)v44;
  *(_OWORD *)&v31[8] = *(_OWORD *)&v44[8];
  *(_QWORD *)&v31[24] = *(_QWORD *)&v44[24];
  v32 = *(_OWORD *)v45;
  LODWORD(v33) = *(_DWORD *)&v45[16];
  *((_QWORD *)&v33 + 1) = *(_QWORD *)&v45[24];
  LOBYTE(v34) = v46;
  v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v30) = a1;
  v43 = v40;
  *(_OWORD *)v44 = v41;
  *(_OWORD *)&v44[16] = v42;
  lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  v12 = static Animatable.makeAnimatable(value:inputs:)();
  v13 = v9;
  if ((v9 & 0x1000) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollablePreferenceKey> and conformance _AnyPreferenceKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>, MEMORY[0x1E0CE4078]);
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v44[16] = *(_OWORD *)&v37[16];
  *(_OWORD *)v45 = *(_OWORD *)v38;
  *(_OWORD *)&v45[16] = *(_OWORD *)&v38[16];
  v46 = v39;
  v43 = v36;
  *(_OWORD *)v44 = *(_OWORD *)v37;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalLayoutViewCache<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v43);
  v14 = specialized _IncrementalLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized IncrementalLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 120);
  v16 = *(_DWORD *)(v14 + 128);
  v17 = *(unsigned int *)(v14 + 132);
  v28 = *(_DWORD *)(v14 + 132);
  if ((v13 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    goto LABEL_14;
  }
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v31[16] = *(_OWORD *)(a2 + 32);
  v32 = v18;
  v33 = *(_OWORD *)(a2 + 64);
  v34 = *(_DWORD *)(a2 + 80);
  v19 = *(_OWORD *)(a2 + 16);
  v30 = *(_OWORD *)a2;
  *(_OWORD *)v31 = v19;
  swift_bridgeObjectRetain();
  if ((makeAccessibilityLayoutScrollableTransform(isIncremental:role:placedChildren:inputs:outputs:)() & 0x100000000) == 0)
  {
    LOBYTE(v30) = 0;
    _ViewOutputs.subscript.setter();
    v17 = v28;
  }
  *(_QWORD *)&v30 = v15;
  *((_QWORD *)&v30 + 1) = __PAIR64__(v17, v16);
  v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0)
    goto LABEL_12;
  v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v27 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  *(_QWORD *)&v31[8] = v22;
  *(_QWORD *)&v31[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v30) = v29;
  DWORD1(v30) = v29;
  specialized Dictionary.subscript.setter((uint64_t)&v30, MEMORY[0x1E0CE5728]);
  LOBYTE(v30) = 1;
  DWORD1(v30) = v21;
  *((_QWORD *)&v30 + 1) = v27;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(_QWORD *)&v30 = *(_QWORD *)(a2 + 48);
  DWORD2(v30) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  v23 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v23 & 1) != 0)
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v27, (__int128 *)a2, v15, v16 | (unint64_t)(v17 << 32), 0);
  swift_bridgeObjectRelease();
  LOBYTE(v30) = (v23 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  LODWORD(v17) = v28;
LABEL_14:
  *(_QWORD *)a4 = v15;
  *(_DWORD *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 12) = v17;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v27;
  unsigned int v28;
  int v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  int v34;
  _QWORD v35[9];
  __int128 v36;
  _BYTE v37[32];
  _BYTE v38[32];
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  _BYTE v45[32];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  v40 = *(_OWORD *)a2;
  v41 = v8;
  v42 = v6;
  *(_OWORD *)&v37[16] = v6;
  *(_OWORD *)v38 = v7;
  *(_OWORD *)&v38[16] = *(_OWORD *)(a2 + 64);
  v39 = *(_DWORD *)(a2 + 80);
  v36 = v40;
  *(_OWORD *)v37 = v8;
  v9 = WORD2(v6);
  *(_DWORD *)&v37[20] = DWORD1(v6) & 0xFFFFFFF3 | 4;
  LOBYTE(v43) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    PreferenceKeys.remove<A>(_:)();
  *(_QWORD *)&v43 = v36;
  DWORD2(v43) = DWORD2(v36);
  *(_OWORD *)&v44[8] = *(_OWORD *)&v37[8];
  *(_QWORD *)v44 = *(_QWORD *)v37;
  *(_QWORD *)&v44[24] = *(_QWORD *)&v37[24];
  *(_QWORD *)v45 = *(_QWORD *)v38;
  *(_OWORD *)&v45[8] = *(_OWORD *)&v38[8];
  *(_QWORD *)&v45[24] = *(_QWORD *)&v38[24];
  v46 = v39;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a3(v35, v10, &v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v30) = HIDWORD(v40);
  outlined retain of _GraphInputs((uint64_t)&v40);
  _ViewListInputs.init(_:)();
  *(_QWORD *)((char *)&v30 + 4) = *(_QWORD *)((char *)&v43 + 4);
  *(_QWORD *)v31 = *(_QWORD *)v44;
  *(_OWORD *)&v31[8] = *(_OWORD *)&v44[8];
  *(_QWORD *)&v31[24] = *(_QWORD *)&v44[24];
  v32 = *(_OWORD *)v45;
  LODWORD(v33) = *(_DWORD *)&v45[16];
  *((_QWORD *)&v33 + 1) = *(_QWORD *)&v45[24];
  LOBYTE(v34) = v46;
  v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v30) = a1;
  v43 = v40;
  *(_OWORD *)v44 = v41;
  *(_OWORD *)&v44[16] = v42;
  lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  v12 = static Animatable.makeAnimatable(value:inputs:)();
  v13 = v9;
  if ((v9 & 0x1000) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollablePreferenceKey> and conformance _AnyPreferenceKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>, MEMORY[0x1E0CE4078]);
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v44[16] = *(_OWORD *)&v37[16];
  *(_OWORD *)v45 = *(_OWORD *)v38;
  *(_OWORD *)&v45[16] = *(_OWORD *)&v38[16];
  v46 = v39;
  v43 = v36;
  *(_OWORD *)v44 = *(_OWORD *)v37;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalLayoutViewCache<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v43);
  v14 = specialized _IncrementalLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized IncrementalLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 120);
  v16 = *(_DWORD *)(v14 + 128);
  v17 = *(unsigned int *)(v14 + 132);
  v28 = *(_DWORD *)(v14 + 132);
  if ((v13 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    goto LABEL_14;
  }
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v31[16] = *(_OWORD *)(a2 + 32);
  v32 = v18;
  v33 = *(_OWORD *)(a2 + 64);
  v34 = *(_DWORD *)(a2 + 80);
  v19 = *(_OWORD *)(a2 + 16);
  v30 = *(_OWORD *)a2;
  *(_OWORD *)v31 = v19;
  swift_bridgeObjectRetain();
  if ((makeAccessibilityLayoutScrollableTransform(isIncremental:role:placedChildren:inputs:outputs:)() & 0x100000000) == 0)
  {
    LOBYTE(v30) = 0;
    _ViewOutputs.subscript.setter();
    v17 = v28;
  }
  *(_QWORD *)&v30 = v15;
  *((_QWORD *)&v30 + 1) = __PAIR64__(v17, v16);
  v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0)
    goto LABEL_12;
  v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v27 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  *(_QWORD *)&v31[8] = v22;
  *(_QWORD *)&v31[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v30) = v29;
  DWORD1(v30) = v29;
  specialized Dictionary.subscript.setter((uint64_t)&v30, MEMORY[0x1E0CE5728]);
  LOBYTE(v30) = 1;
  DWORD1(v30) = v21;
  *((_QWORD *)&v30 + 1) = v27;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(_QWORD *)&v30 = *(_QWORD *)(a2 + 48);
  DWORD2(v30) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  v23 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v23 & 1) != 0)
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v27, (__int128 *)a2, v15, v16 | (unint64_t)(v17 << 32), 0);
  swift_bridgeObjectRelease();
  LOBYTE(v30) = (v23 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  LODWORD(v17) = v28;
LABEL_14:
  *(_QWORD *)a4 = v15;
  *(_DWORD *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 12) = v17;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v27;
  unsigned int v28;
  int v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  int v34;
  _QWORD v35[9];
  __int128 v36;
  _BYTE v37[32];
  _BYTE v38[32];
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  _BYTE v45[32];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  v40 = *(_OWORD *)a2;
  v41 = v8;
  v42 = v6;
  *(_OWORD *)&v37[16] = v6;
  *(_OWORD *)v38 = v7;
  *(_OWORD *)&v38[16] = *(_OWORD *)(a2 + 64);
  v39 = *(_DWORD *)(a2 + 80);
  v36 = v40;
  *(_OWORD *)v37 = v8;
  v9 = WORD2(v6);
  *(_DWORD *)&v37[20] = DWORD1(v6) | 0xC;
  LOBYTE(v43) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    PreferenceKeys.remove<A>(_:)();
  *(_QWORD *)&v43 = v36;
  DWORD2(v43) = DWORD2(v36);
  *(_OWORD *)&v44[8] = *(_OWORD *)&v37[8];
  *(_QWORD *)v44 = *(_QWORD *)v37;
  *(_QWORD *)&v44[24] = *(_QWORD *)&v37[24];
  *(_QWORD *)v45 = *(_QWORD *)v38;
  *(_OWORD *)&v45[8] = *(_OWORD *)&v38[8];
  *(_QWORD *)&v45[24] = *(_QWORD *)&v38[24];
  v46 = v39;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a3(v35, v10, &v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v30) = HIDWORD(v40);
  outlined retain of _GraphInputs((uint64_t)&v40);
  _ViewListInputs.init(_:)();
  *(_QWORD *)((char *)&v30 + 4) = *(_QWORD *)((char *)&v43 + 4);
  *(_QWORD *)v31 = *(_QWORD *)v44;
  *(_OWORD *)&v31[8] = *(_OWORD *)&v44[8];
  *(_QWORD *)&v31[24] = *(_QWORD *)&v44[24];
  v32 = *(_OWORD *)v45;
  LODWORD(v33) = *(_DWORD *)&v45[16];
  *((_QWORD *)&v33 + 1) = *(_QWORD *)&v45[24];
  LOBYTE(v34) = v46;
  v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v30) = a1;
  v43 = v40;
  *(_OWORD *)v44 = v41;
  *(_OWORD *)&v44[16] = v42;
  lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  v12 = static Animatable.makeAnimatable(value:inputs:)();
  v13 = v9;
  if ((v9 & 0x1000) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollablePreferenceKey> and conformance _AnyPreferenceKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>, MEMORY[0x1E0CE4078]);
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v44[16] = *(_OWORD *)&v37[16];
  *(_OWORD *)v45 = *(_OWORD *)v38;
  *(_OWORD *)&v45[16] = *(_OWORD *)&v38[16];
  v46 = v39;
  v43 = v36;
  *(_OWORD *)v44 = *(_OWORD *)v37;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalLayoutViewCache<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v43);
  v14 = specialized _IncrementalLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized IncrementalLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 120);
  v16 = *(_DWORD *)(v14 + 128);
  v17 = *(unsigned int *)(v14 + 132);
  v28 = *(_DWORD *)(v14 + 132);
  if ((v13 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    goto LABEL_14;
  }
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v31[16] = *(_OWORD *)(a2 + 32);
  v32 = v18;
  v33 = *(_OWORD *)(a2 + 64);
  v34 = *(_DWORD *)(a2 + 80);
  v19 = *(_OWORD *)(a2 + 16);
  v30 = *(_OWORD *)a2;
  *(_OWORD *)v31 = v19;
  swift_bridgeObjectRetain();
  if ((makeAccessibilityLayoutScrollableTransform(isIncremental:role:placedChildren:inputs:outputs:)() & 0x100000000) == 0)
  {
    LOBYTE(v30) = 0;
    _ViewOutputs.subscript.setter();
    v17 = v28;
  }
  *(_QWORD *)&v30 = v15;
  *((_QWORD *)&v30 + 1) = __PAIR64__(v17, v16);
  v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0)
    goto LABEL_12;
  v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v27 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  *(_QWORD *)&v31[8] = v22;
  *(_QWORD *)&v31[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v30) = v29;
  DWORD1(v30) = v29;
  specialized Dictionary.subscript.setter((uint64_t)&v30, MEMORY[0x1E0CE5728]);
  LOBYTE(v30) = 1;
  DWORD1(v30) = v21;
  *((_QWORD *)&v30 + 1) = v27;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(_QWORD *)&v30 = *(_QWORD *)(a2 + 48);
  DWORD2(v30) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  v23 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v23 & 1) != 0)
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v27, (__int128 *)a2, v15, v16 | (unint64_t)(v17 << 32), 0);
  swift_bridgeObjectRelease();
  LOBYTE(v30) = (v23 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  LODWORD(v17) = v28;
LABEL_14:
  *(_QWORD *)a4 = v15;
  *(_DWORD *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 12) = v17;
  return result;
}

{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v27;
  unsigned int v28;
  int v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  int v34;
  _QWORD v35[9];
  __int128 v36;
  _BYTE v37[32];
  _BYTE v38[32];
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  _BYTE v45[32];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  v40 = *(_OWORD *)a2;
  v41 = v8;
  v42 = v6;
  *(_OWORD *)&v37[16] = v6;
  *(_OWORD *)v38 = v7;
  *(_OWORD *)&v38[16] = *(_OWORD *)(a2 + 64);
  v39 = *(_DWORD *)(a2 + 80);
  v36 = v40;
  *(_OWORD *)v37 = v8;
  v9 = WORD2(v6);
  *(_DWORD *)&v37[20] = DWORD1(v6) | 0xC;
  LOBYTE(v43) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    PreferenceKeys.remove<A>(_:)();
  *(_QWORD *)&v43 = v36;
  DWORD2(v43) = DWORD2(v36);
  *(_OWORD *)&v44[8] = *(_OWORD *)&v37[8];
  *(_QWORD *)v44 = *(_QWORD *)v37;
  *(_QWORD *)&v44[24] = *(_QWORD *)&v37[24];
  *(_QWORD *)v45 = *(_QWORD *)v38;
  *(_OWORD *)&v45[8] = *(_OWORD *)&v38[8];
  *(_QWORD *)&v45[24] = *(_QWORD *)&v38[24];
  v46 = v39;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  a3(v35, v10, &v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v30) = HIDWORD(v40);
  outlined retain of _GraphInputs((uint64_t)&v40);
  _ViewListInputs.init(_:)();
  *(_QWORD *)((char *)&v30 + 4) = *(_QWORD *)((char *)&v43 + 4);
  *(_QWORD *)v31 = *(_QWORD *)v44;
  *(_OWORD *)&v31[8] = *(_OWORD *)&v44[8];
  *(_QWORD *)&v31[24] = *(_QWORD *)&v44[24];
  v32 = *(_OWORD *)v45;
  LODWORD(v33) = *(_DWORD *)&v45[16];
  *((_QWORD *)&v33 + 1) = *(_QWORD *)&v45[24];
  LOBYTE(v34) = v46;
  v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v30) = a1;
  v43 = v40;
  *(_OWORD *)v44 = v41;
  *(_OWORD *)&v44[16] = v42;
  lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout();
  v12 = static Animatable.makeAnimatable(value:inputs:)();
  v13 = v9;
  if ((v9 & 0x1000) != 0)
  {
    type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollablePreferenceKey> and conformance _AnyPreferenceKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnyPreferenceKey<ScrollablePreferenceKey>, MEMORY[0x1E0CE4078]);
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v44[16] = *(_OWORD *)&v37[16];
  *(_OWORD *)v45 = *(_OWORD *)v38;
  *(_OWORD *)&v45[16] = *(_OWORD *)&v38[16];
  v46 = v39;
  v43 = v36;
  *(_OWORD *)v44 = *(_OWORD *)v37;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalLayoutViewCache<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v43);
  v14 = specialized _IncrementalLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v43, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized IncrementalLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  v15 = *(_QWORD *)(v14 + 120);
  v16 = *(_DWORD *)(v14 + 128);
  v17 = *(unsigned int *)(v14 + 132);
  v28 = *(_DWORD *)(v14 + 132);
  if ((v13 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    goto LABEL_14;
  }
  v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v31[16] = *(_OWORD *)(a2 + 32);
  v32 = v18;
  v33 = *(_OWORD *)(a2 + 64);
  v34 = *(_DWORD *)(a2 + 80);
  v19 = *(_OWORD *)(a2 + 16);
  v30 = *(_OWORD *)a2;
  *(_OWORD *)v31 = v19;
  swift_bridgeObjectRetain();
  if ((makeAccessibilityLayoutScrollableTransform(isIncremental:role:placedChildren:inputs:outputs:)() & 0x100000000) == 0)
  {
    LOBYTE(v30) = 0;
    _ViewOutputs.subscript.setter();
    v17 = v28;
  }
  *(_QWORD *)&v30 = v15;
  *((_QWORD *)&v30 + 1) = __PAIR64__(v17, v16);
  v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0)
    goto LABEL_12;
  v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v27 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  *(_QWORD *)&v31[8] = v22;
  *(_QWORD *)&v31[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v30) = v29;
  DWORD1(v30) = v29;
  specialized Dictionary.subscript.setter((uint64_t)&v30, MEMORY[0x1E0CE5728]);
  LOBYTE(v30) = 1;
  DWORD1(v30) = v21;
  *((_QWORD *)&v30 + 1) = v27;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(_QWORD *)&v30 = *(_QWORD *)(a2 + 48);
  DWORD2(v30) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  v23 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v23 & 1) != 0)
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v27, (__int128 *)a2, v15, v16 | (unint64_t)(v17 << 32), 0);
  swift_bridgeObjectRelease();
  LOBYTE(v30) = (v23 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  LODWORD(v17) = v28;
LABEL_14:
  *(_QWORD *)a4 = v15;
  *(_DWORD *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 12) = v17;
  return result;
}

uint64_t specialized IncrementalLayoutViewCache.init<A>(layout:list:inputs:)(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  int v30;
  void (*v31)(_OWORD *, _QWORD);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t ChildOutputs;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_OWORD *, _QWORD);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t updated;
  char v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  char v116;
  int v118;
  int v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _DWORD v124[6];
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[21];
  _OWORD v138[21];
  __int128 v139;
  _BYTE v140[32];
  _BYTE v141[32];
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v4 = v3;
  v146 = *MEMORY[0x1E0C80C00];
  swift_weakInit();
  v7 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(v3 + 168) = 0;
  v122 = v7;
  *(_DWORD *)(v3 + 148) = v7;
  *(_QWORD *)(v3 + 160) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v3 + 176) = xmmword_187C955C0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 16777471;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  swift_weakAssign();
  swift_release();
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v141 = v9;
  *(_OWORD *)&v141[16] = *(_OWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 16);
  v139 = *(_OWORD *)a3;
  *(_OWORD *)v140 = v10;
  v143 = v139;
  v144 = v10;
  v145 = *(_OWORD *)&v140[16];
  v142 = *(_DWORD *)(a3 + 80);
  v138[0] = v139;
  v138[1] = v8;
  v138[2] = *(_OWORD *)&v140[16];
  outlined retain of _ViewInputs(a3);
  v11 = _GraphInputs.scrollTargetRole.getter();
  v127 = *(_QWORD *)(a3 + 48);
  v128 = *(_DWORD *)(a3 + 56);
  v123 = a3;
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v138[0] = v139;
  v138[1] = v144;
  v138[2] = *(_OWORD *)&v140[16];
  v13 = _GraphInputs.scrollTargetRemovePreference.getter();
  if ((v12 & 1) != 0 && (v13 & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
  }
  v118 = v11;
  if (v11 != v122)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v138[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  v14 = DWORD2(v139);
  v15 = *(_QWORD *)v140;
  v17 = *(_QWORD *)&v140[24];
  v16 = *(_QWORD *)v141;
  v18 = v142;
  *(_QWORD *)(v4 + 32) = v139;
  *(_DWORD *)(v4 + 40) = v14;
  *(_QWORD *)(v4 + 48) = v15;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v140[8];
  *(_QWORD *)(v4 + 72) = v17;
  *(_QWORD *)(v4 + 80) = v16;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v141[8];
  *(_QWORD *)(v4 + 104) = *(_QWORD *)&v141[24];
  *(_DWORD *)(v4 + 112) = v18;
  v19 = (id)AGSubgraphGetCurrent();
  if (!v19)
LABEL_39:
    __break(1u);
  *(_QWORD *)(v4 + 24) = v19;
  *(_DWORD *)(v4 + 136) = a2;
  v20 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v20;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v21 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v22;
  v138[0] = v143;
  v138[1] = v144;
  v138[2] = v145;
  LOBYTE(v137[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  v23 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v23;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v24 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v24;
  swift_getKeyPath();
  v25 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v25;
  v26 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v26;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v27 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v27;
  LODWORD(v138[0]) = _ViewInputs.viewPhase.getter();
  *((_QWORD *)&v138[0] + 1) = 0;
  LODWORD(v138[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for IncrementalLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  v28 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v123);
  specialized IncrementalChildPlacements.init(layout:cache:inputs:)(a1, v28, v123, (uint64_t)v138);
  memcpy(v137, v138, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
  lazy protocol witness table accessor for type IncrementalChildPlacements<LazyVGridLayout> and conformance IncrementalChildPlacements<A>();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v138);
  *(_DWORD *)(v4 + 144) = v29;
  *(_QWORD *)&v137[0] = __PAIR64__(v28, v29);
  v119 = v28;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v121 = v4;
  v30 = *(_DWORD *)(v4 + 144);
  _ViewOutputs.init()();
  v129 = v30;
  v130 = v137[0];
  v131 = *(unint64_t *)v141;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v31 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v33 = *v32;
      v34 = v32[1];
      v31(v137, 0);
      v35 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v36 = PreferenceKeys.endIndex.getter();
      if (v35 < 0 || v35 >= v36)
        break;
      v37 = v35 + 1;
      *((_QWORD *)&v131 + 1) = v37;
      swift_bridgeObjectRelease();
      v38 = *(void (**)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v34 + 16);
      ChildOutputs = lazy protocol witness table accessor for type MakeChildOutputs and conformance MakeChildOutputs();
      v38(&v129, &type metadata for MakeChildOutputs, ChildOutputs, v33, v34);
      if (v37 == PreferenceKeys.endIndex.getter())
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((BYTE4(v145) & 2) != 0)
  {
    v40 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v40;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v41 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v41;
    v42 = _ViewInputs.environment.getter();
    v43 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v43;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v44 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v44;
    v45 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v42, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v45, v119);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v137[0]) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(_OWORD *)(v121 + 120) = v130;
  outlined retain of _ViewInputs(v123);
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v46 = outlined release of _ViewInputs(v123);
  v48 = v137[0];
  if (LODWORD(v137[0]) != v122)
  {
    v49 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v49;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v50 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v50;
    v51 = _ViewInputs.size.getter();
    v52 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v52;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v53 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v53;
    v54 = _ViewInputs.position.getter();
    v55 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v55;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v56 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v56;
    v57 = _ViewInputs.transform.getter();
    v58 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v58;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v59 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v59;
    v60 = _ViewInputs.environment.getter();
    v61 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v61;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v62 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v62;
    v63 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v51, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v57, v54);
    *(_QWORD *)&v137[1] = __PAIR64__(v48, v60);
    *((_QWORD *)&v137[1] + 1) = __PAIR64__(v63, v119);
    *(_QWORD *)&v137[2] = 0;
    DWORD2(v137[2]) = 0;
    *(_QWORD *)&v137[3] = 0;
    BYTE8(v137[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPrefetcher<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPrefetcher);
    lazy protocol witness table accessor for type IncrementalChildPrefetcher<LazyVGridLayout> and conformance IncrementalChildPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    v46 = AGGraphSetFlags();
  }
  MEMORY[0x1E0C80A78](v46, v47);
  AGGraphMutateAttribute();
  MEMORY[0x1E0C80A78](*(unsigned int *)(v121 + 144), v64);
  MEMORY[0x1E0C80A78](v65, v66);
  AGGraphMutateAttribute();
  swift_beginAccess();
  v67 = *(_QWORD *)(v121 + 120);
  v126[0] = v121;
  v126[1] = v67;
  v126[2] = *(_QWORD *)(v121 + 128);
  v131 = *(unint64_t *)v141;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v68 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v70 = *v69;
      v71 = v69[1];
      v68(v137, 0);
      v72 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v73 = PreferenceKeys.endIndex.getter();
      if (v72 < 0 || v72 >= v73)
        break;
      v74 = v72 + 1;
      *((_QWORD *)&v131 + 1) = v74;
      swift_bridgeObjectRelease();
      v75 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v71 + 16);
      updated = lazy protocol witness table accessor for type UpdateChildOutputs and conformance UpdateChildOutputs();
      v75(v126, &type metadata for UpdateChildOutputs, updated, v70, v71);
      if (v74 == PreferenceKeys.endIndex.getter())
        goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  v77 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v78 = v121;
  if ((v77 & 1) != 0 || v118 != v122)
  {
    v79 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v79;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v80 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v80;
    swift_retain();
    _ViewInputs.position.getter();
    v81 = AGCreateWeakAttribute();
    v82 = v81;
    v83 = HIDWORD(v81);
    v84 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v84;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v85 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v85;
    _ViewInputs.transform.getter();
    v86 = AGCreateWeakAttribute();
    v87 = v86;
    v88 = HIDWORD(v86);
    v89 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v89;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v90 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v90;
    v91 = _ViewInputs.weakScrollable.getter();
    v92 = v91;
    v93 = HIDWORD(v91);
    swift_beginAccess();
    v131 = *(_OWORD *)(v121 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    v124[0] = v82;
    v124[1] = v83;
    v124[2] = v87;
    v124[3] = v88;
    v124[4] = v92;
    v124[5] = v93;
    v125 = AGCreateWeakAttribute();
    swift_weakInit();
    if ((v77 & 1) != 0)
    {
      v94 = MEMORY[0x1E0CE0CA8];
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_187BF9830;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *(_QWORD *)(v95 + 56) = v96;
      *(_QWORD *)(v95 + 64) = lazy protocol witness table accessor for type IncrementalScrollable<LazyVGridLayout> and conformance IncrementalScrollable<A>();
      v97 = swift_allocObject();
      *(_QWORD *)(v95 + 32) = v97;
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, v97 + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
      *(_QWORD *)&v137[0] = v95;
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v94, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<[Scrollable]>, MEMORY[0x1E0CFED00]);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v131) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v118 == v122)
    {
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
      swift_release();
    }
    else
    {
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *((_QWORD *)&v137[1] + 1) = v98;
      *(_QWORD *)&v137[2] = lazy protocol witness table accessor for type IncrementalScrollable<LazyVGridLayout> and conformance IncrementalScrollable<A>();
      *(_QWORD *)&v137[0] = swift_allocObject();
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, *(_QWORD *)&v137[0] + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
      v99 = MEMORY[0x1E0CE4E20];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v99, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      v100 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(_QWORD *)&v131 = v127;
      DWORD2(v131) = v128;
      MEMORY[0x1E0C80A78](v100, v101);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v102 = *(_OWORD *)(v123 + 32);
      v103 = *(_OWORD *)(v123 + 64);
      v134 = *(_OWORD *)(v123 + 48);
      v135 = v103;
      v136 = *(_DWORD *)(v123 + 80);
      v104 = *(_OWORD *)(v123 + 16);
      v131 = *(_OWORD *)v123;
      v132 = v104;
      v133 = v102;
      outlined retain of _ViewInputs(v123);
      v105 = ScrollStateRequestTransform.init(collection:inputs:)();
      MEMORY[0x1E0C80A78](v105, v106);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      v78 = v121;
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v137);
    }
  }
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    swift_beginAccess();
    v108 = *(_DWORD *)(v78 + 128);
    v109 = *(_DWORD *)(v78 + 132);
    *(_QWORD *)&v131 = *(_QWORD *)(v78 + 120);
    v107 = v131;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v110 = _ViewOutputs.subscript.getter();
    *(_QWORD *)&v131 = v107;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v111 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    v112 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v112;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v113 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v113;
    if ((v110 & 0x100000000) != 0)
      LODWORD(v110) = v122;
    if ((v111 & 0x100000000) != 0)
      LODWORD(v111) = v122;
    v114 = *(_DWORD *)(v78 + 144);
    outlined retain of _ViewInputs(v123);
    specialized IncrementalFocusableFillerBoundsProvider.init(inputs:placedChildren:focusableBounds:nestedFillerBounds:)(v114, v110, v111, (uint64_t)&v131);
    v137[2] = v133;
    v137[3] = v134;
    *(_QWORD *)&v137[4] = v135;
    v137[0] = v131;
    v137[1] = v132;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of IncrementalFocusableFillerBoundsProvider((uint64_t)&v131);
    swift_beginAccess();
    LOBYTE(v124[0]) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v143);
  outlined release of _ViewInputs(v123);
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v143);
  v115 = *(_QWORD *)&v137[0];
  v116 = BYTE8(v137[0]);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v116 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v78 + 176) = v115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v78;
}

{
  uint64_t v3;
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  int v30;
  void (*v31)(_OWORD *, _QWORD);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t ChildOutputs;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_OWORD *, _QWORD);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t updated;
  char v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  char v116;
  int v118;
  int v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _DWORD v124[6];
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[21];
  _OWORD v138[21];
  __int128 v139;
  _BYTE v140[32];
  _BYTE v141[32];
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v4 = v3;
  v146 = *MEMORY[0x1E0C80C00];
  swift_weakInit();
  v7 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(v3 + 168) = 0;
  v122 = v7;
  *(_DWORD *)(v3 + 148) = v7;
  *(_QWORD *)(v3 + 160) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v3 + 176) = xmmword_187C955C0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 16777471;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  swift_weakAssign();
  swift_release();
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v141 = v9;
  *(_OWORD *)&v141[16] = *(_OWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 16);
  v139 = *(_OWORD *)a3;
  *(_OWORD *)v140 = v10;
  v143 = v139;
  v144 = v10;
  v145 = *(_OWORD *)&v140[16];
  v142 = *(_DWORD *)(a3 + 80);
  v138[0] = v139;
  v138[1] = v8;
  v138[2] = *(_OWORD *)&v140[16];
  outlined retain of _ViewInputs(a3);
  v11 = _GraphInputs.scrollTargetRole.getter();
  v127 = *(_QWORD *)(a3 + 48);
  v128 = *(_DWORD *)(a3 + 56);
  v123 = a3;
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v138[0] = v139;
  v138[1] = v144;
  v138[2] = *(_OWORD *)&v140[16];
  v13 = _GraphInputs.scrollTargetRemovePreference.getter();
  if ((v12 & 1) != 0 && (v13 & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
  }
  v118 = v11;
  if (v11 != v122)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v138[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  v14 = DWORD2(v139);
  v15 = *(_QWORD *)v140;
  v17 = *(_QWORD *)&v140[24];
  v16 = *(_QWORD *)v141;
  v18 = v142;
  *(_QWORD *)(v4 + 32) = v139;
  *(_DWORD *)(v4 + 40) = v14;
  *(_QWORD *)(v4 + 48) = v15;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v140[8];
  *(_QWORD *)(v4 + 72) = v17;
  *(_QWORD *)(v4 + 80) = v16;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v141[8];
  *(_QWORD *)(v4 + 104) = *(_QWORD *)&v141[24];
  *(_DWORD *)(v4 + 112) = v18;
  v19 = (id)AGSubgraphGetCurrent();
  if (!v19)
LABEL_39:
    __break(1u);
  *(_QWORD *)(v4 + 24) = v19;
  *(_DWORD *)(v4 + 136) = a2;
  v20 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v20;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v21 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v22;
  v138[0] = v143;
  v138[1] = v144;
  v138[2] = v145;
  LOBYTE(v137[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  v23 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v23;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v24 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v24;
  swift_getKeyPath();
  v25 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v25;
  v26 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v26;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v27 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v27;
  LODWORD(v138[0]) = _ViewInputs.viewPhase.getter();
  *((_QWORD *)&v138[0] + 1) = 0;
  LODWORD(v138[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for IncrementalLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  v28 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v123);
  specialized IncrementalChildPlacements.init(layout:cache:inputs:)(a1, v28, v123, (uint64_t)v138);
  memcpy(v137, v138, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
  lazy protocol witness table accessor for type IncrementalChildPlacements<LazyVStackLayout> and conformance IncrementalChildPlacements<A>();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v138);
  *(_DWORD *)(v4 + 144) = v29;
  *(_QWORD *)&v137[0] = __PAIR64__(v28, v29);
  v119 = v28;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v121 = v4;
  v30 = *(_DWORD *)(v4 + 144);
  _ViewOutputs.init()();
  v129 = v30;
  v130 = v137[0];
  v131 = *(unint64_t *)v141;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v31 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v33 = *v32;
      v34 = v32[1];
      v31(v137, 0);
      v35 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v36 = PreferenceKeys.endIndex.getter();
      if (v35 < 0 || v35 >= v36)
        break;
      v37 = v35 + 1;
      *((_QWORD *)&v131 + 1) = v37;
      swift_bridgeObjectRelease();
      v38 = *(void (**)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v34 + 16);
      ChildOutputs = lazy protocol witness table accessor for type MakeChildOutputs and conformance MakeChildOutputs();
      v38(&v129, &type metadata for MakeChildOutputs, ChildOutputs, v33, v34);
      if (v37 == PreferenceKeys.endIndex.getter())
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((BYTE4(v145) & 2) != 0)
  {
    v40 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v40;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v41 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v41;
    v42 = _ViewInputs.environment.getter();
    v43 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v43;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v44 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v44;
    v45 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v42, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v45, v119);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVStackLayout> and conformance IncrementalLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v137[0]) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(_OWORD *)(v121 + 120) = v130;
  outlined retain of _ViewInputs(v123);
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v46 = outlined release of _ViewInputs(v123);
  v48 = v137[0];
  if (LODWORD(v137[0]) != v122)
  {
    v49 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v49;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v50 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v50;
    v51 = _ViewInputs.size.getter();
    v52 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v52;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v53 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v53;
    v54 = _ViewInputs.position.getter();
    v55 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v55;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v56 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v56;
    v57 = _ViewInputs.transform.getter();
    v58 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v58;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v59 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v59;
    v60 = _ViewInputs.environment.getter();
    v61 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v61;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v62 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v62;
    v63 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v51, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v57, v54);
    *(_QWORD *)&v137[1] = __PAIR64__(v48, v60);
    *((_QWORD *)&v137[1] + 1) = __PAIR64__(v63, v119);
    *(_QWORD *)&v137[2] = 0;
    DWORD2(v137[2]) = 0;
    *(_QWORD *)&v137[3] = 0;
    BYTE8(v137[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPrefetcher<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPrefetcher);
    lazy protocol witness table accessor for type IncrementalChildPrefetcher<LazyVStackLayout> and conformance IncrementalChildPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    v46 = AGGraphSetFlags();
  }
  MEMORY[0x1E0C80A78](v46, v47);
  AGGraphMutateAttribute();
  MEMORY[0x1E0C80A78](*(unsigned int *)(v121 + 144), v64);
  MEMORY[0x1E0C80A78](v65, v66);
  AGGraphMutateAttribute();
  swift_beginAccess();
  v67 = *(_QWORD *)(v121 + 120);
  v126[0] = v121;
  v126[1] = v67;
  v126[2] = *(_QWORD *)(v121 + 128);
  v131 = *(unint64_t *)v141;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v68 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v70 = *v69;
      v71 = v69[1];
      v68(v137, 0);
      v72 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v73 = PreferenceKeys.endIndex.getter();
      if (v72 < 0 || v72 >= v73)
        break;
      v74 = v72 + 1;
      *((_QWORD *)&v131 + 1) = v74;
      swift_bridgeObjectRelease();
      v75 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v71 + 16);
      updated = lazy protocol witness table accessor for type UpdateChildOutputs and conformance UpdateChildOutputs();
      v75(v126, &type metadata for UpdateChildOutputs, updated, v70, v71);
      if (v74 == PreferenceKeys.endIndex.getter())
        goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  v77 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v78 = v121;
  if ((v77 & 1) != 0 || v118 != v122)
  {
    v79 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v79;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v80 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v80;
    swift_retain();
    _ViewInputs.position.getter();
    v81 = AGCreateWeakAttribute();
    v82 = v81;
    v83 = HIDWORD(v81);
    v84 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v84;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v85 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v85;
    _ViewInputs.transform.getter();
    v86 = AGCreateWeakAttribute();
    v87 = v86;
    v88 = HIDWORD(v86);
    v89 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v89;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v90 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v90;
    v91 = _ViewInputs.weakScrollable.getter();
    v92 = v91;
    v93 = HIDWORD(v91);
    swift_beginAccess();
    v131 = *(_OWORD *)(v121 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    v124[0] = v82;
    v124[1] = v83;
    v124[2] = v87;
    v124[3] = v88;
    v124[4] = v92;
    v124[5] = v93;
    v125 = AGCreateWeakAttribute();
    swift_weakInit();
    if ((v77 & 1) != 0)
    {
      v94 = MEMORY[0x1E0CE0CA8];
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_187BF9830;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *(_QWORD *)(v95 + 56) = v96;
      *(_QWORD *)(v95 + 64) = lazy protocol witness table accessor for type IncrementalScrollable<LazyVStackLayout> and conformance IncrementalScrollable<A>();
      v97 = swift_allocObject();
      *(_QWORD *)(v95 + 32) = v97;
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, v97 + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
      *(_QWORD *)&v137[0] = v95;
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v94, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<[Scrollable]>, MEMORY[0x1E0CFED00]);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v131) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v118 == v122)
    {
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
      swift_release();
    }
    else
    {
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *((_QWORD *)&v137[1] + 1) = v98;
      *(_QWORD *)&v137[2] = lazy protocol witness table accessor for type IncrementalScrollable<LazyVStackLayout> and conformance IncrementalScrollable<A>();
      *(_QWORD *)&v137[0] = swift_allocObject();
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, *(_QWORD *)&v137[0] + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
      v99 = MEMORY[0x1E0CE4E20];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v99, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      v100 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(_QWORD *)&v131 = v127;
      DWORD2(v131) = v128;
      MEMORY[0x1E0C80A78](v100, v101);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v102 = *(_OWORD *)(v123 + 32);
      v103 = *(_OWORD *)(v123 + 64);
      v134 = *(_OWORD *)(v123 + 48);
      v135 = v103;
      v136 = *(_DWORD *)(v123 + 80);
      v104 = *(_OWORD *)(v123 + 16);
      v131 = *(_OWORD *)v123;
      v132 = v104;
      v133 = v102;
      outlined retain of _ViewInputs(v123);
      v105 = ScrollStateRequestTransform.init(collection:inputs:)();
      MEMORY[0x1E0C80A78](v105, v106);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      v78 = v121;
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v137);
    }
  }
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    swift_beginAccess();
    v108 = *(_DWORD *)(v78 + 128);
    v109 = *(_DWORD *)(v78 + 132);
    *(_QWORD *)&v131 = *(_QWORD *)(v78 + 120);
    v107 = v131;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v110 = _ViewOutputs.subscript.getter();
    *(_QWORD *)&v131 = v107;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v111 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    v112 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v112;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v113 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v113;
    if ((v110 & 0x100000000) != 0)
      LODWORD(v110) = v122;
    if ((v111 & 0x100000000) != 0)
      LODWORD(v111) = v122;
    v114 = *(_DWORD *)(v78 + 144);
    outlined retain of _ViewInputs(v123);
    specialized IncrementalFocusableFillerBoundsProvider.init(inputs:placedChildren:focusableBounds:nestedFillerBounds:)(v114, v110, v111, (uint64_t)&v131);
    v137[2] = v133;
    v137[3] = v134;
    *(_QWORD *)&v137[4] = v135;
    v137[0] = v131;
    v137[1] = v132;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of IncrementalFocusableFillerBoundsProvider((uint64_t)&v131);
    swift_beginAccess();
    LOBYTE(v124[0]) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v143);
  outlined release of _ViewInputs(v123);
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v143);
  v115 = *(_QWORD *)&v137[0];
  v116 = BYTE8(v137[0]);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v116 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v78 + 176) = v115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v78;
}

{
  uint64_t v3;
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  int v30;
  void (*v31)(_OWORD *, _QWORD);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t ChildOutputs;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_OWORD *, _QWORD);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t updated;
  char v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  char v116;
  int v118;
  int v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _DWORD v124[6];
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[21];
  _OWORD v138[21];
  __int128 v139;
  _BYTE v140[32];
  _BYTE v141[32];
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v4 = v3;
  v146 = *MEMORY[0x1E0C80C00];
  swift_weakInit();
  v7 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(v3 + 168) = 0;
  v122 = v7;
  *(_DWORD *)(v3 + 148) = v7;
  *(_QWORD *)(v3 + 160) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v3 + 176) = xmmword_187C955C0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 16777471;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  swift_weakAssign();
  swift_release();
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v141 = v9;
  *(_OWORD *)&v141[16] = *(_OWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 16);
  v139 = *(_OWORD *)a3;
  *(_OWORD *)v140 = v10;
  v143 = v139;
  v144 = v10;
  v145 = *(_OWORD *)&v140[16];
  v142 = *(_DWORD *)(a3 + 80);
  v138[0] = v139;
  v138[1] = v8;
  v138[2] = *(_OWORD *)&v140[16];
  outlined retain of _ViewInputs(a3);
  v11 = _GraphInputs.scrollTargetRole.getter();
  v127 = *(_QWORD *)(a3 + 48);
  v128 = *(_DWORD *)(a3 + 56);
  v123 = a3;
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v138[0] = v139;
  v138[1] = v144;
  v138[2] = *(_OWORD *)&v140[16];
  v13 = _GraphInputs.scrollTargetRemovePreference.getter();
  if ((v12 & 1) != 0 && (v13 & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
  }
  v118 = v11;
  if (v11 != v122)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v138[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  v14 = DWORD2(v139);
  v15 = *(_QWORD *)v140;
  v17 = *(_QWORD *)&v140[24];
  v16 = *(_QWORD *)v141;
  v18 = v142;
  *(_QWORD *)(v4 + 32) = v139;
  *(_DWORD *)(v4 + 40) = v14;
  *(_QWORD *)(v4 + 48) = v15;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v140[8];
  *(_QWORD *)(v4 + 72) = v17;
  *(_QWORD *)(v4 + 80) = v16;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v141[8];
  *(_QWORD *)(v4 + 104) = *(_QWORD *)&v141[24];
  *(_DWORD *)(v4 + 112) = v18;
  v19 = (id)AGSubgraphGetCurrent();
  if (!v19)
LABEL_39:
    __break(1u);
  *(_QWORD *)(v4 + 24) = v19;
  *(_DWORD *)(v4 + 136) = a2;
  v20 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v20;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v21 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v22;
  v138[0] = v143;
  v138[1] = v144;
  v138[2] = v145;
  LOBYTE(v137[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  v23 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v23;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v24 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v24;
  swift_getKeyPath();
  v25 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v25;
  v26 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v26;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v27 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v27;
  LODWORD(v138[0]) = _ViewInputs.viewPhase.getter();
  *((_QWORD *)&v138[0] + 1) = 0;
  LODWORD(v138[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for IncrementalLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  v28 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v123);
  specialized IncrementalChildPlacements.init(layout:cache:inputs:)(a1, v28, v123, (uint64_t)v138);
  memcpy(v137, v138, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
  lazy protocol witness table accessor for type IncrementalChildPlacements<LazyHStackLayout> and conformance IncrementalChildPlacements<A>();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v138);
  *(_DWORD *)(v4 + 144) = v29;
  *(_QWORD *)&v137[0] = __PAIR64__(v28, v29);
  v119 = v28;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v121 = v4;
  v30 = *(_DWORD *)(v4 + 144);
  _ViewOutputs.init()();
  v129 = v30;
  v130 = v137[0];
  v131 = *(unint64_t *)v141;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v31 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v33 = *v32;
      v34 = v32[1];
      v31(v137, 0);
      v35 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v36 = PreferenceKeys.endIndex.getter();
      if (v35 < 0 || v35 >= v36)
        break;
      v37 = v35 + 1;
      *((_QWORD *)&v131 + 1) = v37;
      swift_bridgeObjectRelease();
      v38 = *(void (**)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v34 + 16);
      ChildOutputs = lazy protocol witness table accessor for type MakeChildOutputs and conformance MakeChildOutputs();
      v38(&v129, &type metadata for MakeChildOutputs, ChildOutputs, v33, v34);
      if (v37 == PreferenceKeys.endIndex.getter())
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((BYTE4(v145) & 2) != 0)
  {
    v40 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v40;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v41 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v41;
    v42 = _ViewInputs.environment.getter();
    v43 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v43;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v44 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v44;
    v45 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v42, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v45, v119);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHStackLayout> and conformance IncrementalLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v137[0]) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(_OWORD *)(v121 + 120) = v130;
  outlined retain of _ViewInputs(v123);
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v46 = outlined release of _ViewInputs(v123);
  v48 = v137[0];
  if (LODWORD(v137[0]) != v122)
  {
    v49 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v49;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v50 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v50;
    v51 = _ViewInputs.size.getter();
    v52 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v52;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v53 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v53;
    v54 = _ViewInputs.position.getter();
    v55 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v55;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v56 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v56;
    v57 = _ViewInputs.transform.getter();
    v58 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v58;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v59 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v59;
    v60 = _ViewInputs.environment.getter();
    v61 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v61;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v62 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v62;
    v63 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v51, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v57, v54);
    *(_QWORD *)&v137[1] = __PAIR64__(v48, v60);
    *((_QWORD *)&v137[1] + 1) = __PAIR64__(v63, v119);
    *(_QWORD *)&v137[2] = 0;
    DWORD2(v137[2]) = 0;
    *(_QWORD *)&v137[3] = 0;
    BYTE8(v137[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPrefetcher<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPrefetcher);
    lazy protocol witness table accessor for type IncrementalChildPrefetcher<LazyHStackLayout> and conformance IncrementalChildPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    v46 = AGGraphSetFlags();
  }
  MEMORY[0x1E0C80A78](v46, v47);
  AGGraphMutateAttribute();
  MEMORY[0x1E0C80A78](*(unsigned int *)(v121 + 144), v64);
  MEMORY[0x1E0C80A78](v65, v66);
  AGGraphMutateAttribute();
  swift_beginAccess();
  v67 = *(_QWORD *)(v121 + 120);
  v126[0] = v121;
  v126[1] = v67;
  v126[2] = *(_QWORD *)(v121 + 128);
  v131 = *(unint64_t *)v141;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v68 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v70 = *v69;
      v71 = v69[1];
      v68(v137, 0);
      v72 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v73 = PreferenceKeys.endIndex.getter();
      if (v72 < 0 || v72 >= v73)
        break;
      v74 = v72 + 1;
      *((_QWORD *)&v131 + 1) = v74;
      swift_bridgeObjectRelease();
      v75 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v71 + 16);
      updated = lazy protocol witness table accessor for type UpdateChildOutputs and conformance UpdateChildOutputs();
      v75(v126, &type metadata for UpdateChildOutputs, updated, v70, v71);
      if (v74 == PreferenceKeys.endIndex.getter())
        goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  v77 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v78 = v121;
  if ((v77 & 1) != 0 || v118 != v122)
  {
    v79 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v79;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v80 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v80;
    swift_retain();
    _ViewInputs.position.getter();
    v81 = AGCreateWeakAttribute();
    v82 = v81;
    v83 = HIDWORD(v81);
    v84 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v84;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v85 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v85;
    _ViewInputs.transform.getter();
    v86 = AGCreateWeakAttribute();
    v87 = v86;
    v88 = HIDWORD(v86);
    v89 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v89;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v90 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v90;
    v91 = _ViewInputs.weakScrollable.getter();
    v92 = v91;
    v93 = HIDWORD(v91);
    swift_beginAccess();
    v131 = *(_OWORD *)(v121 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    v124[0] = v82;
    v124[1] = v83;
    v124[2] = v87;
    v124[3] = v88;
    v124[4] = v92;
    v124[5] = v93;
    v125 = AGCreateWeakAttribute();
    swift_weakInit();
    if ((v77 & 1) != 0)
    {
      v94 = MEMORY[0x1E0CE0CA8];
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_187BF9830;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *(_QWORD *)(v95 + 56) = v96;
      *(_QWORD *)(v95 + 64) = lazy protocol witness table accessor for type IncrementalScrollable<LazyHStackLayout> and conformance IncrementalScrollable<A>();
      v97 = swift_allocObject();
      *(_QWORD *)(v95 + 32) = v97;
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, v97 + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
      *(_QWORD *)&v137[0] = v95;
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v94, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<[Scrollable]>, MEMORY[0x1E0CFED00]);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v131) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v118 == v122)
    {
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
      swift_release();
    }
    else
    {
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *((_QWORD *)&v137[1] + 1) = v98;
      *(_QWORD *)&v137[2] = lazy protocol witness table accessor for type IncrementalScrollable<LazyHStackLayout> and conformance IncrementalScrollable<A>();
      *(_QWORD *)&v137[0] = swift_allocObject();
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, *(_QWORD *)&v137[0] + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
      v99 = MEMORY[0x1E0CE4E20];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v99, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      v100 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(_QWORD *)&v131 = v127;
      DWORD2(v131) = v128;
      MEMORY[0x1E0C80A78](v100, v101);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v102 = *(_OWORD *)(v123 + 32);
      v103 = *(_OWORD *)(v123 + 64);
      v134 = *(_OWORD *)(v123 + 48);
      v135 = v103;
      v136 = *(_DWORD *)(v123 + 80);
      v104 = *(_OWORD *)(v123 + 16);
      v131 = *(_OWORD *)v123;
      v132 = v104;
      v133 = v102;
      outlined retain of _ViewInputs(v123);
      v105 = ScrollStateRequestTransform.init(collection:inputs:)();
      MEMORY[0x1E0C80A78](v105, v106);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      v78 = v121;
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v137);
    }
  }
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    swift_beginAccess();
    v108 = *(_DWORD *)(v78 + 128);
    v109 = *(_DWORD *)(v78 + 132);
    *(_QWORD *)&v131 = *(_QWORD *)(v78 + 120);
    v107 = v131;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v110 = _ViewOutputs.subscript.getter();
    *(_QWORD *)&v131 = v107;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v111 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    v112 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v112;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v113 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v113;
    if ((v110 & 0x100000000) != 0)
      LODWORD(v110) = v122;
    if ((v111 & 0x100000000) != 0)
      LODWORD(v111) = v122;
    v114 = *(_DWORD *)(v78 + 144);
    outlined retain of _ViewInputs(v123);
    specialized IncrementalFocusableFillerBoundsProvider.init(inputs:placedChildren:focusableBounds:nestedFillerBounds:)(v114, v110, v111, (uint64_t)&v131);
    v137[2] = v133;
    v137[3] = v134;
    *(_QWORD *)&v137[4] = v135;
    v137[0] = v131;
    v137[1] = v132;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of IncrementalFocusableFillerBoundsProvider((uint64_t)&v131);
    swift_beginAccess();
    LOBYTE(v124[0]) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v143);
  outlined release of _ViewInputs(v123);
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v143);
  v115 = *(_QWORD *)&v137[0];
  v116 = BYTE8(v137[0]);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v116 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v78 + 176) = v115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v78;
}

{
  uint64_t v3;
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  int v30;
  void (*v31)(_OWORD *, _QWORD);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t ChildOutputs;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_OWORD *, _QWORD);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t updated;
  char v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  char v116;
  int v118;
  int v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _DWORD v124[6];
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[21];
  _OWORD v138[21];
  __int128 v139;
  _BYTE v140[32];
  _BYTE v141[32];
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v4 = v3;
  v146 = *MEMORY[0x1E0C80C00];
  swift_weakInit();
  v7 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(v3 + 168) = 0;
  v122 = v7;
  *(_DWORD *)(v3 + 148) = v7;
  *(_QWORD *)(v3 + 160) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v3 + 176) = xmmword_187C955C0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 16777471;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  swift_weakAssign();
  swift_release();
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v141 = v9;
  *(_OWORD *)&v141[16] = *(_OWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 16);
  v139 = *(_OWORD *)a3;
  *(_OWORD *)v140 = v10;
  v143 = v139;
  v144 = v10;
  v145 = *(_OWORD *)&v140[16];
  v142 = *(_DWORD *)(a3 + 80);
  v138[0] = v139;
  v138[1] = v8;
  v138[2] = *(_OWORD *)&v140[16];
  outlined retain of _ViewInputs(a3);
  v11 = _GraphInputs.scrollTargetRole.getter();
  v127 = *(_QWORD *)(a3 + 48);
  v128 = *(_DWORD *)(a3 + 56);
  v123 = a3;
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v138[0] = v139;
  v138[1] = v144;
  v138[2] = *(_OWORD *)&v140[16];
  v13 = _GraphInputs.scrollTargetRemovePreference.getter();
  if ((v12 & 1) != 0 && (v13 & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
  }
  v118 = v11;
  if (v11 != v122)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v138[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  v14 = DWORD2(v139);
  v15 = *(_QWORD *)v140;
  v17 = *(_QWORD *)&v140[24];
  v16 = *(_QWORD *)v141;
  v18 = v142;
  *(_QWORD *)(v4 + 32) = v139;
  *(_DWORD *)(v4 + 40) = v14;
  *(_QWORD *)(v4 + 48) = v15;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v140[8];
  *(_QWORD *)(v4 + 72) = v17;
  *(_QWORD *)(v4 + 80) = v16;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v141[8];
  *(_QWORD *)(v4 + 104) = *(_QWORD *)&v141[24];
  *(_DWORD *)(v4 + 112) = v18;
  v19 = (id)AGSubgraphGetCurrent();
  if (!v19)
LABEL_39:
    __break(1u);
  *(_QWORD *)(v4 + 24) = v19;
  *(_DWORD *)(v4 + 136) = a2;
  v20 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v20;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v21 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v22;
  v138[0] = v143;
  v138[1] = v144;
  v138[2] = v145;
  LOBYTE(v137[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  v23 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v23;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v24 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v24;
  swift_getKeyPath();
  v25 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v25;
  v26 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v26;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v27 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v27;
  LODWORD(v138[0]) = _ViewInputs.viewPhase.getter();
  *((_QWORD *)&v138[0] + 1) = 0;
  LODWORD(v138[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for IncrementalLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  v28 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v123);
  specialized IncrementalChildPlacements.init(layout:cache:inputs:)(a1, v28, v123, (uint64_t)v138);
  memcpy(v137, v138, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
  lazy protocol witness table accessor for type IncrementalChildPlacements<LazyFixedSizeHStackLayout> and conformance IncrementalChildPlacements<A>();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v138);
  *(_DWORD *)(v4 + 144) = v29;
  *(_QWORD *)&v137[0] = __PAIR64__(v28, v29);
  v119 = v28;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v121 = v4;
  v30 = *(_DWORD *)(v4 + 144);
  _ViewOutputs.init()();
  v129 = v30;
  v130 = v137[0];
  v131 = *(unint64_t *)v141;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v31 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v33 = *v32;
      v34 = v32[1];
      v31(v137, 0);
      v35 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v36 = PreferenceKeys.endIndex.getter();
      if (v35 < 0 || v35 >= v36)
        break;
      v37 = v35 + 1;
      *((_QWORD *)&v131 + 1) = v37;
      swift_bridgeObjectRelease();
      v38 = *(void (**)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v34 + 16);
      ChildOutputs = lazy protocol witness table accessor for type MakeChildOutputs and conformance MakeChildOutputs();
      v38(&v129, &type metadata for MakeChildOutputs, ChildOutputs, v33, v34);
      if (v37 == PreferenceKeys.endIndex.getter())
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((BYTE4(v145) & 2) != 0)
  {
    v40 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v40;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v41 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v41;
    v42 = _ViewInputs.environment.getter();
    v43 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v43;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v44 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v44;
    v45 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v42, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v45, v119);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeHStackLayout> and conformance IncrementalLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v137[0]) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(_OWORD *)(v121 + 120) = v130;
  outlined retain of _ViewInputs(v123);
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v46 = outlined release of _ViewInputs(v123);
  v48 = v137[0];
  if (LODWORD(v137[0]) != v122)
  {
    v49 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v49;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v50 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v50;
    v51 = _ViewInputs.size.getter();
    v52 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v52;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v53 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v53;
    v54 = _ViewInputs.position.getter();
    v55 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v55;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v56 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v56;
    v57 = _ViewInputs.transform.getter();
    v58 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v58;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v59 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v59;
    v60 = _ViewInputs.environment.getter();
    v61 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v61;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v62 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v62;
    v63 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v51, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v57, v54);
    *(_QWORD *)&v137[1] = __PAIR64__(v48, v60);
    *((_QWORD *)&v137[1] + 1) = __PAIR64__(v63, v119);
    *(_QWORD *)&v137[2] = 0;
    DWORD2(v137[2]) = 0;
    *(_QWORD *)&v137[3] = 0;
    BYTE8(v137[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPrefetcher<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPrefetcher);
    lazy protocol witness table accessor for type IncrementalChildPrefetcher<LazyFixedSizeHStackLayout> and conformance IncrementalChildPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    v46 = AGGraphSetFlags();
  }
  MEMORY[0x1E0C80A78](v46, v47);
  AGGraphMutateAttribute();
  MEMORY[0x1E0C80A78](*(unsigned int *)(v121 + 144), v64);
  MEMORY[0x1E0C80A78](v65, v66);
  AGGraphMutateAttribute();
  swift_beginAccess();
  v67 = *(_QWORD *)(v121 + 120);
  v126[0] = v121;
  v126[1] = v67;
  v126[2] = *(_QWORD *)(v121 + 128);
  v131 = *(unint64_t *)v141;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v68 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v70 = *v69;
      v71 = v69[1];
      v68(v137, 0);
      v72 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v73 = PreferenceKeys.endIndex.getter();
      if (v72 < 0 || v72 >= v73)
        break;
      v74 = v72 + 1;
      *((_QWORD *)&v131 + 1) = v74;
      swift_bridgeObjectRelease();
      v75 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v71 + 16);
      updated = lazy protocol witness table accessor for type UpdateChildOutputs and conformance UpdateChildOutputs();
      v75(v126, &type metadata for UpdateChildOutputs, updated, v70, v71);
      if (v74 == PreferenceKeys.endIndex.getter())
        goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  v77 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v78 = v121;
  if ((v77 & 1) != 0 || v118 != v122)
  {
    v79 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v79;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v80 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v80;
    swift_retain();
    _ViewInputs.position.getter();
    v81 = AGCreateWeakAttribute();
    v82 = v81;
    v83 = HIDWORD(v81);
    v84 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v84;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v85 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v85;
    _ViewInputs.transform.getter();
    v86 = AGCreateWeakAttribute();
    v87 = v86;
    v88 = HIDWORD(v86);
    v89 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v89;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v90 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v90;
    v91 = _ViewInputs.weakScrollable.getter();
    v92 = v91;
    v93 = HIDWORD(v91);
    swift_beginAccess();
    v131 = *(_OWORD *)(v121 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    v124[0] = v82;
    v124[1] = v83;
    v124[2] = v87;
    v124[3] = v88;
    v124[4] = v92;
    v124[5] = v93;
    v125 = AGCreateWeakAttribute();
    swift_weakInit();
    if ((v77 & 1) != 0)
    {
      v94 = MEMORY[0x1E0CE0CA8];
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_187BF9830;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *(_QWORD *)(v95 + 56) = v96;
      *(_QWORD *)(v95 + 64) = lazy protocol witness table accessor for type IncrementalScrollable<LazyFixedSizeHStackLayout> and conformance IncrementalScrollable<A>();
      v97 = swift_allocObject();
      *(_QWORD *)(v95 + 32) = v97;
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, v97 + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout);
      *(_QWORD *)&v137[0] = v95;
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v94, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<[Scrollable]>, MEMORY[0x1E0CFED00]);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v131) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v118 == v122)
    {
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout);
      swift_release();
    }
    else
    {
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *((_QWORD *)&v137[1] + 1) = v98;
      *(_QWORD *)&v137[2] = lazy protocol witness table accessor for type IncrementalScrollable<LazyFixedSizeHStackLayout> and conformance IncrementalScrollable<A>();
      *(_QWORD *)&v137[0] = swift_allocObject();
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, *(_QWORD *)&v137[0] + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout);
      v99 = MEMORY[0x1E0CE4E20];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v99, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      v100 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(_QWORD *)&v131 = v127;
      DWORD2(v131) = v128;
      MEMORY[0x1E0C80A78](v100, v101);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v102 = *(_OWORD *)(v123 + 32);
      v103 = *(_OWORD *)(v123 + 64);
      v134 = *(_OWORD *)(v123 + 48);
      v135 = v103;
      v136 = *(_DWORD *)(v123 + 80);
      v104 = *(_OWORD *)(v123 + 16);
      v131 = *(_OWORD *)v123;
      v132 = v104;
      v133 = v102;
      outlined retain of _ViewInputs(v123);
      v105 = ScrollStateRequestTransform.init(collection:inputs:)();
      MEMORY[0x1E0C80A78](v105, v106);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      v78 = v121;
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v137);
    }
  }
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    swift_beginAccess();
    v108 = *(_DWORD *)(v78 + 128);
    v109 = *(_DWORD *)(v78 + 132);
    *(_QWORD *)&v131 = *(_QWORD *)(v78 + 120);
    v107 = v131;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v110 = _ViewOutputs.subscript.getter();
    *(_QWORD *)&v131 = v107;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v111 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    v112 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v112;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v113 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v113;
    if ((v110 & 0x100000000) != 0)
      LODWORD(v110) = v122;
    if ((v111 & 0x100000000) != 0)
      LODWORD(v111) = v122;
    v114 = *(_DWORD *)(v78 + 144);
    outlined retain of _ViewInputs(v123);
    specialized IncrementalFocusableFillerBoundsProvider.init(inputs:placedChildren:focusableBounds:nestedFillerBounds:)(v114, v110, v111, (uint64_t)&v131);
    v137[2] = v133;
    v137[3] = v134;
    *(_QWORD *)&v137[4] = v135;
    v137[0] = v131;
    v137[1] = v132;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of IncrementalFocusableFillerBoundsProvider((uint64_t)&v131);
    swift_beginAccess();
    LOBYTE(v124[0]) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v143);
  outlined release of _ViewInputs(v123);
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v143);
  v115 = *(_QWORD *)&v137[0];
  v116 = BYTE8(v137[0]);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v116 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v78 + 176) = v115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v78;
}

{
  uint64_t v3;
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  int v30;
  void (*v31)(_OWORD *, _QWORD);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t ChildOutputs;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_OWORD *, _QWORD);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t updated;
  char v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  char v116;
  int v118;
  int v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _DWORD v124[6];
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[21];
  _OWORD v138[21];
  __int128 v139;
  _BYTE v140[32];
  _BYTE v141[32];
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v4 = v3;
  v146 = *MEMORY[0x1E0C80C00];
  swift_weakInit();
  v7 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(v3 + 168) = 0;
  v122 = v7;
  *(_DWORD *)(v3 + 148) = v7;
  *(_QWORD *)(v3 + 160) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v3 + 176) = xmmword_187C955C0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 16777471;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  swift_weakAssign();
  swift_release();
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v141 = v9;
  *(_OWORD *)&v141[16] = *(_OWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 16);
  v139 = *(_OWORD *)a3;
  *(_OWORD *)v140 = v10;
  v143 = v139;
  v144 = v10;
  v145 = *(_OWORD *)&v140[16];
  v142 = *(_DWORD *)(a3 + 80);
  v138[0] = v139;
  v138[1] = v8;
  v138[2] = *(_OWORD *)&v140[16];
  outlined retain of _ViewInputs(a3);
  v11 = _GraphInputs.scrollTargetRole.getter();
  v127 = *(_QWORD *)(a3 + 48);
  v128 = *(_DWORD *)(a3 + 56);
  v123 = a3;
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v138[0] = v139;
  v138[1] = v144;
  v138[2] = *(_OWORD *)&v140[16];
  v13 = _GraphInputs.scrollTargetRemovePreference.getter();
  if ((v12 & 1) != 0 && (v13 & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
  }
  v118 = v11;
  if (v11 != v122)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v138[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  v14 = DWORD2(v139);
  v15 = *(_QWORD *)v140;
  v17 = *(_QWORD *)&v140[24];
  v16 = *(_QWORD *)v141;
  v18 = v142;
  *(_QWORD *)(v4 + 32) = v139;
  *(_DWORD *)(v4 + 40) = v14;
  *(_QWORD *)(v4 + 48) = v15;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v140[8];
  *(_QWORD *)(v4 + 72) = v17;
  *(_QWORD *)(v4 + 80) = v16;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v141[8];
  *(_QWORD *)(v4 + 104) = *(_QWORD *)&v141[24];
  *(_DWORD *)(v4 + 112) = v18;
  v19 = (id)AGSubgraphGetCurrent();
  if (!v19)
LABEL_39:
    __break(1u);
  *(_QWORD *)(v4 + 24) = v19;
  *(_DWORD *)(v4 + 136) = a2;
  v20 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v20;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v21 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v22;
  v138[0] = v143;
  v138[1] = v144;
  v138[2] = v145;
  LOBYTE(v137[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  v23 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v23;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v24 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v24;
  swift_getKeyPath();
  v25 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v25;
  v26 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v26;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v27 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v27;
  LODWORD(v138[0]) = _ViewInputs.viewPhase.getter();
  *((_QWORD *)&v138[0] + 1) = 0;
  LODWORD(v138[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for IncrementalLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  v28 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v123);
  specialized IncrementalChildPlacements.init(layout:cache:inputs:)(a1, v28, v123, (uint64_t)v138);
  memcpy(v137, v138, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
  lazy protocol witness table accessor for type IncrementalChildPlacements<LazyFixedSizeVStackLayout> and conformance IncrementalChildPlacements<A>();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v138);
  *(_DWORD *)(v4 + 144) = v29;
  *(_QWORD *)&v137[0] = __PAIR64__(v28, v29);
  v119 = v28;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v121 = v4;
  v30 = *(_DWORD *)(v4 + 144);
  _ViewOutputs.init()();
  v129 = v30;
  v130 = v137[0];
  v131 = *(unint64_t *)v141;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v31 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v33 = *v32;
      v34 = v32[1];
      v31(v137, 0);
      v35 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v36 = PreferenceKeys.endIndex.getter();
      if (v35 < 0 || v35 >= v36)
        break;
      v37 = v35 + 1;
      *((_QWORD *)&v131 + 1) = v37;
      swift_bridgeObjectRelease();
      v38 = *(void (**)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v34 + 16);
      ChildOutputs = lazy protocol witness table accessor for type MakeChildOutputs and conformance MakeChildOutputs();
      v38(&v129, &type metadata for MakeChildOutputs, ChildOutputs, v33, v34);
      if (v37 == PreferenceKeys.endIndex.getter())
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((BYTE4(v145) & 2) != 0)
  {
    v40 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v40;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v41 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v41;
    v42 = _ViewInputs.environment.getter();
    v43 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v43;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v44 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v44;
    v45 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v42, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v45, v119);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyFixedSizeVStackLayout> and conformance IncrementalLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v137[0]) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(_OWORD *)(v121 + 120) = v130;
  outlined retain of _ViewInputs(v123);
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v46 = outlined release of _ViewInputs(v123);
  v48 = v137[0];
  if (LODWORD(v137[0]) != v122)
  {
    v49 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v49;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v50 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v50;
    v51 = _ViewInputs.size.getter();
    v52 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v52;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v53 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v53;
    v54 = _ViewInputs.position.getter();
    v55 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v55;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v56 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v56;
    v57 = _ViewInputs.transform.getter();
    v58 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v58;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v59 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v59;
    v60 = _ViewInputs.environment.getter();
    v61 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v61;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v62 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v62;
    v63 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v51, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v57, v54);
    *(_QWORD *)&v137[1] = __PAIR64__(v48, v60);
    *((_QWORD *)&v137[1] + 1) = __PAIR64__(v63, v119);
    *(_QWORD *)&v137[2] = 0;
    DWORD2(v137[2]) = 0;
    *(_QWORD *)&v137[3] = 0;
    BYTE8(v137[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPrefetcher<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPrefetcher);
    lazy protocol witness table accessor for type IncrementalChildPrefetcher<LazyFixedSizeVStackLayout> and conformance IncrementalChildPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    v46 = AGGraphSetFlags();
  }
  MEMORY[0x1E0C80A78](v46, v47);
  AGGraphMutateAttribute();
  MEMORY[0x1E0C80A78](*(unsigned int *)(v121 + 144), v64);
  MEMORY[0x1E0C80A78](v65, v66);
  AGGraphMutateAttribute();
  swift_beginAccess();
  v67 = *(_QWORD *)(v121 + 120);
  v126[0] = v121;
  v126[1] = v67;
  v126[2] = *(_QWORD *)(v121 + 128);
  v131 = *(unint64_t *)v141;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v68 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v70 = *v69;
      v71 = v69[1];
      v68(v137, 0);
      v72 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v73 = PreferenceKeys.endIndex.getter();
      if (v72 < 0 || v72 >= v73)
        break;
      v74 = v72 + 1;
      *((_QWORD *)&v131 + 1) = v74;
      swift_bridgeObjectRelease();
      v75 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v71 + 16);
      updated = lazy protocol witness table accessor for type UpdateChildOutputs and conformance UpdateChildOutputs();
      v75(v126, &type metadata for UpdateChildOutputs, updated, v70, v71);
      if (v74 == PreferenceKeys.endIndex.getter())
        goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  v77 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v78 = v121;
  if ((v77 & 1) != 0 || v118 != v122)
  {
    v79 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v79;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v80 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v80;
    swift_retain();
    _ViewInputs.position.getter();
    v81 = AGCreateWeakAttribute();
    v82 = v81;
    v83 = HIDWORD(v81);
    v84 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v84;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v85 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v85;
    _ViewInputs.transform.getter();
    v86 = AGCreateWeakAttribute();
    v87 = v86;
    v88 = HIDWORD(v86);
    v89 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v89;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v90 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v90;
    v91 = _ViewInputs.weakScrollable.getter();
    v92 = v91;
    v93 = HIDWORD(v91);
    swift_beginAccess();
    v131 = *(_OWORD *)(v121 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    v124[0] = v82;
    v124[1] = v83;
    v124[2] = v87;
    v124[3] = v88;
    v124[4] = v92;
    v124[5] = v93;
    v125 = AGCreateWeakAttribute();
    swift_weakInit();
    if ((v77 & 1) != 0)
    {
      v94 = MEMORY[0x1E0CE0CA8];
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_187BF9830;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *(_QWORD *)(v95 + 56) = v96;
      *(_QWORD *)(v95 + 64) = lazy protocol witness table accessor for type IncrementalScrollable<LazyFixedSizeVStackLayout> and conformance IncrementalScrollable<A>();
      v97 = swift_allocObject();
      *(_QWORD *)(v95 + 32) = v97;
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, v97 + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout);
      *(_QWORD *)&v137[0] = v95;
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v94, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<[Scrollable]>, MEMORY[0x1E0CFED00]);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v131) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v118 == v122)
    {
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout);
      swift_release();
    }
    else
    {
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *((_QWORD *)&v137[1] + 1) = v98;
      *(_QWORD *)&v137[2] = lazy protocol witness table accessor for type IncrementalScrollable<LazyFixedSizeVStackLayout> and conformance IncrementalScrollable<A>();
      *(_QWORD *)&v137[0] = swift_allocObject();
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, *(_QWORD *)&v137[0] + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout);
      v99 = MEMORY[0x1E0CE4E20];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v99, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      v100 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(_QWORD *)&v131 = v127;
      DWORD2(v131) = v128;
      MEMORY[0x1E0C80A78](v100, v101);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v102 = *(_OWORD *)(v123 + 32);
      v103 = *(_OWORD *)(v123 + 64);
      v134 = *(_OWORD *)(v123 + 48);
      v135 = v103;
      v136 = *(_DWORD *)(v123 + 80);
      v104 = *(_OWORD *)(v123 + 16);
      v131 = *(_OWORD *)v123;
      v132 = v104;
      v133 = v102;
      outlined retain of _ViewInputs(v123);
      v105 = ScrollStateRequestTransform.init(collection:inputs:)();
      MEMORY[0x1E0C80A78](v105, v106);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      v78 = v121;
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v137);
    }
  }
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    swift_beginAccess();
    v108 = *(_DWORD *)(v78 + 128);
    v109 = *(_DWORD *)(v78 + 132);
    *(_QWORD *)&v131 = *(_QWORD *)(v78 + 120);
    v107 = v131;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v110 = _ViewOutputs.subscript.getter();
    *(_QWORD *)&v131 = v107;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v111 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    v112 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v112;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v113 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v113;
    if ((v110 & 0x100000000) != 0)
      LODWORD(v110) = v122;
    if ((v111 & 0x100000000) != 0)
      LODWORD(v111) = v122;
    v114 = *(_DWORD *)(v78 + 144);
    outlined retain of _ViewInputs(v123);
    specialized IncrementalFocusableFillerBoundsProvider.init(inputs:placedChildren:focusableBounds:nestedFillerBounds:)(v114, v110, v111, (uint64_t)&v131);
    v137[2] = v133;
    v137[3] = v134;
    *(_QWORD *)&v137[4] = v135;
    v137[0] = v131;
    v137[1] = v132;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of IncrementalFocusableFillerBoundsProvider((uint64_t)&v131);
    swift_beginAccess();
    LOBYTE(v124[0]) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v143);
  outlined release of _ViewInputs(v123);
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v143);
  v115 = *(_QWORD *)&v137[0];
  v116 = BYTE8(v137[0]);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v116 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v78 + 176) = v115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v78;
}

{
  uint64_t v3;
  uint64_t v4;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  int v28;
  unsigned int v29;
  int v30;
  void (*v31)(_OWORD *, _QWORD);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t ChildOutputs;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_OWORD *, _QWORD);
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t updated;
  char v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  char v116;
  int v118;
  int v119;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _DWORD v124[6];
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  int v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[21];
  _OWORD v138[21];
  __int128 v139;
  _BYTE v140[32];
  _BYTE v141[32];
  int v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;

  v4 = v3;
  v146 = *MEMORY[0x1E0C80C00];
  swift_weakInit();
  v7 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(v3 + 168) = 0;
  v122 = v7;
  *(_DWORD *)(v3 + 148) = v7;
  *(_QWORD *)(v3 + 160) = MEMORY[0x1E0DEE9E0];
  *(_OWORD *)(v3 + 176) = xmmword_187C955C0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_DWORD *)(v3 + 224) = 16777471;
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C5F8]();
  swift_weakAssign();
  swift_release();
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v140[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v141 = v9;
  *(_OWORD *)&v141[16] = *(_OWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 16);
  v139 = *(_OWORD *)a3;
  *(_OWORD *)v140 = v10;
  v143 = v139;
  v144 = v10;
  v145 = *(_OWORD *)&v140[16];
  v142 = *(_DWORD *)(a3 + 80);
  v138[0] = v139;
  v138[1] = v8;
  v138[2] = *(_OWORD *)&v140[16];
  outlined retain of _ViewInputs(a3);
  v11 = _GraphInputs.scrollTargetRole.getter();
  v127 = *(_QWORD *)(a3 + 48);
  v128 = *(_DWORD *)(a3 + 56);
  v123 = a3;
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v138[0] = v139;
  v138[1] = v144;
  v138[2] = *(_OWORD *)&v140[16];
  v13 = _GraphInputs.scrollTargetRemovePreference.getter();
  if ((v12 & 1) != 0 && (v13 & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    PreferenceKeys.remove<A>(_:)();
  }
  v118 = v11;
  if (v11 != v122)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v138[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  v14 = DWORD2(v139);
  v15 = *(_QWORD *)v140;
  v17 = *(_QWORD *)&v140[24];
  v16 = *(_QWORD *)v141;
  v18 = v142;
  *(_QWORD *)(v4 + 32) = v139;
  *(_DWORD *)(v4 + 40) = v14;
  *(_QWORD *)(v4 + 48) = v15;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v140[8];
  *(_QWORD *)(v4 + 72) = v17;
  *(_QWORD *)(v4 + 80) = v16;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v141[8];
  *(_QWORD *)(v4 + 104) = *(_QWORD *)&v141[24];
  *(_DWORD *)(v4 + 112) = v18;
  v19 = (id)AGSubgraphGetCurrent();
  if (!v19)
LABEL_39:
    __break(1u);
  *(_QWORD *)(v4 + 24) = v19;
  *(_DWORD *)(v4 + 136) = a2;
  v20 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v20;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v21 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v21;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v22;
  v138[0] = v143;
  v138[1] = v144;
  v138[2] = v145;
  LOBYTE(v137[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  v23 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v23;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v24 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v24;
  swift_getKeyPath();
  v25 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v25;
  v26 = *(_OWORD *)(v123 + 48);
  v138[2] = *(_OWORD *)(v123 + 32);
  v138[3] = v26;
  v138[4] = *(_OWORD *)(v123 + 64);
  LODWORD(v138[5]) = *(_DWORD *)(v123 + 80);
  v27 = *(_OWORD *)(v123 + 16);
  v138[0] = *(_OWORD *)v123;
  v138[1] = v27;
  LODWORD(v138[0]) = _ViewInputs.viewPhase.getter();
  *((_QWORD *)&v138[0] + 1) = 0;
  LODWORD(v138[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for IncrementalLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  v28 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v123);
  specialized IncrementalChildPlacements.init(layout:cache:inputs:)(a1, v28, v123, (uint64_t)v138);
  memcpy(v137, v138, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
  lazy protocol witness table accessor for type IncrementalChildPlacements<LazyHGridLayout> and conformance IncrementalChildPlacements<A>();
  v29 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v138);
  *(_DWORD *)(v4 + 144) = v29;
  *(_QWORD *)&v137[0] = __PAIR64__(v28, v29);
  v119 = v28;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v121 = v4;
  v30 = *(_DWORD *)(v4 + 144);
  _ViewOutputs.init()();
  v129 = v30;
  v130 = v137[0];
  v131 = *(unint64_t *)v141;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v31 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v33 = *v32;
      v34 = v32[1];
      v31(v137, 0);
      v35 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v36 = PreferenceKeys.endIndex.getter();
      if (v35 < 0 || v35 >= v36)
        break;
      v37 = v35 + 1;
      *((_QWORD *)&v131 + 1) = v37;
      swift_bridgeObjectRelease();
      v38 = *(void (**)(int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v34 + 16);
      ChildOutputs = lazy protocol witness table accessor for type MakeChildOutputs and conformance MakeChildOutputs();
      v38(&v129, &type metadata for MakeChildOutputs, ChildOutputs, v33, v34);
      if (v37 == PreferenceKeys.endIndex.getter())
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((BYTE4(v145) & 2) != 0)
  {
    v40 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v40;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v41 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v41;
    v42 = _ViewInputs.environment.getter();
    v43 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v43;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v44 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v44;
    v45 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v42, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v45, v119);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyHGridLayout> and conformance IncrementalLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v137[0]) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  *(_OWORD *)(v121 + 120) = v130;
  outlined retain of _ViewInputs(v123);
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v46 = outlined release of _ViewInputs(v123);
  v48 = v137[0];
  if (LODWORD(v137[0]) != v122)
  {
    v49 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v49;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v50 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v50;
    v51 = _ViewInputs.size.getter();
    v52 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v52;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v53 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v53;
    v54 = _ViewInputs.position.getter();
    v55 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v55;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v56 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v56;
    v57 = _ViewInputs.transform.getter();
    v58 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v58;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v59 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v59;
    v60 = _ViewInputs.environment.getter();
    v61 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v61;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v62 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v62;
    v63 = _ViewInputs.scrollableContainerSize.getter();
    *(_QWORD *)&v137[0] = __PAIR64__(v51, a1);
    *((_QWORD *)&v137[0] + 1) = __PAIR64__(v57, v54);
    *(_QWORD *)&v137[1] = __PAIR64__(v48, v60);
    *((_QWORD *)&v137[1] + 1) = __PAIR64__(v63, v119);
    *(_QWORD *)&v137[2] = 0;
    DWORD2(v137[2]) = 0;
    *(_QWORD *)&v137[3] = 0;
    BYTE8(v137[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPrefetcher<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPrefetcher);
    lazy protocol witness table accessor for type IncrementalChildPrefetcher<LazyHGridLayout> and conformance IncrementalChildPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    v46 = AGGraphSetFlags();
  }
  MEMORY[0x1E0C80A78](v46, v47);
  AGGraphMutateAttribute();
  MEMORY[0x1E0C80A78](*(unsigned int *)(v121 + 144), v64);
  MEMORY[0x1E0C80A78](v65, v66);
  AGGraphMutateAttribute();
  swift_beginAccess();
  v67 = *(_QWORD *)(v121 + 120);
  v126[0] = v121;
  v126[1] = v67;
  v126[2] = *(_QWORD *)(v121 + 128);
  v131 = *(unint64_t *)v141;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      v68 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v70 = *v69;
      v71 = v69[1];
      v68(v137, 0);
      v72 = *((_QWORD *)&v131 + 1);
      *(_QWORD *)&v137[0] = v131;
      swift_bridgeObjectRetain();
      v73 = PreferenceKeys.endIndex.getter();
      if (v72 < 0 || v72 >= v73)
        break;
      v74 = v72 + 1;
      *((_QWORD *)&v131 + 1) = v74;
      swift_bridgeObjectRelease();
      v75 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v71 + 16);
      updated = lazy protocol witness table accessor for type UpdateChildOutputs and conformance UpdateChildOutputs();
      v75(v126, &type metadata for UpdateChildOutputs, updated, v70, v71);
      if (v74 == PreferenceKeys.endIndex.getter())
        goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  v77 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v78 = v121;
  if ((v77 & 1) != 0 || v118 != v122)
  {
    v79 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v79;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v80 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v80;
    swift_retain();
    _ViewInputs.position.getter();
    v81 = AGCreateWeakAttribute();
    v82 = v81;
    v83 = HIDWORD(v81);
    v84 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v84;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v85 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v85;
    _ViewInputs.transform.getter();
    v86 = AGCreateWeakAttribute();
    v87 = v86;
    v88 = HIDWORD(v86);
    v89 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v89;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v90 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v90;
    v91 = _ViewInputs.weakScrollable.getter();
    v92 = v91;
    v93 = HIDWORD(v91);
    swift_beginAccess();
    v131 = *(_OWORD *)(v121 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    v124[0] = v82;
    v124[1] = v83;
    v124[2] = v87;
    v124[3] = v88;
    v124[4] = v92;
    v124[5] = v93;
    v125 = AGCreateWeakAttribute();
    swift_weakInit();
    if ((v77 & 1) != 0)
    {
      v94 = MEMORY[0x1E0CE0CA8];
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v95 = swift_allocObject();
      *(_OWORD *)(v95 + 16) = xmmword_187BF9830;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *(_QWORD *)(v95 + 56) = v96;
      *(_QWORD *)(v95 + 64) = lazy protocol witness table accessor for type IncrementalScrollable<LazyHGridLayout> and conformance IncrementalScrollable<A>();
      v97 = swift_allocObject();
      *(_QWORD *)(v95 + 32) = v97;
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, v97 + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
      *(_QWORD *)&v137[0] = v95;
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v94, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (uint64_t (*)(uint64_t))type metadata accessor for External<[Scrollable]>, MEMORY[0x1E0CFED00]);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v131) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v118 == v122)
    {
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
      swift_release();
    }
    else
    {
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
      *((_QWORD *)&v137[1] + 1) = v98;
      *(_QWORD *)&v137[2] = lazy protocol witness table accessor for type IncrementalScrollable<LazyHGridLayout> and conformance IncrementalScrollable<A>();
      *(_QWORD *)&v137[0] = swift_allocObject();
      outlined init with copy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, *(_QWORD *)&v137[0] + 16, &lazy cache variable for type metadata for IncrementalScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
      v99 = MEMORY[0x1E0CE4E20];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v99, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFECF8]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v137);
      v100 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(_QWORD *)&v131 = v127;
      DWORD2(v131) = v128;
      MEMORY[0x1E0C80A78](v100, v101);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v102 = *(_OWORD *)(v123 + 32);
      v103 = *(_OWORD *)(v123 + 64);
      v134 = *(_OWORD *)(v123 + 48);
      v135 = v103;
      v136 = *(_DWORD *)(v123 + 80);
      v104 = *(_OWORD *)(v123 + 16);
      v131 = *(_OWORD *)v123;
      v132 = v104;
      v133 = v102;
      outlined retain of _ViewInputs(v123);
      v105 = ScrollStateRequestTransform.init(collection:inputs:)();
      MEMORY[0x1E0C80A78](v105, v106);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v127);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      v78 = v121;
      outlined destroy of IncrementalScrollable<LazyVStackLayout>((uint64_t)v124, &lazy cache variable for type metadata for IncrementalScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v137);
    }
  }
  *(_QWORD *)&v137[0] = v127;
  DWORD2(v137[0]) = v128;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    swift_beginAccess();
    v108 = *(_DWORD *)(v78 + 128);
    v109 = *(_DWORD *)(v78 + 132);
    *(_QWORD *)&v131 = *(_QWORD *)(v78 + 120);
    v107 = v131;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v110 = _ViewOutputs.subscript.getter();
    *(_QWORD *)&v131 = v107;
    *((_QWORD *)&v131 + 1) = __PAIR64__(v109, v108);
    v111 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    v112 = *(_OWORD *)(v123 + 48);
    v137[2] = *(_OWORD *)(v123 + 32);
    v137[3] = v112;
    v137[4] = *(_OWORD *)(v123 + 64);
    LODWORD(v137[5]) = *(_DWORD *)(v123 + 80);
    v113 = *(_OWORD *)(v123 + 16);
    v137[0] = *(_OWORD *)v123;
    v137[1] = v113;
    if ((v110 & 0x100000000) != 0)
      LODWORD(v110) = v122;
    if ((v111 & 0x100000000) != 0)
      LODWORD(v111) = v122;
    v114 = *(_DWORD *)(v78 + 144);
    outlined retain of _ViewInputs(v123);
    specialized IncrementalFocusableFillerBoundsProvider.init(inputs:placedChildren:focusableBounds:nestedFillerBounds:)(v114, v110, v111, (uint64_t)&v131);
    v137[2] = v133;
    v137[3] = v134;
    *(_QWORD *)&v137[4] = v135;
    v137[0] = v131;
    v137[1] = v132;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type IncrementalFocusableFillerBoundsProvider and conformance IncrementalFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of IncrementalFocusableFillerBoundsProvider((uint64_t)&v131);
    swift_beginAccess();
    LOBYTE(v124[0]) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v143);
  outlined release of _ViewInputs(v123);
  lazy protocol witness table accessor for type IncrementalLayoutReuseIdleInput and conformance IncrementalLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v143);
  v115 = *(_QWORD *)&v137[0];
  v116 = BYTE8(v137[0]);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v116 & 1) == 0)
  {
    swift_beginAccess();
    *(_QWORD *)(v78 + 176) = v115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v78;
}

unint64_t lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout;
  if (!lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVGridLayout, &type metadata for LazyVGridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout;
  if (!lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVGridLayout, &type metadata for LazyVGridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout;
  if (!lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyVGridLayout, &type metadata for LazyVGridLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVGridLayout and conformance LazyVGridLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements;
  if (!lazy protocol witness table cache variable for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalCollectedPlacements, &type metadata for IncrementalCollectedPlacements);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements;
  if (!lazy protocol witness table cache variable for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalCollectedPlacements, &type metadata for IncrementalCollectedPlacements);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalCollectedPlacements and conformance IncrementalCollectedPlacements);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalChildPlacements<LazyVGridLayout> and conformance IncrementalChildPlacements<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalChildPlacements<LazyVGridLayout> and conformance IncrementalChildPlacements<A>;
  if (!lazy protocol witness table cache variable for type IncrementalChildPlacements<LazyVGridLayout> and conformance IncrementalChildPlacements<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalChildPlacements<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalChildPlacements<LazyVGridLayout> and conformance IncrementalChildPlacements<A>);
  }
  return result;
}

double specialized IncrementalChildPlacements.init(layout:cache:inputs:)@<D0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double result;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v29;
  __int128 v30;

  v29 = *MEMORY[0x1E0CFED28];
  v6 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 24);
  v30 = *MEMORY[0x1E0C9D628];
  v26 = _ViewInputs.size.getter();
  v25 = _ViewInputs.position.getter();
  v24 = _ViewInputs.transform.getter();
  v23 = _ViewInputs.environment.getter();
  v8 = _ViewInputs.weakScrollable.getter();
  v9 = v8;
  v10 = *(_QWORD *)a3;
  v22 = HIDWORD(v8);
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *(_QWORD *)(a3 + 16);
  v14 = *(_DWORD *)(a3 + 24);
  v13 = *(_DWORD *)(a3 + 28);
  v20 = *(_DWORD *)(a3 + 36);
  v21 = *(_DWORD *)(a3 + 32);
  v15 = *(_QWORD *)(a3 + 40);
  v19 = _GraphInputs.scrollPhaseState.getter();
  v16 = _ViewInputs.scrollableContainerSize.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined release of _ViewInputs(a3);
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v26;
  *(_DWORD *)(a4 + 8) = v25;
  *(_DWORD *)(a4 + 12) = v24;
  *(_DWORD *)(a4 + 16) = v23;
  *(_DWORD *)(a4 + 20) = a2;
  *(_DWORD *)(a4 + 24) = v9;
  *(_DWORD *)(a4 + 28) = v22;
  *(_DWORD *)(a4 + 32) = v19;
  *(_DWORD *)(a4 + 36) = v16;
  *(_DWORD *)(a4 + 40) = v29;
  *(_QWORD *)(a4 + 48) = v10;
  *(_DWORD *)(a4 + 56) = v11;
  *(_QWORD *)(a4 + 64) = v12;
  *(_DWORD *)(a4 + 72) = v14;
  *(_DWORD *)(a4 + 76) = v13;
  *(_DWORD *)(a4 + 80) = v21;
  *(_DWORD *)(a4 + 84) = v20;
  *(_QWORD *)(a4 + 88) = v15;
  *(_OWORD *)(a4 + 96) = v30;
  *(_QWORD *)(a4 + 112) = v6;
  *(_QWORD *)(a4 + 120) = v7;
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a4 + 128) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a4 + 136) = v17;
  *(_DWORD *)(a4 + 144) = 0;
  *(_BYTE *)(a4 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_BYTE *)(a4 + 304) = 1;
  *(_QWORD *)(a4 + 312) = 0;
  *(_QWORD *)(a4 + 320) = 0;
  *(_BYTE *)(a4 + 328) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutScrollableTransform and conformance LayoutScrollableTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutScrollableTransform and conformance LayoutScrollableTransform;
  if (!lazy protocol witness table cache variable for type LayoutScrollableTransform and conformance LayoutScrollableTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LayoutScrollableTransform, &unk_1E1AEA0C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutScrollableTransform and conformance LayoutScrollableTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IncrementalLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalLayoutComputer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalLayoutComputer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalLayoutComputer<LazyVGridLayout> and conformance IncrementalLayoutComputer<A>);
  }
  return result;
}

uint64_t outlined destroy of IncrementalScrollable<LazyVStackLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of IncrementalScrollable<LazyVStackLayout>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;

  type metadata accessor for VStack<TableHeaderViewCore>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalScrollable);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t destroy for IncrementalScrollable()
{
  return swift_weakDestroy();
}

_OWORD *initializeWithCopy for IncrementalScrollable(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_weakCopyInit();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateViewCache and conformance UpdateViewCache;
  if (!lazy protocol witness table cache variable for type UpdateViewCache and conformance UpdateViewCache)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateViewCache, &type metadata for UpdateViewCache);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateViewCache and conformance UpdateViewCache);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFED00], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityScrollableModifier> and conformance External<A>);
  }
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))
{
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  a3(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16));
  return AGGraphSetOutputValue();
}

{
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  a3(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

double ScrollViewContentFrame.value.getter@<D0>(int a1@<W2>, _OWORD *a2@<X8>)
{
  __int128 *Value;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  __int128 v10;
  double result;
  uint64_t v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;

  AGGraphGetValue();
  Value = (__int128 *)AGGraphGetValue();
  v5 = Value[1];
  v13 = *Value;
  v14 = v5;
  MEMORY[0x18D75BE3C]();
  CGSize.inset(by:)();
  if (*MEMORY[0x1E0CFED28] == a1)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v8 = (uint64_t *)AGGraphGetValue();
    v6 = *v8;
    v7 = v8[1];
    swift_retain();
  }
  v12[0] = v6;
  v12[1] = v7;
  v9 = (char *)AGGraphGetValue();
  static ScrollViewUtilities.contentFrame(in:contentComputer:axes:)(v12, *v9, (uint64_t)&v13);
  swift_release();
  AGGraphGetValue();
  ViewFrame.round(toMultipleOf:)();
  v10 = v14;
  *a2 = v13;
  a2[1] = v10;
  result = *(double *)&v15;
  a2[2] = v15;
  return result;
}

_BYTE *FlipForRTLFrame.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v5 = (uint64_t *)AGGraphGetValue();
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v14 = *v5;
  result = (_BYTE *)AGGraphGetValue();
  v11 = *result;
  if (v11 != 2)
  {
    result = (_BYTE *)AGGraphGetValue();
    if (((v11 & 1) == 0) != *result)
    {
      AGGraphGetValue();
      ViewFrame.round(toMultipleOf:)();
      result = (_BYTE *)ViewOrigin.init()();
      v3 = v12;
      v4 = v13;
      v6 = v14;
    }
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  return result;
}

uint64_t @objc ListCollectionViewCellBase.updateConfiguration(using:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v9;

  v2 = type metadata accessor for UICellConfigurationState();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = a1;
  ListCollectionViewCellBase.updateConfiguration(using:)((uint64_t)v6);

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t View.scrollIndicators(_:axes:)(_BYTE *a1, char a2, uint64_t a3)
{
  _BYTE v4[8];
  uint64_t v5;
  char v6;

  v4[0] = *a1;
  v5 = 0;
  v6 = a2;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for TransformScrollIndicators);
}

uint64_t specialized IncrementalChildPlacements.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t Value;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  __int128 *v25;
  __int128 v26;
  char v27;
  char v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OutputValue;
  BOOL v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double MaxY;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unsigned int CurrentAttribute;
  unsigned int v68;
  char v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  __int128 v102;
  CGFloat v103;
  double MaxX;
  int v105;
  double MinY;
  char v107;
  double MinX;
  double v109;
  __int128 v110;
  CGRect v111;
  _OWORD v112[14];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char *v120;
  __int128 v121;
  __int128 v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  _BYTE v127[32];
  CGFloat v128;
  CGFloat r2;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  __int128 v147;
  _OWORD v148[8];
  _OWORD v149[2];
  __int128 __src[21];
  _OWORD __dst[21];
  uint64_t v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;

  v1 = v0;
  v152 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    type metadata accessor for IncrementalLayoutViewCache();
    Value = AGGraphGetValue();
    v4 = *(_QWORD *)Value;
    v5 = *(_DWORD *)(*(_QWORD *)Value + 40);
    v6 = *(_QWORD *)(*(_QWORD *)Value + 48);
    v7 = *(_DWORD *)(*(_QWORD *)Value + 112);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(*(_QWORD *)Value + 32);
    DWORD2(__dst[0]) = v5;
    *(_QWORD *)&__dst[1] = v6;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v4 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v4 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v4 + 88);
    *((_QWORD *)&__dst[4] + 1) = *(_QWORD *)(v4 + 104);
    LODWORD(__dst[5]) = v7;
    _ViewInputs.viewPhase.getter();
    v8 = *(_DWORD *)AGGraphGetValue() >> 1;
    v9 = *(_DWORD *)(v0 + 144);
    if (v9 != v8)
    {
      v10 = (_OWORD *)MEMORY[0x1E0C9D628];
      *(_DWORD *)(v0 + 144) = v8;
      v11 = v10[1];
      *(_OWORD *)(v0 + 96) = *v10;
      *(_OWORD *)(v0 + 112) = v11;
      swift_bridgeObjectRelease();
      v12 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v1 + 128) = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v1 + 136) = v12;
      LOBYTE(__src[0]) = 1;
      v13 = *(_OWORD *)(v1 + 264);
      v14 = *(_OWORD *)(v1 + 280);
      __dst[6] = *(_OWORD *)(v1 + 248);
      __dst[7] = v13;
      __dst[8] = v14;
      *(_OWORD *)((char *)&__dst[8] + 9) = *(_OWORD *)(v1 + 289);
      v15 = *(_OWORD *)(v1 + 200);
      __dst[2] = *(_OWORD *)(v1 + 184);
      __dst[3] = v15;
      v16 = *(_OWORD *)(v1 + 232);
      __dst[4] = *(_OWORD *)(v1 + 216);
      __dst[5] = v16;
      v17 = *(_OWORD *)(v1 + 168);
      __dst[0] = *(_OWORD *)(v1 + 152);
      __dst[1] = v17;
      outlined release of PositionState((uint64_t)__dst);
      *(_BYTE *)(v1 + 152) = 0;
      *(_OWORD *)(v1 + 160) = 0u;
      *(_OWORD *)(v1 + 176) = 0u;
      *(_OWORD *)(v1 + 192) = 0u;
      *(_OWORD *)(v1 + 208) = 0u;
      *(_OWORD *)(v1 + 224) = 0u;
      *(_OWORD *)(v1 + 240) = 0u;
      *(_OWORD *)(v1 + 256) = 0u;
      *(_OWORD *)(v1 + 272) = 0u;
      *(_OWORD *)(v1 + 288) = 0u;
      *(_BYTE *)(v1 + 304) = __src[0];
    }
    v18 = *(_DWORD *)(v1 + 12);
    v19 = AGGraphGetValue();
    v107 = v20;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
    {
      __break(1u);
      goto LABEL_52;
    }
    v105 = v9;
    HIDWORD(v96) = v18;
    v95 = *MEMORY[0x1E0CFED28];
    v22 = *(_QWORD *)(v19 + 24);
    v21 = *(_QWORD *)(v19 + 32);
    v102 = *(_OWORD *)(v19 + 8);
    v23 = *(_QWORD *)v19;
    v24 = *(_DWORD *)(v1 + 36);
    swift_retain();
    LOBYTE(__dst[0]) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    *(_QWORD *)&v112[0] = *(_QWORD *)&__dst[0];
    *((_QWORD *)&v112[0] + 1) = __PAIR64__(v24, DWORD2(__dst[0]));
    LODWORD(v96) = *(_DWORD *)(v1 + 8);
    v148[0] = *(_OWORD *)AGGraphGetValue();
    v25 = (__int128 *)AGGraphGetValue();
    v26 = v25[1];
    __src[0] = *v25;
    __src[1] = v26;
    *(_QWORD *)&__dst[0] = v23;
    *(_OWORD *)((char *)__dst + 8) = v102;
    *((_QWORD *)&__dst[1] + 1) = v22;
    *(_QWORD *)&__dst[2] = v21;
    AGGraphGetValue();
    LOBYTE(v120) = *(_BYTE *)AGGraphGetValue();
    LODWORD(v113) = *(_DWORD *)(AGGraphGetValue() + 20);
    AGGraphGetValue();
    v27 = *(_BYTE *)AGGraphGetValue();
    swift_retain();
    _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v112, __src, (uint64_t)__dst, (char *)&v120, (int *)&v113, v27, (uint64_t)v127);
    v112[10] = v140;
    v112[11] = v141;
    v112[12] = v142;
    v112[13] = v143;
    v112[6] = v136;
    v112[7] = v137;
    v112[8] = v138;
    v112[9] = v139;
    v112[2] = v132;
    v112[3] = v133;
    v112[4] = v134;
    v112[5] = v135;
    v112[0] = v130;
    v112[1] = v131;
    v97 = v145;
    v98 = v144;
    v28 = v146;
    __dst[4] = v141;
    __dst[5] = v142;
    __dst[6] = v143;
    __dst[0] = v137;
    __dst[1] = v138;
    __dst[3] = v140;
    __dst[2] = v139;
    ScrollGeometry.visibleRect.getter();
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v111.origin.x = v29;
    v111.origin.y = v31;
    v111.size.width = v33;
    v111.size.height = v35;
    v117 = v134;
    v118 = v135;
    v119 = v136;
    v113 = v130;
    v114 = v131;
    v115 = v132;
    v116 = v133;
    __dst[4] = v134;
    __dst[5] = v135;
    __dst[6] = v136;
    __dst[0] = v130;
    __dst[1] = v131;
    __dst[3] = v133;
    __dst[2] = v132;
    if ((v28 & 1) != 0)
      ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v97, v98));
    ScrollGeometry.visibleRect.getter();
    v101 = v38;
    v103 = v37;
    v99 = v40;
    v100 = v39;
    __dst[4] = v134;
    __dst[5] = v135;
    __dst[6] = v136;
    __dst[0] = v130;
    __dst[1] = v131;
    __dst[3] = v133;
    __dst[2] = v132;
    ScrollGeometry.visibleRect.getter();
    v42 = v41;
    v44 = v43;
    v46 = v45;
    v48 = v47;
    OutputValue = AGGraphGetOutputValue();
    if (v105 != v8 || !OutputValue)
    {
      *(CGFloat *)(v1 + 160) = v30;
      *(CGFloat *)(v1 + 168) = v32;
      *(CGFloat *)(v1 + 176) = v34;
      *(CGFloat *)(v1 + 184) = v36;
      *(_QWORD *)(v1 + 192) = v42;
      *(_QWORD *)(v1 + 200) = v44;
      *(_QWORD *)(v1 + 208) = v46;
      *(_QWORD *)(v1 + 216) = v48;
    }
    *(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) = 0;
    if ((v107 & 1) != 0)
    {
      *(_QWORD *)(v1 + 312) = 0;
      *(_QWORD *)(v1 + 320) = 0;
      *(_BYTE *)(v1 + 328) = 1;
    }
    v166.origin.x = 0.0;
    v166.origin.y = 0.0;
    v166.size.width = 0.0;
    v166.size.height = 0.0;
    v153.origin.y = v101;
    v153.origin.x = v103;
    v153.size.height = v99;
    v153.size.width = v100;
    v50 = CGRectEqualToRect(v153, v166);
    v51 = *(double *)(v1 + 96);
    v52 = *(double *)(v1 + 104);
    v53 = *(double *)(v1 + 112);
    v54 = *(double *)(v1 + 120);
    v154.origin.x = v51;
    v154.origin.y = v52;
    v154.size.width = v53;
    v154.size.height = v54;
    if (!CGRectIsNull(v154))
    {
      *(_QWORD *)&__src[0] = v96;
      if ((AGGraphAnyInputsChanged() & 1) == 0)
      {
        __dst[4] = v134;
        __dst[5] = v135;
        __dst[6] = v136;
        __dst[0] = v130;
        __dst[1] = v131;
        __dst[3] = v133;
        __dst[2] = v132;
        if ((v28 & 1) != 0)
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v97, v98));
        ScrollGeometry.visibleRect.getter();
        v167.size.width = v128;
        v167.size.height = r2;
        v167.origin.x = 0.0;
        v167.origin.y = 0.0;
        v156 = CGRectIntersection(v155, v167);
        x = v156.origin.x;
        y = v156.origin.y;
        width = v156.size.width;
        height = v156.size.height;
        if (CGRectIsEmpty(v156))
        {
          if (v50)
          {
            v59 = 0;
            goto LABEL_42;
          }
          LOBYTE(v59) = 1;
          goto LABEL_37;
        }
        v157.origin.x = v51;
        v157.origin.y = v52;
        v157.size.width = v53;
        v157.size.height = v54;
        v168.origin.x = x;
        v168.origin.y = y;
        v168.size.width = width;
        v168.size.height = height;
        if (CGRectContainsRect(v157, v168))
        {
          v158.origin.x = x;
          v158.origin.y = y;
          v158.size.width = width;
          v158.size.height = height;
          MinX = CGRectGetMinX(v158);
          v159.origin.x = v51;
          v159.origin.y = v52;
          v159.size.width = v53;
          v159.size.height = v54;
          if (MinX - CGRectGetMinX(v159) < width / 3.0)
          {
            v60 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v60 + 216) & 2) == 0)
              *(_BYTE *)(*(_QWORD *)v60 + 216) |= 2u;
          }
          v109 = height / 3.0;
          v160.origin.x = v51;
          v160.origin.y = v52;
          v160.size.width = v53;
          v160.size.height = v54;
          MaxX = CGRectGetMaxX(v160);
          v161.origin.x = x;
          v161.origin.y = y;
          v161.size.width = width;
          v161.size.height = height;
          if (MaxX - CGRectGetMaxX(v161) < width / 3.0)
          {
            v61 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v61 + 216) & 8) == 0)
              *(_BYTE *)(*(_QWORD *)v61 + 216) |= 8u;
          }
          v162.origin.x = x;
          v162.origin.y = y;
          v162.size.width = width;
          v162.size.height = height;
          MinY = CGRectGetMinY(v162);
          v163.origin.x = v51;
          v163.origin.y = v52;
          v163.size.width = v53;
          v163.size.height = v54;
          if (MinY - CGRectGetMinY(v163) < v109)
          {
            v62 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v62 + 216) & 1) == 0)
              *(_BYTE *)(*(_QWORD *)v62 + 216) |= 1u;
          }
          v164.origin.x = v51;
          v164.origin.y = v52;
          v164.size.width = v53;
          v164.size.height = v54;
          MaxY = CGRectGetMaxY(v164);
          v165.origin.x = x;
          v165.origin.y = y;
          v165.size.width = width;
          v165.size.height = height;
          if (MaxY - CGRectGetMaxY(v165) < v109)
          {
            v64 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v64 + 216) & 4) == 0)
              *(_BYTE *)(*(_QWORD *)v64 + 216) |= 4u;
          }
          v59 = 0;
LABEL_42:
          v91 = *(_QWORD *)(v1 + 128);
          *(_QWORD *)&v148[0] = v91;
          if (*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 225) == 1 && (v92 = *(_DWORD *)(AGGraphGetValue() + 20)) != 0)
          {
            v93 = 2 * (v92 & 1u);
            v94 = v92 & 2;
            __src[4] = v117;
            __src[5] = v118;
            __src[6] = v119;
            __src[0] = v113;
            __src[1] = v114;
            __src[3] = v116;
            __src[2] = v115;
            swift_bridgeObjectRetain();
            Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v93, v94);
            v91 = *(_QWORD *)&v148[0];
          }
          else
          {
            if (!v59 && AGGraphGetOutputValue())
              goto LABEL_49;
            swift_bridgeObjectRetain();
          }
          *(_QWORD *)&__src[0] = v91;
          AGGraphSetOutputValue();
          swift_bridgeObjectRelease();
LABEL_49:
          specialized $defer #1 <A>() in IncrementalChildPlacements.updateValue()(v1, &v111, (uint64_t)v127);
          return swift_release();
        }
      }
    }
    v59 = 0;
    if (v50)
      goto LABEL_42;
LABEL_37:
    v65 = AGGraphGetValue();
    v66 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    v121 = *MEMORY[0x1E0C9D628];
    ++*(_DWORD *)(*(_QWORD *)v65 + 212);
    v120 = (char *)MEMORY[0x1E0DEE9D8];
    v122 = v66;
    v123 = 0;
    v125 = 0;
    v124 = 0;
    v126 = 0;
    if ((v59 & 1) != 0)
    {
      *(_OWORD *)(v1 + 96) = 0u;
      *(_OWORD *)(v1 + 112) = 0u;
    }
    else
    {
      specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)((uint64_t)v127, (uint64_t *)&v120, &v111);
    }
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute != v95)
    {
      v68 = CurrentAttribute;
      v69 = v126;
      v70 = *(char **)(v1 + 128);
      AGGraphGetValue();
      swift_retain();
      IncrementalLayoutViewCache.commitPlacedChildren(from:to:wasCancelled:context:)(v70, &v120, v69, v68);
      swift_release();
      v71 = v120;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v1 + 128) = v71;
      v72 = swift_bridgeObjectRetain();
      v73 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_So6CGRectVs5NeverOTg503_s7d4UI26fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_5918e812d1d562eb413ef1fedeeee4a2AhFTf3nnnpk_nTf1cn_n(v72);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v1 + 136) = v73;
      v74 = *(_DWORD *)(v1 + 40);
      v75 = *(_QWORD *)(v1 + 48);
      v76 = *(_DWORD *)(v1 + 56);
      v77 = *(_QWORD *)(v1 + 64);
      v78 = *(_QWORD *)(v1 + 88);
      v79 = *(_QWORD *)(v1 + 128);
      v80 = *(_DWORD *)(v1 + 144);
      v81 = *(_OWORD *)(v1 + 264);
      v148[6] = *(_OWORD *)(v1 + 248);
      v148[7] = v81;
      v82 = *(_OWORD *)(v1 + 264);
      v149[0] = *(_OWORD *)(v1 + 280);
      *(_OWORD *)((char *)v149 + 9) = *(_OWORD *)(v1 + 289);
      v83 = *(_OWORD *)(v1 + 200);
      v148[2] = *(_OWORD *)(v1 + 184);
      v148[3] = v83;
      v84 = *(_OWORD *)(v1 + 232);
      v148[4] = *(_OWORD *)(v1 + 216);
      v148[5] = v84;
      v85 = *(_OWORD *)(v1 + 168);
      v148[0] = *(_OWORD *)(v1 + 152);
      v148[1] = v85;
      v86 = *(_QWORD *)(v1 + 312);
      v87 = *(_QWORD *)(v1 + 320);
      v88 = *(_BYTE *)(v1 + 328);
      v110 = *(_OWORD *)(v1 + 16);
      __src[0] = *(_OWORD *)v1;
      __src[1] = v110;
      *(_QWORD *)&__src[2] = *(_QWORD *)(v1 + 32);
      DWORD2(__src[2]) = v74;
      *(_QWORD *)&__src[3] = v75;
      DWORD2(__src[3]) = v76;
      *(__int128 *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
      *(_QWORD *)&__src[4] = v77;
      *((_QWORD *)&__src[5] + 1) = v78;
      v89 = *(_OWORD *)(v1 + 112);
      __src[6] = *(_OWORD *)(v1 + 96);
      __src[7] = v89;
      *(_QWORD *)&__src[8] = v79;
      *((_QWORD *)&__src[8] + 1) = v73;
      LODWORD(__src[9]) = v80;
      v90 = *(_OWORD *)(v1 + 280);
      *(__int128 *)((char *)&__src[16] + 8) = v82;
      *(__int128 *)((char *)&__src[17] + 8) = v90;
      *(__int128 *)((char *)&__src[18] + 1) = *(_OWORD *)(v1 + 289);
      *(__int128 *)((char *)&__src[15] + 8) = *(_OWORD *)(v1 + 248);
      *(__int128 *)((char *)&__src[10] + 8) = *(_OWORD *)(v1 + 168);
      *(__int128 *)((char *)&__src[9] + 8) = *(_OWORD *)(v1 + 152);
      *(__int128 *)((char *)&__src[14] + 8) = *(_OWORD *)(v1 + 232);
      *(__int128 *)((char *)&__src[13] + 8) = *(_OWORD *)(v1 + 216);
      *(__int128 *)((char *)&__src[12] + 8) = *(_OWORD *)(v1 + 200);
      *(__int128 *)((char *)&__src[11] + 8) = *(_OWORD *)(v1 + 184);
      *((_QWORD *)&__src[19] + 1) = v86;
      *(_QWORD *)&__src[20] = v87;
      BYTE8(__src[20]) = v88;
      memcpy(__dst, __src, 0x149uLL);
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
      specialized IncrementalChildPlacements.mainID(children:)(v79, &v147);
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
      outlined release of PositionState((uint64_t)v148);
      *(_OWORD *)(v1 + 272) = v147;
      v59 = 1;
      goto LABEL_42;
    }
LABEL_52:
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  __int128 *v26;
  __int128 v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OutputValue;
  BOOL v53;
  int v54;
  _OWORD *v55;
  uint64_t v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  double MinX;
  uint64_t v64;
  double MaxX;
  uint64_t v66;
  double MinY;
  uint64_t v68;
  double MaxY;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  unsigned int CurrentAttribute;
  unsigned int v74;
  char v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  int v100;
  unint64_t v101;
  int v102;
  CGSize size;
  unint64_t v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  _OWORD *v114;
  char v115;
  int v116;
  double v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat rect;
  __int128 recta;
  __int128 v122;
  CGRect v123;
  _OWORD v124[14];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD v139[38];
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[2];
  __int128 __src[21];
  _OWORD v150[8];
  _OWORD v151[2];
  _OWORD __dst[21];
  uint64_t v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;

  v1 = v0;
  v153 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    v3 = *(_OWORD *)(v0 + 248);
    v4 = *(_OWORD *)(v0 + 200);
    v150[2] = *(_OWORD *)(v0 + 184);
    v150[3] = v4;
    v5 = *(_OWORD *)(v0 + 232);
    v150[4] = *(_OWORD *)(v0 + 216);
    v150[5] = v5;
    v6 = *(_OWORD *)(v0 + 168);
    v150[0] = *(_OWORD *)(v0 + 152);
    v150[1] = v6;
    v7 = *(_OWORD *)(v0 + 264);
    v8 = *(_OWORD *)(v0 + 280);
    v150[6] = v3;
    v150[7] = v7;
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_DWORD *)(v0 + 144);
    v151[0] = v8;
    v114 = (_OWORD *)(v0 + 152);
    *(_OWORD *)((char *)v151 + 9) = *(_OWORD *)(v0 + 289);
    type metadata accessor for IncrementalLayoutViewCache();
    Value = AGGraphGetValue();
    v12 = *(_QWORD *)Value;
    v13 = *(_DWORD *)(*(_QWORD *)Value + 40);
    v14 = *(_QWORD *)(*(_QWORD *)Value + 48);
    v15 = *(_DWORD *)(*(_QWORD *)Value + 112);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(*(_QWORD *)Value + 32);
    DWORD2(__dst[0]) = v13;
    *(_QWORD *)&__dst[1] = v14;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v12 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v12 + 88);
    *((_QWORD *)&__dst[4] + 1) = *(_QWORD *)(v12 + 104);
    LODWORD(__dst[5]) = v15;
    _ViewInputs.viewPhase.getter();
    v16 = *(_DWORD *)AGGraphGetValue() >> 1;
    v116 = v16;
    if (v10 != v16)
    {
      *(_DWORD *)(v0 + 144) = v16;
      v17 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v0 + 96) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v0 + 112) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v150);
      v9 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v0 + 128) = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v0 + 136) = v9;
      LOBYTE(__dst[0]) = 1;
      *(_BYTE *)(v0 + 152) = 0;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 288) = 0u;
      *(_BYTE *)(v0 + 304) = 1;
    }
    v19 = *(_DWORD *)(v0 + 8);
    v18 = *(_DWORD *)(v0 + 12);
    v20 = AGGraphGetValue();
    v115 = v21;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
    {
      __break(1u);
    }
    else
    {
      v106 = *MEMORY[0x1E0CFED28];
      v107 = v18;
      v108 = v9;
      v23 = *(_QWORD *)(v20 + 24);
      v22 = *(_QWORD *)(v20 + 32);
      v122 = *(_OWORD *)(v20 + 8);
      v24 = *(_QWORD *)v20;
      v25 = *(_DWORD *)(v0 + 36);
      swift_retain();
      LOBYTE(__dst[0]) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      *(_QWORD *)&v124[0] = *(_QWORD *)&__dst[0];
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v25, DWORD2(__dst[0]));
      v141[0] = *(_OWORD *)AGGraphGetValue();
      v26 = (__int128 *)AGGraphGetValue();
      v27 = v26[1];
      __src[0] = *v26;
      __src[1] = v27;
      *(_QWORD *)&__dst[0] = v24;
      *(_OWORD *)((char *)__dst + 8) = v122;
      *((_QWORD *)&__dst[1] + 1) = v23;
      *(_QWORD *)&__dst[2] = v22;
      AGGraphGetValue();
      LOBYTE(v132) = *(_BYTE *)AGGraphGetValue();
      LODWORD(v125) = *(_DWORD *)(AGGraphGetValue() + 28);
      v113 = *(double *)(v0 + 96);
      rect = *(double *)(v0 + 112);
      v118 = *(double *)(v0 + 104);
      v119 = *(double *)(v0 + 120);
      AGGraphGetValue();
      v28 = *(_BYTE *)AGGraphGetValue();
      swift_retain();
      _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v124, __src, (uint64_t)__dst, (char *)&v132, (int *)&v125, v28, (uint64_t)v139);
      v124[10] = *(_OWORD *)&v139[27];
      v124[11] = *(_OWORD *)&v139[29];
      v124[12] = *(_OWORD *)&v139[31];
      v124[13] = *(_OWORD *)&v139[33];
      v124[6] = *(_OWORD *)&v139[19];
      v124[7] = *(_OWORD *)&v139[21];
      v124[8] = *(_OWORD *)&v139[23];
      v124[9] = *(_OWORD *)&v139[25];
      v124[2] = *(_OWORD *)&v139[11];
      v124[3] = *(_OWORD *)&v139[13];
      v124[4] = *(_OWORD *)&v139[15];
      v124[5] = *(_OWORD *)&v139[17];
      v124[0] = *(_OWORD *)&v139[7];
      v124[1] = *(_OWORD *)&v139[9];
      v29 = v139[35];
      v30 = v139[36];
      v31 = v139[37];
      __dst[4] = *(_OWORD *)&v139[29];
      __dst[5] = *(_OWORD *)&v139[31];
      __dst[6] = *(_OWORD *)&v139[33];
      __dst[0] = *(_OWORD *)&v139[21];
      __dst[1] = *(_OWORD *)&v139[23];
      __dst[3] = *(_OWORD *)&v139[27];
      __dst[2] = *(_OWORD *)&v139[25];
      ScrollGeometry.visibleRect.getter();
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v39 = v38;
      v123.origin.x = v32;
      v123.origin.y = v34;
      v123.size.width = v36;
      v123.size.height = v38;
      v129 = *(_OWORD *)&v139[15];
      v130 = *(_OWORD *)&v139[17];
      v131 = *(_OWORD *)&v139[19];
      v125 = *(_OWORD *)&v139[7];
      v126 = *(_OWORD *)&v139[9];
      v127 = *(_OWORD *)&v139[11];
      v128 = *(_OWORD *)&v139[13];
      __dst[4] = *(_OWORD *)&v139[15];
      __dst[5] = *(_OWORD *)&v139[17];
      __dst[6] = *(_OWORD *)&v139[19];
      __dst[0] = *(_OWORD *)&v139[7];
      __dst[1] = *(_OWORD *)&v139[9];
      __dst[3] = *(_OWORD *)&v139[13];
      __dst[2] = *(_OWORD *)&v139[11];
      if ((v31 & 1) != 0)
        ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v30, v29));
      v104 = v30;
      v105 = v29;
      ScrollGeometry.visibleRect.getter();
      v111 = v41;
      v112 = v40;
      v109 = v43;
      v110 = v42;
      __dst[4] = *(_OWORD *)&v139[15];
      __dst[5] = *(_OWORD *)&v139[17];
      __dst[6] = *(_OWORD *)&v139[19];
      __dst[0] = *(_OWORD *)&v139[7];
      __dst[1] = *(_OWORD *)&v139[9];
      __dst[3] = *(_OWORD *)&v139[13];
      __dst[2] = *(_OWORD *)&v139[11];
      ScrollGeometry.visibleRect.getter();
      v45 = v44;
      v47 = v46;
      v49 = v48;
      v51 = v50;
      OutputValue = AGGraphGetOutputValue();
      if (v10 != v116 || !OutputValue)
      {
        *(CGFloat *)(v1 + 160) = v33;
        *(CGFloat *)(v1 + 168) = v35;
        *(CGFloat *)(v1 + 176) = v37;
        *(CGFloat *)(v1 + 184) = v39;
        *(_QWORD *)(v1 + 192) = v45;
        *(_QWORD *)(v1 + 200) = v47;
        *(_QWORD *)(v1 + 208) = v49;
        *(_QWORD *)(v1 + 216) = v51;
      }
      *(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) = 0;
      if ((v115 & 1) != 0)
      {
        *(_QWORD *)(v1 + 312) = 0;
        *(_QWORD *)(v1 + 320) = 0;
        *(_BYTE *)(v1 + 328) = 1;
      }
      v167.origin.x = 0.0;
      v167.origin.y = 0.0;
      v167.size.width = 0.0;
      v167.size.height = 0.0;
      v154.origin.y = v111;
      v154.origin.x = v112;
      v154.size.height = v109;
      v154.size.width = v110;
      v53 = CGRectEqualToRect(v154, v167);
      v155.origin.x = v113;
      v155.size.height = v119;
      v155.origin.y = v118;
      v155.size.width = rect;
      if (CGRectIsNull(v155) || (*(_QWORD *)&__src[0] = __PAIR64__(v107, v19), (AGGraphAnyInputsChanged() & 1) != 0))
      {
        v54 = 0;
        v55 = v114;
        if (v53)
          goto LABEL_16;
      }
      else
      {
        __dst[4] = *(_OWORD *)&v139[15];
        __dst[5] = *(_OWORD *)&v139[17];
        __dst[6] = *(_OWORD *)&v139[19];
        __dst[0] = *(_OWORD *)&v139[7];
        __dst[1] = *(_OWORD *)&v139[9];
        __dst[3] = *(_OWORD *)&v139[13];
        __dst[2] = *(_OWORD *)&v139[11];
        if ((v31 & 1) != 0)
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v104, v105));
        v57 = *(double *)&v139[4];
        v58 = *(double *)&v139[5];
        ScrollGeometry.visibleRect.getter();
        v168.origin.x = 0.0;
        v168.origin.y = 0.0;
        v168.size.width = v57;
        v168.size.height = v58;
        v157 = CGRectIntersection(v156, v168);
        x = v157.origin.x;
        y = v157.origin.y;
        width = v157.size.width;
        height = v157.size.height;
        v56 = v108;
        v55 = v114;
        if (CGRectIsEmpty(v157))
        {
          if (v53)
          {
            v54 = 0;
            goto LABEL_43;
          }
          v54 = 1;
        }
        else
        {
          v158.origin.x = v113;
          v158.origin.y = v118;
          v158.size.height = v119;
          v158.size.width = rect;
          v169.origin.x = x;
          v169.origin.y = y;
          v169.size.width = width;
          v169.size.height = height;
          if (CGRectContainsRect(v158, v169))
          {
            v159.origin.x = x;
            v159.origin.y = y;
            v159.size.width = width;
            v159.size.height = height;
            MinX = CGRectGetMinX(v159);
            v160.origin.x = v113;
            v160.origin.y = v118;
            v160.size.width = rect;
            v160.size.height = v119;
            if (MinX - CGRectGetMinX(v160) < width / 3.0)
            {
              v64 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v64 + 216) & 2) == 0)
                *(_BYTE *)(*(_QWORD *)v64 + 216) |= 2u;
            }
            v117 = height / 3.0;
            v161.origin.x = v113;
            v161.origin.y = v118;
            v161.size.width = rect;
            v161.size.height = v119;
            MaxX = CGRectGetMaxX(v161);
            v162.origin.x = x;
            v162.origin.y = y;
            v162.size.width = width;
            v162.size.height = height;
            if (MaxX - CGRectGetMaxX(v162) < width / 3.0)
            {
              v66 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v66 + 216) & 8) == 0)
                *(_BYTE *)(*(_QWORD *)v66 + 216) |= 8u;
            }
            v163.origin.x = x;
            v163.origin.y = y;
            v163.size.width = width;
            v163.size.height = height;
            MinY = CGRectGetMinY(v163);
            v164.origin.x = v113;
            v164.size.height = v119;
            v164.origin.y = v118;
            v164.size.width = rect;
            if (MinY - CGRectGetMinY(v164) < v117)
            {
              v68 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v68 + 216) & 1) == 0)
                *(_BYTE *)(*(_QWORD *)v68 + 216) |= 1u;
            }
            v165.origin.x = v113;
            v165.origin.y = v118;
            v165.size.width = rect;
            v165.size.height = v119;
            MaxY = CGRectGetMaxY(v165);
            v166.origin.x = x;
            v166.origin.y = y;
            v166.size.width = width;
            v166.size.height = height;
            if (MaxY - CGRectGetMaxY(v166) < v117)
            {
              v70 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v70 + 216) & 4) == 0)
                *(_BYTE *)(*(_QWORD *)v70 + 216) |= 4u;
            }
            v54 = 0;
LABEL_43:
            *(_QWORD *)&v141[0] = v56;
            if (*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 225) == 1
              && (v100 = *(_DWORD *)(AGGraphGetValue() + 28)) != 0)
            {
              v101 = 2 * (v100 & 1u);
              v102 = v100 & 2;
              __src[4] = v129;
              __src[5] = v130;
              __src[6] = v131;
              __src[0] = v125;
              __src[1] = v126;
              __src[3] = v128;
              __src[2] = v127;
              swift_bridgeObjectRetain();
              Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v101, v102);
              v56 = *(_QWORD *)&v141[0];
            }
            else
            {
              if (!v54 && AGGraphGetOutputValue())
                goto LABEL_50;
              swift_bridgeObjectRetain();
            }
            *(_QWORD *)&__src[0] = v56;
            AGGraphSetOutputValue();
            swift_bridgeObjectRelease();
LABEL_50:
            size = v123.size;
            *(CGPoint *)(v1 + 160) = v123.origin;
            *(CGSize *)(v1 + 176) = size;
            memcpy(__src, v139, 0x129uLL);
            PositionState.update(context:)((uint64_t)__src);
            return swift_release();
          }
          v54 = 0;
          if (v53)
          {
LABEL_16:
            v56 = v108;
            goto LABEL_43;
          }
        }
      }
      v71 = AGGraphGetValue();
      v72 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      v133 = *MEMORY[0x1E0C9D628];
      ++*(_DWORD *)(*(_QWORD *)v71 + 212);
      v132 = (char *)MEMORY[0x1E0DEE9D8];
      v134 = v72;
      v135 = 0;
      v137 = 0;
      v136 = 0;
      v138 = 0;
      if (v54)
      {
        *(_OWORD *)(v1 + 96) = 0u;
        *(_OWORD *)(v1 + 112) = 0u;
      }
      else
      {
        specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)((uint64_t)v139, (uint64_t)&v132, &v123);
      }
      CurrentAttribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v106)
      {
        v74 = CurrentAttribute;
        v75 = v138;
        v76 = *(char **)(v1 + 128);
        AGGraphGetValue();
        swift_retain();
        IncrementalLayoutViewCache.commitPlacedChildren(from:to:wasCancelled:context:)(v76, &v132, v75, v74);
        swift_release();
        v77 = v132;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v1 + 128) = v77;
        v78 = swift_bridgeObjectRetain();
        v79 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_So6CGRectVs5NeverOTg503_s7d4UI26fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_5918e812d1d562eb413ef1fedeeee4a2AhFTf3nnnpk_nTf1cn_n(v78);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v80 = v55[7];
        v81 = v55[5];
        v146 = v55[6];
        v147 = v80;
        v82 = v55[7];
        v148[0] = v55[8];
        *(_OWORD *)((char *)v148 + 9) = *(_OWORD *)((char *)v55 + 137);
        v83 = v55[3];
        v84 = v55[1];
        v142 = v55[2];
        v143 = v83;
        v85 = v55[3];
        v86 = v55[5];
        v144 = v55[4];
        v145 = v86;
        v87 = v55[1];
        v141[0] = *v55;
        v88 = v141[0];
        v141[1] = v87;
        *(_QWORD *)&__src[2] = *(_QWORD *)(v1 + 32);
        *(__int128 *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
        v89 = *(_OWORD *)(v1 + 112);
        __src[6] = *(_OWORD *)(v1 + 96);
        __src[7] = v89;
        v90 = v55[8];
        *(__int128 *)((char *)&__src[16] + 8) = v82;
        *(__int128 *)((char *)&__src[17] + 8) = v90;
        *(__int128 *)((char *)&__src[18] + 1) = *(_OWORD *)((char *)v55 + 137);
        *(__int128 *)((char *)&__src[15] + 8) = v146;
        *(__int128 *)((char *)&__src[11] + 8) = v142;
        *(__int128 *)((char *)&__src[12] + 8) = v85;
        *(__int128 *)((char *)&__src[13] + 8) = v144;
        *(_QWORD *)(v1 + 136) = v79;
        v91 = *(_DWORD *)(v1 + 40);
        v92 = *(_QWORD *)(v1 + 48);
        v93 = *(_DWORD *)(v1 + 56);
        v94 = *(_QWORD *)(v1 + 64);
        v95 = *(_QWORD *)(v1 + 88);
        v56 = *(_QWORD *)(v1 + 128);
        v96 = *(_DWORD *)(v1 + 144);
        v97 = *(_QWORD *)(v1 + 312);
        v98 = *(_QWORD *)(v1 + 320);
        v99 = *(_BYTE *)(v1 + 328);
        *(__int128 *)((char *)&__src[14] + 8) = v81;
        *(__int128 *)((char *)&__src[9] + 8) = v88;
        recta = *(_OWORD *)(v1 + 16);
        __src[0] = *(_OWORD *)v1;
        __src[1] = recta;
        DWORD2(__src[2]) = v91;
        *(_QWORD *)&__src[3] = v92;
        DWORD2(__src[3]) = v93;
        *(_QWORD *)&__src[4] = v94;
        *((_QWORD *)&__src[5] + 1) = v95;
        *(_QWORD *)&__src[8] = v56;
        *((_QWORD *)&__src[8] + 1) = v79;
        LODWORD(__src[9]) = v96;
        *(__int128 *)((char *)&__src[10] + 8) = v84;
        *((_QWORD *)&__src[19] + 1) = v97;
        *(_QWORD *)&__src[20] = v98;
        BYTE8(__src[20]) = v99;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        specialized IncrementalChildPlacements.mainID(children:)(v56, dword_1E1AEEDE8, &dword_1E1AEEDE8[1], dword_1E1AEEDC0, &dword_1E1AEEDC0[1], &v140);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v141);
        *(_OWORD *)(v1 + 272) = v140;
        v54 = 1;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  __int128 *v26;
  __int128 v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OutputValue;
  BOOL v53;
  int v54;
  _OWORD *v55;
  uint64_t v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  double MinX;
  uint64_t v64;
  double MaxX;
  uint64_t v66;
  double MinY;
  uint64_t v68;
  double MaxY;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  unsigned int CurrentAttribute;
  unsigned int v74;
  char v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  CGSize size;
  unint64_t v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  _OWORD *v114;
  char v115;
  int v116;
  double v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat rect;
  __int128 recta;
  __int128 v122;
  CGRect v123;
  _OWORD v124[14];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD v139[38];
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[2];
  __int128 __src[21];
  _OWORD v150[8];
  _OWORD v151[2];
  _OWORD __dst[21];
  uint64_t v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;

  v1 = v0;
  v153 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    v3 = *(_OWORD *)(v0 + 248);
    v4 = *(_OWORD *)(v0 + 200);
    v150[2] = *(_OWORD *)(v0 + 184);
    v150[3] = v4;
    v5 = *(_OWORD *)(v0 + 232);
    v150[4] = *(_OWORD *)(v0 + 216);
    v150[5] = v5;
    v6 = *(_OWORD *)(v0 + 168);
    v150[0] = *(_OWORD *)(v0 + 152);
    v150[1] = v6;
    v7 = *(_OWORD *)(v0 + 264);
    v8 = *(_OWORD *)(v0 + 280);
    v150[6] = v3;
    v150[7] = v7;
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_DWORD *)(v0 + 144);
    v151[0] = v8;
    v114 = (_OWORD *)(v0 + 152);
    *(_OWORD *)((char *)v151 + 9) = *(_OWORD *)(v0 + 289);
    type metadata accessor for IncrementalLayoutViewCache();
    Value = AGGraphGetValue();
    v12 = *(_QWORD *)Value;
    v13 = *(_DWORD *)(*(_QWORD *)Value + 40);
    v14 = *(_QWORD *)(*(_QWORD *)Value + 48);
    v15 = *(_DWORD *)(*(_QWORD *)Value + 112);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(*(_QWORD *)Value + 32);
    DWORD2(__dst[0]) = v13;
    *(_QWORD *)&__dst[1] = v14;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v12 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v12 + 88);
    *((_QWORD *)&__dst[4] + 1) = *(_QWORD *)(v12 + 104);
    LODWORD(__dst[5]) = v15;
    _ViewInputs.viewPhase.getter();
    v16 = *(_DWORD *)AGGraphGetValue() >> 1;
    v116 = v16;
    if (v10 != v16)
    {
      *(_DWORD *)(v0 + 144) = v16;
      v17 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v0 + 96) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v0 + 112) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v150);
      v9 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v0 + 128) = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v0 + 136) = v9;
      LOBYTE(__dst[0]) = 1;
      *(_BYTE *)(v0 + 152) = 0;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 288) = 0u;
      *(_BYTE *)(v0 + 304) = 1;
    }
    v19 = *(_DWORD *)(v0 + 8);
    v18 = *(_DWORD *)(v0 + 12);
    v20 = AGGraphGetValue();
    v115 = v21;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
    {
      __break(1u);
    }
    else
    {
      v106 = *MEMORY[0x1E0CFED28];
      v107 = v18;
      v108 = v9;
      v23 = *(_QWORD *)(v20 + 24);
      v22 = *(_QWORD *)(v20 + 32);
      v122 = *(_OWORD *)(v20 + 8);
      v24 = *(_QWORD *)v20;
      v25 = *(_DWORD *)(v0 + 36);
      swift_retain();
      LOBYTE(__dst[0]) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      *(_QWORD *)&v124[0] = *(_QWORD *)&__dst[0];
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v25, DWORD2(__dst[0]));
      v141[0] = *(_OWORD *)AGGraphGetValue();
      v26 = (__int128 *)AGGraphGetValue();
      v27 = v26[1];
      __src[0] = *v26;
      __src[1] = v27;
      *(_QWORD *)&__dst[0] = v24;
      *(_OWORD *)((char *)__dst + 8) = v122;
      *((_QWORD *)&__dst[1] + 1) = v23;
      *(_QWORD *)&__dst[2] = v22;
      AGGraphGetValue();
      LOBYTE(v132) = *(_BYTE *)AGGraphGetValue();
      LODWORD(v125) = *(_DWORD *)(AGGraphGetValue() + 20);
      v113 = *(double *)(v0 + 96);
      rect = *(double *)(v0 + 112);
      v118 = *(double *)(v0 + 104);
      v119 = *(double *)(v0 + 120);
      AGGraphGetValue();
      v28 = *(_BYTE *)AGGraphGetValue();
      swift_retain();
      _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v124, __src, (uint64_t)__dst, (char *)&v132, (int *)&v125, v28, (uint64_t)v139);
      v124[10] = *(_OWORD *)&v139[27];
      v124[11] = *(_OWORD *)&v139[29];
      v124[12] = *(_OWORD *)&v139[31];
      v124[13] = *(_OWORD *)&v139[33];
      v124[6] = *(_OWORD *)&v139[19];
      v124[7] = *(_OWORD *)&v139[21];
      v124[8] = *(_OWORD *)&v139[23];
      v124[9] = *(_OWORD *)&v139[25];
      v124[2] = *(_OWORD *)&v139[11];
      v124[3] = *(_OWORD *)&v139[13];
      v124[4] = *(_OWORD *)&v139[15];
      v124[5] = *(_OWORD *)&v139[17];
      v124[0] = *(_OWORD *)&v139[7];
      v124[1] = *(_OWORD *)&v139[9];
      v29 = v139[35];
      v30 = v139[36];
      v31 = v139[37];
      __dst[4] = *(_OWORD *)&v139[29];
      __dst[5] = *(_OWORD *)&v139[31];
      __dst[6] = *(_OWORD *)&v139[33];
      __dst[0] = *(_OWORD *)&v139[21];
      __dst[1] = *(_OWORD *)&v139[23];
      __dst[3] = *(_OWORD *)&v139[27];
      __dst[2] = *(_OWORD *)&v139[25];
      ScrollGeometry.visibleRect.getter();
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v39 = v38;
      v123.origin.x = v32;
      v123.origin.y = v34;
      v123.size.width = v36;
      v123.size.height = v38;
      v129 = *(_OWORD *)&v139[15];
      v130 = *(_OWORD *)&v139[17];
      v131 = *(_OWORD *)&v139[19];
      v125 = *(_OWORD *)&v139[7];
      v126 = *(_OWORD *)&v139[9];
      v127 = *(_OWORD *)&v139[11];
      v128 = *(_OWORD *)&v139[13];
      __dst[4] = *(_OWORD *)&v139[15];
      __dst[5] = *(_OWORD *)&v139[17];
      __dst[6] = *(_OWORD *)&v139[19];
      __dst[0] = *(_OWORD *)&v139[7];
      __dst[1] = *(_OWORD *)&v139[9];
      __dst[3] = *(_OWORD *)&v139[13];
      __dst[2] = *(_OWORD *)&v139[11];
      if ((v31 & 1) != 0)
        ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v30, v29));
      v104 = v30;
      v105 = v29;
      ScrollGeometry.visibleRect.getter();
      v111 = v41;
      v112 = v40;
      v109 = v43;
      v110 = v42;
      __dst[4] = *(_OWORD *)&v139[15];
      __dst[5] = *(_OWORD *)&v139[17];
      __dst[6] = *(_OWORD *)&v139[19];
      __dst[0] = *(_OWORD *)&v139[7];
      __dst[1] = *(_OWORD *)&v139[9];
      __dst[3] = *(_OWORD *)&v139[13];
      __dst[2] = *(_OWORD *)&v139[11];
      ScrollGeometry.visibleRect.getter();
      v45 = v44;
      v47 = v46;
      v49 = v48;
      v51 = v50;
      OutputValue = AGGraphGetOutputValue();
      if (v10 != v116 || !OutputValue)
      {
        *(CGFloat *)(v1 + 160) = v33;
        *(CGFloat *)(v1 + 168) = v35;
        *(CGFloat *)(v1 + 176) = v37;
        *(CGFloat *)(v1 + 184) = v39;
        *(_QWORD *)(v1 + 192) = v45;
        *(_QWORD *)(v1 + 200) = v47;
        *(_QWORD *)(v1 + 208) = v49;
        *(_QWORD *)(v1 + 216) = v51;
      }
      *(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) = 0;
      if ((v115 & 1) != 0)
      {
        *(_QWORD *)(v1 + 312) = 0;
        *(_QWORD *)(v1 + 320) = 0;
        *(_BYTE *)(v1 + 328) = 1;
      }
      v167.origin.x = 0.0;
      v167.origin.y = 0.0;
      v167.size.width = 0.0;
      v167.size.height = 0.0;
      v154.origin.y = v111;
      v154.origin.x = v112;
      v154.size.height = v109;
      v154.size.width = v110;
      v53 = CGRectEqualToRect(v154, v167);
      v155.origin.x = v113;
      v155.size.height = v119;
      v155.origin.y = v118;
      v155.size.width = rect;
      if (CGRectIsNull(v155) || (*(_QWORD *)&__src[0] = __PAIR64__(v107, v19), (AGGraphAnyInputsChanged() & 1) != 0))
      {
        v54 = 0;
        v55 = v114;
        if (v53)
          goto LABEL_16;
      }
      else
      {
        __dst[4] = *(_OWORD *)&v139[15];
        __dst[5] = *(_OWORD *)&v139[17];
        __dst[6] = *(_OWORD *)&v139[19];
        __dst[0] = *(_OWORD *)&v139[7];
        __dst[1] = *(_OWORD *)&v139[9];
        __dst[3] = *(_OWORD *)&v139[13];
        __dst[2] = *(_OWORD *)&v139[11];
        if ((v31 & 1) != 0)
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v104, v105));
        v57 = *(double *)&v139[4];
        v58 = *(double *)&v139[5];
        ScrollGeometry.visibleRect.getter();
        v168.origin.x = 0.0;
        v168.origin.y = 0.0;
        v168.size.width = v57;
        v168.size.height = v58;
        v157 = CGRectIntersection(v156, v168);
        x = v157.origin.x;
        y = v157.origin.y;
        width = v157.size.width;
        height = v157.size.height;
        v56 = v108;
        v55 = v114;
        if (CGRectIsEmpty(v157))
        {
          if (v53)
          {
            v54 = 0;
            goto LABEL_43;
          }
          v54 = 1;
        }
        else
        {
          v158.origin.x = v113;
          v158.origin.y = v118;
          v158.size.height = v119;
          v158.size.width = rect;
          v169.origin.x = x;
          v169.origin.y = y;
          v169.size.width = width;
          v169.size.height = height;
          if (CGRectContainsRect(v158, v169))
          {
            v159.origin.x = x;
            v159.origin.y = y;
            v159.size.width = width;
            v159.size.height = height;
            MinX = CGRectGetMinX(v159);
            v160.origin.x = v113;
            v160.origin.y = v118;
            v160.size.width = rect;
            v160.size.height = v119;
            if (MinX - CGRectGetMinX(v160) < width / 3.0)
            {
              v64 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v64 + 216) & 2) == 0)
                *(_BYTE *)(*(_QWORD *)v64 + 216) |= 2u;
            }
            v117 = height / 3.0;
            v161.origin.x = v113;
            v161.origin.y = v118;
            v161.size.width = rect;
            v161.size.height = v119;
            MaxX = CGRectGetMaxX(v161);
            v162.origin.x = x;
            v162.origin.y = y;
            v162.size.width = width;
            v162.size.height = height;
            if (MaxX - CGRectGetMaxX(v162) < width / 3.0)
            {
              v66 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v66 + 216) & 8) == 0)
                *(_BYTE *)(*(_QWORD *)v66 + 216) |= 8u;
            }
            v163.origin.x = x;
            v163.origin.y = y;
            v163.size.width = width;
            v163.size.height = height;
            MinY = CGRectGetMinY(v163);
            v164.origin.x = v113;
            v164.size.height = v119;
            v164.origin.y = v118;
            v164.size.width = rect;
            if (MinY - CGRectGetMinY(v164) < v117)
            {
              v68 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v68 + 216) & 1) == 0)
                *(_BYTE *)(*(_QWORD *)v68 + 216) |= 1u;
            }
            v165.origin.x = v113;
            v165.origin.y = v118;
            v165.size.width = rect;
            v165.size.height = v119;
            MaxY = CGRectGetMaxY(v165);
            v166.origin.x = x;
            v166.origin.y = y;
            v166.size.width = width;
            v166.size.height = height;
            if (MaxY - CGRectGetMaxY(v166) < v117)
            {
              v70 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v70 + 216) & 4) == 0)
                *(_BYTE *)(*(_QWORD *)v70 + 216) |= 4u;
            }
            v54 = 0;
LABEL_43:
            *(_QWORD *)&v141[0] = v56;
            if (*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 225) == 1
              && (v100 = *(_DWORD *)(AGGraphGetValue() + 20)) != 0)
            {
              v101 = v100 & 1;
              v102 = (v100 >> 1) & 1;
              __src[4] = v129;
              __src[5] = v130;
              __src[6] = v131;
              __src[0] = v125;
              __src[1] = v126;
              __src[3] = v128;
              __src[2] = v127;
              swift_bridgeObjectRetain();
              Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v101, v102);
              v56 = *(_QWORD *)&v141[0];
            }
            else
            {
              if (!v54 && AGGraphGetOutputValue())
                goto LABEL_50;
              swift_bridgeObjectRetain();
            }
            *(_QWORD *)&__src[0] = v56;
            AGGraphSetOutputValue();
            swift_bridgeObjectRelease();
LABEL_50:
            size = v123.size;
            *(CGPoint *)(v1 + 160) = v123.origin;
            *(CGSize *)(v1 + 176) = size;
            memcpy(__src, v139, 0x129uLL);
            PositionState.update(context:)((uint64_t)__src);
            return swift_release();
          }
          v54 = 0;
          if (v53)
          {
LABEL_16:
            v56 = v108;
            goto LABEL_43;
          }
        }
      }
      v71 = AGGraphGetValue();
      v72 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      v133 = *MEMORY[0x1E0C9D628];
      ++*(_DWORD *)(*(_QWORD *)v71 + 212);
      v132 = (char *)MEMORY[0x1E0DEE9D8];
      v134 = v72;
      v135 = 0;
      v137 = 0;
      v136 = 0;
      v138 = 0;
      if (v54)
      {
        *(_OWORD *)(v1 + 96) = 0u;
        *(_OWORD *)(v1 + 112) = 0u;
      }
      else
      {
        specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)((uint64_t)v139, (uint64_t)&v132, &v123);
      }
      CurrentAttribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v106)
      {
        v74 = CurrentAttribute;
        v75 = v138;
        v76 = *(char **)(v1 + 128);
        AGGraphGetValue();
        swift_retain();
        IncrementalLayoutViewCache.commitPlacedChildren(from:to:wasCancelled:context:)(v76, &v132, v75, v74);
        swift_release();
        v77 = v132;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v1 + 128) = v77;
        v78 = swift_bridgeObjectRetain();
        v79 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_So6CGRectVs5NeverOTg503_s7d4UI26fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_5918e812d1d562eb413ef1fedeeee4a2AhFTf3nnnpk_nTf1cn_n(v78);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v80 = v55[7];
        v81 = v55[5];
        v146 = v55[6];
        v147 = v80;
        v82 = v55[7];
        v148[0] = v55[8];
        *(_OWORD *)((char *)v148 + 9) = *(_OWORD *)((char *)v55 + 137);
        v83 = v55[3];
        v84 = v55[1];
        v142 = v55[2];
        v143 = v83;
        v85 = v55[3];
        v86 = v55[5];
        v144 = v55[4];
        v145 = v86;
        v87 = v55[1];
        v141[0] = *v55;
        v88 = v141[0];
        v141[1] = v87;
        *(_QWORD *)&__src[2] = *(_QWORD *)(v1 + 32);
        *(__int128 *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
        v89 = *(_OWORD *)(v1 + 112);
        __src[6] = *(_OWORD *)(v1 + 96);
        __src[7] = v89;
        v90 = v55[8];
        *(__int128 *)((char *)&__src[16] + 8) = v82;
        *(__int128 *)((char *)&__src[17] + 8) = v90;
        *(__int128 *)((char *)&__src[18] + 1) = *(_OWORD *)((char *)v55 + 137);
        *(__int128 *)((char *)&__src[15] + 8) = v146;
        *(__int128 *)((char *)&__src[11] + 8) = v142;
        *(__int128 *)((char *)&__src[12] + 8) = v85;
        *(__int128 *)((char *)&__src[13] + 8) = v144;
        *(_QWORD *)(v1 + 136) = v79;
        v91 = *(_DWORD *)(v1 + 40);
        v92 = *(_QWORD *)(v1 + 48);
        v93 = *(_DWORD *)(v1 + 56);
        v94 = *(_QWORD *)(v1 + 64);
        v95 = *(_QWORD *)(v1 + 88);
        v56 = *(_QWORD *)(v1 + 128);
        v96 = *(_DWORD *)(v1 + 144);
        v97 = *(_QWORD *)(v1 + 312);
        v98 = *(_QWORD *)(v1 + 320);
        v99 = *(_BYTE *)(v1 + 328);
        *(__int128 *)((char *)&__src[14] + 8) = v81;
        *(__int128 *)((char *)&__src[9] + 8) = v88;
        recta = *(_OWORD *)(v1 + 16);
        __src[0] = *(_OWORD *)v1;
        __src[1] = recta;
        DWORD2(__src[2]) = v91;
        *(_QWORD *)&__src[3] = v92;
        DWORD2(__src[3]) = v93;
        *(_QWORD *)&__src[4] = v94;
        *((_QWORD *)&__src[5] + 1) = v95;
        *(_QWORD *)&__src[8] = v56;
        *((_QWORD *)&__src[8] + 1) = v79;
        LODWORD(__src[9]) = v96;
        *(__int128 *)((char *)&__src[10] + 8) = v84;
        *((_QWORD *)&__src[19] + 1) = v97;
        *(_QWORD *)&__src[20] = v98;
        BYTE8(__src[20]) = v99;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        specialized IncrementalChildPlacements.mainID(children:)(v56, dword_1E1AEEC58, &dword_1E1AEEC58[1], dword_1E1AEEC30, &dword_1E1AEEC30[1], &v140);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v141);
        *(_OWORD *)(v1 + 272) = v140;
        v54 = 1;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  __int128 *v26;
  __int128 v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t OutputValue;
  BOOL v53;
  int v54;
  _OWORD *v55;
  uint64_t v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  double MinX;
  uint64_t v64;
  double MaxX;
  uint64_t v66;
  double MinY;
  uint64_t v68;
  double MaxY;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  unsigned int CurrentAttribute;
  unsigned int v74;
  char v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  int v102;
  CGSize size;
  unint64_t v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  _OWORD *v114;
  char v115;
  int v116;
  double v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat rect;
  __int128 recta;
  __int128 v122;
  CGRect v123;
  _OWORD v124[14];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD v139[38];
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _OWORD v148[2];
  __int128 __src[21];
  _OWORD v150[8];
  _OWORD v151[2];
  _OWORD __dst[21];
  uint64_t v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;

  v1 = v0;
  v153 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    v3 = *(_OWORD *)(v0 + 248);
    v4 = *(_OWORD *)(v0 + 200);
    v150[2] = *(_OWORD *)(v0 + 184);
    v150[3] = v4;
    v5 = *(_OWORD *)(v0 + 232);
    v150[4] = *(_OWORD *)(v0 + 216);
    v150[5] = v5;
    v6 = *(_OWORD *)(v0 + 168);
    v150[0] = *(_OWORD *)(v0 + 152);
    v150[1] = v6;
    v7 = *(_OWORD *)(v0 + 264);
    v8 = *(_OWORD *)(v0 + 280);
    v150[6] = v3;
    v150[7] = v7;
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_DWORD *)(v0 + 144);
    v151[0] = v8;
    v114 = (_OWORD *)(v0 + 152);
    *(_OWORD *)((char *)v151 + 9) = *(_OWORD *)(v0 + 289);
    type metadata accessor for IncrementalLayoutViewCache();
    Value = AGGraphGetValue();
    v12 = *(_QWORD *)Value;
    v13 = *(_DWORD *)(*(_QWORD *)Value + 40);
    v14 = *(_QWORD *)(*(_QWORD *)Value + 48);
    v15 = *(_DWORD *)(*(_QWORD *)Value + 112);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(*(_QWORD *)Value + 32);
    DWORD2(__dst[0]) = v13;
    *(_QWORD *)&__dst[1] = v14;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v12 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v12 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v12 + 88);
    *((_QWORD *)&__dst[4] + 1) = *(_QWORD *)(v12 + 104);
    LODWORD(__dst[5]) = v15;
    _ViewInputs.viewPhase.getter();
    v16 = *(_DWORD *)AGGraphGetValue() >> 1;
    v116 = v16;
    if (v10 != v16)
    {
      *(_DWORD *)(v0 + 144) = v16;
      v17 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v0 + 96) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v0 + 112) = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v150);
      v9 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v0 + 128) = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v0 + 136) = v9;
      LOBYTE(__dst[0]) = 1;
      *(_BYTE *)(v0 + 152) = 0;
      *(_OWORD *)(v0 + 160) = 0u;
      *(_OWORD *)(v0 + 176) = 0u;
      *(_OWORD *)(v0 + 192) = 0u;
      *(_OWORD *)(v0 + 208) = 0u;
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *(_OWORD *)(v0 + 256) = 0u;
      *(_OWORD *)(v0 + 272) = 0u;
      *(_OWORD *)(v0 + 288) = 0u;
      *(_BYTE *)(v0 + 304) = 1;
    }
    v19 = *(_DWORD *)(v0 + 8);
    v18 = *(_DWORD *)(v0 + 12);
    v20 = AGGraphGetValue();
    v115 = v21;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
    {
      __break(1u);
    }
    else
    {
      v106 = *MEMORY[0x1E0CFED28];
      v107 = v18;
      v108 = v9;
      v23 = *(_QWORD *)(v20 + 24);
      v22 = *(_QWORD *)(v20 + 32);
      v122 = *(_OWORD *)(v20 + 8);
      v24 = *(_QWORD *)v20;
      v25 = *(_DWORD *)(v0 + 36);
      swift_retain();
      LOBYTE(__dst[0]) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      *(_QWORD *)&v124[0] = *(_QWORD *)&__dst[0];
      *((_QWORD *)&v124[0] + 1) = __PAIR64__(v25, DWORD2(__dst[0]));
      v141[0] = *(_OWORD *)AGGraphGetValue();
      v26 = (__int128 *)AGGraphGetValue();
      v27 = v26[1];
      __src[0] = *v26;
      __src[1] = v27;
      *(_QWORD *)&__dst[0] = v24;
      *(_OWORD *)((char *)__dst + 8) = v122;
      *((_QWORD *)&__dst[1] + 1) = v23;
      *(_QWORD *)&__dst[2] = v22;
      AGGraphGetValue();
      LOBYTE(v132) = *(_BYTE *)AGGraphGetValue();
      LODWORD(v125) = *(_DWORD *)(AGGraphGetValue() + 28);
      v113 = *(double *)(v0 + 96);
      rect = *(double *)(v0 + 112);
      v118 = *(double *)(v0 + 104);
      v119 = *(double *)(v0 + 120);
      AGGraphGetValue();
      v28 = *(_BYTE *)AGGraphGetValue();
      swift_retain();
      _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v124, __src, (uint64_t)__dst, (char *)&v132, (int *)&v125, v28, (uint64_t)v139);
      v124[10] = *(_OWORD *)&v139[27];
      v124[11] = *(_OWORD *)&v139[29];
      v124[12] = *(_OWORD *)&v139[31];
      v124[13] = *(_OWORD *)&v139[33];
      v124[6] = *(_OWORD *)&v139[19];
      v124[7] = *(_OWORD *)&v139[21];
      v124[8] = *(_OWORD *)&v139[23];
      v124[9] = *(_OWORD *)&v139[25];
      v124[2] = *(_OWORD *)&v139[11];
      v124[3] = *(_OWORD *)&v139[13];
      v124[4] = *(_OWORD *)&v139[15];
      v124[5] = *(_OWORD *)&v139[17];
      v124[0] = *(_OWORD *)&v139[7];
      v124[1] = *(_OWORD *)&v139[9];
      v29 = v139[35];
      v30 = v139[36];
      v31 = v139[37];
      __dst[4] = *(_OWORD *)&v139[29];
      __dst[5] = *(_OWORD *)&v139[31];
      __dst[6] = *(_OWORD *)&v139[33];
      __dst[0] = *(_OWORD *)&v139[21];
      __dst[1] = *(_OWORD *)&v139[23];
      __dst[3] = *(_OWORD *)&v139[27];
      __dst[2] = *(_OWORD *)&v139[25];
      ScrollGeometry.visibleRect.getter();
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v39 = v38;
      v123.origin.x = v32;
      v123.origin.y = v34;
      v123.size.width = v36;
      v123.size.height = v38;
      v129 = *(_OWORD *)&v139[15];
      v130 = *(_OWORD *)&v139[17];
      v131 = *(_OWORD *)&v139[19];
      v125 = *(_OWORD *)&v139[7];
      v126 = *(_OWORD *)&v139[9];
      v127 = *(_OWORD *)&v139[11];
      v128 = *(_OWORD *)&v139[13];
      __dst[4] = *(_OWORD *)&v139[15];
      __dst[5] = *(_OWORD *)&v139[17];
      __dst[6] = *(_OWORD *)&v139[19];
      __dst[0] = *(_OWORD *)&v139[7];
      __dst[1] = *(_OWORD *)&v139[9];
      __dst[3] = *(_OWORD *)&v139[13];
      __dst[2] = *(_OWORD *)&v139[11];
      if ((v31 & 1) != 0)
        ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v30, v29));
      v104 = v30;
      v105 = v29;
      ScrollGeometry.visibleRect.getter();
      v111 = v41;
      v112 = v40;
      v109 = v43;
      v110 = v42;
      __dst[4] = *(_OWORD *)&v139[15];
      __dst[5] = *(_OWORD *)&v139[17];
      __dst[6] = *(_OWORD *)&v139[19];
      __dst[0] = *(_OWORD *)&v139[7];
      __dst[1] = *(_OWORD *)&v139[9];
      __dst[3] = *(_OWORD *)&v139[13];
      __dst[2] = *(_OWORD *)&v139[11];
      ScrollGeometry.visibleRect.getter();
      v45 = v44;
      v47 = v46;
      v49 = v48;
      v51 = v50;
      OutputValue = AGGraphGetOutputValue();
      if (v10 != v116 || !OutputValue)
      {
        *(CGFloat *)(v1 + 160) = v33;
        *(CGFloat *)(v1 + 168) = v35;
        *(CGFloat *)(v1 + 176) = v37;
        *(CGFloat *)(v1 + 184) = v39;
        *(_QWORD *)(v1 + 192) = v45;
        *(_QWORD *)(v1 + 200) = v47;
        *(_QWORD *)(v1 + 208) = v49;
        *(_QWORD *)(v1 + 216) = v51;
      }
      *(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) = 0;
      if ((v115 & 1) != 0)
      {
        *(_QWORD *)(v1 + 312) = 0;
        *(_QWORD *)(v1 + 320) = 0;
        *(_BYTE *)(v1 + 328) = 1;
      }
      v167.origin.x = 0.0;
      v167.origin.y = 0.0;
      v167.size.width = 0.0;
      v167.size.height = 0.0;
      v154.origin.y = v111;
      v154.origin.x = v112;
      v154.size.height = v109;
      v154.size.width = v110;
      v53 = CGRectEqualToRect(v154, v167);
      v155.origin.x = v113;
      v155.size.height = v119;
      v155.origin.y = v118;
      v155.size.width = rect;
      if (CGRectIsNull(v155) || (*(_QWORD *)&__src[0] = __PAIR64__(v107, v19), (AGGraphAnyInputsChanged() & 1) != 0))
      {
        v54 = 0;
        v55 = v114;
        if (v53)
          goto LABEL_16;
      }
      else
      {
        __dst[4] = *(_OWORD *)&v139[15];
        __dst[5] = *(_OWORD *)&v139[17];
        __dst[6] = *(_OWORD *)&v139[19];
        __dst[0] = *(_OWORD *)&v139[7];
        __dst[1] = *(_OWORD *)&v139[9];
        __dst[3] = *(_OWORD *)&v139[13];
        __dst[2] = *(_OWORD *)&v139[11];
        if ((v31 & 1) != 0)
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v104, v105));
        v57 = *(double *)&v139[4];
        v58 = *(double *)&v139[5];
        ScrollGeometry.visibleRect.getter();
        v168.origin.x = 0.0;
        v168.origin.y = 0.0;
        v168.size.width = v57;
        v168.size.height = v58;
        v157 = CGRectIntersection(v156, v168);
        x = v157.origin.x;
        y = v157.origin.y;
        width = v157.size.width;
        height = v157.size.height;
        v56 = v108;
        v55 = v114;
        if (CGRectIsEmpty(v157))
        {
          if (v53)
          {
            v54 = 0;
            goto LABEL_43;
          }
          v54 = 1;
        }
        else
        {
          v158.origin.x = v113;
          v158.origin.y = v118;
          v158.size.height = v119;
          v158.size.width = rect;
          v169.origin.x = x;
          v169.origin.y = y;
          v169.size.width = width;
          v169.size.height = height;
          if (CGRectContainsRect(v158, v169))
          {
            v159.origin.x = x;
            v159.origin.y = y;
            v159.size.width = width;
            v159.size.height = height;
            MinX = CGRectGetMinX(v159);
            v160.origin.x = v113;
            v160.origin.y = v118;
            v160.size.width = rect;
            v160.size.height = v119;
            if (MinX - CGRectGetMinX(v160) < width / 3.0)
            {
              v64 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v64 + 216) & 2) == 0)
                *(_BYTE *)(*(_QWORD *)v64 + 216) |= 2u;
            }
            v117 = height / 3.0;
            v161.origin.x = v113;
            v161.origin.y = v118;
            v161.size.width = rect;
            v161.size.height = v119;
            MaxX = CGRectGetMaxX(v161);
            v162.origin.x = x;
            v162.origin.y = y;
            v162.size.width = width;
            v162.size.height = height;
            if (MaxX - CGRectGetMaxX(v162) < width / 3.0)
            {
              v66 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v66 + 216) & 8) == 0)
                *(_BYTE *)(*(_QWORD *)v66 + 216) |= 8u;
            }
            v163.origin.x = x;
            v163.origin.y = y;
            v163.size.width = width;
            v163.size.height = height;
            MinY = CGRectGetMinY(v163);
            v164.origin.x = v113;
            v164.size.height = v119;
            v164.origin.y = v118;
            v164.size.width = rect;
            if (MinY - CGRectGetMinY(v164) < v117)
            {
              v68 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v68 + 216) & 1) == 0)
                *(_BYTE *)(*(_QWORD *)v68 + 216) |= 1u;
            }
            v165.origin.x = v113;
            v165.origin.y = v118;
            v165.size.width = rect;
            v165.size.height = v119;
            MaxY = CGRectGetMaxY(v165);
            v166.origin.x = x;
            v166.origin.y = y;
            v166.size.width = width;
            v166.size.height = height;
            if (MaxY - CGRectGetMaxY(v166) < v117)
            {
              v70 = AGGraphGetValue();
              if ((*(_BYTE *)(*(_QWORD *)v70 + 216) & 4) == 0)
                *(_BYTE *)(*(_QWORD *)v70 + 216) |= 4u;
            }
            v54 = 0;
LABEL_43:
            *(_QWORD *)&v141[0] = v56;
            if (*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 225) == 1
              && (v100 = *(_DWORD *)(AGGraphGetValue() + 28)) != 0)
            {
              v101 = v100 & 1;
              v102 = (v100 >> 1) & 1;
              __src[4] = v129;
              __src[5] = v130;
              __src[6] = v131;
              __src[0] = v125;
              __src[1] = v126;
              __src[3] = v128;
              __src[2] = v127;
              swift_bridgeObjectRetain();
              Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(__src, v101, v102);
              v56 = *(_QWORD *)&v141[0];
            }
            else
            {
              if (!v54 && AGGraphGetOutputValue())
                goto LABEL_50;
              swift_bridgeObjectRetain();
            }
            *(_QWORD *)&__src[0] = v56;
            AGGraphSetOutputValue();
            swift_bridgeObjectRelease();
LABEL_50:
            size = v123.size;
            *(CGPoint *)(v1 + 160) = v123.origin;
            *(CGSize *)(v1 + 176) = size;
            memcpy(__src, v139, 0x129uLL);
            PositionState.update(context:)((uint64_t)__src);
            return swift_release();
          }
          v54 = 0;
          if (v53)
          {
LABEL_16:
            v56 = v108;
            goto LABEL_43;
          }
        }
      }
      v71 = AGGraphGetValue();
      v72 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      v133 = *MEMORY[0x1E0C9D628];
      ++*(_DWORD *)(*(_QWORD *)v71 + 212);
      v132 = (char *)MEMORY[0x1E0DEE9D8];
      v134 = v72;
      v135 = 0;
      v137 = 0;
      v136 = 0;
      v138 = 0;
      if (v54)
      {
        *(_OWORD *)(v1 + 96) = 0u;
        *(_OWORD *)(v1 + 112) = 0u;
      }
      else
      {
        specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)((uint64_t)v139, (uint64_t)&v132, &v123);
      }
      CurrentAttribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v106)
      {
        v74 = CurrentAttribute;
        v75 = v138;
        v76 = *(char **)(v1 + 128);
        AGGraphGetValue();
        swift_retain();
        IncrementalLayoutViewCache.commitPlacedChildren(from:to:wasCancelled:context:)(v76, &v132, v75, v74);
        swift_release();
        v77 = v132;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v1 + 128) = v77;
        v78 = swift_bridgeObjectRetain();
        v79 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_So6CGRectVs5NeverOTg503_s7d4UI26fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_5918e812d1d562eb413ef1fedeeee4a2AhFTf3nnnpk_nTf1cn_n(v78);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v80 = v55[7];
        v81 = v55[5];
        v146 = v55[6];
        v147 = v80;
        v82 = v55[7];
        v148[0] = v55[8];
        *(_OWORD *)((char *)v148 + 9) = *(_OWORD *)((char *)v55 + 137);
        v83 = v55[3];
        v84 = v55[1];
        v142 = v55[2];
        v143 = v83;
        v85 = v55[3];
        v86 = v55[5];
        v144 = v55[4];
        v145 = v86;
        v87 = v55[1];
        v141[0] = *v55;
        v88 = v141[0];
        v141[1] = v87;
        *(_QWORD *)&__src[2] = *(_QWORD *)(v1 + 32);
        *(__int128 *)((char *)&__src[4] + 8) = *(_OWORD *)(v1 + 72);
        v89 = *(_OWORD *)(v1 + 112);
        __src[6] = *(_OWORD *)(v1 + 96);
        __src[7] = v89;
        v90 = v55[8];
        *(__int128 *)((char *)&__src[16] + 8) = v82;
        *(__int128 *)((char *)&__src[17] + 8) = v90;
        *(__int128 *)((char *)&__src[18] + 1) = *(_OWORD *)((char *)v55 + 137);
        *(__int128 *)((char *)&__src[15] + 8) = v146;
        *(__int128 *)((char *)&__src[11] + 8) = v142;
        *(__int128 *)((char *)&__src[12] + 8) = v85;
        *(__int128 *)((char *)&__src[13] + 8) = v144;
        *(_QWORD *)(v1 + 136) = v79;
        v91 = *(_DWORD *)(v1 + 40);
        v92 = *(_QWORD *)(v1 + 48);
        v93 = *(_DWORD *)(v1 + 56);
        v94 = *(_QWORD *)(v1 + 64);
        v95 = *(_QWORD *)(v1 + 88);
        v56 = *(_QWORD *)(v1 + 128);
        v96 = *(_DWORD *)(v1 + 144);
        v97 = *(_QWORD *)(v1 + 312);
        v98 = *(_QWORD *)(v1 + 320);
        v99 = *(_BYTE *)(v1 + 328);
        *(__int128 *)((char *)&__src[14] + 8) = v81;
        *(__int128 *)((char *)&__src[9] + 8) = v88;
        recta = *(_OWORD *)(v1 + 16);
        __src[0] = *(_OWORD *)v1;
        __src[1] = recta;
        DWORD2(__src[2]) = v91;
        *(_QWORD *)&__src[3] = v92;
        DWORD2(__src[3]) = v93;
        *(_QWORD *)&__src[4] = v94;
        *((_QWORD *)&__src[5] + 1) = v95;
        *(_QWORD *)&__src[8] = v56;
        *((_QWORD *)&__src[8] + 1) = v79;
        LODWORD(__src[9]) = v96;
        *(__int128 *)((char *)&__src[10] + 8) = v84;
        *((_QWORD *)&__src[19] + 1) = v97;
        *(_QWORD *)&__src[20] = v98;
        BYTE8(__src[20]) = v99;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        specialized IncrementalChildPlacements.mainID(children:)(v56, dword_1E1AEED98, &dword_1E1AEED98[1], dword_1E1AEED70, &dword_1E1AEED70[1], &v140);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v141);
        *(_OWORD *)(v1 + 272) = v140;
        v54 = 1;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.controlSize : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.controlSize.getter();
  *a1 = v3;
  return result;
}

uint64_t ScrollView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v21[120];

  v4 = v3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for SystemScrollViewContainer(0, v7, *(_QWORD *)(a1 + 24), a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v21[-v15 - 8];
  outlined init with copy of ScrollViewConfiguration(v4 + *(int *)(a1 + 36), (uint64_t)v21);
  outlined init with take of ScrollViewConfiguration((uint64_t)v21, (uint64_t)v12);
  closure #1 in __App.ShoeboxAdaptor.body.getter(v4, v7, (uint64_t)&v12[*(int *)(v8 + 36)]);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemScrollViewContainer<A>, v8);
  static ViewBuilder.buildExpression<A>(_:)(v12, v8, v17);
  v18 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v18(v12, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v8, a3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v8);
}

uint64_t destroy for SystemScrollViewContainer(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 48))
    swift_release();
  swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(a1 + 80))
    swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  swift_unknownObjectWeakCopyInit();
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 88);
    v10 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = v8;
    *(_QWORD *)(a1 + 88) = v9;
    *(_QWORD *)(a1 + 96) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (v14 + 120 + a1) & ~v14;
  v16 = (v14 + 120 + a2) & ~v14;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  swift_bridgeObjectRetain();
  v17(v15, v16, v12);
  return a1;
}

uint64_t initializeWithCopy for AccessibilityProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(unsigned __int8 *)(v8 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

void @objc UIHostingController.didMove(toParent:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  UIHostingController.willMove(toParent:)((uint64_t)a3, (SEL *)&selRef_didMoveToParentViewController_, (uint64_t (*)(uint64_t))UIHostingController._didMove(toParent:), (uint64_t)v6);

}

void @objc UIHostingController.willMove(toParent:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  UIHostingController.willMove(toParent:)((uint64_t)a3, (SEL *)&selRef_willMoveToParentViewController_, (uint64_t (*)(uint64_t))UIHostingController._willMove(toParent:), (uint64_t)v6);

}

uint64_t UIHostingController.willMove(toParent:)(uint64_t a1, SEL *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  _QWORD *v4;
  objc_class *v8;
  objc_super v10;

  v8 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v10.receiver = v4;
  v10.super_class = v8;
  objc_msgSendSuper2(&v10, *a2, a1);
  return a3(a1);
}

Swift::Void __swiftcall UIHostingController._willMove(toParent:)(UIViewController_optional *toParent)
{
  void *v1;
  id v2;
  id v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  char v11;

  if (toParent)
  {
    v4 = xmmword_187BF9F90;
    v5 = 0;
    v6 = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    v7 = 2;
    outlined init with take of HostingControllerOverrides((uint64_t)&v4, (uint64_t)&v8);
  }
  else
  {
    v2 = objc_msgSend(v1, sel_navigationController);
    v3 = objc_msgSend(v1, sel_splitViewController);
    v8 = xmmword_187BF9F90;
    v9 = 0;
    v10 = 0;
    swift_unknownObjectWeakInit();

    swift_unknownObjectWeakInit();
    v11 = 2;
  }
  UIHostingController.overrides.setter((uint64_t)&v8);
}

uint64_t UIHostingController.overrides.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for UIHostingController.overrides;
  swift_beginAccess();
  outlined assign with take of HostingControllerOverrides(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  assignWithTake for HostingControllerOverrides(a2, a1);
  return a2;
}

uint64_t assignWithTake for HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 2)
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeInit();
LABEL_8:
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      goto LABEL_9;
    }
  }
  else
  {
    if (v4 != 2)
    {
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of PushTarget(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
LABEL_9:
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

Swift::Void __swiftcall UIHostingController._didMove(toParent:)(UIViewController_optional *toParent)
{
  char v1;
  __int128 v2;

  v2 = xmmword_187BFE310;
  if (toParent)
    v1 = 1;
  else
    v1 = 2;
  UIHostingController.resolveRequiredBridges(in:allowedActions:)((uint64_t *)&v2, v1);
}

void @objc CellHostingView.layoutMarginsDidChange()(void *a1)
{
  id v1;

  v1 = a1;
  CellHostingView.layoutMarginsDidChange()();

}

Swift::Void __swiftcall CellHostingView.layoutMarginsDidChange()()
{
  void *v0;
  objc_class *ObjectType;
  objc_super v2;

  ObjectType = (objc_class *)swift_getObjectType();
  v2.receiver = v0;
  v2.super_class = ObjectType;
  objc_msgSendSuper2(&v2, sel_layoutMarginsDidChange);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, ObjectType);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

void closure #1 in TabView.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E0CE5078], MEMORY[0x1E0CE5068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v2, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for TabView();
}

uint64_t sub_186E75A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  View.styleContext<A>(_:)();
  if (one-time initialization token for contain != -1)
    swift_once();
  *(_QWORD *)(v7 - 112) = static AccessibilityChildBehavior.contain;
  v8 = lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v7 - 128) = v1;
  *(_QWORD *)(v7 - 120) = v8;
  v9 = MEMORY[0x1E0CE2E70];
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7 - 128);
  View.accessibilityElement(children:)((uint64_t *)(v7 - 112), v2, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
  *(_QWORD *)(v7 - 144) = v10;
  *(_QWORD *)(v7 - 136) = &protocol witness table for AccessibilityContainerModifier;
  v11 = MEMORY[0x18D75FFDC](v9, v0, v7 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v4, v0, v11);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8);
  v12(v4, v0);
  static ViewBuilder.buildBlock<A>(_:)(v3, v0, *(_QWORD *)(v7 - 152));
  return v12(v3, v0);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>, (void (*)(_QWORD, double))type metadata accessor for ResolvedButtonStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedButtonStyle, (uint64_t (*)(char *))outlined destroy of ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, MEMORY[0x1E0CE50F0], &lazy cache variable for type metadata for [ViewGeometry], MEMORY[0x1E0CE19C0]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, type metadata accessor for ResolvedButtonStyle, (uint64_t (*)(_QWORD, double))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifi, (uint64_t (*)(uint64_t, char *))outlined init with copy of ResolvedButtonStyle, (void (*)(uint64_t))ResolvedButtonStyle.body.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, MEMORY[0x1E0CE0AF0]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))ScrollViewContentFrame.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))FlipForRTLFrame.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, MEMORY[0x1E0CE44D8]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>, (void (*)(_QWORD, double))type metadata accessor for ResolvedProgressViewStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedProgressViewStyle, (uint64_t (*)(char *))outlined destroy of ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, type metadata accessor for ResolvedProgressViewStyle, (uint64_t (*)(_QWORD, double))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t, char *))outlined init with copy of ResolvedProgressViewStyle, (void (*)(uint64_t))ResolvedProgressViewStyle.body.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>, (void (*)(_QWORD, double))type metadata accessor for ResolvedSearchFieldStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedSearchFieldStyle, (uint64_t (*)(char *))outlined destroy of ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, type metadata accessor for ResolvedSearchFieldStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedSearchFieldStyle);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>, (void (*)(_QWORD, double))type metadata accessor for ResolvedTokenFieldStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedTokenFieldStyle, (uint64_t (*)(char *))outlined destroy of ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, type metadata accessor for ResolvedTokenFieldStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedTokenFieldStyle);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>, (void (*)(_QWORD, double))type metadata accessor for ResolvedTextEditorStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedTextEditorStyle, (uint64_t (*)(char *))outlined destroy of ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, type metadata accessor for ResolvedTextEditorStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedTextEditorStyle);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>, (void (*)(_QWORD, double))type metadata accessor for ResolvedDatePickerStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedDatePickerStyle, (uint64_t (*)(char *))outlined destroy of ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>, (void (*)(_QWORD, double))type metadata accessor for ResolvedTextFieldStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedTextFieldStyle, (uint64_t (*)(char *))outlined destroy of ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ResolvedTextFieldStyle, (void (*)(uint64_t, char *))outlined init with copy of ResolvedTextFieldStyle);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, MEMORY[0x1E0CE61D8], &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E0CE4958]);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))ScrollViewResponderPosition.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (void (*)(uint64_t, char *))outlined init with copy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(char *))outlined destroy of ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>, (void (*)(_QWORD *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))specialized PlatformArchivedDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for PreferenceValueAttribute<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD))FeedbackLocation.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))specialized ArchivableDisplayList.value.getter);
}

uint64_t UIHostingConfiguration.margins(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
  v5 = a2 + *(int *)(a1 + 60);
  OptionalEdgeInsets.init(_:edges:)();
  result = OptionalEdgeInsets.adding(_:)();
  *(_QWORD *)v5 = v7;
  *(_BYTE *)(v5 + 8) = v8;
  *(_QWORD *)(v5 + 16) = v9;
  *(_BYTE *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = v11;
  *(_BYTE *)(v5 + 40) = v12;
  *(_QWORD *)(v5 + 48) = v13;
  *(_BYTE *)(v5 + 56) = v14;
  return result;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
  v5 = a2 + *(int *)(a1 + 60);
  OptionalEdgeInsets.init(_:edges:)();
  result = OptionalEdgeInsets.adding(_:)();
  *(_QWORD *)v5 = v7;
  *(_BYTE *)(v5 + 8) = v8;
  *(_QWORD *)(v5 + 16) = v9;
  *(_BYTE *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = v11;
  *(_BYTE *)(v5 + 40) = v12;
  *(_QWORD *)(v5 + 48) = v13;
  *(_BYTE *)(v5 + 56) = v14;
  return result;
}

double @objc _UIHostingView._baselineOffsets(at:)(void *a1, double a2, double a3)
{
  id v5;
  double v6;
  double v7;

  v5 = a1;
  _UIHostingView._baselineOffsets(at:)(a2, a3);
  v7 = v6;

  return v7;
}

uint64_t _UIHostingView._baselineOffsets(at:)(double a1, double a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *MEMORY[0x1E0DEEDD8] & *v2;
  if (a1 == 0.0 && a2 == 0.0)
  {
    static _ProposedSize.unspecified.getter();
    v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    ViewRendererHost.sizeThatFits(_:)();
  }
  static VerticalAlignment.firstTextBaseline.getter();
  v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
  ViewRendererHost.explicitAlignment(of:at:)();
  static VerticalAlignment.lastTextBaseline.getter();
  return ViewRendererHost.explicitAlignment(of:at:)();
}

uint64_t static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;

  v6 = *a1;
  type metadata accessor for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>();
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v6;
  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = a4;
  lazy protocol witness table accessor for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect();
  swift_retain();
  static RendererEffect.makeRendererEffect(effect:inputs:body:)();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier;
  if (!lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier, &unk_1E1B09D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier);
  }
  return result;
}

uint64_t closure #1 in static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 8);
  v9 = a2[5];
  v10 = a2[6];
  v19 = *((_DWORD *)a2 + 14);
  v20 = *((_DWORD *)a2 + 9);
  v17 = *((_DWORD *)a2 + 16);
  v18 = *((_DWORD *)a2 + 15);
  v15 = *((_DWORD *)a2 + 18);
  v16 = *((_DWORD *)a2 + 17);
  v13 = *((_DWORD *)a2 + 20);
  v14 = *((_DWORD *)a2 + 19);
  v31 = *a2;
  v32 = v4;
  v33 = v5;
  *(_QWORD *)&v34 = __PAIR64__(v7, v6);
  *((_QWORD *)&v34 + 1) = __PAIR64__(v20, v8);
  v35 = v9;
  v36 = v10;
  *(_QWORD *)&v37 = __PAIR64__(v18, v19);
  *((_QWORD *)&v37 + 1) = __PAIR64__(v16, v17);
  v38 = __PAIR64__(v14, v15);
  v39 = v13;
  type metadata accessor for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  v22 = v31;
  v23 = v4;
  v24 = v5;
  v25 = v34;
  v26 = v9;
  v27 = v10;
  v28 = v37;
  v29 = __PAIR64__(v14, v15);
  v30 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  a4(v11, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment, &unk_1E1B09DD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment);
  }
  return result;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t WindowSceneList.MakeList.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *Value;
  uint64_t v18;
  Swift::UInt8 v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  __int128 v33[17];
  _QWORD v34[2];
  _QWORD v35[18];
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int16 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53[16];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;

  v5 = v4;
  v64 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for WindowSceneConfiguration(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)v32 - v11;
  v13 = *((unsigned __int8 *)v4 + 32);
  if (v13 == 255)
  {
    v16 = *((_DWORD *)v4 + 2);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = (uint64_t *)AGGraphGetValue();
    v18 = Value[1];
    if (v18)
    {
      v15 = *Value;
      v5[2] = *Value;
      v5[3] = v18;
      *((_BYTE *)v5 + 32) = 0;
      v14 = swift_bridgeObjectRetain();
      LOBYTE(v13) = 0;
    }
    else
    {
      v19 = ++windowGroupCounter;
      type metadata accessor for Any.Type();
      v15 = *(_QWORD *)AGGraphGetValue();
      v14 = v19;
      v5[2] = v15;
      v5[3] = v19;
      LOBYTE(v13) = 1;
      *((_BYTE *)v5 + 32) = 1;
    }
  }
  else
  {
    v15 = v4[2];
    v14 = v4[3];
    v16 = *((_DWORD *)v4 + 2);
  }
  v20 = *((_DWORD *)v5 + 3);
  v58 = *v5;
  v59 = v16;
  v60 = v20;
  v61 = v15;
  v62 = v14;
  v63 = v13;
  WindowSceneList.MakeList.configuration.getter(a1, v10, (uint64_t)v12);
  WindowSceneConfiguration.sceneListValue()(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  outlined init with copy of SceneList.Item.Value(v53, (uint64_t)v33);
  v21 = *((unsigned __int8 *)v5 + 32);
  if (v21 == 255)
    __break(1u);
  v23 = v5[2];
  v22 = v5[3];
  v24 = v21 & 1;
  outlined copy of SceneID(v23, v22, v21 & 1);
  DisplayList.Version.init(forUpdate:)();
  v25 = v32[1];
  v54 = *(_OWORD *)v5;
  v55 = v23;
  v56 = v22;
  v57 = v21;
  WindowSceneList.MakeList.environment.getter(v34);
  v26 = v34[0];
  v27 = v34[1];
  v28 = MEMORY[0x1E0DEE9D8];
  v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  outlined init with take of SceneList.Item.Value(v33, (uint64_t)v35);
  v35[16] = v23;
  v35[17] = v22;
  v36 = v24;
  v37 = v25;
  v38 = v26;
  v39 = v27;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v45 = 0;
  v44 = 0;
  v46 = 1;
  v48 = 0;
  v47 = 0;
  v49 = 1;
  v50 = 0;
  v51 = v28;
  v52 = v29;
  outlined init with copy of SceneList.Item((uint64_t)v35, (uint64_t)v33);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_187BF9830;
  memcpy((void *)(v30 + 32), v33, 0x110uLL);
  *(_QWORD *)&v33[0] = v30;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined destroy of SceneList.Item((uint64_t)v35);
  return outlined destroy of SceneList.Item.Value((uint64_t)v53);
}

uint64_t outlined destroy of SceneList.Item(uint64_t a1)
{
  destroy for SceneList.Item(a1);
  return a1;
}

uint64_t destroy for SceneList.Item(uint64_t a1)
{
  switch(*(_BYTE *)(a1 + 121))
  {
    case 0:
    case 1:
      swift_release();
      if (*(_QWORD *)(a1 + 32))
      {
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(a1 + 48))
        goto LABEL_23;
      break;
    case 2:
      if (*(_QWORD *)(a1 + 48))
        __swift_destroy_boxed_opaque_existential_1(a1 + 24);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
      break;
    case 3:
      goto LABEL_23;
    case 4:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      break;
    case 5:
      outlined consume of SceneID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
      if (*(_QWORD *)(a1 + 32) >= 3uLL)
        swift_bridgeObjectRelease();
      goto LABEL_23;
    case 6:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(_QWORD *)(a1 + 48))
      {
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
        swift_bridgeObjectRelease();
      }
      break;
    case 7:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(_QWORD *)(a1 + 48))
      {
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
        swift_bridgeObjectRelease();
      }
      swift_release();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 72))
        swift_release();
      if (*(_QWORD *)(a1 + 88))
        swift_release();
      swift_bridgeObjectRelease();
      break;
    case 8:
      swift_release();
      swift_release();
      outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
      swift_bridgeObjectRelease();
LABEL_23:
      swift_release();
      break;
    default:
      break;
  }
  outlined consume of SceneID(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_BYTE *)(a1 + 144));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of SceneID(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined init with copy of SceneList.Item.Value(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for SceneList.Item.Value(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for SceneList.Item.Value(uint64_t a1, uint64_t *a2)
{
  int v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = *((unsigned __int8 *)a2 + 121);
  while (2)
  {
    switch(v4)
    {
      case 0:
        *(_QWORD *)a1 = *a2;
        v5 = (_OWORD *)(a1 + 8);
        v6 = a2[4];
        swift_retain();
        if (v6)
        {
          v7 = a2[1];
          v8 = a2[2];
          v9 = *((_BYTE *)a2 + 24);
          outlined copy of Text.Storage(v7, v8, v9);
          *(_QWORD *)(a1 + 8) = v7;
          *(_QWORD *)(a1 + 16) = v8;
          *(_BYTE *)(a1 + 24) = v9;
          *(_QWORD *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          v45 = *(_OWORD *)(a2 + 3);
          *v5 = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 24) = v45;
        }
        v46 = a2[6];
        *(_QWORD *)(a1 + 40) = a2[5];
        if (v46)
        {
          v47 = a2[7];
          *(_QWORD *)(a1 + 48) = v46;
          *(_QWORD *)(a1 + 56) = v47;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        *(_BYTE *)(a1 + 121) = 0;
        return a1;
      case 1:
        *(_QWORD *)a1 = *a2;
        v10 = (_OWORD *)(a1 + 8);
        v11 = a2[4];
        swift_retain();
        if (v11)
        {
          v12 = a2[1];
          v13 = a2[2];
          v14 = *((_BYTE *)a2 + 24);
          outlined copy of Text.Storage(v12, v13, v14);
          *(_QWORD *)(a1 + 8) = v12;
          *(_QWORD *)(a1 + 16) = v13;
          *(_BYTE *)(a1 + 24) = v14;
          *(_QWORD *)(a1 + 32) = a2[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          v48 = *(_OWORD *)(a2 + 3);
          *v10 = *(_OWORD *)(a2 + 1);
          *(_OWORD *)(a1 + 24) = v48;
        }
        v49 = a2[6];
        *(_QWORD *)(a1 + 40) = a2[5];
        if (v49)
        {
          v50 = a2[7];
          *(_QWORD *)(a1 + 48) = v49;
          *(_QWORD *)(a1 + 56) = v50;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
        }
        *(_BYTE *)(a1 + 121) = 1;
        return a1;
      case 2:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        v15 = (_OWORD *)(a1 + 24);
        v16 = a2 + 3;
        v17 = a2[6];
        if (v17)
        {
          v18 = a2[7];
          *(_QWORD *)(a1 + 48) = v17;
          *(_QWORD *)(a1 + 56) = v18;
          (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
        }
        else
        {
          v51 = *(_OWORD *)(a2 + 5);
          *v15 = *v16;
          *(_OWORD *)(a1 + 40) = v51;
          *(_QWORD *)(a1 + 56) = a2[7];
        }
        v52 = a2[9];
        *(_QWORD *)(a1 + 64) = a2[8];
        *(_QWORD *)(a1 + 72) = v52;
        v53 = a2[11];
        *(_QWORD *)(a1 + 80) = a2[10];
        *(_QWORD *)(a1 + 88) = v53;
        v54 = a2[13];
        *(_QWORD *)(a1 + 96) = a2[12];
        v55 = a2[14];
        v56 = *((_BYTE *)a2 + 120);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of SceneID(v54, v55, v56);
        *(_QWORD *)(a1 + 104) = v54;
        *(_QWORD *)(a1 + 112) = v55;
        *(_BYTE *)(a1 + 120) = v56;
        *(_BYTE *)(a1 + 121) = 2;
        return a1;
      case 3:
        *(_QWORD *)a1 = *a2;
        v19 = 3;
        goto LABEL_21;
      case 4:
        v20 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v20;
        *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
        v21 = a2[4];
        *(_QWORD *)(a1 + 24) = a2[3];
        *(_QWORD *)(a1 + 32) = v21;
        *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
        v22 = a2[7];
        *(_QWORD *)(a1 + 48) = a2[6];
        *(_QWORD *)(a1 + 56) = v22;
        v23 = *((_OWORD *)a2 + 4);
        *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
        *(_OWORD *)(a1 + 64) = v23;
        *(_BYTE *)(a1 + 121) = 4;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        goto LABEL_45;
      case 5:
        v24 = *a2;
        v25 = a2[1];
        v26 = *((_BYTE *)a2 + 16);
        outlined copy of SceneID(*a2, v25, v26);
        *(_QWORD *)a1 = v24;
        *(_QWORD *)(a1 + 8) = v25;
        *(_BYTE *)(a1 + 16) = v26;
        v27 = a2 + 3;
        v28 = a2[4];
        if (v28 >= 3)
        {
          *(_QWORD *)(a1 + 24) = *v27;
          *(_QWORD *)(a1 + 32) = v28;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v27;
        }
        *(_QWORD *)(a1 + 40) = a2[5];
        v19 = 5;
LABEL_21:
        *(_BYTE *)(a1 + 121) = v19;
        goto LABEL_22;
      case 6:
        v29 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v29;
        *(_QWORD *)(a1 + 16) = a2[2];
        v30 = a2[6];
        swift_bridgeObjectRetain();
        swift_retain();
        if (v30)
        {
          v31 = a2[3];
          v32 = a2[4];
          v33 = *((_BYTE *)a2 + 40);
          outlined copy of Text.Storage(v31, v32, v33);
          *(_QWORD *)(a1 + 24) = v31;
          *(_QWORD *)(a1 + 32) = v32;
          *(_BYTE *)(a1 + 40) = v33;
          *(_QWORD *)(a1 + 48) = a2[6];
          swift_bridgeObjectRetain();
        }
        else
        {
          v57 = *(_OWORD *)(a2 + 5);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 40) = v57;
        }
        *(_BYTE *)(a1 + 121) = 6;
        return a1;
      case 7:
        v34 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = a2[2];
        v35 = a2[6];
        swift_bridgeObjectRetain();
        swift_retain();
        if (v35)
        {
          v36 = a2[3];
          v37 = a2[4];
          v38 = *((_BYTE *)a2 + 40);
          outlined copy of Text.Storage(v36, v37, v38);
          *(_QWORD *)(a1 + 24) = v36;
          *(_QWORD *)(a1 + 32) = v37;
          *(_BYTE *)(a1 + 40) = v38;
          *(_QWORD *)(a1 + 48) = a2[6];
          swift_bridgeObjectRetain();
        }
        else
        {
          v58 = *(_OWORD *)(a2 + 5);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
          *(_OWORD *)(a1 + 40) = v58;
        }
        v59 = a2[9];
        v60 = a2[8];
        *(_QWORD *)(a1 + 56) = a2[7];
        *(_QWORD *)(a1 + 64) = v60;
        swift_retain();
        swift_bridgeObjectRetain();
        if (v59)
        {
          v61 = a2[10];
          *(_QWORD *)(a1 + 72) = v59;
          *(_QWORD *)(a1 + 80) = v61;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
        }
        v62 = a2[11];
        if (v62)
        {
          v63 = a2[12];
          *(_QWORD *)(a1 + 88) = v62;
          *(_QWORD *)(a1 + 96) = v63;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
        }
        *(_QWORD *)(a1 + 104) = a2[13];
        *(_BYTE *)(a1 + 121) = 7;
LABEL_45:
        swift_bridgeObjectRetain();
        return a1;
      case 8:
        v39 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v39;
        *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
        v40 = a2[3];
        v41 = a2[4];
        v42 = *((_BYTE *)a2 + 40);
        swift_retain();
        swift_retain();
        outlined copy of Text.Storage(v40, v41, v42);
        *(_QWORD *)(a1 + 24) = v40;
        *(_QWORD *)(a1 + 32) = v41;
        *(_BYTE *)(a1 + 40) = v42;
        v43 = a2[6];
        v44 = a2[7];
        *(_QWORD *)(a1 + 48) = v43;
        *(_QWORD *)(a1 + 56) = v44;
        *(_BYTE *)(a1 + 121) = 8;
        swift_bridgeObjectRetain();
LABEL_22:
        swift_retain();
        return a1;
      default:
        v4 = *(_DWORD *)a2 + 9;
        continue;
    }
  }
}

uint64_t type metadata accessor for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WindowSceneConfiguration);
}

uint64_t outlined init with copy of SceneList.Item(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SceneList.Item(a2, a1);
  return a2;
}

void initializeWithCopy for SceneList.Item(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_186E76EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)v0 = *(_QWORD *)v1;
  v2 = *(_QWORD *)(v1 + 32);
  swift_retain();
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = *(_QWORD *)(v1 + 16);
    v5 = *(_BYTE *)(v1 + 24);
    outlined copy of Text.Storage(v3, v4, v5);
    *(_QWORD *)(v0 + 8) = v3;
    *(_QWORD *)(v0 + 16) = v4;
    *(_BYTE *)(v0 + 24) = v5;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)(v1 + 24);
    *(_OWORD *)(v0 + 8) = *(_OWORD *)(v1 + 8);
    *(_OWORD *)(v0 + 24) = v6;
  }
  v7 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v0 + 48) = v7;
    *(_QWORD *)(v0 + 56) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v1 + 48);
  }
  *(_BYTE *)(v0 + 121) = 0;
  v9 = *(_QWORD *)(v1 + 128);
  v10 = *(_QWORD *)(v1 + 136);
  v11 = *(_BYTE *)(v1 + 144);
  outlined copy of SceneID(v9, v10, v11);
  *(_QWORD *)(v0 + 128) = v9;
  *(_QWORD *)(v0 + 136) = v10;
  *(_BYTE *)(v0 + 144) = v11;
  v12 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v0 + 160) = v12;
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v1 + 168);
  *(_BYTE *)(v0 + 176) = *(_BYTE *)(v1 + 176);
  v13 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v0 + 192) = v13;
  *(_BYTE *)(v0 + 200) = *(_BYTE *)(v1 + 200);
  v14 = *(_OWORD *)(v1 + 208);
  *(_BYTE *)(v0 + 224) = *(_BYTE *)(v1 + 224);
  *(_OWORD *)(v0 + 208) = v14;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v1 + 232);
  *(_BYTE *)(v0 + 248) = *(_BYTE *)(v1 + 248);
  *(_WORD *)(v0 + 249) = *(_WORD *)(v1 + 249);
  v16 = *(_QWORD *)(v1 + 256);
  v15 = *(_QWORD *)(v1 + 264);
  *(_QWORD *)(v0 + 256) = v16;
  *(_QWORD *)(v0 + 264) = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t outlined copy of SceneID(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined destroy of SceneList.Item.Value(uint64_t a1)
{
  destroy for SceneList.Item.Value(a1);
  return a1;
}

uint64_t destroy for SceneList.Item.Value(uint64_t a1)
{
  int v2;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 121);
  while (2)
  {
    switch(v2)
    {
      case 0:
      case 1:
        result = swift_release();
        if (*(_QWORD *)(a1 + 32))
        {
          outlined consume of Text.Storage(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
          result = swift_bridgeObjectRelease();
        }
        if (!*(_QWORD *)(a1 + 48))
          return result;
        goto LABEL_27;
      case 2:
        if (*(_QWORD *)(a1 + 48))
          __swift_destroy_boxed_opaque_existential_1(a1 + 24);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined consume of SceneID(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
      case 3:
        goto LABEL_27;
      case 4:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_24;
      case 5:
        outlined consume of SceneID(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
        if (*(_QWORD *)(a1 + 32) >= 3uLL)
          swift_bridgeObjectRelease();
        goto LABEL_27;
      case 6:
        swift_bridgeObjectRelease();
        result = swift_release();
        if (!*(_QWORD *)(a1 + 48))
          return result;
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
LABEL_24:
        result = swift_bridgeObjectRelease();
        break;
      case 7:
        swift_bridgeObjectRelease();
        swift_release();
        if (*(_QWORD *)(a1 + 48))
        {
          outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
          swift_bridgeObjectRelease();
        }
        swift_release();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 72))
          swift_release();
        if (*(_QWORD *)(a1 + 88))
          swift_release();
        goto LABEL_24;
      case 8:
        swift_release();
        swift_release();
        outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
        swift_bridgeObjectRelease();
LABEL_27:
        result = swift_release();
        break;
      default:
        v2 = *(_DWORD *)a1 + 9;
        continue;
    }
    return result;
  }
}

uint64_t outlined init with take of SceneList.Item.Value(__int128 *a1, uint64_t a2)
{
  __swift_memcpy122_8(a2, a1);
  return a2;
}

__n128 __swift_memcpy122_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 106) = *(__int128 *)((char *)a2 + 106);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t protocol witness for WindowSceneConfigurationAttributes.sceneListValue(_:) in conformance WindowGroupConfigurationAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = v6;
  *(_BYTE *)(a2 + 121) = 0;
  swift_retain();
  outlined copy of Text?(v2, v3, v4, v8);
  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t destroy for WindowSceneConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = ((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  result = swift_release();
  v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)((((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = v6 + a1;
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *v8;
  v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v10 + 24);
  swift_retain();
  if (v11 < 0xFFFFFFFF)
  {
    v15 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v15;
  }
  else
  {
    v12 = *(_QWORD *)v10;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_BYTE *)(v10 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v10, v13, v14);
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v13;
    *(_BYTE *)(v9 + 16) = v14;
    *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain();
  }
  v16 = (_QWORD *)((v9 + 39) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_QWORD *)(v18 + 8) = v20;
    swift_retain();
  }
  return a1;
}

uint64_t WindowSceneConfiguration.sceneListValue()(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 24) + 8))(v1, *(_QWORD *)(a1 + 16));
}

uint64_t WindowSceneList.MakeList.configuration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for WindowSceneConfiguration(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t WindowSceneList.MakeList.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  v4 = *Value;
  v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t AppSceneDelegate.makeRootView(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *rawValue;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t *__return_ptr, _QWORD *);
  _QWORD v9[13];
  uint64_t v10;

  if (one-time initialization token for appRootViewWrappers != -1)
    swift_once();
  swift_beginAccess();
  rawValue = (char *)appRootViewWrappers._rawValue;
  v5 = *((_QWORD *)appRootViewWrappers._rawValue + 2);
  if (v5)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v6 = rawValue + 40;
    do
    {
      v7 = (void (*)(uint64_t *__return_ptr, _QWORD *))*((_QWORD *)v6 - 1);
      v9[0] = a1;
      swift_retain();
      v7(&v10, v9);
      swift_release();
      swift_release();
      a1 = v10;
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  AppSceneDelegate.rootModifier.getter((uint64_t)v9);
  outlined init with copy of RootModifier((uint64_t)v9, (uint64_t)(a2 + 1));
  *a2 = a1;
  return outlined destroy of RootModifier((uint64_t)v9);
}

uint64_t AppSceneDelegate.rootModifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t result;
  _BYTE v11[40];
  _BYTE v12[40];

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge)
    && *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues))
  {
    v3 = v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataValue;
    swift_beginAccess();
    v4 = MEMORY[0x1E0DEC198];
    outlined init with copy of SwiftUIAnySortComparator?(v3, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v12, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
    v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase);
    v6 = v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID;
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
    v8 = *(_QWORD *)(v6 + 8);
    v9 = *(_BYTE *)(v6 + 16);
    swift_weakInit();
    swift_weakInit();
    swift_weakInit();
    outlined init with take of Image.Resolved?((uint64_t)v11, a1 + 24, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
    *(_BYTE *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v8;
    *(_BYTE *)(a1 + 88) = v9;
    *(_QWORD *)(a1 + 96) = 0;
    outlined copy of SceneID?(v7, v8, v9);
    return outlined destroy of AccessibilityTableContext?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of SwiftUIAnySortComparator?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of RootModifier(uint64_t a1)
{
  destroy for RootModifier(a1);
  return a1;
}

uint64_t outlined init with copy of RootModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RootModifier(a2, a1);
  return a2;
}

uint64_t static WindowSceneList._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v11 = *(_OWORD *)(a1 + 44);
  type metadata accessor for WindowSceneList(255, a2, a3, a3);
  type metadata accessor for _GraphValue();
  type metadata accessor for WindowSceneConfiguration(0, a2, a3, v7);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  PreferencesOutputs.init()();
  v12 = *(_QWORD *)((char *)&v11 + 4);
  v13 = HIDWORD(v11);
  outlined retain of [Text.Modifier]((uint64_t)&v12);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v9;
  *(_DWORD *)(a4 + 8) = v10;
  return result;
}

void type metadata accessor for AccessibilityValueStorage?(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for Optional();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t key path getter for EnvironmentValues.backgroundProminence : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.backgroundProminence.getter();
  *a1 = v3;
  return result;
}

uint64_t AllowsHitTestingFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 8);
  *(_BYTE *)(v1 + 208) = *(_BYTE *)AGGraphGetValue();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HoverCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of HoverCallback();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

void closure #1 in BarAppearanceBridge.updateNavigationVisibilities(navigationController:)(id a1@<X1>, void **a2@<X0>, uint64_t a3@<X2>, char *a4@<X8>)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  BOOL v13;
  char v14;
  id v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  id *v47;
  id v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  char v53;
  char v54;
  char v55;
  id v56;
  void *v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  void *v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[40];
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;

  v8 = *a2;
  v9 = objc_msgSend(a1, sel_topViewController);
  v10 = objc_msgSend(a1, sel_view);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, sel_window);

    if (!v12)
      goto LABEL_17;

    v13 = v9 && v9 == v8;
    v14 = v13;
    v15 = objc_msgSend(a1, sel_viewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = specialized Sequence<>.contains(_:)((uint64_t)v8, v16);
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v8, sel__appearState);
    v19 = objc_msgSend(v8, sel__appearState);
    if ((v14 & 1) == 0)
    {
      if ((v17 & 1) != 0)
      {

LABEL_37:
        v27 = 1;
        goto LABEL_38;
      }
      if (v18 != 2 && v19 != 1)
      {
LABEL_17:

        v27 = 0;
LABEL_38:
        *a4 = v27;
        return;
      }
    }
    swift_getObjectType();
    v75 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);
    v20 = (uint64_t *)(a3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
    swift_beginAccess();
    v66 = v20;
    v21 = *v20;
    memset(v78, 0, sizeof(v78));
    v73 = a4;
    v74 = (uint64_t)a2;
    v72 = v9;
    v71 = v14;
    v56 = a1;
    v57 = v8;
    if (*(_QWORD *)(v21 + 16))
    {
      swift_bridgeObjectRetain();
      v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v78);
      if ((v23 & 1) != 0)
      {
        v24 = *(_QWORD *)(v21 + 56) + 80 * v22;
        v70 = *(_BYTE *)v24;
        v25 = *(_QWORD *)(v24 + 16);
        v64 = *(_BYTE *)(v24 + 24);
        v60 = *(_QWORD *)(v24 + 48);
        v62 = *(_QWORD *)(v24 + 32);
        v58 = *(_BYTE *)(v24 + 56);
        v54 = *(_BYTE *)(v24 + 40);
        v55 = *(_BYTE *)(v24 + 57);
        v76 = *(_QWORD *)(v24 + 64);
        v77 = *(_QWORD *)(v24 + 8);
        LOBYTE(v68) = *(_BYTE *)(v24 + 58);
        BYTE4(v68) = *(_BYTE *)(v24 + 72);
        swift_retain();
        swift_retain();
        v26 = v25;
        swift_retain();
      }
      else
      {
        v68 = 0;
        v76 = 0;
        v77 = 0;
        v60 = 0;
        v62 = 0;
        v64 = 0;
        v26 = 0;
        v70 = 0;
        v58 = 1;
        v54 = 1;
        v55 = 2;
      }
      swift_bridgeObjectRelease();
      v31 = v64;
      v29 = v60;
      v30 = v62;
      v33 = v58;
      v35 = v54;
      v34 = v55;
      v28 = v76;
      v32 = v77;
    }
    else
    {
      v68 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v26 = 0;
      v32 = 0;
      v70 = 0;
      v33 = 1;
      v34 = 2;
      v35 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v78);
    v36 = UIViewController.hasNavigationBarContent(updateContext:)(v74);
    v78[0] = v70;
    *(_QWORD *)&v78[8] = v32;
    *(_QWORD *)&v78[16] = v26;
    v78[24] = v31;
    *(_QWORD *)&v78[32] = v30;
    v79 = v35;
    v80 = v29;
    v81 = v33;
    v82 = v34;
    v83 = v68;
    v84 = v28;
    v85 = BYTE4(v68);
    v37 = specialized BarAppearanceBridge.resolveIsHidden(config:edge:isFromSwiftUI:hasContent:)(v78, 0, v75, v36 & 1);
    if (v37 != 2)
      objc_msgSend(v56, sel_setNavigationBarHidden_animated_, v37 & 1, v28 != 0);
    v38 = *v66;
    memset(v78, 0, 24);
    *(_OWORD *)&v78[24] = xmmword_187C304D0;
    a4 = v73;
    if (*(_QWORD *)(v38 + 16))
    {
      swift_bridgeObjectRetain();
      v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v78);
      if ((v40 & 1) != 0)
      {
        v41 = *(_QWORD *)(v38 + 56) + 80 * v39;
        v42 = *(_QWORD *)(v41 + 8);
        v43 = *(_QWORD *)(v41 + 16);
        LOBYTE(v69) = *(_BYTE *)(v41 + 24);
        BYTE4(v69) = *(_BYTE *)v41;
        v44 = *(_BYTE *)(v41 + 40);
        v65 = *(_QWORD *)(v41 + 48);
        v67 = *(_QWORD *)(v41 + 32);
        v45 = *(_BYTE *)(v41 + 57);
        v63 = *(_BYTE *)(v41 + 58);
        v46 = *(_QWORD *)(v41 + 64);
        v59 = *(_BYTE *)(v41 + 56);
        v61 = *(_BYTE *)(v41 + 72);
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        v46 = 0;
        v63 = 0;
        v65 = 0;
        v67 = 0;
        v69 = 0;
        v43 = 0;
        v42 = 0;
        v59 = 1;
        v61 = 0;
        v45 = 2;
        v44 = 1;
      }
      v47 = (id *)v74;
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = 0;
      v63 = 0;
      v65 = 0;
      v67 = 0;
      v69 = 0;
      v43 = 0;
      v42 = 0;
      v59 = 1;
      v61 = 0;
      v45 = 2;
      v44 = 1;
      v47 = (id *)v74;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v78);
    v48 = objc_msgSend(*v47, sel_toolbarItems);
    if (v48)
    {
      v49 = v48;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v50 >> 62)
      {
        swift_bridgeObjectRetain();
        v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v52 = v51 != 0;
    }
    else
    {
      v52 = 0;
    }
    v78[0] = BYTE4(v69);
    *(_QWORD *)&v78[8] = v42;
    *(_QWORD *)&v78[16] = v43;
    v78[24] = v69;
    *(_QWORD *)&v78[32] = v67;
    v79 = v44;
    v80 = v65;
    v81 = v59;
    v82 = v45;
    v83 = v63;
    v84 = v46;
    v85 = v61;
    v53 = specialized BarAppearanceBridge.resolveIsHidden(config:edge:isFromSwiftUI:hasContent:)(v78, 1, v75, v52);
    if (v53 != 2)
      objc_msgSend(v56, sel_setToolbarHidden_animated_, v53 & 1, v46 != 0);
    BarAppearanceBridge.updateNavigationBarMargins(_:isTop:)(v57, v71);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_37;
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CA88D0], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t View.dividerStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DividerStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for DividerStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DividerStyleModifier);
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for CGRect?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGRect?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CGRect?)
  {
    type metadata accessor for CGRect(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGRect?);
  }
}

uint64_t static SelectionManagerBox.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t, double);
  int EnumCaseMultiPayload;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  void (*v55)(char *, uint64_t);
  char v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  void (*v70)(char *, uint64_t);
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t TupleTypeMetadata2;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;

  v86 = a1;
  v87 = a2;
  v84 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v75 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v77 = (char *)&v72 - v9;
  v10 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v74 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v76 = (char *)&v72 - v12;
  v82 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v73 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v78 = (char *)&v72 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v79 = (char *)&v72 - v21;
  v85 = a3;
  v81 = a4;
  v23 = type metadata accessor for SelectionManagerBox(0, a3, a4, v22);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v72 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v72 - v34;
  v36 = swift_getTupleTypeMetadata2();
  v37 = *(_QWORD *)(v36 - 8);
  v39 = MEMORY[0x1E0C80A78](v36, v38);
  v41 = (char *)&v72 - v40;
  v43 = (char *)&v72 + *(int *)(v42 + 48) - v40;
  v83 = v24;
  v44 = *(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16);
  v44((char *)&v72 - v40, v86, v23, v39);
  ((void (*)(char *, char *, uint64_t))v44)(v43, v87, v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    ((void (*)(char *, char *, uint64_t))v44)(v35, v41, v23);
    if (!swift_getEnumCaseMultiPayload())
    {
      v56 = static Set.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = v83;
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    ((void (*)(char *, char *, uint64_t))v44)(v27, v41, v23);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v57 = v84;
      v58 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
      v59 = v77;
      v60 = v27;
      v61 = v85;
      v58(v77, v60, v85);
      v62 = v75;
      v58(v75, v43, v61);
      v56 = dispatch thunk of static Equatable.== infix(_:_:)();
      v63 = *(void (**)(char *, uint64_t))(v57 + 8);
      v63(v62, v61);
      v63(v59, v61);
      v37 = v83;
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v84 + 8))(v27, v85);
LABEL_13:
    v56 = 0;
    v23 = v36;
    goto LABEL_14;
  }
  ((void (*)(char *, char *, uint64_t))v44)(v31, v41, v23);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v31, v10);
    goto LABEL_13;
  }
  v46 = v82;
  v47 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
  v48 = v79;
  v47(v79, v31, v10);
  v49 = v78;
  v47(v78, v43, v10);
  v50 = v76;
  v51 = &v76[*(int *)(TupleTypeMetadata2 + 48)];
  v52 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v52(v76, v48, v10);
  v87 = v51;
  v52(v51, v49, v10);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 48);
  v54 = v53(v50, 1, v85);
  v37 = v83;
  if (v54 != 1)
  {
    v65 = v73;
    v52(v73, v50, v10);
    v66 = v87;
    v67 = v85;
    if (v53(v87, 1, v85) != 1)
    {
      v69 = v77;
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v77, v66, v67);
      v56 = dispatch thunk of static Equatable.== infix(_:_:)();
      v70 = *(void (**)(char *, uint64_t))(v84 + 8);
      v70(v69, v67);
      v71 = *(void (**)(char *, uint64_t))(v82 + 8);
      v71(v78, v10);
      v71(v79, v10);
      v70(v65, v67);
      v71(v76, v10);
      goto LABEL_14;
    }
    v68 = *(void (**)(char *, uint64_t))(v82 + 8);
    v68(v78, v10);
    v68(v79, v10);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v67);
    goto LABEL_18;
  }
  v55 = *(void (**)(char *, uint64_t))(v46 + 8);
  v55(v49, v10);
  v55(v48, v10);
  if (v53(v87, 1, v85) != 1)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t))(v74 + 8))(v50, TupleTypeMetadata2);
    v56 = 0;
    goto LABEL_14;
  }
  v55(v50, v10);
  v56 = 1;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v23);
  return v56 & 1;
}

uint64_t partial apply for specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, BOOL *a2, double (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v3;

  return specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, *(_QWORD *)(v3 + 16), *(uint64_t **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD **)(v3 + 80), *(_BYTE *)(v3 + 88), *(_QWORD **)(v3 + 96), a3);
}

uint64_t key path getter for EnvironmentValues.isToggleOn : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isToggleOn.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.isToggleOn.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1E1AD2858, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1E1AD2858, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void UIKitNavigationBridge.isBeingPresented.getter()
{
  UIKitNavigationBridge.containingVC.getter();
}

uint64_t sub_186E79084(uint64_t a1)
{
  if (a1)
    UIKitNavigationBridge.containingSplitViewController.getter();
  return 0;
}

void UIKitNavigationBridge.containingSplitViewController.getter()
{
  UIKitNavigationBridge.containingVC.getter();
}

uint64_t sub_186E791C8(void *a1)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(a1, sel_splitViewController);

  result = 0;
  if (v2)
  {
    type metadata accessor for NotificationSendingSplitViewController();
    result = swift_dynamicCastClass();
    if (!result)
    {
      type metadata accessor for NotifyingMulticolumnSplitViewController();
      result = swift_dynamicCastClass();
      if (!result)
      {

        return 0;
      }
    }
  }
  return result;
}

void UIKitNavigationBridge.containingVC.getter()
{
  if (UIKitNavigationBridge.host.getter())
    _UIHostingView.containingViewController.getter();
  __break(1u);
}

uint64_t UIKitNavigationBridge.host.getter()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  id v3;

  result = MEMORY[0x18D760234](v0 + 24);
  if (result)
  {
    v2 = (void *)result;
    v3 = (id)specialized UIHostingController.host.getter();

    return (uint64_t)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for NotifyingMulticolumnSplitViewController()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NotificationSendingSplitViewController()
{
  return objc_opt_self();
}

id @objc UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  v14 = UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(v10, (uint64_t)v9, v12, v13);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v14;
}

id UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjCClassFromMetadata;
  void *v21;
  void *v22;
  Class isa;
  id v24;
  _BYTE v25[16];
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = v4;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v10 = type metadata accessor for ShadowListDataSource(0, v9[12], *(_QWORD *)(v9[14] + 8), a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v25[-v13];
  v15 = (char *)v5 + v9[17];
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v14, v15, v10);
  v26 = v5;
  v27 = a1;
  v28 = a2;
  v16 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:), (uint64_t)v25, v10, v16, v17, (uint64_t)&v29);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  v18 = v29;
  if ((*((_BYTE *)v5 + *(_QWORD *)((*v8 & *v5) + 0xD0)) & 1) == 0)
    UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(a1, a2);
  if (v18)
    return (id)v18;
  static Log.internalWarning(_:)();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v21 = (void *)MEMORY[0x18D75CC88](0x6C65437974706D45, 0xE90000000000006CLL);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_registerClass_forCellWithReuseIdentifier_, ObjCClassFromMetadata, v21);

  v22 = (void *)MEMORY[0x18D75CC88](0x6C65437974706D45, 0xE90000000000006CLL);
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v24 = objc_msgSend(a1, sel_dequeueReusableCellWithReuseIdentifier_forIndexPath_, v22, isa);

  return v24;
}

uint64_t ListCoreDataSource.visitContent<A>(atRow:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t, char *, uint64_t, _QWORD)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;

  v28 = a8;
  v29 = a5;
  v30 = a7;
  v26 = a2;
  v27 = a3;
  v24 = a1;
  v25 = a9;
  v11 = *(_QWORD *)(a6 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = (char *)&v23 - v15;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v23 - v20;
  ListDiffable.rowIndex(at:)((uint64_t)&v23 - v20, (uint64_t)v16, v24, a4, v11);
  ListCoreDataSource.visitRowAt<A>(_:visitor:)((uint64_t)v21, (uint64_t)v16, v26, v27, a4, v29, a6, v30, v25, v28);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t ListCoreDataSource.visitContent<A>(atRow:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (void (*)(uint64_t, char *, uint64_t, _QWORD))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a7);
}

{
  return ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (void (*)(uint64_t, char *, uint64_t, _QWORD))_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF, a7);
}

uint64_t ScrollViewDisplayList.value.getter()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v1 = *(_DWORD *)(v0 + 12);
  v2 = (_QWORD *)swift_allocObject();
  v3 = type metadata accessor for HostingScrollView.PlatformContainer();
  v4 = *(void **)AGGraphGetValue();
  v2[5] = v3;
  v2[6] = lazy protocol witness table accessor for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer();
  v2[2] = v4;
  if (v1 == *MEMORY[0x1E0CFED28])
  {
    v5 = v4;
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    v6 = v4;
    swift_bridgeObjectRetain();
  }
  type metadata accessor for CGRect(0);
  AGGraphGetValue();
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  return DisplayList.init(_:)();
}

Swift::Void __swiftcall HostingScrollView.PlatformContainer._updateSafeAreaInsets()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  id v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  objc_super v28;
  objc_super v29;
  objc_super v30;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = objc_msgSend(v0, sel_window);
  if (v3)
  {

    v4 = (double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
    v5 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
    v6 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8];
    v7 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16];
    v8 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24];
    if (v5 == 1.79769313e308 && v6 == 1.79769313e308 && v7 == 1.79769313e308 && v8 == 1.79769313e308)
    {
      v28.receiver = v0;
      v28.super_class = ObjectType;
      objc_msgSendSuper2(&v28, sel_safeAreaInsets);
      v5 = v12;
      v6 = v13;
      v7 = v14;
      v8 = v15;
    }
    v16 = *(_QWORD *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_safeAreaHelper];
    specialized UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(v1);
    if ((*(_BYTE *)(v16 + 48) & 1) == 0)
    {
      v17 = *(_OWORD *)(v16 + 32);
      *(_OWORD *)v4 = *(_OWORD *)(v16 + 16);
      *((_OWORD *)v4 + 1) = v17;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_BYTE *)(v16 + 48) = 1;
    }
    v30.receiver = v1;
    v30.super_class = ObjectType;
    objc_msgSendSuper2(&v30, sel__updateSafeAreaInsets);
    v18 = *v4;
    v19 = v4[1];
    v20 = v4[2];
    v21 = v4[3];
    if (*v4 == 1.79769313e308 && v19 == 1.79769313e308 && v20 == 1.79769313e308 && v21 == 1.79769313e308)
    {
      v29.receiver = v1;
      v29.super_class = ObjectType;
      objc_msgSendSuper2(&v29, sel_safeAreaInsets, v18, v19, v20, v21);
    }
    if (v5 != v18 || v6 != v19 || v7 != v20 || v8 != v21)
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView], sel__updateSafeAreaInsets);
  }
}

void HostingScrollView.PlatformContainer.safeAreaInsets.getter()
{
  char *v0;
  objc_super v4;

  if (*(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets] == 1.79769313e308
    && *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8] == 1.79769313e308
    && *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16] == 1.79769313e308
    && *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24] == 1.79769313e308)
  {
    v4.receiver = v0;
    v4.super_class = (Class)swift_getObjectType();
    objc_msgSendSuper2(&v4, sel_safeAreaInsets);
  }
}

uint64_t type metadata accessor for HostingScrollView.PlatformContainer()
{
  return objc_opt_self();
}

void specialized UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char *v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  _BYTE *v18;
  double *v19;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  double v32;
  double MinX;
  BOOL v34;
  double v35;
  double MinY;
  BOOL v37;
  double v38;
  double v39;
  CGFloat MaxY;
  double v41;
  double v42;
  double v43;
  BOOL v46;
  double v47;
  double v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  double v56;
  CGFloat v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  double v62;
  double v63;
  BOOL v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;

  v2 = v1;
  v4 = objc_msgSend(a1, sel_superview);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, sel_safeAreaInsets);
    v7 = v6;
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(char **)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView];
    if (((objc_msgSend(v14, sel_isTracking) & 1) != 0
       || (objc_msgSend(v14, sel_isDecelerating) & 1) != 0
       || (objc_msgSend(v14, sel_isScrollAnimating) & 1) != 0
       || (v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState + 8],
           ObjectType = swift_getObjectType(),
           v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8),
           swift_unknownObjectRetain(),
           LOBYTE(v15) = v17(ObjectType, v15),
           swift_unknownObjectRelease(),
           (v15 & 1) != 0))
      && (*(_BYTE *)(v2 + 88) & 1) == 0)
    {
      v18 = (_BYTE *)(v2 + 88);
      if ((*(_BYTE *)(v2 + 48) & 1) != 0)
      {
        v19 = (double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
        if (*(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets] == 1.79769313e308
          && *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8] == 1.79769313e308
          && *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16] == 1.79769313e308
          && *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24] == 1.79769313e308)
        {

        }
        else
        {
          v101 = *(double *)(v2 + 80);
          v103 = *(double *)(v2 + 72);
          v93 = *(double *)(v2 + 64);
          v97 = *(double *)(v2 + 56);
          v89 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16];
          v91 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24];
          v85 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
          v87 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8];
          objc_msgSend(a1, sel_frame);
          v105 = v11;
          v24 = v23;
          v26 = v25;
          v28 = v27;
          v30 = v29;
          objc_msgSend(v5, sel_bounds);
          v79 = v31;
          v83 = v32;
          v107.origin.x = v24;
          v107.origin.y = v26;
          v107.size.width = v28;
          v107.size.height = v30;
          MinX = CGRectGetMinX(v107);
          v34 = fabs(v9) < 0.25 || MinX > 0.0;
          v35 = v9 - v93;
          if (v34)
            v35 = 0.0;
          v81 = v35;
          v108.origin.x = v24;
          v108.origin.y = v26;
          v108.size.width = v28;
          v108.size.height = v30;
          MinY = CGRectGetMinY(v108);
          v37 = fabs(v7) < 0.25 || MinY > 0.0;
          v94 = v7;
          if (v37)
            v38 = 0.0;
          else
            v38 = v7 - v97;
          v109.origin.x = v24;
          v109.origin.y = v26;
          v109.size.width = v28;
          v109.size.height = v30;
          v98 = v13;
          if (v79 > CGRectGetMaxX(v109))
            v39 = 0.0;
          else
            v39 = v13 - v101;
          v110.origin.x = v24;
          v11 = v105;
          v110.origin.y = v26;
          v110.size.width = v28;
          v110.size.height = v30;
          MaxY = CGRectGetMaxY(v110);
          v42 = v85;
          v41 = v87;
          if (v83 > MaxY)
            v43 = 0.0;
          else
            v43 = v105 - v103;
          v46 = v38 == *MEMORY[0x1E0DC49E8]
             && v81 == *(double *)(MEMORY[0x1E0DC49E8] + 8)
             && v43 == *(double *)(MEMORY[0x1E0DC49E8] + 16)
             && v39 == *(double *)(MEMORY[0x1E0DC49E8] + 24);
          v48 = v89;
          v47 = v91;
          if (!v46)
          {
            v42 = v85 + v38;
            v47 = v91 + v39;
            v48 = v89 + v43;
            v41 = v87 + v81;
          }
          *v19 = v42;
          v19[1] = v41;
          v19[2] = v48;
          v19[3] = v47;

          v7 = v94;
          v13 = v98;
        }
      }
      else
      {
        v84 = *(double *)(v2 + 32);
        v86 = *(double *)(v2 + 40);
        v80 = *(double *)(v2 + 16);
        v82 = *(double *)(v2 + 24);
        v102 = *(double *)(v2 + 80);
        v104 = *(double *)(v2 + 72);
        v95 = *(double *)(v2 + 64);
        v99 = *(double *)(v2 + 56);
        objc_msgSend(a1, sel_frame);
        v50 = v49;
        v52 = v51;
        v54 = v53;
        v106 = v11;
        v55 = v13;
        v57 = v56;
        objc_msgSend(v5, sel_bounds);
        v90 = v58;
        v92 = v59;
        v111.origin.x = v50;
        v111.origin.y = v52;
        v111.size.width = v54;
        v111.size.height = v57;
        v60 = CGRectGetMinX(v111);
        v61 = fabs(v9) < 0.25 || v60 > 0.0;
        v88 = v9;
        if (v61)
          v62 = 0.0;
        else
          v62 = v9 - v95;
        v112.origin.x = v50;
        v112.origin.y = v52;
        v112.size.width = v54;
        v112.size.height = v57;
        v63 = CGRectGetMinY(v112);
        v64 = fabs(v7) < 0.25 || v63 > 0.0;
        v96 = v7;
        if (v64)
          v65 = 0.0;
        else
          v65 = v7 - v99;
        v113.origin.x = v50;
        v113.origin.y = v52;
        v113.size.width = v54;
        v113.size.height = v57;
        v100 = v55;
        if (v90 > CGRectGetMaxX(v113))
          v66 = 0.0;
        else
          v66 = v55 - v102;
        v114.origin.x = v50;
        v114.origin.y = v52;
        v114.size.width = v54;
        v114.size.height = v57;
        if (v92 > CGRectGetMaxY(v114))
          v67 = 0.0;
        else
          v67 = v106 - v104;
        v68 = *MEMORY[0x1E0DC49E8];
        v69 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
        v70 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
        v71 = *(double *)(MEMORY[0x1E0DC49E8] + 24);

        if (v65 == v68 && v62 == v69 && v67 == v70 && v66 == v71)
        {
          v7 = v96;
          v13 = v100;
          v11 = v106;
          v76 = v86;
          v9 = v88;
          v78 = v82;
          v77 = v84;
          v75 = v80;
        }
        else
        {
          v75 = v80 + v65;
          v76 = v86 + v66;
          v77 = v84 + v67;
          v78 = v82 + v62;
          v7 = v96;
          v13 = v100;
          v11 = v106;
          v9 = v88;
        }
        *(double *)(v2 + 16) = v75;
        *(double *)(v2 + 24) = v78;
        *(double *)(v2 + 32) = v77;
        *(double *)(v2 + 40) = v76;
        *(_BYTE *)(v2 + 48) = 0;
      }
      *(double *)(v2 + 56) = v7;
      *(double *)(v2 + 64) = v9;
    }
    else
    {

      *(double *)(v2 + 56) = v7;
      *(double *)(v2 + 64) = v9;
      v18 = (_BYTE *)(v2 + 88);
    }
    *(double *)(v2 + 72) = v11;
    *(double *)(v2 + 80) = v13;
    *v18 = 0;
  }
}

uint64_t partial apply for specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, BOOL *a2, double (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  uint64_t v3;

  return specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72), *(_QWORD **)(v3 + 80), *(_BYTE *)(v3 + 88), *(_QWORD **)(v3 + 96), a3);
}

void TabView.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  _QWORD v42[3];

  v35 = a2;
  v3 = a1[2];
  type metadata accessor for Binding();
  v33 = type metadata accessor for Optional();
  v29 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v4);
  v31 = (char *)v24 - v5;
  v6 = a1[4];
  v8 = type metadata accessor for TabViewStyleConfiguration(0, v3, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v30 = (char *)v24 - v10;
  v36 = v6;
  v12 = type metadata accessor for ResolvedTabView(0, v3, v6, v11);
  v34 = *(_QWORD *)(v12 - 8);
  v24[5] = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v32 = (char *)v24 - v14;
  v16 = type metadata accessor for TabViewStyleConfiguration.Content(255, v3, v6, v15);
  v17 = a1[3];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E0CE5078], MEMORY[0x1E0CE5068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v24[1] = v17;
  v18 = type metadata accessor for ModifiedContent();
  v19 = type metadata accessor for ModifiedContent();
  v26 = v16;
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewStyleConfiguration<A>.Content, v16);
  v28 = v20;
  v21 = a1[5];
  v22 = lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
  v42[0] = v21;
  v42[1] = v22;
  v24[0] = v21;
  v23 = MEMORY[0x1E0CE2E70];
  v41[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v18, v42);
  v41[1] = &protocol witness table for AccessibilityContainerModifier;
  v27 = v19;
  v25 = MEMORY[0x18D75FFDC](v23, v19, v41);
  v37 = v16;
  v38 = v19;
  v39 = v20;
  v40 = v25;
  type metadata accessor for StaticSourceWriter();
}

void sub_186E7A2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 344) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v12 - 432) = (char *)&a9 - v15;
  type metadata accessor for ViewInputFlagModifier<IsInLazyContainer>(255);
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 336) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v12 - 416) = (char *)&a9 - v18;
  *(_QWORD *)(v12 - 152) = v10;
  *(_QWORD *)(v12 - 144) = v9;
  *(_QWORD *)(v12 - 136) = *(_QWORD *)(v12 - 264);
  *(_QWORD *)(v12 - 128) = v11;
  type metadata accessor for TabView.TransformEnvironment();
}

void sub_186E7A3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v11 - 392) = a1;
  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 352) = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v11 - 424) = (char *)&a9 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v11 - 384) = (char *)&a9 - v18;
  v19 = *(_QWORD *)(v11 - 312);
  v20 = *(_QWORD *)(v11 - 288);
  (*(void (**)(uint64_t, uint64_t, _QWORD, double))(*(_QWORD *)(v11 - 328) + 16))(v19, v20, *(_QWORD *)(v11 - 296), v17);
  v21 = v20 + *(int *)(v10 + 52);
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_BYTE *)(v21 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)v21, v23);
  v25 = *(_QWORD *)(v11 - 320);
  v26 = v19;
  v27 = *(_QWORD *)(v11 - 264);
  TabViewStyleConfiguration.init(selection:sidebarVisibility:)(v26, v22, v23, v24, v9, v27, v25);
  ResolvedTabView.init(configuration:)(v25, v9, v27, v28, *(_QWORD *)(v11 - 304));
  v29 = *(_QWORD *)(v11 - 440);
  *(_QWORD *)(v11 - 240) = v9;
  *(_QWORD *)(v11 - 232) = v29;
  v30 = *(_QWORD *)(v11 - 448);
  *(_QWORD *)(v11 - 224) = v27;
  *(_QWORD *)(v11 - 216) = v30;
  *(_QWORD *)(v11 - 208) = v20;
  View.viewAlias<A, B>(_:_:)(*(_QWORD *)(v11 - 376), (uint64_t)partial apply for closure #1 in TabView.body.getter);
}

uint64_t sub_186E7A538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 280) + 8))(v1, v3);
  *(_QWORD *)(v7 - 168) = v2;
  *(_QWORD *)(v7 - 160) = &protocol witness table for StaticSourceWriter<A, B>;
  v8 = MEMORY[0x1E0CE2E70];
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7 - 168);
  v10 = lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  v11 = *(_QWORD *)(v7 - 416);
  View.input<A>(_:)((uint64_t)&type metadata for IsInLazyContainer, v6, (uint64_t)&type metadata for IsInLazyContainer, v9, v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 344) + 8))(v4, v6);
  *(_QWORD *)(v7 - 184) = v9;
  *(_QWORD *)(v7 - 176) = &protocol witness table for ViewInputFlagModifier<A>;
  v12 = MEMORY[0x18D75FFDC](v8, v0, v7 - 184);
  v13 = *(_QWORD *)(v7 - 424);
  MEMORY[0x18D75B4AC](v12, v0, *(_QWORD *)(v7 - 392), v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 336) + 8))(v11, v0);
  *(_QWORD *)(v7 - 200) = v12;
  *(_QWORD *)(v7 - 192) = &protocol witness table for TabView<A, B>.TransformEnvironment;
  v14 = MEMORY[0x18D75FFDC](v8, v5, v7 - 200);
  v15 = *(_QWORD *)(v7 - 384);
  static ViewBuilder.buildExpression<A>(_:)(v13, v5, v14);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 352) + 8);
  v16(v13, v5);
  static ViewBuilder.buildBlock<A>(_:)(v15, v5, *(_QWORD *)(v7 - 272));
  return v16(v15, v5);
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PropertiesTransform<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.sizeCategory : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.sizeCategory.getter();
  *a1 = v3;
  return result;
}

uint64_t outlined release of StrokeStyle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v8;
  _BYTE v10[40];
  _BYTE v11[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v6 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        outlined init with copy of AnyHashable(v3, (uint64_t)v11);
        outlined init with copy of AnyHashable(v4, (uint64_t)v10);
        v6 = MEMORY[0x18D75E284](v11, v10);
        outlined destroy of AnyHashable((uint64_t)v10);
        outlined destroy of AnyHashable((uint64_t)v11);
        v8 = v5-- != 0;
        if ((v6 & 1) == 0)
          break;
        v3 += 40;
        v4 += 40;
      }
      while (v8);
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

{
  uint64_t v2;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  int32x2_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v5 = *(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)(a1 + 40) == *(double *)(a2 + 40);
    if (v5 && (static UnitPoint.== infix(_:_:)() & 1) != 0)
    {
      v6 = v2 - 1;
      if (!v6)
        return 1;
      v8 = a2 + 88;
      for (i = a1 + 88; ; i += 32)
      {
        v10 = vmovn_s64(vceqq_f64(*(float64x2_t *)(i - 24), *(float64x2_t *)(v8 - 24)));
        if ((v10.i32[0] & v10.i32[1] & 1) == 0 || (static UnitPoint.== infix(_:_:)() & 1) == 0)
          break;
        v8 += 32;
        result = 1;
        if (!--v6)
          return result;
      }
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _OWORD v7[2];
  uint64_t v8;
  _BYTE v9[40];
  _BYTE v10[24];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[40];
  _BYTE v16[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 32;
  v4 = a2 + 32;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(v3, (uint64_t)v16);
    outlined init with copy of Toolbar.BarLocation(v4, (uint64_t)v15);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v16, (uint64_t)v10);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v15, (uint64_t)&v12);
    switch(v11)
    {
      case 0:
        if (!*((_QWORD *)&v13 + 1))
          goto LABEL_6;
        goto LABEL_41;
      case 1:
        if (*((_QWORD *)&v13 + 1) != 1)
          goto LABEL_41;
        goto LABEL_6;
      case 2:
        if (*((_QWORD *)&v13 + 1) != 2)
          goto LABEL_41;
        goto LABEL_6;
      case 3:
        if (*((_QWORD *)&v13 + 1) != 3)
          goto LABEL_41;
        goto LABEL_6;
      case 4:
        if (*((_QWORD *)&v13 + 1) != 4)
          goto LABEL_41;
        goto LABEL_6;
      case 5:
        if (*((_QWORD *)&v13 + 1) != 5)
          goto LABEL_41;
        goto LABEL_6;
      case 6:
        if (*((_QWORD *)&v13 + 1) != 6)
          goto LABEL_41;
        goto LABEL_6;
      case 7:
        if (*((_QWORD *)&v13 + 1) != 7)
          goto LABEL_41;
        goto LABEL_6;
      case 8:
        if (*((_QWORD *)&v13 + 1) != 8)
          goto LABEL_41;
        goto LABEL_6;
      case 9:
        if (*((_QWORD *)&v13 + 1) != 9)
          goto LABEL_41;
        goto LABEL_6;
      case 10:
        if (*((_QWORD *)&v13 + 1) != 10)
          goto LABEL_41;
        goto LABEL_6;
      case 11:
        if (*((_QWORD *)&v13 + 1) != 11)
          goto LABEL_41;
        goto LABEL_6;
      case 12:
        if (*((_QWORD *)&v13 + 1) != 12)
          goto LABEL_41;
        goto LABEL_6;
      case 13:
        if (*((_QWORD *)&v13 + 1) != 13)
          goto LABEL_41;
        goto LABEL_6;
      case 14:
        if (*((_QWORD *)&v13 + 1) == 14)
          goto LABEL_6;
        goto LABEL_41;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v10, (uint64_t)v9);
        if (*((_QWORD *)&v13 + 1) >= 0xFuLL)
        {
          v7[0] = v12;
          v7[1] = v13;
          v8 = v14;
          v5 = MEMORY[0x18D75E284](v9, v7);
          outlined destroy of AnyHashable((uint64_t)v7);
          outlined destroy of AnyHashable((uint64_t)v9);
          if ((v5 & 1) == 0)
          {
            outlined destroy of Toolbar.BarLocation((uint64_t)v10);
            goto LABEL_42;
          }
LABEL_6:
          outlined destroy of Toolbar.BarLocation((uint64_t)v10);
          outlined destroy of Toolbar.BarLocation((uint64_t)v15);
          outlined destroy of Toolbar.BarLocation((uint64_t)v16);
          v3 += 40;
          v4 += 40;
          if (!--v2)
            return 1;
          continue;
        }
        outlined destroy of AnyHashable((uint64_t)v9);
LABEL_41:
        outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
LABEL_42:
        outlined destroy of Toolbar.BarLocation((uint64_t)v15);
        outlined destroy of Toolbar.BarLocation((uint64_t)v16);
        return 0;
    }
  }
}

{
  uint64_t v2;
  char v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    goto LABEL_7;
  if (!v2 || a1 == a2)
    goto LABEL_6;
  swift_retain();
  swift_retain();
  v5 = static Image.== infix(_:_:)();
  swift_release();
  swift_release();
  if ((v5 & 1) == 0)
  {
LABEL_7:
    v6 = 0;
    return v6 & 1;
  }
  if (v2 == 1)
  {
LABEL_6:
    v6 = 1;
    return v6 & 1;
  }
  v8 = v2 - 2;
  v9 = a1 + 40;
  v10 = a2 + 40;
  do
  {
    v9 += 8;
    v10 += 8;
    swift_retain();
    swift_retain();
    v6 = static Image.== infix(_:_:)();
    swift_release();
    swift_release();
    v12 = v8-- != 0;
  }
  while ((v6 & 1) != 0 && v12);
  return v6 & 1;
}

{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t i;
  int Enum;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  int v18;
  uint64_t v20;
  _OWORD v21[10];
  _BYTE v22[19];
  _OWORD v23[10];
  _BYTE v24[19];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[19];
  _OWORD v47[11];
  uint64_t v48;
  _BYTE v49[184];
  _OWORD v50[15];
  __int128 v51[15];
  __int128 v52[15];
  _OWORD v53[15];
  _OWORD v54[15];
  _OWORD v55[16];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (__int128 *)(a1 + 32);
  v4 = (__int128 *)(a2 + 32);
  for (i = v2 - 1; ; --i)
  {
    outlined init with take of AccessibilityLargeContentViewTree(v3, v51);
    outlined init with take of AccessibilityLargeContentViewTree(v4, v52);
    outlined init with take of AccessibilityLargeContentViewTree(v51, v53);
    outlined init with take of AccessibilityLargeContentViewTree(v52, v54);
    outlined init with take of AccessibilityLargeContentViewTree(v51, v55);
    Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v55);
    if (Enum)
    {
      if (Enum == 1)
      {
        v7 = *(_QWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v55);
        outlined init with take of AccessibilityLargeContentViewTree(v52, v47);
        if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v47) != 1)
          goto LABEL_30;
        v8 = *(_QWORD *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v47);
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
        v9 = specialized static Array<A>.== infix(_:_:)(v7, v8);
        outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v53);
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
        if ((v9 & 1) == 0)
          return 0;
      }
      else
      {
        outlined init with take of AccessibilityLargeContentViewTree(v52, v47);
        if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v47) != 2)
          goto LABEL_30;
        outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v53);
      }
      goto LABEL_27;
    }
    v10 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v55);
    outlined init with take of AccessibilityLargeContentViewTree(v52, v50);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v50))
      goto LABEL_30;
    v11 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v50);
    v12 = *(_QWORD *)(v10 + 8);
    v13 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      if (!v13
        || (*(_QWORD *)v10 != *(_QWORD *)v11 || v12 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_30:
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v53);
        return 0;
      }
    }
    else if (v13)
    {
      goto LABEL_30;
    }
    v14 = MEMORY[0x1E0CE7280];
    outlined init with take of Image.Resolved?(v10 + 16, (uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v49) == 1)
    {
      outlined init with take of Image.Resolved?(v11 + 16, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v14);
      v15 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v47);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
      if (v15 != 1)
        goto LABEL_33;
      goto LABEL_25;
    }
    outlined init with take of Image.Resolved?(v10 + 16, (uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v14);
    outlined init with take of Image.Resolved?(v11 + 16, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v14);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v47) == 1)
      break;
    outlined init with take of Image.Resolved?(v11 + 16, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v14);
    v21[8] = v23[8];
    v21[9] = v23[9];
    *(_OWORD *)v22 = *(_OWORD *)v24;
    *(_DWORD *)&v22[15] = *(_DWORD *)&v24[15];
    v21[4] = v23[4];
    v21[5] = v23[5];
    v21[6] = v23[6];
    v21[7] = v23[7];
    v21[0] = v23[0];
    v21[1] = v23[1];
    v21[2] = v23[2];
    v21[3] = v23[3];
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of Image.Resolved?(v10 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of Image.Resolved?(v10 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
    v16 = specialized static Image.Resolved.== infix(_:_:)((uint64_t)&v36, (uint64_t)v21);
    v33 = v44;
    v34 = v45;
    v35[0] = *(_OWORD *)v46;
    *(_DWORD *)((char *)v35 + 15) = *(_DWORD *)&v46[15];
    v29 = v40;
    v30 = v41;
    v31 = v42;
    v32 = v43;
    v25 = v36;
    v26 = v37;
    v27 = v38;
    v28 = v39;
    outlined release of Image.Resolved((uint64_t)&v25);
    outlined retain of Image.Resolved?(v10 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    if ((v16 & 1) == 0)
      goto LABEL_34;
LABEL_25:
    if (!CGRectEqualToRect(*(CGRect *)(v10 + 200), *(CGRect *)(v11 + 200)))
      goto LABEL_34;
    v17 = *(unsigned __int8 *)(v10 + 232);
    v18 = *(unsigned __int8 *)(v11 + 232);
    outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v53);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
    if (v17 != v18)
      return 0;
LABEL_27:
    if (!i)
      return 1;
    v4 += 15;
    v3 += 15;
  }
  v33 = v44;
  v34 = v45;
  v35[0] = *(_OWORD *)v46;
  *(_DWORD *)((char *)v35 + 15) = *(_DWORD *)&v46[15];
  v29 = v40;
  v30 = v41;
  v31 = v42;
  v32 = v43;
  v25 = v36;
  v26 = v37;
  v27 = v38;
  v28 = v39;
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of Image.Resolved?(v10 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of Image.Resolved?(v10 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
  outlined release of Image.Resolved((uint64_t)&v25);
LABEL_33:
  v20 = MEMORY[0x1E0CE7280];
  outlined init with take of Image.Resolved?(v10 + 16, (uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  outlined init with take of Image.Resolved?(v11 + 16, (uint64_t)&v48, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v20);
  outlined retain of Image.Resolved?(v11 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
  outlined release of (Image.Resolved?, Image.Resolved?)((uint64_t)v47);
LABEL_34:
  outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v53);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v52, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined release of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of AccessibilityLargeContentViewTree);
  return 0;
}

{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *i;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a2 + 48);
    for (i = (_BYTE *)(a1 + 48); ; i += 24)
    {
      if ((*i & 1) != 0)
      {
        if ((*v3 & 1) == 0)
          return 0;
      }
      else if ((*v3 & 1) != 0)
      {
        return 0;
      }
      v5 = *((_QWORD *)i - 2) == *((_QWORD *)v3 - 2) && *((_QWORD *)i - 1) == *((_QWORD *)v3 - 1);
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v3 += 24;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  for (i = 0; ; i += 32)
  {
    result = 0;
    v7 = a1 + i;
    v8 = a2 + i;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(a1 + i + 32), *(int32x4_t *)(a2 + i + 32))), 0xFuLL))) & 1) == 0|| *(_DWORD *)(a1 + i + 48) != *(_DWORD *)(a2 + i + 48)|| *(_DWORD *)(v7 + 52) != *(_DWORD *)(v8 + 52))
    {
      break;
    }
    v9 = *(_QWORD *)(v8 + 56);
    if (*(_QWORD *)(v7 + 56))
    {
      if (!v9)
        return 0;
      swift_retain();
      swift_retain();
      v10 = static Animation.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v10 & 1) == 0)
        return 0;
    }
    else if (v9)
    {
      return 0;
    }
    if (!--v2)
      return 1;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t i;
  char v6;
  char v7;
  float v8;
  char v9;
  float v10;
  float v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  float v16;
  float v17;
  int v18;
  float v19;
  int v20;
  char v21;
  uint64_t result;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  for (i = 0; ; i += 48)
  {
    v7 = *(_BYTE *)(a1 + i + 68);
    v8 = *(float *)(a1 + i + 72);
    v9 = *(_BYTE *)(a1 + i + 76);
    v11 = *(float *)(a1 + i + 60);
    v10 = *(float *)(a1 + i + 64);
    v12 = *(_WORD *)(a1 + i + 56);
    v13 = *(_QWORD *)(a1 + i + 48);
    v14 = *(_QWORD *)(a2 + i + 48);
    v15 = *(_WORD *)(a2 + i + 56);
    v17 = *(float *)(a2 + i + 60);
    v16 = *(float *)(a2 + i + 64);
    v18 = *(unsigned __int8 *)(a2 + i + 68);
    v19 = *(float *)(a2 + i + 72);
    v20 = *(unsigned __int8 *)(a2 + i + 76);
    v27 = *(_OWORD *)(a1 + i + 32);
    v28 = v13;
    v29 = v12;
    v24 = *(_OWORD *)(a2 + i + 32);
    v25 = v14;
    v26 = v15;
    v21 = MEMORY[0x18D7577F8](&v27, &v24);
    result = 0;
    if ((v21 & 1) == 0 || v11 != v17)
      break;
    if ((v7 & 1) != 0)
    {
      if (!v18)
        return 0;
    }
    else
    {
      if (v10 == v16)
        v23 = v18;
      else
        v23 = 1;
      if ((v23 & 1) != 0)
        return 0;
    }
    if ((v9 & 1) != 0)
    {
      if (!v20)
        return 0;
    }
    else
    {
      if (v8 == v19)
        v6 = v20;
      else
        v6 = 1;
      if ((v6 & 1) != 0)
        return 0;
    }
    if (!--v2)
      return 1;
  }
  return result;
}

{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a2 + 64);
    v4 = (_BYTE *)(a1 + 64);
    do
    {
      v5 = *((_QWORD *)v4 - 4);
      v6 = *((_QWORD *)v4 - 3);
      v7 = *((_QWORD *)v3 - 4);
      v8 = *((_QWORD *)v3 - 3);
      if ((*v4 & 1) != 0)
      {
        if ((*v3 & 1) == 0)
          return 0;
        v9 = *((_QWORD *)v4 - 2);
        v10 = *((_QWORD *)v4 - 1);
        v11 = *((_QWORD *)v3 - 2);
        v12 = *((_QWORD *)v3 - 1);
        v13 = v5 == v7 && v6 == v8;
        if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return 0;
        if (v9 != v11 || v10 != v12)
        {
LABEL_5:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return 0;
        }
      }
      else
      {
        if ((*v3 & 1) != 0)
          return 0;
        if (v5 != v7 || v6 != v8)
          goto LABEL_5;
      }
      v3 += 40;
      v4 += 40;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_QWORD *)(a1 + 40);
    v4 = (uint64_t *)(a2 + 40);
    do
    {
      v5 = *v4;
      if (*v3)
      {
        if (!v5)
          return 0;
        v6 = *(v3 - 1) == *(v4 - 1) && *v3 == v5;
        if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return 0;
      }
      else if (v5)
      {
        return 0;
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  _BYTE *v3;
  char *v4;
  void *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  _QWORD v15[2];
  _QWORD v16[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a2 + 48);
    v4 = (char *)(a1 + 48);
    do
    {
      v7 = *((_QWORD *)v4 - 2);
      v6 = (void *)*((_QWORD *)v4 - 1);
      v8 = *v4;
      v10 = *((_QWORD *)v3 - 2);
      v9 = *((_QWORD *)v3 - 1);
      v11 = *v3;
      if (*v4)
      {
        if (v8 == 1)
        {
          if (v11 != 1)
            goto LABEL_21;
          outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v4 - 2), *((void **)v4 - 1), 1);
          outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          outlined copy of AccessibilityAttachment.Tree(v7, v6, 1);
          outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          v12 = specialized static Array<A>.== infix(_:_:)(v7, v10);
          outlined consume of AccessibilityAttachment.Tree(v7, v6, 1);
          outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          outlined consume of AccessibilityAttachment.Tree(v7, v6, 1);
          if ((v12 & 1) == 0)
            return 0;
        }
        else
        {
          if (v11 != 2 || (v9 | v10) != 0)
          {
LABEL_21:
            outlined copy of AccessibilityAttachment.Tree(*((_QWORD *)v4 - 2), *((void **)v4 - 1), *v4);
            outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, v11);
            outlined consume of AccessibilityAttachment.Tree(v7, v6, v8);
            outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, v11);
            return 0;
          }
          outlined consume of AccessibilityAttachment.Tree(*((_QWORD *)v4 - 2), *((void **)v4 - 1), 2);
          outlined consume of AccessibilityAttachment.Tree(0, 0, 2);
        }
      }
      else
      {
        if (*v3)
          goto LABEL_21;
        v16[0] = *((_QWORD *)v4 - 2);
        v16[1] = v6;
        v15[0] = v10;
        v15[1] = v9;
        outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined copy of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined copy of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined copy of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        v13 = MEMORY[0x18D75A1E0](v16, v15);
        outlined consume of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined consume of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined consume of AccessibilityAttachment.Tree(v7, v6, 0);
        if ((v13 & 1) == 0)
          return 0;
      }
      v3 += 24;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  _OWORD v19[11];
  uint64_t v20;
  _OWORD v21[11];
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        v6 = v5;
        v7 = *(_OWORD *)(v3 + 144);
        v21[8] = *(_OWORD *)(v3 + 128);
        v21[9] = v7;
        v21[10] = *(_OWORD *)(v3 + 160);
        v22 = *(_QWORD *)(v3 + 176);
        v8 = *(_OWORD *)(v3 + 80);
        v21[4] = *(_OWORD *)(v3 + 64);
        v21[5] = v8;
        v9 = *(_OWORD *)(v3 + 112);
        v21[6] = *(_OWORD *)(v3 + 96);
        v21[7] = v9;
        v10 = *(_OWORD *)(v3 + 16);
        v21[0] = *(_OWORD *)v3;
        v21[1] = v10;
        v11 = *(_OWORD *)(v3 + 48);
        v21[2] = *(_OWORD *)(v3 + 32);
        v21[3] = v11;
        v12 = *(_OWORD *)(v4 + 144);
        v19[8] = *(_OWORD *)(v4 + 128);
        v19[9] = v12;
        v19[10] = *(_OWORD *)(v4 + 160);
        v20 = *(_QWORD *)(v4 + 176);
        v13 = *(_OWORD *)(v4 + 80);
        v19[4] = *(_OWORD *)(v4 + 64);
        v19[5] = v13;
        v14 = *(_OWORD *)(v4 + 112);
        v19[6] = *(_OWORD *)(v4 + 96);
        v19[7] = v14;
        v15 = *(_OWORD *)(v4 + 16);
        v19[0] = *(_OWORD *)v4;
        v19[1] = v15;
        v16 = *(_OWORD *)(v4 + 48);
        v19[2] = *(_OWORD *)(v4 + 32);
        v19[3] = v16;
        v17 = static AccessibilityNodeProxy.== infix(_:_:)(v21, v19);
        if ((v17 & 1) == 0)
          break;
        v5 = v6 - 1;
        v4 += 184;
        v3 += 184;
      }
      while (v6);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_QWORD *)(a1 + 32);
    for (i = (_QWORD *)(a2 + 32); ; ++i)
    {
      if (*v3 != *i)
      {
        swift_retain();
        swift_retain();
        v5 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        swift_release();
        if ((v5 & 1) == 0)
          break;
      }
      ++v3;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v10;
  _BYTE v12[48];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v8 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        outlined init with copy of AnyAccessibilityAction(v3, (uint64_t)v13);
        outlined init with copy of AnyAccessibilityAction(v4, (uint64_t)v12);
        v6 = v14;
        v7 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        v8 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 88))(v12, v6, v7);
        outlined destroy of AnyAccessibilityAction((uint64_t)v12);
        outlined destroy of AnyAccessibilityAction((uint64_t)v13);
        v10 = v5-- != 0;
        if ((v8 & 1) == 0)
          break;
        v4 += 48;
        v3 += 48;
      }
      while (v10);
    }
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v6 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = a2 + 40;
      v5 = a1 + 40;
      do
      {
        v6 = static ScrollPhaseState.== infix(_:_:)();
        v8 = v3-- != 0;
        if ((v6 & 1) == 0)
          break;
        v4 += 24;
        v5 += 24;
      }
      while (v8);
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  BOOL v23;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for UTType();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x1E0C80A78](v8, v9);
  v13 = (char *)&v25 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14 == *(_QWORD *)(a2 + 16))
  {
    if (!v14 || a1 == a2)
    {
      v20 = 1;
    }
    else
    {
      v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v25 = *(_QWORD *)(v10 + 72);
      v26 = v10;
      v16 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16);
      v17 = v14 - 1;
      do
      {
        v18 = a1;
        v16(v13, a1 + v15, v4, v11);
        v19 = a2;
        ((void (*)(char *, unint64_t, uint64_t))v16)(v7, a2 + v15, v4);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UTType and conformance UTType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0340], MEMORY[0x1E0DF0360]);
        v20 = dispatch thunk of static Equatable.== infix(_:_:)();
        v21 = *(void (**)(char *, uint64_t))(v26 + 8);
        v21(v7, v4);
        v21(v13, v4);
        v23 = v17-- != 0;
        if ((v20 & 1) == 0)
          break;
        v15 += v25;
        a2 = v19;
        a1 = v18;
      }
      while (v23);
    }
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

void key path getter for EnvironmentValues.listRowInsets : EnvironmentValues(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.listRowInsets.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

double EnvironmentValues.listRowInsets.getter()
{
  return EnvironmentValues.listRowInsets.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>, (uint64_t)&type metadata for ListRowInsetsKey, (uint64_t)&protocol witness table for ListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

void @objc _UIHostingView.safeAreaInsetsDidChange()(void *a1)
{
  id v1;

  v1 = a1;
  _UIHostingView.safeAreaInsetsDidChange()();

}

Swift::Void __swiftcall _UIHostingView._safeAreaInsetsDidChange()()
{
  if (_UIHostingView.safeAreaRegions.getter() || (static Semantics.v7.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
    _UIHostingView.viewController.getter();
}

void UIHostingController.updateWindowSceneSizeRestrictions()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BOOL8 v27;
  double v28;
  char v29;
  CGSize_optional v30;
  CGSize_optional v31;

  specialized UIHostingController.host.getter();
  v1 = _UIHostingView.sceneBridge.getter();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, sel_viewIfLoaded);
    if (v3
      && (v4 = v3, v5 = objc_msgSend(v3, sel_window), v4, v5)
      && (v22 = objc_msgSend(v5, sel_windowScene), v5, v22))
    {
      v6 = objc_msgSend(v22, sel_sizeRestrictions);
      if (v6)
      {
        v8 = *(_QWORD *)(v2 + 144);
        v9 = *(_QWORD *)(v2 + 136);
        v10 = *(_QWORD *)(v2 + 152);
        v21 = v6;
        if ((*(_BYTE *)(v2 + 161) & 1) != 0)
        {
          if ((v10 | v8 | v9 || *(_BYTE *)(v2 + 160)) && !*(_BYTE *)(v2 + 160) && v9 == 1 && !(v10 | v8))
          {
            swift_release();

          }
          else
          {
            v27 = 0;
            v28 = 0.0;
            v11 = 1;
            v29 = 1;
            v24 = 0;
            v25 = 0;
            v26 = 1;
            UIHostingController.sizingOptions.getter(&v23);
            v12 = v23 & 4;
            v13 = UIHostingController.sizingOptions.getter(&v23);
            if (v12 | v23 & 8)
            {
              MEMORY[0x1E0C80A78](v13, v14);
              static Update.ensure<A>(_:)();
              v15 = v27;
              v16 = *(_QWORD *)&v28;
              v17 = v29;
              v18 = v24;
              v19 = v25;
              v11 = v26;
            }
            else
            {
              v19 = 0;
              v18 = 0;
              v16 = 0;
              v15 = 0;
              v17 = 1;
            }
            specialized static SceneBridge.applySizes(min:max:toRestrictions:)(v15, v16, v17, v18, v19, v11, v21);
            swift_release();

          }
        }
        else
        {
          MEMORY[0x1E0C80A78](v6, v7);
          type metadata accessor for CGSize(0);
          static Update.ensure<A>(_:)();
          objc_msgSend((id)specialized UIHostingController.host.getter(), sel_safeAreaInsets);
          v30.value.height = v28;
          v30.value.width = v28 + v20;
          v30.is_nil = v27;
          v31.is_nil = LOBYTE(v30.value.width);
          SceneBridge.updateWindowSizeRestrictions(min:max:)(v30, v31);

          *(_QWORD *)(v2 + 136) = 1;
          *(_QWORD *)(v2 + 144) = 0;
          *(_QWORD *)(v2 + 152) = 0;
          *(_BYTE *)(v2 + 160) = 0;
          *(_BYTE *)(v2 + 161) = 1;
          swift_release();
        }
      }
      else
      {
        swift_release();

      }
    }
    else
    {
      swift_release();
    }
  }
}

Swift::Void __swiftcall UIHostingController._viewSafeAreaDidChange()()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  v1 = v0;
  v2 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v2)
  {
    v3 = v2;
    ToolbarBridge.safeAreaDidChange<A>(hostingController:)(v1);

  }
  UIHostingController.updateWindowSceneSizeRestrictions()();
}

void ToolbarBridge.safeAreaDidChange<A>(hostingController:)(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[6];

  v1 = objc_msgSend(a1, sel_transitionCoordinator);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_viewControllerForKey_, *MEMORY[0x1E0DC55B8]);
    if (v3)
    {
      v4 = v3;
      objc_opt_self();
      v5 = swift_dynamicCastObjCClass();
      if (!v5)

    }
    else
    {
      v5 = 0;
    }
    v6 = objc_msgSend(v2, sel_viewControllerForKey_, *MEMORY[0x1E0DC55C8]);
    if (v6)
    {
      v7 = v6;
      objc_opt_self();
      v8 = swift_dynamicCastObjCClass();
      if (!v8)

      if (v8 | v5)
        goto LABEL_10;
    }
    else
    {
      v8 = 0;
      if (v5)
      {
LABEL_10:
        v9 = Toolbar.PlatformVended.uiSafeAreaTransitionState.getter();
        v10 = *(_QWORD *)(v9 + 16);
        v11 = __OFADD__(v10, 1);
        v12 = v10 + 1;
        if (v11)
        {
          __break(1u);
        }
        else
        {
          *(_QWORD *)(v9 + 16) = v12;
          v14[4] = partial apply for closure #1 in ToolbarBridge.safeAreaDidChange<A>(hostingController:);
          v14[5] = v9;
          v14[0] = MEMORY[0x1E0C809B0];
          v14[1] = 1107296256;
          v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
          v14[3] = &block_descriptor_109_0;
          v13 = _Block_copy(v14);
          swift_retain();
          swift_release();
          objc_msgSend(v2, sel_animateAlongsideTransition_completion_, 0, v13);
          _Block_release(v13);
          swift_unknownObjectRelease();
          swift_release();

        }
        return;
      }
    }
    swift_unknownObjectRelease();
  }
}

uint64_t @objc UIHostingController.prefersStatusBarHidden.getter(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = UIHostingController.prefersStatusBarHidden.getter();

  return v2 & 1;
}

uint64_t UIHostingController._prefersStatusBarHidden.getter()
{
  specialized UIHostingController.host.getter();
  return _UIHostingView.prefersStatusBarHidden.getter() & 1;
}

void @objc _UIHostingView.__ivar_destroyer(char *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x50) - 8) + 8))(&a1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x60)]);
  swift_release();
  swift_release();
  swift_release();

  outlined consume of EnvironmentValues?(*(_QWORD *)&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0x110)]);
  outlined consume of EnvironmentValues?(*(_QWORD *)&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0x118)]);
  outlined consume of EnvironmentValues?(*(_QWORD *)&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0x120)]);

  swift_unknownObjectWeakDestroy();
  swift_release();

  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(*(id *)&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1)
                                                                                              + 0x198)]);
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&a1[*(_QWORD *)((*v2 & *(_QWORD *)a1) + 0x240)]);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

}

id @objc ContextMenuBridge.__deallocating_deinit(void *a1)
{
  id v1;

  v1 = a1;
  return ContextMenuBridge.__deallocating_deinit();
}

id ContextMenuBridge.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  void *v3;
  id v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = *(_QWORD *)&v0[direct field offset for ContextMenuBridge.inspectorBridgeToken];
  if (v2)
  {
    v3 = (void *)objc_opt_self();
    swift_unknownObjectRetain();
    v4 = objc_msgSend(v3, sel_defaultCenter);
    objc_msgSend(v4, sel_removeObserver_, v2);
    swift_unknownObjectRelease();

  }
  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

uint64_t key path getter for EnvironmentValues.menuOrder : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.menuOrder.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t static _TaskModifier._makeViewList(modifier:inputs:body:)()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<_TaskModifier>, type metadata accessor for _TaskModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TaskModifier.InnerModifier(0);
  lazy protocol witness table accessor for type _TaskModifier.Child and conformance _TaskModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier, type metadata accessor for _TaskModifier.InnerModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier.InnerModifier);
  return static ViewModifier.makeViewList(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type _TaskModifier.Child and conformance _TaskModifier.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child;
  if (!lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskModifier.Child, &unk_1E1AB76D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child;
  if (!lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskModifier.Child, &unk_1E1AB76D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child);
  }
  return result;
}

Swift::Void __swiftcall UpdateCoalescingCollectionView.layoutSubviews()()
{
  char *v0;
  id (*v1)();
  char *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[6];
  objc_super v14;

  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
  v1 = 0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  if ((v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate] & 1) == 0)
    goto LABEL_8;
  if (!objc_msgSend(v0, sel_dataSource))
  {
    v1 = 0;
    goto LABEL_8;
  }
  swift_unknownObjectRelease();
  v3 = *((_QWORD *)v2 + 1);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  *((_QWORD *)v2 + 1) = v5;
  v6 = objc_opt_self();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v0;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in UpdateCoalescingCollectionView.layoutSubviews();
  *(_QWORD *)(v8 + 24) = v7;
  v13[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  v13[3] = &block_descriptor_42_1;
  v9 = _Block_copy(v13);
  v10 = v0;
  swift_retain();
  swift_release();
  objc_msgSend((id)v6, sel_performWithoutAnimation_, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v6 & 1) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = *((_QWORD *)v2 + 1);
  v4 = __OFSUB__(v11, 1);
  v12 = v11 - 1;
  if (!v4)
  {
    *((_QWORD *)v2 + 1) = v12;
    v1 = partial apply for closure #1 in UpdateCoalescingCollectionView.layoutSubviews();
LABEL_8:
    UpdateCoalescingCollectionView.updateContent()();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t UpdateCoalescingCollectionView.updateContent()()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  NSIndexPath v28;
  uint64_t v29;
  _BYTE v30[16];
  _BYTE *v31;
  CGRect v32;
  CGRect v33;

  v1 = v0;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v30[-v5];
  v7 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BridgedListState?, type metadata accessor for BridgedListState, v2);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v30[-v14];
  v16 = type metadata accessor for BridgedListState(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = &v30[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = v1;
  static Update.ensure<A>(_:)();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v21 = &lazy cache variable for type metadata for BridgedListState?;
    v22 = type metadata accessor for BridgedListState;
    v23 = (uint64_t)v15;
LABEL_7:
    result = outlined destroy of TaskPriority?(v23, v21, v22);
LABEL_18:
    v27 = 0;
    goto LABEL_19;
  }
  outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v20, type metadata accessor for BridgedListState);
  v24 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed];
  swift_beginAccess();
  v25 = *(_DWORD *)&v20[*(int *)(v16 + 28)];
  if (*(_DWORD *)(v24 + 16) == v25
    && v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] != 1)
  {
LABEL_17:
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for BridgedListState);
    goto LABEL_18;
  }
  *(_DWORD *)(v24 + 16) = v25;
  outlined init with copy of BridgedListState.ScrollTarget?((uint64_t)&v20[*(int *)(v16 + 20)], (uint64_t)v6);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for BridgedListState);
    v21 = &lazy cache variable for type metadata for BridgedListState.ScrollTarget?;
    v22 = type metadata accessor for BridgedListState.ScrollTarget;
    v23 = (uint64_t)v6;
    goto LABEL_7;
  }
  outlined init with take of TableCellFormula((uint64_t)v6, (uint64_t)v11, type metadata accessor for BridgedListState.ScrollTarget);
  objc_msgSend(v1, sel_bounds);
  v33.origin.x = 0.0;
  v33.origin.y = 0.0;
  v33.size.width = 0.0;
  v33.size.height = 0.0;
  if (!CGRectEqualToRect(v32, v33))
  {
    v28.super.isa = IndexPath._bridgeToObjectiveC()().super.isa;
    if ((v11[*(int *)(v7 + 20) + 16] & 1) != 0)
    {
      v29 = 0;
    }
    else
    {
      static UnitPoint.bottom.getter();
      if ((static UnitPoint.== infix(_:_:)() & 1) != 0
        || (static UnitPoint.bottomLeading.getter(), (static UnitPoint.== infix(_:_:)() & 1) != 0)
        || (static UnitPoint.bottomTrailing.getter(), (static UnitPoint.== infix(_:_:)() & 1) != 0))
      {
        v29 = 4;
      }
      else
      {
        static UnitPoint.top.getter();
        if ((static UnitPoint.== infix(_:_:)() & 1) != 0
          || (static UnitPoint.topLeading.getter(), (static UnitPoint.== infix(_:_:)() & 1) != 0))
        {
          v29 = 1;
        }
        else
        {
          static UnitPoint.topTrailing.getter();
          if ((static UnitPoint.== infix(_:_:)() & 1) != 0)
            v29 = 1;
          else
            v29 = 2;
        }
      }
    }
    objc_msgSend(v1, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, v28.super.isa, v29, v11[*(int *)(v7 + 24)]);

    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for BridgedListState.ScrollTarget);
    goto LABEL_17;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for BridgedListState.ScrollTarget);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, type metadata accessor for BridgedListState);
  v27 = 1;
LABEL_19:
  v1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] = v27;
  return result;
}

uint64_t BridgedListState.CommitMutation.combine<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  _QWORD v37[2];

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v37 - v10;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.CommitMutation?, (void (*)(uint64_t))type metadata accessor for BridgedListState.CommitMutation);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v37 - v14;
  v16 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BridgedListState.CommitMutation(0);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, a1, a2, v24);
  v27 = swift_dynamicCast();
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  if ((v27 & 1) == 0)
  {
    v28(v15, 1, 1, v21);
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for BridgedListState.CommitMutation?, (uint64_t)type metadata accessor for BridgedListState.CommitMutation, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    return 0;
  }
  v28(v15, 0, 1, v21);
  outlined init with take of TableCellFormula((uint64_t)v15, (uint64_t)v26, type metadata accessor for BridgedListState.CommitMutation);
  v29 = v37[1];
  v30 = type metadata accessor for BridgedListState(0);
  if ((static WeakAttribute.== infix(_:_:)() & 1) == 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, type metadata accessor for BridgedListState.CommitMutation);
    return 0;
  }
  v31 = v29 + *(int *)(v21 + 20);
  v32 = v31 + *(int *)(v30 + 20);
  outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v32, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  outlined assign with take of BridgedListState((uint64_t)&v26[*(int *)(v21 + 20)], v31);
  v33 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48);
  if (v34(v11, 1, v33) != 1)
  {
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v32, (uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    v35 = v34(v7, 1, v33);
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    if (v35 == 1)
      outlined assign with copy of BridgedListState.ScrollTarget?((uint64_t)v11, v32);
  }
  outlined destroy of UIBackgroundConfiguration?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  return 1;
}

uint64_t outlined init with copy of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for BridgedListState(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BridgedListState);
}

uint64_t outlined init with take of TableCellFormula(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BridgedListState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for BridgedListState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_QWORD *initializeWithCopy for BridgedListState.CommitMutation(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for BridgedListState(0);
  v8 = v7[5];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, v10, v14);
    v15 = *(int *)(v11 + 20);
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v18 = v7[6];
  v19 = &v5[v18];
  v20 = &v6[v18];
  v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  v22 = *((_OWORD *)v20 + 3);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v22;
  v19[112] = v20[112];
  v23 = *((_OWORD *)v20 + 6);
  v24 = *((_OWORD *)v20 + 4);
  *((_OWORD *)v19 + 5) = *((_OWORD *)v20 + 5);
  *((_OWORD *)v19 + 6) = v23;
  *((_OWORD *)v19 + 4) = v24;
  *(_DWORD *)&v5[v7[7]] = *(_DWORD *)&v6[v7[7]];
  return a1;
}

_QWORD *initializeWithCopy for BridgedListState(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v7, v8, v12);
    v13 = *(int *)(v9 + 20);
    v14 = &v7[v13];
    v15 = &v8[v13];
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v16 = a3[6];
  v17 = a3[7];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  v18[112] = v19[112];
  v20 = *((_OWORD *)v19 + 6);
  v21 = *((_OWORD *)v19 + 4);
  *((_OWORD *)v18 + 5) = *((_OWORD *)v19 + 5);
  *((_OWORD *)v18 + 6) = v20;
  v22 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v22;
  v23 = *((_OWORD *)v19 + 3);
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  *((_OWORD *)v18 + 3) = v23;
  *((_OWORD *)v18 + 4) = v21;
  *(_DWORD *)((char *)a1 + v17) = *(_DWORD *)((char *)a2 + v17);
  return a1;
}

uint64_t destroy for BridgedListState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for BridgedListState.ScrollTarget(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = type metadata accessor for IndexPath();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BridgedListState.ScrollTarget()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for BridgedListState.ScrollTarget(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BridgedListState.ScrollTarget);
}

uint64_t destroy for BridgedListState.CommitMutation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = v2 + *(int *)(type metadata accessor for BridgedListState(0) + 20);
  v4 = type metadata accessor for BridgedListState.ScrollTarget(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  if (!(_DWORD)result)
  {
    v6 = type metadata accessor for IndexPath();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  }
  return result;
}

uint64_t BridgedListState.commit(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  id v9;
  _BYTE v10[16];

  v2 = v1;
  v4 = type metadata accessor for BridgedListState.CommitMutation(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
  {
    v9 = (id)AGGraphGetAttributeGraph();
    AGGraphRef.viewGraph()();

    outlined init with copy of BridgedListState(v2, (uint64_t)v7 + *(int *)(v4 + 20));
    *v7 = a1;
    v10[15] = 1;
    lazy protocol witness table accessor for type BridgedListState.CommitMutation and conformance BridgedListState.CommitMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for BridgedListState.CommitMutation);
  }
  return result;
}

uint64_t outlined init with copy of BridgedListState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BridgedListState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BridgedListState.ScrollTarget()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t outlined assign with copy of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of BridgedListState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BridgedListState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *assignWithTake for BridgedListState(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      v15 = type metadata accessor for IndexPath();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v7, v8, v15);
      v16 = *(int *)(v9 + 20);
      v17 = &v7[v16];
      v18 = &v8[v16];
      *(_OWORD *)v17 = *(_OWORD *)v18;
      v17[16] = v18[16];
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_9;
    }
  }
  else
  {
    if (!v13)
    {
      v19 = type metadata accessor for IndexPath();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v7, v8, v19);
      v20 = *(int *)(v9 + 20);
      v21 = &v7[v20];
      v22 = &v8[v20];
      *(_OWORD *)v21 = *(_OWORD *)v22;
      v21[16] = v22[16];
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      goto LABEL_9;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for BridgedListState.ScrollTarget);
  }
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_9:
  v23 = a3[6];
  v24 = a3[7];
  v25 = (char *)a1 + v23;
  v26 = (char *)a2 + v23;
  v25[112] = v26[112];
  v27 = *((_OWORD *)v26 + 6);
  v28 = *((_OWORD *)v26 + 4);
  *((_OWORD *)v25 + 5) = *((_OWORD *)v26 + 5);
  *((_OWORD *)v25 + 6) = v27;
  v29 = *((_OWORD *)v26 + 1);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v29;
  v30 = *((_OWORD *)v26 + 3);
  *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
  *((_OWORD *)v25 + 3) = v30;
  *((_OWORD *)v25 + 4) = v28;
  *(_DWORD *)((char *)a1 + v24) = *(_DWORD *)((char *)a2 + v24);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BridgedListState.CommitMutation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for BridgedListState.CommitMutation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BridgedListState.CommitMutation);
}

uint64_t outlined destroy of Binding<AttributedString>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t UIHostingController.rootView.getter@<X0>(uint64_t a1@<X8>)
{
  return CoreCoordinator.dataSource.getter(a1);
}

uint64_t CoreCoordinator.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x60);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier.value.getter()
{
  char v0;
  char v1;
  char v3;

  if (*(_QWORD *)(AGGraphGetValue() + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  AGGraphGetValue();
  v0 = EnvironmentValues.accessibilityInvertColors.getter();
  v1 = 0;
  if ((v0 & 1) != 0)
    v1 = v3 ^ *(_BYTE *)AGGraphGetValue();
  return v1 & 1;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v16;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  v13 = a4;
  v14 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(v13, (uint64_t)v11);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void @objc _UIHostingView.tintColorDidChange()(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(2, v1, v2, v3);

}

uint64_t @objc _UIHostingView.windowDidMoveToScene(notification:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v13;

  v6 = type metadata accessor for Notification();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a1;
  a4();

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void _UIHostingView.sceneDidActivate(notification:)()
{
  _UIHostingView.sceneActivationStateDidChange(with:)(1u);
}

void @objc PlatformViewHost._updateSafeAreaInsets()(void *a1)
{
  id v1;

  v1 = a1;
  PlatformViewHost._updateSafeAreaInsets()();

}

Swift::Void __swiftcall PlatformViewHost._updateSafeAreaInsets()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v23;
  void *v24;
  objc_super v25;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = *(_QWORD *)v0;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *MEMORY[0x1E0DEEDD8];
  specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)((uint64_t)v0, (uint64_t)ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = UIView.SafeAreaHelper.prepareForSafeAreaPropagation<A>(delegate:)((uint64_t)v0, (uint64_t)ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
  v25.receiver = v0;
  v25.super_class = ObjectType;
  objc_msgSendSuper2(&v25, sel__updateSafeAreaInsets, v14);
  v15 = swift_getObjectType();
  specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)((uint64_t)v0, v15, (uint64_t)&protocol witness table for PlatformViewHost<A>);
  if (v7 != v19 || v9 != v16 || v11 != v17 || v13 != v18)
  {
    if (((*(uint64_t (**)(void))(*(_QWORD *)((v5 & v3) + 0x58) + 128))() & 1) != 0)
    {
      v23 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)((*v4 & *(_QWORD *)v0) + 0x58) + 72))(&v0[*(_QWORD *)((*v4 & *(_QWORD *)v0) + 0x78)]);
      objc_msgSend(v23, sel__setViewDelegateContentOverlayInsetsAreClean_, 0);

    }
    v24 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)((*v4 & *(_QWORD *)v1) + 0x58) + 72))(&v1[*(_QWORD *)((*v4 & *(_QWORD *)v1) + 0x78)]);
    objc_msgSend(v24, sel__updateSafeAreaInsets);

  }
}

double @objc PlatformViewHost.safeAreaInsets.getter(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  PlatformViewHost.safeAreaInsets.getter();
  v3 = v2;

  return v3;
}

uint64_t PlatformViewHost.safeAreaInsets.getter()
{
  uint64_t v0;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)(v0, ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
}

double PlatformViewHost._safeAreaInsets.getter()
{
  _QWORD *v0;

  return *(double *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8));
}

id protocol witness for SafeAreaHelperDelegate.defaultSafeAreaInsets.getter in conformance HostingScrollView.PlatformContainer()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_safeAreaInsets);
}

double UIView.SafeAreaHelper.prepareForSafeAreaPropagation<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(a1, a2, a3);
  if ((*(_BYTE *)(v3 + 48) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, double, double, double, double))(a3 + 16))(a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 24), *(double *)(v3 + 32), *(double *)(v3 + 40));
    result = 0.0;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_BYTE *)(v3 + 48) = 1;
  }
  return result;
}

void UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v7)(uint64_t, uint64_t);
  void *v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BYTE *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double (*v23)(uint64_t, uint64_t);
  double v24;
  double v25;
  double v26;
  void *v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  double v40;
  double v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  void *v61;
  double v62;
  CGFloat v63;
  double v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  double v70;
  double v71;
  double MinX;
  double v73;
  BOOL v74;
  double v75;
  double MinY;
  double v78;
  CGFloat MaxX;
  double v80;
  double v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  __n128 v85;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;

  v4 = v3;
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  v8 = (void *)v7(a2, a3);
  v9 = objc_msgSend(v8, sel_superview);

  if (v9)
  {
    objc_msgSend(v9, sel_safeAreaInsets);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) & 1) != 0 && (*(_BYTE *)(v3 + 88) & 1) == 0)
    {
      v18 = (_BYTE *)(v3 + 88);
      v19 = *(double *)(v3 + 72);
      v20 = *(double *)(v3 + 80);
      v21 = *(double *)(v3 + 56);
      v22 = *(double *)(v3 + 64);
      if ((*(_BYTE *)(v3 + 48) & 1) != 0)
      {
        v23 = *(double (**)(uint64_t, uint64_t))(a3 + 8);
        if (v23(a2, a3) == 1.79769313e308 && v24 == 1.79769313e308 && v25 == 1.79769313e308 && v26 == 1.79769313e308)
        {

        }
        else
        {
          v57 = v23(a2, a3);
          v99 = v58;
          v101 = v57;
          v95 = v60;
          v97 = v59;
          v61 = (void *)v7(a2, a3);
          objc_msgSend(v61, sel_frame);
          v112 = v20;
          v115 = v19;
          v63 = v62;
          v65 = v64;
          v104 = v22;
          v108 = v21;
          v67 = v66;
          v69 = v68;

          objc_msgSend(v9, sel_bounds);
          v91 = v70;
          v93 = v71;
          v121.origin.x = v63;
          v121.origin.y = v65;
          v121.size.width = v67;
          v121.size.height = v69;
          MinX = CGRectGetMinX(v121);
          v116 = v15;
          v73 = v17;
          v74 = fabs(v13) < 0.25 || MinX > 0.0;
          v75 = v13 - v104;
          if (v74)
            v75 = 0.0;
          v105 = v75;
          v122.origin.x = v63;
          v122.origin.y = v65;
          v122.size.width = v67;
          v122.size.height = v69;
          MinY = CGRectGetMinY(v122);
          if (fabs(v11) < 0.25 || MinY > 0.0)
            v78 = 0.0;
          else
            v78 = v11 - v108;
          v123.origin.x = v63;
          v123.origin.y = v65;
          v123.size.width = v67;
          v123.size.height = v69;
          MaxX = CGRectGetMaxX(v123);
          v109 = v73;
          v80 = v73 - v112;
          v15 = v116;
          v39 = v91 > MaxX;
          v81 = 0.0;
          if (!v39)
            v81 = v80;
          v113 = v81;
          v124.origin.x = v63;
          v124.origin.y = v65;
          v124.size.width = v67;
          v124.size.height = v69;
          v39 = v93 > CGRectGetMaxY(v124);
          v85.n128_u64[0] = 0;
          if (!v39)
            v85.n128_f64[0] = v116 - v115;
          if (v78 == *MEMORY[0x1E0DC49E8]
            && v105 == *(double *)(MEMORY[0x1E0DC49E8] + 8)
            && v85.n128_f64[0] == *(double *)(MEMORY[0x1E0DC49E8] + 16)
            && v113 == *(double *)(MEMORY[0x1E0DC49E8] + 24))
          {
            v84.n128_f64[0] = v95;
            v83.n128_f64[0] = v97;
            v82.n128_f64[0] = v99;
            v85.n128_f64[0] = v101;
          }
          else
          {
            v84.n128_f64[0] = v95 + v113;
            v83.n128_f64[0] = v97 + v85.n128_f64[0];
            v82.n128_f64[0] = v99 + v105;
            v85.n128_f64[0] = v101 + v78;
          }
          (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(a3 + 16))(a2, a3, v85, v82, v83, v84);

          v17 = v109;
        }
      }
      else
      {
        v92 = *(double *)(v3 + 32);
        v94 = *(double *)(v3 + 40);
        v89 = *(double *)(v3 + 16);
        v90 = *(double *)(v3 + 24);
        v27 = (void *)v7(a2, a3);
        objc_msgSend(v27, sel_frame);
        v110 = v20;
        v114 = v19;
        v29 = v28;
        v31 = v30;
        v102 = v22;
        v106 = v21;
        v33 = v32;
        v35 = v34;

        objc_msgSend(v9, sel_bounds);
        v98 = v36;
        v100 = v37;
        v117.origin.x = v29;
        v117.origin.y = v31;
        v117.size.width = v33;
        v117.size.height = v35;
        v38 = CGRectGetMinX(v117);
        v39 = fabs(v13) < 0.25 || v38 > 0.0;
        v40 = v13 - v102;
        if (v39)
          v40 = 0.0;
        v103 = v40;
        v118.origin.x = v29;
        v118.origin.y = v31;
        v118.size.width = v33;
        v118.size.height = v35;
        v41 = CGRectGetMinY(v118);
        v42 = fabs(v11) < 0.25 || v41 > 0.0;
        v43 = v11 - v106;
        if (v42)
          v43 = 0.0;
        v96 = v43;
        v119.origin.x = v29;
        v119.origin.y = v31;
        v119.size.width = v33;
        v119.size.height = v35;
        if (v98 > CGRectGetMaxX(v119))
          v44 = 0.0;
        else
          v44 = v17 - v110;
        v107 = v17;
        v111 = v44;
        v120.origin.x = v29;
        v120.origin.y = v31;
        v120.size.width = v33;
        v120.size.height = v35;
        if (v100 > CGRectGetMaxY(v120))
          v45 = 0.0;
        else
          v45 = v15 - v114;
        v46 = *MEMORY[0x1E0DC49E8];
        v47 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
        v48 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
        v49 = *(double *)(MEMORY[0x1E0DC49E8] + 24);

        if (v96 == v46 && v103 == v47 && v45 == v48 && v111 == v49)
        {
          v17 = v107;
          v55 = v92;
          v54 = v94;
          v53 = v89;
          v56 = v90;
        }
        else
        {
          v53 = v89 + v96;
          v54 = v94 + v111;
          v55 = v92 + v45;
          v56 = v90 + v103;
          v17 = v107;
        }
        *(double *)(v4 + 16) = v53;
        *(double *)(v4 + 24) = v56;
        *(double *)(v4 + 32) = v55;
        *(double *)(v4 + 40) = v54;
        *(_BYTE *)(v4 + 48) = 0;
      }
      *(double *)(v4 + 56) = v11;
      *(double *)(v4 + 64) = v13;
    }
    else
    {

      *(double *)(v3 + 56) = v11;
      *(double *)(v3 + 64) = v13;
      v18 = (_BYTE *)(v3 + 88);
    }
    *(double *)(v4 + 72) = v15;
    *(double *)(v4 + 80) = v17;
    *v18 = 0;
  }
}

id protocol witness for SafeAreaHelperDelegate.containerView.getter in conformance PlatformViewHost<A>()
{
  swift_getObjectType();
  return (id)FocusStoreLocation.id.getter();
}

uint64_t PlatformViewHost.shouldEagerlyUpdateSafeArea.getter()
{
  char *v0;

  return (*(uint64_t (**)(char *))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x58) + 136))(&v0[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x78)]) & 1;
}

uint64_t protocol witness for static PlatformViewRepresentable.shouldEagerlyUpdateSafeArea(_:) in conformance ListRepresentable<A, B>(char **a1)
{
  return static ListRepresentable.shouldEagerlyUpdateSafeArea(_:)(*a1);
}

{
  return static ListRepresentable.shouldEagerlyUpdateSafeArea(_:)(*a1);
}

uint64_t static ListRepresentable.shouldEagerlyUpdateSafeArea(_:)(char *a1)
{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);

  if ((objc_msgSend(a1, sel_isTracking) & 1) != 0
    || (objc_msgSend(a1, sel_isDecelerating) & 1) != 0
    || (objc_msgSend(a1, sel_isScrollAnimating) & 1) != 0)
  {
    return 1;
  }
  v3 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState + 8];
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_unknownObjectRetain();
  LOBYTE(v3) = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);

  if ((objc_msgSend(a1, sel_isTracking) & 1) != 0
    || (objc_msgSend(a1, sel_isDecelerating) & 1) != 0
    || (objc_msgSend(a1, sel_isScrollAnimating) & 1) != 0)
  {
    return 1;
  }
  v3 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_safeAreaTransitionState + 8];
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_unknownObjectRetain();
  LOBYTE(v3) = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

BOOL protocol witness for SafeAreaTransitionState.isActive.getter in conformance ToolbarSafeAreaTransitionState()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16) > 0;
}

uint64_t View.buttonStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PrimitiveButtonStyleContainerModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ButtonStyleContainerModifier(0, v10, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v16);
  FormatInputToString.init(format:)((uint64_t)v9, a3, (uint64_t)v18);
  MEMORY[0x18D75B4AC](v18, a2, v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  swift_retain();
  swift_retain();
  IncrementalViewGeometry.value.getter(v1, v2, v3, v4);
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  MainThreadRequiringScrollPhase.value.getter(*a1);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6[18];

  v6[17] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  Value = AGGraphGetValue();
  outlined init with take of SharingPickerSource(Value, (uint64_t)v6);
  outlined retain of SharingPickerSource(v6);
  v2 = SharingPickerSource.isPresented.getter();
  if ((v2 & 1) != 0)
  {
    AGGraphGetValue();
    swift_retain();
  }
  type metadata accessor for CGRect(0);
  Anchor.Source.init<A>(_:)();
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = v2 & 1;
  outlined init with take of SharingPickerSource((uint64_t)v6, v3 + 24);
  *(_QWORD *)(v3 + 160) = v5;
  type metadata accessor for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>(0);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter;
  *(_QWORD *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t IncrementalViewGeometry.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *Value;
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  __int128 v28;
  double v29;
  double v30;
  double v31;
  void (*v32)(__int128 *, _QWORD);
  double *v33;
  double v34;
  uint64_t result;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a4)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    Value = (uint64_t *)AGGraphGetValue();
    IncrementalLayoutViewCache.placement(of:in:)(a4, *Value, (uint64_t)&v36);
    if ((v42 & 1) != 0)
    {
      v6 = (__int128 *)AGGraphGetValue();
      v7 = v6[1];
      v43 = *v6;
      v44 = v7;
      ViewSize.proposal.getter();
      v8 = &v43;
      _Placement.init(proposedSize:at:)();
      v9 = BYTE8(v43);
      v10 = v44;
      v11 = BYTE8(v44);
      v13 = v45;
      v12 = v46;
      v15 = v47;
      v14 = v48;
    }
    else
    {
      v15 = v40;
      v14 = v41;
      v13 = v38;
      v12 = v39;
      v10 = v37;
      v9 = BYTE8(v36) & 1;
      v11 = BYTE8(v37) & 1;
      v8 = &v36;
    }
    v16 = *(_QWORD *)v8;
    v36 = *(_OWORD *)(a4 + 32);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
      v18 = *((_QWORD *)&v36 + 1);
      v19 = v36;
    }
    else
    {
      v17 = (uint64_t *)AGGraphGetValue();
      v19 = *v17;
      v18 = v17[1];
      *(_QWORD *)&v36 = *v17;
      swift_retain();
    }
    *(_QWORD *)&v43 = v19;
    *((_QWORD *)&v43 + 1) = v18;
    *(_QWORD *)&v36 = v16;
    BYTE8(v36) = v9;
    *(_QWORD *)&v37 = v10;
    BYTE8(v37) = v11;
    swift_retain();
    LayoutComputer.sizeThatFits(_:)();
    *(_QWORD *)&v43 = v16;
    BYTE8(v43) = v9;
    *(_QWORD *)&v44 = v10;
    BYTE8(v44) = v11;
    v20 = ViewDimensions.init(guideComputer:size:proposal:)();
    v21 = v36;
    v22 = v37;
    v23 = v38;
    v24 = v39;
    *(_QWORD *)&v36 = v16;
    BYTE8(v36) = v9;
    *(_QWORD *)&v37 = v10;
    BYTE8(v37) = v11;
    v38 = v13;
    v39 = v12;
    v40 = v15;
    v41 = v14;
    v43 = v22;
    *(_QWORD *)&v44 = v23;
    *((_QWORD *)&v44 + 1) = v24;
    *(double *)&v25 = MEMORY[0x18D75BE3C](v20);
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v26, v25));
    v36 = v21;
    v37 = v22;
    v38 = v23;
    v39 = v24;
    swift_retain();
    ViewGeometry.init(origin:dimensions:)();
    LOBYTE(v43) = *(_BYTE *)AGGraphGetValue();
    v27 = (__int128 *)AGGraphGetValue();
    v28 = v27[1];
    v36 = *v27;
    v37 = v28;
    MEMORY[0x18D75BE3C]();
    ViewGeometry.finalizeLayoutDirection(_:parentSize:)();
    v36 = *(_OWORD *)AGGraphGetValue();
    v29 = MEMORY[0x18D755E9C]();
    v31 = v30;
    v32 = (void (*)(__int128 *, _QWORD))ViewOrigin.value.modify();
    v34 = v31 + v33[1];
    *v33 = v29 + *v33;
    v33[1] = v34;
    v32(&v36, 0);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IncrementalLayoutViewCache.placement(of:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((*(_BYTE *)(result + 208) & 1) != 0)
  {
LABEL_9:
    if ((*(_BYTE *)(result + 352) & 1) != 0)
    {
      v6 = (unsigned __int8 *)(result + 216);
      v7 = *(_QWORD *)(result + 224);
      v8 = (uint64_t *)(result + 232);
      v9 = *(_QWORD *)(result + 240);
      v10 = (uint64_t *)(result + 248);
      v11 = (uint64_t *)(result + 256);
      v12 = (uint64_t *)(result + 264);
      v13 = (uint64_t *)(result + 272);
      v14 = *(_BYTE *)(result + 280);
    }
    else
    {
      v14 = 0;
      v6 = (unsigned __int8 *)(result + 288);
      v13 = (uint64_t *)(result + 344);
      v12 = (uint64_t *)(result + 336);
      v9 = *(_QWORD *)(result + 312);
      v11 = (uint64_t *)(result + 328);
      v10 = (uint64_t *)(result + 320);
      v7 = *(_QWORD *)(result + 296);
      v8 = (uint64_t *)(result + 304);
    }
    goto LABEL_14;
  }
  v3 = *(_QWORD *)(result + 200);
  v4 = *(_QWORD *)(a2 + 16);
  if (v3 >= v4)
  {
LABEL_5:
    if (v4)
    {
      v5 = (unsigned __int8 *)(a2 + 48);
      while (*((_QWORD *)v5 - 2) != result)
      {
        v5 += 72;
        if (!--v4)
          goto LABEL_9;
      }
      v14 = 0;
      v6 = v5 - 8;
      v7 = *v5;
      v8 = (uint64_t *)(v5 + 8);
      v9 = v5[16];
      v10 = (uint64_t *)(v5 + 24);
      v11 = (uint64_t *)(v5 + 32);
      v12 = (uint64_t *)(v5 + 40);
      v13 = (uint64_t *)(v5 + 48);
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(a2 + 32 + 72 * v3) == result)
    {
      v14 = 0;
      v15 = a2 + 32 + 72 * v3;
      v13 = (uint64_t *)(v15 + 64);
      v12 = (uint64_t *)(v15 + 56);
      v6 = (unsigned __int8 *)(v15 + 8);
      v11 = (uint64_t *)(v15 + 48);
      v10 = (uint64_t *)(v15 + 40);
      v8 = (uint64_t *)(v15 + 24);
      v9 = *(unsigned __int8 *)(v15 + 32);
      v7 = *(unsigned __int8 *)(v15 + 16);
LABEL_14:
      v16 = *v13;
      v17 = *v12;
      v18 = *v11;
      v19 = *v10;
      v20 = *v8;
      *(_QWORD *)a3 = *(_QWORD *)v6;
      *(_QWORD *)(a3 + 8) = v7;
      *(_QWORD *)(a3 + 16) = v20;
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 32) = v19;
      *(_QWORD *)(a3 + 40) = v18;
      *(_QWORD *)(a3 + 48) = v17;
      *(_QWORD *)(a3 + 56) = v16;
      *(_BYTE *)(a3 + 64) = v14;
      return result;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t View.accessibilityAction(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v21 = *a1;
  v12 = v21;
  v22 = v13;
  v23 = v14;
  v24 = v15;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  outlined copy of AccessibilityActionKind.ActionKind(v12, v13, v14, v15);
  v17 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
  swift_retain();
  a8(&v21, 0, 0, 0, 0, 0, a7, v16, a4, &type metadata for AccessibilityVoidAction, a5, v17);
  swift_release();
  return outlined consume of AccessibilityActionKind.ActionKind(v21, v22, v23, v24);
}

uint64_t View.accessibilityAction<A>(_:label:image:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v18;

  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a10;
  v18[3] = a11;
  v18[4] = a12;
  v18[5] = a13;
  v18[6] = a7;
  v18[7] = a8;
  swift_retain();
  View.accessibilityAction<A>(_:label:image:_:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in View.accessibilityAction<A>(_:label:image:_:), (uint64_t)v18, a9, a10, a11, a12, a13);
  return swift_release();
}

{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a8;
  v29 = a7;
  v31 = a9;
  v32 = a12;
  v26 = a6;
  v27 = a13;
  v30 = a10;
  v18 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyAccessibilityAction?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t (*)(_QWORD, ValueMetadata *))MEMORY[0x1E0DED1E8]);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_187BF9830;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, a11);
  outlined copy of Text?(a2, a3, a4, a5);
  v22 = v26;
  swift_retain();
  v23 = v28;
  swift_retain();
  AnyAccessibilityAction.init<A>(action:label:image:handler:bridged:)((uint64_t)v20, a2, a3, a4, a5, v22, v29, v23, v21 + 32, 0, a11, v27);
  v33 = v21;
  lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v33, 1, v30, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v32);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction;
  if (!lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVoidAction, &type metadata for AccessibilityVoidAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction;
  if (!lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityVoidAction, &type metadata for AccessibilityVoidAction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVoidAction and conformance AccessibilityVoidAction);
  }
  return result;
}

uint64_t outlined copy of AccessibilityActionKind.ActionKind(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 5)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of AccessibilityActionKind.ActionKind(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  if (a4 >= 5)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for AnyAccessibilityAction?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, ValueMetadata *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for AnyAccessibilityAction);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t AnyAccessibilityAction.init<A>(action:label:image:handler:bridged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v27 = a8;
  v28 = a5;
  v29 = a6;
  v30 = a7;
  v31 = a9;
  v32 = a10;
  v16 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AccessibilityActionStorage(0, a11, a12, v19);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v27 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, a1, a11, v22);
  v33 = 0uLL;
  v34 = 0;
  v35 = 2;
  AccessibilityActionStorage.init(action:category:label:image:handler:)((uint64_t)v18, &v33, a2, a3, a4, v28, v29, v30, (uint64_t)v24, v27, a11, a12);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a11);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityActionStorage<A>, v20);
  return AnyAccessibilityAction.init<A>(_:bridged:)((uint64_t)v24, v32, v20, v25, v31);
}

uint64_t destroy for AccessibilityActionKind(uint64_t result)
{
  if (*(_QWORD *)(result + 24) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityActionKind(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 >= 5)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t type metadata accessor for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityActionStorage);
}

uint64_t AnyAccessibilityAction.init<A>(_:bridged:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;

  *(_QWORD *)(a5 + 24) = type metadata accessor for AnyAccessibilityAction.ConcreteBase(0, a3, a4, a4);
  *(_QWORD *)(a5 + 32) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a5);
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(_BYTE *)(a5 + 40) = a2;
  return result;
}

uint64_t destroy for AccessibilityActionStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v4 + 24);
  LODWORD(v6) = -1;
  if (v5 < 0xFFFFFFFF)
    v6 = *(_QWORD *)(v4 + 24);
  if ((int)v6 - 2 < 0 && v5 >= 2)
  {
    outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  v7 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityActionStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF)
    v10 = *(_QWORD *)(v8 + 24);
  if ((int)v10 - 2 < 0 && v9 >= 2)
  {
    v12 = *(_QWORD *)v8;
    v13 = *(_QWORD *)(v8 + 8);
    v14 = *(_BYTE *)(v8 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v8, v13, v14);
    *(_QWORD *)v7 = v12;
    *(_QWORD *)(v7 + 8) = v13;
    *(_BYTE *)(v7 + 16) = v14;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v11;
  }
  v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    v20 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v20;
  }
  else
  {
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 16) = v19;
    *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
    swift_bridgeObjectRetain();
  }
  v21 = (_QWORD *)((v15 + 39) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  *(_DWORD *)(((unint64_t)v23 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v24 + 19) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for AnyAccessibilityAction.ConcreteBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyAccessibilityAction.ConcreteBase);
}

uint64_t key path getter for EnvironmentValues.dynamicTypeSize : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.dynamicTypeSize.getter();
  *a1 = v3;
  return result;
}

uint64_t Section<>.init(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(double);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v9(v6);
  return Section.init(header:content:footer:)(v10, (uint64_t)v8, v11, MEMORY[0x1E0CE7C38], a3, MEMORY[0x1E0CE7C38], a4);
}

uint64_t Section<>.init(header:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v18, a1, v19, v16);
  a2(v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
  return Section.init(header:content:footer:)((uint64_t)v18, (uint64_t)v11, v21, a3, a4, MEMORY[0x1E0CE7C38], a5);
}

uint64_t Section.init(header:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t v15;

  v14 = (int *)type metadata accessor for Section(0, a4, a5, a6);
  v15 = a7 + v14[13];
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7, a1, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7 + v14[11], a2, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a7 + v14[12], a3, a6);
}

uint64_t initializeBufferWithCopyOfBuffer for SPRotation3D(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

double key path getter for EnvironmentValues.keyboardShortcut : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v6;
  return result;
}

uint64_t EnvironmentValues.keyboardShortcut.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t FormatInputToString.init(format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

void partial apply for closure #1 in _UIHostingView.requestImmediateUpdate()()
{
  uint64_t v0;

  closure #1 in _UIHostingView.requestImmediateUpdate()(*(_QWORD *)(v0 + 32));
}

void closure #1 in _UIHostingView.requestImmediateUpdate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    _UIHostingView.pendingPreferencesUpdate.setter(0);
    _UIHostingView.updatePreferences(renderDisplayList:)(0);

  }
}

void partial apply for closure #1 in _UIHostingView.didMoveToWindow()()
{
  uint64_t v0;

  closure #1 in _UIHostingView.didMoveToWindow()(*(_QWORD *)(v0 + 32));
}

double @objc _UIHostingView.transform.getter@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  _OWORD v8[3];

  v3 = a1;
  _UIHostingView.transform.getter(v4, v8);

  result = *(double *)v8;
  v6 = v8[1];
  v7 = v8[2];
  *a2 = v8[0];
  a2[1] = v6;
  a2[2] = v7;
  return result;
}

double _UIHostingView.transform.getter@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  objc_class *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  objc_super v9;

  v4 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), a1);
  v9.receiver = v2;
  v9.super_class = v4;
  objc_msgSendSuper2(&v9, sel_transform);
  result = *(double *)&v6;
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x1E0DEC198]);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Attribute<TableRowList>>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x1E0DEA520]);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGSize>, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityTechnology>, (uint64_t)&type metadata for AccessibilityTechnology);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E0DEB418]);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(_QWORD))type metadata accessor for _ContiguousArrayStorage<Attribute<AccessibilityRotorEntryList>>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect>, MEMORY[0x1E0CE25A0]);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ContentMarginPlacement.Role>, (uint64_t)&type metadata for ContentMarginPlacement.Role);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>, (uint64_t)type metadata accessor for ListUpdate<Int, Int>, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SymbolEffect>, (uint64_t)&type metadata for SymbolEffect);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowList>, (uint64_t)&type metadata for TableRowList);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableBounds>, (uint64_t)&type metadata for FocusableBounds, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  *v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void @objc UIHostingController.viewWillDisappear(_:)(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  UIHostingController.viewDidAppear(_:)(a3, (SEL *)&selRef_viewWillDisappear_, (uint64_t (*)(id))specialized UIHostingController._viewWillDisappear(_:), (uint64_t)v4);

}

void @objc UIHostingController.viewDidDisappear(_:)(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  UIHostingController.viewDidAppear(_:)(a3, (SEL *)&selRef_viewDidDisappear_, (uint64_t (*)(id))specialized UIHostingController._viewDidDisappear(_:), (uint64_t)v4);

}

void @objc UIHostingController.viewDidAppear(_:)(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  UIHostingController.viewDidAppear(_:)(a3, (SEL *)&selRef_viewDidAppear_, (uint64_t (*)(id))specialized UIHostingController._viewDidAppear(_:), (uint64_t)v4);

}

void @objc UIHostingController.viewWillAppear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4;

  v4 = a1;
  UIHostingController.viewWillAppear(_:)(a3);

}

Swift::Void __swiftcall UIHostingController._viewWillAppear(_:)(Swift::Bool a1)
{
  void *v1;
  void *v2;
  void *v4;
  id v5;
  void *v6;
  id v7;
  __int128 v8;

  v2 = v1;
  v8 = xmmword_187BFE310;
  UIHostingController.resolveRequiredBridges(in:allowedActions:)((uint64_t *)&v8, 3);
  specialized UIHostingController.prepareForNavigationTransition(_:)();
  specialized UIHostingController.coordinateListSelection(transitionCoordinator:isAnimated:)(objc_msgSend(v1, sel_transitionCoordinator));
  swift_unknownObjectRelease();
  v4 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v4)
  {
    v5 = v4;
    ToolbarBridge.willAppear<A>(hostingController:)(v2);

  }
  v6 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v6)
  {
    v7 = v6;
    BarAppearanceBridge.willAppear<A>(animated:hostingController:)(a1, v2);

  }
}

uint64_t BarAppearanceBridge.willAppear<A>(animated:hostingController:)(char a1, void *a2)
{
  _QWORD v4[11];

  BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(a2, v4);
  BarAppearanceBridge.willAppear(animated:updateContext:)(a1, (uint64_t)v4);
  return outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v4);
}

uint64_t BarAppearanceBridge.willAppear(animated:updateContext:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  _BYTE v44[40];
  _BYTE v45[40];
  _BYTE v46[40];
  _BYTE v47[80];
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;

  v3 = v2;
  outlined init with copy of BarAppearanceBridge.UpdateContext(a2, (uint64_t)v47);
  v4 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  v30 = v4;
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v47, v4);
  swift_endAccess();
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  v31 = *v5 + 64;
  v6 = 1 << *(_BYTE *)(*v5 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(*v5 + 64);
  v32 = (unint64_t)(v6 + 63) >> 6;
  v35 = *v5;
  swift_bridgeObjectRetain();
  v9 = 0;
  v34 = v2;
  while (v8)
  {
    v12 = __clz(__rbit64(v8));
    v13 = (v8 - 1) & v8;
    v14 = v12 | (v9 << 6);
LABEL_26:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v35 + 48) + 40 * v14, (uint64_t)v47);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)v46);
    swift_beginAccess();
    v18 = *v5;
    if (!*(_QWORD *)(*v5 + 16))
      goto LABEL_35;
    v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46);
    if ((v20 & 1) == 0)
      goto LABEL_35;
    v41 = v13;
    v42 = v9;
    v21 = *(_QWORD *)(v18 + 56) + 80 * v19;
    v22 = *(_QWORD *)(v21 + 8);
    v23 = *(_QWORD *)(v21 + 16);
    v24 = *(_BYTE *)(v21 + 24);
    v25 = *(_QWORD *)(v21 + 32);
    v40 = *(_BYTE *)(v21 + 40);
    v39 = *(_QWORD *)(v21 + 48);
    v26 = *(_BYTE *)(v21 + 56);
    v27 = *(_BYTE *)(v21 + 57);
    v38 = *(_BYTE *)(v21 + 58);
    v36 = *(_BYTE *)v21;
    v37 = *(_BYTE *)(v21 + 72);
    swift_endAccess();
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    if ((a1 & 1) != 0)
      v10 = static Animation.default.getter();
    else
      v10 = 0;
    swift_retain();
    swift_release();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)v45);
    LOBYTE(v49) = v36;
    *((_QWORD *)&v49 + 1) = v22;
    v50 = v23;
    v51 = v24;
    v52 = v25;
    v53 = v40;
    v54 = v39;
    v55 = v26;
    v56 = v27;
    v57 = v38;
    v58 = v10;
    v59 = v37;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43 = *v5;
    *v5 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v49, (uint64_t)v45, isUniquelyReferenced_nonNull_native);
    *v5 = v43;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v45);
    swift_endAccess();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)v44);
    swift_beginAccess();
    specialized Set._Variant.insert(_:)((uint64_t)v45, (uint64_t)v44);
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v45);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
    swift_release();
    swift_release();
    swift_release();
    v3 = v34;
    v8 = v41;
    v9 = v42;
  }
  v15 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    result = swift_endAccess();
    __break(1u);
    return result;
  }
  if (v15 >= v32)
    goto LABEL_30;
  v16 = *(_QWORD *)(v31 + 8 * v15);
  ++v9;
  if (v16)
    goto LABEL_25;
  v9 = v15 + 1;
  if (v15 + 1 >= v32)
    goto LABEL_30;
  v16 = *(_QWORD *)(v31 + 8 * v9);
  if (v16)
    goto LABEL_25;
  v9 = v15 + 2;
  if (v15 + 2 >= v32)
    goto LABEL_30;
  v16 = *(_QWORD *)(v31 + 8 * v9);
  if (v16)
    goto LABEL_25;
  v9 = v15 + 3;
  if (v15 + 3 >= v32)
    goto LABEL_30;
  v16 = *(_QWORD *)(v31 + 8 * v9);
  if (v16)
    goto LABEL_25;
  v9 = v15 + 4;
  if (v15 + 4 >= v32)
    goto LABEL_30;
  v16 = *(_QWORD *)(v31 + 8 * v9);
  if (v16)
  {
LABEL_25:
    v13 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_26;
  }
  v17 = v15 + 5;
  if (v17 < v32)
  {
    v16 = *(_QWORD *)(v31 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        v9 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_34;
        if (v9 >= v32)
          goto LABEL_30;
        v16 = *(_QWORD *)(v31 + 8 * v9);
        ++v17;
        if (v16)
          goto LABEL_25;
      }
    }
    v9 = v17;
    goto LABEL_25;
  }
LABEL_30:
  swift_release();
  BarAppearanceBridge.updateBarsToConfiguration()();
  v28 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates;
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) & 2) != 0)
    BarAppearanceBridge.platformUpdateNavigationAdaptor()();
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v47, v30);
  result = swift_endAccess();
  *(_QWORD *)(v3 + v28) = 0;
  return result;
}

Swift::Void __swiftcall AlwaysOnBridge.hostingControllerWillDisappear()()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)v0[4];
  if (v1)
  {
    v2 = *v0;
    v0[4] = 0;

    v3 = MEMORY[0x18D760234](v0 + 2);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = (id)specialized UIHostingController.host.getter();

      v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v2 + 104), *(_QWORD *)(v2 + 112), v6);
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)@<X0>(char **a1@<X0>, char *a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(a1, a2, *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 104), *(char **)(v3 + 112), *(char **)(v3 + 16), *(char **)(v3 + 24), a3, *(char **)(v3 + 32), *(char **)(v3 + 40), *(char **)(v3 + 48), *(char **)(v3 + 56), *(char **)(v3 + 64), *(_QWORD *)(v3 + 72), *(char **)(v3 + 80));
}

uint64_t closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)@<X0>(char **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, Swift::Int a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, char **a9@<X8>, char *a10, char *a11, char *a12, char *a13, char *a14, uint64_t a15, char *a16)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char **v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char **v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(void);
  char *v99;
  char *v100;
  char v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  int v105;
  char *v106;
  char *v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v118;
  unint64_t v119;
  int64_t v120;
  unint64_t v121;
  unint64_t v122;
  int64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char **v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char **v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char **v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;

  v142 = a8;
  v140 = a7;
  v138 = a6;
  v132 = a5;
  v145 = a2;
  v146 = a1;
  v136 = a9;
  v130 = a14;
  v139 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v141 = type metadata accessor for CollectionDifference();
  v131 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141, v19);
  v129 = (char *)&v129 - v20;
  v143 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v134 = (char *)&v129 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v133 = (char *)&v129 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v135 = (char *)&v129 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v129 - v32;
  v153 = Dictionary.init()();
  v147 = a16;
  type metadata accessor for Dictionary();
  Dictionary.reserveCapacity(_:)(a4);
  v144 = a3;
  v137 = (char *)a4;
  result = MEMORY[0x18D75CC58](a3, a4, AssociatedTypeWitness);
  if (result != v35)
  {
    v36 = result;
    v37 = v35;
    if (v35 < result)
    {
      __break(1u);
    }
    else if (result < v35)
    {
      v38 = *(_QWORD *)(v143 + 72);
      v39 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 16);
      v40 = v144 + result * v38;
      do
      {
        v39(v33, v40, AssociatedTypeWitness);
        v150 = v36;
        LOBYTE(v151) = 0;
        Dictionary.subscript.setter();
        v40 += v38;
        ++v36;
      }
      while (v37 != v36);
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_77;
  }
LABEL_6:
  v152 = Dictionary.init()();
  v41 = v145;
  Dictionary.reserveCapacity(_:)((Swift::Int)v145);
  result = MEMORY[0x18D75CC58](v146, v41, AssociatedTypeWitness);
  if (result != v42)
  {
    v43 = result;
    v44 = v42;
    if (v42 >= result)
    {
      if (result < v42)
      {
        v45 = *(_QWORD *)(v143 + 72);
        v46 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
        v47 = (char *)v146 + result * v45;
        do
        {
          v46(v33, v47, AssociatedTypeWitness);
          v150 = v43;
          LOBYTE(v151) = 0;
          Dictionary.subscript.setter();
          v47 += v45;
          ++v43;
        }
        while (v44 != v43);
        goto LABEL_11;
      }
LABEL_78:
      __break(1u);
      return result;
    }
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
LABEL_11:
  v48 = swift_bridgeObjectRetain();
  v49 = v147;
  v50 = MEMORY[0x18D75C9A0](v48, AssociatedTypeWitness, MEMORY[0x1E0DEB418], v147);
  swift_bridgeObjectRelease();
  v51 = v137;
  if ((char *)v50 != v137
    || (v52 = swift_bridgeObjectRetain(),
        v53 = (char *)MEMORY[0x18D75C9A0](v52, AssociatedTypeWitness, MEMORY[0x1E0DEB418], v49),
        swift_bridgeObjectRelease(),
        v53 != v145))
  {
    v143 = a15;
    v138 = a13;
    v134 = a11;
    v135 = a12;
    v150 = (uint64_t)v146;
    v151 = v145;
    v148 = v144;
    v149 = v51;
    v61 = type metadata accessor for UnsafeBufferPointer();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA5D0], v61);
    v62 = v129;
    BidirectionalCollection<>.difference<A>(from:)();
    v63 = CollectionDifference.removals.getter();
    v146 = &v129;
    v150 = v63;
    MEMORY[0x1E0C80A78](v63, v64);
    v65 = v142;
    *(&v129 - 10) = v140;
    *(&v129 - 9) = v65;
    *(&v129 - 8) = v139;
    *(&v129 - 7) = a11;
    *(&v129 - 6) = a12;
    *(&v129 - 5) = a13;
    v66 = v130;
    v67 = (char *)v143;
    *(&v129 - 4) = v130;
    *(&v129 - 3) = v67;
    v68 = (char *)v132;
    *(&v129 - 2) = v69;
    *(&v129 - 1) = v68;
    type metadata accessor for CollectionDifference.Change();
    v70 = type metadata accessor for Array();
    v71 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v70);
    v145 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:), (uint64_t)(&v129 - 12), v70, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDCE8], v71, MEMORY[0x1E0DEDD18], v72);
    swift_bridgeObjectRelease();
    v73 = v141;
    v150 = CollectionDifference.insertions.getter();
    MEMORY[0x1E0C80A78](v150, v74);
    v75 = v142;
    *(&v129 - 10) = v140;
    *(&v129 - 9) = v75;
    v76 = v134;
    *(&v129 - 8) = v139;
    *(&v129 - 7) = v76;
    v77 = v138;
    *(&v129 - 6) = v135;
    *(&v129 - 5) = v77;
    v78 = (char *)v143;
    *(&v129 - 4) = v66;
    *(&v129 - 3) = v78;
    *(&v129 - 2) = v147;
    *(&v129 - 1) = v68;
    v80 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:), (uint64_t)(&v129 - 12), v70, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEDCE8], v71, MEMORY[0x1E0DEDD18], v79);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v131 + 8))(v62, v73);
    v81 = v136;
    *v136 = v145;
    v81[1] = (char *)v80;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v54 = UnsafeBufferPointer.endIndex.getter();
  v55 = UnsafeBufferPointer.endIndex.getter();
  v56 = v55;
  LODWORD(v142) = v55 > 0;
  if (v54 <= 0 && v55 < 1)
  {
    v57 = (char *)MEMORY[0x1E0DEE9D8];
    v58 = (char *)MEMORY[0x1E0DEE9D8];
    v59 = v138;
    goto LABEL_16;
  }
  v82 = 0;
  v83 = 0;
  v58 = (char *)MEMORY[0x1E0DEE9D8];
  v57 = (char *)MEMORY[0x1E0DEE9D8];
  v59 = v138;
  v141 = v54;
  v132 = v55;
LABEL_20:
  v137 = v57;
  while (2)
  {
    v139 = v83;
    while (1)
    {
      v84 = *((_QWORD *)v58 + 2);
      v85 = *((_QWORD *)v57 + 2);
      if (v85 + v84 > (uint64_t)v59)
        goto LABEL_16;
      if ((char *)v56 == v83)
      {
        v86 = v57;
        v87 = v83;
        v88 = v56;
        v89 = v59;
        v90 = v82;
        v91 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v58 = v91;
        else
          v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84 + 1, 1, v91);
        v93 = *((_QWORD *)v58 + 2);
        v92 = *((_QWORD *)v58 + 3);
        if (v93 >= v92 >> 1)
        {
          v112 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v92 > 1), v93 + 1, 1, v58);
          v94 = (char *)v90;
          v58 = v112;
        }
        else
        {
          v94 = (char *)v90;
        }
        v59 = v89;
        *((_QWORD *)v58 + 2) = v93 + 1;
        *(_QWORD *)&v58[8 * v93 + 32] = v94;
        v56 = v88;
        v83 = v87;
        v57 = v86;
        v54 = v141;
        goto LABEL_23;
      }
      v145 = v58;
      if (v54 == v82)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85 + 1, 1, v57);
        v114 = *((_QWORD *)v57 + 2);
        v113 = *((_QWORD *)v57 + 3);
        v58 = v145;
        if (v114 >= v113 >> 1)
        {
          v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v113 > 1), v114 + 1, 1, v57);
          v58 = v145;
          v57 = v127;
        }
        *((_QWORD *)v57 + 2) = v114 + 1;
        *(_QWORD *)&v57[8 * v114 + 32] = v83++;
        v82 = v54;
        goto LABEL_59;
      }
      v95 = v143;
      v96 = *(_QWORD *)(v143 + 72);
      v140 = (char *)v82;
      v97 = v144 + v96 * v82;
      v98 = *(void (**)(void))(v143 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v98)(v33, v97, AssociatedTypeWitness);
      v99 = v135;
      ((void (*)(char *, char *, uint64_t))v98)(v135, (char *)v146 + v96 * (_QWORD)v83, AssociatedTypeWitness);
      v100 = v147;
      v101 = dispatch thunk of static Equatable.== infix(_:_:)();
      v102 = *(void (**)(char *, uint64_t))(v95 + 8);
      v102(v99, AssociatedTypeWitness);
      v102(v33, AssociatedTypeWitness);
      if ((v101 & 1) != 0)
        break;
      v103 = v133;
      ((void (*)(char *, uint64_t, uint64_t))v98)(v133, v97, AssociatedTypeWitness);
      MEMORY[0x18D75CA24](&v150, v103, v152, AssociatedTypeWitness, MEMORY[0x1E0DEB418], v100);
      v104 = v150;
      v105 = v151;
      v106 = v134;
      v98();
      MEMORY[0x18D75CA24](&v148, v106, v153, AssociatedTypeWitness, MEMORY[0x1E0DEB418], v100);
      v107 = v106;
      if (v105 != 1)
      {
        v115 = v148;
        v116 = v149;
        v102(v107, AssociatedTypeWitness);
        v102(v103, AssociatedTypeWitness);
        v83 = v139;
        if (v116 == 1)
        {
          v57 = v137;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v59 = v138;
          v54 = v141;
          v56 = v132;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
          v119 = *((_QWORD *)v57 + 2);
          v118 = *((_QWORD *)v57 + 3);
          v120 = v119 + 1;
          v58 = v145;
          v82 = (uint64_t)v140;
          if (v119 < v118 >> 1)
            goto LABEL_53;
LABEL_71:
          v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v118 > 1), v120, 1, v57);
          v82 = (uint64_t)v140;
          v58 = v145;
          v57 = v126;
          goto LABEL_53;
        }
        v57 = v137;
        v59 = v138;
        v54 = v141;
        v56 = v132;
        if (v104 < (uint64_t)v139)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v145 + 2) + 1, 1, v145);
          v58 = v145;
          v122 = *((_QWORD *)v145 + 2);
          v121 = *((_QWORD *)v145 + 3);
          v123 = v122 + 1;
          v124 = v140;
          if (v122 < v121 >> 1)
            goto LABEL_58;
LABEL_67:
          v125 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v121 > 1), v123, 1, v58);
          v124 = v140;
          v58 = v125;
          goto LABEL_58;
        }
        if (v115 < (uint64_t)v140 || v115 - (uint64_t)v140 >= v104 - (uint64_t)v139)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
          v82 = (uint64_t)v140;
          v119 = *((_QWORD *)v57 + 2);
          v118 = *((_QWORD *)v57 + 3);
          v120 = v119 + 1;
          v58 = v145;
          if (v119 >= v118 >> 1)
            goto LABEL_71;
LABEL_53:
          *((_QWORD *)v57 + 2) = v120;
          *(_QWORD *)&v57[8 * v119 + 32] = v83++;
        }
        else
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v145 + 2) + 1, 1, v145);
          v124 = v140;
          v58 = v145;
          v122 = *((_QWORD *)v145 + 2);
          v121 = *((_QWORD *)v145 + 3);
          v123 = v122 + 1;
          if (v122 >= v121 >> 1)
            goto LABEL_67;
LABEL_58:
          *((_QWORD *)v58 + 2) = v123;
          *(_QWORD *)&v58[8 * v122 + 32] = v124;
          v82 = (uint64_t)(v124 + 1);
        }
LABEL_59:
        LODWORD(v142) = (uint64_t)v83 < v56;
        if (v82 < v54 || (uint64_t)v83 < v56)
          goto LABEL_20;
        goto LABEL_16;
      }
      v102(v106, AssociatedTypeWitness);
      v102(v103, AssociatedTypeWitness);
      v108 = swift_isUniquelyReferenced_nonNull_native();
      v83 = v139;
      if ((v108 & 1) != 0)
      {
        v57 = v137;
        v59 = v138;
        v54 = v141;
        v56 = v132;
        v58 = v145;
      }
      else
      {
        v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v145 + 2) + 1, 1, v145);
        v57 = v137;
        v59 = v138;
        v54 = v141;
        v56 = v132;
      }
      v110 = *((_QWORD *)v58 + 2);
      v109 = *((_QWORD *)v58 + 3);
      v94 = v140;
      if (v110 >= v109 >> 1)
      {
        v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v109 > 1), v110 + 1, 1, v58);
        v94 = v140;
        v58 = v111;
      }
      *((_QWORD *)v58 + 2) = v110 + 1;
      *(_QWORD *)&v58[8 * v110 + 32] = v94;
LABEL_23:
      v82 = (uint64_t)(v94 + 1);
      if (!((v82 < v54) | v142 & 1))
        goto LABEL_16;
    }
    v82 = (uint64_t)(v140 + 1);
    v83 = v139 + 1;
    v56 = v132;
    LODWORD(v142) = (uint64_t)(v139 + 1) < v132;
    v54 = v141;
    v57 = v137;
    v59 = v138;
    v58 = v145;
    if ((uint64_t)(v140 + 1) < v141 || (uint64_t)v83 < v132)
      continue;
    break;
  }
LABEL_16:
  if (*((_QWORD *)v57 + 2) + *((_QWORD *)v58 + 2) <= (uint64_t)v59)
  {
    v128 = v136;
    *v136 = v58;
    v128[1] = v57;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = v136;
    *v136 = 0;
    v60[1] = 0;
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in StatefulRule.value.setter()
{
  return closure #1 in StatefulRule.value.setter();
}

uint64_t _s14AttributeGraph12StatefulRulePAAE5value5ValueQzvsySPyAFGXEfU_TA_0()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t closure #1 in StatefulRule.value.setter()
{
  swift_getAssociatedTypeWitness();
  return AGGraphSetOutputValue();
}

uint64_t initializeWithCopy for InsettableGroupedListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  size_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, unint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  char v44;
  char v45;
  uint64_t v47;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  v47 = a1;
  v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  LOBYTE(v5) = *(_BYTE *)(v9 + 9);
  v11 = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v9, v11, v5);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 9) = v5;
  v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(_QWORD *)(v13 + 32);
  v19 = *(_QWORD *)(v13 + 40);
  v20 = *(_QWORD *)(v13 + 48);
  v21 = *(_QWORD *)(v13 + 56);
  v44 = *(_BYTE *)(v13 + 64);
  v45 = *(_BYTE *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v13, v15, v16, v17, v18, v19, v20, v21, v44, v45);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 24) = v17;
  *(_QWORD *)(v12 + 32) = v18;
  *(_QWORD *)(v12 + 40) = v19;
  *(_QWORD *)(v12 + 48) = v20;
  *(_QWORD *)(v12 + 56) = v21;
  *(_BYTE *)(v12 + 64) = v44;
  *(_BYTE *)(v12 + 65) = v45;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = (v24 | 7) + 66;
  v26 = (_QWORD *)((v25 + v12) & ~(v24 | 7));
  v27 = (_QWORD *)((v25 + v13) & ~(v24 | 7));
  v28 = ~v24;
  v29 = (v24 + 16) & ~v24;
  v30 = *(_QWORD *)(v23 + 64);
  v31 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    v32 = *v31;
    if ((unint64_t)*v31 >= 0xFFFFFFFF)
      LODWORD(v32) = -1;
    v33 = v29 + v30;
    if ((_DWORD)v32 != -1)
      goto LABEL_5;
LABEL_7:
    *v26 = *v27;
    v34 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v34 = *v31;
    v35 = v24 + 8;
    v36 = ((unint64_t)v34 + v24 + 8) & v28;
    v37 = ((unint64_t)v31 + v35) & v28;
    v38 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    swift_retain();
    swift_retain();
    v38(v36, v37, v22);
    goto LABEL_8;
  }
  v33 = v29 + v30;
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v31 + v24 + 8) & v28))
    goto LABEL_7;
LABEL_5:
  memcpy(v26, v27, v33);
LABEL_8:
  v39 = ((unint64_t)v27 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = ((unint64_t)v26 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(_OWORD *)v39;
  v42 = *(_OWORD *)(v39 + 16);
  *(_WORD *)(v40 + 32) = *(_WORD *)(v39 + 32);
  *(_OWORD *)v40 = v41;
  *(_OWORD *)(v40 + 16) = v42;
  return v47;
}

uint64_t initializeWithCopy for InsettableGroupedListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  size_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, unint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v45;
  char v46;
  uint64_t v47;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  v47 = a1;
  v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  LOBYTE(v5) = *(_BYTE *)(v9 + 9);
  v11 = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v9, v11, v5);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 9) = v5;
  v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(_QWORD *)(v13 + 32);
  v19 = *(_QWORD *)(v13 + 40);
  v20 = *(_QWORD *)(v13 + 48);
  v21 = *(_QWORD *)(v13 + 56);
  v45 = *(_BYTE *)(v13 + 64);
  v46 = *(_BYTE *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v13, v15, v16, v17, v18, v19, v20, v21, v45, v46);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 24) = v17;
  *(_QWORD *)(v12 + 32) = v18;
  *(_QWORD *)(v12 + 40) = v19;
  *(_QWORD *)(v12 + 48) = v20;
  *(_QWORD *)(v12 + 56) = v21;
  *(_BYTE *)(v12 + 64) = v45;
  *(_BYTE *)(v12 + 65) = v46;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = (v24 | 7) + 66;
  v26 = (_QWORD *)((v25 + v12) & ~(v24 | 7));
  v27 = (_QWORD *)((v25 + v13) & ~(v24 | 7));
  v28 = ~v24;
  v29 = (v24 + 16) & ~v24;
  v30 = *(_QWORD *)(v23 + 64);
  v31 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    v32 = *v31;
    if ((unint64_t)*v31 >= 0xFFFFFFFF)
      LODWORD(v32) = -1;
    v33 = v29 + v30;
    if ((_DWORD)v32 != -1)
      goto LABEL_5;
LABEL_7:
    *v26 = *v27;
    v34 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v34 = *v31;
    v35 = v24 + 8;
    v36 = ((unint64_t)v34 + v24 + 8) & v28;
    v37 = ((unint64_t)v31 + v35) & v28;
    v38 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    swift_retain();
    swift_retain();
    v38(v36, v37, v22);
    goto LABEL_8;
  }
  v33 = v29 + v30;
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v31 + v24 + 8) & v28))
    goto LABEL_7;
LABEL_5:
  memcpy(v26, v27, v33);
LABEL_8:
  v39 = ((unint64_t)v26 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = ((unint64_t)v27 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(_OWORD *)v40;
  v42 = *(_OWORD *)(v40 + 16);
  *(_WORD *)(v39 + 32) = *(_WORD *)(v40 + 32);
  *(_OWORD *)v39 = v41;
  *(_OWORD *)(v39 + 16) = v42;
  v43 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v43 + 16))((*(unsigned __int8 *)(v43 + 80) + 34 + v39) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80), (*(unsigned __int8 *)(v43 + 80) + 34 + v40) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  return v47;
}

uint64_t outlined copy of Environment<CGFloat?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t outlined copy of Environment<ListPadding>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  uint64_t result;

  if ((a10 & 1) == 0)
    return swift_retain();
  return result;
}

char *@objc UICollectionViewListCoordinator.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  char *v15;
  uint64_t v17;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  v15 = UICollectionViewListCoordinator.collectionView(_:viewForSupplementaryElementOfKind:at:)((uint64_t)v13, v10, v12, (uint64_t)v9);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v15;
}

char *UICollectionViewListCoordinator.collectionView(_:viewForSupplementaryElementOfKind:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  char v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v24;
  char *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  id v29;
  uint64_t v31;
  char *v32;
  __int16 v33;

  v5 = v4;
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x2E0), *(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x2F0) + 8), a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v31 - v14;
  v31 = a1;
  v32 = (char *)UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)((void *)a1, a2, a3, a4);
  v16 = (char *)v5 + *(_QWORD *)((*v10 & *v5) + 0x88);
  swift_beginAccess();
  v17 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v17(v15, v16, v11);
  LOBYTE(a1) = ShadowListDataSource.hasGlobalHeader.getter(v11);
  v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v15, v11);
  if ((a1 & 1) != 0)
  {
    v17(v15, v16, v11);
    v19 = ShadowListDataSource.hasGlobalHeader.getter(v11);
    v18(v15, v11);
    v20 = v32;
    v21 = v32;
    UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(v31, v19 & 1, v20);

  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v22 == a3)
  {
    swift_bridgeObjectRelease();
    v25 = v32;
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v25 = v32;
    if ((v24 & 1) == 0)
      return v25;
  }
  type metadata accessor for TableCollectionViewCell();
  v26 = swift_dynamicCastClass();
  if (v26)
  {
    *(_QWORD *)(v26 + direct field offset for TableCollectionViewCell.headerLeadingMargin) = *(_QWORD *)((char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x300));
    v27 = *(void **)(v26 + direct field offset for ListCollectionViewCellBase.host);
    if (v27)
    {
      v33 = 2;
      type metadata accessor for Range<AttributedString.Index>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<TableRowView, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>();
      v28 = v25;
      v29 = v27;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
  }
  return v25;
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  void *v20;
  Class v21;
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  v5 = v4;
  v47 = a4;
  v45 = a1;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x60), *(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x70) + 8), a4);
  v46 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v44 - v11;
  if (a2 == 0xD000000000000011 && a3 == 0x8000000187BE36D0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    v26 = (void *)MEMORY[0x18D75CC88](a2, a3);
    v27 = (void *)MEMORY[0x18D75CC88](0x646165487473694CLL, 0xEA00000000007265);
    swift_bridgeObjectRelease();
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v45 = objc_msgSend(v45, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v26, v27, isa);

    swift_getAssociatedTypeWitness();
    v23 = swift_dynamicCastUnknownClassUnconditional();
    swift_getAssociatedConformanceWitness();
    PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
    v29 = IndexPath.section.getter();
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v30 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v31 & 1) == 0)
      {
        v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v40 = (char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x88);
        swift_beginAccess();
        v35 = v46;
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v12, v40, v9);
        v41 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v39 & *v5) + 0xA0));
        swift_beginAccess();
        v37 = *v41;
        outlined copy of Transaction?(v37);
        v42 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
        ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:)(v23, v37, v29, v9, v42);
LABEL_15:
        outlined consume of Transaction?(v37);
        v18 = *(void (**)(char *, uint64_t))(v35 + 8);
        goto LABEL_16;
      }
    }
    type metadata accessor for ListCollectionViewCell();
    v32 = swift_dynamicCastClass();
    v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v32)
      *(_BYTE *)(v32 + direct field offset for ListCollectionViewCellBase.shouldHugContent) = *((_BYTE *)v5
                                                                                              + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x128));
    v34 = (char *)v5 + *(_QWORD *)((*v33 & *v5) + 0x88);
    swift_beginAccess();
    v35 = v46;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v12, v34, v9);
    v36 = (_QWORD *)((char *)v5 + *(_QWORD *)((*v33 & *v5) + 0xA0));
    swift_beginAccess();
    v37 = *v36;
    outlined copy of Transaction?(v37);
    v38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
    ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:)(v23, v37, v29, v9, v38);
    goto LABEL_15;
  }
LABEL_5:
  v14 = (char *)v5 + *(_QWORD *)((*v8 & *v5) + 0x88);
  swift_beginAccess();
  v15 = v46;
  v16 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v16(v12, v14, v9);
  v17 = ShadowListDataSource.hasGlobalHeader.getter(v9);
  v18 = *(void (**)(char *, uint64_t))(v15 + 8);
  v18(v12, v9);
  if ((v17 & 1) != 0)
  {
    v19 = (void *)MEMORY[0x18D75CC88](a2, a3);
    v20 = (void *)MEMORY[0x18D75CC88](0xD000000000000011, 0x8000000187BE36D0);
    swift_bridgeObjectRelease();
    v21 = IndexPath._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(v45, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v19, v20, v21);

    objc_opt_self();
    v23 = swift_dynamicCastObjCClassUnconditional();
    v16(v12, v14, v9);
    v24 = (_QWORD *)((char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0xA0));
    swift_beginAccess();
    v25 = *v24;
    outlined copy of Transaction?(*v24);
    ShadowListDataSource.configureGlobalHeader(_:transaction:)(v23, v25, v9);
    outlined consume of Transaction?(v25);
LABEL_16:
    v18(v12, v9);
    return v23;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for TableCollectionViewCell()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TableCollectionViewCell;
  if (!type metadata singleton initialization cache for TableCollectionViewCell)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for closure #1 in ShadowListDataSource.contextForItem(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ShadowListDataSource.contextForItem(index:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t closure #1 in ShadowListDataSource.contextForItem(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a4;
  swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v38 = (char *)&v34 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v35 = (char *)&v34 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v19 = (char *)&v34 - v18;
  v21 = *(int *)(v20 + 48);
  v22 = (uint64_t)&v19[v21];
  v23 = a1 + v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(v13 - 8) + 16))(v19, a1, v13, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v22, v23, v14);
  v25 = (int *)type metadata accessor for _RowVisitationContext(0, a2, a3, v24);
  v26 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, a1 + v25[9], v37);
  v27 = v25[11];
  v43 = *(_QWORD *)(a1 + v25[10]);
  v28 = a1 + v27;
  v29 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v28, v40);
  v31 = type metadata accessor for ShadowListDataSource(0, a2, a3, v30);
  v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v31);
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey((_BYTE *)&v42 + 1);
  default argument 6 of _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)(&v42, v31, v32);
  _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)((uint64_t)v19, v22, v26, &v43, v29, 0, (char *)&v42 + 1, (char *)&v42, v41, v31, v32);
  return swift_bridgeObjectRetain();
}

uint64_t Button.init(action:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _WORD *a7@<X8>)
{
  _QWORD *v10;
  uint64_t v11;

  *a7 = 256;
  v10 = (_QWORD *)((char *)a7 + *(int *)(type metadata accessor for Button(0, a5, a6, a4) + 36));
  *v10 = a1;
  v10[1] = a2;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v11 = swift_retain();
  a3(v11);
  return swift_release();
}

uint64_t UpdateViewGeometry.updateValue()()
{
  AGGraphGetValue();
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  swift_retain();
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_release();
  swift_release();
  return AGGraphSetOutputValue();
}

uint64_t static _FocusableModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(_QWORD *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t (*v9)(void);
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 16);
  v25 = *(_DWORD *)(a1 + 8);
  v26 = *(_DWORD *)(a1 + 28);
  v20 = *(_DWORD *)(a1 + 36);
  v21 = *(_DWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 40);
  v30 = *(_DWORD *)(a1 + 60);
  v31 = *(_DWORD *)(a1 + 32);
  v22 = *(_DWORD *)(a1 + 64);
  v29 = *(_DWORD *)(a1 + 68);
  v27 = *(_DWORD *)(a1 + 56);
  v28 = *(_DWORD *)(a1 + 72);
  v24 = *(_DWORD *)(a1 + 76);
  v19 = *(_DWORD *)(a1 + 80);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_FocusableModifier>, (uint64_t)&type metadata for _FocusableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedOptions and conformance ResolvedOptions();
  v4 = Attribute.init<A>(body:value:flags:update:)();
  v5 = _GraphValue.value.getter();
  type metadata accessor for ViewGraph();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  MEMORY[0x18D75C5F8](v6);
  swift_weakInit();
  swift_release();
  LOBYTE(v53) = 0;
  v52 = 0;
  *(_QWORD *)&v48 = __PAIR64__(v4, v5);
  DWORD2(v48) = _ViewInputs.viewPhase.getter();
  swift_getKeyPath();
  v7 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  HIDWORD(v48) = v7;
  v62 = v3;
  v63 = v25;
  v64 = v23;
  v65 = v21;
  v66 = v26;
  v67 = __PAIR64__(v20, v31);
  v68 = v18;
  v69 = v17;
  v70 = v27;
  v71 = v30;
  v72 = v22;
  v73 = v29;
  v74 = v28;
  v75 = v24;
  v76 = v19;
  swift_getKeyPath();
  v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  LODWORD(v49) = v8;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateViewFocusItem and conformance UpdateViewFocusItem();
  v13 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of UpdateViewFocusItem((uint64_t)&v48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  v62 = v3;
  v63 = v25;
  v64 = v23;
  v65 = v21;
  v66 = v26;
  v67 = __PAIR64__(v20, v31);
  v68 = v18;
  v69 = v17;
  v70 = v27;
  v71 = v30;
  v72 = v22;
  v73 = v29;
  v74 = v28;
  v75 = v24;
  v76 = v19;
  type metadata accessor for FocusableViewResponder();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = FocusableViewResponder.init(inputs:)();
  v62 = v3;
  v63 = v25;
  v64 = v23;
  v65 = v21;
  v66 = v26;
  v67 = __PAIR64__(v20, v31);
  v68 = v18;
  v69 = v17;
  v70 = v27;
  v71 = v30;
  v72 = v22;
  v73 = v29;
  v74 = v28;
  v75 = v24;
  v76 = v19;
  LOBYTE(v48) = 1;
  lazy protocol witness table accessor for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  LOBYTE(v48) = 0;
  v9 = MEMORY[0x1E0CFECF8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, (uint64_t (*)(_QWORD, uint64_t))v9, MEMORY[0x1E0CFED00]);
  v10 = Attribute.init<A>(body:value:flags:update:)();
  *(_QWORD *)&v48 = v3;
  DWORD2(v48) = v25;
  v49 = v23;
  v50 = v21;
  v51 = v26;
  v52 = __PAIR64__(v20, v31);
  v53 = v18;
  v54 = v17;
  v55 = v27;
  v56 = v30;
  v57 = v22;
  v58 = v29;
  v59 = v28;
  v60 = v24;
  v61 = v19;
  *(_QWORD *)&v48 = __PAIR64__(_ViewInputs.environment.getter(), v13);
  DWORD2(v48) = v10;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type IsFocusedEnvironmentChild and conformance IsFocusedEnvironmentChild();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<FocusableOptionsKey>, (uint64_t)&type metadata for FocusableOptionsKey, (uint64_t)&protocol witness table for FocusableOptionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<FocusableOptionsKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  *(_QWORD *)&v48 = v62;
  DWORD2(v48) = v63;
  v49 = v64;
  v50 = v65;
  v51 = v66;
  v52 = v67;
  v53 = v68;
  v54 = v69;
  v55 = v70;
  v56 = v71;
  v57 = v72;
  v58 = v73;
  v59 = v74;
  v60 = v75;
  v61 = v76;
  v33 = v62;
  LODWORD(v34) = v63;
  v35 = v64;
  v36 = v65;
  v37 = v66;
  v38 = v67;
  v39 = v68;
  v40 = v69;
  v41 = v70;
  v42 = v71;
  v43 = v72;
  v44 = v73;
  v45 = v74;
  v46 = v75;
  v47 = v76;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  a2(v32, v11, &v33);
  v33 = v32[0];
  v34 = v32[1];
  makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)(&v48, &v33, v14, v13, a3);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

double makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)@<D0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W4>, double *a5@<X8>)
{
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  unsigned int v22;
  double v23;
  uint64_t v24;
  int v25;
  _OWORD v26[3];
  _OWORD v27[5];
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = a1[3];
  v39 = a1[2];
  v40 = v8;
  v41 = a1[4];
  v42 = *((_DWORD *)a1 + 20);
  v9 = a1[1];
  v37 = *a1;
  v38 = v9;
  v10 = *a2;
  v25 = DWORD2(v40);
  v24 = v40;
  v11 = *((_DWORD *)a2 + 2);
  v12 = *((_DWORD *)a2 + 3);
  v23 = COERCE_DOUBLE(__PAIR64__(v12, v11));
  *(_QWORD *)&v29 = v40;
  DWORD2(v29) = DWORD2(v40);
  swift_bridgeObjectRetain();
  v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v13 & 1) != 0)
  {
    *(_QWORD *)(a3 + 392) = AGCreateWeakAttribute();
    *(_BYTE *)(a3 + 400) = 0;
    _ViewInputs.transform.getter();
    _ViewInputs.animatedPosition()();
    v22 = v12;
    LODWORD(v34) = v42;
    _ViewInputs.animatedSize()();
    ContentResponderHelper.init()();
    v15 = v34;
    v16 = a4;
    *(_QWORD *)((char *)&v34 + 4) = *(_QWORD *)((char *)&v41 + 4);
    BYTE12(v34) = BYTE12(v41);
    v35 = v15;
    v36 = a3;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
    lazy protocol witness table accessor for type UpdateViewGeometry and conformance UpdateViewGeometry();
    swift_retain();
    v17 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v31 = v39;
    v32 = v40;
    v33 = v41;
    LODWORD(v34) = v42;
    v29 = v37;
    v30 = v38;
    *(_QWORD *)&v27[0] = v10;
    *((_QWORD *)&v27[0] + 1) = __PAIR64__(v22, v11);
    swift_bridgeObjectRetain();
    swift_retain();
    outlined retain of _ViewInputs((uint64_t)&v37);
    specialized UpdateFocusableViewResponder.init(inputs:outputs:item:geometry:responder:)(v16, v17, a3, (uint64_t)v26);
    v29 = v26[0];
    v30 = v26[1];
    v31 = v26[2];
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type UpdateFocusableViewResponder and conformance UpdateFocusableViewResponder();
    v18 = Attribute.init<A>(body:value:flags:update:)();
    outlined release of UpdateFocusableViewResponder((uint64_t)v26);
    v27[2] = v39;
    v27[3] = v40;
    v27[4] = v41;
    v28 = v42;
    v27[0] = v37;
    v27[1] = v38;
    outlined retain of _ViewInputs((uint64_t)&v37);
    UIKitHostedFocusItemLifecycle.init(inputs:responder:)((uint64_t *)v27, v18, (uint64_t)&v29);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v29);
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    LOBYTE(v29) = 0;
    v19 = _ViewOutputs.subscript.setter();
    *(_QWORD *)&v29 = v24;
    DWORD2(v29) = v25;
    MEMORY[0x1E0C80A78](v19, v20);
    outlined retain of [Text.Modifier]((uint64_t)&v24);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    v13 = swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v29 = v24;
  DWORD2(v29) = v25;
  MEMORY[0x1E0C80A78](v13, v14);
  outlined retain of [Text.Modifier]((uint64_t)&v24);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v10;
  result = v23;
  a5[1] = v23;
  return result;
}

uint64_t UpdateFocusableViewResponder.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  int v33;
  char v34;
  char v35;
  char v36;
  _QWORD v37[5];

  v37[4] = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  Value = AGGraphGetValue();
  v3 = v2;
  v4 = *(_QWORD *)Value;
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 24);
  v7 = *(_QWORD *)(Value + 32);
  v8 = *(_QWORD *)(Value + 40);
  v9 = *(_QWORD *)(Value + 48);
  v10 = *(_QWORD *)(Value + 56);
  v11 = *(_QWORD *)(Value + 64);
  v33 = *(_DWORD *)(Value + 72);
  v34 = *(_BYTE *)(Value + 16);
  v32 = *(_BYTE *)(Value + 76);
  v31 = *(_QWORD *)(Value + 80);
  v12 = *(_QWORD *)(Value + 88);
  v13 = (char *)AGGraphGetValue();
  v36 = v14;
  v35 = *v13;
  v15 = *(_QWORD *)(v0 + 40);
  v16 = (unsigned int *)AGGraphGetValue();
  v17 = *((_QWORD *)v16 + 1);
  v18 = *((_QWORD *)v16 + 2);
  v19 = *((_QWORD *)v16 + 3);
  v20 = 0x100000000;
  if (!*((_BYTE *)v16 + 4))
    v20 = 0;
  v21 = *(_QWORD *)(v15 + 224);
  v22 = *(_QWORD *)(v15 + 232);
  v24 = *(_QWORD *)(v15 + 240);
  v23 = *(_QWORD *)(v15 + 248);
  *(_QWORD *)(v15 + 224) = v20 | *v16;
  *(_QWORD *)(v15 + 232) = v17;
  *(_QWORD *)(v15 + 240) = v18;
  *(_QWORD *)(v15 + 248) = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of FocusItem.ViewItem?(v21, v22, v24);
  outlined consume of FocusItem.ViewItem?(v21, v22, v24);
  v37[0] = v21;
  v37[1] = v22;
  v37[2] = v24;
  v37[3] = v23;
  FocusableViewResponder.baseItem.didset((int *)v37);
  outlined consume of FocusItem.ViewItem?(v21, v22, v24);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v15 + 216) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0 && AGGraphGetOutputValue())
  {
    if ((v36 & 1) != 0)
      goto LABEL_11;
LABEL_10:
    if (AGGraphGetOutputValue())
      goto LABEL_12;
    goto LABEL_11;
  }
  swift_beginAccess();
  *(_QWORD *)(v15 + 296) = v4;
  *(_QWORD *)(v15 + 304) = v5;
  *(_BYTE *)(v15 + 312) = v34;
  *(_QWORD *)(v15 + 320) = v6;
  *(_QWORD *)(v15 + 328) = v7;
  *(_QWORD *)(v15 + 336) = v8;
  *(_QWORD *)(v15 + 344) = v9;
  *(_QWORD *)(v15 + 352) = v10;
  *(_QWORD *)(v15 + 360) = v11;
  *(_DWORD *)(v15 + 368) = v33;
  *(_BYTE *)(v15 + 372) = v32;
  *(_QWORD *)(v15 + 376) = v31;
  *(_QWORD *)(v15 + 384) = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  FocusableViewResponder.geometry.didset();
  if ((v36 & 1) == 0)
    goto LABEL_10;
LABEL_11:
  *(_BYTE *)(v15 + 289) = v35;
LABEL_12:
  *(_BYTE *)(v15 + 401) = *(_BYTE *)AGGraphGetValue();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for FocusGroupIdentifier?, (uint64_t)&type metadata for FocusGroupIdentifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v26 = AGGraphGetValue();
  v27 = *(_BYTE *)(v26 + 8);
  v28 = *(_BYTE *)(v26 + 9);
  *(_QWORD *)(v15 + 408) = *(_QWORD *)v26;
  *(_BYTE *)(v15 + 416) = v27;
  *(_BYTE *)(v15 + 417) = v28;
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v29 + 32) = v15;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t outlined consume of FocusItem.ViewItem?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
    return swift_release();
  return result;
}

uint64_t outlined copy of FocusItem.ViewItem?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
    return swift_retain();
  return result;
}

void FocusableViewResponder.baseItem.didset(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  void *v6;

  v2 = *((_QWORD *)a1 + 2);
  if (!*(_QWORD *)(v1 + 240))
  {
    if (!v2)
      return;
    goto LABEL_12;
  }
  v3 = v2 == 0;
  if (v2)
    v4 = *a1;
  else
    v4 = 0;
  if (v3 || *(_DWORD *)(v1 + 224) != v4)
  {
LABEL_12:
    v6 = *(void **)(v1 + 424);
    if (v6)
    {
      *(_QWORD *)(v1 + 424) = 0;

    }
  }
}

uint64_t FocusableViewResponder.geometry.didset()
{
  uint64_t v0;
  _BYTE *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v1 = (_BYTE *)(v0 + 288);
  swift_beginAccess();
  v2 = *(_BYTE *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_DWORD *)(v0 + 368);
  v6 = *(_BYTE *)(v0 + 372);
  v7 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 384);
  v48 = *(_OWORD *)(v0 + 296);
  v49 = v2;
  v50 = v3;
  v9 = *(_OWORD *)(v0 + 344);
  v51 = *(_OWORD *)(v0 + 328);
  v52 = v9;
  v53 = v4;
  v54 = v5;
  v55 = v6;
  v56 = v7;
  v57 = v8;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E0CE5B70], MEMORY[0x1E0CE5B60], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53A0]);
  ContentResponderHelper.size.getter();
  v11 = v10;
  result = swift_endAccess();
  if ((~v11 & 0x7FF0000000000000) == 0 && (v11 & 0xFFFFFFFFFFFFFLL) != 0)
    goto LABEL_7;
  swift_beginAccess();
  v13 = *(_BYTE *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 360);
  v16 = *(_DWORD *)(v0 + 368);
  v17 = *(_BYTE *)(v0 + 372);
  v18 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 384);
  v48 = *(_OWORD *)(v0 + 296);
  v49 = v13;
  v50 = v14;
  v20 = *(_OWORD *)(v0 + 344);
  v51 = *(_OWORD *)(v0 + 328);
  v52 = v20;
  v53 = v15;
  v54 = v16;
  v55 = v17;
  v56 = v18;
  v57 = v19;
  ContentResponderHelper.size.getter();
  v22 = v21;
  result = swift_endAccess();
  if ((~v22 & 0x7FF0000000000000) == 0 && (v22 & 0xFFFFFFFFFFFFFLL) != 0)
    goto LABEL_7;
  swift_beginAccess();
  v23 = *(_BYTE *)(v0 + 312);
  v24 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 360);
  v26 = *(_DWORD *)(v0 + 368);
  v27 = *(_BYTE *)(v0 + 372);
  v28 = *(_QWORD *)(v0 + 376);
  v29 = *(_QWORD *)(v0 + 384);
  v48 = *(_OWORD *)(v0 + 296);
  v49 = v23;
  v50 = v24;
  v30 = *(_OWORD *)(v0 + 344);
  v51 = *(_OWORD *)(v0 + 328);
  v52 = v30;
  v53 = v25;
  v54 = v26;
  v55 = v27;
  v56 = v28;
  v57 = v29;
  ContentResponderHelper.size.getter();
  v32 = v31;
  v34 = v33;
  result = swift_endAccess();
  if (v32 != 0.0)
    goto LABEL_8;
  if (v34 == 0.0)
  {
LABEL_7:
    *(_OWORD *)(v0 + 256) = 0u;
    *(_OWORD *)(v0 + 272) = 0u;
    *v1 = 1;
  }
  else
  {
LABEL_8:
    swift_beginAccess();
    v35 = *(_BYTE *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 320);
    v37 = *(_QWORD *)(v0 + 360);
    v38 = *(_DWORD *)(v0 + 368);
    v39 = *(_BYTE *)(v0 + 372);
    v40 = *(_QWORD *)(v0 + 376);
    v41 = *(_QWORD *)(v0 + 384);
    v48 = *(_OWORD *)(v0 + 296);
    v49 = v35;
    v50 = v36;
    v42 = *(_OWORD *)(v0 + 344);
    v51 = *(_OWORD *)(v0 + 328);
    v52 = v42;
    v53 = v37;
    v54 = v38;
    v55 = v39;
    v56 = v40;
    v57 = v41;
    ContentResponderHelper.size.getter();
    v44 = v43;
    v46 = v45;
    swift_endAccess();
    *(_QWORD *)&v47 = v44;
    *((_QWORD *)&v47 + 1) = v46;
    hostingViewCoordinateSpace.getter();
    BYTE8(v51) = 1;
    CGRect.convert(to:transform:)();
    result = outlined destroy of CoordinateSpace((uint64_t)&v48);
    *(_OWORD *)(v0 + 256) = 0uLL;
    *(_OWORD *)(v0 + 272) = v47;
    *v1 = 0;
  }
  return result;
}

uint64_t closure #1 in AnchorWriter.value.getter(uint64_t a1)
{
  void (*v1)(void);

  v1 = *(void (**)(void))(a1 + 8);
  AnchorGeometry.init(position:size:transform:)();
  Anchor.Source.prepare(geometry:)();
  v1();
  return swift_release();
}

uint64_t View.onTest(_:handler:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[4];

  v20[1] = a6;
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v20 - v14;
  v17 = *a1;
  v16 = a1[1];
  v22[0] = v17;
  v22[1] = v16;
  v22[2] = a2;
  v22[3] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  MEMORY[0x18D75B4AC](v22, a4, &unk_1E1ACA538, a5);
  swift_release();
  swift_bridgeObjectRelease();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v16;
  v21[0] = a5;
  v21[1] = &protocol witness table for OnTestViewModifier;
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v21);
  View.transformPreference<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)(a1, a2);
}

uint64_t View.accessibilityLabel<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v16;

  v6 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v9 = Text.init<A>(_:)();
  v11 = v10;
  v13 = v12 & 1;
  View.accessibilityLabel(_:)(v9, v10, v12 & 1, v14, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityLabel(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v14;
  char v15;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  *(_BYTE *)(v12 + 48) = a3 & 1;
  *(_QWORD *)(v12 + 56) = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  v14 = v12;
  v15 = 2;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5888], (uint64_t)&v14, 1, a5, MEMORY[0x1E0CE5888], a6);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for _ContiguousArrayStorage<Text>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Text>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>);
  }
}

uint64_t @objc UIHostingController.preferredStatusBarStyle.getter(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = UIHostingController.preferredStatusBarStyle.getter();

  return v2;
}

uint64_t UIHostingController._preferredStatusBarStyle.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  char v3;
  char v4;
  id v6;
  uint64_t v7;

  v0 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v0)
  {
    v1 = v0;
    v2 = BarAppearanceBridge.uiPreferredStatusBarStyle.getter();
    v4 = v3;

    if ((v4 & 1) == 0)
      return v2;
  }
  v6 = (id)specialized UIHostingController.host.getter();
  v7 = _UIHostingView.preferredStatusBarStyle.getter();

  return v7;
}

uint64_t _UIHostingView.preferredStatusBarStyle.getter()
{
  char v0;
  _BOOL4 IsInvertColorsEnabled;
  uint64_t v3;
  uint64_t v4;
  char v5;

  _UIHostingView.colorScheme.getter(&v5);
  v0 = v5;
  if (v5 == 2)
    return 0;
  IsInvertColorsEnabled = UIAccessibilityIsInvertColorsEnabled();
  v3 = 3;
  if ((v0 & 1) != 0)
    v3 = 1;
  v4 = 3;
  if ((v0 & 1) == 0)
    v4 = 1;
  if (IsInvertColorsEnabled)
    return v4;
  else
    return v3;
}

id @objc UIHostingController.childForStatusBarStyle.getter(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)UIHostingController.childForStatusBarStyle.getter();

  return v2;
}

unint64_t UIHostingController._childForStatusBarStyle.getter()
{
  unint64_t v0;
  unint64_t v1;
  void *v2;
  id v3;
  BOOL HasStatusBar;
  id v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t result;
  id v14;
  char v15;

  v1 = v0;
  specialized UIHostingController.host.getter();
  _UIHostingView.colorScheme.getter(&v15);
  if (v15 != 2)
    return 0;
  v2 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v2)
  {
    v3 = v2;
    HasStatusBar = BarAppearanceBridge.uiHasStatusBarOpinion.getter();

    if (HasStatusBar)
      return 0;
  }
  specialized UIHostingController.host.getter();
  if ((_UIHostingView.shouldDeferToChildViewControllerForStatusBar.getter() & 1) == 0)
    return 0;
  v5 = objc_msgSend((id)v1, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v6 >> 62))
  {
    v7 = *(char **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      goto LABEL_13;
LABEL_7:
    v8 = v7 - 1;
    if (__OFSUB__(v7, 1))
    {
      __break(1u);
    }
    else if ((v6 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v8 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v8 < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v9 = (char *)*(id *)(v6 + 8 * (_QWORD)v8 + 32);
LABEL_12:
        v7 = v9;
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_28;
    }
    v9 = (char *)MEMORY[0x18D75E3BC](v8, v6);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v7 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7)
    goto LABEL_7;
LABEL_13:
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v7, sel_childViewControllerForStatusBarStyle);

  if (v10)
    return (unint64_t)v10;
  v11 = objc_msgSend((id)v1, sel_childViewControllers);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v1 >> 62))
  {
    v12 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_16:
  result = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_33:
    v14 = (id)MEMORY[0x18D75E3BC](result, v1);
    goto LABEL_21;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v1 + 8 * result + 32);
LABEL_21:
    v10 = v14;
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  __break(1u);
  return result;
}

id @objc UIHostingController.childForStatusBarHidden.getter(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = (void *)UIHostingController.childForStatusBarHidden.getter();

  return v2;
}

unint64_t UIHostingController._childForStatusBarHidden.getter()
{
  void *v0;
  unint64_t v1;
  id v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t result;
  id v11;

  v1 = (unint64_t)v0;
  specialized UIHostingController.host.getter();
  if (_UIHostingView.prefersStatusBarHidden.getter() != 2)
    return 0;
  specialized UIHostingController.host.getter();
  if ((_UIHostingView.shouldDeferToChildViewControllerForStatusBar.getter() & 1) == 0)
    return 0;
  v2 = objc_msgSend(v0, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(char **)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      goto LABEL_11;
LABEL_5:
    v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
    }
    else if ((v3 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v5 < *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v6 = (char *)*(id *)(v3 + 8 * (_QWORD)v5 + 32);
LABEL_10:
        v4 = v6;
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_26;
    }
    v6 = (char *)MEMORY[0x18D75E3BC](v5, v3);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4)
    goto LABEL_5;
LABEL_11:
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v4, sel_childViewControllerForStatusBarHidden);

  if (v7)
    return (unint64_t)v7;
  v8 = objc_msgSend(v0, sel_childViewControllers);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v1 >> 62))
  {
    v9 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_14:
  result = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_31:
    v11 = (id)MEMORY[0x18D75E3BC](result, v1);
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v1 + 8 * result + 32);
LABEL_19:
    v7 = v11;
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t _UIHostingView.shouldDeferToChildViewControllerForStatusBar.getter()
{
  return *(unsigned __int8 *)(specialized _UIHostingView.statusBarBridge.getter() + 17);
}

void _UIHostingView.colorScheme.getter(_BYTE *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x180));
}

void UIHostingConfiguration.makeContentView()(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + *(int *)(a1 + 68)) == 1)
    type metadata accessor for UIHostingContentView();
  type metadata accessor for UIHostingContentViewWithoutInteractions();
}

void sub_186E83880(objc_class *a1)
{
  id v1;

  v1 = objc_allocWithZone(a1);
  specialized UIHostingContentView.init(configuration:)();
}

void UIHostingContentView.updateHostedViews()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v10 - v4;
  v6 = *(_QWORD *)(v1 + 2480);
  v7 = *((unsigned __int8 *)v0 + v6);
  *((_BYTE *)v0 + v6) = *(_QWORD *)((char *)v0 + *(_QWORD *)(v1 + 2512)) != 0;
  v8 = UIHostingContentView.isInList.didset(v7);
  UIHostingContentView.makeRootView()(v8, v9, (uint64_t)v5);
}

uint64_t sub_186E83954()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  specialized _UIHostingView.rootView.setter(v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
  v6 = (_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x9C0));
  v7 = *v6;
  if (*v6)
  {
    v8 = v6[1];
    outlined copy of AppIntentExecutor?(*v6);
    UIHostingContentView.updateBackgroundHostIfNeeded(_:)(v7, v8);
  }
  return result;
}

uint64_t _UIHostingView.rootView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  specialized _UIHostingView.rootView.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

uint64_t CoreCoordinator.dataSource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = (char *)v1 + *(_QWORD *)(v3 + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t UIHostingContentView.isInList.setter(char a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9B0);
  v3 = *((unsigned __int8 *)v1 + v2);
  *((_BYTE *)v1 + v2) = a1;
  return UIHostingContentView.isInList.didset(v3);
}

uint64_t UIHostingContentView.isInList.didset(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9B0)) != (result & 1))
  {
    v2 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x68));
    result = swift_beginAccess();
    if (*(_BYTE *)(v2 + 128) == 1)
    {
      MEMORY[0x1E0C80A78](result, v3);
      return static Update.ensure<A>(_:)();
    }
  }
  return result;
}

uint64_t closure #1 in UIHostingContentView.init(configuration:)()
{
  GraphHost.addPreference<A>(_:)();
  lazy protocol witness table accessor for type SwipeActions.Feature and conformance SwipeActions.Feature();
  return ViewGraph.append<A>(feature:)();
}

void UIHostingContentView.makeRootView()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[20];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v10 = a3;
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x990);
  v8[19] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8[18] = (char *)v8 - v5;
  v7 = *(_QWORD *)(v6 + 2456);
  v11 = v4;
  v8[17] = v4;
  v12 = v7;
  v9 = *(_OWORD *)(v6 + 2464);
  v13 = v9;
  type metadata accessor for UIHostingConfiguration();
}

void sub_186E83CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  UIHostingContentView._configuration.getter();
}

void sub_186E83D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v1, v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  UIHostingContentView.defaultStyling()(v6 - 344);
  *(_OWORD *)(v6 - 480) = *(_OWORD *)(v6 - 344);
  *(_OWORD *)(v6 - 496) = *(_OWORD *)(v6 - 328);
  *(_QWORD *)(v6 - 520) = *(_QWORD *)(v6 - 304);
  *(_QWORD *)(v6 - 512) = *(_QWORD *)(v6 - 296);
  *(_DWORD *)(v6 - 500) = *(unsigned __int8 *)(v6 - 288);
  *(_QWORD *)(v6 - 440) = *(_QWORD *)(v6 - 272);
  *(_DWORD *)(v6 - 444) = *(unsigned __int8 *)(v6 - 264);
  UIHostingContentView._configuration.getter();
}

void sub_186E83DD8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v0 + *(int *)(v2 + 60);
  *(_QWORD *)(v3 - 456) = *(_QWORD *)v4;
  *(_DWORD *)(v3 - 524) = *(unsigned __int8 *)(v4 + 8);
  *(_QWORD *)(v3 - 432) = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v3 - 416) = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v3 - 400) = *(_QWORD *)(v4 + 48);
  v1(v0, v2);
  UIHostingContentView._configuration.getter();
}

uint64_t sub_186E83E3C()
{
  char v0;
  _QWORD *v1;
  char v2;
  _DWORD *v3;
  void (*v4)(uint64_t, uint64_t);
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v11 = v7 + *(int *)(v6 + 64);
  *(_QWORD *)(v8 - 424) = *(_QWORD *)v11;
  v12 = *(_BYTE *)(v11 + 8);
  *(_QWORD *)(v8 - 408) = *(_QWORD *)(v11 + 16);
  v13 = *(_BYTE *)(v11 + 24);
  v4(v7, v6);
  v14 = *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x9B0));
  *(_BYTE *)(v8 - 120) = *(_DWORD *)(v8 - 524);
  *(_BYTE *)(v8 - 128) = v5;
  *(_BYTE *)(v8 - 136) = v2;
  *(_BYTE *)(v8 - 144) = v0;
  *(_BYTE *)(v8 - 152) = v12;
  *(_BYTE *)(v8 - 160) = v13;
  *(_OWORD *)(v8 - 344) = *(_OWORD *)(v8 - 480);
  *(_OWORD *)(v8 - 328) = *(_OWORD *)(v8 - 496);
  *(_QWORD *)(v8 - 312) = v9;
  *(_QWORD *)(v8 - 304) = *(_QWORD *)(v8 - 520);
  *(_QWORD *)(v8 - 296) = *(_QWORD *)(v8 - 512);
  *(_BYTE *)(v8 - 288) = *(_DWORD *)(v8 - 500);
  *(_DWORD *)(v8 - 287) = *(_DWORD *)((char *)v3 + 233);
  *(_DWORD *)(v8 - 284) = v3[59];
  *(_QWORD *)(v8 - 280) = v10;
  v15 = *(_QWORD *)(v8 - 440);
  *(_QWORD *)(v8 - 272) = v15;
  *(_BYTE *)(v8 - 264) = *(_DWORD *)(v8 - 444);
  *(_DWORD *)(v8 - 263) = *(_DWORD *)((char *)v3 + 226);
  *(_DWORD *)(v8 - 260) = *(_DWORD *)((char *)v3 + 229);
  *(_QWORD *)(v8 - 256) = *(_QWORD *)(v8 - 456);
  *(_BYTE *)(v8 - 248) = *(_BYTE *)(v8 - 120);
  v16 = *(_DWORD *)((char *)v3 + 217);
  *(_DWORD *)(v8 - 244) = v3[55];
  *(_DWORD *)(v8 - 247) = v16;
  *(_QWORD *)(v8 - 240) = *(_QWORD *)(v8 - 432);
  *(_BYTE *)(v8 - 232) = *(_BYTE *)(v8 - 128);
  v17 = *(_DWORD *)((char *)v3 + 209);
  *(_DWORD *)(v8 - 228) = v3[53];
  *(_DWORD *)(v8 - 231) = v17;
  *(_QWORD *)(v8 - 224) = *(_QWORD *)(v8 - 416);
  *(_BYTE *)(v8 - 216) = *(_BYTE *)(v8 - 136);
  v18 = *(_DWORD *)((char *)v3 + 201);
  *(_DWORD *)(v8 - 212) = v3[51];
  *(_DWORD *)((char *)v3 + 129) = v18;
  *(_QWORD *)(v8 - 208) = *(_QWORD *)(v8 - 400);
  *(_BYTE *)(v8 - 200) = *(_BYTE *)(v8 - 144);
  v19 = *(_DWORD *)((char *)v3 + 193);
  *(_DWORD *)(v8 - 196) = v3[49];
  *(_DWORD *)((char *)v3 + 145) = v19;
  *(_QWORD *)(v8 - 192) = *(_QWORD *)(v8 - 424);
  *(_BYTE *)(v8 - 184) = *(_BYTE *)(v8 - 152);
  v20 = *(_DWORD *)((char *)v3 + 185);
  *(_DWORD *)(v8 - 180) = v3[47];
  *(_DWORD *)((char *)v3 + 161) = v20;
  *(_QWORD *)(v8 - 176) = *(_QWORD *)(v8 - 408);
  *(_BYTE *)(v8 - 168) = *(_BYTE *)(v8 - 160);
  v21 = *(_QWORD *)(v8 - 368);
  *(_BYTE *)(v8 - 167) = v14;
  v22 = *(_QWORD *)(v8 - 392);
  v23 = *(_QWORD *)(v8 - 384);
  MEMORY[0x18D75B4AC](v8 - 344, v22, &unk_1E1B19BE0, v21);
  swift_release();
  swift_release();
  outlined consume of Transaction?(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 376) + 8))(v23, v22);
}

uint64_t destroy for Tuple(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

void UIHostingContentView._configuration.getter()
{
  swift_beginAccess();
  type metadata accessor for UIHostingConfiguration();
}

uint64_t sub_186E84170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t initializeWithCopy for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)(v15 + 49);
  v17 = *(_OWORD *)(v15 + 40);
  v18 = *(_OWORD *)(v15 + 24);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v14 + 24) = v18;
  *(_OWORD *)(v14 + 40) = v17;
  *(_OWORD *)(v14 + 49) = v16;
  v19 = *(_OWORD *)(v15 + 72);
  *(_OWORD *)(v14 + 81) = *(_OWORD *)(v15 + 81);
  *(_OWORD *)(v14 + 72) = v19;
  *(_BYTE *)(v14 + 97) = *(_BYTE *)(v15 + 97);
  *(_BYTE *)(v14 + 98) = *(_BYTE *)(v15 + 98);
  return a1;
}

void type metadata accessor for UIHostingConfiguration()
{
  JUMPOUT(0x18D75FF28);
}

double UIHostingContentView.defaultStyling()@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  double result;
  uint64_t v51;
  char v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  char v59;

  v2 = v1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UIListContentConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC23A0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v51 - v7;
  objc_msgSend(v2, sel_directionalLayoutMargins, v6);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && objc_msgSend(v2, sel_insetsLayoutMarginsFromSafeArea))
  {
    objc_msgSend(v2, sel_safeAreaInsets);
    v17 = objc_msgSend(v2, sel_traitCollection);
    objc_msgSend(v17, sel_layoutDirection);

    EdgeInsets.negatedInsets.getter();
    EdgeInsets.adding(_:)();
    v10 = v18;
    v12 = v19;
    v14 = v20;
    v16 = v21;
  }
  v22 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
  v51 = 1;
  v52 = 0;
  ListContentStyling.init(configuration:insets:minHeight:tint:)((uint64_t)v8, (uint64_t)&v51, (uint64_t)v53, v10, v12, v14, v16, 0.0);
  v23 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x9D0));
  v24 = (uint64_t (*)(uint64_t))*v23;
  if (*v23)
  {
    v25 = outlined copy of AppIntentExecutor?(*v23);
    v26 = (void *)v24(v25);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v24);
    if (v26)
    {
      v27 = objc_msgSend(v26, sel_textProperties);
      v28 = objc_msgSend(v27, sel_font);

      v29 = Font.init(_:)();
      swift_release();
      *(_QWORD *)&v55 = v29;
      v30 = objc_msgSend(v26, sel_textProperties);
      v31 = objc_msgSend(v30, sel_resolvedColor);

      v51 = (uint64_t)v31;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      lazy protocol witness table accessor for type UIColor and conformance UIColor();
      v32 = Color.init<A>(provider:)();
      swift_release();
      *((_QWORD *)&v55 + 1) = v32;
      v33 = objc_msgSend(v2, sel_traitCollection);
      objc_msgSend(v26, sel__minimumHeightForTraitCollection_, v33);
      v35 = v34;

      v54 = v35;
      v36 = objc_msgSend(v26, sel_textProperties);
      v37 = objc_msgSend(v36, sel_transform);

      v56 = v37 == (id)1;
      objc_msgSend(v26, sel_imageToTextPadding);
      v57 = v38;
      v39 = objc_msgSend(v26, sel_imageProperties);
      v40 = objc_msgSend(v39, sel_tintColor);

      if (v40)
      {
        v51 = (uint64_t)v40;
        v41 = v40;
        v42 = Color.init<A>(provider:)();

        v43 = 1;
      }
      else
      {

        v43 = 0;
        v42 = 1;
      }
      outlined consume of Transaction?(v58);
      v58 = v42;
      v59 = v43;
    }
  }
  v44 = v54;
  v45 = v56;
  v46 = v57;
  v47 = v58;
  v48 = v59;
  v49 = v53[1];
  *(_OWORD *)a1 = v53[0];
  *(_OWORD *)(a1 + 16) = v49;
  *(_QWORD *)(a1 + 32) = v44;
  result = *(double *)&v55;
  *(_OWORD *)(a1 + 40) = v55;
  *(_BYTE *)(a1 + 56) = v45;
  *(_QWORD *)(a1 + 64) = v46;
  *(_QWORD *)(a1 + 72) = v47;
  *(_BYTE *)(a1 + 80) = v48;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Double, @unowned UnsafePointer<_UIUpdateTiming>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  void (*v7)(uint64_t, uint64_t, double);

  v7 = *(void (**)(uint64_t, uint64_t, double))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

id UIColor.init(_:)(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  _QWORD v18[6];

  v2 = Color.cgColor.getter();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithCGColor_, v2);

    swift_release();
    return v4;
  }
  else
  {
    type metadata accessor for ObjcColor();
    swift_retain();
    v6 = (void *)ObjcColor.__allocating_init(_:)();
    if (one-time initialization token for dynamicColorCache != -1)
      swift_once();
    v7 = objc_msgSend((id)dynamicColorCache, sel_objectForKey_, v6);
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithColor__swiftUI___, v7);

      swift_release();
      return v9;
    }
    else
    {
      swift_retain();
      v10 = dispatch thunk of AnyColorBox.kitColor.getter();
      swift_release();
      if (v10)
      {
        objc_opt_self();
        v11 = (void *)swift_dynamicCastObjCClassUnconditional();
        v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithColor__swiftUI___, v11);

      }
      else
      {
        v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        v18[4] = partial apply for closure #1 in UIColor.init(_:);
        v18[5] = a1;
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 1107296256;
        v18[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
        v18[3] = &block_descriptor_71;
        v14 = _Block_copy(v18);
        swift_retain();
        swift_release();
        v12 = objc_msgSend(v13, sel_initWithDynamicProvider_, v14);
        _Block_release(v14);
      }
      v15 = (id)dynamicColorCache;
      v16 = v12;
      v17 = v6;
      objc_msgSend(v15, sel_setObject_forKey_, v16, v17);

      swift_release();
      return v16;
    }
  }
}

void @objc _UIHostingView.traitCollectionDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  UITraitCollection_optional v7;

  v5 = a3;
  v6 = a1;
  v7.is_nil = (char)v6;
  v7.value.super.isa = (Class)a3;
  _UIHostingView.traitCollectionDidChange(_:)(v7);
}

void sub_186E849A4()
{
  void *v0;
  void *v1;

}

Swift::Void __swiftcall _UIHostingView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  _UIHostingView.updateBackgroundColor()();
}

uint64_t sub_186E849F8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  if ((_UIHostingView.shouldDisableUIKitAnimations.getter() & 1) != 0
    && (static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v5 = static Transaction.currentUIViewTransaction(canDisableAnimations:)(1);
    if (v5 != 1)
    {
      v6 = v5;
      v7 = MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*v4 & *v0) + 0x130));
      if (v7)
      {
        v8 = (void *)v7;
        v9 = specialized UIHostingController.alwaysOnBridge.getter();
        outlined copy of Transaction?(v6);
        swift_retain();

        if (v9)
        {
          AlwaysOnBridge.configureTransaction(_:)();
          swift_release();
        }
      }
      else
      {
        swift_retain();
      }
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      swift_release();
      outlined consume of Transaction?(v6);
      swift_release();
    }
  }
  v10 = objc_msgSend(v0, sel_traitCollection);
  v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  if (!v1 || v11 != objc_msgSend(v1, sel_userInterfaceIdiom))
    _UIHostingView.updateEventBridge()();
  v13 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v3 & v2) + 0x50), *(_QWORD *)((v3 & v2) + 0x58), v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v13);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

Swift::Void __swiftcall _UIHostingView.updateBackgroundColor()()
{
  _UIHostingView.viewController.getter();
}

void sub_186E84BB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  objc_class *v22;
  id v23;
  objc_super v24;

  if (a1)
  {
    if (_UIHostingView.wantsTransparentBackground.getter())
    {
      v22 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((v19 & v18) + 0x50), *(_QWORD *)((v19 & v18) + 0x58), v21);
      v24.receiver = v17;
      v24.super_class = v22;
      objc_msgSendSuper2(&v24, sel_setBackgroundColor_, 0);
    }
    else
    {
      v23 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
      setBackground #1 <A>(_:) in _UIHostingView.updateBackgroundColor()((uint64_t)v23, (uint64_t *)v17);

    }
  }
}

BOOL _UIHostingView.wantsTransparentBackground.getter()
{
  _QWORD *v0;

  return *(_DWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0)) != 0;
}

uint64_t setBackground #1 <A>(_:) in _UIHostingView.updateBackgroundColor()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  objc_class *v8;
  objc_super v9;

  v4 = *a2;
  v5 = *MEMORY[0x1E0DEEDD8];
  result = _UIHostingView.disabledBackgroundColor.getter();
  if ((result & 1) == 0)
  {
    v8 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((v5 & v4) + 0x50), *(_QWORD *)((v5 & v4) + 0x58), v7);
    v9.receiver = a2;
    v9.super_class = v8;
    return (uint64_t)objc_msgSendSuper2(&v9, sel_setBackgroundColor_, a1);
  }
  return result;
}

uint64_t _UIHostingView.disabledBackgroundColor.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0));
}

uint64_t static Transaction.currentUIViewTransaction(canDisableAnimations:)(char a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  if ((a1 & 1) != 0 && (objc_msgSend((id)objc_opt_self(), sel_areAnimationsEnabled) & 1) == 0)
  {
    Transaction.disablesAnimations.setter();
    return 0;
  }
  else
  {
    v1 = (void *)objc_opt_self();
    if (objc_msgSend(v1, sel__isInAnimationBlockWithAnimationsEnabled)
      && (objc_msgSend(v1, sel__currentAnimationDuration),
          static Animation.uiViewAnimation(curve:duration:)((uint64_t)objc_msgSend(v1, sel__currentAnimationCurve))))
    {
      swift_retain();
      v2 = Transaction.init(animation:)();
      v3 = (id)_CATransactionCompletionItem();
      if (v3)
      {
        v4 = v3;
        *(_QWORD *)(swift_allocObject() + 16) = v3;
        v5 = v4;
        Transaction.addAnimationListener(allFinished:)();

        swift_release();
      }
      swift_release();
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t static ContextMenuModifierCore._makeView(modifier:inputs:body:)(int *a1, __int128 *a2, void (*a3)(uint64_t, __int128 *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  uint64_t v15;
  int OffsetAttribute2;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[56];
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[56];
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = a2[3];
  v37 = a2[2];
  v38 = v10;
  v39 = a2[4];
  v40 = *((_DWORD *)a2 + 20);
  v11 = a2[1];
  v35 = *a2;
  v36 = v11;
  v20 = DWORD2(v10);
  v19 = v10;
  v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(_QWORD *)&v28 = v19;
  DWORD2(v28) = v20;
  v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v12 & 1) != 0 || (v13 & 1) != 0)
  {
    outlined retain of _ViewInputs((uint64_t)&v35);
    lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v35);
    UniqueID.init()();
    closure #1 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)((uint64_t)&v35, v12 & 1, v28, a3);
    LODWORD(v28) = v9;
    type metadata accessor for ContextMenuModifierCore(255, a5, a6, v15);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_OWORD *)&v23[16] = v38;
    *(_OWORD *)&v23[32] = v39;
    *(_DWORD *)&v23[48] = v40;
    v21 = v35;
    v22 = v36;
    *(_OWORD *)v23 = v37;
    v17 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v21, 1, (uint64_t)&v28);
    *(_QWORD *)&v21 = v28;
    DWORD2(v21) = DWORD2(v28);
    *(_QWORD *)&v22 = v29;
    DWORD2(v22) = DWORD2(v29);
    *(_QWORD *)v23 = *(_QWORD *)v30;
    *(_OWORD *)&v23[8] = *(_OWORD *)&v30[8];
    *(_OWORD *)&v23[24] = *(_OWORD *)&v30[24];
    *(_OWORD *)&v23[40] = *(_OWORD *)&v30[40];
    v24 = v31;
    v25 = v32;
    v26 = v33;
    v27 = v34;
    MEMORY[0x1E0C80A78](v17, v18);
    type metadata accessor for PlatformItemListGenerator();
  }
  *(_OWORD *)v30 = v37;
  *(_OWORD *)&v30[16] = v38;
  *(_OWORD *)&v30[32] = v39;
  *(_DWORD *)&v30[48] = v40;
  v28 = v35;
  v29 = v36;
  return ((uint64_t (*)(void))a3)();
}

uint64_t outlined release of ContextMenuResponderFilter(uint64_t a1)
{
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter;
  if (!lazy protocol witness table cache variable for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuResponderFilter, &unk_1E1AEDCF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter);
  }
  return result;
}

uint64_t ContextMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int OffsetAttribute2;

  closure #1 in ContextMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(1, a2, a3, a1);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v11 = _ViewOutputs.viewResponders()();
  swift_bridgeObjectRelease();
  v9 = _ViewInputs.animatedPosition()();
  v8 = _ViewInputs.transform.getter();
  v7 = _ViewInputs.animatedSize()();
  v6 = _ViewInputs.containerPosition.getter();
  swift_getKeyPath();
  v4 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = swift_release();
  *(_DWORD *)a4 = OffsetAttribute2;
  *(_DWORD *)(a4 + 4) = v11;
  *(_DWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 12) = v8;
  *(_DWORD *)(a4 + 16) = v7;
  *(_DWORD *)(a4 + 20) = v6;
  *(_DWORD *)(a4 + 24) = v4;
  *(_QWORD *)(a4 + 32) = a1;
  return result;
}

uint64_t closure #1 in ContextMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for ContextMenuModifierCore(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

id PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)@<X0>(int a1@<W0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id result;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v15 = *(_OWORD *)(a2 + 5);
  v16 = *(_OWORD *)(a2 + 3);
  v14 = *(_OWORD *)(a2 + 7);
  v10 = a2[9];
  v11 = *((_DWORD *)a2 + 20);
  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    v13 = *MEMORY[0x1E0CFED28];
    *(_QWORD *)a4 = result;
    *(_DWORD *)(a4 + 8) = a1;
    *(_QWORD *)(a4 + 16) = v7;
    *(_DWORD *)(a4 + 24) = v8;
    *(_QWORD *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 40) = v16;
    *(_OWORD *)(a4 + 56) = v15;
    *(_OWORD *)(a4 + 72) = v14;
    *(_QWORD *)(a4 + 88) = v10;
    *(_DWORD *)(a4 + 96) = v11;
    *(_BYTE *)(a4 + 100) = a3 & 1;
    *(_DWORD *)(a4 + 104) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, __int128 *))
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  __int128 v16;
  _BYTE v17[32];
  _BYTE v18[32];
  int v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)v22 = v8;
  *(_OWORD *)&v22[16] = *(_OWORD *)(a1 + 64);
  v23 = *(_DWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 16);
  v20 = *(_OWORD *)a1;
  *(_OWORD *)v21 = v9;
  LOBYTE(v16) = 1;
  outlined retain of _ViewInputs(a1);
  lazy protocol witness table accessor for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey();
  PropertyList.subscript.setter();
  if ((a2 & 1) != 0)
  {
    v10 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v18 = v10;
    *(_OWORD *)&v18[16] = *(_OWORD *)(a1 + 64);
    v19 = *(_DWORD *)(a1 + 80);
    v11 = *(_OWORD *)(a1 + 16);
    v16 = *(_OWORD *)a1;
    *(_OWORD *)v17 = v11;
    v12 = _ViewInputs.transform.getter();
    v13 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)v18 = v13;
    *(_OWORD *)&v18[16] = *(_OWORD *)(a1 + 64);
    v19 = *(_DWORD *)(a1 + 80);
    *(_OWORD *)v17 = *(_OWORD *)(a1 + 16);
    LODWORD(v16) = v12;
    DWORD1(v16) = _ViewInputs.position.getter();
    *((_QWORD *)&v16 + 1) = a3;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
  }
  *(_QWORD *)&v16 = v20;
  DWORD2(v16) = DWORD2(v20);
  *(_QWORD *)v17 = *(_QWORD *)v21;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v21[8];
  *(_QWORD *)&v17[24] = *(_QWORD *)&v21[24];
  *(_QWORD *)v18 = *(_QWORD *)v22;
  *(_OWORD *)&v18[8] = *(_OWORD *)&v22[8];
  *(_QWORD *)&v18[24] = *(_QWORD *)&v22[24];
  v19 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRetain();
  a4(v14, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform;
  if (!lazy protocol witness table cache variable for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIViewSnapshotResponder.Transform, &type metadata for UIViewSnapshotResponder.Transform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform);
  }
  return result;
}

uint64_t closure #2 in implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v5 = type metadata accessor for ContextMenuModifierCore(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 40);
  v10[2] = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2, (uint64_t)v10, (uint64_t)&type metadata for MenuOrder, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t type metadata accessor for ContextMenuResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ContextMenuResponder);
}

uint64_t UIViewSnapshotResponder.init(inputs:space:displayList:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_QWORD *)(v2 + 248) = 0;
  *(_BYTE *)(v2 + 256) = 1;
  *(_DWORD *)(v2 + 264) = 0;
  *(_DWORD *)(v2 + 260) = 0;
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  *(_QWORD *)(v2 + 208) = v3;
  swift_retain();
  *(_QWORD *)(v2 + 260) = AGCreateWeakAttribute();
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t key path setter for EnvironmentValues.effectiveLabelStyle : EnvironmentValues()
{
  return EnvironmentValues.effectiveLabelStyle.setter();
}

uint64_t EnvironmentValues.effectiveLabelStyle.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

double @objc _UIHostingView.sizeThatFits(_:)(void *a1, double a2, double a3)
{
  id v5;
  double v6;

  v5 = a1;
  *(_QWORD *)&v6 = *(_OWORD *)&_UIHostingView.sizeThatFits(_:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));

  return v6;
}

double @objc _UIHostingView._layoutSizeThatFits(_:fixedAxes:)(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  v2 = specialized _UIHostingView._layoutSizeThatFits(_:fixedAxes:)();

  return v2;
}

CGSize __swiftcall _UIHostingView.sizeThatFits(_:)(CGSize a1)
{
  void *v1;
  double v2;
  double v3;
  CGSize result;

  objc_msgSend(v1, sel__layoutSizeThatFits_fixedAxes_, 3, a1.width, a1.height);
  result.height = v3;
  result.width = v2;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Toolbar.BarLocation()
{
  Hasher.init(_seed:)();
  Toolbar.BarLocation.hash(into:)();
  return Hasher._finalize()();
}

id @objc UIHostingController.undoManager.getter(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = UIHostingController.undoManager.getter();

  return v2;
}

id UIHostingController.undoManager.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  objc_class *v6;
  objc_super v7;
  void *v8;
  uint64_t v9[2];

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  _UIHostingView.inheritedEnvironment.getter(v9);
  v4 = v9[0];
  if (v9[0] == 1)
    goto LABEL_6;
  if (v9[1])
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  outlined consume of EnvironmentValues?(v4);
  outlined consume of EnvironmentValues?(v4);
  result = v8;
  if (!v8)
  {
LABEL_6:
    v6 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((v2 & v1) + 0x50), *(_QWORD *)((v2 & v1) + 0x58), v3);
    v7.receiver = v0;
    v7.super_class = v6;
    return objc_msgSendSuper2(&v7, sel_undoManager);
  }
  return result;
}

void protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void CoalescingAdjacentDuplicates.subscript.read(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

void protocol witness for Collection.subscript.read in conformance ShadowRowCollection<A>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  ShadowRowCollection.subscript.read(v6, a2, a3);
}

uint64_t (*sub_186E862D8(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void ShadowRowCollection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  void *v8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  ShadowRowCollection.subscript.getter(a2, a3, (uint64_t)v8);
}

uint64_t (*sub_186E863B8())()
{
  return ShadowRowCollection.subscript.read;
}

void ShadowRowCollection.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t updated;
  _QWORD v21[12];

  v21[5] = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v21[1] = (char *)v21 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v21[7] = swift_getAssociatedTypeWitness();
  v21[0] = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v21[6] = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21[2] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v21 - v14;
  v17 = (char *)v21 + *(int *)(v16 + 48) - v14;
  v18 = v21[3] + *(int *)(a2 + 40);
  updated = type metadata accessor for ShadowListUpdateRecorder(0, v6, v5, v19);
  ShadowListUpdateRecorder.initialIndex(_:)((uint64_t)v15, (uint64_t)v17, v18, a1, updated);
}

uint64_t sub_186E865B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;

  v8 = *(_QWORD *)(v7 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 80))(v3, v5, v4);
  v9 = v6 + *(int *)(v0 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 - 120) - 8);
  *(_QWORD *)(v7 - 152) = v10;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v6, v3);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 - 128) - 8);
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v9, v2);
  v12 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
  v14 = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(*(_QWORD *)(v7 - 136), v14, AssociatedTypeWitness);
  v12(v7 - 112, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 144) + 8))(v8, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8))(v3, v0);
  (*(void (**)(uint64_t, _QWORD))(v11 + 8))(v9, *(_QWORD *)(v7 - 128));
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 152) + 8))(v6, *(_QWORD *)(v7 - 120));
}

void protocol witness for Collection.subscript.read in conformance ShadowSectionCollection<A>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  ShadowSectionCollection.subscript.read(v6, a2, a3);
}

uint64_t (*sub_186E8671C(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void ShadowSectionCollection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  void *v7;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v6;
  v7 = malloc(*(_QWORD *)(v6 + 64));
  a1[2] = (uint64_t)v7;
  ShadowSectionCollection.subscript.getter(a3, (uint64_t)v7);
}

uint64_t (*sub_186E867F8())()
{
  return ShadowRowCollection.subscript.read;
}

void ShadowSectionCollection.subscript.getter(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  v10 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v4);
  v5 = swift_checkMetadataState();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  (*(void (**)(uint64_t, uint64_t, double))(v2 + 56))(v3, v2, v7);
  type metadata accessor for ShadowListUpdateRecorder(0, v3, v2, v8);
  ShadowListUpdateRecorder.initialIndex(_:)();
}

uint64_t sub_186E86948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  v6 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
  v8 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(*(_QWORD *)(v5 - 120), v8, AssociatedTypeWitness);
  v6(v5 - 112, 0);
  (*(void (**)(uint64_t, _QWORD))(v0 + 8))(v2, *(_QWORD *)(v5 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v4, v3);
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed NSCollectionLayoutEnvironment) -> (@owned NSCollectionLayoutSection?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  void *v6;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = (void *)v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  return v6;
}

void partial apply for closure #1 in UICollectionViewListCoordinator.createLayout(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in UICollectionViewListCoordinator.createLayout(_:)(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void closure #1 in UICollectionViewListCoordinator.createLayout(_:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;

  v33 = a5;
  v32 = a4;
  v34 = a2;
  v31 = a1;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a3);
  v27 = type metadata accessor for UICollectionLayoutListConfiguration();
  v26[3] = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v8);
  v36 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v7[92];
  v11 = *(_QWORD *)(v7[94] + 8);
  v13 = type metadata accessor for ShadowSectionCollection(0, v10, *(_QWORD *)(v11 + 8), v12);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = type metadata accessor for ShadowListDataSource(0, v10, v11, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)v26 - v19;
  v21 = (char *)a3 + v7[17];
  swift_beginAccess();
  v26[2] = v17;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v21, v16);
  v22 = (char *)a3 + *(_QWORD *)((*v6 & *a3) + 0x108);
  v28 = *v22;
  v30 = *((_QWORD *)v22 + 1);
  v29 = v22[16];
  v38 = *((_QWORD *)v22 + 3);
  v37 = v22[32];
  v35 = v16;
  v26[1] = v20;
  ShadowListDataSource.sectionIDs.getter(v16, v23, v24, v25);
}

uint64_t ShadowListDataSource.hasGlobalHeader.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78]();
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v3 + 16))(v5);
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 24) + 72))(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v1 & 1;
}

BOOL CollectionViewListDataSource.hasGlobalHeader.getter(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;
  _BYTE v4[8];
  uint64_t v5;

  outlined init with copy of SwiftUIAnySortComparator?(v1 + *(int *)(a1 + 40), (uint64_t)v4, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView);
  v2 = v5 != 1;
  outlined destroy of AccessibilityTableContext?((uint64_t)v4, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView);
  return v2;
}

uint64_t ListCoreDataSource.spacing(forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v13 - v10;
  ListDiffable.sectionIndex(atOffset:)(a1, a2, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 104))(v11, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

void ShadowListDataSource.spacing(forSectionAt:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v7 = *(_QWORD *)(v3 - 8);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v3, v10);
  type metadata accessor for ShadowListUpdateRecorder(0, v3, v4, v12);
  ShadowListUpdateRecorder.initialIndex(_:)();
}

uint64_t sub_186E874A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104))(v4, v0, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v0);
}

unint64_t protocol witness for ListCoreDataSource.spacing(forSectionAt:) in conformance CollectionViewListDataSource<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return CollectionViewListDataSource.spacing(forSectionAt:)(*a1, a2);
}

unint64_t CollectionViewListDataSource.spacing(forSectionAt:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (*(_QWORD *)(v3 + 16) > result)
    {
      v4 = v3 + 184 * result;
      v5 = *(_QWORD *)(v4 + 200);
      v6 = *(_BYTE *)(v4 + 208);
      LOBYTE(v4) = *(_BYTE *)(v4 + 209);
      *(_QWORD *)a2 = v5;
      *(_BYTE *)(a2 + 8) = v6;
      *(_BYTE *)(a2 + 9) = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall ListDiffable.hasHeader(forSectionAtOffset:)(Swift::Int forSectionAtOffset)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v3 = v2;
  v4 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v12 - v9;
  ListDiffable.sectionIndex(atOffset:)(forSectionAtOffset, v4, v3);
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 64))(v10, v4, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return v3 & 1;
}

uint64_t UICollectionViewListCoordinatorBase.sectionHeadersShouldHugContent.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x128)) = result;
  return result;
}

uint64_t ShadowSectionCollection.count.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 36));
}

Swift::Bool __swiftcall ListDiffable.hasFooter(forSectionAtOffset:)(Swift::Int forSectionAtOffset)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v3 = v2;
  v4 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v12 - v9;
  ListDiffable.sectionIndex(atOffset:)(forSectionAtOffset, v4, v3);
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 72))(v10, v4, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return v3 & 1;
}

void ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v68 = a2;
  v69 = a1;
  v7 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v9 = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v62 = (char *)v43 - v11;
  v64 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v71 = v9;
  v67 = AssociatedConformanceWitness;
  v63 = type metadata accessor for CountingIndex();
  swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v13, v14);
  v61 = (char *)v43 - v15;
  v58 = a5;
  v66 = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v55 = type metadata accessor for CountingIndexCollection();
  v16 = MEMORY[0x1E0CE5A00];
  v54 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A00], v55);
  v17 = type metadata accessor for DefaultIndices();
  v56 = type metadata accessor for CountingIndexCollection();
  v53 = MEMORY[0x18D75FFDC](v16, v56);
  v18 = type metadata accessor for DefaultIndices();
  v19 = MEMORY[0x1E0DEA218];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA218], v17);
  v21 = MEMORY[0x18D75FFDC](v19, v18);
  v72 = v17;
  v73 = v18;
  v74 = v20;
  v75 = v21;
  v44 = type metadata accessor for Zip2Sequence();
  MEMORY[0x1E0C80A78](v44, v22);
  v43[7] = (char *)v43 - v23;
  v72 = v17;
  v73 = v18;
  v46 = v20;
  v74 = v20;
  v75 = v21;
  v45 = v21;
  v60 = type metadata accessor for Zip2Sequence.Iterator();
  v43[6] = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v24);
  v59 = (char *)v43 - v25;
  v51 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v50 = (char *)v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v49 = (char *)v43 - v32;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA228], v18, v31);
  v52 = v18;
  v48 = type metadata accessor for IndexingIterator();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v33);
  v43[5] = (char *)v43 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v43[4] = (char *)v43 - v37;
  v65 = v7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v38 = type metadata accessor for CountingIndex();
  v39 = MEMORY[0x1E0CE1E60];
  v40 = v63;
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1E60], v63);
  v42 = MEMORY[0x18D75FFDC](v39, v38);
  v72 = v40;
  v73 = v38;
  v74 = v41;
  v75 = v42;
  type metadata accessor for ListUpdate();
}

void sub_186E88AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 152) + 8);
  v4(v0, v1);
  v4(v2, v1);
  v5 = *(_QWORD *)(v3 - 264);
  Zip2Sequence.Iterator.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v3 - 312))(v5, 1, *(_QWORD *)(v3 - 288)) != 1)
    JUMPOUT(0x186E88B60);
  JUMPOUT(0x186E88A54);
}

void sub_186E88BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  int v20;

  *(_QWORD *)(v6 - 120) = a1;
  v7 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v7);
  *(_QWORD *)(v6 - 224) = v7;
  Array.append<A>(contentsOf:)();
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v9(v3, v4, v8);
  *(_DWORD *)(v6 - 216) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 64))(v3, v1, v5) & 1;
  v10 = *(_QWORD *)(v6 - 200);
  v11 = v3;
  v12 = v5;
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 328) + 8);
  v14 = *(_QWORD *)(v6 - 136);
  v13(v3, v14);
  v15 = *(_QWORD *)(v6 - 192);
  *(_QWORD *)(v6 - 208) = v9;
  v9(v3, v15, v8);
  LODWORD(v7) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 64))(v3, *(_QWORD *)(v6 - 144), v10) & 1;
  v13(v3, v14);
  if (*(_DWORD *)(v6 - 216) != (_DWORD)v7)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v6 - 152) + 16))(*(_QWORD *)(v6 - 296), *(_QWORD *)(v6 - 248), *(_QWORD *)(v6 - 232));
    swift_storeEnumTagMultiPayload();
    Array.append(_:)();
  }
  v16 = v3;
  v17 = *(_QWORD *)(v6 - 248);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 208);
  v18(v16, v17, v8);
  v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v12 + 72))(v11, *(_QWORD *)(v6 - 184), v12) & 1;
  v13(v11, v14);
  v18(v11, *(_QWORD *)(v6 - 192), v8);
  v20 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 72))(v11, *(_QWORD *)(v6 - 144), v10) & 1;
  v13(v11, v14);
  if (v19 != v20)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v6 - 152) + 16))(*(_QWORD *)(v6 - 296), v17, *(_QWORD *)(v6 - 232));
    swift_storeEnumTagMultiPayload();
    Array.append(_:)();
  }
  sub_186E88AE8();
}

uint64_t protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ShadowListDataSource.hasHeader(forSectionAt:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ShadowListUpdateRecorder.hasHeader(forSectionAt:), a4) & 1;
}

uint64_t ShadowListDataSource.hasHeader(forSectionAt:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t updated;

  updated = type metadata accessor for ShadowListUpdateRecorder(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), a4);
  return a3(a1, updated);
}

void ShadowListUpdateRecorder.hasHeader(forSectionAt:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v1);
  ShadowListUpdateRecorder.initialIndex(_:)();
}

uint64_t sub_186E88F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 64))(v3, v1, v0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  return v5 & 1;
}

BOOL protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance CollectionViewListDataSource<A>(Swift::Int *a1)
{
  return CollectionViewListDataSource.hasHeader(forSectionAt:)(*a1);
}

Swift::Bool __swiftcall CollectionViewListDataSource.hasHeader(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Bool v3;
  _OWORD v5[11];
  __int16 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  _OWORD v18[11];
  __int16 v19;

  if (forSectionAt < 0 || (v2 = *(_QWORD *)(v1 + 56), *(_QWORD *)(v2 + 16) <= (unint64_t)forSectionAt))
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
  }
  else
  {
    outlined init with copy of SectionAccumulator.Item(v2 + 184 * forSectionAt + 32, (uint64_t)v18);
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v18, (uint64_t)v7, &lazy cache variable for type metadata for SectionAccumulator.Item?, (uint64_t)&type metadata for SectionAccumulator.Item);
  if ((_QWORD)v8)
  {
    v5[8] = v14;
    v5[9] = v15;
    v5[10] = v16;
    v6 = v17;
    v5[4] = v10;
    v5[5] = v11;
    v5[6] = v12;
    v5[7] = v13;
    v5[0] = v7[0];
    v5[1] = v7[1];
    v3 = *((_QWORD *)&v12 + 1) > 0;
    v5[2] = v8;
    v5[3] = v9;
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
  }
  else
  {
    v3 = 0;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)v18, &lazy cache variable for type metadata for SectionAccumulator.Item?, (uint64_t)&type metadata for SectionAccumulator.Item);
  return v3;
}

uint64_t protocol witness for ListDiffable.hasFooter(forSectionAt:) in conformance ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ShadowListDataSource.hasHeader(forSectionAt:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ShadowListUpdateRecorder.hasFooter(forSectionAt:), a4) & 1;
}

void ShadowListUpdateRecorder.hasFooter(forSectionAt:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v1);
  ShadowListUpdateRecorder.initialIndex(_:)();
}

uint64_t sub_186E8915C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 72))(v3, v1, v0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  return v5 & 1;
}

BOOL protocol witness for ListDiffable.hasFooter(forSectionAt:) in conformance CollectionViewListDataSource<A>(Swift::Int *a1)
{
  return CollectionViewListDataSource.hasFooter(forSectionAt:)(*a1);
}

Swift::Bool __swiftcall CollectionViewListDataSource.hasFooter(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Bool v3;
  _OWORD v5[11];
  __int16 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  _OWORD v18[11];
  __int16 v19;

  if (forSectionAt < 0 || (v2 = *(_QWORD *)(v1 + 56), *(_QWORD *)(v2 + 16) <= (unint64_t)forSectionAt))
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
  }
  else
  {
    outlined init with copy of SectionAccumulator.Item(v2 + 184 * forSectionAt + 32, (uint64_t)v18);
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v18, (uint64_t)v7, &lazy cache variable for type metadata for SectionAccumulator.Item?, (uint64_t)&type metadata for SectionAccumulator.Item);
  if ((_QWORD)v8)
  {
    v5[8] = v14;
    v5[9] = v15;
    v5[10] = v16;
    v6 = v17;
    v5[4] = v10;
    v5[5] = v11;
    v5[6] = v12;
    v5[7] = v13;
    v5[0] = v7[0];
    v5[1] = v7[1];
    v3 = (uint64_t)v13 > 0;
    v5[2] = v8;
    v5[3] = v9;
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
  }
  else
  {
    v3 = 0;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)v18, &lazy cache variable for type metadata for SectionAccumulator.Item?, (uint64_t)&type metadata for SectionAccumulator.Item);
  return v3;
}

uint64_t CountingIndexListDataSource.sectionIDs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 56))(v4, v3, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v10, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance AccessibilityLargeContentViewModifier<A>()
{
  return MEMORY[0x18D756BF8]();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance StaticSourceWriter<A, B>(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t *a4)
{
  return static StaticSourceWriter._viewListCount(inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5]);
}

uint64_t static StaticSourceWriter._viewListCount(inputs:body:)(__int128 *a1, uint64_t (*a2)(__int128 *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;

  v10 = *((_DWORD *)a1 + 4);
  v11 = *((_QWORD *)a1 + 3);
  v19 = *a1;
  v20 = v10;
  v21 = v11;
  type metadata accessor for SourceFormula(0, a5, a7, a4);
  v13 = type metadata accessor for SourceInput(0, a4, a6, v12);
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SourceInput<A>, v13);
  _ViewListCountInputs.append<A, B>(_:to:)();
  v16 = v19;
  v17 = v20;
  v18 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = a2(&v16);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return v14;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance <> StaticIf<A, B, C>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return static StaticIf<>._viewListCount(inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], *(_QWORD *)(a5 - 8), *(_QWORD *)(a5 - 16));
}

uint64_t static StaticIf<>._viewListCount(inputs:body:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v11 = *a1;
  v12 = a1[1];
  v13 = *((_DWORD *)a1 + 4);
  v14 = a1[3];
  v22 = HIDWORD(v12);
  _ViewListCountInputs.base.getter();
  v20 = v26;
  v21 = v27;
  v23 = v28;
  v24 = v29;
  v25 = v30;
  v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a7 + 8))(&v20, a4, a7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v26 = v11;
  v27 = v12;
  LODWORD(v28) = v13;
  *(_QWORD *)&v29 = v14;
  if ((v15 & 1) != 0)
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a8 + 40))(&v26, a2, a3);
  else
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a9 + 40))(&v26, a2, a3);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> Section<A, B, C>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static Section<>._viewListCount(inputs:)(a1, a2[2], a2[3], a2[4], *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24));
}

uint64_t static Section<>._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17[2];
  int v18;
  uint64_t v19;

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = type metadata accessor for Section(0, a2, a3, a4);
  v17[0] = v10;
  v17[1] = v11;
  v18 = v12;
  v19 = v13;
  v16[0] = a5;
  v16[1] = a6;
  v16[2] = a7;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v14, v16);
  return static PubliclyPrimitiveView.defaultViewListCount(inputs:)(v17);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance OnChangeOfSuggestionsModifier(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  int v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  uint64_t v7;

  v2 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  v5 = *a1;
  v6 = v2;
  v7 = v3;
  return a2(&v5);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return a4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t static PubliclyPrimitiveView.defaultViewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_DWORD *)a1 + 4);
  v4 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  v9 = v3;
  v10 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedSectionStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ResolvedUIKitButtonBody(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static StyleableView._viewListCount(inputs:));
}

uint64_t specialized static StyleableView._viewListCount(inputs:)(ValueMetadata *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedSectionStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<SectionStyleConfiguration>, (uint64_t)&type metadata for SectionStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SectionStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<DefaultSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultSectionStyle and conformance DefaultSectionStyle, (uint64_t)&type metadata for DefaultSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
    lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for IndexViewBody;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_IndexViewStyleConfiguration>, (uint64_t)&type metadata for _IndexViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_IndexViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for IndexViewStyleModifier<DefaultIndexViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultIndexViewStyle and conformance DefaultIndexViewStyle, (uint64_t)&type metadata for DefaultIndexViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IndexViewStyleModifier);
    lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedNavigationStackStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_NavigationStackStyleConfiguration>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_NavigationStackStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle, (uint64_t)&type metadata for _AutomaticNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationStackStyleModifier);
    lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedNavigationViewStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_NavigationViewStyleConfiguration>, (uint64_t)&type metadata for _NavigationViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_NavigationViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<DefaultNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultNavigationViewStyle and conformance DefaultNavigationViewStyle, (uint64_t)&type metadata for DefaultNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationViewStyleModifier);
    lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedRadioGroupPicker;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ResolvedRadioGroupPicker> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for RadioGroupStyleModifier<AutomaticRadioGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle, (uint64_t)&type metadata for AutomaticRadioGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RadioGroupStyleModifier);
    lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedCustomButtonMenu;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ResolvedCustomButtonMenu.Configuration>, (uint64_t)&type metadata for ResolvedCustomButtonMenu.Configuration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ResolvedCustomButtonMenu.Configuration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomButtonMenuStyleWriter);
    lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedColorPickerStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ColorPickerStyleConfiguration>, (uint64_t)&type metadata for ColorPickerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ColorPickerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ColorPickerStyleModifier<DefaultColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultColorPickerStyle and conformance DefaultColorPickerStyle, (uint64_t)&type metadata for DefaultColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ColorPickerStyleModifier);
    lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedUIKitButtonBody;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
    lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedLabelGroupStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabelGroupStyleConfiguration>, (uint64_t)&type metadata for LabelGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabelGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for LabelGroupStyleModifier<BodyLabelGroupStyle>, (uint64_t)&type metadata for BodyLabelGroupStyle, (uint64_t)&protocol witness table for BodyLabelGroupStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LabelGroupStyleModifier);
    lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedSliderStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<SliderStyleConfiguration>, (uint64_t)&type metadata for SliderStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SliderStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for SliderStyleModifier<AutomaticSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticSliderStyle and conformance AutomaticSliderStyle, (uint64_t)&type metadata for AutomaticSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderStyleModifier);
    lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedTableStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<TableStyleConfiguration>, (uint64_t)&type metadata for TableStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TableStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for TableStyleModifier<AutomaticTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticTableStyle and conformance AutomaticTableStyle, (uint64_t)&type metadata for AutomaticTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableStyleModifier);
    lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedGaugeStyle;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<GaugeStyleConfiguration>, (uint64_t)&type metadata for GaugeStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<GaugeStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for GaugeStyleModifier<DefaultGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultGaugeStyle and conformance DefaultGaugeStyle, (uint64_t)&type metadata for DefaultGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for GaugeStyleModifier);
    lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedBadgedView;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<BadgeViewStyleConfiguration>, (uint64_t)&type metadata for BadgeViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<BadgeViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for BadgedViewStyleModifier<AutomaticBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle, (uint64_t)&type metadata for AutomaticBadgedViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BadgedViewStyleModifier);
    lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for ResolvedDivider;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<DividerStyleConfiguration>, (uint64_t)&type metadata for DividerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DividerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for DividerStyleModifier<DefaultDividerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultDividerStyle and conformance DefaultDividerStyle, (uint64_t)&type metadata for DefaultDividerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DividerStyleModifier);
    lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = a3;
  v16 = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized _ViewListCountInputs.isCurrentStyleableView<A>(_:)(a1))
  {
    *(_QWORD *)&v10 = &type metadata for StepperBody;
    lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
    PropertyList.subscript.setter();
    v9 = specialized static StyleableView._viewListCount(inputs:)(v14, *((_QWORD *)&v14 + 1), v15, v16);
    swift_bridgeObjectRelease();
LABEL_10:
    swift_release();
    return v9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<StepperStyleConfiguration>, (uint64_t)&type metadata for StepperStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<StepperStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v10)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v10 + 24);
  v6 = *(_QWORD *)(v10 + 32);
  swift_retain();
  swift_release();
  v13 = v6;
  PropertyList.subscript.setter();
  if (!v5)
  {
LABEL_8:
    v10 = v14;
    v11 = v15;
    v12 = v16;
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for StepperStyleModifier<DefaultStepperStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultStepperStyle and conformance DefaultStepperStyle, (uint64_t)&type metadata for DefaultStepperStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StepperStyleModifier);
    lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
    v8 = static ModifiedContent<>._viewListCount(inputs:)();
    goto LABEL_9;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v10 = v14;
    v11 = v15;
    v12 = v16;
    v8 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(result + 24))(&v10, v5, result);
LABEL_9:
    v9 = v8;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static AnyStyleModifierType.viewListCount(inputs:) in conformance StyleModifierType<A>(uint64_t *a1)
{
  return static StyleModifierType.viewListCount(inputs:)(a1);
}

uint64_t static StyleModifierType.viewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v1 = *a1;
  v2 = a1[1];
  v3 = *((_DWORD *)a1 + 4);
  v4 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  v9 = v3;
  v10 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

double static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)@<D0>(uint64_t a1@<X1>, char a2@<W2>, void (*a3)(uint64_t *__return_ptr)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, double *a7@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v16;
  double v17;

  v10 = *(_DWORD *)(a1 + 36);
  a3(&v16);
  if ((v10 & 0x20) != 0)
  {
    type metadata accessor for _AnchorTransformModifier(255, a4, a5, a6);
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if ((a2 & 1) != 0)
    {
      _ViewInputs.animatedPosition()();
      _ViewInputs.animatedCGSize()();
    }
    else
    {
      _ViewInputs.position.getter();
      _ViewInputs.size.getter();
      Attribute<A>.origin()();
    }
    v11 = _ViewInputs.transform.getter();
    MEMORY[0x1E0C80A78](v11, v12);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a7 = v16;
  result = v17;
  a7[1] = v17;
  return result;
}

uint64_t key path getter for EnvironmentValues.testCase : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, (uint64_t)&type metadata for PPTTestCaseEnvironmentKey, (uint64_t)&protocol witness table for PPTTestCaseEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, (uint64_t)&type metadata for PPTTestCaseEnvironmentKey, (uint64_t)&protocol witness table for PPTTestCaseEnvironmentKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.testCase.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t destroy for FindContext(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t destroy for NavigationDestinationModifier.SeededResolver()
{
  return swift_release();
}

_QWORD *destroy for OnDeleteTableRowModifier(_QWORD *result)
{
  if (*result)
    return (_QWORD *)swift_release();
  return result;
}

void @objc UIHostingContentView.layoutSubviews()(void *a1)
{
  a1;
  UIHostingContentView.layoutSubviews()();
}

void sub_186E8A1BC()
{
  void *v0;

}

void UIHostingContentView.layoutSubviews()()
{
  type metadata accessor for UIHostingContentView();
}

id sub_186E8A20C(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, objc_super a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  _QWORD *v18;
  id result;
  uint64_t *v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  objc_super v23;

  v23.receiver = v18;
  v23.super_class = a1;
  result = -[objc_class layoutSubviews](&v23, sel_layoutSubviews);
  v20 = (_QWORD *)((char *)v18 + *(_QWORD *)((*v17 & *v18) + 0xA08));
  v21 = (void (*)(uint64_t))*v20;
  if (*v20)
  {
    v22 = outlined copy of AppIntentExecutor?(*v20);
    v21(v22);
    return (id)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v21);
  }
  return result;
}

void @objc _UIHostingView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  _UIHostingView.layoutSubviews()();

}

uint64_t View.accessibilityElement(children:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *a1;
  return MEMORY[0x18D75B4AC](&v4, a2, &type metadata for AccessibilityContainerModifier, a3);
}

uint64_t partial apply for closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for NavigationStateHost();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for CGSize(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for Any.Type();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_7@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result - 1;
  return result;
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_9@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_11@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E0CE3E78], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_12@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabeledContentPresentation?, (uint64_t)&type metadata for AccessibilityLabeledContentPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_13@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_15@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_16@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_17@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_19@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for VerticalAlignment?, MEMORY[0x1E0CE4020], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_21@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for Binding<Int>?();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_22@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_23@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_25@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_26@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

Class @objc ListCollectionViewCellBase.preferredLayoutAttributesFitting(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  Class isa;

  v4 = a3;
  v5 = a1;
  isa = ListCollectionViewCellBase.preferredLayoutAttributesFitting(_:)((UICollectionViewLayoutAttributes)v4).super.isa;

  return isa;
}

UICollectionViewLayoutAttributes __swiftcall ListCollectionViewCellBase.preferredLayoutAttributesFitting(_:)(UICollectionViewLayoutAttributes a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  objc_class *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v10;

  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  if (one-time initialization token for isEnabledInProcessEnv != -1)
    swift_once();
  if (static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv == 1)
  {
    v5 = (objc_class *)type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)(v4 + 168), *(_QWORD *)(v4 + 176), v1);
    v10.receiver = v2;
    v10.super_class = v5;
    return (UICollectionViewLayoutAttributes)objc_msgSendSuper2(&v10, sel_preferredLayoutAttributesFittingAttributes_, a1.super.isa);
  }
  else
  {
    objc_msgSend(v2, sel_effectiveUserInterfaceLayoutDirection);
    objc_msgSend(v2, sel__contentViewInset);
    v8 = type metadata accessor for ListCollectionViewCellBase(0, *(_QWORD *)(v4 + 168), *(_QWORD *)(v4 + 176), v7);
    v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListCollectionViewCellBase<A>, v8);
    return (UICollectionViewLayoutAttributes)PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(a1.super.isa, v8, v9);
  }
}

uint64_t type metadata accessor for ListCollectionViewCellBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ListCollectionViewCellBase);
}

void *PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  id v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void *v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v35;
  void *v36;

  v4 = v3;
  objc_msgSend(a1, sel_size);
  v8 = objc_msgSend(a1, sel_representedElementKind);
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_10;
  }
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v12)
  {
LABEL_10:
    v17 = (id)swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v17 = (id)swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      goto LABEL_11;
  }
  v17 = objc_msgSend(a1, sel_respondsToSelector_, sel__listLayoutItemMaxWidth);
  if ((_DWORD)v17)
  {
    v17 = objc_msgSend(a1, sel__listLayoutItemMaxWidth);
    if (v35 > 0.0)
      v17 = objc_msgSend(a1, sel__listLayoutItemMaxWidth);
  }
LABEL_11:
  MEMORY[0x1E0C80A78](v17, v18);
  CGRect.inset(by:layoutDirection:)();
  v20 = v19;
  v22 = v21;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 80);
  v24 = (void *)v23(a2, a3);

  if (v24 != v4)
  {
    v25 = (void *)v23(a2, a3);
    UIView.invalidateRendererHostSafeAreaInsets()();

  }
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutAttributes);
  swift_dynamicCast();
  v26 = PlatformListViewBase<>.hostSizeThatFits(width:)(a2, a3);
  v28 = v27;
  v29 = (void *)v23(a2, a3);

  if (v29 != v4)
  {
    v30 = (void *)v23(a2, a3);
    objc_msgSend(v30, sel_setFrame_, v20, v22, v26, v28);

  }
  EdgeInsets.vertical.getter();
  v32 = v28 + v31;
  EdgeInsets.horizontal.getter();
  objc_msgSend(v36, sel_setSize_, v26 + v33, v32);
  return v36;
}

id protocol witness for PlatformListViewBase.hostParentView.getter in conformance ListTableViewHeaderFooter()
{
  void *v0;

  return objc_msgSend(v0, sel_contentView);
}

unint64_t type metadata accessor for UICollectionViewLayoutAttributes()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UICollectionViewLayoutAttributes;
  if (!lazy cache variable for type metadata for UICollectionViewLayoutAttributes)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutAttributes);
  }
  return result;
}

double PlatformListViewBase<>.hostSizeThatFits(width:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  _QWORD v26[2];
  _QWORD v27[2];
  double v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v4 = type metadata accessor for FloatingPointRoundingRule();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 56))(a1, a2, v7);
  if (!v10)
    return *MEMORY[0x1E0C9D820];
  v11 = (void *)v10;
  _ProposedSize.init(width:height:)();
  v28 = v32;
  LOBYTE(v29) = v33;
  v30 = v34;
  v31 = v35;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v27[0] = v13;
  v27[1] = AssociatedConformanceWitness;
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v27);
  v17 = type metadata accessor for _UIHostingView(0, v12, v15, v16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v17);
  ViewRendererHost.sizeThatFits(_:)();
  v19 = v18;
  v21 = v20;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v9, *MEMORY[0x1E0DED500], v4);
  GraphHost.environment.getter();
  v28 = v32;
  v29 = v33;
  EnvironmentValues.pixelLength.getter();
  v23 = v22;
  swift_release();
  swift_release();
  v28 = v19;
  v26[1] = v21;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v23);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v23);

  v24 = v28;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  return v24;
}

void *protocol witness for PlatformListViewBase.host.getter in conformance ListCollectionViewCellBase<A>()
{
  void *v0;
  id v1;

  v0 = (void *)specialized ListCollectionViewCellBase.host.getter();
  v1 = v0;
  return v0;
}

uint64_t assignWithCopy for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_WORD *)v7 = *(_WORD *)v8;
  *(_BYTE *)(v7 + 2) = *(_BYTE *)(v8 + 2);
  return a1;
}

uint64_t assignWithCopy for BorderlessButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 25);
  v8 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<KeyboardShortcut?>.Content(*(_QWORD *)a2, v5, v6, v8, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_BYTE *)(a1 + 25);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v13 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 25) = v7;
  outlined consume of Environment<KeyboardShortcut?>.Content(v9, v10, v11, v13, v12);
  v14 = *(_QWORD *)(v2 + 32);
  LOBYTE(v5) = *(_BYTE *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v14, v5);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of Environment<Bool>.Content(v15, v16);
  v17 = *(_QWORD *)(v2 + 48);
  LOBYTE(v2) = *(_BYTE *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v17, v2);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 56) = v2;
  outlined consume of Environment<Bool>.Content(v18, v19);
  return a1;
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3348], MEMORY[0x1E0CE3358]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3340], MEMORY[0x1E0CE3358]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

id @objc _UIHostingView.__deallocating_deinit(void *a1)
{
  id v1;

  v1 = a1;
  return _UIHostingView.__deallocating_deinit();
}

id _UIHostingView.__deallocating_deinit()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  objc_class *v5;
  objc_super v7;

  v1 = v0;
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  _UIHostingView.updateRemovedState()();
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v3, sel_removeObserver_, v1);

  _UIHostingView.clearDisplayLink()();
  _UIHostingView.clearUpdateTimer()();
  v5 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
  ViewRendererHost.invalidate()();
  static Update.ensure<A>(_:)();
  if (one-time initialization token for shared != -1)
    swift_once();
  HostingViewRegistry.remove<A>(_:)((uint64_t)v1);
  v7.receiver = v1;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t HostingViewRegistry.remove<A>(_:)(uint64_t a1)
{
  _BYTE v3[16];

  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a1, (uint64_t)v3);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<Swift.AnyObject>?);
  return swift_endAccess();
}

uint64_t outlined init with take of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v7;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI7WeakBoxVyyXlGWObTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void type metadata accessor for WeakBox<Swift.AnyObject>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakBox<Swift.AnyObject>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE77D8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>?);
  }
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for NSNotificationName(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 < a4 || v10 + 4 >= &a4[9 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[26 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 208 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[_IncrementalLayout_Child]>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_Child], (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 < a4 || v10 + 4 >= &a4[6 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_Benchmark, [Double])>, (uint64_t (*)(uint64_t))type metadata accessor for (_Benchmark, [Double]), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (_Benchmark, [Double])();
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PresentationOptionsPreference?>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[18 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 144 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>, (uint64_t (*)(uint64_t))type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[7 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 56 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)();
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>();
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_1(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (Badge, Spacer)(0, (unint64_t *)&lazy cache variable for type metadata for (StrongHash, DisplayList));
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *specialized Array.append<A>(contentsOf:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = result[2];
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  type metadata accessor for NSNotificationName(0);
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v7 = v3[2];
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  v2 = result[2];
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v3[3] >> 1)
  {
    if (v6[2])
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v10 = v4 + v2;
  else
    v10 = v4;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 1, v3);
  v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  type metadata accessor for ()();
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    result = (_QWORD *)swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v7 = v3[2];
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<NSNotificationName>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>)
  {
    type metadata accessor for NSNotificationName(255);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>);
  }
}

uint64_t ResolvedScrollBehaviorModifier.UpdateEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[208];
  uint64_t v8;
  __int16 v9[100];
  _BYTE v10[72];
  uint64_t v11;
  uint64_t v12;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = Value[1];
  v11 = *Value;
  v12 = v3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v4 = AGGraphGetValue();
  outlined init with copy of ResolvedScrollBehavior?(v4, (uint64_t)v10);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined assign with take of ResolvedScrollBehavior?((uint64_t)v10, (uint64_t)v9);
  outlined init with copy of ScrollEnvironmentProperties((int *)&v8, (uint64_t)v7);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v8);
  v8 = 0;
  v9[0] = 1;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    result = swift_release();
    v6 = v12;
  }
  else
  {
    result = swift_release();
    v6 = 0;
  }
  *a1 = v11;
  a1[1] = v6;
  return result;
}

uint64_t outlined assign with take of ResolvedScrollBehavior?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t View.contextMenu<A>(menuItems:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v29 = a7;
  v25 = a6;
  v26 = a1;
  v27 = a5;
  v28 = a2;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v10 = type metadata accessor for ModifiedContent();
  v36[0] = a6;
  v36[1] = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v36);
  v11 = type metadata accessor for ZStack();
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v25 - v14;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v11, v13);
  v18 = type metadata accessor for ContextMenuModifier(0, v11, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v25 - v21;
  v30 = a3;
  v31 = a4;
  v23 = v27;
  v32 = v27;
  v33 = v25;
  v34 = v26;
  v35 = v28;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  ContextMenuModifier.init(menuView:)((uint64_t)v15, v11, v16, (uint64_t)v22);
  MEMORY[0x18D75B4AC](v22, a3, v18, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
}

uint64_t partial apply for closure #1 in View.contextMenu<A>(menuItems:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in View.contextMenu<A>(menuItems:)(*(void (**)(double))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 40), a1);
}

uint64_t closure #1 in View.contextMenu<A>(menuItems:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v26 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  a1(v18);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v21 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v27[0] = a4;
  v27[1] = v21;
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v27);
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, v22);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v11, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v11);
}

void type metadata accessor for StyleContextWriter<MenuStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>)
  {
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>);
  }
}

uint64_t ContextMenuModifier.init(menuView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = swift_getKeyPath();
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = swift_getKeyPath();
  *(_BYTE *)(a4 + 32) = 0;
  v9 = a4 + *(int *)(type metadata accessor for ContextMenuModifier(0, a2, a3, v8) + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v9, a1, a2);
}

uint64_t outlined consume of NavigationEventHandlers?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  }
  return result;
}

uint64_t outlined retain of HostingContentViewRootModifier(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 72);
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v2);
  return a1;
}

double HostingContentViewRootModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char v37;
  char v38;
  double v39;
  char v40;
  char v41;
  char v42;
  double v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  double result;
  __int128 v53;
  double v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int16 v103;

  v3 = v1[9];
  v4 = v1[7];
  v100 = v1[8];
  v101 = v3;
  v5 = v1[9];
  v102 = v1[10];
  v6 = v1[5];
  v96 = v1[4];
  v97 = v6;
  v7 = v1[5];
  v8 = v1[7];
  v98 = v1[6];
  v99 = v8;
  v9 = v1[1];
  v92 = *v1;
  v93 = v9;
  v10 = v1[3];
  v12 = *v1;
  v11 = v1[1];
  v94 = v1[2];
  v95 = v10;
  v67 = v100;
  v68 = v5;
  v69 = v1[10];
  v63 = v96;
  v64 = v7;
  v65 = v98;
  v66 = v4;
  v59 = v12;
  v60 = v11;
  v103 = *((_WORD *)v1 + 88);
  v54 = HostingContentViewRootModifier.effectivePadding.getter();
  v55 = v13;
  v15 = v14;
  v17 = v16;
  v18 = *((_QWORD *)&v94 + 1);
  v19 = *(double *)&v94;
  v20 = v95;
  v56 = BYTE8(v95);
  v21 = *((_QWORD *)&v96 + 1);
  v22 = v96;
  v57 = v97;
  v58 = static Edge.Set.all.getter();
  v67 = v100;
  v68 = v101;
  v69 = v102;
  LOWORD(v70) = v103;
  v63 = v96;
  v64 = v97;
  v65 = v98;
  v66 = v99;
  v59 = v92;
  v60 = v93;
  v61 = v94;
  v62 = v95;
  outlined retain of HostingContentViewRootModifier((uint64_t)&v92);
  v23 = HostingContentViewRootModifier.effectivePadding.getter();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v30 = *((double *)&v101 + 1);
  v31 = *((double *)&v102 + 1);
  if (v103 != 1)
  {
    v32 = 0;
    if ((v103 & 0x100) != 0)
      goto LABEL_6;
LABEL_8:
    v43 = *((double *)&v101 + 1);
    v44 = v102;
    v45 = HIBYTE(v103);
    static Alignment.center.getter();
    v40 = v45;
    v41 = v32;
    v42 = v44;
    v30 = v43;
    v39 = 0.0;
    goto LABEL_9;
  }
  if (v19 <= 0.0)
  {
    v32 = 1;
    if ((v103 & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_8;
  }
  v32 = 0;
  v31 = v19;
  if ((v103 & 0x100) == 0)
    goto LABEL_8;
LABEL_6:
  v33 = v18;
  v34 = v20;
  v35 = v21;
  v36 = v31;
  v37 = v102;
  v38 = HIBYTE(v103);
  static Alignment.leading.getter();
  v39 = INFINITY;
  v40 = v38;
  v41 = v32;
  v42 = v37;
  v31 = v36;
  v21 = v35;
  v20 = v34;
  v18 = v33;
LABEL_9:
  v75 = v58;
  v76 = v54;
  v77 = v55;
  v78 = v15;
  v79 = v17;
  v80 = 0;
  v81 = v23;
  v82 = v25;
  v83 = v27;
  v84 = v29;
  v85 = v19;
  v86 = v18;
  v87 = v20;
  v88 = v56;
  v89 = v22;
  v90 = v21;
  v91 = v57;
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v30, v42, 0.0, 1, v39, v40 ^ 1, v31, v41, (uint64_t)&v59, 0.0, 1, 0.0, 1);
  swift_release();
  swift_release();
  outlined consume of Transaction?(v21);
  v46 = v72;
  *(_OWORD *)(a1 + 192) = v71;
  *(_OWORD *)(a1 + 208) = v46;
  *(_OWORD *)(a1 + 224) = v73;
  *(_QWORD *)(a1 + 240) = v74;
  v47 = v68;
  *(_OWORD *)(a1 + 128) = v67;
  *(_OWORD *)(a1 + 144) = v47;
  v48 = v70;
  *(_OWORD *)(a1 + 160) = v69;
  *(_OWORD *)(a1 + 176) = v48;
  v49 = v64;
  *(_OWORD *)(a1 + 64) = v63;
  *(_OWORD *)(a1 + 80) = v49;
  v50 = v66;
  *(_OWORD *)(a1 + 96) = v65;
  *(_OWORD *)(a1 + 112) = v50;
  v51 = v60;
  *(_OWORD *)a1 = v59;
  *(_OWORD *)(a1 + 16) = v51;
  result = *(double *)&v61;
  v53 = v62;
  *(_OWORD *)(a1 + 32) = v61;
  *(_OWORD *)(a1 + 48) = v53;
  return result;
}

uint64_t key path getter for EnvironmentValues.canCollapseSections : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.canCollapseSections.getter();
  *a1 = result & 1;
  return result;
}

uint64_t EnvironmentValues.canCollapseSections.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.keyPressHandlers : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.keyPressHandlers.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.keyPressHandlers.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.onScrollToTopGesture : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.onScrollToTopGesture.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t EnvironmentValues.onScrollToTopGesture.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

double static Divider._makeView(view:inputs:)@<D0>(uint64_t *a1@<X1>, double *a2@<X8>)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)a1 + 2);
  v3 = a1[2];
  v5 = *((_DWORD *)a1 + 6);
  v4 = *((_DWORD *)a1 + 7);
  v6 = *((_DWORD *)a1 + 8);
  v7 = *((_DWORD *)a1 + 9);
  v8 = a1[5];
  v9 = a1[6];
  v10 = *((_DWORD *)a1 + 14);
  v11 = *((_DWORD *)a1 + 15);
  v12 = *((_DWORD *)a1 + 16);
  v13 = *((_DWORD *)a1 + 17);
  v14 = *((_DWORD *)a1 + 18);
  v15 = *((_DWORD *)a1 + 19);
  v16 = *((_DWORD *)a1 + 20);
  v44 = *a1;
  v28 = v2;
  v45 = v2;
  v46 = v3;
  *(_QWORD *)&v47 = __PAIR64__(v4, v5);
  v29 = v6;
  v30 = v4;
  *((_QWORD *)&v47 + 1) = __PAIR64__(v7, v6);
  v48 = v8;
  v49 = v9;
  *(_QWORD *)&v50 = __PAIR64__(v11, v10);
  v24 = v12;
  v25 = v11;
  *((_QWORD *)&v50 + 1) = __PAIR64__(v13, v12);
  v22 = v14;
  v23 = v13;
  v51 = __PAIR64__(v15, v14);
  v21 = v15;
  v31 = v16;
  v52 = v16;
  v35 = v9;
  v26 = v10;
  LODWORD(v36) = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    PreferenceKeys.remove<A>(_:)();
    _ViewInputs.requestedTextRepresentation.setter();
  }
  v27 = v5;
  if ((v7 & 4) == 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type Divider.Child and conformance Divider.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  v35 = v44;
  LODWORD(v36) = v45;
  v37 = v46;
  v38 = v47;
  v39 = v48;
  v40 = v49;
  v41 = v50;
  v42 = v51;
  v43 = v52;
  lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
  static View.makeDebuggableView(view:inputs:)();
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v17 = v44;
  if (v44)
  {
    v18 = v36;
    v35 = v44;
    LODWORD(v36) = v28;
    v37 = v3;
    *(_QWORD *)&v38 = __PAIR64__(v30, v27);
    *((_QWORD *)&v38 + 1) = __PAIR64__(v7, v29);
    v39 = v8;
    v40 = v9;
    v20 = v44;
    *(_QWORD *)&v41 = __PAIR64__(v25, v26);
    *((_QWORD *)&v41 + 1) = __PAIR64__(v23, v24);
    v42 = __PAIR64__(v21, v22);
    v43 = v31;
    if (((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 8))(&v35, v44, v18) & 1) != 0)
    {
      v35 = v20;
      LODWORD(v36) = v28;
      v37 = v3;
      *(_QWORD *)&v38 = __PAIR64__(v30, v27);
      *((_QWORD *)&v38 + 1) = __PAIR64__(v7, v29);
      v39 = v8;
      v40 = v9;
      *(_QWORD *)&v41 = __PAIR64__(v25, v26);
      *((_QWORD *)&v41 + 1) = __PAIR64__(v23, v24);
      v42 = __PAIR64__(v21, v22);
      v43 = v31;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v18 + 16))(&v35, &v33, v17, v18);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  *(_QWORD *)a2 = v33;
  result = v34;
  a2[1] = v34;
  return result;
}

uint64_t specialized static StyleableView._makeView(view:inputs:)(int a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedDivider)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedDivider;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDivider>, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDivider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedDivider> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<DividerStyleConfiguration>, (uint64_t)&type metadata for DividerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DividerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDivider>, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDivider>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider, (uint64_t)&type metadata for ResolvedDivider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedDivider> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedDivider, DividerStyleModifier<DefaultDividerStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedDivider, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedNavigationStackStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedNavigationStackStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationStackStyle>, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationStackStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_NavigationStackStyleConfiguration>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_NavigationStackStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationStackStyle>, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationStackStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationStackStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationStackStyle, NavigationStackStyleModifier<_AutomaticNavigationStackStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedNavigationStackStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedNavigationSplitStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationSplitStyle>, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>.SidebarContent(0, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationSplitStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationSplitStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for NavigationSplitView, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>);
    static View.makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<NavigationSplitViewStyleConfiguration>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<NavigationSplitViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedNavigationSplitStyle>, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationSplitStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle, (uint64_t)&type metadata for ResolvedNavigationSplitStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationSplitStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationSplitStyle, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedNavigationSplitStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedDisclosureGroupStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDisclosureGroupStyle>, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content> and conformance DisclosureGroup<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for DisclosureGroup<DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for DisclosureGroup<A, B>);
    static View.makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<DisclosureGroupStyleConfiguration>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DisclosureGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDisclosureGroupStyle>, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedDisclosureGroupStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedDisclosureGroupStyle, DisclosureGroupStyleModifier<AutomaticDisclosureGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedDisclosureGroupStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedNavigationViewStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedNavigationViewStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedNavigationViewStyle>, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedNavigationViewStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_NavigationViewStyleConfiguration>, (uint64_t)&type metadata for _NavigationViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_NavigationViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedNavigationViewStyle>, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedNavigationViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedNavigationViewStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedNavigationViewStyle, NavigationViewStyleModifier<DefaultNavigationViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedNavigationViewStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  _BYTE v25[32];
  _BYTE v26[32];
  int v27;
  _OWORD v28[2];
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v29 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v25[16] = v29;
  *(_OWORD *)v26 = v4;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  v27 = *(_DWORD *)(a2 + 80);
  v24 = v28[0];
  *(_OWORD *)v25 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v28);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  if (!v15)
  {
    outlined release of _GraphInputs((uint64_t)v28);
    goto LABEL_7;
  }
  v5 = type metadata accessor for ResolvedProgressViewStyle(0);
  outlined release of _GraphInputs((uint64_t)v28);
  if (v5 != v15)
  {
LABEL_7:
    type metadata accessor for ResolvedProgressViewStyle(0);
    PropertyList.subscript.setter();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedProgressViewStyle>, type metadata accessor for ResolvedProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for MakeResolvedRepresentation<ResolvedProgressViewStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedProgressViewStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedProgressViewStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>(0);
    lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<ProgressViewStyleConfiguration>, type metadata accessor for ProgressViewStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ProgressViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v6 = *(unsigned int *)(v15 + 16);
  v7 = *(_QWORD *)(v15 + 24);
  v8 = *(_QWORD *)(v15 + 32);
  swift_retain();
  swift_release();
  v14 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
    type metadata accessor for ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedProgressViewStyle>, type metadata accessor for ResolvedProgressViewStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedProgressViewStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedProgressViewStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedProgressViewStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedProgressViewStyle, ProgressViewStyleModifier<DefaultProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v9 = v6;
  result = swift_conformsToProtocol2();
  if (result)
  {
    v11 = result;
    LODWORD(v14) = a1;
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8);
    v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, type metadata accessor for ResolvedProgressViewStyle, (uint64_t)&protocol conformance descriptor for ResolvedProgressViewStyle);
    v12(&v14, v9, v7, &v15, v5, v13, v7, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v20;
  *(_OWORD *)v17 = v4;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 80);
  v15 = v19[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v21;
  if (!(_QWORD)v21)
  {
    outlined release of _GraphInputs((uint64_t)v19);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedSearchFieldStyle(0);
  outlined release of _GraphInputs((uint64_t)v19);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v21 = type metadata accessor for ResolvedSearchFieldStyle(0);
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSearchFieldStyle>, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedSearchFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedSearchFieldStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedSearchFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    *(_OWORD *)v23 = *(_OWORD *)v17;
    *(_OWORD *)&v23[16] = *(_OWORD *)&v17[16];
    v24 = v18;
    v21 = v15;
    *(_OWORD *)v22 = *(_OWORD *)v16;
    outlined retain of _ViewInputs((uint64_t)&v21);
    specialized static StyleableView._makeView(view:inputs:)(v14, &v21);
    outlined release of _ViewInputs((uint64_t)&v21);
    return outlined release of _ViewInputs((uint64_t)&v21);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<SearchFieldConfiguration>, type metadata accessor for SearchFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SearchFieldConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v21 + 16);
  v8 = *(_QWORD *)(v21 + 24);
  v9 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSearchFieldStyle>, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedSearchFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedSearchFieldStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedSearchFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v15;
    DWORD2(v21) = DWORD2(v15);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
    *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
    v24 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedSearchFieldStyle, SearchFieldStyleModifier<AutomaticSearchFieldStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v21 = v15;
  DWORD2(v21) = DWORD2(v15);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  *(_QWORD *)v23 = *(_QWORD *)v17;
  *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
  *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
  v24 = v18;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, type metadata accessor for ResolvedSearchFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedSearchFieldStyle);
  v12(&v14, v7, v8, &v21, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_11:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedRadioGroupPicker)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedRadioGroupPicker;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedRadioGroupPicker>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedRadioGroupPicker> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ResolvedRadioGroupPicker> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedRadioGroupPicker>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedRadioGroupPicker>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedRadioGroupPicker> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedRadioGroupPicker, RadioGroupStyleModifier<AutomaticRadioGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedRadioGroupPicker, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedCustomButtonMenu)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedCustomButtonMenu;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedCustomButtonMenu>, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedCustomButtonMenu>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedCustomButtonMenu> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ResolvedCustomButtonMenu.Configuration>, (uint64_t)&type metadata for ResolvedCustomButtonMenu.Configuration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ResolvedCustomButtonMenu.Configuration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedCustomButtonMenu>, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedCustomButtonMenu>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu, (uint64_t)&type metadata for ResolvedCustomButtonMenu, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedCustomButtonMenu> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedCustomButtonMenu, CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedCustomButtonMenu, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedColorPickerStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedColorPickerStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedColorPickerStyle>, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedColorPickerStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ColorPickerStyleConfiguration>, (uint64_t)&type metadata for ColorPickerStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ColorPickerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedColorPickerStyle>, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedColorPickerStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle, (uint64_t)&type metadata for ResolvedColorPickerStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedColorPickerStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedColorPickerStyle, ColorPickerStyleModifier<DefaultColorPickerStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedColorPickerStyle and conformance ResolvedColorPickerStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedColorPickerStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v20;
  *(_OWORD *)v17 = v4;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 80);
  v15 = v19[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v21;
  if (!(_QWORD)v21)
  {
    outlined release of _GraphInputs((uint64_t)v19);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedTokenFieldStyle(0);
  outlined release of _GraphInputs((uint64_t)v19);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v21 = type metadata accessor for ResolvedTokenFieldStyle(0);
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTokenFieldStyle>, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedTokenFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTokenFieldStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedTokenFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    *(_OWORD *)v23 = *(_OWORD *)v17;
    *(_OWORD *)&v23[16] = *(_OWORD *)&v17[16];
    v24 = v18;
    v21 = v15;
    *(_OWORD *)v22 = *(_OWORD *)v16;
    outlined retain of _ViewInputs((uint64_t)&v21);
    specialized static StyleableView._makeView(view:inputs:)(v14, &v21);
    outlined release of _ViewInputs((uint64_t)&v21);
    return outlined release of _ViewInputs((uint64_t)&v21);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<TokenFieldConfiguration>, type metadata accessor for TokenFieldConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TokenFieldConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v21 + 16);
  v8 = *(_QWORD *)(v21 + 24);
  v9 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTokenFieldStyle>, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedTokenFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTokenFieldStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedTokenFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v15;
    DWORD2(v21) = DWORD2(v15);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
    *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
    v24 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTokenFieldStyle, TokenFieldStyleModifier<AutomaticTokenFieldStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v21 = v15;
  DWORD2(v21) = DWORD2(v15);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  *(_QWORD *)v23 = *(_QWORD *)v17;
  *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
  *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
  v24 = v18;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, type metadata accessor for ResolvedTokenFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTokenFieldStyle);
  v12(&v14, v7, v8, &v21, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_11:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v20;
  *(_OWORD *)v17 = v4;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 80);
  v15 = v19[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v21;
  if (!(_QWORD)v21)
  {
    outlined release of _GraphInputs((uint64_t)v19);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedTextEditorStyle(0);
  outlined release of _GraphInputs((uint64_t)v19);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v21 = type metadata accessor for ResolvedTextEditorStyle(0);
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTextEditorStyle>, type metadata accessor for ResolvedTextEditorStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedTextEditorStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTextEditorStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedTextEditorStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    *(_OWORD *)v23 = *(_OWORD *)v17;
    *(_OWORD *)&v23[16] = *(_OWORD *)&v17[16];
    v24 = v18;
    v21 = v15;
    *(_OWORD *)v22 = *(_OWORD *)v16;
    outlined retain of _ViewInputs((uint64_t)&v21);
    specialized static StyleableView._makeView(view:inputs:)(v14, &v21);
    outlined release of _ViewInputs((uint64_t)&v21);
    return outlined release of _ViewInputs((uint64_t)&v21);
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<TextEditorStyleConfiguration>, type metadata accessor for TextEditorStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TextEditorStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v21 + 16);
  v8 = *(_QWORD *)(v21 + 24);
  v9 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTextEditorStyle>, type metadata accessor for ResolvedTextEditorStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedTextEditorStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTextEditorStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedTextEditorStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v15;
    DWORD2(v21) = DWORD2(v15);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
    *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
    v24 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTextEditorStyle, TextEditorStyleModifier<AutomaticTextEditorStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v21 = v15;
  DWORD2(v21) = DWORD2(v15);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  *(_QWORD *)v23 = *(_QWORD *)v17;
  *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
  *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
  v24 = v18;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextEditorStyle and conformance ResolvedTextEditorStyle, type metadata accessor for ResolvedTextEditorStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextEditorStyle);
  v12(&v14, v7, v8, &v21, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_11:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedLabelGroupStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedLabelGroupStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelGroupStyle>, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabelGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabelGroupStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabelGroupStyleConfiguration>, (uint64_t)&type metadata for LabelGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabelGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedLabelGroupStyle>, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabelGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabelGroupStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelGroupStyle, LabelGroupStyleModifier<BodyLabelGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedLabelGroupStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  _BYTE v25[32];
  _BYTE v26[32];
  int v27;
  _OWORD v28[2];
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v29 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v25[16] = v29;
  *(_OWORD *)v26 = v4;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  v27 = *(_DWORD *)(a2 + 80);
  v24 = v28[0];
  *(_OWORD *)v25 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v28);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  if (!v15)
  {
    outlined release of _GraphInputs((uint64_t)v28);
    goto LABEL_7;
  }
  v5 = type metadata accessor for ResolvedDatePickerStyle(0);
  outlined release of _GraphInputs((uint64_t)v28);
  if (v5 != v15)
  {
LABEL_7:
    type metadata accessor for ResolvedDatePickerStyle(0);
    PropertyList.subscript.setter();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDatePickerStyle>, type metadata accessor for ResolvedDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t)&protocol witness table for DatePickerStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DatePicker);
    type metadata accessor for MakeResolvedRepresentation<ResolvedDatePickerStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedDatePickerStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedDatePickerStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    lazy protocol witness table accessor for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>();
    static View.makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for StyleInput<DatePickerStyleConfiguration>, type metadata accessor for DatePickerStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<DatePickerStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v6 = *(unsigned int *)(v15 + 16);
  v7 = *(_QWORD *)(v15 + 24);
  v8 = *(_QWORD *)(v15 + 32);
  swift_retain();
  swift_release();
  v14 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
    type metadata accessor for ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedDatePickerStyle>, type metadata accessor for ResolvedDatePickerStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedDatePickerStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedDatePickerStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedDatePickerStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedDatePickerStyle, DatePickerStyleModifier<DefaultDatePickerStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v9 = v6;
  result = swift_conformsToProtocol2();
  if (result)
  {
    v11 = result;
    LODWORD(v14) = a1;
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8);
    v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, type metadata accessor for ResolvedDatePickerStyle, (uint64_t)&protocol conformance descriptor for ResolvedDatePickerStyle);
    v12(&v14, v9, v7, &v15, v5, v13, v7, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[32];
  _BYTE v23[32];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v20;
  *(_OWORD *)v17 = v4;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 80);
  v15 = v19[0];
  *(_OWORD *)v16 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v19);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = v21;
  if (!(_QWORD)v21)
  {
    outlined release of _GraphInputs((uint64_t)v19);
    goto LABEL_8;
  }
  v6 = type metadata accessor for ResolvedTextFieldStyle();
  outlined release of _GraphInputs((uint64_t)v19);
  if (v6 != v5)
  {
LABEL_8:
    *(_QWORD *)&v21 = type metadata accessor for ResolvedTextFieldStyle();
    PropertyList.subscript.setter();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedTextFieldStyle>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeResolvedRepresentation<ResolvedTextFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedTextFieldStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedTextFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    *(_OWORD *)v23 = *(_OWORD *)v17;
    *(_OWORD *)&v23[16] = *(_OWORD *)&v17[16];
    v24 = v18;
    v21 = v15;
    *(_OWORD *)v22 = *(_OWORD *)v16;
    outlined retain of _ViewInputs((uint64_t)&v21);
    specialized static StyleableView._makeView(view:inputs:)(v14, &v21);
    outlined release of _ViewInputs((uint64_t)&v21);
    return outlined release of _ViewInputs((uint64_t)&v21);
  }
  type metadata accessor for StyleInput<TextField<_TextFieldStyleLabel>>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StyleInput<TextField<_TextFieldStyleLabel>> and conformance StyleInput<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleInput<TextField<_TextFieldStyleLabel>>, (uint64_t)&protocol conformance descriptor for StyleInput<A>);
  PropertyList.subscript.getter();
  if (!(_QWORD)v21)
  {
    v14 = 0;
    PropertyList.subscript.setter();
    goto LABEL_10;
  }
  v7 = *(unsigned int *)(v21 + 16);
  v8 = *(_QWORD *)(v21 + 24);
  v9 = *(_QWORD *)(v21 + 32);
  swift_retain();
  swift_release();
  v14 = v9;
  PropertyList.subscript.setter();
  if (!v8)
  {
LABEL_10:
    type metadata accessor for ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>>();
    LODWORD(v21) = a1;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedTextFieldStyle>, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v21) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedTextFieldStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedTextFieldStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedTextFieldStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v21 = v15;
    DWORD2(v21) = DWORD2(v15);
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
    *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
    v24 = v18;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTextFieldStyle, TextFieldStyleModifier<DefaultTextFieldStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v11 = result;
  LODWORD(v14) = a1;
  *(_QWORD *)&v21 = v15;
  DWORD2(v21) = DWORD2(v15);
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  *(_QWORD *)v23 = *(_QWORD *)v17;
  *(_OWORD *)&v23[8] = *(_OWORD *)&v17[8];
  *(_QWORD *)&v23[24] = *(_QWORD *)&v17[24];
  v24 = v18;
  v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8);
  v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (uint64_t (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle, (uint64_t)&protocol conformance descriptor for ResolvedTextFieldStyle);
  v12(&v14, v7, v8, &v21, v6, v13, v8, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_11:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedLabeledContent)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedLabeledContent>, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedLabeledContent> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ResolvedLabeledContent._Body and conformance ResolvedLabeledContent._Body();
    static View.makeView(view:inputs:)();
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<LabeledContentStyleConfiguration>, (uint64_t)&type metadata for LabeledContentStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<LabeledContentStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ResolvedLabeledContent>, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedLabeledContent> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabeledContent, _LabeledContentStyleModifier<AutomaticLabeledContentStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedLabeledContent, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedGroupBoxStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGroupBoxStyle>, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedGroupBoxStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    static _UnaryViewAdaptor._makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<GroupBoxStyleConfiguration>, (uint64_t)&type metadata for GroupBoxStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<GroupBoxStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGroupBoxStyle>, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedGroupBoxStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedGroupBoxStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedGroupBoxStyle, GroupBoxStyleModifier<DefaultGroupBoxStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedGroupBoxStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedSectionStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedSectionStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSectionStyle>, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedSectionStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<SectionStyleConfiguration>, (uint64_t)&type metadata for SectionStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SectionStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSectionStyle>, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedSectionStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedSectionStyle, SectionStyleModifier<DefaultSectionStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedSectionStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedControlGroup)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedControlGroup>, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedControlGroup>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedControlGroup> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ControlGroupStyleConfiguration>, (uint64_t)&type metadata for ControlGroupStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ControlGroupStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedControlGroup>, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedControlGroup>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup, (uint64_t)&type metadata for ResolvedControlGroup, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedControlGroup> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedControlGroup, ControlGroupStyleModifier<AutomaticControlGroupStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedControlGroup and conformance ResolvedControlGroup();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedControlGroup, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedToggleStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedToggleStyle>, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedToggleStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>, AccessibilityToggleModifier<ResolvedToggleStyleBody>.RepresentationModifier<ToggleStyleConfiguration.Label>>, ModifiedContent<ResolvedToggleStyleBody, AccessibilityAttachmentModifier>>, AccessibilityLargeContentViewModifier<ToggleStyleConfiguration.Label>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<ToggleStyleConfiguration>, (uint64_t)&type metadata for ToggleStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<ToggleStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedToggleStyle>, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle, (uint64_t)&type metadata for ResolvedToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedToggleStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedToggleStyle, ToggleStyleModifier<DefaultToggleStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedToggleStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedSliderStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedSliderStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSliderStyle>, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedSliderStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<SliderStyleConfiguration>, (uint64_t)&type metadata for SliderStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<SliderStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedSliderStyle>, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedSliderStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle, (uint64_t)&type metadata for ResolvedSliderStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedSliderStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedSliderStyle, SliderStyleModifier<AutomaticSliderStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedSliderStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  _BYTE v25[32];
  _BYTE v26[32];
  int v27;
  _OWORD v28[2];
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v29 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v25[16] = v29;
  *(_OWORD *)v26 = v4;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  v27 = *(_DWORD *)(a2 + 80);
  v24 = v28[0];
  *(_OWORD *)v25 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v28);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  if (!v15)
  {
    outlined release of _GraphInputs((uint64_t)v28);
    goto LABEL_7;
  }
  v5 = type metadata accessor for ResolvedButtonStyle(0);
  outlined release of _GraphInputs((uint64_t)v28);
  if (v5 != v15)
  {
LABEL_7:
    type metadata accessor for ResolvedButtonStyle(0);
    PropertyList.subscript.setter();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedButtonStyle>, type metadata accessor for ResolvedButtonStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifi();
    type metadata accessor for MakeResolvedRepresentation<ResolvedButtonStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeResolvedRepresentation<ResolvedButtonStyle> and conformance MakeResolvedRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeResolvedRepresentation<ResolvedButtonStyle>, (uint64_t)&protocol conformance descriptor for MakeResolvedRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifie, type metadata accessor for ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultAction>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, DefinesSearchCompletionModifier, EmptyModifier>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ViewInputFlagModifier<TextSelectionForbidden>, MEMORY[0x1E0CE5518], MEMORY[0x1E0CE5508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StaticIf<InvertedViewInputPredicate<NavigationButtonInput>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, AccessibilityDefaultActionRepresentableStyle<PrimitiveButtonStyleConfiguration.Label>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>>, AccessibilityAttachmentMod();
    static ModifiedContent<>._makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for StyleInput<PrimitiveButtonStyleConfiguration>, type metadata accessor for PrimitiveButtonStyleConfiguration, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<PrimitiveButtonStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v6 = *(unsigned int *)(v15 + 16);
  v7 = *(_QWORD *)(v15 + 24);
  v8 = *(_QWORD *)(v15 + 32);
  swift_retain();
  swift_release();
  v14 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
    type metadata accessor for ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedButtonStyle>, type metadata accessor for ResolvedButtonStyle, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for MakeDefaultRepresentation<ResolvedButtonStyle>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MakeDefaultRepresentation<ResolvedButtonStyle> and conformance MakeDefaultRepresentation<A>, (uint64_t (*)(uint64_t))type metadata accessor for MakeDefaultRepresentation<ResolvedButtonStyle>, (uint64_t)&protocol conformance descriptor for MakeDefaultRepresentation<A>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedButtonStyle, ButtonStyleModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v9 = v6;
  result = swift_conformsToProtocol2();
  if (result)
  {
    v11 = result;
    LODWORD(v14) = a1;
    v15 = v24;
    v16 = DWORD2(v24);
    v17 = *(_QWORD *)v25;
    v18 = *(_OWORD *)&v25[8];
    v19 = *(_QWORD *)&v25[24];
    v20 = *(_QWORD *)v26;
    v21 = *(_OWORD *)&v26[8];
    v22 = *(_QWORD *)&v26[24];
    v23 = v27;
    v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(result + 8);
    v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, type metadata accessor for ResolvedButtonStyle, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
    v12(&v14, v9, v7, &v15, v5, v13, v7, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedTableStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedTableStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTableStyle>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedTableStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<TableStyleConfiguration>, (uint64_t)&type metadata for TableStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<TableStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedTableStyle>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedTableStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedTableStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedTableStyle, TableStyleModifier<AutomaticTableStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedTableStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedGaugeStyle)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedGaugeStyle;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGaugeStyle>, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedGaugeStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<GaugeStyleConfiguration>, (uint64_t)&type metadata for GaugeStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<GaugeStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedGaugeStyle>, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedGaugeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle, (uint64_t)&type metadata for ResolvedGaugeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedGaugeStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedGaugeStyle, GaugeStyleModifier<DefaultGaugeStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedGaugeStyle, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for ResolvedBadgedView)
  {
    *(_QWORD *)&v20 = &type metadata for ResolvedBadgedView;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedBadgedView>, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedBadgedView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedBadgedView> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<BadgeViewStyleConfiguration>, (uint64_t)&type metadata for BadgeViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<BadgeViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedBadgedView>, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedBadgedView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView, (uint64_t)&type metadata for ResolvedBadgedView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedBadgedView> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedBadgedView, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();
  v11(&v13, v6, v7, &v20, &type metadata for ResolvedBadgedView, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedMenuStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedMenuStyle>, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedMenuStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    static ModifiedContent<>._makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<MenuStyleConfiguration>, (uint64_t)&type metadata for MenuStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<MenuStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedMenuStyle>, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedMenuStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedMenuStyle, MenuStyleModifier<DefaultMenuStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedMenuStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedHelpStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedHelpStyle>, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedHelpStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&type metadata for HelpStyleConfiguration.Content, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for HelpView);
    lazy protocol witness table accessor for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>();
    static ModifiedContent<>._makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<HelpStyleConfiguration>, (uint64_t)&type metadata for HelpStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<HelpStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedHelpStyle>, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedHelpStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle, (uint64_t)&type metadata for ResolvedHelpStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedHelpStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedHelpStyle, HelpStyleModifier<DefaultHelpStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedHelpStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  int v25;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v27 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v23[16] = v27;
  *(_OWORD *)v24 = v4;
  *(_OWORD *)&v24[16] = *(_OWORD *)(a2 + 64);
  v25 = *(_DWORD *)(a2 + 80);
  v22 = v26[0];
  *(_OWORD *)v23 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v26);
  if (!v13 || (ValueMetadata *)v13 != &type metadata for ResolvedFormStyle)
  {
    PropertyList.subscript.setter();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedFormStyle>, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Form<FormStyleConfiguration.Content>, (uint64_t)&type metadata for FormStyleConfiguration.Content, (uint64_t)&protocol witness table for FormStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Form);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedFormStyle> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type Form<FormStyleConfiguration.Content> and conformance Form<A>();
    static View.makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<FormStyleConfiguration>, (uint64_t)&type metadata for FormStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<FormStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  v5 = *(unsigned int *)(v13 + 16);
  v6 = *(_QWORD *)(v13 + 24);
  v7 = *(_QWORD *)(v13 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
    type metadata accessor for ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedFormStyle>, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedFormStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedFormStyle> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedFormStyle, FormStyleModifier<AutomaticFormStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    v9 = result;
    LODWORD(v12) = a1;
    v13 = v22;
    v14 = DWORD2(v22);
    v15 = *(_QWORD *)v23;
    v16 = *(_OWORD *)&v23[8];
    v17 = *(_QWORD *)&v23[24];
    v18 = *(_QWORD *)v24;
    v19 = *(_OWORD *)&v24[8];
    v20 = *(_QWORD *)&v24[24];
    v21 = v25;
    v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
    v11 = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
    v10(&v12, v5, v6, &v13, &type metadata for ResolvedFormStyle, v11, v6, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for IndexViewBody)
  {
    *(_QWORD *)&v20 = &type metadata for IndexViewBody;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<IndexViewBody>, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<IndexViewBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<IndexViewBody> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<_IndexViewStyleConfiguration>, (uint64_t)&type metadata for _IndexViewStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<_IndexViewStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<IndexViewBody>, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<IndexViewBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody, (uint64_t)&type metadata for IndexViewBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<IndexViewBody> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<IndexViewBody, IndexViewStyleModifier<DefaultIndexViewStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type IndexViewBody and conformance IndexViewBody();
  v11(&v13, v6, v7, &v20, &type metadata for IndexViewBody, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[32];
  _BYTE v16[32];
  int v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  _BYTE v22[32];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v19 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v15[16] = v19;
  *(_OWORD *)v16 = v4;
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 64);
  v17 = *(_DWORD *)(a2 + 80);
  v14 = v18[0];
  *(_OWORD *)v15 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v18);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  v5 = (ValueMetadata *)v20;
  outlined release of _GraphInputs((uint64_t)v18);
  if (!v5 || v5 != &type metadata for StepperBody)
  {
    *(_QWORD *)&v20 = &type metadata for StepperBody;
    PropertyList.subscript.setter();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StepperBody>, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<StepperBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperBody and conformance StepperBody, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<StepperBody> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    *(_OWORD *)v22 = *(_OWORD *)v16;
    *(_OWORD *)&v22[16] = *(_OWORD *)&v16[16];
    v23 = v17;
    v20 = v14;
    *(_OWORD *)v21 = *(_OWORD *)v15;
    outlined retain of _ViewInputs((uint64_t)&v20);
    specialized static StyleableView._makeView(view:inputs:)(v13, &v20);
    outlined release of _ViewInputs((uint64_t)&v20);
    return outlined release of _ViewInputs((uint64_t)&v20);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<StepperStyleConfiguration>, (uint64_t)&type metadata for StepperStyleConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<StepperStyleConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v20)
  {
    v13 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v6 = *(unsigned int *)(v20 + 16);
  v7 = *(_QWORD *)(v20 + 24);
  v8 = *(_QWORD *)(v20 + 32);
  swift_retain();
  swift_release();
  v13 = v8;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>>();
    LODWORD(v20) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<StepperBody>, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v20) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<StepperBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type StepperBody and conformance StepperBody, (uint64_t)&type metadata for StepperBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<StepperBody> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v20 = v14;
    DWORD2(v20) = DWORD2(v14);
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    *(_QWORD *)v22 = *(_QWORD *)v16;
    *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
    *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
    v23 = v17;
    lazy protocol witness table accessor for type ModifiedContent<StepperBody, StepperStyleModifier<DefaultStepperStyle>> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  LODWORD(v13) = a1;
  *(_QWORD *)&v20 = v14;
  DWORD2(v20) = DWORD2(v14);
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  *(_QWORD *)v22 = *(_QWORD *)v16;
  *(_OWORD *)&v22[8] = *(_OWORD *)&v16[8];
  *(_QWORD *)&v22[24] = *(_QWORD *)&v16[24];
  v23 = v17;
  v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v12 = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
  v11(&v13, v6, v7, &v20, &type metadata for StepperBody, v12, v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[32];
  _BYTE v15[32];
  int v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  _BYTE v20[32];
  _BYTE v21[32];
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v18 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v14[16] = v18;
  *(_OWORD *)v15 = v4;
  *(_OWORD *)&v15[16] = *(_OWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 80);
  v13 = v17[0];
  *(_OWORD *)v14 = v3;
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v17);
  lazy protocol witness table accessor for type StyleableViewContextInput and conformance StyleableViewContextInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v17);
  if (!(_QWORD)v19 || (ValueMetadata *)v19 != &type metadata for ResolvedUIKitButtonBody)
  {
    *(_QWORD *)&v19 = &type metadata for ResolvedUIKitButtonBody;
    PropertyList.subscript.setter();
    LODWORD(v19) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedUIKitButtonBody>, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v19) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeResolvedRepresentation<ResolvedUIKitButtonBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeResolvedRepresentation);
    lazy protocol witness table accessor for type MakeResolvedRepresentation<ResolvedUIKitButtonBody> and conformance MakeResolvedRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_OWORD *)&v20[16] = *(_OWORD *)&v14[16];
    *(_OWORD *)v21 = *(_OWORD *)v15;
    *(_OWORD *)&v21[16] = *(_OWORD *)&v15[16];
    v22 = v16;
    v19 = v13;
    *(_OWORD *)v20 = *(_OWORD *)v14;
    specialized static StyleableView._makeView(view:inputs:)(v12, &v19);
    return outlined release of _ViewInputs((uint64_t)&v19);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for StyleInput<UIKitButtonConfiguration>, (uint64_t)&type metadata for UIKitButtonConfiguration, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for StyleInput);
  lazy protocol witness table accessor for type StyleInput<UIKitButtonConfiguration> and conformance StyleInput<A>();
  PropertyList.subscript.getter();
  if (!(_QWORD)v19)
  {
    v12 = 0;
    PropertyList.subscript.setter();
    goto LABEL_9;
  }
  v5 = *(unsigned int *)(v19 + 16);
  v6 = *(_QWORD *)(v19 + 24);
  v7 = *(_QWORD *)(v19 + 32);
  swift_retain();
  swift_release();
  v12 = v7;
  PropertyList.subscript.setter();
  if (!v6)
  {
LABEL_9:
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
    LODWORD(v19) = a1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ResolvedUIKitButtonBody>, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    LODWORD(v19) = _GraphValue.value.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for MakeDefaultRepresentation<ResolvedUIKitButtonBody>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody, (uint64_t)&type metadata for ResolvedUIKitButtonBody, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MakeDefaultRepresentation);
    lazy protocol witness table accessor for type MakeDefaultRepresentation<ResolvedUIKitButtonBody> and conformance MakeDefaultRepresentation<A>();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(_QWORD *)&v19 = v13;
    DWORD2(v19) = DWORD2(v13);
    *(_OWORD *)&v20[8] = *(_OWORD *)&v14[8];
    *(_QWORD *)v20 = *(_QWORD *)v14;
    *(_QWORD *)&v20[24] = *(_QWORD *)&v14[24];
    *(_QWORD *)v21 = *(_QWORD *)v15;
    *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
    *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
    v22 = v16;
    lazy protocol witness table accessor for type ModifiedContent<ResolvedUIKitButtonBody, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>();
    static View.makeDebuggableView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    return result;
  }
  v9 = result;
  LODWORD(v12) = a1;
  *(_QWORD *)&v19 = v13;
  DWORD2(v19) = DWORD2(v13);
  *(_OWORD *)&v20[8] = *(_OWORD *)&v14[8];
  *(_QWORD *)v20 = *(_QWORD *)v14;
  *(_QWORD *)&v20[24] = *(_QWORD *)&v14[24];
  *(_QWORD *)v21 = *(_QWORD *)v15;
  *(_OWORD *)&v21[8] = *(_OWORD *)&v15[8];
  *(_QWORD *)&v21[24] = *(_QWORD *)&v15[24];
  v22 = v16;
  v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, __int128 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(result + 8);
  v11 = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
  v10(&v12, v5, v6, &v19, &type metadata for ResolvedUIKitButtonBody, v11, v6, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  return swift_release();
}

