uint64_t closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = v8;
  v9[5] = v7;
  v9[6] = a2;
  swift_retain_n();
  swift_bridgeObjectRetain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PrimitiveTargetVisibilityModifier<A>.VisibilityActionDispatcher(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveTargetVisibilityModifier<A>.VisibilityActionDispatcher, a1);
  return static AsyncAttribute.flags.getter();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PrimitiveTargetVisibilityModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  return static PrimitiveTargetVisibilityModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrimitiveTargetVisibilityModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveTargetVisibilityModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t OnScrollVisibilityChangeModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v12;
  __int128 v13;

  v2 = v1;
  v13 = *(_OWORD *)(v1 + 3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  v4 = *v1;
  v6 = v1[1];
  v5 = v1[2];
  v7 = swift_allocObject();
  v8 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 48) = v2[4];
  v9 = swift_allocObject();
  v10 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 48) = v2[4];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = partial apply for closure #1 in OnScrollVisibilityChangeModifier.body(content:);
  *(_QWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = partial apply for closure #2 in OnScrollVisibilityChangeModifier.body(content:);
  *(_QWORD *)(a1 + 88) = v9;
  swift_retain_n();
  outlined retain of State<Bool>((uint64_t)&v13);
  swift_retain();
  return outlined retain of State<Bool>((uint64_t)&v13);
}

uint64_t closure #1 in OnScrollVisibilityChangeModifier.body(content:)(uint64_t result)
{
  __int128 v1;

  v1 = *(_OWORD *)(result + 24);
  if (*((_QWORD *)&v1 + 1))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of AnyDynamicChild<A, B>((uint64_t)&v1);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnScrollVisibilityChangeModifier@<X0>(uint64_t a1@<X8>)
{
  return OnScrollVisibilityChangeModifier.body(content:)(a1);
}

uint64_t static OnScrollVisibilityGeometryAction._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v22 = *((_DWORD *)a2 + 2);
  v21 = a2[2];
  v4 = *((_DWORD *)a2 + 6);
  v5 = *((_DWORD *)a2 + 7);
  v6 = *((_DWORD *)a2 + 8);
  v7 = *((_DWORD *)a2 + 9);
  v16 = a2[6];
  v17 = a2[5];
  v8 = *((_DWORD *)a2 + 14);
  v18 = *((_DWORD *)a2 + 16);
  v19 = *((_DWORD *)a2 + 15);
  v15 = *((_DWORD *)a2 + 17);
  v20 = *((_DWORD *)a2 + 18);
  v13 = *((_DWORD *)a2 + 19);
  v14 = *((_DWORD *)a2 + 20);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnScrollVisibilityGeometryAction>, (uint64_t)&unk_1E1B01420, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _ViewInputs.position.getter();
  _ViewInputs.size.getter();
  v11 = _ViewInputs.transform.getter();
  _ViewInputs.environment.getter();
  _ViewInputs.safeAreaInsets.getter();
  _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  v25 = v11;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  v9 = AGGraphSetFlags();
  v23 = v3;
  v24 = v22;
  v26 = v21;
  v27 = v4;
  v28 = v5;
  v29 = v6;
  v30 = v7;
  v31 = v17;
  v32 = v16;
  v33 = v8;
  v34 = v19;
  v35 = v18;
  v36 = v15;
  v37 = v20;
  v38 = v13;
  v39 = v14;
  return a3(v9, &v23);
}

uint64_t OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.updateValue()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  double v3;
  int v4;
  BOOL v5;
  __int128 *Value;
  __int128 v7;
  double v8;
  double v9;
  __int128 *v10;
  __int128 v11;
  double v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  _OWORD v19[2];
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;

  result = AGGraphGetValue();
  if (*(_BYTE *)(result + 24) == 1)
  {
    v3 = *(double *)result;
    v4 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v4 != *(_DWORD *)(v0 + 44))
    {
      *(_DWORD *)(v0 + 44) = v4;
      *(_QWORD *)(v0 + 32) = 0xFFFFFFFFLL;
      *(_BYTE *)(v0 + 40) = 0;
      *(_BYTE *)(v0 + 52) = 2;
    }
    ++*(_DWORD *)(v0 + 48);
    result = AGGraphGetCurrentAttribute();
    if ((_DWORD)result == *MEMORY[0x1E0CFED28])
    {
      __break(1u);
    }
    else
    {
      v5 = *(_DWORD *)(v0 + 20) == *MEMORY[0x1E0CFED28];
      swift_retain();
      LOBYTE(v22) = v5;
      GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
      v20 = 0;
      memset(v19, 0, sizeof(v19));
      v21 = 2;
      GeometryProxy.frameClippedToScrollViews(in:)();
      outlined destroy of CoordinateSpace((uint64_t)v19);
      Value = (__int128 *)AGGraphGetValue();
      v7 = Value[1];
      v22 = *Value;
      v23 = v7;
      ViewSize.height.getter();
      v9 = v18 / v8;
      v10 = (__int128 *)AGGraphGetValue();
      v11 = v10[1];
      v22 = *v10;
      v23 = v11;
      ViewSize.width.getter();
      v13 = v17 / v12;
      if (v13 >= v9)
        v13 = v9;
      v14 = *(unsigned __int8 *)(v0 + 52);
      if ((v14 == 2 || ((v14 & 1) == 0) == v3 <= v13)
        && (*(_BYTE *)(v0 + 52) = v3 <= v13, v15 = UpdateCycleDetector.dispatch(label:isDebug:)(), (v15 & 1) != 0))
      {
        MEMORY[0x1E0C80A78](v15, v16);
        Attribute.syncMainIfReferences<A>(do:)();
        return swift_release();
      }
      else
      {
        return swift_release();
      }
    }
  }
  else if ((*(_BYTE *)(v0 + 52) & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, v2);
    swift_retain();
    Attribute.syncMainIfReferences<A>(do:)();
    result = swift_release();
    *(_BYTE *)(v0 + 52) = 2;
  }
  return result;
}

unint64_t implicit closure #2 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.updateValue()()
{
  return 0xD000000000000019;
}

uint64_t closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_BYTE *)(v5 + 32) = a2;
  swift_retain_n();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder()
{
  lazy protocol witness table accessor for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder();
  return static AsyncAttribute.flags.getter();
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollVisibilityGeometryAction()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View.onScrollTargetVisibilityChange<A>(idType:threshold:_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;

  if (a1 < 0.0)
    a1 = 0.0;
  v15[0] = 0;
  v16 = 0;
  if (a1 > 1.0)
    a1 = 1.0;
  *(double *)v12 = a1;
  v12[1] = a3;
  v12[2] = a4;
  v13 = 0;
  v14 = 0;
  v10 = type metadata accessor for ScrollTargetVisibilityChangeModifier(0, a6, a8, a5);
  swift_retain();
  MEMORY[0x18D75B4AC](v12, a5, v10, a7);
  swift_release();
  return outlined release of AnyDynamicChild<A, B>((uint64_t)v15);
}

uint64_t type metadata accessor for ScrollTargetVisibilityChangeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollTargetVisibilityChangeModifier);
}

uint64_t View.onScrollVisibilityChange(threshold:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _QWORD v5[3];
  char v6;
  uint64_t v7;

  if (a4 < 0.0)
    a4 = 0.0;
  if (a4 > 1.0)
    a4 = 1.0;
  *(double *)v5 = a4;
  v5[1] = a1;
  v5[2] = a2;
  v6 = 0;
  v7 = 0;
  return MEMORY[0x18D75B4AC](v5, a3, &unk_1E1B012F0);
}

uint64_t sub_18728C6CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for ScrollTargetVisibilityChangeModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTargetVisibilityChangeModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t sub_18728C744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier;
  if (!lazy protocol witness table cache variable for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollVisibilityChangeModifier, &unk_1E1B012F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier);
  }
  return result;
}

void *type metadata accessor for OnScrollVisibilityChangeModifier()
{
  return &unk_1E1B012F0;
}

uint64_t destroy for OnScrollVisibilityChangeModifier()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OnScrollVisibilityChangeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnScrollVisibilityChangeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnScrollVisibilityChangeModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnScrollVisibilityChangeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollTargetVisibilityChangeModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for PrimitiveTargetVisibilityModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrimitiveTargetVisibilityModifier);
}

uint64_t partial apply for closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)(v0 + 32);
}

uint64_t outlined retain of State<Bool>(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #2 in ScrollTargetVisibilityChangeModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)(v0 + 32);
}

uint64_t partial apply for closure #1 in OnScrollVisibilityChangeModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in OnScrollVisibilityChangeModifier.body(content:)(v0 + 16);
}

uint64_t objectdestroy_7Tm_1()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in OnScrollVisibilityChangeModifier.body(content:)()
{
  uint64_t v0;

  return closure #1 in OnScrollVisibilityChangeModifier.body(content:)(v0 + 16);
}

uint64_t initializeWithCopy for PrimitiveTargetVisibilityModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PrimitiveTargetVisibilityModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PrimitiveTargetVisibilityModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t initializeWithCopy for OnScrollVisibilityGeometryAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnScrollVisibilityGeometryAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for OnScrollVisibilityGeometryAction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

void *type metadata accessor for OnScrollVisibilityGeometryAction()
{
  return &unk_1E1B01420;
}

uint64_t sub_18728CC0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for ScrollTargetVisibilityChangeModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTargetVisibilityChangeModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for PrimitiveTargetVisibilityModifier(255, v4, v5, v8);
  v9 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v18[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v18[1] = &protocol witness table for PrimitiveTargetVisibilityModifier<A>;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v18);
  v14 = MEMORY[0x1E0CE5EF8];
  v17[0] = v13;
  v17[1] = MEMORY[0x1E0CE5EF8];
  v16[0] = MEMORY[0x18D75FFDC](v12, v10, v17);
  v16[1] = v14;
  return MEMORY[0x18D75FFDC](v12, v11, v16);
}

uint64_t sub_18728CD28()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, type metadata accessor for ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<OnScrollVisibilityChangeModifier>);
}

void type metadata accessor for _ViewModifier_Content<OnScrollVisibilityChangeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnScrollVisibilityChangeModifier>)
  {
    lazy protocol witness table accessor for type OnScrollVisibilityChangeModifier and conformance OnScrollVisibilityChangeModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnScrollVisibilityChangeModifier>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnScrollVisibilityChangeModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<OnScrollVisibilityChangeModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = &protocol witness table for OnScrollVisibilityGeometryAction;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollVisibilityGeometryAction()
{
  return &protocol witness table for OnScrollVisibilityGeometryAction;
}

_UNKNOWN **base witness table accessor for ViewModifier in PrimitiveTargetVisibilityModifier<A>()
{
  return &protocol witness table for PrimitiveTargetVisibilityModifier<A>;
}

void type metadata accessor for _AnyPreferenceKey<ScrollTargetRole.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<ScrollTargetRole.Key>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ScrollTargetRole.Key>);
  }
}

uint64_t type metadata accessor for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher);
}

unint64_t lazy protocol witness table accessor for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder;
  if (!lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder, &unk_1E1B01378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder;
  if (!lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder, &unk_1E1B01378);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder and conformance OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder);
  }
  return result;
}

uint64_t partial apply for closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_18728CFD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

__n128 __swift_memcpy53_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 53))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 53) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder()
{
  return &unk_1E1B01378;
}

uint64_t initializeWithCopy for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 17) = *(_QWORD *)(a2 + 17);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

void base witness table accessor for _AttributeBody in PrimitiveTargetVisibilityModifier<A>.VisibilityActionDispatcher()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.modifier.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PrimitiveTargetVisibilityModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  return *(unsigned __int8 *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(a1, *(double *)(v2 + 32), a2, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_18728D29C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
}

uint64_t CircularProgressViewStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void static CircularProgressViewStyle.Size.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CircularProgressViewStyle.Size.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CircularProgressViewStyle.Size.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CircularProgressViewStyle.init(size:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t CircularProgressViewStyle.init(tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = a1;
  return result;
}

uint64_t CircularProgressViewStyle.makeBody(configuration:)(uint64_t a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[1];
  v11 = *v1;
  v12 = v7;
  v13 = *((_QWORD *)v1 + 4);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>();
  closure #1 in CircularProgressViewStyle.makeBody(configuration:)(a1, (uint64_t)&v6[*(int *)(v8 + 44)]);
  Spacing.init()();
  v10[0] = v10[1];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>, MEMORY[0x1E0CE74B8]);
  View.spacing(_:)();
  swift_bridgeObjectRelease();
  return outlined destroy of VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>((uint64_t)v6);
}

uint64_t closure #1 in CircularProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v54 = a2;
  v3 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
  MEMORY[0x1E0C80A78](v3, v4);
  v68 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v40 - v8;
  CircularProgressViewStyle.fractionCompletedView(configuration:)(a1, (uint64_t)&v40 - v8);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 24)) == 1)
  {
    CircularProgressViewStyle.labels(configuration:)((uint64_t)&v82);
    v66 = v83;
    v67 = v82;
    v64 = v85;
    v65 = v84;
    v62 = v87;
    v63 = v86;
    v55 = v90;
    v56 = v89;
    v60 = v92;
    v61 = v88;
    v58 = v93;
    v59 = v91;
    v57 = v94;
  }
  else
  {
    v66 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v62 = 0;
    v63 = 0;
    v60 = 0;
    v61 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 1;
  }
  CircularProgressViewStyle.labels(configuration:)((uint64_t)&v82);
  v10 = v82;
  v11 = v84;
  v52 = v84;
  v53 = v82;
  v45 = v85;
  v46 = v83;
  v12 = v86;
  v13 = v88;
  v50 = v88;
  v51 = v86;
  v43 = v89;
  v44 = v87;
  v14 = v90;
  v15 = v92;
  v48 = v92;
  v49 = v90;
  v41 = v93;
  v42 = v91;
  v16 = v94;
  v47 = v9;
  v17 = v68;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>((uint64_t)v9, v68);
  v18 = v17;
  v19 = v54;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(v18, v54);
  type metadata accessor for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)();
  v21 = (_OWORD *)(v19 + *(int *)(v20 + 48));
  *(_QWORD *)&v69 = v67;
  *((_QWORD *)&v69 + 1) = v66;
  *(_QWORD *)&v70 = v65;
  *((_QWORD *)&v70 + 1) = v64;
  *(_QWORD *)&v71 = v63;
  *((_QWORD *)&v71 + 1) = v62;
  v22 = v55;
  v23 = v56;
  *(_QWORD *)&v72 = v61;
  *((_QWORD *)&v72 + 1) = v56;
  *(_QWORD *)&v73 = v55;
  *((_QWORD *)&v73 + 1) = v59;
  *(_QWORD *)&v74 = v60;
  *((_QWORD *)&v74 + 1) = v58;
  *(_QWORD *)&v75 = v57;
  *((_QWORD *)&v75 + 1) = v10;
  v24 = v46;
  *(_QWORD *)&v76 = v46;
  *((_QWORD *)&v76 + 1) = v11;
  v25 = v45;
  *(_QWORD *)&v77 = v45;
  *((_QWORD *)&v77 + 1) = v12;
  v26 = v44;
  *(_QWORD *)&v78 = v44;
  *((_QWORD *)&v78 + 1) = v13;
  v27 = v43;
  *(_QWORD *)&v79 = v43;
  *((_QWORD *)&v79 + 1) = v14;
  v28 = v42;
  *(_QWORD *)&v80 = v42;
  *((_QWORD *)&v80 + 1) = v15;
  v29 = v41;
  *(_QWORD *)&v81 = v41;
  *((_QWORD *)&v81 + 1) = v16;
  v30 = v76;
  v21[6] = v75;
  v21[7] = v30;
  v31 = v69;
  v32 = v70;
  v33 = v74;
  v21[4] = v73;
  v21[5] = v33;
  v34 = v72;
  v21[2] = v71;
  v21[3] = v34;
  *v21 = v31;
  v21[1] = v32;
  v35 = v77;
  v36 = v78;
  v37 = v81;
  v38 = v79;
  v21[11] = v80;
  v21[12] = v37;
  v21[9] = v36;
  v21[10] = v38;
  v21[8] = v35;
  outlined retain of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>((uint64_t)&v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?);
  outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>((uint64_t)v47);
  v82 = v67;
  v83 = v66;
  v84 = v65;
  v85 = v64;
  v86 = v63;
  v87 = v62;
  v88 = v61;
  v89 = v23;
  v90 = v22;
  v91 = v59;
  v92 = v60;
  v93 = v58;
  v94 = v57;
  v95 = v53;
  v96 = v24;
  v97 = v52;
  v98 = v25;
  v99 = v51;
  v100 = v26;
  v101 = v50;
  v102 = v27;
  v103 = v49;
  v104 = v28;
  v105 = v48;
  v106 = v29;
  v107 = v16;
  outlined retain of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>((uint64_t)&v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?);
  return outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(v68);
}

double CircularProgressViewStyle.fractionCompletedView(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  double v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  double v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  double v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  double v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  double result;
  unsigned __int8 v54;
  _BYTE v55[12];
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  double v74;
  unsigned __int8 v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;

  v62 = a2;
  v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ArchivableCircularProgressView(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v55[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v55[-v14];
  v16 = *(_QWORD *)v2;
  v17 = *(unsigned __int8 *)(v2 + 8);
  v18 = *(_QWORD *)(v2 + 16);
  v19 = *(unsigned __int8 *)(v2 + 24);
  v20 = *(_QWORD *)(v2 + 32);
  outlined init with copy of ProgressViewStyleConfiguration(a1, (uint64_t)v7);
  outlined copy of Environment<Color?>.Content(v16, v17);
  v65 = v18;
  LODWORD(v64) = v19;
  outlined copy of Environment<Bool>.Content(v18, v19);
  if (v20)
  {
    swift_retain();
    v66 = v20;
    v61 = v20;
  }
  else
  {
    outlined copy of Environment<Color?>.Content(v16, v17);
    v61 = specialized Environment.wrappedValue.getter(v16, v17);
    outlined consume of Environment<Color?>.Content(v16, v17);
    v66 = 0;
  }
  swift_retain();
  outlined consume of Environment<Color?>.Content(v16, v17);
  v21 = v65;
  v22 = v64;
  outlined consume of Environment<Bool>.Content(v65, v64);
  swift_release();
  *v11 = xmmword_187C1BBA0;
  outlined init with take of TableCellFormula((uint64_t)v7, (uint64_t)v11 + *(int *)(v8 + 24), type metadata accessor for ProgressViewStyleConfiguration);
  *(_QWORD *)((char *)v11 + *(int *)(v8 + 28)) = v61;
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v15, type metadata accessor for ArchivableCircularProgressView);
  v23 = v62;
  outlined init with take of TableCellFormula((uint64_t)v15, v62, type metadata accessor for ArchivableCircularProgressView);
  outlined copy of Environment<Color?>.Content(v16, v17);
  outlined copy of Environment<Bool>.Content(v21, v22);
  v63 = v20;
  swift_retain();
  if (v20)
  {
    v60 = v20;
  }
  else
  {
    outlined copy of Environment<Color?>.Content(v16, v17);
    v60 = specialized Environment.wrappedValue.getter(v16, v17);
    outlined consume of Environment<Color?>.Content(v16, v17);
  }
  v24 = v23
      + *(int *)(type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>)+ 52);
  swift_retain();
  outlined consume of Environment<Color?>.Content(v16, v17);
  outlined consume of Environment<Bool>.Content(v65, v64);
  swift_release();
  KeyPath = swift_getKeyPath();
  v69 = 0x4034000000000000;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  v58 = v70;
  v25 = v71;
  v57 = v72;
  v26 = v73;
  v27 = v74;
  v56 = v75;
  v69 = 0x402C000000000000;
  ScaledMetric.init(wrappedValue:)();
  v28 = v70;
  v62 = v16;
  v29 = v71;
  LODWORD(v61) = v17;
  v30 = v72;
  v31 = v73;
  v32 = v74;
  v33 = v75;
  v69 = 0x4042800000000000;
  ScaledMetric.init(wrappedValue:)();
  v34 = v70;
  v35 = v72;
  v36 = v74;
  v37 = v75;
  v82 = 0;
  v81 = v25;
  v80 = v26;
  v79 = v29;
  v78 = v31;
  v77 = v71;
  v76 = v73;
  *(_QWORD *)v24 = KeyPath;
  *(_BYTE *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = v58;
  *(_BYTE *)(v24 + 24) = v25;
  *(_QWORD *)(v24 + 32) = v57;
  *(_BYTE *)(v24 + 40) = v26;
  *(double *)(v24 + 48) = v27;
  *(_BYTE *)(v24 + 56) = v56;
  *(_QWORD *)(v24 + 64) = v28;
  *(_BYTE *)(v24 + 72) = v29;
  v38 = v62;
  *(_QWORD *)(v24 + 80) = v30;
  v39 = v61;
  *(_BYTE *)(v24 + 88) = v31;
  v40 = v65;
  *(double *)(v24 + 96) = v32;
  *(_BYTE *)(v24 + 104) = v33;
  v41 = v64;
  *(_QWORD *)(v24 + 112) = v34;
  *(_BYTE *)(v24 + 120) = v77;
  *(_QWORD *)(v24 + 128) = v35;
  *(_BYTE *)(v24 + 136) = v76;
  *(double *)(v24 + 144) = v36;
  *(_BYTE *)(v24 + 152) = v37;
  *(_QWORD *)(v24 + 160) = v60;
  *(_BYTE *)(v24 + 168) = 0;
  outlined copy of Environment<Color?>.Content(v38, v39);
  outlined copy of Environment<Bool>.Content(v40, v41);
  if (v63)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    outlined copy of Environment<Color?>.Content(v38, v39);
    v63 = specialized Environment.wrappedValue.getter(v38, v39);
    outlined consume of Environment<Color?>.Content(v38, v39);
  }
  swift_retain();
  outlined consume of Environment<Color?>.Content(v38, v39);
  outlined consume of Environment<Bool>.Content(v40, v41);
  swift_release();
  v66 = swift_getKeyPath();
  v69 = 0x4034000000000000;
  ScaledMetric.init(wrappedValue:)();
  v65 = v70;
  v42 = v71;
  v64 = v72;
  v43 = v73;
  v44 = v74;
  LODWORD(v62) = v75;
  v69 = 0x402C000000000000;
  ScaledMetric.init(wrappedValue:)();
  v45 = v70;
  v46 = v71;
  v47 = v72;
  v48 = v73;
  v49 = v74;
  v50 = v75;
  v69 = 0x4042800000000000;
  ScaledMetric.init(wrappedValue:)();
  v51 = v70;
  v52 = v72;
  result = v74;
  v54 = v75;
  v68 = v71;
  v67 = v73;
  *(_QWORD *)(v24 + 176) = v66;
  *(_BYTE *)(v24 + 184) = 0;
  *(_QWORD *)(v24 + 192) = v65;
  *(_BYTE *)(v24 + 200) = v42;
  *(_QWORD *)(v24 + 208) = v64;
  *(_BYTE *)(v24 + 216) = v43;
  *(double *)(v24 + 224) = v44;
  *(_BYTE *)(v24 + 232) = v62;
  *(_QWORD *)(v24 + 240) = v45;
  *(_BYTE *)(v24 + 248) = v46;
  *(_QWORD *)(v24 + 256) = v47;
  *(_BYTE *)(v24 + 264) = v48;
  *(double *)(v24 + 272) = v49;
  *(_BYTE *)(v24 + 280) = v50;
  *(_QWORD *)(v24 + 288) = v51;
  *(_BYTE *)(v24 + 296) = v68;
  *(_QWORD *)(v24 + 304) = v52;
  *(_BYTE *)(v24 + 312) = v67;
  *(double *)(v24 + 320) = result;
  *(_BYTE *)(v24 + 328) = v54;
  *(_QWORD *)(v24 + 336) = v63;
  *(_BYTE *)(v24 + 344) = 1;
  return result;
}

uint64_t CircularProgressViewStyle.labels(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned __int8 v22;
  __int128 v23;
  unsigned __int8 v24;
  char v25;
  __int128 v26;
  unsigned __int8 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *v1;
  v4 = *((unsigned __int8 *)v1 + 8);
  v5 = v1[2];
  v6 = *((_BYTE *)v1 + 24);
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0)
    goto LABEL_4;
  outlined copy of Environment<Color?>.Content(v3, v4);
  outlined copy of Environment<Bool>.Content(v5, v6);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  v7 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  outlined consume of Environment<Color?>.Content(v3, v4);
  outlined consume of Environment<Bool>.Content(v5, v6);
  result = swift_release();
  if (v7 == 2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  else
  {
LABEL_4:
    static HorizontalAlignment.center.getter();
    static VerticalAlignment.center.getter();
    type metadata accessor for ProgressViewStyleConfiguration(0);
    static VerticalAlignment.center.getter();
    static Font.caption.getter();
    swift_getKeyPath();
    static Color.secondary.getter();
    type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, MEMORY[0x1E0CE74B8]);
    View.defaultForegroundColor(_:)();
    swift_release();
    swift_release();
    result = swift_release();
    v16 = v21;
    v9 = v22;
    v17 = v23;
    v18 = v26;
    v12 = v29;
    v13 = v30;
    v14 = v31;
    v15 = v32;
    v19 = 256;
    if (v25)
      v20 = 256;
    else
      v20 = 0;
    v10 = v20 | v24;
    if (!v28)
      v19 = 0;
    v11 = v19 | v27;
  }
  *(_OWORD *)a1 = v16;
  *(_QWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = v17;
  *(_QWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  return result;
}

uint64_t protocol witness for ProgressViewStyle.makeBody(configuration:) in conformance CircularProgressViewStyle(uint64_t a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[1];
  v11 = *v1;
  v12 = v7;
  v13 = *((_QWORD *)v1 + 4);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>();
  closure #1 in CircularProgressViewStyle.makeBody(configuration:)(a1, (uint64_t)&v6[*(int *)(v8 + 44)]);
  Spacing.init()();
  v10[0] = v10[1];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>, MEMORY[0x1E0CE74B8]);
  View.spacing(_:)();
  swift_bridgeObjectRelease();
  return outlined destroy of VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>((uint64_t)v6);
}

void type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(uint64_t a1)
{
  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(a1, &lazy cache variable for type metadata for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>, &lazy protocol witness table cache variable for type TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)> and conformance TupleView<A>);
}

void type metadata accessor for TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>, (uint64_t (*)(uint64_t))type metadata accessor for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>))
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>, type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>));
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
    a3(255);
    a4(255);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>(uint64_t a1)
{
  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(a1, &lazy cache variable for type metadata for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>, &lazy protocol witness table cache variable for type TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)> and conformance TupleView<A>);
}

void type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE7EB8]);
    v7 = type metadata accessor for VStack();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>))
  {
    type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>();
    type metadata accessor for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>));
  }
}

void type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.Label?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label? and conformance <A> A?, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, (uint64_t)&protocol witness table for ProgressViewStyleConfiguration.Label);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.Label?>);
  }
}

void type metadata accessor for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>();
    type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel? and conformance <A> A?, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, (uint64_t)&protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>);
  }
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>)
  {
    type metadata accessor for TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>(255);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>);
  }
}

uint64_t outlined destroy of VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size;
  if (!lazy protocol witness table cache variable for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularProgressViewStyle.Size, &type metadata for CircularProgressViewStyle.Size);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size);
  }
  return result;
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in CircularProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CircularProgressViewStyle()
{
  return &type metadata for CircularProgressViewStyle;
}

uint64_t storeEnumTagSinglePayload for CircularProgressViewStyle.Size(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18728EA50 + 4 * byte_187C1BBB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18728EA84 + 4 * byte_187C1BBB0[v4]))();
}

uint64_t sub_18728EA84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18728EA8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18728EA94);
  return result;
}

uint64_t sub_18728EAA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18728EAA8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18728EAAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18728EAB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CircularProgressViewStyle.Size()
{
  return &type metadata for CircularProgressViewStyle.Size;
}

uint64_t sub_18728EAD0()
{
  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(255);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>, MEMORY[0x1E0CE74B8]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10 != 1)
    return outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a10)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined retain of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(_QWORD *)(a1 + 144);
  v10 = *(_QWORD *)(a1 + 152);
  v11 = *(_QWORD *)(a1 + 160);
  v14 = *(_OWORD *)(a1 + 184);
  v15 = *(_OWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 200);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  a3(v4, v5, v6, v7, v8, v9, v10, v11, v15, *((_QWORD *)&v15 + 1), v14, *((_QWORD *)&v14 + 1), v12);
  return a1;
}

uint64_t outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10 != 1)
    return outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = a10;
  if (a10)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of ProgressViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void Toggle<>.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v18 = *(_BYTE *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v7 = *(void **)(a1 + 72);
  if (v7)
    v9 = *(_QWORD *)(a1 + 48);
  else
    v9 = 0;
  if (v7)
    v10 = *(_QWORD *)(a1 + 56);
  else
    v10 = 0;
  v14 = v10;
  if (v7)
    v11 = *(_QWORD *)(a1 + 64) & 1;
  else
    v11 = 0;
  if (v7)
    v12 = *(_QWORD *)(a1 + 80);
  else
    v12 = 0;
  v17 = v12;
  if (v7)
    v13 = *(_QWORD *)(a1 + 88);
  else
    v13 = 0;
  v15 = v9;
  v16 = v13;
  swift_retain_n();
  swift_retain_n();
  outlined copy of ToggleStyleConfiguration.Effect(v6, v5, v8, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v6, v5, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v15, v14, v11, v7);
  swift_release();
  swift_release();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v16;
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v15, v14, v11, v7);
}

uint64_t Toggle.init(isOn:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void (*a4)(void)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;

  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  *(_BYTE *)(v14 + 48) = a3;
  v19 = v14;
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for [Binding<Bool>], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v16 = v15;
  v17 = lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A]();
  swift_retain();
  swift_retain();
  Toggle.init<A>(toggledOn:label:)((uint64_t)&v19, a4, a5, v16, a6, v17, a7);
  swift_release();
  return swift_release();
}

uint64_t Toggle.init<A>(toggledOn:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v36 = a6;
  v13 = *(_QWORD *)(a4 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v16;
  v18 = *(int *)(type metadata accessor for Toggle(0, v17, v16, v17) + 40);
  v35 = a7;
  v19 = (_OWORD *)((char *)a7 + v18);
  v19[1] = 0u;
  v19[2] = 0u;
  *v19 = 0u;
  a2();
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v20 = a1;
  v33(v15, a1, a4);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v34 = v13;
  v22 = (v21 + 64) & ~v21;
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = 0;
  *((_QWORD *)v23 + 4) = a3;
  *((_QWORD *)v23 + 5) = a4;
  v24 = v36;
  *((_QWORD *)v23 + 6) = a5;
  *((_QWORD *)v23 + 7) = v24;
  v25 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v25(&v23[v22], v15, a4);
  v33(v15, v20, a4);
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 3) = 0;
  *((_QWORD *)v26 + 4) = a3;
  *((_QWORD *)v26 + 5) = a4;
  v27 = v36;
  *((_QWORD *)v26 + 6) = v32;
  *((_QWORD *)v26 + 7) = v27;
  v25(&v26[v22], v15, a4);
  Binding.init(get:set:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v20, a4);
  v29 = v38;
  v30 = v39;
  v31 = v35;
  *v35 = v37;
  v31[1] = v29;
  *((_BYTE *)v31 + 16) = v30;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A])
  {
    type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(255, (unint64_t *)&lazy cache variable for type metadata for [Binding<Bool>], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A]);
  }
  return result;
}

uint64_t Toggle.init<A>(isOn:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v14 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a1, v18, v15);
  Toggle.init<A>(toggledOn:label:)((uint64_t)v17, a2, a3, a4, a5, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8), a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
}

uint64_t Toggle.init<A>(sources:isOn:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;

  v26 = a8;
  v27 = a7;
  v25 = a5;
  v32 = a3;
  v33 = a4;
  v28 = a1;
  v31 = a9;
  v30 = *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8);
  v12 = type metadata accessor for LazySequence();
  v29 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v25 - v14;
  v16 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v25 - v18;
  Sequence.enumerated()();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a5;
  v20[3] = a6;
  v21 = v26;
  v22 = v27;
  v20[4] = v27;
  v20[5] = v21;
  v20[6] = a2;
  swift_retain();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v12);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v12);
  v34 = v30;
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC860], v16, &v34);
  Toggle.init<A>(toggledOn:label:)((uint64_t)v19, v32, v25, v16, v22, v23, v31);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(v28, a6);
}

uint64_t sub_18728F604()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Toggle.init<A>(sources:isOn:label:)()
{
  return swift_getAtKeyPath();
}

uint64_t closure #2 in Toggle.init<A>(toggledOn:label:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  _BYTE v20[16];
  uint64_t v21;

  v9 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v17 = &v20[-v16];
  v18 = *a1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v9 + 16))(v11, a4, a6, v15);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  while (v21)
  {
    v20[8] = v18 == 0;
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    swift_release_n();
    dispatch thunk of IteratorProtocol.next()();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v17, AssociatedTypeWitness);
}

void Toggle.body.getter()
{
  lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_18728F83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v12 = type metadata accessor for ModifiedContent();
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 - 248) = v12;
  *(_QWORD *)(v11 - 240) = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  *(_QWORD *)(v11 - 216) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v11 - 256) = (char *)&a9 - v18;
  *(_QWORD *)(v11 - 288) = v9;
  v20 = *v9;
  v19 = v9[1];
  v21 = *((unsigned __int8 *)v9 + 16);
  v22 = (uint64_t *)((char *)v9 + *(int *)(v10 + 40));
  v23 = *v22;
  v24 = v22[1];
  *(_QWORD *)(v11 - 304) = *v22;
  v25 = v22[2];
  v26 = (void *)v22[3];
  v28 = v22[4];
  v27 = v22[5];
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v23, v24, v25, v26);
  lazy protocol witness table accessor for type ToggleStateBool and conformance ToggleStateBool();
  swift_retain();
  swift_retain();
  *(_QWORD *)(v11 - 224) = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *(_QWORD *)(v11 - 192) = v20;
  *(_QWORD *)(v11 - 184) = v19;
  *(_BYTE *)(v11 - 176) = v21;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v30 = v29;
  swift_retain();
  MEMORY[0x18D75B9C8](v30);
  swift_release();
  v31 = swift_release();
  *(_QWORD *)(v11 - 296) = &a9;
  if (v26)
    v33 = *(_QWORD *)(v11 - 304);
  else
    v33 = 0;
  *(_QWORD *)(v11 - 320) = v33;
  if (v26)
  {
    v34 = v25 & 1;
  }
  else
  {
    v24 = 0;
    v34 = 0;
  }
  *(_QWORD *)(v11 - 312) = v34;
  if (v26)
    v35 = v28;
  else
    v35 = 0;
  if (v26)
    v36 = v27;
  else
    v36 = 0;
  *(_BYTE *)(v11 - 176) = v21 == 0;
  v37 = *(unsigned __int8 *)(v11 - 89);
  v38 = *(_QWORD *)(v11 - 224);
  *(_QWORD *)(v11 - 192) = v20;
  *(_QWORD *)(v11 - 184) = v38;
  *(_QWORD *)(v11 - 168) = v20;
  *(_QWORD *)(v11 - 160) = v19;
  *(_BYTE *)(v11 - 152) = v21;
  *(_BYTE *)(v11 - 151) = v37 == 2;
  *(_QWORD *)(v11 - 144) = v33;
  *(_QWORD *)(v11 - 136) = v24;
  *(_QWORD *)(v11 - 304) = v24;
  *(_QWORD *)(v11 - 128) = v34;
  *(_QWORD *)(v11 - 120) = v26;
  *(_QWORD *)(v11 - 112) = v35;
  *(_QWORD *)(v11 - 104) = v36;
  MEMORY[0x1E0C80A78](v31, v32);
  v39 = *(_QWORD *)(v11 - 280);
  *(&a9 - 4) = *(_QWORD *)(v11 - 272);
  *(&a9 - 3) = v39;
  v40 = *(_QWORD *)(v11 - 288);
  swift_retain_n();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(*(_QWORD *)(v11 - 320), v24, *(_QWORD *)(v11 - 312), v26);
  *(_QWORD *)(v11 - 288) = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
  v40 = v39;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)partial apply for closure #1 in Toggle.body.getter);
}

uint64_t sub_18728FAD0()
{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  swift_release();
  swift_release();
  swift_release_n();
  outlined consume of ToggleStyleConfiguration.Effect(v0, *(_QWORD *)(v3 - 304), v1, v2);
  v4 = *(_QWORD *)(v3 - 144);
  v5 = *(_QWORD *)(v3 - 136);
  v6 = *(_QWORD *)(v3 - 128);
  v7 = *(void **)(v3 - 120);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v4, v5, v6, v7);
  *(_QWORD *)(v3 - 208) = *(_QWORD *)(v3 - 288);
  *(_QWORD *)(v3 - 200) = &protocol witness table for StaticSourceWriter<A, B>;
  v8 = *(_QWORD *)(v3 - 248);
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v3 - 208);
  v10 = *(_QWORD *)(v3 - 256);
  v11 = *(_QWORD *)(v3 - 216);
  static ViewBuilder.buildExpression<A>(_:)(v11, v8, v9);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 240) + 8);
  v12(v11, v8);
  static ViewBuilder.buildBlock<A>(_:)(v10, v8, *(_QWORD *)(v3 - 232));
  return v12(v10, v8);
}

uint64_t closure #1 in Toggle.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Toggle(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 36), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t partial apply for closure #1 in Toggle.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Toggle.body.getter(v1[4], v1[2], v1[3], a1);
}

double Toggle<>.init(_:isOn:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a2;
  *(_BYTE *)(v8 + 48) = a3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = Text.init(_:tableName:bundle:comment:)();
  v18 = v9;
  v11 = v10;
  v13 = v12;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v8;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v8;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v20;
  *(_BYTE *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 24) = v17;
  *(_QWORD *)(a4 + 32) = v11;
  *(_BYTE *)(a4 + 40) = v13 & 1;
  *(_QWORD *)(a4 + 48) = v18;
  result = 0.0;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  return result;
}

__n128 Toggle<>.init<A>(_:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __n128 result;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];
  char v27;
  _OWORD v28[4];

  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v12 + 32) = a2;
  *(_QWORD *)(v12 + 40) = a3;
  *(_BYTE *)(v12 + 48) = a4;
  memset((char *)v28 + 8, 0, 48);
  swift_retain();
  swift_retain();
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v26);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v12;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v12;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_release();
  swift_release();
  v15 = v26[0];
  v16 = v26[1];
  v17 = v27;
  v21 = v28[1];
  v22 = v28[0];
  v20 = (__n128)v28[2];
  v18 = *(_QWORD *)&v28[3];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  *(_QWORD *)a6 = v23;
  *(_QWORD *)(a6 + 8) = v24;
  *(_BYTE *)(a6 + 16) = v25;
  *(_QWORD *)(a6 + 24) = v15;
  *(_QWORD *)(a6 + 32) = v16;
  *(_BYTE *)(a6 + 40) = v17;
  *(_OWORD *)(a6 + 48) = v22;
  *(_OWORD *)(a6 + 64) = v21;
  result = v20;
  *(__n128 *)(a6 + 80) = v20;
  *(_QWORD *)(a6 + 96) = v18;
  return result;
}

__n128 Toggle<>.init<A>(_:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  __n128 result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  __n128 v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v16 = *(_QWORD *)(a6 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = &v30[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v16 + 16))(v19, v20, v21, v17);
  v31 = a1;
  v32 = a2;
  v33 = a3;
  v34 = a4;
  Toggle.init<A>(isOn:label:)((uint64_t)v19, (void (*)(void))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), MEMORY[0x1E0CE6CF8], a6, MEMORY[0x1E0CE6C58], a7, v35);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v35[1];
  v23 = v36;
  v24 = v38;
  v25 = v39;
  result = v37;
  v27 = v40;
  v28 = v41;
  v29 = v42;
  *(_QWORD *)a8 = v35[0];
  *(_QWORD *)(a8 + 8) = v22;
  *(_BYTE *)(a8 + 16) = v23;
  *(__n128 *)(a8 + 24) = result;
  *(_BYTE *)(a8 + 40) = v24;
  *(_QWORD *)(a8 + 48) = v25;
  *(_OWORD *)(a8 + 56) = v27;
  *(_OWORD *)(a8 + 72) = v28;
  *(_OWORD *)(a8 + 88) = v29;
  return result;
}

__n128 Toggle<>.init<A>(_:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __n128 result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD v38[2];
  char v39;
  __n128 v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v32 = a8;
  v17 = *(_QWORD *)(a7 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, v22, v18);
  v34 = a1;
  v35 = a2;
  v36 = a3;
  v37 = a4;
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v20, a6, (void (*)(void))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v33, MEMORY[0x1E0CE6CF8], a7, MEMORY[0x1E0CE6C58], v32, v38);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v38[1];
  v24 = v39;
  v25 = v41;
  v26 = v42;
  result = v40;
  v28 = v43;
  v29 = v44;
  v30 = v45;
  *(_QWORD *)a9 = v38[0];
  *(_QWORD *)(a9 + 8) = v23;
  *(_BYTE *)(a9 + 16) = v24;
  *(__n128 *)(a9 + 24) = result;
  *(_BYTE *)(a9 + 40) = v25;
  *(_QWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 56) = v28;
  *(_OWORD *)(a9 + 72) = v29;
  *(_OWORD *)(a9 + 88) = v30;
  return result;
}

__n128 Toggle<>.init<A, B>(_:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  char v33;
  __n128 v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v14 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, double))(v14 + 16))(v17, v15);
  v27 = a3;
  v28 = a4;
  v29 = a5;
  v30 = a6;
  v31 = a1;
  Toggle.init<A>(isOn:label:)((uint64_t)v17, (void (*)(void))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CE6C58], a6, v32);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  v18 = v32[1];
  v19 = v33;
  v20 = v35;
  v21 = v36;
  result = v34;
  v23 = v37;
  v24 = v38;
  v25 = v39;
  *(_QWORD *)a7 = v32[0];
  *(_QWORD *)(a7 + 8) = v18;
  *(_BYTE *)(a7 + 16) = v19;
  *(__n128 *)(a7 + 24) = result;
  *(_BYTE *)(a7 + 40) = v20;
  *(_QWORD *)(a7 + 48) = v21;
  *(_OWORD *)(a7 + 56) = v23;
  *(_OWORD *)(a7 + 72) = v24;
  *(_OWORD *)(a7 + 88) = v25;
  return result;
}

__n128 Toggle<>.init<A, B>(_:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __n128 result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  __n128 v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v16 = *(_QWORD *)(a5 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = &v28[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, double))(v16 + 16))(v19, v17);
  v29 = a4;
  v30 = a5;
  v31 = a6;
  v32 = a7;
  v33 = a1;
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v19, a3, (void (*)(void))partial apply for closure #1 in TextField<>.init<A, B>(_:value:format:prompt:), (uint64_t)v28, MEMORY[0x1E0CE6CF8], a5, MEMORY[0x1E0CE6C58], a7, v34);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  v20 = v34[1];
  v21 = v35;
  v22 = v37;
  v23 = v38;
  result = v36;
  v25 = v39;
  v26 = v40;
  v27 = v41;
  *(_QWORD *)a8 = v34[0];
  *(_QWORD *)(a8 + 8) = v20;
  *(_BYTE *)(a8 + 16) = v21;
  *(__n128 *)(a8 + 24) = result;
  *(_BYTE *)(a8 + 40) = v22;
  *(_QWORD *)(a8 + 48) = v23;
  *(_OWORD *)(a8 + 56) = v25;
  *(_OWORD *)(a8 + 72) = v26;
  *(_OWORD *)(a8 + 88) = v27;
  return result;
}

double Toggle<>.init(_:image:isOn:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double result;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v12 = a5;
  v43 = a5;
  v37[1] = a2;
  v37[2] = a4;
  LODWORD(v41) = a3;
  v40 = a1;
  v14 = type metadata accessor for ImageResource();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v37 - v21;
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_187BF9830;
  v42 = a6;
  *(_QWORD *)(v23 + 32) = a6;
  *(_QWORD *)(v23 + 40) = a7;
  *(_BYTE *)(v23 + 48) = a8;
  v24 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v24(v22, v12, v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = Text.init(_:tableName:bundle:comment:)();
  v40 = v26;
  v41 = v25;
  v39 = v27;
  LOBYTE(v44) = v28 & 1;
  v24(v18, v22, v14);
  v38 = Image.init(_:)();
  v29 = *(void (**)(char *, uint64_t))(v15 + 8);
  v29(v22, v14);
  LOBYTE(v15) = v44;
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = v23;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = v23;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v32 = v44;
  v33 = v45;
  LOBYTE(v12) = v46;
  v29(v43, v14);
  *(_QWORD *)a9 = v32;
  *(_QWORD *)(a9 + 8) = v33;
  *(_BYTE *)(a9 + 16) = (_BYTE)v12;
  v34 = v40;
  *(_QWORD *)(a9 + 24) = v41;
  *(_QWORD *)(a9 + 32) = v34;
  *(_BYTE *)(a9 + 40) = v15;
  v35 = v38;
  *(_QWORD *)(a9 + 48) = v39;
  *(_QWORD *)(a9 + 56) = v35;
  result = 0.0;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  *(_OWORD *)(a9 + 96) = 0u;
  return result;
}

__n128 Toggle<>.init<A>(_:image:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __n128 result;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;

  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = a4;
  *(_BYTE *)(v14 + 48) = a5;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  swift_retain();
  swift_retain();
  closure #1 in Toggle<>.init<A>(_:image:isOn:)(a1, a2, a6, (uint64_t)v31);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v14;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v14;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_release();
  swift_release();
  v17 = v31[0];
  v18 = v31[1];
  v19 = v32;
  v24 = v35;
  v25 = v34;
  v20 = v36;
  v21 = type metadata accessor for ImageResource();
  v23 = v33;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a2, v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
  *(_QWORD *)a7 = v28;
  *(_QWORD *)(a7 + 8) = v29;
  *(_BYTE *)(a7 + 16) = v30;
  *(_QWORD *)(a7 + 24) = v17;
  *(_QWORD *)(a7 + 32) = v18;
  *(_BYTE *)(a7 + 40) = v19;
  *(_OWORD *)(a7 + 48) = v23;
  *(_OWORD *)(a7 + 64) = v25;
  result = v24;
  *(__n128 *)(a7 + 80) = v24;
  *(_OWORD *)(a7 + 96) = v20;
  return result;
}

__n128 closure #1 in Toggle<>.init<A>(_:image:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 result;
  __int128 v21;
  char v22;
  __n128 v23;

  v8 = type metadata accessor for ImageResource();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, a1, a3, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v17, (uint64_t)v12, a3, (uint64_t)&v21);
  v19 = v22;
  result = v23;
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = v19;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

__n128 Toggle<>.init<A>(_:image:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  __n128 result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  __n128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v36 = a7;
  v35 = a10;
  v18 = *(_QWORD *)(a8 - 8);
  v19 = MEMORY[0x1E0C80A78](a1, a2);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v22, v23, v19);
  v38 = a1;
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v24 = type metadata accessor for Label<Text, Image>();
  v25 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v21, v36, (void (*)(void))partial apply for closure #1 in Toggle<>.init<A>(_:image:sources:isOn:), (uint64_t)v37, v24, a8, v25, v35, v43);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a6, a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a5, v26);
  v27 = v43[1];
  v28 = v44;
  v29 = v46;
  result = v45;
  v31 = v47;
  v32 = v48;
  v33 = v49;
  v34 = v50;
  *(_QWORD *)a9 = v43[0];
  *(_QWORD *)(a9 + 8) = v27;
  *(_BYTE *)(a9 + 16) = v28;
  *(__n128 *)(a9 + 24) = result;
  *(_BYTE *)(a9 + 40) = v29;
  *(_OWORD *)(a9 + 48) = v31;
  *(_OWORD *)(a9 + 64) = v32;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  return result;
}

uint64_t closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)@<X0>(int a1@<W2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, double);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  LODWORD(v25) = a1;
  v5 = type metadata accessor for ImageResource();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v24 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v15((char *)&v24 - v13, a2, v5, v12);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v25 = Text.init(_:tableName:bundle:comment:)();
  v17 = v16;
  v19 = v18;
  v26 = v20 & 1;
  ((void (*)(char *, char *, uint64_t))v15)(v9, v14, v5);
  v21 = Image.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  v23 = v26;
  *(_QWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 16) = v23;
  *(_QWORD *)(a3 + 24) = v19;
  *(_QWORD *)(a3 + 32) = v21;
  return result;
}

__n128 Toggle<>.init<A, B>(_:image:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  __n128 result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  __n128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v35 = a4;
  v17 = *(_QWORD *)(a6 - 8);
  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, v22, v18);
  v37 = a5;
  v38 = a6;
  v39 = a7;
  v40 = a8;
  v41 = a1;
  v42 = a2;
  v23 = type metadata accessor for Label<Text, Image>();
  v24 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v20, v35, (void (*)(void))partial apply for closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:), (uint64_t)v36, v23, a6, v24, a8, v43);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, a6);
  v25 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a2, v25);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  v26 = v43[1];
  v27 = v44;
  v28 = v46;
  result = v45;
  v30 = v47;
  v31 = v48;
  v32 = v49;
  v33 = v50;
  *(_QWORD *)a9 = v43[0];
  *(_QWORD *)(a9 + 8) = v26;
  *(_BYTE *)(a9 + 16) = v27;
  *(__n128 *)(a9 + 24) = result;
  *(_BYTE *)(a9 + 40) = v28;
  *(_OWORD *)(a9 + 48) = v30;
  *(_OWORD *)(a9 + 64) = v31;
  *(_OWORD *)(a9 + 80) = v32;
  *(_OWORD *)(a9 + 96) = v33;
  return result;
}

__n128 closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  __n128 result;
  __int128 v21;
  char v22;
  __n128 v23;

  v8 = type metadata accessor for ImageResource();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, a1, a3, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v17, (uint64_t)v12, a3, (uint64_t)&v21);
  v19 = v22;
  result = v23;
  *(_OWORD *)a4 = v21;
  *(_BYTE *)(a4 + 16) = v19;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t Toggle.init(isOn:lnAction:label:)@<X0>(char a1@<W0>, void *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return Toggle.init(isOn:lnAction:perform:label:)(a1, a2, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a3, a4, a5, a6);
}

uint64_t Toggle.init(isOn:lnAction:perform:label:)@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t KeyPath;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  id v21;

  v11 = a8 + *(int *)(type metadata accessor for Toggle(0, a6, a7, a4) + 40);
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)v11 = 0u;
  KeyPath = swift_getKeyPath();
  v13 = a2;
  v14 = swift_retain();
  a5(v14);
  v15 = *(_QWORD *)v11;
  v16 = *(_QWORD *)(v11 + 8);
  v18 = *(_QWORD *)(v11 + 16);
  v17 = *(void **)(v11 + 24);
  v21 = v13;
  swift_retain();
  swift_retain();
  outlined consume of ToggleStyleConfiguration.Effect(v15, v16, v18, v17);
  *(_QWORD *)v11 = KeyPath;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v13;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  type metadata accessor for LocationBox<AppIntentExecutingLocation<ToggleState>>();
  swift_allocObject();
  v19 = LocationBox.init(_:)();

  result = swift_release();
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = v19;
  *(_BYTE *)(a8 + 16) = (a1 & 1) == 0;
  return result;
}

uint64_t partial apply for specialized closure #1 in Toggle.init<A>(toggledOn:label:)()
{
  return specialized closure #1 in Toggle.init<A>(toggledOn:label:)();
}

uint64_t partial apply for specialized closure #2 in Toggle.init<A>(toggledOn:label:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return specialized closure #2 in Toggle.init<A>(toggledOn:label:)(*a1, *(_QWORD *)(v1 + 32));
}

uint64_t specialized closure #1 in Toggle.init<A>(toggledOn:label:)()
{
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for [Binding<Bool>], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A]();
  return static ToggleState.stateFor<A, B>(item:in:)();
}

uint64_t partial apply for closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)(*(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 48), a1);
}

uint64_t type metadata accessor for Label<Text, Image>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Label<Text, Image>;
  if (!lazy cache variable for type metadata for Label<Text, Image>)
    type metadata accessor for Label();
  return result;
}

unint64_t lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>;
  if (!lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>)
  {
    v1 = type metadata accessor for Label<Text, Image>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Label<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>);
  }
  return result;
}

double partial apply for closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  double result;

  *(_QWORD *)&result = closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:)(v1[6], v1[7], v1[2], a1).n128_u64[0];
  return result;
}

void type metadata accessor for LocationBox<AppIntentExecutingLocation<ToggleState>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LocationBox<AppIntentExecutingLocation<ToggleState>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AppIntentExecutingLocation<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AppIntentExecutingLocation);
    lazy protocol witness table accessor for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>();
    v0 = type metadata accessor for LocationBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<AppIntentExecutingLocation<ToggleState>>);
  }
}

unint64_t lazy protocol witness table accessor for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>;
  if (!lazy protocol witness table cache variable for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AppIntentExecutingLocation<ToggleState>, MEMORY[0x1E0CE12B8], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for AppIntentExecutingLocation);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AppIntentExecutingLocation<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Toggle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for Toggle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v12 = (a1 + v6 + 17) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
    v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8;
    v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v16 + 24) < 0xFFFFFFFFuLL)
    {
      v23 = *(_OWORD *)v16;
      v24 = *(_OWORD *)(v16 + 32);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v15 + 32) = v24;
      *(_OWORD *)v15 = v23;
      return a1;
    }
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v16, v18, v19);
    *(_QWORD *)v15 = v17;
    *(_QWORD *)(v15 + 8) = v18;
    *(_BYTE *)(v15 + 16) = v19;
    v20 = *(void **)(v16 + 24);
    *(_QWORD *)(v15 + 24) = v20;
    v21 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
    *(_QWORD *)(v15 + 40) = v21;
    v22 = v20;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for Toggle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;

  swift_release();
  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  result = (*(uint64_t (**)(unint64_t))(v4 + 8))(v5);
  v7 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  __int128 v21;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (v11 + v8) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    v20 = *(_OWORD *)v13;
    v21 = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
    *(_OWORD *)(v12 + 32) = v21;
    *(_OWORD *)v12 = v20;
  }
  else
  {
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_BYTE *)(v13 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v13, v15, v16);
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v15;
    *(_BYTE *)(v12 + 16) = v16;
    v17 = *(void **)(v13 + 24);
    *(_QWORD *)(v12 + 24) = v17;
    v18 = *(_QWORD *)(v13 + 40);
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    *(_QWORD *)(v12 + 40) = v18;
    v19 = v17;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(v12 + 24);
  if (*(_QWORD *)(v11 + 24) < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      v24 = *(_QWORD *)v12;
      v25 = *(_QWORD *)(v12 + 8);
      v26 = *(_BYTE *)(v12 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v12, v25, v26);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v25;
      *(_BYTE *)(v11 + 16) = v26;
      v27 = *(void **)(v12 + 24);
      *(_QWORD *)(v11 + 24) = v27;
      v28 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v11 + 40) = v28;
      v29 = v27;
      swift_retain();
      return a1;
    }
LABEL_7:
    v30 = *(_OWORD *)v12;
    v31 = *(_OWORD *)(v12 + 32);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
    *(_OWORD *)(v11 + 32) = v31;
    *(_OWORD *)v11 = v30;
    return a1;
  }
  if (v13 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));

    swift_release();
    goto LABEL_7;
  }
  v14 = *(_QWORD *)v12;
  v15 = *(_QWORD *)(v12 + 8);
  v16 = *(_BYTE *)(v12 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v12, v15, v16);
  v17 = *(_QWORD *)v11;
  v18 = *(_QWORD *)(v11 + 8);
  v19 = *(_BYTE *)(v11 + 16);
  *(_QWORD *)v11 = v14;
  *(_QWORD *)(v11 + 8) = v15;
  *(_BYTE *)(v11 + 16) = v16;
  outlined consume of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
  v20 = *(void **)(v12 + 24);
  v21 = *(void **)(v11 + 24);
  *(_QWORD *)(v11 + 24) = v20;
  v22 = v20;

  v23 = *(_QWORD *)(v12 + 40);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
  *(_QWORD *)(v11 + 40) = v23;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 17 + a1) & ~v5;
  v7 = (v5 + 17 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_OWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  v12 = v10[1];
  v11 = v10[2];
  *v9 = *v10;
  v9[1] = v12;
  v9[2] = v11;
  return a1;
}

uint64_t assignWithTake for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v11 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v12 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));

    swift_release();
LABEL_5:
    v18 = *(_OWORD *)v12;
    v19 = *(_OWORD *)(v12 + 32);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
    *(_OWORD *)(v11 + 32) = v19;
    *(_OWORD *)v11 = v18;
    return a1;
  }
  v13 = *(_BYTE *)(v12 + 16);
  v14 = *(_QWORD *)v11;
  v15 = *(_QWORD *)(v11 + 8);
  v16 = *(_BYTE *)(v11 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = v13;
  outlined consume of Environment<AppIntentExecutor?>.Content(v14, v15, v16);
  v17 = *(void **)(v11 + 24);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);

  *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Toggle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 48) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187291B58 + 4 * byte_187C1BD30[v10]))();
  }
}

void storeEnumTagSinglePayload for Toggle(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 17) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187291CE0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187291D50);
}

void sub_187291CE8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187291CF0);
  JUMPOUT(0x187291D50);
}

void sub_187291D04()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187291D50);
}

void sub_187291D0C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187291D50);
}

void sub_187291D14(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x187291D20);
    if (a2 < 0)
      JUMPOUT(0x187291D44);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x187291D50);
}

void sub_187291D68()
{
  lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187291D9C()
{
  uint64_t v0;
  _QWORD v2[10];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = lazy protocol witness table accessor for type ResolvedToggleStyle and conformance ResolvedToggleStyle();
  v2[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

uint64_t specialized closure #2 in Toggle.init<A>(toggledOn:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = a2 + 40;
    do
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      v4 += 24;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in Toggle.init<A>(toggledOn:label:)()
{
  return static ToggleState.stateFor<A, B>(item:in:)();
}

uint64_t objectdestroy_31Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Toggle.init<A>(toggledOn:label:)(unsigned __int8 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[5];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #2 in Toggle.init<A>(toggledOn:label:)(a1, v1[2], v1[3], (uint64_t)v1 + ((v3 + 64) & ~v3), v1[4], v2);
}

void TableColumn<>.init<A>(_:value:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v30 = a9;
  v31 = a7;
  v26 = a2;
  v27 = a6;
  v29 = a4;
  v28 = a3;
  v25 = a1;
  v13 = (uint64_t *)(*a5 + *MEMORY[0x1E0DEE2A8]);
  v14 = *v13;
  v15 = type metadata accessor for KeyPathComparator();
  v16 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v24 - v18;
  v20 = v13[1];
  swift_retain();
  KeyPathComparator.init<A>(_:order:)();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v19, 0, 1, v15);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v14;
  v21[3] = a8;
  v21[4] = v20;
  v21[5] = a10;
  v21[6] = a11;
  v21[7] = a12;
  v22 = v26;
  v21[8] = v27;
  v21[9] = v31;
  v33 = v25;
  v34 = v22;
  v35 = v28;
  v36 = v29;
  swift_retain();
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v15);
  TableColumn.init(comparator:content:label:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (uint64_t)v21, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v32, v14, v15, a8, MEMORY[0x1E0CE6CF8], a10, v23, a11, MEMORY[0x1E0CE6C58]);
}

{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[16];
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v28 = a8;
  v29 = a1;
  v34 = a7;
  v35 = a4;
  v31 = a2;
  v32 = a6;
  v33 = a3;
  v36 = a9;
  v30 = a11;
  v14 = (uint64_t *)(*a5 + *MEMORY[0x1E0DEE2A8]);
  v27 = *v14;
  v15 = v27;
  v16 = type metadata accessor for KeyPathComparator();
  v17 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - v19;
  v21 = v14[1];
  swift_retain();
  KeyPathComparator.init<A>(_:order:)();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v20, 0, 1, v16);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v15;
  v22[3] = a8;
  v22[4] = v21;
  v22[5] = a10;
  v23 = v30;
  v22[6] = v30;
  v22[7] = a12;
  v24 = v34;
  v25 = v35;
  v22[8] = v32;
  v22[9] = v24;
  v38 = a1;
  v39 = v31;
  v40 = v33 & 1;
  v41 = v25;
  swift_retain();
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v16);
  TableColumn.init(comparator:content:label:)((uint64_t)v20, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (uint64_t)v22, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v37, v27, v16, v28, MEMORY[0x1E0CE6CF8], a10, v26, v23, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_1872920FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_187292140()
{
  swift_release();
  return swift_deallocObject();
}

void TableColumn<>.init<A, B>(_:value:content:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v32 = a8;
  v33 = a4;
  v30 = a7;
  v31 = a3;
  v34 = a1;
  v35 = a9;
  v13 = (uint64_t *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  v14 = *v13;
  v15 = type metadata accessor for KeyPathComparator();
  v16 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v28 - v18;
  v20 = v13[1];
  swift_retain();
  KeyPathComparator.init<A>(_:order:)();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v19, 0, 1, v15);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v14;
  v21[3] = a5;
  v29 = a5;
  v21[4] = a6;
  v21[5] = v20;
  v22 = v30;
  v23 = v31;
  v24 = v32;
  v21[6] = v30;
  v21[7] = v24;
  v21[8] = a10;
  v21[9] = a11;
  v21[10] = v23;
  v21[11] = v33;
  v37 = v14;
  v38 = a5;
  v39 = a6;
  v40 = v20;
  v41 = v22;
  v42 = v24;
  v25 = v22;
  v26 = v24;
  v43 = a10;
  v44 = a11;
  v45 = v34;
  swift_retain();
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v15);
  TableColumn.init(comparator:content:label:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:content:), (uint64_t)v21, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A, B>(_:value:content:), (uint64_t)v36, v14, v15, v29, MEMORY[0x1E0CE6CF8], v25, v27, v26, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_187292308()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t closure #1 in TableColumn<>.init<A, B>(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(double);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v18 - v13;
  v15(v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, a3, a5);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a3);
}

uint64_t sub_187292428()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init<A, B>(_:value:content:)(a1, v2[10], v2[3], a2, v2[7]);
}

uint64_t closure #2 in TableColumn<>.init<A, B>(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A, B>(_:value:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in TableColumn<>.init<A, B>(_:value:content:)(*(_QWORD *)(v1 + 80), a1);
}

uint64_t sub_1872926E4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(_QWORD *)(v2 - 192), v1, v0);
  return swift_bridgeObjectRelease();
}

void TableColumn<>.init<A, B>(_:value:comparator:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v47 = a9;
  v48 = a8;
  v43 = a2;
  v44 = a7;
  v46 = a4;
  v45 = a3;
  v39 = a13;
  v40 = a6;
  v37 = a10;
  v38 = a12;
  v15 = *a5;
  v41 = *(_QWORD *)(a11 - 8);
  v17 = v41;
  v42 = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v15 + *MEMORY[0x1E0DEE2A8]);
  v21 = type metadata accessor for KeyPathComparator();
  v22 = type metadata accessor for Optional();
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)v36 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a6, a11, v24);
  v27 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v15 + 8);
  v36[1] = a5;
  v28 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v28, (uint64_t)v19, v20, v27, a11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v26, 0, 1, v21);
  v29 = (_QWORD *)swift_allocObject();
  v31 = v37;
  v30 = v38;
  v29[2] = v20;
  v29[3] = v31;
  v29[4] = v27;
  v29[5] = a11;
  v32 = v39;
  v29[6] = v30;
  v29[7] = v32;
  v34 = v43;
  v33 = v44;
  v29[8] = a14;
  v29[9] = v33;
  v29[10] = v48;
  v50 = v42;
  v51 = v34;
  v52 = v45;
  v53 = v46;
  swift_retain();
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v21);
  TableColumn.init(comparator:content:label:)((uint64_t)v26, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:comparator:content:), (uint64_t)v29, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v49, v20, v21, v31, MEMORY[0x1E0CE6CF8], v30, v35, v32, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_18729292C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 208) + 8))(*(_QWORD *)(v1 - 216), v0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v11;

  v7 = *(_QWORD *)(a5 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  KeyPathComparator.init<A, B>(_:comparator:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a2, a5);
}

void TableColumn<>.init<A, B, C>(_:value:comparator:content:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v41 = a7;
  v42 = a4;
  v47 = a9;
  v48 = a6;
  v43 = a5;
  v44 = a3;
  v46 = a1;
  v40 = a11;
  v38 = a10;
  v39 = a12;
  v15 = *a2;
  v45 = *(_QWORD *)(a8 - 8);
  v17 = v45;
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v15 + *MEMORY[0x1E0DEE2A8]);
  v21 = type metadata accessor for KeyPathComparator();
  v22 = type metadata accessor for Optional();
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v37 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a3, a8, v24);
  v27 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v15 + 8);
  v37 = a2;
  v28 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v28, (uint64_t)v19, v20, v27, a8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v26, 0, 1, v21);
  v29 = (_QWORD *)swift_allocObject();
  v30 = v48;
  v29[2] = v20;
  v29[3] = v30;
  v32 = v41;
  v31 = v42;
  v29[4] = v41;
  v29[5] = v27;
  v33 = v38;
  v29[6] = a8;
  v29[7] = v33;
  v34 = v40;
  v35 = v39;
  v29[8] = v40;
  v29[9] = v35;
  v29[10] = a13;
  v29[11] = v31;
  v29[12] = v43;
  v50 = v20;
  v51 = v30;
  v52 = v32;
  v53 = v27;
  v54 = a8;
  v55 = v33;
  v56 = v34;
  v57 = v35;
  v58 = a13;
  v59 = v46;
  swift_retain();
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v21);
  TableColumn.init(comparator:content:label:)((uint64_t)v26, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:), (uint64_t)v29, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:), (uint64_t)v49, v20, v21, v48, MEMORY[0x1E0CE6CF8], v33, v36, v34, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_187292C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_release();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 224) + 8))(*(_QWORD *)(v3 - 232), v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a6);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t sub_187292D94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)(a1, v2[11], v2[3], a2, v2[7], v2[8]);
}

uint64_t closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)(*(_QWORD *)(v1 + 88), a1);
}

void TableColumn<>.init<A, B>(_:value:comparator:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52[16];
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v50 = a9;
  v51 = a8;
  v46 = a2;
  v47 = a7;
  v49 = a4;
  v48 = a3;
  v42 = a13;
  v43 = a6;
  v40 = a10;
  v41 = a12;
  v16 = *a5;
  v44 = *(_QWORD *)(a11 - 8);
  v17 = v44;
  v45 = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v16 + *MEMORY[0x1E0DEE2A8]);
  v21 = type metadata accessor for KeyPathComparator();
  v22 = type metadata accessor for Optional();
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v36 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a6, a11, v24);
  v27 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v16 + 8);
  v39 = a5;
  v28 = swift_retain();
  v37 = v20;
  v38 = a11;
  KeyPathComparator.init<A, B>(_:comparator:)(v28, (uint64_t)v19, v20, v27, a11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v26, 0, 1, v21);
  v29 = (_QWORD *)swift_allocObject();
  v30 = v40;
  v29[2] = v20;
  v29[3] = v30;
  v29[4] = v27;
  v29[5] = a11;
  v31 = v41;
  v32 = v42;
  v29[6] = v41;
  v29[7] = v32;
  v34 = v46;
  v33 = v47;
  v29[8] = a14;
  v29[9] = v33;
  v29[10] = v51;
  v53 = v45;
  v54 = v34;
  v55 = v48 & 1;
  v56 = v49;
  swift_retain();
  v35 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v21);
  TableColumn.init(comparator:content:label:)((uint64_t)v26, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:comparator:content:), (uint64_t)v29, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v52, v37, v21, v30, MEMORY[0x1E0CE6CF8], v31, v35, v32, MEMORY[0x1E0CE6C58]);
}

uint64_t sub_1872930D0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  swift_release();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 208) + 8))(*(_QWORD *)(v3 - 216), *(_QWORD *)(v3 - 256));
  outlined consume of Text.Storage(v2, v1, v0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18729312C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TableColumn<>.init<A, B>(_:value:content:)(a1, v2[9], v2[3], a2, v2[7]);
}

void TableColumn<>.init<>(_:value:comparator:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v27 = a6;
  v28 = a1;
  v31 = a4;
  v32 = a8;
  v30 = a3;
  v29 = a2;
  v11 = *a5;
  v12 = type metadata accessor for String.StandardComparator();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v11 + *MEMORY[0x1E0DEE2A8]);
  v18 = type metadata accessor for KeyPathComparator();
  v19 = type metadata accessor for Optional();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a6, v12, v21);
  lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  v24 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v24, (uint64_t)v16, v17, MEMORY[0x1E0DEA968], v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v23, 0, 1, v18);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a7;
  *(_QWORD *)(v25 + 24) = a5;
  v34 = v28;
  v35 = v29;
  v36 = v30;
  v37 = v31;
  swift_retain();
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v18);
  TableColumn.init(comparator:content:label:)((uint64_t)v23, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v25, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v33, v17, v18, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a7, v26, MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v29 = a4;
  v30 = a8;
  v28 = a3;
  v31 = a1;
  v32 = a2;
  v11 = *a5;
  v12 = type metadata accessor for String.StandardComparator();
  v27 = *(_QWORD *)(v12 - 8);
  v13 = v27;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v11 + *MEMORY[0x1E0DEE2A8]);
  v18 = type metadata accessor for KeyPathComparator();
  v19 = type metadata accessor for Optional();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a6, v12, v21);
  lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  v24 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v24, (uint64_t)v16, v17, MEMORY[0x1E0DEA968], v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v23, 0, 1, v18);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a7;
  *(_QWORD *)(v25 + 24) = a5;
  v34 = v31;
  v35 = v32;
  v36 = v28 & 1;
  v37 = v29;
  swift_retain();
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v18);
  TableColumn.init(comparator:content:label:)((uint64_t)v23, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v25, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v33, v17, v18, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a7, v26, MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v28[1] = a6;
  v29 = a1;
  v31 = a3;
  v30 = a2;
  v32 = a8;
  v12 = *a5;
  v13 = type metadata accessor for String.StandardComparator();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v12 + *MEMORY[0x1E0DEE2A8]);
  v19 = type metadata accessor for SortDescriptor();
  v20 = type metadata accessor for Optional();
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v28 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a6, v13, v22);
  v25 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v25, (uint64_t)v17, v18, MEMORY[0x1E0CAEB98]);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v24, 0, 1, v19);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a7;
  *(_QWORD *)(v26 + 24) = a5;
  v34 = v29;
  v35 = v30;
  v36 = v31;
  v37 = a4;
  swift_retain();
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAECA0], v19);
  TableColumn.init(comparator:content:label:)((uint64_t)v24, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:comparator:), v26, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v33, v18, v19, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a7, v27, MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v29 = a4;
  v30 = a8;
  v28 = a3;
  v31 = a1;
  v32 = a2;
  v11 = *a5;
  v12 = type metadata accessor for String.StandardComparator();
  v13 = *(_QWORD *)(v12 - 8);
  v27 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v11 + *MEMORY[0x1E0DEE2A8]);
  v18 = type metadata accessor for SortDescriptor();
  v19 = type metadata accessor for Optional();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a6, v12, v21);
  v24 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v24, (uint64_t)v16, v17, MEMORY[0x1E0CAEB98]);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v23, 0, 1, v18);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a7;
  *(_QWORD *)(v25 + 24) = a5;
  v34 = v31;
  v35 = v32;
  v36 = v28 & 1;
  v37 = v29;
  swift_retain();
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAECA0], v18);
  TableColumn.init(comparator:content:label:)((uint64_t)v23, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:comparator:), v25, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v33, v17, v18, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a7, v26, MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

uint64_t sub_187293348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v2 - 176), v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    v1 = type metadata accessor for String.StandardComparator();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB1908], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

uint64_t sub_1872933DC()
{
  swift_release();
  return swift_deallocObject();
}

void TableColumn<>.init<A>(_:value:comparator:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v30 = a5;
  v31 = a6;
  v29[1] = a3;
  v32 = a1;
  v33 = a7;
  v10 = *a2;
  v11 = type metadata accessor for String.StandardComparator();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v10 + *MEMORY[0x1E0DEE2A8]);
  v17 = type metadata accessor for KeyPathComparator();
  v18 = type metadata accessor for Optional();
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v29 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, a3, v11, v20);
  lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  v23 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v23, (uint64_t)v15, v16, MEMORY[0x1E0DEA968], v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v22, 0, 1, v17);
  v24 = (_QWORD *)swift_allocObject();
  v25 = v30;
  v26 = v31;
  v24[2] = a4;
  v24[3] = v25;
  v24[4] = v26;
  v24[5] = a2;
  v35 = v16;
  v36 = a4;
  v37 = v25;
  v38 = v26;
  v27 = v25;
  v39 = v32;
  swift_retain();
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAF320], v17);
  TableColumn.init(comparator:content:label:)((uint64_t)v22, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:), (uint64_t)v24, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A>(_:value:), (uint64_t)v34, v16, v17, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], v27, v28, MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v29 = a3;
  v30 = a6;
  v31 = a1;
  v32 = a7;
  v11 = *a2;
  v12 = type metadata accessor for String.StandardComparator();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v11 + *MEMORY[0x1E0DEE2A8]);
  v18 = type metadata accessor for SortDescriptor();
  v19 = type metadata accessor for Optional();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v29 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a3, v12, v21);
  v24 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v24, (uint64_t)v16, v17, MEMORY[0x1E0CAEB98]);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v23, 0, 1, v18);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = a4;
  v25[3] = a5;
  v26 = v30;
  v27 = v31;
  v25[4] = v30;
  v25[5] = a2;
  v34 = v17;
  v35 = a4;
  v36 = a5;
  v37 = v26;
  v38 = v27;
  swift_retain();
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CAECA0], v18);
  TableColumn.init(comparator:content:label:)((uint64_t)v23, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:comparator:), (uint64_t)v25, (uint64_t)partial apply for closure #2 in TableColumn<>.init<A>(_:value:), (uint64_t)v33, v17, v18, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6CF8], a5, v28, MEMORY[0x1E0CE6C58], MEMORY[0x1E0CE6C58]);
}

uint64_t sub_1872935C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v4 - 184), v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_187293614()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187293804()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 176) + 8))(v1, v2);
  outlined consume of Text.Storage(*(_QWORD *)(v3 - 144), *(_QWORD *)(v3 - 136), v0);
  return swift_bridgeObjectRelease();
}

uint64_t View.task<A>(id:priority:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a7;
  v33 = a9;
  v34 = a5;
  v31 = a3;
  v32 = a4;
  v29 = a1;
  v30 = a2;
  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for _TaskValueModifier(0, a6, a8, v21);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v29 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v29, a6, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v30, v11);
  _TaskValueModifier.init(value:priority:action:)((uint64_t)v20, (uint64_t)v15, v31, v32, a6, a8, v27);
  swift_retain();
  MEMORY[0x18D75B4AC](v27, v34, v22, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v22);
}

uint64_t type metadata accessor for _TaskValueModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TaskValueModifier);
}

uint64_t _TaskModifier.init(priority:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t result;

  v8 = (char *)a4 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v9 = type metadata accessor for TaskPriority();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a1, v9);
  *a4 = a2;
  a4[1] = a3;
  return result;
}

uint64_t _TaskValueModifier.init(value:priority:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;

  *(_QWORD *)a7 = a3;
  *((_QWORD *)a7 + 1) = a4;
  v11 = type metadata accessor for _TaskValueModifier(0, a5, a6, a4);
  v12 = &a7[*(int *)(v11 + 36)];
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(&a7[*(int *)(v11 + 40)], a1, a5);
}

uint64_t key path setter for _TaskModifier.action : _TaskModifier(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply;
  a2[1] = v5;
  return result;
}

uint64_t _TaskModifier.action.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _TaskModifier.action.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_TaskModifier.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _TaskModifier.priority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v4 = type metadata accessor for TaskPriority();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t _TaskModifier.priority.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v4 = type metadata accessor for TaskPriority();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*_TaskModifier.priority.modify())(_QWORD)
{
  type metadata accessor for _TaskModifier(0);
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _TaskModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<_TaskModifier>, type metadata accessor for _TaskModifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TaskModifier.InnerModifier(0);
  lazy protocol witness table accessor for type _TaskModifier.Child and conformance _TaskModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier, type metadata accessor for _TaskModifier.InnerModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier.InnerModifier);
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

uint64_t static _TaskModifier._viewListCount(inputs:body:)()
{
  type metadata accessor for _TaskModifier.InnerModifier(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier, type metadata accessor for _TaskModifier.InnerModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier.InnerModifier);
  return static ViewModifier.viewListCount(inputs:body:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _TaskModifier.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for _TaskModifier.InnerModifier(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance _TaskModifier.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t result;
  _QWORD *v4;

  type metadata accessor for _TaskModifier(0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, a1, type metadata accessor for _TaskModifier);
  result = type metadata accessor for _TaskModifier.InnerModifier(0);
  v4 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t closure #1 in closure #1 in _TaskModifier.InnerModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];

  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, v10);
  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v15;
  }
  return swift_task_create();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance _TaskModifier.InnerModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - v10;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)&v16 - v10, type metadata accessor for _TaskModifier.InnerModifier);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = swift_allocObject();
  outlined init with take of _TaskModifier.InnerModifier((uint64_t)v11, v13 + v12);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v7, type metadata accessor for _TaskModifier.InnerModifier);
  v14 = swift_allocObject();
  result = outlined init with take of _TaskModifier.InnerModifier((uint64_t)v7, v14 + v12);
  *a3 = partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:);
  a3[1] = (uint64_t (*)())v13;
  a3[2] = partial apply for closure #2 in _TaskModifier.InnerModifier.body(content:);
  a3[3] = (uint64_t (*)())v14;
  return result;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TaskModifier()
{
  type metadata accessor for _TaskModifier.InnerModifier(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier, type metadata accessor for _TaskModifier.InnerModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier.InnerModifier);
  return static ViewModifier.viewListCount(inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _TaskModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t key path setter for _TaskValueModifier.action : <A>_TaskValueModifier<A>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ());
  a2[1] = v5;
  return result;
}

uint64_t _TaskValueModifier.action.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _TaskValueModifier.action.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_TaskValueModifier.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _TaskValueModifier.priority.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for TaskPriority();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t _TaskValueModifier.priority.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for TaskPriority();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*_TaskValueModifier.priority.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _TaskValueModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t _TaskValueModifier.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*_TaskValueModifier.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _TaskValueModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for _TaskValueModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v9 = type metadata accessor for _TaskValueModifier.InnerModifier(0, a5, a6, v8);
  v11 = type metadata accessor for _TaskValueModifier.Child(0, a5, a6, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.Child, v11);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.InnerModifier, v9);
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static _TaskValueModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for _TaskValueModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v9 = type metadata accessor for _TaskValueModifier.InnerModifier(0, a5, a6, v8);
  v11 = type metadata accessor for _TaskValueModifier.Child(0, a5, a6, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.Child, v11);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.InnerModifier, v9);
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static _TaskValueModifier._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = type metadata accessor for _TaskValueModifier.InnerModifier(0, a4, a5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.InnerModifier, v5);
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t _TaskValueModifier.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Value;
  uint64_t v20;

  v7 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, a1, a2, a3);
  v8 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - v10;
  v13 = type metadata accessor for _TaskValueModifier(0, a1, a2, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v20 - v16;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, Value, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v11, 1, 1, v7);
  return _TaskValueModifier.InnerModifier.init(base:taskState:)((uint64_t)v17, (uint64_t)v11, a1, a2, a4);
}

uint64_t _TaskValueModifier.InnerModifier.init(base:taskState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = type metadata accessor for _TaskValueModifier(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  type metadata accessor for _TaskValueModifier.InnerModifier(0, a3, a4, v11);
  return property wrapper backing initializer of _TaskValueModifier.InnerModifier.taskState(a2, a3, a4, v12);
}

uint64_t property wrapper backing initializer of _TaskValueModifier.InnerModifier.taskState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, a2, a3, a4);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v11 - v9, a1, v5, v8);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t _TaskValueModifier.InnerModifier.taskState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for Optional();
  type metadata accessor for State();
  return State.wrappedValue.getter();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _TaskValueModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for _TaskValueModifier.InnerModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance _TaskValueModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return _TaskValueModifier.Child.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TaskValueModifier<A>.Child(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t _TaskValueModifier.InnerModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, double);
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  __int128 v80;
  __int128 v81;
  _OWORD v82[2];

  v74 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v59 = *(_QWORD *)(a2 + 16);
  v68 = v5;
  MEMORY[0x1E0C80A78](a1, a2);
  v67 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v10, v7);
  v63 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v57 - v14;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.InnerModifier, v13);
  v64 = type metadata accessor for _ViewModifier_Content();
  v66 = type metadata accessor for ModifiedContent();
  v75 = *(_QWORD *)(a2 + 24);
  v70 = type metadata accessor for _ValueActionModifier2();
  v71 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  v72 = v16;
  v73 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v65 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v69 = (char *)&v57 - v23;
  v76 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v62 = v15;
  v76(v15, v3, a2, v22);
  v24 = *(unsigned __int8 *)(v8 + 80);
  v25 = ((v24 + 32) & ~v24) + v9;
  v26 = (v24 + 32) & ~v24;
  v58 = v26;
  v60 = v25;
  v61 = v24 | 7;
  v27 = swift_allocObject();
  v28 = v59;
  v29 = v75;
  *(_QWORD *)(v27 + 16) = v59;
  *(_QWORD *)(v27 + 24) = v29;
  v30 = v27 + v26;
  v31 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v31(v30, v15, a2);
  v32 = v63;
  ((void (*)(char *, uint64_t, uint64_t))v76)(v63, v3, a2);
  v33 = swift_allocObject();
  v34 = v28;
  *(_QWORD *)(v33 + 16) = v28;
  *(_QWORD *)(v33 + 24) = v29;
  v35 = v29;
  v36 = v58;
  v31(v33 + v58, v32, a2);
  *(_QWORD *)&v80 = partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:);
  *((_QWORD *)&v80 + 1) = v27;
  *(_QWORD *)&v81 = partial apply for closure #2 in _TaskValueModifier.InnerModifier.body(content:);
  *((_QWORD *)&v81 + 1) = v33;
  v37 = v64;
  v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v64);
  MEMORY[0x18D75B4AC](v82, &v80, v37, MEMORY[0x1E0CE5F08], v38);
  swift_release();
  swift_release();
  v80 = v82[0];
  v81 = v82[1];
  v39 = v35;
  v41 = type metadata accessor for _TaskValueModifier(0, v34, v35, v40);
  v42 = v3;
  v43 = v68;
  v44 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v3 + *(int *)(v41 + 40), v34);
  v45 = v62;
  ((void (*)(char *, uint64_t, uint64_t))v76)(v62, v42, a2);
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v34;
  *(_QWORD *)(v46 + 24) = v39;
  v31(v46 + v36, v45, a2);
  v79[0] = v38;
  v79[1] = MEMORY[0x1E0CE5EF8];
  v47 = MEMORY[0x1E0CE2E70];
  v48 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v66, v79);
  v49 = v65;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v34);
  v50 = v81;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v80);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v50);
  v51 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v70);
  v78[0] = v48;
  v78[1] = v51;
  v77[0] = MEMORY[0x18D75FFDC](v47, v71, v78);
  v77[1] = MEMORY[0x1E0CE5EF8];
  v52 = v72;
  v53 = MEMORY[0x18D75FFDC](v47, v72, v77);
  v54 = (uint64_t)v69;
  static ViewBuilder.buildExpression<A>(_:)(v49, v52, v53);
  v55 = *(void (**)(char *, uint64_t))(v73 + 8);
  v55(v49, v52);
  static ViewBuilder.buildBlock<A>(_:)(v54, v52, v74);
  return ((uint64_t (*)(uint64_t, uint64_t))v55)(v54, v52);
}

uint64_t closure #1 in _TaskValueModifier.InnerModifier.body(content:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v47 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v49 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, a2, a3, v11);
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v42 - v20;
  v46 = type metadata accessor for _TaskValueModifier.InnerModifier(0, a2, a3, v22);
  _TaskValueModifier.InnerModifier.taskState.getter(v46, v23, v24, v25);
  v45 = *(_QWORD *)(v12 - 8);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v21, 1, v12);
  v27 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v48 = v13;
  result = v27(v21, v13);
  if (v26 == 1)
  {
    v30 = *((_QWORD *)a1 + 1);
    v42 = *(_QWORD *)a1;
    v43 = type metadata accessor for _TaskValueModifier(0, a2, a3, v29);
    v44 = (uint64_t (*)(uint64_t *, uint64_t))v27;
    v31 = &a1[*(int *)(v43 + 36)];
    v32 = type metadata accessor for TaskPriority();
    v33 = *(_QWORD *)(v32 - 8);
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v10, v31, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v10, 0, 1, v32);
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = 0;
    v34[3] = 0;
    v34[4] = v42;
    v34[5] = v30;
    swift_retain();
    v35 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in _TaskValueModifier.InnerModifier.body(content:), (uint64_t)v34);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TaskPriority?);
    v36 = v47;
    v37 = v49;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v49, &a1[*(int *)(v43 + 40)], a2);
    *v17 = v35;
    v39 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(0, a2, a3, v38);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v17 + *(int *)(v39 + 36), v37, a2);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v17, 0, 1, v12);
    specialized _TaskValueModifier.InnerModifier.taskState.setter((uint64_t)v17, v46, v40, v41);
    return v44(v17, v48);
  }
  return result;
}

uint64_t closure #2 in _TaskValueModifier.InnerModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, a2, a3, a4);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v30 - v14;
  v16 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v30 - v19;
  v22 = type metadata accessor for _TaskValueModifier.InnerModifier(0, a2, a3, v21);
  _TaskValueModifier.InnerModifier.taskState.getter(v22, v23, v24, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v6) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, v6);
  v27 = swift_retain();
  MEMORY[0x18D75D204](v27, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v11, 1, 1, v6);
  specialized _TaskValueModifier.InnerModifier.taskState.setter((uint64_t)v11, v22, v28, v29);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v6);
}

uint64_t closure #3 in _TaskValueModifier.InnerModifier.body(content:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;

  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v62 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v64 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, a2, a3, v12);
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v63 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v52 - v20;
  v22 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v52 - v25;
  v61 = type metadata accessor for _TaskValueModifier.InnerModifier(0, a2, a3, v27);
  _TaskValueModifier.InnerModifier.taskState.getter(v61, v28, v29, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v13) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  v59 = v15;
  v60 = v14;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v21, v13);
  v32 = a3;
  v34 = type metadata accessor for _TaskValueModifier(0, a2, a3, v33);
  v35 = v64;
  v36 = v65;
  v37 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v57 = (char *)a1 + *(int *)(v34 + 40);
  v58 = v37;
  ((void (*)(char *))v37)(v64);
  v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, a2);
  if ((v38 & 1) == 0)
  {
    v39 = swift_retain();
    MEMORY[0x18D75D204](v39, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
    v40 = *a1;
    v53 = a1[1];
    v54 = v40;
    v41 = (char *)a1 + *(int *)(v34 + 36);
    v42 = type metadata accessor for TaskPriority();
    v55 = v32;
    v56 = a1;
    v43 = *(_QWORD *)(v42 - 8);
    v44 = (uint64_t)v62;
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v62, v41, v42);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
    v45 = (_QWORD *)swift_allocObject();
    v45[2] = 0;
    v45[3] = 0;
    v45[4] = v54;
    v45[5] = v53;
    swift_retain();
    v46 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v44, (uint64_t)&async function pointer to partial apply for closure #1 in closure #3 in _TaskValueModifier.InnerModifier.body(content:), (uint64_t)v45);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for TaskPriority?);
    v58(v35, v57, a2);
    v47 = (uint64_t)v63;
    *v63 = v46;
    v49 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(0, a2, v55, v48);
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v47 + *(int *)(v49 + 36), v35, a2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v47, 0, 1, v13);
    specialized _TaskValueModifier.InnerModifier.taskState.setter(v47, v61, v50, v51);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v47, v60);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v13);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TaskValueModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _TaskValueModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TaskValueModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static _TaskValueModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TaskValueModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _TaskValueModifier._viewListCount(inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t type metadata accessor for _TaskValueModifier.InnerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TaskValueModifier.InnerModifier);
}

uint64_t type metadata accessor for _TaskValueModifier.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TaskValueModifier.Child);
}

_UNKNOWN **base witness table accessor for ViewModifier in _TaskModifier()
{
  return &protocol witness table for _TaskModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _TaskValueModifier<A>()
{
  return &protocol witness table for _TaskValueModifier<A>;
}

uint64_t sub_187295938@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_18729598C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  a2[1] = v5;
  return swift_retain();
}

uint64_t sub_1872959E0()
{
  return 16;
}

__n128 sub_1872959EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _TaskModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for TaskPriority();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

_OWORD *initializeWithTake for _TaskModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for _TaskModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TaskModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187295B68(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for TaskPriority();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for _TaskModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_187295BF0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for TaskPriority();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for _TaskValueModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for TaskPriority();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _TaskValueModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *a2;
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v9 + ((v8 + 16) & ~v8) + v12) & ~v12) + *(_QWORD *)(v11 + 64) > 0x18)
  {
    *a1 = v13;
    a1 = (_QWORD *)(v13 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
    swift_retain();
  }
  else
  {
    v16 = ~v8;
    v17 = a2[1];
    *a1 = v13;
    a1[1] = v17;
    v18 = (char *)a1 + v8;
    v19 = (char *)a2 + v8;
    v20 = (unint64_t)(v18 + 16) & v16;
    v21 = (unint64_t)(v19 + 16) & v16;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v22(v20, v21, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v20 + v9 + v12) & ~v12, (v21 + v9 + v12) & ~v12, v10);
  }
  return a1;
}

uint64_t destroy for _TaskValueModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  swift_release();
  v4 = type metadata accessor for TaskPriority();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v6 + *(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for _TaskValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v13 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

_QWORD *assignWithCopy for _TaskValueModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10, v11, v7);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

_OWORD *initializeWithTake for _TaskValueModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, v6);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_OWORD *assignWithTake for _TaskValueModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  swift_release();
  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v9, v10, v6);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v11 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _TaskValueModifier(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  if (v8 <= *(_DWORD *)(v10 + 84))
    v11 = *(_DWORD *)(v10 + 84);
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = v6;
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v10 + 80);
  if (a2 <= v12)
    goto LABEL_27;
  v17 = ((v15 + ((v14 + 16) & ~v14) + v16) & ~v16) + *(_QWORD *)(v10 + 64);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(_WORD *)((char *)a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if ((v11 & 0x80000000) != 0)
      {
        v25 = ((unint64_t)a1 + v14 + 16) & ~v14;
        if ((_DWORD)v8 == v12)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, v8, v13);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v25 + v15 + v16) & ~v16, *(unsigned int *)(v10 + 84), v9);
      }
      else
      {
        v24 = *a1;
        if (*a1 >= 0xFFFFFFFFuLL)
          LODWORD(v24) = -1;
        return (v24 + 1);
      }
    }
  }
  v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((_BYTE *)a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v15 + ((v14 + 16) & ~(_DWORD)v14) + v16) & ~(_DWORD)v16) + *(_DWORD *)(v10 + 64);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v12 + v22 + 1;
}

void storeEnumTagSinglePayload for _TaskValueModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v8 = *(_QWORD *)(type metadata accessor for TaskPriority() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = ((*(_QWORD *)(v8 + 64) + ((v12 + 16) & ~v12) + v13) & ~v13) + *(_QWORD *)(v9 + 64);
  if (a3 <= v11)
  {
    v15 = 0u;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 - v11 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (v11 < a2)
  {
    v16 = ~v11 + a2;
    if (v14 < 4)
    {
      if ((_DWORD)v14)
      {
        v18 = v16 & ~(-1 << (8 * v14));
        bzero(a1, ((*(_QWORD *)(v8 + 64) + ((v12 + 16) & ~v12) + v13) & ~v13) + *(_QWORD *)(v9 + 64));
        if ((_DWORD)v14 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if ((_DWORD)v14 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v8 + 64) + ((v12 + 16) & ~v12) + v13) & ~v13) + *(_QWORD *)(v9 + 64));
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X5 }
}

uint64_t sub_1872965A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TaskModifier(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _TaskModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1872965FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for _TaskValueModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _TaskValueModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t type metadata completion function for _TaskValueModifier.InnerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for _TaskValueModifier(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, v4, v5, v7);
    type metadata accessor for Optional();
    result = type metadata accessor for State();
    if (v9 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _TaskValueModifier.InnerModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  size_t __n;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = ((v12 + 8) & ~v12) + v13;
  v15 = ((v9 + ((v8 + 16) & ~v8) + v12) & ~v12) + v13 + (v12 | 7);
  v16 = *a2;
  if ((v12 | v8) <= 7
    && ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && (v15 & ~(v12 | 7)) + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    v38 = v14 + 7;
    __n = ((v12 + 8) & ~v12) + v13;
    v37 = ~(v12 | 7);
    v36 = *(_DWORD *)(v11 + 84);
    v19 = a2[1];
    *a1 = v16;
    a1[1] = v19;
    v20 = ((unint64_t)a1 + v8 + 16) & ~v8;
    v39 = a1;
    v21 = v10;
    v22 = ((unint64_t)a2 + v8 + 16) & ~v8;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v23(v20, v22, v6);
    v24 = ~v12;
    v25 = v22 + v9;
    v26 = v21;
    v27 = v39;
    v28 = (v20 + v9 + v12) & ~v12;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v29(v28, (v25 + v12) & ~v12, v26);
    v30 = (_QWORD *)(((unint64_t)v39 + v15) & v37);
    v31 = (uint64_t *)(((unint64_t)a2 + v15) & v37);
    if (v36 < 0)
    {
      v33 = v12 + 8;
      if ((*(unsigned int (**)(unint64_t))(v11 + 48))(((unint64_t)v31 + v12 + 8) & v24))
      {
LABEL_14:
        memcpy(v30, v31, __n);
LABEL_17:
        *(_QWORD *)(((unint64_t)v30 + v38) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v31 + v38) & 0xFFFFFFFFFFFFF8);
        goto LABEL_18;
      }
    }
    else
    {
      v32 = *v31;
      if ((unint64_t)*v31 >= 0xFFFFFFFF)
        LODWORD(v32) = -1;
      v33 = v12 + 8;
      if ((_DWORD)v32 != -1)
        goto LABEL_14;
    }
    *v30 = *v31;
    swift_retain();
    v29(((unint64_t)v30 + v33) & v24, ((unint64_t)v31 + v33) & v24, v26);
    goto LABEL_17;
  }
  *a1 = v16;
  v27 = (_QWORD *)(v16 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
LABEL_18:
  swift_retain();
  return v27;
}

uint64_t destroy for _TaskValueModifier.InnerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t *v13;
  uint64_t v14;

  swift_release();
  v4 = type metadata accessor for TaskPriority();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v6 + 16 + a1) & ~v6, v4);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v5 + 64) + v9;
  v11 = ~v9;
  v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12((v10 + ((v6 + 16 + a1) & ~v6)) & ~v9, v7);
  v13 = (uint64_t *)((*(_QWORD *)(v8 + 64) + a1 + (v9 | 7) + ((v10 + ((v6 + 16) & ~v6)) & ~v9)) & ~(v9 | 7));
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v13 + v9 + 8) & v11))
      return swift_release();
    goto LABEL_7;
  }
  v14 = *v13;
  if ((unint64_t)*v13 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  if ((_DWORD)v14 == -1)
  {
LABEL_7:
    swift_release();
    v12(((unint64_t)v13 + v9 + 8) & v11, v7);
  }
  return swift_release();
}

_QWORD *initializeWithCopy for _TaskValueModifier.InnerModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  void (*v31)(unint64_t, uint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a2 + v8 + 16) & ~v8;
  v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  v10(((unint64_t)a1 + v8 + 16) & ~v8, v9, v6);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11 + v14;
  v31 = *(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16);
  v31((v11 + v14 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v14, (v11 + v14 + v9) & ~v14, v12);
  v16 = (v15 + ((v8 + 16) & ~v8)) & ~v14;
  v17 = *(_QWORD *)(v13 + 64);
  v18 = v16 + v17 + (v14 | 7);
  v19 = (_QWORD *)(((unint64_t)a1 + v18) & ~(v14 | 7));
  v20 = (uint64_t *)(((unint64_t)a2 + v18) & ~(v14 | 7));
  v21 = v14 + 8;
  v22 = (v14 + 8) & ~v14;
  if ((*(_DWORD *)(v13 + 84) & 0x80000000) == 0)
  {
    v23 = *v20;
    if ((unint64_t)*v20 >= 0xFFFFFFFF)
      LODWORD(v23) = -1;
    v24 = v12;
    v25 = ~v14;
    v26 = v22 + v17;
    if ((_DWORD)v23 != -1)
      goto LABEL_5;
LABEL_7:
    *v19 = *v20;
    v28 = ((unint64_t)v19 + v21) & v25;
    v29 = ((unint64_t)v20 + v21) & v25;
    swift_retain();
    v31(v28, v29, v24);
    goto LABEL_8;
  }
  v27 = (*(uint64_t (**)(unint64_t))(v13 + 48))(((unint64_t)v20 + v21) & ~v14);
  v24 = v12;
  v25 = ~v14;
  v26 = v22 + v17;
  if (!v27)
    goto LABEL_7;
LABEL_5:
  memcpy(v19, v20, v26);
LABEL_8:
  *(_QWORD *)(((unint64_t)v19 + v26 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v20 + v26 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _TaskValueModifier.InnerModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(unint64_t, uint64_t, uint64_t);
  int v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  size_t v31;
  void (*v32)(unint64_t, unint64_t, uint64_t);
  _QWORD *v33;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)a1 + v9 + 16) & ~v9, ((unint64_t)a2 + v9 + 16) & ~v9, v7);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v8 + 64) + v12;
  v14 = ~v12;
  v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24);
  v32((v13 + (((unint64_t)a1 + v9 + 16) & ~v9)) & ~v12, (v13 + (((unint64_t)a2 + v9 + 16) & ~v9)) & ~v12, v10);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = ((v13 + ((v9 + 16) & ~v9)) & ~v12) + v15 + (v12 | 7);
  v33 = a1;
  v17 = (_QWORD *)(((unint64_t)a1 + v16) & ~(v12 | 7));
  v18 = (_QWORD *)(((unint64_t)a2 + v16) & ~(v12 | 7));
  v19 = *(unsigned int *)(v11 + 84);
  v20 = v12 + 8;
  v21 = ((v12 + 8) & ~v12) + v15;
  if ((v19 & 0x80000000) != 0)
  {
    v31 = v21;
    v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
    v26 = v25(((unint64_t)v17 + v20) & v14, v19, v10);
    v22 = v14;
    v24 = v25(((unint64_t)v18 + v20) & v14, v19, v10);
    v21 = v31;
    if (!v26)
    {
LABEL_5:
      if (!v24)
      {
        *v17 = *v18;
        swift_retain();
        swift_release();
        v32(((unint64_t)v17 + v20) & v22, ((unint64_t)v18 + v20) & v22, v10);
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(((unint64_t)v17 + v20) & v22, v10);
      goto LABEL_9;
    }
  }
  else
  {
    v22 = v14;
    v23 = *v18;
    if (*v18 >= 0xFFFFFFFFuLL)
      LODWORD(v23) = -1;
    v24 = v23 + 1;
    if (*v17 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v24)
  {
    *v17 = *v18;
    v27 = ((unint64_t)v17 + v20) & v22;
    v28 = ((unint64_t)v18 + v20) & v22;
    v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
    swift_retain();
    v29(v27, v28, v10);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v17, v18, v21);
LABEL_12:
  *(_QWORD *)(((unint64_t)v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + v21 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return v33;
}

_OWORD *initializeWithTake for _TaskValueModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  int v22;
  void (*v24)(unint64_t, unint64_t, uint64_t);

  *a1 = *a2;
  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)a1 + v8 + 16) & ~v8, ((unint64_t)a2 + v8 + 16) & ~v8, v6);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32);
  v24((v12 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v11, (v12 + (((unint64_t)a2 + v8 + 16) & ~v8)) & ~v11, v9);
  v13 = *(_QWORD *)(v10 + 64);
  v14 = ((v12 + ((v8 + 16) & ~v8)) & ~v11) + v13 + (v11 | 7);
  v15 = (_QWORD *)(((unint64_t)a1 + v14) & ~(v11 | 7));
  v16 = (uint64_t *)(((unint64_t)a2 + v14) & ~(v11 | 7));
  v17 = v11 + 8;
  v18 = (v11 + 8) & ~v11;
  if ((*(_DWORD *)(v10 + 84) & 0x80000000) == 0)
  {
    v19 = *v16;
    if ((unint64_t)*v16 >= 0xFFFFFFFF)
      LODWORD(v19) = -1;
    v20 = ~v11;
    v21 = v18 + v13;
    if ((_DWORD)v19 != -1)
      goto LABEL_5;
LABEL_7:
    *v15 = *v16;
    v24(((unint64_t)v15 + v17) & v20, ((unint64_t)v16 + v17) & v20, v9);
    goto LABEL_8;
  }
  v22 = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v16 + v17) & ~v11);
  v20 = ~v11;
  v21 = v18 + v13;
  if (!v22)
    goto LABEL_7;
LABEL_5:
  memcpy(v15, v16, v21);
LABEL_8:
  *(_QWORD *)(((unint64_t)v15 + v21 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + v21 + 7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_OWORD *assignWithTake for _TaskValueModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(unint64_t, uint64_t, uint64_t);
  int v27;
  size_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);

  *a1 = *a2;
  swift_release();
  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)a1 + v8 + 16) & ~v8, ((unint64_t)a2 + v8 + 16) & ~v8, v6);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = ~v11;
  v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40);
  v29((v12 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v11, (v12 + (((unint64_t)a2 + v8 + 16) & ~v8)) & ~v11, v9);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = ((v12 + ((v8 + 16) & ~v8)) & ~v11) + v14 + (v11 | 7);
  v16 = a1;
  v17 = (_QWORD *)(((unint64_t)a1 + v15) & ~(v11 | 7));
  v18 = (_QWORD *)(((unint64_t)a2 + v15) & ~(v11 | 7));
  v19 = *(unsigned int *)(v10 + 84);
  v20 = v11 + 8;
  v21 = ((v11 + 8) & ~v11) + v14;
  if ((v19 & 0x80000000) != 0)
  {
    v28 = v21;
    v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    v27 = v25(((unint64_t)v17 + v20) & v13, v19, v9);
    v22 = v13;
    v24 = v25(((unint64_t)v18 + v20) & v13, v19, v9);
    v21 = v28;
    if (!v27)
    {
LABEL_5:
      if (!v24)
      {
        *v17 = *v18;
        swift_release();
        v29(((unint64_t)v17 + v20) & v22, ((unint64_t)v18 + v20) & v22, v9);
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v17 + v20) & v22, v9);
      goto LABEL_9;
    }
  }
  else
  {
    v22 = v13;
    v23 = *v18;
    if (*v18 >= 0xFFFFFFFFuLL)
      LODWORD(v23) = -1;
    v24 = v23 + 1;
    if (*v17 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v24)
  {
    *v17 = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)v17 + v20) & v22, ((unint64_t)v18 + v20) & v22, v9);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v17, v18, v21);
LABEL_12:
  *(_QWORD *)(((unint64_t)v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + v21 + 7) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return v16;
}

uint64_t getEnumTagSinglePayload for _TaskValueModifier.InnerModifier(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v8 <= v11)
    v12 = *(_DWORD *)(v10 + 84);
  else
    v12 = *(_DWORD *)(v7 + 84);
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (v11 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = *(_DWORD *)(v10 + 84);
  v15 = v14 - 1;
  if (v14 - 1 <= v13)
    v16 = v13;
  else
    v16 = v14 - 1;
  if (!a2)
    return 0;
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = *(_QWORD *)(v7 + 64);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 64);
  v21 = v19 | 7;
  v22 = v19 + 8;
  v23 = ((v18 + ((v17 + 16) & ~v17) + v19) & ~v19) + v20 + (v19 | 7);
  if (v16 < a2)
  {
    v24 = a2 - v16;
    if (((((v20 + (v22 & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8) + (v23 & ~v21) + 8) & 0xFFFFFFF8) != 0)
      v25 = 2;
    else
      v25 = v24 + 1;
    if (v25 >= 0x10000)
      v26 = 4;
    else
      v26 = 2;
    if (v25 < 0x100)
      v26 = 1;
    if (v25 >= 2)
      v27 = v26;
    else
      v27 = 0;
    __asm { BR              X22 }
  }
  v29 = ~v19;
  if (v13 >= v15)
  {
    if ((v12 & 0x80000000) != 0)
    {
      v34 = ((unint64_t)a1 + v17 + 16) & ~v17;
      if (v8 == v13)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v34, *(unsigned int *)(v7 + 84), v6);
      else
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))((v34 + v18 + v19) & v29, v11, v9);
    }
    else
    {
      v33 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v33) = -1;
      return (v33 + 1);
    }
  }
  else
  {
    v30 = (unint64_t *)(((unint64_t)a1 + v23) & ~v21);
    if ((v11 & 0x80000000) != 0)
    {
      v32 = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v30 + v22) & v29);
    }
    else
    {
      v31 = *v30;
      if (v31 >= 0xFFFFFFFF)
        LODWORD(v31) = -1;
      v32 = v31 + 1;
    }
    if (v32 >= 2)
      return v32 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for _TaskValueModifier.InnerModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;

  v8 = *(_QWORD *)(type metadata accessor for TaskPriority() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (*(_DWORD *)(v8 + 84) <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = *(_DWORD *)(v8 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (v10 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = *(_DWORD *)(v9 + 84);
  if (v13 - 1 <= v12)
    v14 = v12;
  else
    v14 = v13 - 1;
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = *(_QWORD *)(v9 + 64);
  v17 = ((*(_QWORD *)(v8 + 64)
        + ((*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
        + v15) & ~v15)
      + v16
      + (v15 | 7);
  if (v14 >= a3)
  {
    v20 = 0u;
    if (a2 <= v14)
      goto LABEL_25;
  }
  else
  {
    v18 = a3 - v14;
    if ((((((_DWORD)v15 + 8) & ~(_DWORD)v15) + (_DWORD)v16 + 7) & 0xFFFFFFF8)
       + (v17 & ~(v15 | 7)) == -8)
      v19 = v18 + 1;
    else
      v19 = 2;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 < 2)
      v20 = 0;
    if (a2 <= v14)
LABEL_25:
      __asm { BR              X26 }
  }
  if ((((((_DWORD)v15 + 8) & ~(_DWORD)v15) + (_DWORD)v16 + 7) & 0xFFFFFFF8)
     + (v17 & ~(v15 | 7)) != -8)
  {
    v21 = ~v14 + a2;
    bzero(a1, ((((v15 + 8) & ~v15) + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + (v17 & ~(v15 | 7)) + 8);
    *a1 = v21;
  }
  __asm { BR              X10 }
}

void sub_187297624()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187297818);
}

void sub_18729762C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x187297634);
  JUMPOUT(0x187297818);
}

void sub_1872976D0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187297818);
}

void sub_1872976D8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187297818);
}

void sub_1872976E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  _DWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  size_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  *(_WORD *)&v15[v16] = 0;
  if (v14)
  {
    if (v13 >= a5)
    {
      if (v13 >= v14)
        JUMPOUT(0x187297750);
      if ((_DWORD)v11)
      {
        if (v11 <= 3)
          v10 = v11;
        else
          v10 = 4;
        bzero(v15, v11);
        __asm { BR              X10 }
      }
    }
    else
    {
      v7 = (_DWORD *)((unint64_t)&v15[a7] & v17);
      if (a5 >= v14)
        JUMPOUT(0x1872976ECLL);
      v8 = (a2 + 7) & 0xFFFFFFF8;
      if (v8 != -8)
      {
        v9 = v14 - v12;
        bzero(v7, v8 + 8);
        *v7 = v9;
      }
    }
  }
  JUMPOUT(0x187297818);
}

void sub_187297748()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
  JUMPOUT(0x187297818);
}

void sub_18729779C()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x187297818);
}

void sub_1872977A4()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x187297818);
}

void sub_1872977C0()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x187297818);
}

uint64_t type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _TaskValueModifier.InnerModifier.TaskState);
}

uint64_t type metadata completion function for _TaskValueModifier.InnerModifier.TaskState()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TaskValueModifier.InnerModifier.TaskState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for _TaskValueModifier.InnerModifier.TaskState(uint64_t a1, uint64_t a2)
{
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for _TaskValueModifier.InnerModifier.TaskState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  v9(v7, v8, v4);
  return a1;
}

_QWORD *assignWithCopy for _TaskValueModifier.InnerModifier.TaskState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithTake for _TaskValueModifier.InnerModifier.TaskState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _TaskValueModifier.InnerModifier.TaskState(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187297BDC + 4 * byte_187C1BDF5[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _TaskValueModifier.InnerModifier.TaskState(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void *type metadata accessor for _TaskModifier.Child()
{
  return &unk_1E1AB76D0;
}

_QWORD *initializeBufferWithCopyOfBuffer for _TaskModifier.InnerModifier(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    v3 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    v9 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
    v10 = (char *)v3 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for TaskPriority();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 20);
    v15 = (_QWORD *)((char *)v3 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_retain();
  }
  swift_retain();
  return v3;
}

_OWORD *initializeWithTake for _TaskModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *assignWithTake for _TaskModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (_QWORD *)((char *)a2 + v10);
  *(_QWORD *)((char *)a1 + v10) = *v12;
  swift_release();
  *((_QWORD *)v11 + 1) = v12[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _TaskModifier.InnerModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187298054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for _TaskModifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for _TaskModifier.InnerModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872980E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for _TaskModifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void base witness table accessor for _AttributeBody in _TaskValueModifier<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in _TaskValueModifier<A>.InnerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in _TaskModifier.InnerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with take of _TaskModifier.InnerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _TaskModifier.InnerModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _TaskModifier.InnerModifier(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

void type metadata accessor for Task<(), Never>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Task<(), Never>?, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Never>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for Task<(), Never>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Task<(), Never>)
  {
    v0 = type metadata accessor for Task();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Task<(), Never>);
  }
}

uint64_t partial apply for closure #1 in closure #1 in _TaskModifier.InnerModifier.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v6();
}

uint64_t sub_187298388()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in _TaskValueModifier.InnerModifier.body(content:), a2, a3, a4);
}

uint64_t partial apply for closure #2 in _TaskValueModifier.InnerModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in _TaskValueModifier.InnerModifier.body(content:), a2, a3, a4);
}

uint64_t objectdestroy_21Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for _TaskValueModifier.InnerModifier(0, v5, v6, a4);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  swift_release();
  v11 = type metadata accessor for _TaskValueModifier(0, v5, v6, v10);
  v12 = v9 + *(int *)(v11 + 36);
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v9 + *(int *)(v11 + 40);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v15(v14, v5);
  v16 = v9 + *(int *)(v7 + 36);
  v18 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(0, v5, v6, v17);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v16, 1, v18))
  {
    swift_release();
    v15(v16 + *(int *)(v18 + 36), v5);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in _TaskValueModifier.InnerModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #3 in _TaskValueModifier.InnerModifier.body(content:), a2, a3, a4);
}

uint64_t partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for _TaskValueModifier.InnerModifier(0, v5, v6, a4) - 8)
                          + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t partial apply for closure #1 in closure #3 in _TaskValueModifier.InnerModifier.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v6();
}

uint64_t specialized State.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v2 + *(int *)(a2 + 28)))
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  return result;
}

uint64_t specialized _TaskValueModifier.InnerModifier.taskState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v4 + *(int *)(a2 + 36);
  type metadata accessor for _TaskValueModifier.InnerModifier.TaskState(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  type metadata accessor for Optional();
  result = type metadata accessor for State();
  if (*(_QWORD *)(v5 + *(int *)(result + 28)))
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _TaskValueModifier.InnerModifier.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v6();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ()
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ()))(a1, v4);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return ((uint64_t (*)(int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())
                                        + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())))(v2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<_TaskModifier.InnerModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<_TaskModifier.InnerModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = MEMORY[0x1E0CE5EF8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>)
  {
    type metadata accessor for _ViewModifier_Content<_TaskModifier.InnerModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>);
  }
}

uint64_t sub_187298938(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];

  v4 = type metadata accessor for _TaskValueModifier.InnerModifier(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TaskValueModifier<A>.InnerModifier, v4);
  v5 = type metadata accessor for _ViewModifier_Content();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for _ValueActionModifier2();
  v8 = type metadata accessor for ModifiedContent();
  v9 = type metadata accessor for ModifiedContent();
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v5);
  v11 = MEMORY[0x1E0CE5EF8];
  v16[0] = v10;
  v16[1] = MEMORY[0x1E0CE5EF8];
  v12 = MEMORY[0x1E0CE2E70];
  v15[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v16);
  v15[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], v7);
  v14[0] = MEMORY[0x18D75FFDC](v12, v8, v15);
  v14[1] = v11;
  return MEMORY[0x18D75FFDC](v12, v9, v14);
}

uint64_t View.navigationTransitionStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11[3];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v11, a3, a5);
  outlined init with copy of _NavigationTransitionStyleOutputs.Content(v11, (uint64_t)&v7);
  v5 = *((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v5 = v7;
    v13 = v8;
    v14 = v9;
    v15 = v10;
  }
  else
  {
    v15 = 0;
    v14 = 0u;
    v13 = 0u;
  }
  v12 = v5;
  outlined destroy of _NavigationTransitionStyleOutputs((uint64_t)v11);
  View.preference<A>(key:value:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v12, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationTransitionOutputs?);
}

uint64_t outlined init with copy of _NavigationTransitionStyleOutputs.Content(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 4);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[2];
    *(_OWORD *)(a2 + 16) = a1[1];
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
  }
  else
  {
    *(_QWORD *)a2 = *(_QWORD *)a1;
    v4 = *((_QWORD *)a1 + 5);
    *(_QWORD *)(a2 + 32) = v3;
    *(_QWORD *)(a2 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 8, (uint64_t)a1 + 8);
  }
  return a2;
}

uint64_t outlined destroy of _NavigationTransitionStyleOutputs(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  return a1;
}

double AutomaticNavigationTransitionStyle._outputs.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t ZoomNavigationTransitionStyle._outputs.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)(a1 + 1));
}

uint64_t protocol witness for NavigationTransitionStyle._outputs.getter in conformance ZoomNavigationTransitionStyle@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)(a1 + 1));
}

uint64_t static NavigationTransitionStyle<>.zoom<A>(sourceID:in:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = _convertToAnyHashable<A>(_:)();
  *a2 = a1;
  return result;
}

uint64_t dispatch thunk of NavigationTransitionStyle._outputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeWithCopy for _NavigationTransitionStyleOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for _NavigationTransitionStyleOutputs(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *((_QWORD *)a2 + 4);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)a2 + 1);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for (namespace: Namespace.ID, sourceID: AnyHashable));
      v7 = a2[1];
      v6 = a2[2];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v6;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v5 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 8, (uint64_t)a2 + 8);
  }
  else
  {
    v8 = *a2;
    v9 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v9;
    *(_OWORD *)a1 = v8;
  }
  return a1;
}

void type metadata accessor for (namespace: Namespace.ID, sourceID: AnyHashable)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (namespace: Namespace.ID, sourceID: AnyHashable))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (namespace: Namespace.ID, sourceID: AnyHashable));
  }
}

uint64_t assignWithTake for _NavigationTransitionStyleOutputs(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_5;
  if (!*(_QWORD *)(a2 + 32))
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for (namespace: Namespace.ID, sourceID: AnyHashable));
LABEL_5:
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for _NavigationTransitionStyleOutputs()
{
  return &type metadata for _NavigationTransitionStyleOutputs;
}

ValueMetadata *type metadata accessor for AutomaticNavigationTransitionStyle()
{
  return &type metadata for AutomaticNavigationTransitionStyle;
}

uint64_t initializeWithCopy for ZoomNavigationTransitionStyle(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

_QWORD *assignWithCopy for ZoomNavigationTransitionStyle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  return a1;
}

uint64_t assignWithTake for ZoomNavigationTransitionStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ZoomNavigationTransitionStyle()
{
  return &type metadata for ZoomNavigationTransitionStyle;
}

uint64_t sub_187298F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _PreferenceWritingModifier<NavigationTransitionKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t destroy for _NavigationTransitionStyleOutputs.Content(uint64_t result)
{
  if (*(_QWORD *)(result + 32) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  return result;
}

uint64_t initializeWithCopy for _NavigationTransitionStyleOutputs.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 32);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  }
  return a1;
}

uint64_t assignWithCopy for _NavigationTransitionStyleOutputs.Content(uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 4);
  if (*(_QWORD *)(a1 + 32) < 0xFFFFFFFFuLL)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      (**(void (***)(uint64_t *, uint64_t))(v6 - 8))(v4, (uint64_t)a2 + 8);
      return a1;
    }
LABEL_7:
    v7 = *a2;
    v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_assign_boxed_opaque_existential_1(v4, (uint64_t *)a2 + 1);
  return a1;
}

uint64_t assignWithTake for _NavigationTransitionStyleOutputs.Content(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 32) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = (_OWORD *)(a1 + 8);
  if (*(_QWORD *)(a2 + 32) < 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationTransitionStyleOutputs.Content(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _NavigationTransitionStyleOutputs.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t getEnumTag for _NavigationTransitionStyleOutputs.Content(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for _NavigationTransitionStyleOutputs.Content(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 32) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for _NavigationTransitionStyleOutputs.Content()
{
  return &type metadata for _NavigationTransitionStyleOutputs.Content;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderedButtonStyle_CarMac()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t EnvironmentValues.enforceButtonDestructiveRoleAppearance.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.enforceButtonDestructiveRoleAppearance.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t BorderedButtonStyle_CarMac.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v20;

  v8 = (int *)type metadata accessor for BorderedButton();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v11[*(int *)(v12 + 24)], type metadata accessor for PrimitiveButtonStyleConfiguration);
  *(_QWORD *)v11 = a2;
  v11[8] = a3;
  v13 = &v11[v8[7]];
  *(_QWORD *)v13 = swift_getKeyPath();
  v13[8] = 0;
  v14 = &v11[v8[8]];
  *(_QWORD *)v14 = swift_getKeyPath();
  v14[8] = 0;
  v15 = &v11[v8[9]];
  *(_QWORD *)v15 = swift_getKeyPath();
  v15[8] = 0;
  v16 = &v11[v8[10]];
  *(_QWORD *)v16 = swift_getKeyPath();
  v16[8] = 0;
  v17 = &v11[v8[11]];
  *(_QWORD *)v17 = swift_getKeyPath();
  *((_WORD *)v17 + 4) = 0;
  v18 = &v11[v8[12]];
  *(_QWORD *)v18 = swift_getKeyPath();
  v18[8] = 0;
  outlined init with take of TableCellFormula((uint64_t)v11, a4, (uint64_t (*)(_QWORD))type metadata accessor for BorderedButton);
  return swift_retain();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance BorderedButtonStyle_CarMac@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return BorderedButtonStyle_CarMac.makeBody(configuration:)(a1, *(_QWORD *)v2, *(_BYTE *)(v2 + 8), a2);
}

uint64_t type metadata accessor for BorderedButton()
{
  uint64_t result;

  result = type metadata singleton initialization cache for BorderedButton;
  if (!type metadata singleton initialization cache for BorderedButton)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t BorderedButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[8];
  uint64_t (*v42)();
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52[10];
  uint64_t v53;
  char v54;
  char v55;
  __int128 v56;
  __int128 v57;
  char v58;

  v40 = a1;
  v37 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  MEMORY[0x1E0C80A78](v37, v2);
  v36 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UIButton.Configuration();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v12 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(0);
  v34 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>();
  v35 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (char *)(v1 + *(int *)(type metadata accessor for BorderedButton() + 24));
  v22 = *v21;
  v23 = v21[1];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)v12, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v24 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v25 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v12, v25 + v24, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v41[0] = v22;
  v41[1] = v23;
  v42 = partial apply for implicit closure #2 in implicit closure #1 in BorderedButton.body.getter;
  v43 = v25;
  v44 = 0;
  v45 = 0;
  v46 = 1;
  v47 = 514;
  v48 = 0;
  v49 = 1;
  v50 = 0;
  v51 = 0;
  KeyPath = swift_getKeyPath();
  v27 = static Edge.Set.all.getter();
  v53 = KeyPath;
  v54 = 1;
  v55 = v27;
  v56 = xmmword_187C1C1D0;
  v57 = xmmword_187C1C1D0;
  v58 = 0;
  specialized View.toolbarButtonLabel(ignoreEdge:)(0, v52);
  swift_release();
  if (*(_BYTE *)(v33[1] + 8) == 1)
    static UIButton.Configuration.borderedProminent()();
  else
    static UIButton.Configuration.bordered()();
  v29 = v38;
  v28 = v39;
  v30 = (uint64_t)v36;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v36, v7, v39);
  v31 = v30 + *(int *)(v37 + 20);
  *(_QWORD *)v31 = swift_getKeyPath();
  *(_BYTE *)(v31 + 8) = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v41, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
  outlined init with take of TableCellFormula(v30, (uint64_t)&v16[*(int *)(v34 + 36)], type metadata accessor for UIKitSystemButtonConfigurationModifier);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v28);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>);
  *(_WORD *)&v20[*(int *)(v35 + 36)] = 257;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>);
  return outlined init with take of TableCellFormula((uint64_t)v20, v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>);
}

uint64_t implicit closure #2 in implicit closure #1 in BorderedButton.body.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  void (*v22)(uint64_t);
  void (*v23)(void *);
  uint64_t v24;
  _BYTE v25[16];

  v2 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v10 + 24), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v12 = MEMORY[0x1E0CE2E18];
      outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
      LinkDestination.open()();
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))v12);
    }
    else
    {
      v18 = *(_QWORD *)v9;
      v19 = *((_QWORD *)v9 + 1);
      v20 = v9[16];
      v21 = (void *)*((_QWORD *)v9 + 3);
      v22 = (void (*)(uint64_t))*((_QWORD *)v9 + 4);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v19, v20);
      v23 = (void (*)(void *))specialized Environment.wrappedValue.getter(v18, v19, v20);
      v24 = outlined consume of Environment<AppIntentExecutor?>.Content(v18, v19, v20);
      if (v23)
      {
        v23(v21);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v23);
      }
      else
      {
        v22(v24);
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v18, v19, v20);

      return swift_release();
    }
  }
  else
  {
    v15 = *(_QWORD *)v9;
    v14 = *((_QWORD *)v9 + 1);
    v16 = type metadata accessor for MainActor();
    MEMORY[0x1E0C80A78](v16, v17);
    *(_QWORD *)&v25[-16] = v15;
    *(_QWORD *)&v25[-8] = v14;
    specialized static MainActor.assumeIsolated<A>(_:file:line:)((void (*)(void))partial apply for closure #1 in ButtonAction.callAsFunction(), (uint64_t)&v25[-32]);
    return swift_release();
  }
}

uint64_t sub_187299B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, MEMORY[0x1E0CE3928], a3);
}

uint64_t sub_187299B84()
{
  return EnvironmentValues.isInTouchBar.setter();
}

uint64_t sub_187299BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.enforceButtonDestructiveRoleAppearance.getter, a3);
}

uint64_t sub_187299BC8()
{
  return EnvironmentValues.enforceButtonDestructiveRoleAppearance.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnforceButtonDestructiveRoleAppearance()
{
  return &type metadata for EnforceButtonDestructiveRoleAppearance;
}

uint64_t initializeBufferWithCopyOfBuffer for BorderedButton(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v67;
  char v68;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    v7 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = a3[6];
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    *(_WORD *)(a1 + v8) = *(_WORD *)((char *)a2 + v8);
    v11 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    v12 = v9 + v11;
    v13 = v10 + v11;
    type metadata accessor for ButtonAction();
    swift_retain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v29 = *(_QWORD *)v13;
      v30 = *(_QWORD *)(v13 + 8);
      v31 = *(_BYTE *)(v13 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v13, v30, v31);
      *(_QWORD *)v12 = v29;
      *(_QWORD *)(v12 + 8) = v30;
      *(_BYTE *)(v12 + 16) = v31;
      v32 = *(_QWORD *)(v13 + 40);
      v33 = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v12 + 24) = v33;
      *(_QWORD *)(v12 + 40) = v32;
      v34 = (id)v33;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v15 = *(_QWORD *)v13;
        v16 = *(_QWORD *)(v13 + 8);
        v18 = *(_QWORD *)(v13 + 16);
        v17 = *(_QWORD *)(v13 + 24);
        v67 = *(_BYTE *)(v13 + 34);
        v19 = *(_WORD *)(v13 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v13, v16, v18, v17, v19, v67);
        *(_QWORD *)v12 = v15;
        *(_QWORD *)(v12 + 8) = v16;
        *(_QWORD *)(v12 + 16) = v18;
        *(_QWORD *)(v12 + 24) = v17;
        *(_WORD *)(v12 + 32) = v19;
        *(_BYTE *)(v12 + 34) = v67;
        v20 = *(_QWORD *)(v13 + 40);
        v21 = *(_QWORD *)(v13 + 48);
        v22 = *(_QWORD *)(v13 + 56);
        v23 = *(_QWORD *)(v13 + 64);
        v68 = *(_BYTE *)(v13 + 74);
        LOWORD(v18) = *(_WORD *)(v13 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v20, v21, v22, v23, v18, v68);
        *(_QWORD *)(v12 + 40) = v20;
        *(_QWORD *)(v12 + 48) = v21;
        *(_QWORD *)(v12 + 56) = v22;
        *(_QWORD *)(v12 + 64) = v23;
        *(_WORD *)(v12 + 72) = v18;
        *(_BYTE *)(v12 + 74) = v68;
        v24 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v25 = v12 + v24;
        v26 = v13 + v24;
        v27 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
        v28 = type metadata accessor for LinkDestination.Configuration();
        *(_BYTE *)(v25 + *(int *)(v28 + 20)) = *(_BYTE *)(v26 + *(int *)(v28 + 20));
LABEL_9:
        swift_storeEnumTagMultiPayload();
        v36 = a3[7];
        v37 = v7 + v36;
        v38 = (uint64_t)a2 + v36;
        v39 = *(_QWORD *)v38;
        v40 = *(_BYTE *)(v38 + 8);
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v38, v40);
        *(_QWORD *)v37 = v39;
        *(_BYTE *)(v37 + 8) = v40;
        v41 = a3[8];
        v42 = v7 + v41;
        v43 = (uint64_t)a2 + v41;
        v44 = *(_QWORD *)v43;
        v45 = *(_BYTE *)(v43 + 8);
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v43, v45);
        *(_QWORD *)v42 = v44;
        *(_BYTE *)(v42 + 8) = v45;
        v46 = a3[9];
        v47 = v7 + v46;
        v48 = (uint64_t *)((char *)a2 + v46);
        v49 = *v48;
        v50 = *((_BYTE *)v48 + 8);
        outlined copy of Environment<Color?>.Content(*v48, v50);
        *(_QWORD *)v47 = v49;
        *(_BYTE *)(v47 + 8) = v50;
        v51 = a3[10];
        v52 = v7 + v51;
        v53 = (uint64_t)a2 + v51;
        v54 = *(_QWORD *)v53;
        v55 = *(_BYTE *)(v53 + 8);
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v53, v55);
        *(_QWORD *)v52 = v54;
        *(_BYTE *)(v52 + 8) = v55;
        v56 = a3[11];
        v57 = v7 + v56;
        v58 = (uint64_t)a2 + v56;
        v59 = *(_QWORD *)v58;
        v60 = *(_BYTE *)(v58 + 9);
        LOBYTE(v52) = *(_BYTE *)(v58 + 8);
        outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v58, v52, v60);
        *(_QWORD *)v57 = v59;
        *(_BYTE *)(v57 + 8) = v52;
        *(_BYTE *)(v57 + 9) = v60;
        v61 = a3[12];
        v62 = v7 + v61;
        v63 = (uint64_t)a2 + v61;
        v64 = *(_QWORD *)v63;
        v65 = *(_BYTE *)(v63 + 8);
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v63, v65);
        *(_QWORD *)v62 = v64;
        *(_BYTE *)(v62 + 8) = v65;
        return v7;
      }
      v35 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *(_QWORD *)(v12 + 8) = v35;
    }
    swift_retain();
    goto LABEL_9;
  }
  v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  swift_retain();
  return v7;
}

uint64_t outlined copy of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if ((a6 & 1) != 0)
    return outlined copy of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  else
    return swift_retain();
}

uint64_t outlined copy of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_retain();
  if ((a5 & 1) != 0)
    return outlined copy of AppIntentExecutor?(a3);
  return result;
}

uint64_t destroy for BorderedButton(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  v4 = a1 + a2[6];
  v5 = v4 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_BYTE *)(v5 + 16));

LABEL_6:
      swift_release();
      break;
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_WORD *)(v5 + 32), *(_BYTE *)(v5 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_WORD *)(v5 + 72), *(_BYTE *)(v5 + 74));
      v7 = v5 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
      break;
    case 0:
      goto LABEL_6;
  }
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[8]), *(_BYTE *)(a1 + a2[8] + 8));
  outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + a2[9]), *(unsigned __int8 *)(a1 + a2[9] + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[10]), *(_BYTE *)(a1 + a2[10] + 8));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + a2[11]), *(unsigned __int8 *)(a1 + a2[11] + 8), *(_BYTE *)(a1 + a2[11] + 9));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + a2[12]), *(_BYTE *)(a1 + a2[12] + 8));
}

uint64_t initializeWithCopy for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v65;
  char v66;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  v9 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v10 = v7 + v9;
  v11 = v8 + v9;
  type metadata accessor for ButtonAction();
  swift_retain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v27 = *(_QWORD *)v11;
    v28 = *(_QWORD *)(v11 + 8);
    v29 = *(_BYTE *)(v11 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v11, v28, v29);
    *(_QWORD *)v10 = v27;
    *(_QWORD *)(v10 + 8) = v28;
    *(_BYTE *)(v10 + 16) = v29;
    v30 = *(_QWORD *)(v11 + 40);
    v31 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 24) = v31;
    *(_QWORD *)(v10 + 40) = v30;
    v32 = (id)v31;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v33 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v33;
    goto LABEL_6;
  }
  v13 = *(_QWORD *)v11;
  v14 = *(_QWORD *)(v11 + 8);
  v16 = *(_QWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v11 + 24);
  v65 = *(_BYTE *)(v11 + 34);
  v17 = *(_WORD *)(v11 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v11, v14, v16, v15, v17, v65);
  *(_QWORD *)v10 = v13;
  *(_QWORD *)(v10 + 8) = v14;
  *(_QWORD *)(v10 + 16) = v16;
  *(_QWORD *)(v10 + 24) = v15;
  *(_WORD *)(v10 + 32) = v17;
  *(_BYTE *)(v10 + 34) = v65;
  v18 = *(_QWORD *)(v11 + 40);
  v19 = *(_QWORD *)(v11 + 48);
  v20 = *(_QWORD *)(v11 + 56);
  v21 = *(_QWORD *)(v11 + 64);
  v66 = *(_BYTE *)(v11 + 74);
  LOWORD(v16) = *(_WORD *)(v11 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v16, v66);
  *(_QWORD *)(v10 + 40) = v18;
  *(_QWORD *)(v10 + 48) = v19;
  *(_QWORD *)(v10 + 56) = v20;
  *(_QWORD *)(v10 + 64) = v21;
  *(_WORD *)(v10 + 72) = v16;
  *(_BYTE *)(v10 + 74) = v66;
  v22 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v23 = v10 + v22;
  v24 = v11 + v22;
  v25 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  v26 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v23 + *(int *)(v26 + 20)) = *(_BYTE *)(v24 + *(int *)(v26 + 20));
LABEL_7:
  swift_storeEnumTagMultiPayload();
  v34 = a3[7];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = *(_QWORD *)v36;
  v38 = *(_BYTE *)(v36 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v36, v38);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = v38;
  v39 = a3[8];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = *(_QWORD *)v41;
  v43 = *(_BYTE *)(v41 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v41, v43);
  *(_QWORD *)v40 = v42;
  *(_BYTE *)(v40 + 8) = v43;
  v44 = a3[9];
  v45 = a1 + v44;
  v46 = (uint64_t *)(a2 + v44);
  v47 = *v46;
  v48 = *((_BYTE *)v46 + 8);
  outlined copy of Environment<Color?>.Content(*v46, v48);
  *(_QWORD *)v45 = v47;
  *(_BYTE *)(v45 + 8) = v48;
  v49 = a3[10];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_QWORD *)v51;
  v53 = *(_BYTE *)(v51 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v51, v53);
  *(_QWORD *)v50 = v52;
  *(_BYTE *)(v50 + 8) = v53;
  v54 = a3[11];
  v55 = a1 + v54;
  v56 = a2 + v54;
  v57 = *(_QWORD *)v56;
  v58 = *(_BYTE *)(v56 + 9);
  LOBYTE(v50) = *(_BYTE *)(v56 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v56, v50, v58);
  *(_QWORD *)v55 = v57;
  *(_BYTE *)(v55 + 8) = v50;
  *(_BYTE *)(v55 + 9) = v58;
  v59 = a3[12];
  v60 = a1 + v59;
  v61 = a2 + v59;
  v62 = *(_QWORD *)v61;
  v63 = *(_BYTE *)(v61 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v61, v63);
  *(_QWORD *)v60 = v62;
  *(_BYTE *)(v60 + 8) = v63;
  return a1;
}

uint64_t assignWithCopy for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  char v79;
  char v80;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v10 = *(int *)(v9 + 24);
    v11 = v7 + v10;
    v12 = v8 + v10;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v11, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v28 = *(_QWORD *)v12;
      v29 = *(_QWORD *)(v12 + 8);
      v30 = *(_BYTE *)(v12 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v12, v29, v30);
      *(_QWORD *)v11 = v28;
      *(_QWORD *)(v11 + 8) = v29;
      *(_BYTE *)(v11 + 16) = v30;
      v31 = *(void **)(v12 + 24);
      *(_QWORD *)(v11 + 24) = v31;
      v32 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v11 + 40) = v32;
      v33 = v31;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v14 = *(_QWORD *)v12;
        v15 = *(_QWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v12 + 16);
        v16 = *(_QWORD *)(v12 + 24);
        v79 = *(_BYTE *)(v12 + 34);
        v18 = *(_WORD *)(v12 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v12, v15, v17, v16, v18, v79);
        *(_QWORD *)v11 = v14;
        *(_QWORD *)(v11 + 8) = v15;
        *(_QWORD *)(v11 + 16) = v17;
        *(_QWORD *)(v11 + 24) = v16;
        *(_WORD *)(v11 + 32) = v18;
        *(_BYTE *)(v11 + 34) = v79;
        v19 = *(_QWORD *)(v12 + 40);
        v20 = *(_QWORD *)(v12 + 48);
        v21 = *(_QWORD *)(v12 + 56);
        v22 = *(_QWORD *)(v12 + 64);
        v80 = *(_BYTE *)(v12 + 74);
        LOWORD(v17) = *(_WORD *)(v12 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v19, v20, v21, v22, v17, v80);
        *(_QWORD *)(v11 + 40) = v19;
        *(_QWORD *)(v11 + 48) = v20;
        *(_QWORD *)(v11 + 56) = v21;
        *(_QWORD *)(v11 + 64) = v22;
        *(_WORD *)(v11 + 72) = v17;
        *(_BYTE *)(v11 + 74) = v80;
        v23 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v24 = v11 + v23;
        v25 = v12 + v23;
        v26 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
        v27 = type metadata accessor for LinkDestination.Configuration();
        *(_BYTE *)(v24 + *(int *)(v27 + 20)) = *(_BYTE *)(v25 + *(int *)(v27 + 20));
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      v34 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      *(_QWORD *)(v11 + 8) = v34;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  v35 = a3[7];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_QWORD *)v37;
  v39 = *(_BYTE *)(v37 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v37, v39);
  v40 = *(_QWORD *)v36;
  v41 = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = v39;
  outlined consume of Environment<Bool>.Content(v40, v41);
  v42 = a3[8];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_QWORD *)v44;
  v46 = *(_BYTE *)(v44 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v44, v46);
  v47 = *(_QWORD *)v43;
  v48 = *(_BYTE *)(v43 + 8);
  *(_QWORD *)v43 = v45;
  *(_BYTE *)(v43 + 8) = v46;
  outlined consume of Environment<Bool>.Content(v47, v48);
  v49 = a3[9];
  v50 = (uint64_t *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  v53 = *((_BYTE *)v51 + 8);
  outlined copy of Environment<Color?>.Content(*v51, v53);
  v54 = *v50;
  v55 = *((unsigned __int8 *)v50 + 8);
  *v50 = v52;
  *((_BYTE *)v50 + 8) = v53;
  outlined consume of Environment<Color?>.Content(v54, v55);
  v56 = a3[10];
  v57 = a1 + v56;
  v58 = a2 + v56;
  v59 = *(_QWORD *)v58;
  v60 = *(_BYTE *)(v58 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v58, v60);
  v61 = *(_QWORD *)v57;
  v62 = *(_BYTE *)(v57 + 8);
  *(_QWORD *)v57 = v59;
  *(_BYTE *)(v57 + 8) = v60;
  outlined consume of Environment<Bool>.Content(v61, v62);
  v63 = a3[11];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = *(_QWORD *)v65;
  v67 = *(_BYTE *)(v65 + 9);
  LOBYTE(v57) = *(_BYTE *)(v65 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v65, v57, v67);
  v68 = *(_QWORD *)v64;
  v69 = *(_BYTE *)(v64 + 9);
  *(_QWORD *)v64 = v66;
  v70 = *(unsigned __int8 *)(v64 + 8);
  *(_BYTE *)(v64 + 8) = v57;
  *(_BYTE *)(v64 + 9) = v67;
  outlined consume of Environment<CGFloat?>.Content(v68, v70, v69);
  v71 = a3[12];
  v72 = a1 + v71;
  v73 = a2 + v71;
  v74 = *(_QWORD *)v73;
  v75 = *(_BYTE *)(v73 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v73, v75);
  v76 = *(_QWORD *)v72;
  v77 = *(_BYTE *)(v72 + 8);
  *(_QWORD *)v72 = v74;
  *(_BYTE *)(v72 + 8) = v75;
  outlined consume of Environment<Bool>.Content(v76, v77);
  return a1;
}

uint64_t initializeWithTake for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  v9 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v10 = (char *)(v7 + v9);
  v11 = (char *)(v8 + v9);
  v12 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = *((_OWORD *)v11 + 1);
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v13;
    *(_DWORD *)(v10 + 31) = *(_DWORD *)(v11 + 31);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(_DWORD *)(v10 + 71) = *(_DWORD *)(v11 + 71);
    v14 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v15 = &v10[v14];
    v16 = &v11[v14];
    v17 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    v18 = type metadata accessor for LinkDestination.Configuration();
    v15[*(int *)(v18 + 20)] = v16[*(int *)(v18 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  v19 = a3[7];
  v20 = a3[8];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v25 = a3[9];
  v26 = a3[10];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a1 + v26;
  v30 = a2 + v26;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  v31 = a3[11];
  v32 = a3[12];
  v33 = a1 + v31;
  v34 = (uint64_t *)(a2 + v31);
  v35 = *v34;
  *(_WORD *)(v33 + 8) = *((_WORD *)v34 + 4);
  *(_QWORD *)v33 = v35;
  v36 = a1 + v32;
  v37 = a2 + v32;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v37;
  return a1;
}

uint64_t assignWithTake for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v10 = *(int *)(v9 + 24);
    v11 = (char *)(v7 + v10);
    v12 = (char *)(v8 + v10);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v13 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v14;
      *(_DWORD *)(v11 + 31) = *(_DWORD *)(v12 + 31);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
      *(_DWORD *)(v11 + 71) = *(_DWORD *)(v12 + 71);
      v15 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v16 = &v11[v15];
      v17 = &v12[v15];
      v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      v19 = type metadata accessor for LinkDestination.Configuration();
      v16[*(int *)(v19 + 20)] = v17[*(int *)(v19 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = (_BYTE)v22;
  outlined consume of Environment<Bool>.Content(v24, v25);
  v26 = a3[8];
  v27 = a1 + v26;
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  v30 = *(_QWORD *)v27;
  v31 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = (_BYTE)v28;
  outlined consume of Environment<Bool>.Content(v30, v31);
  v32 = a3[9];
  v33 = (uint64_t *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v35 = *v34;
  LOBYTE(v34) = *((_BYTE *)v34 + 8);
  v36 = *v33;
  v37 = *((unsigned __int8 *)v33 + 8);
  *v33 = v35;
  *((_BYTE *)v33 + 8) = (_BYTE)v34;
  outlined consume of Environment<Color?>.Content(v36, v37);
  v38 = a3[10];
  v39 = a1 + v38;
  v40 = (uint64_t *)(a2 + v38);
  v41 = *v40;
  LOBYTE(v40) = *((_BYTE *)v40 + 8);
  v42 = *(_QWORD *)v39;
  v43 = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v39 = v41;
  *(_BYTE *)(v39 + 8) = (_BYTE)v40;
  outlined consume of Environment<Bool>.Content(v42, v43);
  v44 = a3[11];
  v45 = a1 + v44;
  v46 = (uint64_t *)(a2 + v44);
  v47 = *v46;
  v48 = *((_BYTE *)v46 + 8);
  LOBYTE(v46) = *((_BYTE *)v46 + 9);
  v49 = *(_QWORD *)v45;
  v50 = *(_BYTE *)(v45 + 9);
  *(_QWORD *)v45 = v47;
  v51 = *(unsigned __int8 *)(v45 + 8);
  *(_BYTE *)(v45 + 8) = v48;
  *(_BYTE *)(v45 + 9) = (_BYTE)v46;
  outlined consume of Environment<CGFloat?>.Content(v49, v51, v50);
  v52 = a3[12];
  v53 = a1 + v52;
  v54 = (uint64_t *)(a2 + v52);
  v55 = *v54;
  LOBYTE(v54) = *((_BYTE *)v54 + 8);
  v56 = *(_QWORD *)v53;
  v57 = *(_BYTE *)(v53 + 8);
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = (_BYTE)v54;
  outlined consume of Environment<Bool>.Content(v56, v57);
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderedButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18729ABA0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for BorderedButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_18729AC34(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for BorderedButton()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_18729AD40()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<BorderedButton> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<BorderedButton>, MEMORY[0x1E0CE4108]);
}

void type metadata accessor for _UnaryViewAdaptor<BorderedButton>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<BorderedButton>)
  {
    type metadata accessor for BorderedButton();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type BorderedButton and conformance BorderedButton, (uint64_t (*)(uint64_t))type metadata accessor for BorderedButton, (uint64_t)&protocol conformance descriptor for BorderedButton);
    v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<BorderedButton>);
  }
}

uint64_t associated type witness table accessor for View.Body : View in BorderedButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BorderedButton()
{
  type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(0);
  lazy protocol witness table accessor for type ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

void type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
}

void type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v6 = type metadata accessor for UIKitButton(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>);
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E0CE5058], MEMORY[0x1E0CE5048], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE4A60], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE4A60], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>();
    v2 = v1;
    v3[0] = &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>();
    v2[0] = MEMORY[0x1E0CE2BC0];
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier;
  if (!lazy protocol witness table cache variable for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarButtonLabelModifier, &type metadata for ToolbarButtonLabelModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>)
  {
    type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>);
  }
}

uint64_t sub_18729B330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + *(int *)(v1 + 24) + ((v2 + 16) & ~v2);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
      v5 = v3 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in BorderedButton.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8) + 80);
  return implicit closure #2 in implicit closure #1 in BorderedButton.body.getter(v0 + ((v1 + 16) & ~v1));
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>, (uint64_t)&protocol witness table for UIKitSystemButtonConfigurationModifier);
}

uint64_t lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, (uint64_t)&protocol conformance descriptor for UIKitButton<A>);
}

uint64_t sub_18729B4AC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>, lazy protocol witness table accessor for type ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35C0]);
}

uint64_t type metadata accessor for HoverEffectResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for HoverEffectResponder;
  if (!type metadata singleton initialization cache for HoverEffectResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for HoverEffectResponder()
{
  return swift_initClassMetadata2();
}

uint64_t static PointerHoverEffectModifier._makeView(modifier:inputs:body:)@<X0>(__int128 *a1@<X1>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  __int128 v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int OffsetAttribute2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = a1[3];
  v62 = a1[2];
  v63 = v5;
  v64 = a1[4];
  v6 = *((_DWORD *)a1 + 20);
  v65 = v6;
  v7 = a1[1];
  v60 = *a1;
  v61 = v7;
  v8 = *(_QWORD *)a1;
  v9 = *((_DWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 2);
  v33 = *(__int128 *)((char *)a1 + 40);
  v34 = *(__int128 *)((char *)a1 + 24);
  v32 = *(__int128 *)((char *)a1 + 56);
  v11 = *((_QWORD *)a1 + 9);
  v36 = v63;
  v37 = DWORD2(v63);
  *(_QWORD *)&v50 = v63;
  DWORD2(v50) = DWORD2(v63);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v30 = v10;
    v31 = v9;
    UniqueID.init()();
    v29 = v50;
    closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)((uint64_t)&v60, v50, a2);
    v12 = v35;
    v14 = DWORD2(v35);
    v13 = HIDWORD(v35);
    v50 = v35;
    result = _ViewOutputs.subscript.getter();
    if ((result & 0x100000000) != 0)
    {
LABEL_5:
      *(_QWORD *)a3 = v12;
      *(_DWORD *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 12) = v13;
      return result;
    }
    v16 = result;
    v28 = v8;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<PointerHoverEffectModifier>, (uint64_t)&type metadata for PointerHoverEffectModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    _GraphValue.value.getter();
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    _GraphValue.value.getter();
    v26 = AGGraphCreateOffsetAttribute2();
    v17 = _ViewOutputs.viewResponders()();
    v25 = _ViewInputs.animatedPosition()();
    v24 = _ViewInputs.transform.getter();
    v18 = _ViewInputs.animatedSize()();
    v19 = _ViewInputs.containerPosition.getter();
    _GraphValue.value.getter();
    v20 = AGGraphCreateOffsetAttribute2();
    v52 = v62;
    v53 = v63;
    v54 = v64;
    LODWORD(v55) = v65;
    v50 = v60;
    v51 = v61;
    swift_getKeyPath();
    v21 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    result = (uint64_t)(id)AGSubgraphGetCurrent();
    if (result)
    {
      *(_QWORD *)&v50 = __PAIR64__(v26, OffsetAttribute2);
      *((_QWORD *)&v50 + 1) = __PAIR64__(v25, v17);
      *(_QWORD *)&v51 = __PAIR64__(v18, v24);
      *((_QWORD *)&v51 + 1) = __PAIR64__(v20, v19);
      *(_QWORD *)&v52 = __PAIR64__(v16, v21);
      *((_QWORD *)&v52 + 1) = v28;
      LODWORD(v53) = v31;
      *((_QWORD *)&v53 + 1) = v30;
      v54 = v34;
      v55 = v33;
      v56 = v32;
      *(_QWORD *)&v57 = v11;
      DWORD2(v57) = v6;
      *(_QWORD *)&v58 = v29;
      *((_QWORD *)&v58 + 1) = result;
      v59 = 0;
      v46 = v32;
      v47 = v57;
      v48 = v58;
      v49 = 0;
      v42 = v52;
      v43 = v53;
      v44 = v34;
      v45 = v33;
      v40 = v25;
      v41 = v51;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      outlined retain of _ViewInputs((uint64_t)&v60);
      type metadata accessor for [ViewResponder]();
      lazy protocol witness table accessor for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter();
      Attribute.init<A>(body:value:flags:update:)();
      outlined release of HoverEffectResponderFilter((uint64_t)&v50);
      v22 = _ViewOutputs.subscript.setter();
      v38 = v36;
      v39 = v37;
      MEMORY[0x1E0C80A78](v22, v23);
      outlined retain of [Text.Modifier]((uint64_t)&v36);
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      result = swift_bridgeObjectRelease();
      v12 = v35;
      v14 = DWORD2(v35);
      v13 = HIDWORD(v35);
      goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
    v52 = v62;
    v53 = v63;
    v54 = v64;
    LODWORD(v55) = v65;
    v50 = v60;
    v51 = v61;
    return ((uint64_t (*)(void))a2)();
  }
  return result;
}

uint64_t closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[32];
  int v16;
  __int128 v17;
  _BYTE v18[32];
  _BYTE v19[32];
  int v20;
  uint64_t v21;

  v4 = HIDWORD(a2);
  v21 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v18[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)v19 = v5;
  v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 16);
  v17 = *(_OWORD *)a1;
  *(_OWORD *)v18 = v7;
  *(_OWORD *)&v14[8] = *(_OWORD *)&v18[16];
  *(_OWORD *)v15 = v6;
  *(_OWORD *)&v15[16] = *(_OWORD *)(a1 + 64);
  v20 = *(_DWORD *)(a1 + 80);
  outlined retain of _ViewInputs(a1);
  _ViewInputs.transform.getter();
  _ViewInputs.position.getter();
  v12 = v4;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  v10 = v17;
  v11 = DWORD2(v17);
  v13 = *(_QWORD *)v18;
  *(_OWORD *)v14 = *(_OWORD *)&v18[8];
  *(_QWORD *)&v14[16] = *(_QWORD *)&v18[24];
  *(_QWORD *)v15 = *(_QWORD *)v19;
  *(_OWORD *)&v15[8] = *(_OWORD *)&v19[8];
  *(_QWORD *)&v15[24] = *(_QWORD *)&v19[24];
  v16 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance PointerHoverEffectModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t HoverEffectResponderFilter.responder.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v1 = closure #1 in HoverEffectResponderFilter.responder.getter(v0);
    *(_QWORD *)(v0 + 144) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in HoverEffectResponderFilter.responder.getter(uint64_t a1)
{
  id v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v13 = *(id *)(a1 + 136);
  AGGraphClearUpdate();
  v2 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_DWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  type metadata accessor for HoverEffectResponder();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 288) = 3;
  *(_DWORD *)(v10 + 292) = 0;
  *(_BYTE *)(v10 + 296) = 1;
  v14 = v9;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = *(_OWORD *)(a1 + 64);
  v19 = v6;
  v20 = v7;
  v21 = *(_OWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 112);
  v23 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v15, &v14);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v11;
}

uint64_t HoverEffectResponderFilter.updateValue()()
{
  uint64_t *Value;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  char v20;
  int *v21;
  char v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  _QWORD v39[2];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  Value = (uint64_t *)AGGraphGetValue();
  v2 = v1;
  v3 = *Value;
  v4 = Value[1];
  v5 = AGGraphGetValue();
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  if (((v2 | v6) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    v10 = HoverEffectResponderFilter.responder.getter();
    v41 = v8;
    v42 = v9;
    *(double *)(v10 + 216) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v10 + 224) = v11;
    swift_release();
    v12 = HoverEffectResponderFilter.responder.getter();
    *(_QWORD *)&v40 = v3;
    *((_QWORD *)&v40 + 1) = v4;
    *(double *)(v12 + 232) = MEMORY[0x18D755E9C]();
    *(_QWORD *)(v12 + 240) = v13;
    swift_release();
    v14 = HoverEffectResponderFilter.responder.getter();
    *(_QWORD *)(v14 + 248) = AGCreateWeakAttribute();
    swift_release();
  }
  v15 = HoverEffectResponderFilter.responder.getter();
  *(_BYTE *)(v15 + 256) = *(_BYTE *)AGGraphGetValue();
  swift_release();
  v16 = HoverEffectResponderFilter.responder.getter();
  *(_BYTE *)(v16 + 296) = *(_BYTE *)AGGraphGetValue();
  swift_release();
  v17 = (char *)AGGraphGetValue();
  v19 = v18;
  v20 = *v17;
  v21 = (int *)AGGraphGetValue();
  v23 = v22;
  v24 = *v21;
  *(_DWORD *)(HoverEffectResponderFilter.responder.getter() + 292) = v24;
  swift_release();
  *(_BYTE *)(HoverEffectResponderFilter.responder.getter() + 288) = v20;
  swift_release();
  HoverEffectResponderFilter.responder.getter();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  swift_release();
  v26 = HoverEffectResponderFilter.responder.getter();
  *(_QWORD *)&v40 = v3;
  *((_QWORD *)&v40 + 1) = v4;
  v27 = MEMORY[0x18D755E9C]();
  v29 = v28;
  v40 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v26 + 272) = v27 - MEMORY[0x18D755E9C]();
  *(double *)(v26 + 280) = v29 - v30;
  swift_release();
  if (AGGraphGetOutputValue() && ((v23 & 1) != 0 || (v19 & 1) != 0 || ((v7 | v2) & 1) != 0))
  {
    v31 = HoverEffectResponderFilter.responder.getter();
    swift_beginAccess();
    v32 = MEMORY[0x18D760234](v31 + 16);
    v33 = *(_QWORD *)(v31 + 24);
    swift_release();
    if (v32)
    {
      ObjectType = swift_getObjectType();
      v35 = type metadata accessor for PointerHost();
      (*(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v33 + 16))(v39, v35, v35, ObjectType, v33);
      swift_unknownObjectRelease();
      if (v39[0])
      {
        v36 = v39[1];
        *(_QWORD *)(swift_allocObject() + 24) = v36;
        swift_unknownObjectWeakInit();
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_unknownObjectRelease();
        swift_release_n();
      }
    }
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v38 + 32) = HoverEffectResponderFilter.responder.getter();
    v39[0] = v38;
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in HoverEffectResponderFilter.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t ObjectType;

  v2 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x18D760234](v2);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

void HoverEffectResponder.contentShapeKind.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

Swift::Void __swiftcall HoverEffectResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x6666457265766F68;
  v1._object = (void *)0xEB00000000746365;
  String.append(_:)(v1);
}

uint64_t HoverEffectResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HoverEffectResponder()
{
  return type metadata accessor for HoverEffectResponder();
}

ValueMetadata *type metadata accessor for HasHoverEffectKey()
{
  return &type metadata for HasHoverEffectKey;
}

ValueMetadata *type metadata accessor for PointerHoverEffectModifier()
{
  return &type metadata for PointerHoverEffectModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in PointerHoverEffectModifier()
{
  return &protocol witness table for PointerHoverEffectModifier;
}

unint64_t lazy protocol witness table accessor for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter;
  if (!lazy protocol witness table cache variable for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverEffectResponderFilter, &unk_1E1AEE7B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter);
  }
  return result;
}

uint64_t outlined release of HoverEffectResponderFilter(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t type metadata accessor for PointerHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PointerHost;
  if (!lazy cache variable for type metadata for PointerHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PointerHost);
  }
  return result;
}

uint64_t sub_18729C480()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HoverEffectResponderFilter.updateValue()()
{
  uint64_t v0;

  return closure #1 in HoverEffectResponderFilter.updateValue()(v0);
}

uint64_t destroy for HoverEffectResponderFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for HoverEffectResponderFilter(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v5 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HoverEffectResponderFilter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v4 = *(void **)(a2 + 136);
  v5 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for HoverEffectResponderFilter(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectResponderFilter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for HoverEffectResponderFilter()
{
  return &unk_1E1AEE7B0;
}

void specialized GesturePhase.map<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t, uint64_t);
  char *v10;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a1;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = MEMORY[0x1E0CE17C0];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  MEMORY[0x1E0C80A78](v6, v7);
  outlined init with copy of TableRowList?(v2, (uint64_t)v11 - v8, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)v5, v9);
  v10 = (char *)sub_18729C9C8 + 4 * byte_187C1C660[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_18729C9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v4) == 1)
  {
    v6 = type metadata accessor for RotateGesture.Value();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v0, 1, 1, v6);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of TableRowList?(v3, (uint64_t)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  else
  {
    outlined init with take of TableCellFormula(v3, v2, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
    (*(void (**)(uint64_t))(v5 - 88))(v2);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v2, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
    v8 = type metadata accessor for RotateGesture.Value();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v0, 0, 1, v8);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t specialized VelocitySampler.addSample(_:time:)(double a1, double a2, double a3)
{
  uint64_t v3;
  double v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if ((*(_BYTE *)(v3 + 104) & 1) != 0)
    goto LABEL_8;
  v4 = *(double *)(v3 + 96);
  if (v4 > a3)
  {
    _StringGuts.grow(_:)(18);
    v5._countAndFlagsBits = 0x2064696C61766E49;
    v5._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v5);
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    _print_unlocked<A, B>(_:_:)();
    v6._countAndFlagsBits = 32;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    _StringGuts.grow(_:)(27);
    v7._countAndFlagsBits = 0x6D69742068746977;
    v7._object = (void *)0xEA00000000002065;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 0x207473616C203E20;
    v8._object = (void *)0xED000020656D6974;
    String.append(_:)(v8);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if (a3 - v4 >= 2.22044605e-16)
  {
LABEL_8:
    *(double *)(v3 + 96) = a3;
    *(_BYTE *)(v3 + 104) = 0;
    if ((*(_BYTE *)(v3 + 88) & 1) != 0)
    {
      if ((*(_BYTE *)(v3 + 56) & 1) != 0)
      {
        if ((*(_BYTE *)(v3 + 24) & 1) == 0)
          goto LABEL_7;
LABEL_11:
        *(double *)v3 = a1;
        *(double *)(v3 + 8) = a2;
        *(double *)(v3 + 16) = a3;
        *(_BYTE *)(v3 + 24) = 0;
        return result;
      }
    }
    else
    {
      v11 = *(_QWORD *)(v3 + 80);
      v12 = *(_QWORD *)(v3 + 48);
      v13 = *(_BYTE *)(v3 + 56);
      *(_OWORD *)v3 = *(_OWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v12;
      *(_BYTE *)(v3 + 24) = v13;
      *(_OWORD *)(v3 + 32) = *(_OWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 48) = v11;
      *(_BYTE *)(v3 + 56) = 0;
    }
  }
  else if ((*(_BYTE *)(v3 + 88) & 1) != 0)
  {
    if ((*(_BYTE *)(v3 + 56) & 1) == 0)
    {
LABEL_7:
      *(double *)(v3 + 32) = a1;
      *(double *)(v3 + 40) = a2;
      *(double *)(v3 + 48) = a3;
      *(_BYTE *)(v3 + 56) = 0;
      return result;
    }
    goto LABEL_11;
  }
  *(double *)(v3 + 64) = a1;
  *(double *)(v3 + 72) = a2;
  *(double *)(v3 + 80) = a3;
  *(_BYTE *)(v3 + 88) = 0;
  return result;
}

uint64_t specialized VelocitySampler.addSample(_:time:)(double a1, double a2)
{
  uint64_t v2;
  double v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  char v10;

  if ((*(_BYTE *)(v2 + 80) & 1) != 0)
    goto LABEL_8;
  v3 = *(double *)(v2 + 72);
  if (v3 > a2)
  {
    _StringGuts.grow(_:)(18);
    v4._countAndFlagsBits = 0x2064696C61766E49;
    v4._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    _StringGuts.grow(_:)(27);
    v6._countAndFlagsBits = 0x6D69742068746977;
    v6._object = (void *)0xEA00000000002065;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 0x207473616C203E20;
    v7._object = (void *)0xED000020656D6974;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if (a2 - v3 >= 2.22044605e-16)
  {
LABEL_8:
    *(double *)(v2 + 72) = a2;
    *(_BYTE *)(v2 + 80) = 0;
    if ((*(_BYTE *)(v2 + 64) & 1) != 0)
    {
      if ((*(_BYTE *)(v2 + 40) & 1) != 0)
      {
        if ((*(_BYTE *)(v2 + 16) & 1) == 0)
          goto LABEL_7;
LABEL_11:
        *(double *)v2 = a1;
        *(double *)(v2 + 8) = a2;
        *(_BYTE *)(v2 + 16) = 0;
        return result;
      }
    }
    else
    {
      v10 = *(_BYTE *)(v2 + 40);
      *(_OWORD *)v2 = *(_OWORD *)(v2 + 24);
      *(_BYTE *)(v2 + 16) = v10;
      *(_OWORD *)(v2 + 24) = *(_OWORD *)(v2 + 48);
      *(_BYTE *)(v2 + 40) = 0;
    }
  }
  else if ((*(_BYTE *)(v2 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 40) & 1) == 0)
    {
LABEL_7:
      *(double *)(v2 + 24) = a1;
      *(double *)(v2 + 32) = a2;
      *(_BYTE *)(v2 + 40) = 0;
      return result;
    }
    goto LABEL_11;
  }
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
  *(_BYTE *)(v2 + 64) = 0;
  return result;
}

{
  uint64_t v2;
  double v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  char v10;

  if ((*(_BYTE *)(v2 + 80) & 1) != 0)
    goto LABEL_8;
  v3 = *(double *)(v2 + 72);
  if (v3 > a2)
  {
    _StringGuts.grow(_:)(18);
    v4._countAndFlagsBits = 0x2064696C61766E49;
    v4._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    _StringGuts.grow(_:)(27);
    v6._countAndFlagsBits = 0x6D69742068746977;
    v6._object = (void *)0xEA00000000002065;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 0x207473616C203E20;
    v7._object = (void *)0xED000020656D6974;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if (a2 - v3 >= 2.22044605e-16)
  {
LABEL_8:
    *(double *)(v2 + 72) = a2;
    *(_BYTE *)(v2 + 80) = 0;
    if ((*(_BYTE *)(v2 + 64) & 1) != 0)
    {
      if ((*(_BYTE *)(v2 + 40) & 1) != 0)
      {
        if ((*(_BYTE *)(v2 + 16) & 1) == 0)
          goto LABEL_7;
LABEL_11:
        *(double *)v2 = a1;
        *(double *)(v2 + 8) = a2;
        *(_BYTE *)(v2 + 16) = 0;
        return result;
      }
    }
    else
    {
      v10 = *(_BYTE *)(v2 + 40);
      *(_OWORD *)v2 = *(_OWORD *)(v2 + 24);
      *(_BYTE *)(v2 + 16) = v10;
      *(_OWORD *)(v2 + 24) = *(_OWORD *)(v2 + 48);
      *(_BYTE *)(v2 + 40) = 0;
    }
  }
  else if ((*(_BYTE *)(v2 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 40) & 1) == 0)
    {
LABEL_7:
      *(double *)(v2 + 24) = a1;
      *(double *)(v2 + 32) = a2;
      *(_BYTE *)(v2 + 40) = 0;
      return result;
    }
    goto LABEL_11;
  }
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
  *(_BYTE *)(v2 + 64) = 0;
  return result;
}

double specialized VelocitySampler.velocity.getter()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;
  _BYTE v10[32];
  _BYTE v11[32];
  _BYTE v12[32];
  _BYTE v13[32];
  _BYTE v14[32];
  double v15;
  double v16;
  char v17;

  v1 = MEMORY[0x1E0DEB940];
  outlined init with take of Binding<SearchFieldState>(v0, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v12, (uint64_t)&v15, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v12, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if ((v13[24] & 1) != 0)
    return 0.0;
  v2 = v15;
  v3 = v16;
  outlined init with take of Binding<SearchFieldState>(v0 + 32, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v11, (uint64_t)&v15, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v11, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if ((v14[24] & 1) != 0)
    return 0.0;
  v6 = v15;
  v7 = v16;
  v4 = (v15 - v2) * (1.0 / (v16 - v3));
  outlined init with take of Binding<SearchFieldState>(v0 + 64, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v10, (uint64_t)&v8, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v10, (uint64_t)&v15, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  if ((v17 & 1) == 0)
    return (v8 - v6) * (1.0 / (v9 - v7)) + *(double *)(v0 + 112) * (v4 - (v8 - v6) * (1.0 / (v9 - v7)));
  return v4;
}

{
  return specialized VelocitySampler.velocity.getter((uint64_t)&lazy cache variable for type metadata for (CGFloat, Time)?, (uint64_t)&lazy cache variable for type metadata for (CGFloat, Time), MEMORY[0x1E0DEF040]);
}

double specialized VelocitySampler.velocity.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[24];
  double v20;
  double v21;
  char v22;

  outlined init with take of Binding<SearchFieldState>(v3, (uint64_t)v17, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v17, (uint64_t)&v20, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v17, (uint64_t)v18, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  if ((v18[16] & 1) != 0)
    return 0.0;
  v7 = v20;
  v8 = v21;
  outlined init with take of Binding<SearchFieldState>(v3 + 24, (uint64_t)v16, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v16, (uint64_t)&v20, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v16, (uint64_t)v19, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  if ((v19[16] & 1) != 0)
    return 0.0;
  v11 = v20;
  v12 = v21;
  v9 = (v20 - v7) * (1.0 / (v21 - v8));
  outlined init with take of Binding<SearchFieldState>(v3 + 48, (uint64_t)v15, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v15, (uint64_t)&v13, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Binding<SearchFieldState>((uint64_t)v15, (uint64_t)&v20, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  if ((v22 & 1) == 0)
    return (v13 - v11) * (1.0 / (v14 - v12)) + *(double *)(v3 + 88) * (v9 - (v13 - v11) * (1.0 / (v14 - v12)));
  return v9;
}

double RotationGesture.minimumAngleDelta.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*RotationGesture.minimumAngleDelta.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static RotationGesture._makeGesture(gesture:inputs:)()
{
  lazy protocol witness table accessor for type RotationGesture and conformance RotationGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

unint64_t lazy protocol witness table accessor for type RotationGesture and conformance RotationGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture;
  if (!lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RotationGesture, &type metadata for RotationGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture;
  if (!lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RotationGesture, &type metadata for RotationGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture);
  }
  return result;
}

__n128 RotationGesture.internalBody.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v3 = *v1;
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  result = v5;
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

void RotateGesture.init(minimumAngleDelta:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double specialized implicit closure #1 in RotationGesture.internalBody.getter@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + *(int *)(type metadata accessor for RotateGesture.Value() + 20));
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for RotateGesture.Value()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RotateGesture.Value;
  if (!type metadata singleton initialization cache for RotateGesture.Value)
    return swift_getSingletonMetadata();
  return result;
}

__n128 protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance RotationGesture@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v3 = *v1;
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  result = v5;
  *(_QWORD *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance RotationGesture()
{
  lazy protocol witness table accessor for type RotationGesture and conformance RotationGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance RotationGesture()
{
  protocol witness for Gesture.body.getter in conformance RotationGesture();
}

{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t RotateGesture.Value.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t RotateGesture.Value.time.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*RotateGesture.Value.time.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.rotation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 20));
}

uint64_t RotateGesture.Value.rotation.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for RotateGesture.Value();
  *(double *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*RotateGesture.Value.rotation.modify())(_QWORD)
{
  type metadata accessor for RotateGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.velocity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 24));
}

uint64_t RotateGesture.Value.velocity.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for RotateGesture.Value();
  *(double *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*RotateGesture.Value.velocity.modify())(_QWORD)
{
  type metadata accessor for RotateGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.startAnchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 28));
}

uint64_t RotateGesture.Value.startAnchor.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for RotateGesture.Value();
  v6 = (double *)(v2 + *(int *)(result + 28));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*RotateGesture.Value.startAnchor.modify())(_QWORD)
{
  type metadata accessor for RotateGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.startLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 32));
}

uint64_t RotateGesture.Value.startLocation.setter(double a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v6;

  result = type metadata accessor for RotateGesture.Value();
  v6 = (double *)(v2 + *(int *)(result + 32));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*RotateGesture.Value.startLocation.modify())(_QWORD)
{
  type metadata accessor for RotateGesture.Value();
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.minimumAngleDelta.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void RotateGesture.minimumAngleDelta.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*RotateGesture.minimumAngleDelta.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static RotateGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<RotateGesture>, (uint64_t)&type metadata for RotateGesture, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _GestureInputs.size.getter();
  _GestureInputs.position.getter();
  _GestureInputs.transform.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>();
  lazy protocol witness table accessor for type RotateGesture.Child and conformance RotateGesture.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>, MEMORY[0x1E0CE2E88]);
  return static Gesture.makeDebuggableGesture(gesture:inputs:)();
}

uint64_t closure #1 in RotateGesture.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;

  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E0CE49F0]);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - v7;
  v9 = MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v22 - v16;
  outlined init with copy of TableRowList?(a1, (uint64_t)&v22 - v16, (uint64_t)&lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t)type metadata accessor for RotateGesture.Value, (uint64_t)v9, v18);
  outlined init with copy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value(a1, (uint64_t)v8);
  v19 = type metadata accessor for RotateGesture.Value();
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48);
  if (v20(v17, 1, v19) == 1)
  {
    outlined init with copy of TableRowList?((uint64_t)&v8[*(int *)(v5 + 52)], (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t)type metadata accessor for RotateGesture.Value, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    result = v20(v13, 1, v19);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      outlined destroy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value((uint64_t)v8);
      outlined init with take of TableCellFormula((uint64_t)v13, a2, (uint64_t (*)(_QWORD))type metadata accessor for RotateGesture.Value);
      return outlined destroy of TableRowList?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t)type metadata accessor for RotateGesture.Value, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
  }
  else
  {
    outlined destroy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value((uint64_t)v8);
    return outlined init with take of TableCellFormula((uint64_t)v17, a2, (uint64_t (*)(_QWORD))type metadata accessor for RotateGesture.Value);
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance RotateGesture.Child@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 57) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance RotateGesture.Child@<Q0>(__n128 *a1@<X8>)
{
  _DWORD *v1;
  unsigned __int32 v3;
  unsigned __int32 v4;
  unsigned __int32 v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E0CE49F0]);
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  result = v8;
  a1->n128_u64[0] = v6;
  a1->n128_u32[2] = v3;
  a1->n128_u32[3] = v5;
  a1[1].n128_u32[0] = v4;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u32[1] = v5;
  a1[2].n128_u32[2] = v4;
  a1[3] = v8;
  a1[4].n128_u64[0] = 2;
  a1[4].n128_u8[8] = 0;
  return result;
}

void protocol witness for Gesture.body.getter in conformance RotateGesture()
{
  protocol witness for Gesture.body.getter in conformance RotationGesture();
}

void protocol witness for GestureStateProtocol.init() in conformance TransformBasedRotationGesture.StateType(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = 0x3FE8000000000000;
}

uint64_t closure #1 in TransformBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25[11];
  char v26;
  __int128 v27;
  char v28;
  __int128 v29;
  char v30;
  __int128 v31;
  char v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(unsigned __int8 *)(a2 + 88);
  if ((*(_BYTE *)a1 & 1) == 0)
    __asm { BR              X9 }
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_BYTE *)(a1 + 16);
  v18 = *(_BYTE *)(a1 + 40);
  v19 = *(_BYTE *)(a1 + 64);
  v20 = *(_BYTE *)(a1 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_BYTE *)(a1 + 104);
  v23 = *(_QWORD *)(a1 + 112);
  LOBYTE(v27) = *(_BYTE *)a1;
  *((_QWORD *)&v27 + 1) = v16;
  v28 = v17;
  v29 = *(_OWORD *)(a1 + 24);
  v30 = v18;
  v31 = *(_OWORD *)(a1 + 48);
  v32 = v19;
  v33 = *(_OWORD *)(a1 + 72);
  v34 = v20;
  v35 = v21;
  v36 = v22;
  v37 = v23;
  v25[0] = v4;
  v25[1] = v5;
  v25[2] = v7;
  v25[3] = v6;
  v25[4] = v9;
  v25[5] = v8;
  v25[6] = v11;
  v25[7] = v10;
  v25[8] = v12;
  v25[9] = v13;
  v25[10] = v14;
  v26 = v15;
  return TransformBasedRotationGesture.phase(state:childPhase:)(&v27, v25, a3);
}

uint64_t TransformBasedRotationGesture.phase(state:childPhase:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  v18 = *a1;
  v5 = *a2;
  v4 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  v11 = a2[6];
  v10 = a2[7];
  v13 = a2[8];
  v12 = a2[9];
  v14 = a2[10];
  v15 = *((unsigned __int8 *)a2 + 88);
  if ((_DWORD)v15 == 3 && !(v4 | v5 | v7 | v6 | v9 | v8 | v11 | v10 | v13 | v12 | v14))
    goto LABEL_10;
  if ((v18 & 1) != 0)
    __asm { BR              X5 }
  if ((_DWORD)v15 == 2 || (_DWORD)v15 == 3 && !(v4 | v5 | v7 | v6 | v9 | v8 | v11 | v10 | v13 | v12 | v14))
  {
LABEL_10:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  }
  else
  {
    v16 = type metadata accessor for RotateGesture.Value();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  }
  return swift_storeEnumTagMultiPayload();
}

void sub_18729E608(char a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  v13 = a2;
  LOBYTE(v15) = a1;
  v16 = v11;
  v17 = v10;
  v18 = v9;
  v19 = v8;
  v20 = v7;
  v21 = v6;
  v22 = v5;
  v23 = v4;
  v24 = a3;
  closure #1 in TransformBasedRotationGesture.phase(state:childPhase:)((uint64_t)va, (uint64_t)va1, v12);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  JUMPOUT(0x18729E758);
}

void sub_18729E66C(char a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  va_arg(va1, _QWORD);
  v13 = a2;
  LOBYTE(v15) = a1;
  v16 = v11;
  v17 = v10;
  v18 = v9;
  v19 = v8;
  v20 = v7;
  v21 = v6;
  v22 = v5;
  v23 = v4;
  v24 = a3;
  closure #1 in TransformBasedRotationGesture.phase(state:childPhase:)((uint64_t)va, (uint64_t)va1, v12);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  JUMPOUT(0x18729E758);
}

int *closure #1 in TransformBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  int *result;
  __int128 v23;
  double v24;
  __int128 v25;
  __int128 v26;
  double v27;
  double *v28;
  _QWORD *v29;
  _OWORD v30[6];
  _BYTE v31[16];
  double v32;
  char v33;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(double *)(a1 + 72);
  v12 = *(double *)(a1 + 80);
  v13 = TransformGestureAnchorHelper.startPoints(_:)();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  Date.init(timeIntervalSinceReferenceDate:)();
  v20 = MEMORY[0x1E0CE7040];
  v21 = MEMORY[0x1E0DEB940];
  outlined init with take of Binding<SearchFieldState>(a2 + 8, (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for Angle?, MEMORY[0x1E0CE7040], (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  result = (int *)outlined init with take of Binding<SearchFieldState>((uint64_t)v31, (uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for Angle?, v20, (uint64_t)v21, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if ((v33 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 72);
    v24 = ((v11 * 128.0 + v12 * 128.0) * 0.0078125 * 128.0 - v32 * 128.0) * 0.0078125;
    v30[2] = *(_OWORD *)(a2 + 56);
    v30[3] = v23;
    v25 = *(_OWORD *)(a2 + 104);
    v30[4] = *(_OWORD *)(a2 + 88);
    v30[5] = v25;
    v26 = *(_OWORD *)(a2 + 40);
    v30[0] = *(_OWORD *)(a2 + 24);
    v30[1] = v26;
    v27 = specialized VelocitySampler.velocity.getter((uint64_t)&lazy cache variable for type metadata for (Double, Time)?, (uint64_t)&lazy cache variable for type metadata for (Double, Time), MEMORY[0x1E0DEB070])* 0.0078125;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, v6);
    result = (int *)type metadata accessor for RotateGesture.Value();
    *(double *)(a3 + result[5]) = v24;
    *(double *)(a3 + result[6]) = v27;
    v28 = (double *)(a3 + result[7]);
    *v28 = v13;
    *((_QWORD *)v28 + 1) = v15;
    v29 = (_QWORD *)(a3 + result[8]);
    *v29 = v17;
    v29[1] = v19;
  }
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance TransformBasedRotationGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[48];
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  char v13[8];
  uint64_t v14;

  v3 = *v1;
  v4 = *((_DWORD *)v1 + 4);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v12 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v10, (uint64_t)v9);
  v5 = MEMORY[0x1E0CE53B0];
  outlined init with copy of TableRowList?((uint64_t)v9, (uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, (uint64_t)MEMORY[0x1E0CE53B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v13[0] = 1;
  outlined destroy of TableRowList?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  outlined destroy of CoordinateSpace((uint64_t)v10);
  v6 = swift_allocObject();
  v7 = v1[1];
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 32) = v4;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
  *(_QWORD *)(a1 + 56) = partial apply for closure #1 in TransformBasedRotationGesture.body.getter;
  *(_QWORD *)(a1 + 64) = v6;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
}

double protocol witness for GestureStateProtocol.init() in conformance TouchBasedRotationGesture.StateType@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0x3FE8000000000000;
  *(_QWORD *)(a1 + 136) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

uint64_t TouchBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  __int128 v10;
  _BYTE v11[56];
  uint64_t v12;
  _BYTE v13[56];
  _BYTE v14[56];
  _BYTE v15[112];
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;

  if (one-time initialization token for all != -1)
    swift_once();
  v22 = static _EventDirections.all;
  v18 = 0u;
  v19 = 0u;
  v17 = 0x3FF0000000000000;
  v20 = 0;
  v21 = 2;
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v13);
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v14);
  outlined init with copy of DragGesture((uint64_t)v13, (uint64_t)v11);
  outlined init with copy of DragGesture((uint64_t)v14, (uint64_t)&v12);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>);
  type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>(0);
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  MapGesture.init(_:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  v16 = v10;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  v8 = swift_allocObject();
  *(double *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a1;
  *(_DWORD *)(v8 + 32) = a2;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, a3, (uint64_t (*)(_QWORD))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  *(_QWORD *)(a3 + 128) = partial apply for closure #2 in TouchBasedRotationGesture.body.getter;
  *(_QWORD *)(a3 + 136) = v8;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  return outlined destroy of DragGesture((uint64_t)&v17);
}

uint64_t closure #1 in TouchBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  v9 = a2 + *(int *)(v8 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for DragGesture.Value);
  type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v10 + 44), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>);
  return outlined init with take of TableCellFormula((uint64_t)v7, v9, type metadata accessor for DragGesture.Value);
}

uint64_t TouchBasedRotationGesture.phase(state:childPhase:)@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int EnumCaseMultiPayload;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double *v54;
  double v55;
  double v56;
  char v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  double *v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  double v83;
  double v84;
  long double v85;
  double *v86;
  double v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  double v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  int v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  char *v130;
  uint64_t v131;

  v123 = a4;
  v122 = a3;
  v128 = a1;
  v131 = a5;
  v129 = type metadata accessor for Date();
  v126 = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v129, v8);
  v125 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v124 = (char *)&v110 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v130 = (char *)&v110 - v15;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v110 - v18;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  v21 = v20;
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v110 - v27;
  MEMORY[0x1E0C80A78](v29, v30);
  v127 = (uint64_t)&v110 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v110 - v34;
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v110 - v38;
  v41 = *(int *)(v40 + 48);
  outlined init with copy of TableRowList?(a2, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)MEMORY[0x1E0CE17C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (!EnumCaseMultiPayload)
    {
      v88 = type metadata accessor for RotateGesture.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v131, 1, 1, v88);
      v89 = MEMORY[0x1E0CE17C0];
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
      swift_storeEnumTagMultiPayload();
      return outlined destroy of TableRowList?((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), (uint64_t)v89, (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
    }
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
    return swift_storeEnumTagMultiPayload();
  }
  v120 = v24;
  v121 = v28;
  v115 = a6;
  v118 = a2;
  v43 = (uint64_t)&v39[v41];
  v44 = *(int *)(v21 + 48);
  v45 = (uint64_t)&v35[v44];
  v46 = (uint64_t)&v19[v44];
  outlined init with take of TableCellFormula((uint64_t)v19, (uint64_t)v35, type metadata accessor for DragGesture.Value);
  outlined init with take of TableCellFormula(v46, v45, type metadata accessor for DragGesture.Value);
  outlined init with take of TableCellFormula((uint64_t)v35, (uint64_t)v39, type metadata accessor for DragGesture.Value);
  outlined init with take of TableCellFormula(v45, v43, type metadata accessor for DragGesture.Value);
  v47 = (uint64_t)&v35[*(int *)(v21 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v39, (uint64_t)v35, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v47, type metadata accessor for DragGesture.Value);
  v48 = type metadata accessor for DragGesture.Value(0);
  v49 = (double *)&v35[*(int *)(v48 + 24)];
  v50 = *v49;
  v51 = v49[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, type metadata accessor for DragGesture.Value);
  v52 = v127;
  v53 = v127 + *(int *)(v21 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v39, v127, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v53, type metadata accessor for DragGesture.Value);
  v54 = (double *)(v53 + *(int *)(v48 + 24));
  v55 = *v54;
  v56 = v54[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v53, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, type metadata accessor for DragGesture.Value);
  v57 = *((_BYTE *)v128 + 144);
  v58 = v55;
  v59 = v56;
  v114 = v50;
  v60 = v51;
  if ((v57 & 1) == 0)
  {
    v58 = *((double *)v128 + 16);
    v59 = *((double *)v128 + 17);
    v50 = *((double *)v128 + 14);
    v60 = *((double *)v128 + 15);
  }
  v110 = v50;
  v111 = v60;
  v112 = v58;
  v113 = v59;
  v61 = (uint64_t)&v35[*(int *)(v21 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v39, (uint64_t)v35, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v61, type metadata accessor for DragGesture.Value);
  v62 = (double *)&v35[*(int *)(v48 + 20)];
  v63 = *v62;
  v64 = v62[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, type metadata accessor for DragGesture.Value);
  v65 = v48;
  v66 = v52 + *(int *)(v21 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v39, v52, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v66, type metadata accessor for DragGesture.Value);
  v116 = v65;
  v67 = (double *)(v66 + *(int *)(v65 + 20));
  v69 = *v67;
  v68 = v67[1];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v66, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v61, type metadata accessor for DragGesture.Value);
  v70 = (uint64_t)v121;
  v119 = &v121[*(int *)(v21 + 48)];
  v71 = (uint64_t)v119;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v39, (uint64_t)v121, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v71, type metadata accessor for DragGesture.Value);
  v72 = v126;
  v73 = *(void (**)(char *, uint64_t, uint64_t))(v126 + 16);
  v74 = v124;
  v75 = (uint64_t)v39;
  v76 = v129;
  v73(v124, v70, v129);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v70, type metadata accessor for DragGesture.Value);
  v117 = v21;
  v77 = (uint64_t)v120;
  v78 = (uint64_t)&v120[*(int *)(v21 + 48)];
  v121 = (char *)v75;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v75, (uint64_t)v120, type metadata accessor for DragGesture.Value);
  v79 = v43;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, v78, type metadata accessor for DragGesture.Value);
  v80 = v125;
  v73(v125, v78, v76);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v78, type metadata accessor for DragGesture.Value);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
    v81 = v80;
  else
    v81 = v74;
  v73(v130, (uint64_t)v81, v76);
  v82 = *(void (**)(char *, uint64_t))(v72 + 8);
  v82(v80, v76);
  v82(v74, v76);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v77, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v119, type metadata accessor for DragGesture.Value);
  Date.timeIntervalSinceReferenceDate.getter();
  v84 = v83;
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v85 = specialized TouchBasedRotationGesture.angle(between:and:)(v110, v111, v112, v113, v63, v64, v69, v68);
    v86 = (double *)v128;
    v87 = (v85 * 128.0 + *((double *)v128 + 13) * 128.0) * 0.0078125;
  }
  else
  {
    v91 = atan2(v51 - v56, v114 - v55);
    v87 = atan2(v64 - v68, v63 - v69) - v91;
    v86 = (double *)v128;
  }
  v86[13] = v87;
  v86[14] = v63;
  v92 = v131;
  v86[15] = v64;
  v86[16] = v69;
  v86[17] = v68;
  *((_BYTE *)v86 + 144) = 0;
  specialized VelocitySampler.addSample(_:time:)(v87 * 128.0, v84);
  if ((*(_BYTE *)v86 & 1) == 0)
  {
    v93 = v130;
    if (fabs(v87) < v115)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      v82(v93, v129);
      v94 = type metadata accessor for RotateGesture.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v92, 1, 1, v94);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE17C0]);
      return swift_storeEnumTagMultiPayload();
    }
    *(_BYTE *)v86 = 1;
  }
  v95 = v117;
  v96 = (uint64_t)&v35[*(int *)(v117 + 48)];
  v97 = (uint64_t)v121;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v121, (uint64_t)v35, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, v96, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, type metadata accessor for DragGesture.Value);
  v98 = *(int *)(v95 + 48);
  v128 = v82;
  v99 = v127;
  v100 = v127 + v98;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v97, v127, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, v100, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v100, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v99, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v96, type metadata accessor for DragGesture.Value);
  v101 = (uint64_t)&v35[*(int *)(v95 + 48)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v97, (uint64_t)v35, type metadata accessor for DragGesture.Value);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, v101, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, type metadata accessor for DragGesture.Value);
  v102 = v99 + *(int *)(v95 + 48);
  outlined init with take of TableCellFormula(v97, v99, type metadata accessor for DragGesture.Value);
  outlined init with take of TableCellFormula(v79, v102, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v102, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v99, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v101, type metadata accessor for DragGesture.Value);
  TransformGestureAnchorHelper.startPoints(_:)();
  v105 = MEMORY[0x1E0C80A78](v103, v104);
  v106 = v130;
  *((_QWORD *)&v110 - 6) = v130;
  *((_QWORD *)&v110 - 5) = v86;
  *(&v110 - 4) = v105;
  *((_QWORD *)&v110 - 3) = v107;
  *((_QWORD *)&v110 - 2) = v108;
  *((_QWORD *)&v110 - 1) = v109;
  specialized GesturePhase.map<A>(_:)((uint64_t)partial apply for closure #1 in TouchBasedRotationGesture.phase(state:childPhase:), (uint64_t)(&v110 - 8));
  return ((uint64_t (*)(char *, uint64_t))v128)(v106, v129);
}

int *closure #1 in TouchBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  int *result;
  double *v18;
  double *v19;

  v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a3, a1, v14);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = specialized VelocitySampler.velocity.getter((uint64_t)&lazy cache variable for type metadata for (Double, Time)?, (uint64_t)&lazy cache variable for type metadata for (Double, Time), MEMORY[0x1E0DEB070])* 0.0078125;
  result = (int *)type metadata accessor for RotateGesture.Value();
  *(_QWORD *)(a3 + result[5]) = v15;
  *(double *)(a3 + result[6]) = v16;
  v18 = (double *)(a3 + result[7]);
  *v18 = a4;
  v18[1] = a5;
  v19 = (double *)(a3 + result[8]);
  *v19 = a6;
  v19[1] = a7;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance TouchBasedRotationGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return TouchBasedRotationGesture.body.getter(*(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16), a1, *(double *)v1);
}

BOOL specialized static RotateGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  _BOOL4 v11;

  if ((static Date.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for RotateGesture.Value();
  if (*(double *)(a1 + *(int *)(v4 + 20)) != *(double *)(a2 + *(int *)(v4 + 20)))
    return 0;
  v5 = v4;
  if (*(double *)(a1 + *(int *)(v4 + 24)) != *(double *)(a2 + *(int *)(v4 + 24))
    || (static UnitPoint.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  v6 = *(int *)(v5 + 32);
  v7 = *(double *)(a1 + v6);
  v8 = *(double *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9;
  return v8 == v10 && v11;
}

void type metadata accessor for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for CategoryGesture<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E0CE2C58]);
    type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>();
    lazy protocol witness table accessor for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>, MEMORY[0x1E0CE14D8]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>);
  }
}

void type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(255, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, MEMORY[0x1E0CE49F8]);
    type metadata accessor for RotateGesture.Value();
    lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>();
    v0 = type metadata accessor for _MapGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture;
  if (!lazy protocol witness table cache variable for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformBasedRotationGesture, &type metadata for TransformBasedRotationGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture;
  if (!lazy protocol witness table cache variable for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TouchBasedRotationGesture, &type metadata for TouchBasedRotationGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>;
  if (!lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(255, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, MEMORY[0x1E0CE49F8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4A08], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for CategoryGesture<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E0CE2C58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2C68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RotateGesture.Child and conformance RotateGesture.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RotateGesture.Child and conformance RotateGesture.Child;
  if (!lazy protocol witness table cache variable for type RotateGesture.Child and conformance RotateGesture.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RotateGesture.Child, &unk_1E1AB6550);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotateGesture.Child and conformance RotateGesture.Child);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in RotationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in RotationGesture()
{
  return &protocol witness table for RotationGesture;
}

_UNKNOWN **base witness table accessor for Gesture in RotateGesture()
{
  return &protocol witness table for RotateGesture;
}

ValueMetadata *type metadata accessor for RotationGesture()
{
  return &type metadata for RotationGesture;
}

ValueMetadata *type metadata accessor for RotateGesture()
{
  return &type metadata for RotateGesture;
}

uint64_t *initializeBufferWithCopyOfBuffer for RotateGesture.Value(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    *(_OWORD *)((char *)a1 + v9) = *(_OWORD *)((char *)a2 + v9);
  }
  return a1;
}

uint64_t initializeWithCopy for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v10 = a3[8];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  return a1;
}

uint64_t initializeWithTake for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RotateGesture.Value()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18729FEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RotateGesture.Value()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18729FF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for RotateGesture.Value()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_18729FFF4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<RotateGesture, Angle> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<RotateGesture, Angle>, MEMORY[0x1E0CE14D8]);
}

void type metadata accessor for _MapGesture<RotateGesture, Angle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _MapGesture<RotateGesture, Angle>)
  {
    v0 = type metadata accessor for _MapGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<RotateGesture, Angle>);
  }
}

ValueMetadata *type metadata accessor for RotateGesture.Value.Platform()
{
  return &type metadata for RotateGesture.Value.Platform;
}

void *type metadata accessor for RotateGesture.Child()
{
  return &unk_1E1AB6550;
}

ValueMetadata *type metadata accessor for TouchBasedRotationGesture()
{
  return &type metadata for TouchBasedRotationGesture;
}

ValueMetadata *type metadata accessor for TransformBasedRotationGesture()
{
  return &type metadata for TransformBasedRotationGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TouchBasedRotationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TransformBasedRotationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1872A00E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TransformBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in TransformBasedRotationGesture.body.getter(a1, a2, a3);
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    type metadata accessor for EventListener<TransformEvent>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EventListener<TransformEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<TransformEvent>, MEMORY[0x1E0CE1EC0]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
  }
}

void type metadata accessor for EventListener<TransformEvent>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EventListener<TransformEvent>)
  {
    lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();
    v0 = type metadata accessor for EventListener();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<TransformEvent>);
  }
}

unint64_t lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent;
  if (!lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformEvent, &type metadata for TransformEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent;
  if (!lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformEvent, &type metadata for TransformEvent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE53B0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<TransformEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 == 2 || a12 == 1)
    return swift_release();
  if (!a12)
    return outlined consume of HitTestableEvent?(result, a2, a3);
  return result;
}

void type metadata accessor for (CGFloat, Time)?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for (Double, Time)(255, a3);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with copy of DragGesture(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for DragGesture(a2, a1, &type metadata for DragGesture);
  return a2;
}

void type metadata accessor for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!lazy cache variable for type metadata for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>)
  {
    type metadata accessor for Tuple<DragGesture, EmptyTuple>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Tuple<DragGesture, EmptyTuple> and conformance Tuple<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Tuple<DragGesture, EmptyTuple>, (uint64_t)&protocol conformance descriptor for Tuple<A, B>);
    v5 = type metadata accessor for Tuple(a1, (uint64_t)&type metadata for DragGesture, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>);
  }
}

void type metadata accessor for Tuple<DragGesture, EmptyTuple>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Tuple<DragGesture, EmptyTuple>)
  {
    v0 = type metadata accessor for Tuple(0, (uint64_t)&type metadata for DragGesture, (uint64_t)&type metadata for EmptyTuple, (uint64_t)&protocol witness table for EmptyTuple);
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture, EmptyTuple>);
  }
}

void type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>)
  {
    v2 = type metadata accessor for DragGesture.Value(255);
    type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>(255);
    v4 = v3;
    v5 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Tuple<DragGesture.Value, EmptyTuple> and conformance Tuple<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>, (uint64_t)&protocol conformance descriptor for Tuple<A, B>);
    v6 = type metadata accessor for Tuple(a1, v2, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>);
  }
}

void type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for Tuple<DragGesture.Value, EmptyTuple>)
  {
    v2 = type metadata accessor for DragGesture.Value(255);
    v3 = type metadata accessor for Tuple(a1, v2, (uint64_t)&type metadata for EmptyTuple, (uint64_t)&protocol witness table for EmptyTuple);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture.Value, EmptyTuple>);
  }
}

void type metadata accessor for (DragGesture.Value, DragGesture.Value)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value))
  {
    type metadata accessor for DragGesture.Value(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value));
  }
}

uint64_t type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>;
  if (!lazy cache variable for type metadata for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>)
  {
    type metadata accessor for TupleGesture<DragGesture, EmptyTupleGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleGesture<DragGesture, EmptyTupleGesture> and conformance TupleGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for TupleGesture<DragGesture, EmptyTupleGesture>, (uint64_t)&protocol conformance descriptor for TupleGesture<A, B>);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Tuple<DragGesture.Value, EmptyTuple> and conformance Tuple<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>, (uint64_t)&protocol conformance descriptor for Tuple<A, B>);
    type metadata accessor for TupleGesture();
  }
  return result;
}

uint64_t type metadata accessor for TupleGesture<DragGesture, EmptyTupleGesture>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for TupleGesture<DragGesture, EmptyTupleGesture>;
  if (!lazy cache variable for type metadata for TupleGesture<DragGesture, EmptyTupleGesture>)
    type metadata accessor for TupleGesture();
  return result;
}

uint64_t sub_1872A0708()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TouchBasedRotationGesture.body.getter@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return TouchBasedRotationGesture.phase(state:childPhase:)(a1, a2, *(_QWORD *)(v3 + 24), *(_DWORD *)(v3 + 32), a3, *(double *)(v3 + 16));
}

void type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>)
  {
    type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>();
    type metadata accessor for (DragGesture.Value, DragGesture.Value)();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>> and conformance TupleGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (uint64_t)&protocol conformance descriptor for TupleGesture<A, B>);
    v0 = type metadata accessor for _MapGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  }
}

uint64_t outlined destroy of DragGesture(uint64_t a1)
{
  destroy for DragGesture(a1);
  return a1;
}

int *partial apply for closure #1 in TouchBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TouchBasedRotationGesture.phase(state:childPhase:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

long double specialized TouchBasedRotationGesture.angle(between:and:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  long double result;
  BOOL v11;

  v8 = (a2 - a4) / (a1 - a3);
  v9 = (a6 - a8) / (a5 - a7);
  if (v8 * v9 != -1.0)
    return -atan((v8 - v9) / (v8 * v9 + 1.0));
  if (v9 < v8)
    return 1.57079633;
  v11 = v8 < v9;
  result = -1.57079633;
  if (!v11)
    return 0.0;
  return result;
}

void type metadata accessor for (Double, Time)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time))
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time));
  }
}

void type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedRotationGesture;
    v8[1] = &type metadata for TouchBasedRotationGesture;
    v8[2] = lazy protocol witness table accessor for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture();
    v6 = a3(a1, v8);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined init with copy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E0CE49F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E0CE49F0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformBasedRotationGesture.StateType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[120])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformBasedRotationGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for TransformBasedRotationGesture.StateType()
{
  return &unk_1E1AFB2A8;
}

__n128 __swift_memcpy145_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TouchBasedRotationGesture.StateType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[145])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchBasedRotationGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 145) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for TouchBasedRotationGesture.StateType()
{
  return &unk_1E1AEC558;
}

uint64_t sub_1872A0C24()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>)
  {
    type metadata accessor for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, MEMORY[0x1E0CE51E0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>);
  }
}

void type metadata accessor for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>)
  {
    type metadata accessor for RotateGesture.Value();
    lazy protocol witness table accessor for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType();
    v0 = type metadata accessor for StateContainerGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType;
  if (!lazy protocol witness table cache variable for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformBasedRotationGesture.StateType, &unk_1E1AFB2A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType);
  }
  return result;
}

uint64_t sub_1872A0DD8()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>)
  {
    type metadata accessor for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>();
    type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value> and conformance StateContainerGesture<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, MEMORY[0x1E0CE51E0]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>, MEMORY[0x1E0CE14D8]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
  }
}

void type metadata accessor for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>)
  {
    type metadata accessor for (DragGesture.Value, DragGesture.Value)();
    type metadata accessor for RotateGesture.Value();
    lazy protocol witness table accessor for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType();
    v0 = type metadata accessor for StateContainerGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>);
  }
}

unint64_t lazy protocol witness table accessor for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType;
  if (!lazy protocol witness table cache variable for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TouchBasedRotationGesture.StateType, &unk_1E1AEC558);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType);
  }
  return result;
}

uint64_t static _AnimatableView._makeView(view:inputs:)()
{
  static Animatable.makeAnimatable(value:inputs:)();
  _GraphValue.init(_:)();
  return static View.makeView(view:inputs:)();
}

uint64_t static _AnimatableView._makeViewList(view:inputs:)()
{
  static Animatable.makeAnimatable(value:inputs:)();
  _GraphValue.init(_:)();
  return static View.makeViewList(view:inputs:)();
}

uint64_t TextField.init<A>(_:format:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[17];

  v27 = a8;
  v30 = a7;
  v31 = a6;
  v29 = a5;
  v32 = a3;
  v33 = a4;
  v34 = a1;
  v28 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, a11, a13, (uint64_t)v35);
  v19 = v35[12];
  v20 = v35[13];
  v21 = v35[14];
  v22 = v35[15];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1, 1, v23);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)v35, v19, v20, v21, v22, 0, v32, v33, v28, v29, v31, 0, (uint64_t)v18, v30, v27, a10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 8))(a2, a11);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  v24 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v34, v24);
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[17];

  v27 = a8;
  v30 = a7;
  v31 = a6;
  v29 = a5;
  v32 = a3;
  v33 = a4;
  v34 = a1;
  v28 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, a11, a13, (uint64_t)v35);
  v19 = v35[12];
  v20 = v35[13];
  v21 = v35[14];
  v22 = v35[15];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1, 1, v23);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)v35, v19, v20, v21, v22, 0, v32, v33, v28, v29, v31, 0, (uint64_t)v18, v30, v27, a10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 8))(a2, a11);
  swift_getAssociatedTypeWitness();
  v24 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v34, v24);
}

uint64_t TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[17];

  v45 = a6;
  v44 = a5;
  v46 = a3;
  v47 = a4;
  v43 = a9;
  v41 = a16;
  v40 = a14;
  v39 = a13;
  v42 = a12;
  v48 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = 0;
  v49 = a7;
  if (a7)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    if (a10)
    {
      v24 = v49;
      outlined copy of AppIntentExecutor?(v49);
      v27 = v48;
      outlined copy of AppIntentExecutor?(a10);
      v25 = a8;
      v26 = a10;
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
  }
  static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(a1, a2, v24, v25, v26, v27, a15, (uint64_t)v50);
  v36 = a2;
  v37 = a15;
  v29 = v50[12];
  v28 = v50[13];
  v38 = a1;
  v35 = a8;
  v30 = v50[14];
  v31 = v50[15];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v23, 1, 1, v32);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)v50, v29, v28, v30, v31, 0, v46, v47, v43, v44, v45, 0, (uint64_t)v23, v42, v39, v40);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v49);

  outlined consume of TextFieldState.FormatActions?(v24);
  v33 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v38, v33);
}

uint64_t TextField.$state.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  char v49;
  char v50;
  char v51;

  v4 = (uint64_t *)(v2 + *(int *)(a1 + 52));
  v5 = v4[3];
  v6 = v4[5];
  v7 = v4[6];
  v8 = v4[7];
  v9 = v4[11];
  if ((*((_BYTE *)v4 + 107) & 1) != 0)
  {
    v10 = *((unsigned __int16 *)v4 + 52) | (*((unsigned __int8 *)v4 + 106) << 16);
    v30 = HIDWORD(v4[12]);
    v31 = v4[2];
    v29 = v4[13] & 1;
    v27 = HIBYTE(*((_WORD *)v4 + 52));
    v33 = v4[1];
    v34 = *v4;
    v32 = v4[4];
    v11 = v4[8];
    v12 = v4[10];
    v13 = v4[9];
    v28 = v4[12];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v32);
    result = outlined copy of TextFieldState.FormatActions?(v11);
    v15 = v27;
    v16 = v29;
    v18 = v30;
    v17 = v31;
    v19 = v13;
    v20 = v12;
    v21 = v11;
    v22 = v32;
    v23 = v33;
    v24 = v34;
    v25 = v28 & 1;
    v26 = HIWORD(v10) & 1;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    result = State.projectedValue.getter();
    v24 = v35;
    v23 = v36;
    v17 = v37;
    v5 = v38;
    v22 = v39;
    v6 = v40;
    v7 = v41;
    v8 = v42;
    v21 = v43;
    v19 = v44;
    v20 = v45;
    v9 = v46;
    v25 = v47;
    v18 = v48;
    v16 = v49;
    v15 = v50;
    LOBYTE(v26) = v51;
  }
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v23;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v22;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v21;
  *(_QWORD *)(a2 + 72) = v19;
  *(_QWORD *)(a2 + 80) = v20;
  *(_QWORD *)(a2 + 88) = v9;
  *(_BYTE *)(a2 + 96) = v25;
  *(_DWORD *)(a2 + 100) = v18;
  *(_BYTE *)(a2 + 104) = v16;
  *(_BYTE *)(a2 + 105) = v15;
  *(_BYTE *)(a2 + 106) = v26;
  return result;
}

uint64_t TextField.$text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17)
{
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v67 = a5;
  v68 = a7;
  v60 = a6;
  v65 = a9;
  v66 = a3;
  v64 = a16;
  v69 = a15;
  v70 = a17;
  v63 = a14;
  v61 = a8;
  v62 = a13;
  v58 = a11;
  v59 = a4;
  v57 = a12 & 1;
  v19 = *(_OWORD *)a1;
  v54 = *(_OWORD *)(a1 + 16);
  v55 = v19;
  v53 = *(_OWORD *)(a1 + 32);
  v52 = *(_OWORD *)(a1 + 48);
  v51 = *(_QWORD *)(a1 + 64);
  v50 = *(_QWORD *)(a1 + 72);
  v20 = *(unsigned __int8 *)(a1 + 89);
  v21 = *(_BYTE *)(a1 + 90);
  v22 = *(_BYTE *)(a1 + 80) & 1;
  v23 = *(_BYTE *)(a1 + 88) & 1;
  v24 = *(unsigned int *)(a1 + 84);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v50 - v27;
  v30 = (char *)&v50 + *(int *)(v29 + 56) - v27;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = v54;
  *((_OWORD *)v28 + 7) = v55;
  *((_OWORD *)v28 + 8) = v32;
  v33 = v52;
  *((_OWORD *)v28 + 9) = v53;
  *((_OWORD *)v28 + 10) = v33;
  v34 = v50;
  *((_QWORD *)v28 + 22) = v51;
  *((_QWORD *)v28 + 23) = v34;
  *((_QWORD *)v28 + 24) = v22 | (v24 << 32);
  *((_QWORD *)v28 + 25) = (v23 | (v20 << 8)) & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(v21 & 1) << 16);
  *((_QWORD *)v28 + 26) = 0;
  *((_DWORD *)v28 + 54) = 0;
  v56 = a2;
  v35 = v66;
  v36 = v67;
  *(_QWORD *)v28 = a2;
  *((_QWORD *)v28 + 1) = v35;
  *((_QWORD *)v28 + 2) = v59;
  *((_QWORD *)v28 + 3) = v36;
  v28[32] = v60;
  v37 = v68;
  v38 = v61;
  *((_QWORD *)v28 + 10) = v68;
  *((_QWORD *)v28 + 11) = v38;
  *((_QWORD *)v28 + 12) = a10;
  v39 = v58;
  *((_QWORD *)v28 + 13) = v58;
  v28[72] = v57;
  outlined retain of TextFieldState(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v40 = v37;
  v41 = v38;
  outlined copy of Text?(v40, v38, a10, v39);
  v42 = v62;
  outlined assign with copy of Binding<TextSelection?>?(v62, (uint64_t)v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v43 = Text.init(_:tableName:bundle:comment:)();
  v45 = v44;
  LOBYTE(v36) = v46;
  v48 = v47;
  outlined consume of Text?(v68, v41, a10, v39);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined release of TextFieldState(a1);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v42, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  *((_QWORD *)v28 + 5) = v43;
  *((_QWORD *)v28 + 6) = v45;
  v28[56] = v36 & 1;
  *((_QWORD *)v28 + 8) = v48;
  outlined init with take of TextField<Text>((uint64_t)v28, v65);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

double specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void (*a14)(__int128 *__return_ptr, uint64_t))
{
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v41;
  char v42;
  uint64_t v43;

  v33 = *(_OWORD *)(a1 + 16);
  v34 = *(_OWORD *)a1;
  v31 = *(_OWORD *)(a1 + 48);
  v32 = *(_OWORD *)(a1 + 32);
  v29 = *(_QWORD *)(a1 + 72);
  v30 = *(_QWORD *)(a1 + 64);
  v17 = *(unsigned __int8 *)(a1 + 89);
  v18 = *(_BYTE *)(a1 + 90);
  v19 = *(_BYTE *)(a1 + 80) & 1;
  v20 = *(_BYTE *)(a1 + 88) & 1;
  v21 = *(unsigned int *)(a1 + 84);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v23 = a9 + *(int *)(v22 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_OWORD *)(a9 + 112) = v34;
  *(_OWORD *)(a9 + 128) = v33;
  *(_OWORD *)(a9 + 144) = v32;
  *(_OWORD *)(a9 + 160) = v31;
  *(_QWORD *)(a9 + 176) = v30;
  *(_QWORD *)(a9 + 184) = v29;
  *(_QWORD *)(a9 + 192) = v19 | (v21 << 32);
  *(_QWORD *)(a9 + 200) = (v20 | (v17 << 8)) & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(v18 & 1) << 16);
  *(_QWORD *)(a9 + 208) = 0;
  *(_DWORD *)(a9 + 216) = 0;
  *(_QWORD *)a9 = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_BYTE *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 80) = a7;
  *(_QWORD *)(a9 + 88) = a8;
  *(_QWORD *)(a9 + 96) = a10;
  *(_QWORD *)(a9 + 104) = a11;
  *(_BYTE *)(a9 + 72) = a12 & 1;
  outlined retain of TextFieldState(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a7, a8, a10, a11);
  v25 = outlined assign with copy of Binding<TextSelection?>?(a13, v23);
  a14(&v41, v25);
  outlined consume of Text?(a7, a8, a10, a11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined release of TextFieldState(a1);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a13, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  v26 = v42;
  v27 = v43;
  result = *(double *)&v41;
  *(_OWORD *)(a9 + 40) = v41;
  *(_BYTE *)(a9 + 56) = v26;
  *(_QWORD *)(a9 + 64) = v27;
  return result;
}

uint64_t TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void (*a14)(uint64_t), uint64_t a15, uint64_t a16)
{
  __int128 v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v59 = a7;
  v63 = a6;
  v71 = a3;
  v72 = a5;
  v62 = a4;
  v70 = a2;
  v68 = a14;
  v64 = a8;
  v65 = a13;
  v66 = a15;
  v60 = a12 & 1;
  v18 = *(_OWORD *)a1;
  v56 = *(_OWORD *)(a1 + 16);
  v57 = v18;
  v55 = *(_OWORD *)(a1 + 32);
  v54 = *(_OWORD *)(a1 + 48);
  v53 = *(_QWORD *)(a1 + 64);
  v52 = *(_QWORD *)(a1 + 72);
  v19 = *(_BYTE *)(a1 + 80);
  v20 = *(_BYTE *)(a1 + 88);
  v50 = *(unsigned __int8 *)(a1 + 89);
  v49 = *(unsigned __int8 *)(a1 + 90);
  v21 = v19 & 1;
  v22 = v20 & 1;
  v69 = *(_QWORD *)(a16 - 8);
  v67 = a16;
  v23 = *(unsigned int *)(a1 + 84);
  MEMORY[0x1E0C80A78](a1, a16);
  v61 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for TextField(0, v25, v26, v27);
  v29 = (uint64_t *)(a9 + *(int *)(v28 + 48));
  v30 = v28;
  v51 = a9 + *(int *)(v28 + 56);
  v31 = v51;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v30;
  v58 = v30;
  v34 = a9 + *(int *)(v30 + 52);
  v35 = v56;
  *(_OWORD *)v34 = v57;
  *(_OWORD *)(v34 + 16) = v35;
  v36 = v22 | (v50 << 8);
  v37 = v54;
  *(_OWORD *)(v34 + 32) = v55;
  *(_OWORD *)(v34 + 48) = v37;
  v38 = v36 & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(v49 & 1) << 16);
  v39 = v52;
  *(_QWORD *)(v34 + 64) = v53;
  *(_QWORD *)(v34 + 72) = v39;
  *(_QWORD *)(v34 + 80) = v21 | (v23 << 32);
  *(_QWORD *)(v34 + 88) = v38;
  *(_QWORD *)(v34 + 96) = 0;
  *(_DWORD *)(v34 + 104) = 0;
  v40 = v71;
  *(_QWORD *)a9 = v70;
  *(_QWORD *)(a9 + 8) = v40;
  v41 = v72;
  *(_QWORD *)(a9 + 16) = v62;
  *(_QWORD *)(a9 + 24) = v41;
  *(_BYTE *)(a9 + 32) = v63;
  v42 = v59;
  v43 = v64;
  *v29 = v59;
  v29[1] = v43;
  v29[2] = a10;
  v29[3] = a11;
  *(_BYTE *)(a9 + *(int *)(v33 + 44)) = v60;
  outlined retain of TextFieldState(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(v42, v43, a10, a11);
  v44 = v65;
  v45 = outlined assign with copy of Binding<TextSelection?>?(v65, v51);
  v46 = v61;
  v68(v45);
  outlined consume of Text?(v42, v43, a10, a11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined release of TextFieldState(a1);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v69 + 32))(a9 + *(int *)(v58 + 40), v46, v67);
}

uint64_t TextField.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[27];
  _OWORD v40[5];
  _OWORD v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[43];

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v9 = a4 + *(int *)(v8 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v32 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v12 = (int *)type metadata accessor for TextField(0, a2, a3, v11);
  TextField.$text.getter();
  v31 = a1;
  TextField.$state.getter((uint64_t)v12, (uint64_t)v40);
  v46 = v40[4];
  *(_OWORD *)v47 = v41[0];
  *(_OWORD *)&v47[11] = *(_OWORD *)((char *)v41 + 11);
  v42 = v40[0];
  v43 = v40[1];
  v44 = v40[2];
  v45 = v40[3];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  Binding.zip<A>(with:)();
  outlined release of Binding<TextFieldState>((uint64_t)v40);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v44 = v35;
  v45 = v36;
  v46 = v37;
  *(_OWORD *)v47 = v38;
  *(_OWORD *)&v47[16] = *(_OWORD *)v39;
  *(_OWORD *)&v47[27] = *(_OWORD *)&v39[11];
  v42 = v33;
  v43 = v34;
  v13 = *((_QWORD *)&v35 + 1);
  v14 = v35;
  v30 = *(_QWORD *)&v47[24];
  if (v34 == v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v36);
    v16 = *(_QWORD *)v39;
    v15 = *((_QWORD *)&v38 + 1);
    v17 = v30;
    outlined copy of TextFieldState.FormatActions?(v38);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v36);
    v16 = *(_QWORD *)v39;
    v15 = *((_QWORD *)&v38 + 1);
    v17 = v30;
    outlined copy of TextFieldState.FormatActions?(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v13 = *((_QWORD *)&v34 + 1);
    v14 = v34;
  }
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection();
  v18 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v19 = v42;
  swift_retain();
  outlined release of Binding<(String, TextFieldState)>((uint64_t)&v42);
  *(_QWORD *)(a4 + 72) = v19;
  *(_QWORD *)(a4 + 80) = v18;
  *(_QWORD *)(a4 + 88) = v14;
  *(_QWORD *)(a4 + 96) = v13;
  *(_OWORD *)(a4 + 104) = v36;
  *(_OWORD *)(a4 + 120) = v37;
  *(_QWORD *)(a4 + 136) = v38;
  *(_QWORD *)(a4 + 144) = v15;
  *(_QWORD *)(a4 + 152) = v16;
  *(_QWORD *)(a4 + 160) = v17;
  *(_QWORD *)(a4 + 168) = v39[16] | ((unint64_t)(*(_QWORD *)&v39[19] >> 8) << 32);
  *(_BYTE *)(a4 + 178) = v39[26] != 0;
  *(_WORD *)(a4 + 176) = v39[24] | (v39[25] << 8);
  *(_BYTE *)(a4 + 179) = 1;
  *(_QWORD *)a4 = TextField.$text.getter();
  *(_QWORD *)(a4 + 8) = v20;
  *(_QWORD *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 24) = v22;
  *(_BYTE *)(a4 + 32) = *(_BYTE *)(v31 + 32);
  *(_BYTE *)(a4 + 33) = *(_BYTE *)(v31 + v12[11]);
  v23 = (uint64_t *)(v31 + v12[12]);
  v24 = *v23;
  v25 = v23[1];
  v26 = v23[2];
  v27 = v23[3];
  *(_QWORD *)(a4 + 40) = *v23;
  *(_QWORD *)(a4 + 48) = v25;
  *(_QWORD *)(a4 + 56) = v26;
  *(_QWORD *)(a4 + 64) = v27;
  v28 = v31 + v12[14];
  outlined copy of Text?(v24, v25, v26, v27);
  outlined assign with copy of Binding<TextSelection?>?(v28, v32);
  return (*(uint64_t (**)(uint64_t, int *))(*((_QWORD *)v12 - 1) + 8))(v31, v12);
}

double static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, double);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v32 = a1;
  v33 = a4;
  v31 = a2;
  v9 = *(_QWORD *)(a3 - 8);
  v34 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OptionalFormatInputToString(0, v12, v13, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v29 - v18;
  v30 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v30(v11, a2, a3, v17);
  OptionalFormatInputToString.init(format:)(v11, a3, a4);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalFormatInputToString<A>, v14);
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  v20 = v36;
  v21 = v37;
  v22 = v38;
  v23 = v39;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v11, v31, a3);
  v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v25 = swift_allocObject();
  v26 = v33;
  *(_QWORD *)(v25 + 16) = a3;
  *(_QWORD *)(v25 + 24) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v25 + v24, v11, a3);
  v36 = v20;
  v37 = v21;
  v38 = v22;
  v39 = v23;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v35);
  v27 = v35[1];
  *(_QWORD *)a5 = v35[0];
  *(_QWORD *)(a5 + 8) = v27;
  *(_QWORD *)(a5 + 16) = protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:);
  *(_QWORD *)(a5 + 40) = v25;
  *(_DWORD *)(a5 + 84) = 0;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 0;
  *(_BYTE *)(a5 + 88) = 1;
  *(_WORD *)(a5 + 89) = 2;
  *(_QWORD *)(a5 + 96) = v20;
  *(_QWORD *)(a5 + 104) = v21;
  *(_QWORD *)(a5 + 112) = v22;
  *(_QWORD *)(a5 + 120) = v23;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double result;
  void (*v48)(char *, uint64_t, uint64_t, double);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v50 = a2;
  v62 = a1;
  swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Binding();
  v61 = *(_QWORD *)(v8 - 8);
  v58 = *(_QWORD *)(v61 + 64);
  v59 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v57 = (char *)&v48 - v10;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  v49 = *(_QWORD *)(a3 - 8);
  v12 = v49;
  MEMORY[0x1E0C80A78](v13, v14);
  v56 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v48 - v17;
  v60 = a4;
  v20 = type metadata accessor for FormatInputToString(0, a3, a4, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v48 - v24;
  v48 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v26 = v50;
  v48(v18, v50, a3, v23);
  FormatInputToString.init(format:)((uint64_t)v18, a3, (uint64_t)v25);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FormatInputToString<A>, v20);
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  v53 = v65;
  v54 = v64;
  v51 = v67;
  v52 = v66;
  v27 = v26;
  v28 = (void (*)(char *, uint64_t, uint64_t))v48;
  ((void (*)(char *, uint64_t, uint64_t))v48)(v18, v26, a3);
  v29 = v49;
  v30 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  v31 = v30 + v11;
  v32 = swift_allocObject();
  v55 = v32;
  v33 = v60;
  *(_QWORD *)(v32 + 16) = a3;
  *(_QWORD *)(v32 + 24) = v33;
  v49 = *(_QWORD *)(v29 + 32);
  ((void (*)(unint64_t, char *, uint64_t))v49)(v32 + v30, v18, a3);
  v34 = v56;
  v28(v56, v27, a3);
  v35 = v61;
  v36 = v57;
  v37 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v57, v62, v59);
  v38 = (v31 + *(unsigned __int8 *)(v35 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v39 = swift_allocObject();
  v40 = v60;
  *(_QWORD *)(v39 + 16) = a3;
  *(_QWORD *)(v39 + 24) = v40;
  ((void (*)(unint64_t, char *, uint64_t))v49)(v39 + v30, v34, a3);
  (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))(v39 + v38, v36, v37);
  v42 = v53;
  v41 = v54;
  v64 = v54;
  v65 = v53;
  v44 = v51;
  v43 = v52;
  v66 = v52;
  v67 = v51;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v63);
  v45 = v63[1];
  *(_QWORD *)a5 = v63[0];
  *(_QWORD *)(a5 + 8) = v45;
  v46 = v55;
  *(_QWORD *)(a5 + 16) = partial apply for closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:);
  *(_QWORD *)(a5 + 24) = v46;
  *(_QWORD *)(a5 + 32) = partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:);
  *(_QWORD *)(a5 + 40) = v39;
  *(_DWORD *)(a5 + 84) = 0;
  result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_BYTE *)(a5 + 80) = 0;
  *(_BYTE *)(a5 + 88) = 1;
  *(_WORD *)(a5 + 89) = 2;
  *(_QWORD *)(a5 + 96) = v41;
  *(_QWORD *)(a5 + 104) = v42;
  *(_QWORD *)(a5 + 112) = v43;
  *(_QWORD *)(a5 + 120) = v44;
  return result;
}

_QWORD *static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v41 = a5;
  v42 = a6;
  v39 = a3;
  v40 = a4;
  v38 = a7;
  v12 = type metadata accessor for Binding();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v35 - v16;
  v20 = type metadata accessor for AnyToFormattedString(0, a7, v18, v19);
  v21 = a2;
  v43[0] = AnyToFormattedString.__allocating_init(_:)(v21);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyToFormattedString<A>, v20);
  Binding.projecting<A>(_:)();
  swift_release();
  v23 = v44;
  v22 = v45;
  v36 = v46;
  v37 = v44;
  v35 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, a1, v12);
  v24 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v38;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v25 + v24, v17, v12);
  *(_QWORD *)(v25 + ((v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = v21;
  v44 = v23;
  v45 = v22;
  v26 = v35;
  v27 = v36;
  v46 = v36;
  v47 = v35;
  v28 = v21;
  v30 = v39;
  v29 = v40;
  v32 = v41;
  v31 = v42;
  outlined copy of TextFieldState.FormatActions?(v39);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  result = MEMORY[0x18D75B9C8](v43);
  v34 = v43[1];
  *(_QWORD *)a8 = v43[0];
  *(_QWORD *)(a8 + 8) = v34;
  *(_QWORD *)(a8 + 16) = closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:);
  *(_QWORD *)(a8 + 24) = 0;
  *(_QWORD *)(a8 + 32) = partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:);
  *(_QWORD *)(a8 + 40) = v25;
  *(_QWORD *)(a8 + 48) = v30;
  *(_QWORD *)(a8 + 56) = v29;
  *(_QWORD *)(a8 + 64) = v32;
  *(_QWORD *)(a8 + 72) = v31;
  *(_BYTE *)(a8 + 80) = 0;
  *(_DWORD *)(a8 + 84) = 0;
  *(_BYTE *)(a8 + 88) = 1;
  *(_WORD *)(a8 + 89) = 2;
  *(_QWORD *)(a8 + 96) = v37;
  *(_QWORD *)(a8 + 104) = v22;
  *(_QWORD *)(a8 + 112) = v27;
  *(_QWORD *)(a8 + 120) = v26;
  return result;
}

void TextField.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  unint64_t v9;
  uint64_t v10;
  ValueMetadata *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v10 = a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v8[2] = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = type metadata accessor for ResolvedTextFieldStyle();
  MEMORY[0x1E0C80A78](v8[0], v5);
  v6 = *(_QWORD *)(a1 + 16);
  v9 = lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel();
  v7 = *(_QWORD *)(a1 + 24);
  v11 = &type metadata for _TextFieldStyleLabel;
  v12 = v6;
  v13 = v9;
  v14 = v7;
  type metadata accessor for StaticSourceWriter();
}

void sub_1872A2EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v24;
  uint64_t v25;

  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 216) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>(255);
  v17 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v14 - 208) = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)(v14 - 248) = (char *)&a9 - v22;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 16);
  v24 = *(_QWORD *)(v14 - 240);
  v25 = *(_QWORD *)(v14 - 224);
  v23(v24, v25, v10, v21);
  TextField.init<A>(_:)(v24, v9, v11, v13);
  *(_QWORD *)(v14 - 176) = v9;
  *(_QWORD *)(v14 - 168) = v11;
  *(_QWORD *)(v14 - 160) = v25;
  lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)partial apply for closure #1 in TextField.body.getter);
}

uint64_t sub_1872A3014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v3, (uint64_t (*)(_QWORD))type metadata accessor for ResolvedTextFieldStyle);
  *(_QWORD *)(v6 - 136) = v1;
  *(_QWORD *)(v6 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6 - 136);
  v9 = lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction();
  View.input<A>(_:)((uint64_t)&type metadata for ProvidesEditMenuInteraction, v2, (uint64_t)&type metadata for ProvidesEditMenuInteraction, v8, v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8))(v5, v2);
  *(_QWORD *)(v6 - 152) = v8;
  *(_QWORD *)(v6 - 144) = &protocol witness table for ViewInputFlagModifier<A>;
  v10 = MEMORY[0x18D75FFDC](v7, v0, v6 - 152);
  v11 = *(_QWORD *)(v6 - 248);
  static ViewBuilder.buildExpression<A>(_:)(v4, v0, v10);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 208) + 8);
  v12(v4, v0);
  static ViewBuilder.buildBlock<A>(_:)(v11, v0, *(_QWORD *)(v6 - 200));
  return v12(v11, v0);
}

unint64_t lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel;
  if (!lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TextFieldStyleLabel, &type metadata for _TextFieldStyleLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel;
  if (!lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TextFieldStyleLabel, &type metadata for _TextFieldStyleLabel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  }
  return result;
}

uint64_t closure #1 in TextField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TextField(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 40), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t partial apply for closure #1 in TextField.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in TextField.body.getter(v1[4], v1[2], v1[3], a1);
}

unint64_t lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle)
  {
    v1 = type metadata accessor for ResolvedTextFieldStyle();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTextFieldStyle, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle);
  }
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance TextFieldStateTextProjection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a1;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  v7 = a1[7];
  v9 = a1[9];
  v28 = a1[8];
  v29 = a1[2];
  v10 = a1[10];
  v21 = a1[1];
  v22 = a1[11];
  v26 = *((_DWORD *)a1 + 25);
  v27 = *((_BYTE *)a1 + 96);
  v24 = *((_BYTE *)a1 + 105);
  v25 = *((_BYTE *)a1 + 104);
  v23 = *((_BYTE *)a1 + 106);
  if (*a1 == v29 && a1[1] == v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = v5;
    v12 = v5;
    v13 = v6;
    v14 = v8;
    v15 = v7;
    outlined copy of TextFieldState.FormatActions?(v12);
    v16 = v28;
    v17 = v22;
    outlined copy of TextFieldState.FormatActions?(v28);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = v5;
    v18 = v5;
    v13 = v6;
    v14 = v8;
    v15 = v7;
    outlined copy of TextFieldState.FormatActions?(v18);
    v16 = v28;
    v17 = v22;
    outlined copy of TextFieldState.FormatActions?(v28);
    v4 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v29 = v3;
    v11 = v20;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v17;
  *(_BYTE *)(a2 + 80) = v27;
  *(_DWORD *)(a2 + 84) = v26;
  *(_BYTE *)(a2 + 88) = v25;
  *(_BYTE *)(a2 + 89) = v24;
  *(_BYTE *)(a2 + 90) = v23;
  return result;
}

double protocol witness for Projection.set(base:newValue:) in conformance TextFieldStateTextProjection(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  double result;
  _OWORD v5[4];
  _OWORD v6[2];

  v2 = a2[3];
  v5[2] = a2[2];
  v5[3] = v2;
  v6[0] = a2[4];
  *(_OWORD *)((char *)v6 + 11) = *(_OWORD *)((char *)a2 + 75);
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  *(_QWORD *)&result = specialized TextFieldStateTextProjection.set(base:newValue:)(a1, (uint64_t)v5).n128_u64[0];
  return result;
}

uint64_t closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v4);
  v6 = (char *)&v14 - v5;
  v7 = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v14 - v11;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  v17 = v15;
  v18 = v16;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v12, 0, 1, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return 1;
}

uint64_t closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD v25[4];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v25[3] = a4;
  v26 = a1;
  v27 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)v25 - v10;
  v29 = *(_QWORD *)(a6 + 8);
  v12 = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v25[1] = *(_QWORD *)(v13 - 8);
  v25[2] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v25 - v15;
  v17 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v25 - v22;
  v30 = a3;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  v31 = v26;
  v32 = v27;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, v12);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v16, v12);
  dispatch thunk of FormatStyle.format(_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v12);
  return v31;
}

uint64_t closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a1;
  v24 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)v21 - v9;
  v21[1] = *(_QWORD *)(a5 + 8);
  v11 = swift_getAssociatedTypeWitness();
  v22 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v22, v12);
  v14 = (char *)v21 - v13;
  v15 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v21 - v18;
  v21[2] = a3;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  v26 = v23;
  v27 = v24;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v11);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v14, v11);
  dispatch thunk of FormatStyle.format(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v11);
  return v26;
}

uint64_t closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)()
{
  static Semantics.v3.getter();
  return isLinkedOnOrAfter(_:)() & 1;
}

uint64_t closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v9 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v12);
  type metadata accessor for AnyToFormattedString(0, a5, v13, v14);
  static AnyToFormattedString.applyFormatting(to:string:formatter:)((uint64_t)v11, a1, a2, a4);
  v15 = objc_msgSend(a4, sel_stringForObjectValue_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v15)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v16 = 0;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
  return v16;
}

uint64_t TextField<>.init(_:text:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  int v33;
  char v34;
  __int16 v35;

  v24 = a3;
  v23 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a5;
  v27 = a6;
  *(_QWORD *)&v28 = a7;
  *((_QWORD *)&v28 + 1) = a8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v25);
  v26 = v25[0];
  v27 = v25[1];
  v33 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v34 = 1;
  v35 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v26, a5, a6, a7, a8, 0, 0, 0, v23, 0, 0, a10 & 1, (uint64_t)v20, a1, a2, v24, a4);
}

uint64_t TextField<>.init(_:text:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  int v42;
  char v43;
  __int16 v44;

  v30 = a1;
  v31 = a9;
  v32 = a11;
  v33 = a10;
  v28 = a13;
  v29 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a5;
  v36 = a6;
  *(_QWORD *)&v37 = a7;
  *((_QWORD *)&v37 + 1) = a8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v34);
  v35 = v34[0];
  v36 = v34[1];
  v42 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  v43 = 1;
  v44 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v35, a5, a6, a7, a8, 0, v33, v32, v31, v29, v28, a14 & 1, (uint64_t)v24, v30, a2, a3, a4);
}

uint64_t TextField<>.init<A>(_:text:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  int v37;
  char v38;
  __int16 v39;

  v25 = a9;
  v16 = a6 & 1;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a2;
  v31 = a3;
  *(_QWORD *)&v32 = a4;
  *((_QWORD *)&v32 + 1) = a5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v29);
  v30 = v29[0];
  v31 = v29[1];
  v37 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v38 = 1;
  v39 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v26 = a7;
  v27 = a8;
  v28 = a1;
  v22 = specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v30, a2, a3, a4, a5, 0, 0, 0, v25, 0, 0, v16, (uint64_t)v20, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)(a7 - 8) + 8))(a1, a7, v22);
}

uint64_t TextField<>.init<A>(_:text:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  int v42;
  char v43;
  __int16 v44;

  v28 = a8;
  v29 = a6;
  v30 = a7;
  v27 = a9;
  v26 = a10;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a2;
  v36 = a3;
  *(_QWORD *)&v37 = a4;
  *((_QWORD *)&v37 + 1) = a5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v34);
  v35 = v34[0];
  v36 = v34[1];
  v42 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  v43 = 1;
  v44 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v31 = a12;
  v32 = a13;
  v33 = a1;
  v23 = specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v35, a2, a3, a4, a5, 0, v29, v30, v27, v28, v26, a11 & 1, (uint64_t)v21, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)(a12 - 8) + 8))(a1, a12, v23);
}

uint64_t TextField.init(text:prompt:axis:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, __int128 a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  int v36;
  char v37;
  __int16 v38;

  v24 = a7;
  v25 = a8;
  v26 = a5;
  v27 = a6;
  v23 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  v30 = a2;
  *(_QWORD *)&v31 = a3;
  *((_QWORD *)&v31 + 1) = a4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v28);
  v29 = v28[0];
  v30 = v28[1];
  v36 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v37 = 1;
  v38 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  return TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v29, a1, a2, a3, a4, 0, v26, v27, a9, v24, v25, a10 & 1, (uint64_t)v20, (void (*)(uint64_t))v23, *((uint64_t *)&v23 + 1), a12);
}

uint64_t TextField<>.init(_:text:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  int v39;
  char v40;
  __int16 v41;

  v27 = a1;
  v28 = a9;
  v29 = a11;
  v30 = a10;
  v26 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a5;
  v33 = a6;
  *(_QWORD *)&v34 = a7;
  *((_QWORD *)&v34 + 1) = a8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v31);
  v32 = v31[0];
  v33 = v31[1];
  v39 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v40 = 1;
  v41 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v32, a5, a6, a7, a8, 0, v30, v29, v28, v26, a13, 0, (uint64_t)v23, v27, a2, a3, a4);
}

uint64_t TextField<>.init<A>(_:text:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  int v39;
  char v40;
  __int16 v41;

  v25 = a8;
  v26 = a6;
  v27 = a7;
  v24 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a2;
  v33 = a3;
  *(_QWORD *)&v34 = a4;
  *((_QWORD *)&v34 + 1) = a5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v31);
  v32 = v31[0];
  v33 = v31[1];
  v39 = 0;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v40 = 1;
  v41 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v28 = a11;
  v29 = a12;
  v30 = a1;
  v22 = specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v32, a2, a3, a4, a5, 0, v26, v27, v24, v25, a10, 0, (uint64_t)v20, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)(a11 - 8) + 8))(a1, a11, v22);
}

uint64_t TextField.init(text:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  int v35;
  char v36;
  __int16 v37;

  v24 = a8;
  v25 = a5;
  v26 = a6;
  v23 = a10;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1;
  v29 = a2;
  *(_QWORD *)&v30 = a3;
  *((_QWORD *)&v30 + 1) = a4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v27);
  v28 = v27[0];
  v29 = v27[1];
  v35 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v36 = 1;
  v37 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  return TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v28, a1, a2, a3, a4, 0, v25, v26, a9, a7, v24, 0, (uint64_t)v20, (void (*)(uint64_t))v23, *((uint64_t *)&v23 + 1), a11);
}

uint64_t TextField<>.init(_:text:selection:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  int v42;
  char v43;
  __int16 v44;

  HIDWORD(v27) = a3;
  v32 = a9;
  v33 = a12;
  v29 = a13;
  v30 = a1;
  v28 = a14;
  v31 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a5;
  v36 = a6;
  *(_QWORD *)&v37 = a7;
  *((_QWORD *)&v37 + 1) = a8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v34);
  v35 = v34[0];
  v36 = v34[1];
  v42 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  v43 = 1;
  v44 = 2;
  outlined init with copy of Binding<TextSelection?>(a10, (uint64_t)v24);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v35, a5, a6, a7, a8, 0, v31, v33, v32, v29, v28, a15 & 1, (uint64_t)v24, v30, a2, BYTE4(v27), a4);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Binding<TextSelection?>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TextField<>.init<A>(_:text:selection:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  int v43;
  char v44;
  __int16 v45;

  v30 = a7;
  v31 = a8;
  v29 = a9;
  v28 = a10;
  v27 = a11;
  v26 = a14;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a2;
  v37 = a3;
  *(_QWORD *)&v38 = a4;
  *((_QWORD *)&v38 + 1) = a5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v35);
  v36 = v35[0];
  v37 = v35[1];
  v43 = 0;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  v44 = 1;
  v45 = 2;
  outlined init with copy of Binding<TextSelection?>(a6, (uint64_t)v23);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 0, 1, v24);
  v32 = a13;
  v33 = v26;
  v34 = a1;
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v36, a2, a3, a4, a5, 0, v30, v31, v29, v28, v27, a12 & 1, (uint64_t)v23, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 8))(a1, a13);
}

{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  int v42;
  char v43;
  __int16 v44;

  v29 = a8;
  v28 = a7;
  v30 = a6;
  v27 = a9;
  v26 = a10;
  v25 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a2;
  v36 = a3;
  *(_QWORD *)&v37 = a4;
  *((_QWORD *)&v37 + 1) = a5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v34);
  v35 = v34[0];
  v36 = v34[1];
  v42 = 0;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  v43 = 1;
  v44 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v31 = a13;
  v32 = a14;
  v33 = a1;
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v35, a2, a3, a4, a5, 0, v28, v29, v27, v26, v25, a12 & 1, (uint64_t)v22, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v30, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a13 - 8) + 8))(a1, a13);
}

uint64_t TextField.init(text:selection:prompt:axis:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, __int128 a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  int v38;
  char v39;
  __int16 v40;

  v27 = a8;
  v28 = a6;
  v29 = a7;
  v26 = a9;
  v25 = a10;
  v24 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = a1;
  v32 = a2;
  *(_QWORD *)&v33 = a3;
  *((_QWORD *)&v33 + 1) = a4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v30);
  v31 = v30[0];
  v32 = v30[1];
  v38 = 0;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v39 = 1;
  v40 = 2;
  outlined init with copy of Binding<TextSelection?>(a5, (uint64_t)v21);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 0, 1, v22);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v31, a1, a2, a3, a4, 0, v28, v29, v26, v27, v25, a11 & 1, (uint64_t)v21, (void (*)(uint64_t))v24, *((uint64_t *)&v24 + 1), a13);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
}

{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  int v37;
  char v38;
  __int16 v39;

  v25 = a8;
  v26 = a6;
  v27 = a7;
  v28 = a5;
  v24 = a9;
  v23 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v31 = a2;
  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = a4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v29);
  v30 = v29[0];
  v31 = v29[1];
  v37 = 0;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v38 = 1;
  v39 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v30, a1, a2, a3, a4, 0, v26, v27, v24, v25, a10, a11 & 1, (uint64_t)v20, (void (*)(uint64_t))v23, *((uint64_t *)&v23 + 1), a13);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v28, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection>);
}

uint64_t TextField<>.init(_:text:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  char v45;
  __int16 v46;

  v29 = a8;
  v30 = a7;
  v33 = a3;
  v31 = a1;
  v32 = a9;
  v28 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a5;
  v36 = a6;
  *(_QWORD *)&v37 = a7;
  *((_QWORD *)&v37 + 1) = a8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v24 = v23;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](v34, v24);
  v35 = v34[0];
  v36 = v34[1];
  v37 = 0u;
  v38 = 0u;
  v39 = a10;
  v40 = a11;
  v41 = v28;
  v42 = a13;
  v43 = 0;
  v44 = 0;
  v45 = 1;
  v46 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v22, 1, 1, v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v35, a5, a6, v30, v29, 0, 0, 0, v32, 0, 0, 0, (uint64_t)v22, v31, a2, v33, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t TextField<>.init<A>(_:text:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  char v46;
  __int16 v47;

  v28 = a8;
  v27 = a6;
  v30 = a1;
  v31 = a9;
  v29 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a2;
  v37 = a3;
  *(_QWORD *)&v38 = a4;
  *((_QWORD *)&v38 + 1) = a5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v22 = v21;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](v35, v22);
  v36 = v35[0];
  v37 = v35[1];
  v38 = 0u;
  v39 = 0u;
  v40 = v27;
  v41 = a7;
  v42 = v28;
  v43 = a10;
  v44 = 0;
  v45 = 0;
  v46 = 1;
  v47 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v20, 1, 1, v23);
  v32 = a11;
  v33 = v29;
  v24 = v30;
  v34 = v30;
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v36, a2, a3, a4, a5, 0, 0, 0, v31, 0, 0, 0, (uint64_t)v20, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:onEditingChanged:onCommit:));
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 8))(v24, a11);
}

uint64_t TextField<>.init(_:text:selection:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  int v43;
  char v44;
  __int16 v45;

  v30 = a1;
  v31 = a9;
  v33 = a11;
  v34 = a10;
  v32 = a12;
  v28 = a14;
  v29 = a13;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a5;
  v37 = a6;
  *(_QWORD *)&v38 = a7;
  *((_QWORD *)&v38 + 1) = a8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](v35);
  v36 = v35[0];
  v37 = v35[1];
  v43 = 0;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  v44 = 1;
  v45 = 2;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v36, a5, a6, a7, a8, 0, v33, v32, v31, v29, v28, a15 & 1, (uint64_t)v25, v30, a2, a3, a4);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection>);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in TextField<>.init<A>(_:text:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in LabeledContent<>.init<A>(_:value:)(*(_QWORD *)(v1 + 32), a1);
}

uint64_t associated type witness table accessor for View.Body : View in TextField<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for TextField()
{
  unint64_t v0;
  unint64_t v1;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<TextSelection?>?(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TextField(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(unint64_t, unint64_t, uint64_t);
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  __int128 v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _OWORD *v60;
  _OWORD *v61;
  unsigned int v62;
  char v63;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  size_t __n;
  unint64_t v69;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 & 0xF8 | 7;
  v14 = (v12 & 0xF8) + 115;
  v15 = *(_QWORD *)(v11 + 64);
  if (v15 <= 0x10)
    v15 = 16;
  v16 = (((v12 & 0xF8) + 23) & ~v13) + v15 + 2;
  v17 = (v12 | v7) & 0x100000;
  v18 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v13 | v7) != 7
    || v17 != 0
    || ((v14
       + ((((((v7 + 33) & ~(unint64_t)v7) + v8) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)) & ~v13)
     + v16 > 0x18)
  {
    a1 = v18 + (((v13 | v7) + 16) & ~(v13 | v7));
    swift_retain();
  }
  else
  {
    v67 = v15 + 2;
    __n = v16;
    v65 = v11;
    v66 = v10;
    v69 = v15;
    v21 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v22 = (uint64_t)a2 + v7;
    v23 = (a1 + v7 + 33) & ~(unint64_t)v7;
    v24 = (v22 + 33) & ~(unint64_t)v7;
    v25 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v25(v23, v24, v5);
    *(_BYTE *)(v23 + v8) = *(_BYTE *)(v24 + v8);
    v26 = (v23 + v8) & 0xFFFFFFFFFFFFFFF8;
    v27 = (_OWORD *)(v26 + 8);
    v28 = (v24 + v8) & 0xFFFFFFFFFFFFFFF8;
    v29 = (uint64_t *)(v28 + 8);
    if (*(_QWORD *)(v28 + 32) < 0xFFFFFFFFuLL)
    {
      v33 = *(_OWORD *)(v28 + 24);
      *v27 = *(_OWORD *)v29;
      *(_OWORD *)(v26 + 24) = v33;
    }
    else
    {
      v30 = *v29;
      v31 = *(_QWORD *)(v28 + 16);
      v32 = *(_BYTE *)(v28 + 24);
      outlined copy of Text.Storage(*v29, v31, v32);
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v26 + 16) = v31;
      *(_BYTE *)(v26 + 24) = v32;
      *(_QWORD *)(v26 + 32) = *(_QWORD *)(v28 + 32);
      swift_bridgeObjectRetain();
    }
    v34 = (v26 + 47) & 0xFFFFFFFFFFFFFFF8;
    v35 = (v28 + 47) & 0xFFFFFFFFFFFFFFF8;
    v36 = *(unsigned __int8 *)(v35 + 107);
    if (v36 >= 2)
      v36 = *(_DWORD *)v35 + 2;
    v37 = ~v13;
    if (v36 == 1)
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
      *(_QWORD *)(v34 + 24) = *(_QWORD *)(v35 + 24);
      v38 = *(_QWORD *)(v35 + 32);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (v38)
      {
        v39 = *(_QWORD *)(v35 + 40);
        *(_QWORD *)(v34 + 32) = v38;
        *(_QWORD *)(v34 + 40) = v39;
        v40 = *(_QWORD *)(v35 + 56);
        *(_QWORD *)(v34 + 48) = *(_QWORD *)(v35 + 48);
        *(_QWORD *)(v34 + 56) = v40;
        swift_retain();
        swift_retain();
      }
      else
      {
        v44 = *(_OWORD *)(v35 + 48);
        *(_OWORD *)(v34 + 32) = *(_OWORD *)(v35 + 32);
        *(_OWORD *)(v34 + 48) = v44;
      }
      v45 = *(_QWORD *)(v35 + 64);
      if (v45)
      {
        v46 = *(_QWORD *)(v35 + 72);
        *(_QWORD *)(v34 + 64) = v45;
        *(_QWORD *)(v34 + 72) = v46;
        v47 = *(_QWORD *)(v35 + 88);
        *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
        *(_QWORD *)(v34 + 88) = v47;
        swift_retain();
        swift_retain();
      }
      else
      {
        v52 = *(_OWORD *)(v35 + 80);
        *(_OWORD *)(v34 + 64) = *(_OWORD *)(v35 + 64);
        *(_OWORD *)(v34 + 80) = v52;
      }
      *(_BYTE *)(v34 + 96) = *(_BYTE *)(v35 + 96);
      v53 = *(_DWORD *)(v35 + 100);
      *(_BYTE *)(v34 + 104) = *(_BYTE *)(v35 + 104);
      *(_DWORD *)(v34 + 100) = v53;
      *(_BYTE *)(v34 + 105) = *(_BYTE *)(v35 + 105);
      *(_BYTE *)(v34 + 106) = *(_BYTE *)(v35 + 106);
      *(_BYTE *)(v34 + 107) = 1;
    }
    else
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
      v41 = *(_QWORD *)(v35 + 16);
      swift_bridgeObjectRetain();
      if (v41)
      {
        v42 = *(_QWORD *)(v35 + 24);
        *(_QWORD *)(v34 + 16) = v41;
        *(_QWORD *)(v34 + 24) = v42;
        v43 = *(_QWORD *)(v35 + 40);
        *(_QWORD *)(v34 + 32) = *(_QWORD *)(v35 + 32);
        *(_QWORD *)(v34 + 40) = v43;
        swift_retain();
        swift_retain();
      }
      else
      {
        v48 = *(_OWORD *)(v35 + 32);
        *(_OWORD *)(v34 + 16) = *(_OWORD *)(v35 + 16);
        *(_OWORD *)(v34 + 32) = v48;
      }
      v49 = *(_QWORD *)(v35 + 48);
      if (v49)
      {
        v50 = *(_QWORD *)(v35 + 56);
        *(_QWORD *)(v34 + 48) = v49;
        *(_QWORD *)(v34 + 56) = v50;
        v51 = *(_QWORD *)(v35 + 72);
        *(_QWORD *)(v34 + 64) = *(_QWORD *)(v35 + 64);
        *(_QWORD *)(v34 + 72) = v51;
        swift_retain();
        swift_retain();
      }
      else
      {
        v54 = *(_OWORD *)(v35 + 64);
        *(_OWORD *)(v34 + 48) = *(_OWORD *)(v35 + 48);
        *(_OWORD *)(v34 + 64) = v54;
      }
      *(_BYTE *)(v34 + 80) = *(_BYTE *)(v35 + 80);
      v55 = *(_DWORD *)(v35 + 84);
      *(_BYTE *)(v34 + 88) = *(_BYTE *)(v35 + 88);
      *(_DWORD *)(v34 + 84) = v55;
      *(_BYTE *)(v34 + 89) = *(_BYTE *)(v35 + 89);
      *(_BYTE *)(v34 + 90) = *(_BYTE *)(v35 + 90);
      *(_QWORD *)(v34 + 96) = *(_QWORD *)(v35 + 96);
      *(_BYTE *)(v34 + 107) = 0;
      swift_retain();
    }
    v56 = (_QWORD *)((v14 + v34) & v37);
    v57 = (_QWORD *)((v14 + v35) & v37);
    v58 = (_QWORD *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (*v58 < 0xFFFFFFFFuLL)
    {
      memcpy(v56, v57, __n);
    }
    else
    {
      *v56 = *v57;
      v59 = (_QWORD *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v59 = *v58;
      v60 = (_OWORD *)(((unint64_t)v59 + v13 + 8) & v37);
      v61 = (_OWORD *)(((unint64_t)v58 + v13 + 8) & v37);
      v62 = *((unsigned __int8 *)v61 + v69);
      swift_retain();
      swift_retain();
      if (v62 > 1)
      {
        memcpy(v60, v61, v67);
      }
      else
      {
        if (v62 == 1)
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v65 + 16))(v60, v61, v66);
          v63 = 1;
        }
        else
        {
          v63 = 0;
          *v60 = *v61;
        }
        *((_BYTE *)v60 + v69) = v63;
        *((_BYTE *)v60 + v69 + 1) = *((_BYTE *)v61 + v69 + 1);
      }
    }
  }
  return a1;
}

void destroy for TextField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (v5 + *(_QWORD *)(v4 + 64)) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 32) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_BYTE *)(v6 + 24));
    swift_bridgeObjectRelease();
  }
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(v7 + 107);
  if (v8 >= 2)
    v8 = *(_DWORD *)v7 + 2;
  if (v8 != 1)
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v7 + 16))
    {
      swift_release();
      swift_release();
    }
    if (*(_QWORD *)(v7 + 48))
    {
      swift_release();
      swift_release();
    }
    goto LABEL_14;
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + 32))
  {
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v7 + 64))
  {
    swift_release();
LABEL_14:
    swift_release();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v12 = (_QWORD *)((((v7 + v11 + 108) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v12 >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v10 + 64) <= 0x10uLL)
      v13 = 16;
    else
      v13 = *(_QWORD *)(v10 + 64);
    swift_release();
    swift_release();
    if (*(_BYTE *)((((unint64_t)v12 + v11 + 8) & ~v11) + v13) == 1)
      (*(void (**)(void))(v10 + 8))();
  }
}

uint64_t initializeWithCopy for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  unsigned int v57;
  size_t v58;
  char v59;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 33 + a1) & ~v8;
  v10 = (v8 + 33 + a2) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11(v9, v10, v6);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v9 + v12;
  v14 = v10 + v12;
  *(_BYTE *)v13 = *(_BYTE *)v14;
  v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  v17 = v14 & 0xFFFFFFFFFFFFFFF8;
  v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL)
  {
    v22 = *(_OWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_OWORD *)v16 = *(_OWORD *)v18;
    *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) = v22;
  }
  else
  {
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 16);
    v21 = *(_BYTE *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
    outlined copy of Text.Storage(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8), v20, v21);
    *(_QWORD *)v16 = v19;
    *(_QWORD *)(v16 + 8) = v20;
    *(_BYTE *)(v16 + 16) = v21;
    *(_QWORD *)(v16 + 24) = *(_QWORD *)(v18 + 24);
    swift_bridgeObjectRetain();
  }
  v23 = (v15 + 47) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v17 + 47) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(unsigned __int8 *)(v24 + 107);
  if (v25 >= 2)
    v25 = *(_DWORD *)v24 + 2;
  if (v25 == 1)
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    *(_QWORD *)(v23 + 24) = *(_QWORD *)(v24 + 24);
    v26 = *(_QWORD *)(v24 + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v26)
    {
      v27 = *(_QWORD *)(v24 + 40);
      *(_QWORD *)(v23 + 32) = v26;
      *(_QWORD *)(v23 + 40) = v27;
      v28 = *(_QWORD *)(v24 + 56);
      *(_QWORD *)(v23 + 48) = *(_QWORD *)(v24 + 48);
      *(_QWORD *)(v23 + 56) = v28;
      swift_retain();
      swift_retain();
    }
    else
    {
      v32 = *(_OWORD *)(v24 + 48);
      *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
      *(_OWORD *)(v23 + 48) = v32;
    }
    v33 = *(_QWORD *)(v24 + 64);
    if (v33)
    {
      v34 = *(_QWORD *)(v24 + 72);
      *(_QWORD *)(v23 + 64) = v33;
      *(_QWORD *)(v23 + 72) = v34;
      v35 = *(_QWORD *)(v24 + 88);
      *(_QWORD *)(v23 + 80) = *(_QWORD *)(v24 + 80);
      *(_QWORD *)(v23 + 88) = v35;
      swift_retain();
      swift_retain();
    }
    else
    {
      v40 = *(_OWORD *)(v24 + 80);
      *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
      *(_OWORD *)(v23 + 80) = v40;
    }
    *(_BYTE *)(v23 + 96) = *(_BYTE *)(v24 + 96);
    v41 = *(_DWORD *)(v24 + 100);
    *(_BYTE *)(v23 + 104) = *(_BYTE *)(v24 + 104);
    *(_DWORD *)(v23 + 100) = v41;
    *(_BYTE *)(v23 + 105) = *(_BYTE *)(v24 + 105);
    *(_BYTE *)(v23 + 106) = *(_BYTE *)(v24 + 106);
    *(_BYTE *)(v23 + 107) = 1;
  }
  else
  {
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    v29 = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRetain();
    if (v29)
    {
      v30 = *(_QWORD *)(v24 + 24);
      *(_QWORD *)(v23 + 16) = v29;
      *(_QWORD *)(v23 + 24) = v30;
      v31 = *(_QWORD *)(v24 + 40);
      *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
      *(_QWORD *)(v23 + 40) = v31;
      swift_retain();
      swift_retain();
    }
    else
    {
      v36 = *(_OWORD *)(v24 + 32);
      *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
      *(_OWORD *)(v23 + 32) = v36;
    }
    v37 = *(_QWORD *)(v24 + 48);
    if (v37)
    {
      v38 = *(_QWORD *)(v24 + 56);
      *(_QWORD *)(v23 + 48) = v37;
      *(_QWORD *)(v23 + 56) = v38;
      v39 = *(_QWORD *)(v24 + 72);
      *(_QWORD *)(v23 + 64) = *(_QWORD *)(v24 + 64);
      *(_QWORD *)(v23 + 72) = v39;
      swift_retain();
      swift_retain();
    }
    else
    {
      v42 = *(_OWORD *)(v24 + 64);
      *(_OWORD *)(v23 + 48) = *(_OWORD *)(v24 + 48);
      *(_OWORD *)(v23 + 64) = v42;
    }
    *(_BYTE *)(v23 + 80) = *(_BYTE *)(v24 + 80);
    v43 = *(_DWORD *)(v24 + 84);
    *(_BYTE *)(v23 + 88) = *(_BYTE *)(v24 + 88);
    *(_DWORD *)(v23 + 84) = v43;
    *(_BYTE *)(v23 + 89) = *(_BYTE *)(v24 + 89);
    *(_BYTE *)(v23 + 90) = *(_BYTE *)(v24 + 90);
    *(_QWORD *)(v23 + 96) = *(_QWORD *)(v24 + 96);
    *(_BYTE *)(v23 + 107) = 0;
    swift_retain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v45 = v44;
  v46 = *(_QWORD *)(v44 - 8);
  v47 = *(_DWORD *)(v46 + 80) & 0xF8 | 7;
  v48 = ~v47;
  v49 = (_QWORD *)((v23 + v47 + 108) & ~v47);
  v50 = (_QWORD *)((v24 + v47 + 108) & ~v47);
  if (*(_QWORD *)(v46 + 64) <= 0x10uLL)
    v51 = 16;
  else
    v51 = *(_QWORD *)(v46 + 64);
  v52 = (_QWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v52 < 0xFFFFFFFFuLL)
  {
    v58 = ((v47 + 16) & v48) + v51 + 2;
LABEL_31:
    memcpy(v49, v50, v58);
    return a1;
  }
  *v49 = *v50;
  v53 = (_QWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v53 = *v52;
  v54 = v47 + 8;
  v55 = (_OWORD *)(((unint64_t)v53 + v54) & v48);
  v56 = (_OWORD *)(((unint64_t)v52 + v54) & v48);
  v57 = *((unsigned __int8 *)v56 + v51);
  swift_retain();
  swift_retain();
  if (v57 > 1)
  {
    v49 = v55;
    v50 = v56;
    v58 = v51 + 2;
    goto LABEL_31;
  }
  if (v57 == 1)
  {
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v46 + 16))(v55, v56, v45);
    v59 = 1;
  }
  else
  {
    v59 = 0;
    *v55 = *v56;
  }
  *((_BYTE *)v55 + v51) = v59;
  *((_BYTE *)v55 + v51 + 1) = *((_BYTE *)v56 + v51 + 1);
  return a1;
}

uint64_t assignWithCopy for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  unsigned int v70;
  size_t v71;
  void *v72;
  const void *v73;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v80 = a1;
  v8 = (v7 + 33 + a1) & ~v7;
  v9 = (v7 + 33 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = v8 + v10;
  v12 = v9 + v10;
  *(_BYTE *)v11 = *(_BYTE *)v12;
  v13 = v11 & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
  v15 = v12 & 0xFFFFFFFFFFFFFFF8;
  v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 32);
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 32) < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v24 = *(_QWORD *)v16;
      v25 = *(_QWORD *)(v16 + 8);
      v26 = *(_BYTE *)(v16 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v16, v25, v26);
      *(_QWORD *)v14 = v24;
      *(_QWORD *)(v14 + 8) = v25;
      *(_BYTE *)(v14 + 16) = v26;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v18 = *(_QWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      v20 = *(_BYTE *)(v16 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v16, v19, v20);
      v21 = *(_QWORD *)v14;
      v22 = *(_QWORD *)(v14 + 8);
      v23 = *(_BYTE *)(v14 + 16);
      *(_QWORD *)v14 = v18;
      *(_QWORD *)(v14 + 8) = v19;
      *(_BYTE *)(v14 + 16) = v20;
      outlined consume of Text.Storage(v21, v22, v23);
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16), *(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24));
    swift_bridgeObjectRelease();
  }
  v27 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v16;
  *(_OWORD *)(v14 + 16) = v27;
LABEL_8:
  v28 = (v13 + 47) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v15 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (v28 == v29)
    goto LABEL_38;
  v30 = *(unsigned __int8 *)(v28 + 107);
  if (v30 >= 2)
    v30 = *(_DWORD *)v28 + 2;
  if (v30 == 1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v28 + 32))
    {
      swift_release();
      swift_release();
    }
    if (!*(_QWORD *)(v28 + 64))
      goto LABEL_21;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v28 + 16))
    {
      swift_release();
      swift_release();
    }
    if (*(_QWORD *)(v28 + 48))
    {
      swift_release();
      swift_release();
    }
  }
  swift_release();
LABEL_21:
  v31 = *(unsigned __int8 *)(v29 + 107);
  if (v31 >= 2)
    v31 = *(_DWORD *)v29 + 2;
  if (v31 == 1)
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    *(_QWORD *)(v28 + 24) = *(_QWORD *)(v29 + 24);
    v32 = *(_QWORD *)(v29 + 32);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v32)
    {
      v33 = *(_QWORD *)(v29 + 40);
      *(_QWORD *)(v28 + 32) = v32;
      *(_QWORD *)(v28 + 40) = v33;
      v34 = *(_QWORD *)(v29 + 56);
      *(_QWORD *)(v28 + 48) = *(_QWORD *)(v29 + 48);
      *(_QWORD *)(v28 + 56) = v34;
      swift_retain();
      swift_retain();
    }
    else
    {
      v38 = *(_OWORD *)(v29 + 48);
      *(_OWORD *)(v28 + 32) = *(_OWORD *)(v29 + 32);
      *(_OWORD *)(v28 + 48) = v38;
    }
    v39 = *(_QWORD *)(v29 + 64);
    if (v39)
    {
      v40 = *(_QWORD *)(v29 + 72);
      *(_QWORD *)(v28 + 64) = v39;
      *(_QWORD *)(v28 + 72) = v40;
      v41 = *(_QWORD *)(v29 + 88);
      *(_QWORD *)(v28 + 80) = *(_QWORD *)(v29 + 80);
      *(_QWORD *)(v28 + 88) = v41;
      swift_retain();
      swift_retain();
    }
    else
    {
      v46 = *(_OWORD *)(v29 + 80);
      *(_OWORD *)(v28 + 64) = *(_OWORD *)(v29 + 64);
      *(_OWORD *)(v28 + 80) = v46;
    }
    *(_BYTE *)(v28 + 96) = *(_BYTE *)(v29 + 96);
    v47 = *(_DWORD *)(v29 + 100);
    *(_BYTE *)(v28 + 104) = *(_BYTE *)(v29 + 104);
    *(_DWORD *)(v28 + 100) = v47;
    *(_BYTE *)(v28 + 105) = *(_BYTE *)(v29 + 105);
    *(_BYTE *)(v28 + 106) = *(_BYTE *)(v29 + 106);
    *(_BYTE *)(v28 + 107) = 1;
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
    v35 = *(_QWORD *)(v29 + 16);
    swift_bridgeObjectRetain();
    if (v35)
    {
      v36 = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v28 + 16) = v35;
      *(_QWORD *)(v28 + 24) = v36;
      v37 = *(_QWORD *)(v29 + 40);
      *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
      *(_QWORD *)(v28 + 40) = v37;
      swift_retain();
      swift_retain();
    }
    else
    {
      v42 = *(_OWORD *)(v29 + 32);
      *(_OWORD *)(v28 + 16) = *(_OWORD *)(v29 + 16);
      *(_OWORD *)(v28 + 32) = v42;
    }
    v43 = *(_QWORD *)(v29 + 48);
    if (v43)
    {
      v44 = *(_QWORD *)(v29 + 56);
      *(_QWORD *)(v28 + 48) = v43;
      *(_QWORD *)(v28 + 56) = v44;
      v45 = *(_QWORD *)(v29 + 72);
      *(_QWORD *)(v28 + 64) = *(_QWORD *)(v29 + 64);
      *(_QWORD *)(v28 + 72) = v45;
      swift_retain();
      swift_retain();
    }
    else
    {
      v48 = *(_OWORD *)(v29 + 64);
      *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
      *(_OWORD *)(v28 + 64) = v48;
    }
    *(_BYTE *)(v28 + 80) = *(_BYTE *)(v29 + 80);
    v49 = *(_DWORD *)(v29 + 84);
    *(_BYTE *)(v28 + 88) = *(_BYTE *)(v29 + 88);
    *(_DWORD *)(v28 + 84) = v49;
    *(_BYTE *)(v28 + 89) = *(_BYTE *)(v29 + 89);
    *(_BYTE *)(v28 + 90) = *(_BYTE *)(v29 + 90);
    *(_QWORD *)(v28 + 96) = *(_QWORD *)(v29 + 96);
    *(_BYTE *)(v28 + 107) = 0;
    swift_retain();
  }
LABEL_38:
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(_DWORD *)(v51 + 80) & 0xF8;
  v53 = v52 | 7;
  v54 = ~(v52 | 7);
  v55 = (_QWORD *)((v28 + (v52 | 7) + 108) & v54);
  v56 = (_QWORD *)((v29 + (v52 | 7) + 108) & v54);
  if (*(_QWORD *)(v51 + 64) <= 0x10uLL)
    v57 = 16;
  else
    v57 = *(_QWORD *)(v51 + 64);
  v58 = (v52 + 23) & ~v53;
  v59 = (_QWORD *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
  v60 = (unint64_t *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
  v61 = *v60;
  if (*v59 < 0xFFFFFFFFuLL)
  {
    if (v61 >= 0xFFFFFFFF)
    {
      v79 = v50;
      *v55 = *v56;
      *v59 = *v60;
      v68 = (_OWORD *)(((unint64_t)v59 + v53 + 8) & v54);
      v69 = (_OWORD *)(((unint64_t)v60 + v53 + 8) & v54);
      v70 = *((unsigned __int8 *)v69 + v57);
      swift_retain();
      swift_retain();
      if (v70 <= 1)
      {
        if (v70 == 1)
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v51 + 16))(v68, v69, v79);
          v75 = 1;
        }
        else
        {
          v75 = 0;
          *v68 = *v69;
        }
        *((_BYTE *)v68 + v57) = v75;
        *((_BYTE *)v68 + v57 + 1) = *((_BYTE *)v69 + v57 + 1);
        return v80;
      }
      v72 = (void *)(((unint64_t)v59 + v53 + 8) & v54);
      v73 = v69;
      v71 = v57 + 2;
LABEL_70:
      memcpy(v72, v73, v71);
      return v80;
    }
    v71 = v58 + v57 + 2;
LABEL_61:
    v72 = v55;
    v73 = v56;
    goto LABEL_70;
  }
  v78 = v50;
  if (v61 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    if (*(_BYTE *)((((unint64_t)v59 + v53 + 8) & v54) + v57) == 1)
      (*(void (**)(void))(v51 + 8))();
    v71 = v58 + v57 + 2;
    goto LABEL_61;
  }
  *v55 = *v56;
  swift_retain();
  swift_release();
  *v59 = *v60;
  swift_retain();
  swift_release();
  v62 = (_OWORD *)(((unint64_t)v59 + v53 + 8) & v54);
  v63 = (_OWORD *)(((unint64_t)v60 + v53 + 8) & v54);
  v64 = *((unsigned __int8 *)v62 + v57);
  v65 = *((unsigned __int8 *)v63 + v57);
  if (v64 > 1)
  {
    if (v65 <= 1)
    {
      if (v65 == 1)
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v51 + 16))(((unint64_t)v59 + v53 + 8) & v54, ((unint64_t)v60 + v53 + 8) & v54, v78);
        v76 = 1;
      }
      else
      {
        v76 = 0;
        *v62 = *v63;
      }
      *((_BYTE *)v62 + v57) = v76;
      *((_BYTE *)v62 + v57 + 1) = *((_BYTE *)v63 + v57 + 1);
      return v80;
    }
    goto LABEL_69;
  }
  if (v65 > 1)
  {
    if (v64 == 1)
      (*(void (**)(unint64_t, uint64_t))(v51 + 8))(((unint64_t)v59 + v53 + 8) & v54, v78);
LABEL_69:
    v72 = (void *)(((unint64_t)v59 + v53 + 8) & v54);
    v73 = (const void *)(((unint64_t)v60 + v53 + 8) & v54);
    v71 = v57 + 2;
    goto LABEL_70;
  }
  v66 = v57 + 1;
  if (v62 != v63)
  {
    if (v64 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v51 + 8))(((unint64_t)v59 + v53 + 8) & v54, v78);
      v65 = *((unsigned __int8 *)v63 + v57);
      if (v65 >= 2)
      {
        if (v57 <= 3)
          v67 = v57;
        else
          v67 = 4;
        __asm { BR              X12 }
      }
      v66 = v57 + 1;
    }
    if (v65 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v51 + 16))(((unint64_t)v59 + v53 + 8) & v54, ((unint64_t)v60 + v53 + 8) & v54, v78);
      v66 = v57 + 1;
      v77 = 1;
    }
    else
    {
      v77 = 0;
      *v62 = *v63;
    }
    *((_BYTE *)v62 + v57) = v77;
  }
  *((_BYTE *)v62 + v66) = *((_BYTE *)v63 + v66);
  return v80;
}

uint64_t initializeWithTake for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  size_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  unsigned int v37;
  char v38;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 33 + a1) & ~v6;
  v8 = (v6 + 33 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v7 + v9;
  v11 = v8 + v9;
  *(_BYTE *)v10 = *(_BYTE *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)(v11 + 8);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
  *(_OWORD *)(v10 + 8) = v12;
  v13 = (v10 + 47) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 47) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v14 + 107);
  if (v15 >= 2)
    v15 = *(_DWORD *)v14 + 2;
  if (v15 == 1)
  {
    v16 = *(_OWORD *)v14;
    v17 = *(_OWORD *)(v14 + 32);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
    *(_OWORD *)(v13 + 32) = v17;
    *(_OWORD *)v13 = v16;
    v18 = *(_OWORD *)(v14 + 48);
    v19 = *(_OWORD *)(v14 + 64);
    v20 = *(_OWORD *)(v14 + 80);
    *(_OWORD *)(v13 + 91) = *(_OWORD *)(v14 + 91);
  }
  else
  {
    LOBYTE(v15) = 0;
    v21 = *(_OWORD *)v14;
    v22 = *(_OWORD *)(v14 + 32);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
    *(_OWORD *)(v13 + 32) = v22;
    *(_OWORD *)v13 = v21;
    v18 = *(_OWORD *)(v14 + 48);
    v19 = *(_OWORD *)(v14 + 64);
    v20 = *(_OWORD *)(v14 + 80);
    *(_QWORD *)(v13 + 96) = *(_QWORD *)(v14 + 96);
  }
  *(_OWORD *)(v13 + 64) = v19;
  *(_OWORD *)(v13 + 80) = v20;
  *(_OWORD *)(v13 + 48) = v18;
  *(_BYTE *)(v13 + 107) = v15;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8 | 7;
  v27 = ~v26;
  v28 = (char *)((v13 + v26 + 108) & ~v26);
  v29 = (_QWORD *)((v14 + v26 + 108) & ~v26);
  if (*(_QWORD *)(v25 + 64) <= 0x10uLL)
    v30 = 16;
  else
    v30 = *(_QWORD *)(v25 + 64);
  v31 = v30 + 2;
  v32 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v32 < 0xFFFFFFFFuLL)
  {
    v31 += (v26 + 16) & v27;
LABEL_16:
    memcpy(v28, v29, v31);
    return a1;
  }
  *(_QWORD *)v28 = *v29;
  v33 = (unint64_t)(v28 + 15);
  *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8) = *v32;
  v34 = v26 + 8;
  v35 = (char *)((v34 + (v33 & 0xFFFFFFFFFFFFFFF8)) & v27);
  v36 = (_OWORD *)(((unint64_t)v32 + v34) & v27);
  v37 = *((unsigned __int8 *)v36 + v30);
  if (v37 > 1)
  {
    v28 = v35;
    v29 = v36;
    goto LABEL_16;
  }
  if (v37 == 1)
  {
    (*(void (**)(char *, _OWORD *, uint64_t))(v25 + 32))(v35, v36, v24);
    v38 = 1;
  }
  else
  {
    v38 = 0;
    *(_OWORD *)v35 = *v36;
  }
  v35[v30] = v38;
  v35[v30 + 1] = *((_BYTE *)v36 + v30 + 1);
  return a1;
}

uint64_t assignWithTake for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  char v53;
  uint64_t v55;
  size_t __n;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 33 + a1) & ~v8;
  v10 = (v8 + 33 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v9 + v11;
  v13 = v10 + v11;
  *(_BYTE *)v12 = *(_BYTE *)v13;
  v14 = v12 & 0xFFFFFFFFFFFFFFF8;
  v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 32) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 32) >= 0xFFFFFFFFuLL)
    {
      v18 = *(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
      v19 = *(_QWORD *)v15;
      v20 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16);
      v21 = *(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_OWORD *)v15 = *(_OWORD *)v17;
      *(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) = v18;
      outlined consume of Text.Storage(v19, v20, v21);
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(v17 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16), *(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24));
    swift_bridgeObjectRelease();
  }
  v22 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v17;
  *(_OWORD *)(v15 + 16) = v22;
LABEL_6:
  v23 = (v14 + 47) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v16 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (v23 == v24)
    goto LABEL_25;
  v25 = *(unsigned __int8 *)(v23 + 107);
  if (v25 >= 2)
    v25 = *(_DWORD *)v23 + 2;
  if (v25 == 1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v23 + 32))
    {
      swift_release();
      swift_release();
    }
    if (!*(_QWORD *)(v23 + 64))
      goto LABEL_19;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v23 + 16))
    {
      swift_release();
      swift_release();
    }
    if (*(_QWORD *)(v23 + 48))
    {
      swift_release();
      swift_release();
    }
  }
  swift_release();
LABEL_19:
  v26 = *(unsigned __int8 *)(v24 + 107);
  if (v26 >= 2)
    v26 = *(_DWORD *)v24 + 2;
  if (v26 == 1)
  {
    v27 = *(_OWORD *)v24;
    v28 = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
    *(_OWORD *)(v23 + 32) = v28;
    *(_OWORD *)v23 = v27;
    v29 = *(_OWORD *)(v24 + 48);
    v30 = *(_OWORD *)(v24 + 64);
    v31 = *(_OWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 91) = *(_OWORD *)(v24 + 91);
  }
  else
  {
    LOBYTE(v26) = 0;
    v32 = *(_OWORD *)v24;
    v33 = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(v24 + 16);
    *(_OWORD *)(v23 + 32) = v33;
    *(_OWORD *)v23 = v32;
    v29 = *(_OWORD *)(v24 + 48);
    v30 = *(_OWORD *)(v24 + 64);
    v31 = *(_OWORD *)(v24 + 80);
    *(_QWORD *)(v23 + 96) = *(_QWORD *)(v24 + 96);
  }
  *(_OWORD *)(v23 + 64) = v30;
  *(_OWORD *)(v23 + 80) = v31;
  *(_OWORD *)(v23 + 48) = v29;
  *(_BYTE *)(v23 + 107) = v26;
LABEL_25:
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(_DWORD *)(v35 + 80) & 0xF8;
  v37 = v36 | 7;
  v38 = ~(v36 | 7);
  v39 = (_QWORD *)((v23 + (v36 | 7) + 108) & v38);
  v40 = (_QWORD *)((v24 + (v36 | 7) + 108) & v38);
  if (*(_QWORD *)(v35 + 64) <= 0x10uLL)
    v41 = 16;
  else
    v41 = *(_QWORD *)(v35 + 64);
  v42 = (v36 + 23) & ~v37;
  v43 = v41 + 1;
  v44 = v41 + 2;
  v45 = (_QWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  v46 = (unint64_t *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  v47 = *v46;
  if (*v45 < 0xFFFFFFFFuLL)
  {
    if (v47 < 0xFFFFFFFF)
    {
      v44 += v42;
    }
    else
    {
      *v39 = *v40;
      *v45 = *v46;
      v39 = (_QWORD *)(((unint64_t)v45 + v37 + 8) & v38);
      v40 = (_QWORD *)(((unint64_t)v46 + v37 + 8) & v38);
      v51 = *((unsigned __int8 *)v40 + v41);
      if (v51 <= 1)
      {
        if (v51 == 1)
        {
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 32))(((unint64_t)v45 + v37 + 8) & v38, ((unint64_t)v46 + v37 + 8) & v38, v34);
          v43 = v41 + 1;
LABEL_58:
          v53 = 1;
LABEL_60:
          *((_BYTE *)v39 + v41) = v53;
          goto LABEL_61;
        }
LABEL_59:
        v53 = 0;
        *(_OWORD *)v39 = *(_OWORD *)v40;
        goto LABEL_60;
      }
    }
    goto LABEL_53;
  }
  v55 = v34;
  __n = v41 + 2;
  if (v47 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    if (*(_BYTE *)((((unint64_t)v45 + v37 + 8) & v38) + v41) == 1)
      (*(void (**)(void))(v35 + 8))();
    v44 = v42 + __n;
    goto LABEL_53;
  }
  *v39 = *v40;
  swift_release();
  *v45 = *v46;
  swift_release();
  v39 = (_QWORD *)(((unint64_t)v45 + v37 + 8) & v38);
  v40 = (_QWORD *)(((unint64_t)v46 + v37 + 8) & v38);
  v48 = *((unsigned __int8 *)v39 + v41);
  v49 = *((unsigned __int8 *)v40 + v41);
  if (v48 <= 1)
  {
    v44 = v41 + 2;
    if (v49 <= 1)
    {
      v43 = v41 + 1;
      if (v39 == v40)
      {
LABEL_61:
        *((_BYTE *)v39 + v43) = *((_BYTE *)v40 + v43);
        return a1;
      }
      if (v48 == 1)
      {
        (*(void (**)(unint64_t, uint64_t, size_t))(v35 + 8))(((unint64_t)v45 + v37 + 8) & v38, v55, __n);
        v49 = *((unsigned __int8 *)v40 + v41);
        if (v49 >= 2)
        {
          if (v41 <= 3)
            v50 = v41;
          else
            v50 = 4;
          __asm { BR              X12 }
        }
        v43 = v41 + 1;
      }
      if (v49 == 1)
      {
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 32))(((unint64_t)v45 + v37 + 8) & v38, ((unint64_t)v46 + v37 + 8) & v38, v55);
        v43 = v41 + 1;
        goto LABEL_58;
      }
      goto LABEL_59;
    }
    if (v48 == 1)
    {
      (*(void (**)(unint64_t, uint64_t, size_t))(v35 + 8))(((unint64_t)v45 + v37 + 8) & v38, v55, __n);
      v44 = v41 + 2;
    }
    goto LABEL_53;
  }
  v44 = v41 + 2;
  if (v49 > 1)
  {
LABEL_53:
    memcpy(v39, v40, v44);
    return a1;
  }
  if (v49 == 1)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 32))(((unint64_t)v45 + v37 + 8) & v38, ((unint64_t)v46 + v37 + 8) & v38, v55);
    v52 = 1;
  }
  else
  {
    v52 = 0;
    *(_OWORD *)v39 = *(_OWORD *)v40;
  }
  *((_BYTE *)v39 + v41) = v52;
  *((_BYTE *)v39 + v41 + 1) = *((_BYTE *)v40 + v41 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextField(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  unint64_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = 16;
  if (*(_QWORD *)(v10 + 64) > 0x10uLL)
    v11 = *(_QWORD *)(v10 + 64);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v6 + 80);
  if (a2 <= v8)
    goto LABEL_24;
  v13 = *(_DWORD *)(v10 + 80) & 0xF8;
  v14 = v11
      + ((v13 + 23) & ~(v13 | 7))
      + (((v13 | 7)
        + ((((((v12 + 33) & ~v12) + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 108) & ~(v13 | 7))
      + 2;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v18 < 2)
    {
LABEL_24:
      if ((v7 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))((a1 + v12 + 33) & ~v12, v7, v5);
      v20 = *(_QWORD *)(a1 + 8);
      if (v20 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      return (v20 + 1);
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_24;
LABEL_17:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X11 }
  }
  return v8 + v19 + 1;
}

void storeEnumTagSinglePayload for TextField(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8;
  v12 = *(_QWORD *)(v10 + 64);
  if (v12 <= 0x10)
    v12 = 16;
  v13 = v12
      + ((v11 + 23) & ~(v11 | 7))
      + (((v11 | 7)
        + ((((((*(unsigned __int8 *)(v7 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
            + *(_QWORD *)(v7 + 64)) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 108) & ~(v11 | 7))
      + 2;
  if (a3 <= v8)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v8 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v8 < a2)
  {
    v15 = ~v8 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for TextField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextField);
}

void sub_1872A7664()
{
  type metadata accessor for ResolvedTextFieldStyle();
  lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_1872A76A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[12];

  v0 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<ProvidesEditMenuInteraction>(255);
  v1 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle();
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v2 = MEMORY[0x1E0CE2E70];
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v5);
  v4[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v2, v1, v4);
}

ValueMetadata *type metadata accessor for TextFieldState.DeprecatedActions()
{
  return &type metadata for TextFieldState.DeprecatedActions;
}

uint64_t destroy for TextFieldState(uint64_t a1)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_release();
    result = swift_release();
  }
  if (*(_QWORD *)(a1 + 48))
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for TextFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    v7 = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = v7;
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = v5[1];
    *(_OWORD *)(a1 + 16) = *v5;
    *(_OWORD *)(a1 + 32) = v8;
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 48) = v9;
    v10 = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = v10;
    swift_retain();
    swift_retain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v11;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

uint64_t assignWithCopy for TextFieldState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v7;
      swift_retain();
      swift_release();
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v8;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of TextFieldState.FormatActions(a1 + 16);
      v11 = *(_OWORD *)(a2 + 32);
      *v4 = *v6;
      *(_OWORD *)(a1 + 32) = v11;
    }
  }
  else if (v5)
  {
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v9;
    v10 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v10;
    swift_retain();
    swift_retain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 32);
    *v4 = *v6;
    *(_OWORD *)(a1 + 32) = v12;
  }
  v13 = (_OWORD *)(a1 + 48);
  v15 = (_OWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v14)
    {
      v16 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v16;
      swift_retain();
      swift_release();
      v17 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v17;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of TextFieldState.FormatActions(a1 + 48);
      v20 = *(_OWORD *)(a2 + 64);
      *v13 = *v15;
      *(_OWORD *)(a1 + 64) = v20;
    }
  }
  else if (v14)
  {
    v18 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v18;
    v19 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v19;
    swift_retain();
    swift_retain();
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 64);
    *v13 = *v15;
    *(_OWORD *)(a1 + 64) = v21;
  }
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v22 = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = v22;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  return a1;
}

uint64_t outlined destroy of TextFieldState.FormatActions(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

__n128 __swift_memcpy91_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 75) = *(_OWORD *)(a2 + 75);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for TextFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
      swift_release();
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of TextFieldState.FormatActions(a1 + 16);
  }
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
LABEL_6:
  v8 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
LABEL_10:
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    goto LABEL_11;
  }
  if (!v8)
  {
    outlined destroy of TextFieldState.FormatActions(a1 + 48);
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
LABEL_11:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFieldState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 91))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextFieldState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 90) = 0;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 91) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 91) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextFieldState()
{
  return &type metadata for TextFieldState;
}

_OWORD *assignWithTake for TextFieldState.DeprecatedActions(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TextFieldState.FormatActions()
{
  return &type metadata for TextFieldState.FormatActions;
}

uint64_t outlined retain of TextFieldState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  outlined copy of TextFieldState.FormatActions?(v2);
  outlined copy of TextFieldState.FormatActions?(v3);
  return a1;
}

uint64_t outlined assign with copy of Binding<TextSelection?>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<TextSelection?>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of TextFieldState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRelease();
  outlined consume of TextFieldState.FormatActions?(v2);
  outlined consume of TextFieldState.FormatActions?(v3);
  return a1;
}

uint64_t outlined init with take of TextField<Text>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of Binding<TextFieldState>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TextFieldState.FormatActions?(v2);
  outlined consume of TextFieldState.FormatActions?(v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection;
  if (!lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFieldStateTextProjection, &type metadata for TextFieldStateTextProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection;
  if (!lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFieldStateTextProjection, &type metadata for TextFieldStateTextProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection;
  if (!lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextFieldStateTextProjection, &type metadata for TextFieldStateTextProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFieldStateTextProjection and conformance TextFieldStateTextProjection);
  }
  return result;
}

uint64_t outlined release of Binding<(String, TextFieldState)>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TextFieldState.FormatActions?(v2);
  outlined consume of TextFieldState.FormatActions?(v3);
  return a1;
}

uint64_t sub_1872A7F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for Binding();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v4;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6 + *(int *)(v2 + 32), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(type metadata accessor for Binding() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(a1, a2, v2 + v7, *(void **)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)), v5);
}

uint64_t partial apply for closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2);
}

uint64_t sub_1872A80CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = type metadata accessor for Binding();
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = (v4 + v7) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0 + v8 + *(int *)(v6 + 32), AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  swift_getAssociatedTypeWitness();
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Binding() - 8) + 80);
  return closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, v2 + v8, v2 + ((v9 + v10) & ~v10), v5, v6);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, v2 + ((v4 + 32) & ~v4), v3, *(_QWORD *)(v2 + 24));
}

ValueMetadata *type metadata accessor for TextFieldStateTextProjection()
{
  return &type metadata for TextFieldStateTextProjection;
}

__n128 specialized TextFieldStateTextProjection.set(base:newValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_BYTE *@<X8>);
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[32];
  _QWORD v19[4];

  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  outlined init with take of TextFieldState.FormatActions?(a2 + 16, (uint64_t)v18);
  outlined init with take of TextFieldState.FormatActions?((uint64_t)v18, (uint64_t)v19);
  v6 = v19[0];
  if (v19[0])
  {
    v7 = v19[1];
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    swift_retain();
    v9 = (void (*)(_BYTE *@<X8>))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  }
  else
  {
    v9 = protocol witness for static StatefulRule.initialValue.getter in conformance LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs;
  }
  v16 = v5;
  v17 = v4;
  v9(&v15);
  swift_release();
  if ((v15 & 1) != 0 || (*(_BYTE *)(a2 + 80) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 64);
  outlined retain of TextFieldState(a2);
  swift_bridgeObjectRelease();
  outlined consume of TextFieldState.FormatActions?(v10);
  outlined consume of TextFieldState.FormatActions?(v11);
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 91) = *(_OWORD *)(a2 + 75);
  result = *(__n128 *)a2;
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 32) = v14;
  return result;
}

uint64_t outlined init with take of TextFieldState.FormatActions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TextFieldState.FormatActions?, (uint64_t)&type metadata for TextFieldState.FormatActions, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1872A84DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)(a1, *(uint64_t (**)(_QWORD, _QWORD))(v2 + 16), a2);
}

void static IsLinkedGroupTraitKey.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
}

void View._listLinkedGroup(_:)()
{
  _diagnoseUnavailableCodeReached()();
}

void static _IsLinkedGroupTraitKey._linkedGroup.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for IsLinkedGroupTraitKey()
{
  return &type metadata for IsLinkedGroupTraitKey;
}

ValueMetadata *type metadata accessor for _IsLinkedGroupTraitKey()
{
  return &type metadata for _IsLinkedGroupTraitKey;
}

uint64_t sub_1872A855C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<IsLinkedGroupTraitKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<IsLinkedGroupTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsLinkedGroupTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsLinkedGroupTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsLinkedGroupTraitKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void View.bottomBar<A>(content:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1872A866C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.springLoadingBehavior : EnvironmentValues()
{
  return EnvironmentValues.springLoadingBehavior.setter();
}

uint64_t EnvironmentValues.springLoadingBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static SpringLoadingBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SpringLoadingBehavior.enabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static SpringLoadingBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void SpringLoadingBehavior.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static SpringLoadingBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SpringLoadingBehavior.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t View.springLoadingBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t HasCustomSpringLoadedBehavior;
  _QWORD v16[2];
  char v17;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>, (uint64_t)&type metadata for SpringLoadingBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v5 = type metadata accessor for ModifiedContent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16[-1] - v8;
  v10 = *a1;
  swift_getKeyPath();
  v17 = v10;
  View.environment<A>(_:_:)();
  swift_release();
  v11 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
  v16[0] = a3;
  v16[1] = v11;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v16);
  HasCustomSpringLoadedBehavior = lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior();
  View.input<A>(_:)((uint64_t)&type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, v5, (uint64_t)&type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, v12, HasCustomSpringLoadedBehavior);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1872A89E4()
{
  return EnvironmentValues.springLoadingBehavior.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>, (uint64_t)&type metadata for SpringLoadingBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, &type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, &type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, &type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, &type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, &type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

uint64_t (*EnvironmentValues.springLoadingBehavior.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.springLoadingBehavior.modify;
}

uint64_t EnvironmentValues.springLoadingBehavior.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior();
  return PropertyList.subscript.setter();
}

uint64_t View.springLoaded(automaticallyEnabled:onActivate:onHighlightChange:onEnded:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10[0] = a1;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  return MEMORY[0x18D75B4AC](v10, a8, &type metadata for SpringLoadingInteractionModifier, a9);
}

BOOL static SpringLoadingBehavior.HighlightState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SpringLoadingBehavior.HighlightState.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SpringLoadingBehavior.HighlightState.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior and conformance SpringLoadingBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior and conformance SpringLoadingBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior and conformance SpringLoadingBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior, &type metadata for SpringLoadingBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior and conformance SpringLoadingBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior.HighlightState, &type metadata for SpringLoadingBehavior.HighlightState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.HighlightState()
{
  return &type metadata for SpringLoadingBehavior.HighlightState;
}

uint64_t type metadata accessor for SpringLoadedViewResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SpringLoadedViewResponder;
  if (!type metadata singleton initialization cache for SpringLoadedViewResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SpringLoadedViewResponder()
{
  return swift_initClassMetadata2();
}

double static SpringLoadingInteractionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a2[3];
  v6 = a2[1];
  v30 = a2[2];
  v31 = v5;
  v7 = a2[3];
  v32 = a2[4];
  v8 = a2[1];
  v28 = *a2;
  v29 = v8;
  v24 = v30;
  v25 = v7;
  v26 = a2[4];
  v9 = *a1;
  v33 = *((_DWORD *)a2 + 20);
  v27 = *((_DWORD *)a2 + 20);
  v22 = v28;
  v23 = v6;
  a3(&v19);
  v20 = v31;
  v21 = DWORD2(v31);
  *(_QWORD *)&v22 = v31;
  DWORD2(v22) = DWORD2(v31);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    LODWORD(v22) = v9;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<SpringLoadingInteractionModifier>, (uint64_t)&type metadata for SpringLoadingInteractionModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
    v10 = _GraphValue.value.getter();
    v24 = v30;
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v22 = v28;
    v23 = v29;
    swift_getKeyPath();
    v11 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v24 = v30;
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v22 = v28;
    v23 = v29;
    swift_getKeyPath();
    v12 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v22 = v19;
    v13 = _ViewOutputs.viewResponders()();
    type metadata accessor for SpringLoadedViewResponder();
    v14 = swift_allocObject();
    *(_BYTE *)(v14 + 208) = 0;
    *(_QWORD *)(v14 + 216) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(_QWORD *)(v14 + 224) = 0;
    *(_QWORD *)(v14 + 232) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(_QWORD *)(v14 + 240) = 0;
    *(_QWORD *)(v14 + 248) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(_QWORD *)(v14 + 256) = 0;
    v24 = v30;
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v22 = v28;
    v23 = v29;
    outlined retain of _ViewInputs((uint64_t)&v28);
    v15 = DefaultLayoutViewResponder.init(inputs:)();
    *(_QWORD *)&v22 = __PAIR64__(v11, v10);
    *((_QWORD *)&v22 + 1) = __PAIR64__(v13, v12);
    *(_QWORD *)&v23 = v15;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v22) = 0;
    v16 = _ViewOutputs.subscript.setter();
    *(_QWORD *)&v22 = v20;
    DWORD2(v22) = v21;
    MEMORY[0x1E0C80A78](v16, v17);
    outlined retain of [Text.Modifier]((uint64_t)&v20);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  *a4 = v19;
  result = *((double *)&v19 + 1);
  a4[1] = *((_QWORD *)&v19 + 1);
  return result;
}

uint64_t SpringLoadedViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 216) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(v0 + 256) = 0;
  return DefaultLayoutViewResponder.init(inputs:)();
}

void protocol witness for ViewModifier.body(content:) in conformance SpringLoadingInteractionModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SpringLoadedResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *Value;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 16);
  Value = (_BYTE *)AGGraphGetValue();
  LOBYTE(v3) = 0;
  if (*Value == 1)
  {
    v3 = *(unsigned __int8 *)AGGraphGetValue();
    if (v3 != 1)
    {
      if (v3 == 2)
        LOBYTE(v3) = 0;
      else
        LOBYTE(v3) = *(_BYTE *)AGGraphGetValue();
    }
  }
  *(_BYTE *)(v1 + 208) = v3;
  v4 = AGGraphGetValue();
  v6 = *(_QWORD *)(v4 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v1 + 216) = v6;
  *(_QWORD *)(v1 + 224) = v5;
  swift_retain();
  swift_release();
  v7 = AGGraphGetValue();
  v9 = *(_QWORD *)(v7 + 24);
  v8 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v1 + 232) = v9;
  *(_QWORD *)(v1 + 240) = v8;
  swift_retain();
  swift_release();
  v10 = AGGraphGetValue();
  v12 = *(_QWORD *)(v10 + 40);
  v11 = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v1 + 248) = v12;
  *(_QWORD *)(v1 + 256) = v11;
  swift_retain();
  swift_release();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v13 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v15 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall SpringLoadedViewResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x6F4C676E69727073;
  v1._object = (void *)0xEC00000064656461;
  String.append(_:)(v1);
}

uint64_t SpringLoadedViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 216) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(v0 + 256) = 0;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t SpringLoadedViewResponder.__ivar_destroyer()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t SpringLoadedViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SpringLoadedViewResponder()
{
  return type metadata accessor for SpringLoadedViewResponder();
}

uint64_t sub_1872A96A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>, (uint64_t)&type metadata for SpringLoadingBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>(255);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

void type metadata accessor for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>(uint64_t a1)
{
  unint64_t HasCustomSpringLoadedBehavior;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>)
  {
    HasCustomSpringLoadedBehavior = lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, HasCustomSpringLoadedBehavior, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>);
  }
}

uint64_t sub_1872A97B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for SpringLoadingInteractionModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t destroy for SpringLoadingInteractionModifier()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SpringLoadingInteractionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpringLoadingInteractionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SpringLoadingInteractionModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpringLoadingInteractionModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpringLoadingInteractionModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpringLoadingInteractionModifier()
{
  return &type metadata for SpringLoadingInteractionModifier;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.Key()
{
  return &type metadata for SpringLoadingBehavior.Key;
}

_UNKNOWN **base witness table accessor for ViewModifier in SpringLoadingInteractionModifier()
{
  return &protocol witness table for SpringLoadingInteractionModifier;
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadingBehavior.Guts, &type metadata for SpringLoadingBehavior.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  return &protocol witness table for SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
}

unint64_t lazy protocol witness table accessor for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter;
  if (!lazy protocol witness table cache variable for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SpringLoadedResponderFilter, &unk_1E1AF44D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SpringLoadedResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpringLoadedResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SpringLoadedResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SpringLoadedResponderFilter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpringLoadedResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SpringLoadedResponderFilter()
{
  return &unk_1E1AF44D8;
}

ValueMetadata *type metadata accessor for CanSpringLoadKey()
{
  return &type metadata for CanSpringLoadKey;
}

uint64_t __DesignTimeSelectionIdentifier.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

SwiftUI::__DesignTimeSelectionIdentifier __swiftcall __DesignTimeSelectionIdentifier.init(_:)(SwiftUI::__DesignTimeSelectionIdentifier result)
{
  SwiftUI::__DesignTimeSelectionIdentifier *v1;

  *v1 = result;
  return result;
}

uint64_t __DesignTimeSelectionIdentifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static __DesignTimeSelectionIdentifier.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int __DesignTimeSelectionIdentifier.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __DesignTimeSelectionIdentifier()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __DesignTimeSelectionIdentifier()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __DesignTimeSelectionIdentifier()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for __DesignTimeSelectionIdentifier, &type metadata for __DesignTimeSelectionIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for __DesignTimeSelectionIdentifier, &type metadata for __DesignTimeSelectionIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __DesignTimeSelectionIdentifier(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

ValueMetadata *type metadata accessor for __DesignTimeSelectionIdentifier()
{
  return &type metadata for __DesignTimeSelectionIdentifier;
}

ValueMetadata *type metadata accessor for DefaultSectionStyle()
{
  return &type metadata for DefaultSectionStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for SectionStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, &lazy cache variable for type metadata for SectionStyleModifier<PlainSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainSectionStyle and conformance PlainSectionStyle, (uint64_t)&type metadata for PlainSectionStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, &lazy cache variable for type metadata for SectionStyleModifier<InlineActionsSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle, (uint64_t)&type metadata for InlineActionsSectionStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle;
  if (!lazy protocol witness table cache variable for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InlineActionsSectionStyle, &type metadata for InlineActionsSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for SectionStyleModifier<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabViewCommonModifier()
{
  return &type metadata for TabViewCommonModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabViewCommonModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1872AA350()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for IsSearchImplementedModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier>, type metadata accessor for ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<TabViewCommonModifier>);
}

void type metadata accessor for _ViewModifier_Content<TabViewCommonModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<TabViewCommonModifier>)
  {
    lazy protocol witness table accessor for type TabViewCommonModifier and conformance TabViewCommonModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<TabViewCommonModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type TabViewCommonModifier and conformance TabViewCommonModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabViewCommonModifier and conformance TabViewCommonModifier;
  if (!lazy protocol witness table cache variable for type TabViewCommonModifier and conformance TabViewCommonModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabViewCommonModifier, &type metadata for TabViewCommonModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCommonModifier and conformance TabViewCommonModifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for UpdateEnvironmentToAllowedBehaviors);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<TabViewCommonModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t EnvironmentValues.tabBarPlacement.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.tabBarPlacement : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.tabBarPlacement : EnvironmentValues()
{
  return EnvironmentValues.tabBarPlacement.setter();
}

uint64_t EnvironmentValues.tabBarPlacement.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TabBarPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.isTabBarShowingSections.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.isTabBarShowingSections.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsTabBarShowingSectionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.TabBarPlacementKey(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.TabBarPlacementKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

void static TabBarPlacement.topBar.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static TabBarPlacement.sidebar.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static TabBarPlacement.bottomBar.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static TabBarPlacement.ornament.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static TabBarPlacement.pageIndicator.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void TabBarPlacement.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static TabBarPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int TabBarPlacement.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TabBarPlacement and conformance TabBarPlacement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabBarPlacement and conformance TabBarPlacement;
  if (!lazy protocol witness table cache variable for type TabBarPlacement and conformance TabBarPlacement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabBarPlacement, &type metadata for TabBarPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabBarPlacement and conformance TabBarPlacement);
  }
  return result;
}

uint64_t sub_1872AABD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isTabBarShowingSections.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1872AAC10()
{
  return EnvironmentValues.isTabBarShowingSections.setter();
}

uint64_t sub_1872AAC38()
{
  return EnvironmentValues.tabBarPlacement.setter();
}

ValueMetadata *type metadata accessor for TabBarPlacement()
{
  return &type metadata for TabBarPlacement;
}

uint64_t storeEnumTagSinglePayload for TabBarPlacement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1872AACCC + 4 * byte_187C1D245[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1872AAD00 + 4 * byte_187C1D240[v4]))();
}

uint64_t sub_1872AAD00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872AAD08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1872AAD10);
  return result;
}

uint64_t sub_1872AAD1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1872AAD24);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1872AAD28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872AAD30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabBarPlacement.Placement()
{
  return &type metadata for TabBarPlacement.Placement;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsTabBarShowingSectionsKey()
{
  return &type metadata for EnvironmentValues.IsTabBarShowingSectionsKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.TabBarPlacementKey()
{
  return &type metadata for EnvironmentValues.TabBarPlacementKey;
}

unint64_t lazy protocol witness table accessor for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement;
  if (!lazy protocol witness table cache variable for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabBarPlacement.Placement, &type metadata for TabBarPlacement.Placement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement);
  }
  return result;
}

double _ViewTest.touchEvent(_:globalLocation:phase:maximumPossibleForce:timestamp:modifiers:type:)@<D0>(double a1@<X0>, double a2@<X1>, char a3@<W2>, char *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>)
{
  char v16;
  uint64_t v17;
  char v18;
  void *v21;
  double v22;
  double v23;
  double result;

  v16 = *a4;
  v17 = *a5;
  v18 = *a7;
  if ((a3 & 1) != 0)
  {
    a1 = a9;
    a2 = a10;
    if (static _TestApp.host.getter())
    {
      objc_opt_self();
      v21 = (void *)swift_dynamicCastObjCClass();
      if (v21)
      {
        objc_msgSend(v21, sel_convertPoint_toView_, 0, a9, a10);
        a1 = v22;
        a2 = v23;
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        a1 = a9;
        a2 = a10;
      }
    }
  }
  *(_QWORD *)a8 = v17;
  *(_BYTE *)(a8 + 8) = v16;
  *(_QWORD *)(a8 + 16) = 0;
  *(double *)(a8 + 24) = a9;
  *(double *)(a8 + 32) = a10;
  *(double *)(a8 + 40) = a1;
  *(double *)(a8 + 48) = a2;
  result = 0.25;
  *(_OWORD *)(a8 + 56) = xmmword_187C1D3A0;
  *(double *)(a8 + 72) = a11;
  *(_QWORD *)(a8 + 88) = 0;
  *(_QWORD *)(a8 + 96) = 0;
  *(_QWORD *)(a8 + 80) = a6;
  *(_BYTE *)(a8 + 104) = v18;
  return result;
}

Swift::Void __swiftcall _ViewTest.sendTouchSequence(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  char v35;
  char *v36;
  double *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char v43;
  double *v44;
  char *v45;
  Swift::UInt v46;
  Swift::UInt v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  unint64_t v53;
  char v54;
  Swift::UInt *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *i;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  Swift::Int v65;
  double *v66;
  double *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::UInt v75;
  Swift::UInt v76;
  __int128 v77;
  char v78;
  __int128 v79;
  _QWORD v80[2];
  uint64_t v81;
  ValueMetadata *v82;
  unint64_t v83;
  _QWORD v84[2];

  v62 = v2;
  v61 = v1;
  type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
  v74 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v67 = (double *)((char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7, v8);
  v66 = (double *)((char *)&v59 - v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v73 = (uint64_t)&v59 - v12;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v69 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (uint64_t *)((char *)&v59 - v19);
  v65 = eventId;
  if (__OFADD__(eventId, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  ++eventId;
  v21 = MEMORY[0x18D75D024](a1._rawValue, v74, v18);
  v64 = v21 - 1;
  if (!__OFSUB__(v21, 1))
  {
    v84[1] = a1._rawValue;
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)], (uint64_t (*)(uint64_t))type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v22);
    Sequence.enumerated()();
    v84[0] = v75;
    type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DECC58]);
    EnumeratedSequence.makeIterator()();
    type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>.Iterator, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DECC48]);
    v68 = v23;
    v70 = v80;
    v63 = xmmword_187BF9830;
    for (i = v20; ; v20 = i)
    {
      v25 = (uint64_t)v69;
      EnumeratedSequence.Iterator.next()();
      outlined init with take of (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?(v25, (uint64_t)v20);
      type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))();
      v27 = v26;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v20, 1, v26) == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
      v28 = *(int *)(v74 + 64);
      v29 = v73;
      v71 = (char *)(v73 + v28);
      v72 = *v20;
      v30 = (double *)((char *)v20 + *(int *)(v27 + 48));
      v31 = *v30;
      v32 = v30[1];
      v34 = v30[2];
      v33 = v30[3];
      v35 = *((_BYTE *)v30 + 32);
      v36 = (char *)v30 + v28;
      v37 = v66;
      v38 = (char *)v66 + v28;
      *v66 = v31;
      v37[1] = v32;
      v37[2] = v34;
      v37[3] = v33;
      *((_BYTE *)v37 + 32) = v35;
      v39 = type metadata accessor for Date();
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
      v41(v38, v36, v39);
      *(double *)v29 = v31;
      *(double *)(v29 + 8) = v32;
      *(double *)(v29 + 16) = v34;
      *(double *)(v29 + 24) = v33;
      *(_BYTE *)(v29 + 32) = v35;
      v42 = v71;
      v41(v71, v38, v39);
      v79 = v63;
      v43 = v72 == v64 ? 2 : 1;
      if (!v72)
        v43 = 0;
      v80[0] = &unk_1E1AB0888;
      v80[1] = v65;
      LOBYTE(v84[0]) = v43;
      v44 = v67;
      v45 = (char *)v67 + *(int *)(v74 + 64);
      *v67 = v31;
      v44[1] = v32;
      v44[2] = v34;
      v44[3] = v33;
      *((_BYTE *)v44 + 32) = v35;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v45, v42, v39);
      Date.timeIntervalSinceReferenceDate.getter();
      v47 = v46;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v39);
      v75 = v47;
      v78 = 0;
      v82 = &type metadata for TouchEvent;
      v83 = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
      v81 = swift_allocObject();
      _ViewTest.touchEvent(_:globalLocation:phase:maximumPossibleForce:timestamp:modifiers:type:)(v34, v33, v35, (char *)v84, (uint64_t *)&v75, 0, &v78, v81 + 16, v31, v32, 6.66666667);
      v48 = v79;
      if ((_QWORD)v79)
        break;
      v24 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_5:
      type metadata accessor for (EventID, EventType)();
      swift_arrayDestroy();
      specialized _ViewTest.sendEvents(_:)((uint64_t)v24);
      swift_release();
      outlined destroy of (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)(v73);
    }
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    v24 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v49 = (uint64_t)v70;
    v50 = v48;
    while (1)
    {
      outlined init with copy of (EventID, EventType)(v49, (uint64_t)&v75);
      v51 = v75;
      v52 = v76;
      v53 = specialized __RawDictionaryStorage.find<A>(_:)(v75, v76);
      if ((v54 & 1) != 0)
        break;
      *(_QWORD *)((char *)v24 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v53;
      v55 = (Swift::UInt *)(v24[6] + 16 * v53);
      *v55 = v51;
      v55[1] = v52;
      outlined init with take of OptionalBinaryInteger(&v77, v24[7] + 40 * v53);
      v56 = v24[2];
      v57 = __OFADD__(v56, 1);
      v58 = v56 + 1;
      if (v57)
        goto LABEL_20;
      v24[2] = v58;
      v49 += 56;
      if (!--v50)
        goto LABEL_5;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

void _ViewTest.measureTouchSequence(host:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char v38;
  char *v39;
  double *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD);
  uint64_t v45;
  char v46;
  double *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD, _QWORD);
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  Swift::Double v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  _OWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  double *v73;
  double *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  _OWORD v87[5];
  _OWORD v88[3];
  char *v89;
  _OWORD v90[5];
  _OWORD v91[3];

  v76 = a5;
  v75 = a4;
  type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
  v83 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v74 = (double *)((char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11, v12);
  v73 = (double *)((char *)&v67 - v13);
  MEMORY[0x1E0C80A78](v14, v15);
  v82 = (uint64_t)&v67 - v16;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17, v18);
  v79 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (uint64_t *)((char *)&v67 - v23);
  v89 = (char *)MEMORY[0x1E0DEE9D8];
  v72 = eventId;
  if (__OFADD__(eventId, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  ++eventId;
  v25 = MEMORY[0x18D75D024](a3, v83, v22);
  v71 = v25 - 1;
  if (__OFSUB__(v25, 1))
  {
LABEL_19:
    __break(1u);
    return;
  }
  *(_QWORD *)&v87[0] = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for [(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)], (uint64_t (*)(uint64_t))type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v26);
  Sequence.enumerated()();
  *(_QWORD *)&v87[0] = *(_QWORD *)&v90[0];
  type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DECC58]);
  EnumeratedSequence.makeIterator()();
  type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>.Iterator, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DECC48]);
  v78 = v27;
  v69 = a2;
  v70 = a1;
  v68 = v24;
  while (1)
  {
    v28 = (uint64_t)v79;
    EnumeratedSequence.Iterator.next()();
    outlined init with take of (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?(v28, (uint64_t)v24);
    type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))();
    v30 = v29;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v24, 1, v29) == 1)
      break;
    v31 = v82;
    v32 = *(int *)(v83 + 64);
    v80 = v82 + v32;
    v81 = *v24;
    v33 = (double *)((char *)v24 + *(int *)(v30 + 48));
    v34 = *v33;
    v35 = v33[1];
    v37 = v33[2];
    v36 = v33[3];
    v38 = *((_BYTE *)v33 + 32);
    v39 = (char *)v33 + v32;
    v40 = v73;
    v41 = (char *)v73 + v32;
    *v73 = v34;
    v40[1] = v35;
    v40[2] = v37;
    v40[3] = v36;
    *((_BYTE *)v40 + 32) = v38;
    v42 = type metadata accessor for Date();
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(void (**)(_QWORD, _QWORD, _QWORD))(v43 + 32);
    v44(v41, v39, v42);
    *(double *)v31 = v34;
    *(double *)(v31 + 8) = v35;
    *(double *)(v31 + 16) = v37;
    *(double *)(v31 + 24) = v36;
    *(_BYTE *)(v31 + 32) = v38;
    v45 = v80;
    v44(v80, v41, v42);
    if (v81 == v71)
      v46 = 2;
    else
      v46 = 1;
    if (!v81)
      v46 = 0;
    v86 = v46;
    v47 = v74;
    v48 = (char *)v74 + *(int *)(v83 + 64);
    *v74 = v34;
    v47[1] = v35;
    v47[2] = v37;
    v47[3] = v36;
    *((_BYTE *)v47 + 32) = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v48, v45, v42);
    Date.timeIntervalSinceReferenceDate.getter();
    v50 = v49;
    v51 = *(void (**)(_QWORD, _QWORD))(v43 + 8);
    a2 = v69;
    v51(v48, v42);
    v85 = v50;
    v84 = 0;
    _ViewTest.touchEvent(_:globalLocation:phase:maximumPossibleForce:timestamp:modifiers:type:)(v37, v36, v38, &v86, &v85, 0, &v84, (uint64_t)v87, v34, v35, 6.66666667);
    v90[4] = v87[4];
    v91[0] = v88[0];
    *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)((char *)v88 + 9);
    v90[0] = v87[0];
    v90[1] = v87[1];
    v90[2] = v87[2];
    v90[3] = v87[3];
    ObjectType = swift_getObjectType();
    MEMORY[0x1E0C80A78](ObjectType, v53);
    v54 = v76;
    *(&v67 - 6) = v75;
    *(&v67 - 5) = v54;
    *(&v67 - 4) = v77;
    *(&v67 - 3) = (uint64_t)&unk_1E1AB0888;
    v65 = v72;
    v66 = v90;
    _BenchmarkHost.measureAction(action:)();
    v56 = v55;
    v57 = v89;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v57 + 2) + 1, 1, v57);
    v59 = *((_QWORD *)v57 + 2);
    v58 = *((_QWORD *)v57 + 3);
    if (v59 >= v58 >> 1)
      v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v57);
    *((_QWORD *)v57 + 2) = v59 + 1;
    *(_QWORD *)&v57[8 * v59 + 32] = v56;
    v60 = _BenchmarkHost.measureRender(interval:)(0.0166666667);
    v62 = *((_QWORD *)v57 + 2);
    v61 = *((_QWORD *)v57 + 3);
    if (v62 >= v61 >> 1)
      v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v57);
    v24 = v68;
    *((_QWORD *)v57 + 2) = v62 + 1;
    *(Swift::Double *)&v57[8 * v62 + 32] = v60;
    outlined release of TouchEvent((uint64_t)v90);
    v89 = v57;
    outlined destroy of (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)(v82);
  }
  swift_bridgeObjectRelease();
  v63 = swift_getObjectType();
  v64 = MEMORY[0x18D757CCC](v63, a2, 1.0);
  specialized Array.append<A>(contentsOf:)(v64);
}

uint64_t closure #1 in _ViewTest.measureTouchSequence(host:_:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t inited;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  *(_QWORD *)(inited + 32) = a2;
  *(_QWORD *)(inited + 40) = a3;
  *(_QWORD *)(inited + 72) = &type metadata for TouchEvent;
  *(_QWORD *)(inited + 80) = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
  v8 = (_OWORD *)swift_allocObject();
  *(_QWORD *)(inited + 48) = v8;
  v9 = a4[1];
  v8[1] = *a4;
  v8[2] = v9;
  v10 = a4[3];
  v8[3] = a4[2];
  v8[4] = v10;
  v11 = a4[5];
  v8[5] = a4[4];
  v8[6] = v11;
  *(_OWORD *)((char *)v8 + 105) = *(_OWORD *)((char *)a4 + 89);
  v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  outlined retain of TouchEvent((uint64_t)a4);
  type metadata accessor for (EventID, EventType)();
  swift_arrayDestroy();
  specialized _ViewTest.sendEvents(_:)(v12);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))
  {
    type metadata accessor for CGPoint(255);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for CGPoint?, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for Date();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date));
  }
}

void type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)))
  {
    type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)));
  }
}

uint64_t outlined init with take of (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1872ABD2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of (EventID, EventType)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (EventID, EventType)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in _ViewTest.measureTouchSequence(host:_:)()
{
  uint64_t v0;

  return closure #1 in _ViewTest.measureTouchSequence(host:_:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_OWORD **)(v0 + 56));
}

uint64_t outlined release of TouchEvent(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined retain of TouchEvent(uint64_t a1)
{
  swift_retain();
  return a1;
}

void *type metadata accessor for TestTouchID()
{
  return &unk_1E1AB0888;
}

void type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>);
  }
}

void ScenePhase.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static ScenePhase.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int ScenePhase.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t (*EnvironmentValues.scenePhase.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.scenePhase.modify;
}

uint64_t EnvironmentValues.scenePhase.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ScenePhase and conformance ScenePhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScenePhase and conformance ScenePhase;
  if (!lazy protocol witness table cache variable for type ScenePhase and conformance ScenePhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScenePhase, &type metadata for ScenePhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScenePhase and conformance ScenePhase);
  }
  return result;
}

uint64_t sub_1872AC160()
{
  return EnvironmentValues.scenePhase.setter();
}

ValueMetadata *type metadata accessor for ScenePhaseKey()
{
  return &type metadata for ScenePhaseKey;
}

void __swiftcall RadioGroupPickerStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static RadioGroupPickerStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static RadioGroupPickerStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void protocol witness for Sequence.makeIterator() in conformance AnyOptionButtonCollection()
{
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyOptionButtonCollection(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyOptionButtonCollection, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AnyOptionButtonCollection()
{
  type metadata accessor for AnyOptionButtonCollection();
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OptionButtonCollection.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of SubviewsCollection(v0 + 16);
  return swift_bridgeObjectRelease();
}

BOOL protocol witness for static View._viewListCount(inputs:) in conformance OptionButtonElement()
{
  uint64_t v0;
  char v1;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>();
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  return (v1 & 1) == 0 && v0 == 1;
}

void View.horizontalRadioGroupLayout()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for RadioGroupPickerStyle()
{
  return &type metadata for RadioGroupPickerStyle;
}

uint64_t type metadata accessor for AnyOptionButtonCollection()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for OptionButtonCollection()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for OptionButtonCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionButtonCollection);
}

uint64_t sub_1872AC3EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for RadioGroupStyleModifier<LayoutRadioGroupStyle<_HStackLayout>>(255);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for RadioGroupStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for RadioGroupStyleModifier<LayoutRadioGroupStyle<_HStackLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_HStackLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_HStackLayout>, MEMORY[0x1E0CE2288], MEMORY[0x1E0CE2268], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>();
    v6 = type metadata accessor for RadioGroupStyleModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_HStackLayout>>);
  }
}

uint64_t type metadata accessor for LayoutRadioGroupStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LayoutRadioGroupStyle);
}

unint64_t lazy protocol witness table accessor for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>;
  if (!lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_HStackLayout>, MEMORY[0x1E0CE2288], MEMORY[0x1E0CE2268], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LayoutRadioGroupStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>);
  }
  return result;
}

uint64_t type metadata accessor for RadioGroupStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RadioGroupStyleModifier);
}

uint64_t getEnumTagSinglePayload for LayoutRadioGroupStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872AC600 + 4 * byte_187C1D4C0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for LayoutRadioGroupStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for HorizintolControlGroupingItemKey()
{
  return &type metadata for HorizintolControlGroupingItemKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in RadioGroupStyleModifier<A>()
{
  return &protocol witness table for RadioGroupStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in RadioGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for RadioGroupStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RadioGroupStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RadioGroupStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for RadioGroupStyle.Body : View in LayoutRadioGroupStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexingIterator<AnyOptionButtonCollection> and conformance IndexingIterator<A>, (uint64_t (*)(uint64_t))type metadata accessor for IndexingIterator<AnyOptionButtonCollection>, MEMORY[0x1E0DEC908]);
}

void type metadata accessor for IndexingIterator<AnyOptionButtonCollection>(uint64_t a1)
{
  type metadata accessor for Slice<AnyOptionButtonCollection>(a1, &lazy cache variable for type metadata for IndexingIterator<AnyOptionButtonCollection>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
}

void type metadata accessor for Slice<AnyOptionButtonCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for AnyOptionButtonCollection();
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (uint64_t (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection, (uint64_t)&protocol conformance descriptor for AnyOptionButtonCollection);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t base witness table accessor for Sequence in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (uint64_t (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection, (uint64_t)&protocol conformance descriptor for AnyOptionButtonCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnyOptionButtonCollection()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Slice<AnyOptionButtonCollection> and conformance Slice<A>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AnyOptionButtonCollection>, MEMORY[0x1E0DEDE48]);
}

void type metadata accessor for Slice<AnyOptionButtonCollection>(uint64_t a1)
{
  type metadata accessor for Slice<AnyOptionButtonCollection>(a1, &lazy cache variable for type metadata for Slice<AnyOptionButtonCollection>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
}

uint64_t base witness table accessor for Collection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (uint64_t (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection, (uint64_t)&protocol conformance descriptor for AnyOptionButtonCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AnyOptionButtonCollection()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB890]);
}

uint64_t _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v6 = v5;
    v7 = lazy protocol witness table accessor for type Int and conformance Int();
    v8[0] = MEMORY[0x1E0DEB458];
    v8[1] = v7;
    result = MEMORY[0x18D75FFDC](a2, v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (uint64_t)&protocol conformance descriptor for AnyOptionButtonCollection, MEMORY[0x1E0DEDE28]);
}

uint64_t base witness table accessor for BidirectionalCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (uint64_t (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection, (uint64_t)&protocol conformance descriptor for AnyOptionButtonCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in AnyOptionButtonCollection()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (uint64_t)&protocol conformance descriptor for AnyOptionButtonCollection, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<AnyOptionButtonCollection>(255);
    v10 = v9;
    v11 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a2, (uint64_t (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection, a3);
    result = MEMORY[0x18D75FFDC](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance RadioGroupStyleContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static StyleContext.accepts<A>(_:at:)(a1, a4);
}

ValueMetadata *type metadata accessor for RadioGroupStyleContext()
{
  return &type metadata for RadioGroupStyleContext;
}

uint64_t destroy for OptionButtonElement(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OptionButtonElement(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OptionButtonElement(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(void **)(a1 + 80);
  v5 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for OptionButtonElement(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionButtonElement(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionButtonElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for OptionButtonElement()
{
  return &unk_1E1ACF420;
}

ValueMetadata *type metadata accessor for ResolvedRadioGroupPicker.Label()
{
  return &type metadata for ResolvedRadioGroupPicker.Label;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResolvedRadioGroupPicker(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ResolvedRadioGroupPicker(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for ResolvedRadioGroupPicker(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedRadioGroupPicker(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedRadioGroupPicker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedRadioGroupPicker()
{
  return &type metadata for ResolvedRadioGroupPicker;
}

uint64_t sub_1872AD12C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for ForEach<Range<Int>, Int, OptionButtonElement>();
  v2 = type metadata accessor for _VariadicView.Tree();
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for LabeledContent(255, (uint64_t)&type metadata for ResolvedRadioGroupPicker.Label, v4, v5);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<RadioGroupStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadioGroupStyleContext and conformance RadioGroupStyleContext, (uint64_t)&type metadata for RadioGroupStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v7 = type metadata accessor for ModifiedContent();
  v14[0] = v1;
  v14[1] = lazy protocol witness table accessor for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>();
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v14);
  v13[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v8 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v13);
  v12[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v11[0] = &protocol witness table for ResolvedRadioGroupPicker.Label;
  v11[1] = MEMORY[0x18D75FFDC](v8, v4, v12);
  v10[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v6, v11);
  v10[1] = lazy protocol witness table accessor for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>();
  return MEMORY[0x18D75FFDC](v8, v7, v10);
}

void type metadata accessor for ForEach<Range<Int>, Int, OptionButtonElement>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, OptionButtonElement>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, OptionButtonElement>);
  }
}

unint64_t lazy protocol witness table accessor for type RadioGroupStyleContext and conformance RadioGroupStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RadioGroupStyleContext and conformance RadioGroupStyleContext;
  if (!lazy protocol witness table cache variable for type RadioGroupStyleContext and conformance RadioGroupStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RadioGroupStyleContext, &type metadata for RadioGroupStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadioGroupStyleContext and conformance RadioGroupStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, OptionButtonElement>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type OptionButtonElement and conformance OptionButtonElement();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OptionButtonElement and conformance OptionButtonElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OptionButtonElement and conformance OptionButtonElement;
  if (!lazy protocol witness table cache variable for type OptionButtonElement and conformance OptionButtonElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionButtonElement, &unk_1E1ACF420);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionButtonElement and conformance OptionButtonElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<RadioGroupStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadioGroupStyleContext and conformance RadioGroupStyleContext, (uint64_t)&type metadata for RadioGroupStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t sub_1872AD4A0()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedRadioGroupPicker()
{
  lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedRadioGroupPicker, &type metadata for ResolvedRadioGroupPicker);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedRadioGroupPicker, &type metadata for ResolvedRadioGroupPicker);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for RadioGroupStyleModifier<AutomaticRadioGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle, (uint64_t)&type metadata for AutomaticRadioGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RadioGroupStyleModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RadioGroupStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle;
  if (!lazy protocol witness table cache variable for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticRadioGroupStyle, &type metadata for AutomaticRadioGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedRadioGroupPicker(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for RadioGroupStyle.Body : View in AutomaticRadioGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for View in ResolvedRadioGroupPicker.Label()
{
  return &protocol witness table for ResolvedRadioGroupPicker.Label;
}

unint64_t instantiation function for generic protocol witness table for ResolvedRadioGroupPicker.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedRadioGroupPicker.Label, &type metadata for ResolvedRadioGroupPicker.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedRadioGroupPicker.Label, &type metadata for ResolvedRadioGroupPicker.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in OptionButtonElement()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>, (uint64_t (*)(void))lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut, (uint64_t)&type metadata for HasKeyboardShortcut, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>);
}

void type metadata accessor for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for OptionButton<Subview>, (uint64_t)&type metadata for Subview, (uint64_t)&protocol witness table for Subview, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for OptionButton);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardShortcut?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for KeyboardShortcut?, (uint64_t)&type metadata for KeyboardShortcut, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardShortcut?>);
  }
}

unint64_t lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasKeyboardShortcut, &type metadata for HasKeyboardShortcut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasKeyboardShortcut, &type metadata for HasKeyboardShortcut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasKeyboardShortcut, &type metadata for HasKeyboardShortcut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasKeyboardShortcut, &type metadata for HasKeyboardShortcut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasKeyboardShortcut, &type metadata for HasKeyboardShortcut);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, lazy protocol witness table accessor for type ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>);
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, (uint64_t (*)(void))lazy protocol witness table accessor for type OptionButton<Subview> and conformance OptionButton<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type OptionButton<Subview> and conformance OptionButton<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OptionButton<Subview> and conformance OptionButton<A>;
  if (!lazy protocol witness table cache variable for type OptionButton<Subview> and conformance OptionButton<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for OptionButton<Subview>, (uint64_t)&type metadata for Subview, (uint64_t)&protocol witness table for Subview, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for OptionButton);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionButton<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionButton<Subview> and conformance OptionButton<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>, MEMORY[0x1E0CE65C0]);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for GroupedFormRadioGroupStyle()
{
  return &unk_1E1AEE6E8;
}

ValueMetadata *type metadata accessor for AutomaticRadioGroupStyle()
{
  return &type metadata for AutomaticRadioGroupStyle;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(255, &lazy cache variable for type metadata for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, (uint64_t)&type metadata for Subview, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = &protocol witness table for Subview;
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>>, type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, type metadata accessor for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = &protocol witness table for RadioGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(a1, &lazy cache variable for type metadata for ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>, (uint64_t)&type metadata for ResolvedRadioGroupPicker, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle, (uint64_t)&unk_1E1AEE6E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RadioGroupStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle;
  if (!lazy protocol witness table cache variable for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupedFormRadioGroupStyle, &unk_1E1AEE6E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

void type metadata accessor for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_VStackLayout>, MEMORY[0x1E0CE25F0], MEMORY[0x1E0CE25C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>();
    v6 = type metadata accessor for RadioGroupStyleModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>;
  if (!lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_VStackLayout>, MEMORY[0x1E0CE25F0], MEMORY[0x1E0CE25C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LayoutRadioGroupStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for RadioGroupStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t associated type witness table accessor for RadioGroupStyle.Body : View in GroupedFormRadioGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, type metadata accessor for LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(a1, &lazy cache variable for type metadata for LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>, (uint64_t)&type metadata for ResolvedRadioGroupPicker.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
}

void type metadata accessor for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>, (void (*)(uint64_t))type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>);
}

void type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    type metadata accessor for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>();
    _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>);
  }
}

void type metadata accessor for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>);
  }
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _LayoutTrait<HorizintolControlGroupingItemKey>, (uint64_t)&type metadata for HorizintolControlGroupingItemKey, (uint64_t)&protocol witness table for HorizintolControlGroupingItemKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1BB0]);
    lazy protocol witness table accessor for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>();
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _LayoutTrait<HorizintolControlGroupingItemKey>, (uint64_t)&type metadata for HorizintolControlGroupingItemKey, (uint64_t)&protocol witness table for HorizintolControlGroupingItemKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1BB0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1BC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>(255);
    v2 = v1;
    v3[0] = &protocol witness table for ResolvedRadioGroupPicker.Label;
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>, lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>, (uint64_t (*)(void))lazy protocol witness table accessor for type OptionButtonElement and conformance OptionButtonElement, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>, MEMORY[0x1E0CE52E0]);
}

uint64_t type metadata accessor for AnyWindowStyleStorageBase()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AnyWindowStyleStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyWindowStyleStorage);
}

void AnyWindowStyleStorageBase.__deallocating_deinit()
{
  CapsuleSlider.ScrollState.__deallocating_deinit();
}

SwiftUI::InsetListStyle __swiftcall InsetListStyle.init()()
{
  _QWORD *v0;
  SwiftUI::InsetListStyle result;

  *v0 = 3;
  return result;
}

SwiftUI::InsetListStyle __swiftcall InsetListStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
  SwiftUI::InsetListStyle result;

  result.options.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::InsetListStyle __swiftcall InsetListStyle.init(alternatesRowBackgrounds:selectionFollowsCursor:)(Swift::Bool alternatesRowBackgrounds, Swift::Bool selectionFollowsCursor)
{
  SwiftUI::InsetListStyle result;

  result.options.rawValue = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static InsetListStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_1872AE5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v2 - 124) = _GraphValue.value.getter();
  type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>();
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  v4 = type metadata accessor for SelectionManagerBox(255, v1, v0, v3);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4);
  type metadata accessor for PlainListBody();
}

void sub_1872AE6A0()
{
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  type metadata accessor for InsetList();
}

void sub_1872AE6E8()
{
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_1872AE708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v17 = type metadata accessor for InsetListStyle.Body(0, v7, v6, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetListStyle.Body<A>, v17);
  _GraphValue.init<A>(_:)();
  v22 = v12;
  v23 = v4;
  v24 = v11;
  v25 = v15;
  v26 = v16;
  v27 = v19;
  v28 = v18;
  v29 = v14;
  v30 = v20;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>, v9);
  static StaticIf<>._makeView(view:inputs:)((int *)(v13 - 128), &v22, v5, v8, v9, v10, v21);
}

void type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>)
  {
    v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>);
  }
}

unint64_t lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext;
  if (!lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListStyleContext, &type metadata for PlainListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext;
  if (!lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListStyleContext, &type metadata for PlainListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
    v2 = v1;
    v3[0] = &protocol witness table for ListStyleContent;
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for StyleContextWriter<PlainListStyleContext>(255, a3, a4);
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void type metadata accessor for StyleContextWriter<PlainListStyleContext>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = type metadata accessor for StyleContextWriter();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetListStyleContext, &type metadata for InsetListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetListStyleContext, &type metadata for InsetListStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
    v2 = v1;
    v3[0] = &protocol witness table for ListStyleContent;
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<InsetListStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextWriter<PlainListStyleContext>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for InsetList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for InsetListStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InsetListStyle.Body);
}

void static InsetListStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _ListValue();
}

void sub_1872AEBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v2 - 108) = _GraphValue.value.getter();
  type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>();
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  v4 = type metadata accessor for SelectionManagerBox(255, v1, v0, v3);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v4);
  type metadata accessor for PlainListBody();
}

void sub_1872AEC64()
{
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  type metadata accessor for InsetList();
}

void sub_1872AECAC()
{
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_1872AECCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;

  v16 = type metadata accessor for InsetListStyle.Body(0, v7, v6, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetListStyle.Body<A>, v16);
  _GraphValue.init<A>(_:)();
  v22 = v4;
  v23 = v11;
  v24 = v12;
  v25 = v14;
  v26 = v15;
  v27 = v21;
  v28 = v20;
  v29 = v19;
  v30 = v18;
  v31 = v17;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>, v9);
  static StaticIf<>._makeViewList(view:inputs:)((int *)(v13 - 112), &v22, v5, v8, v9, v10);
}

void InsetListStyle.Body.base.getter()
{
  type metadata accessor for _ListValue();
}

uint64_t sub_1872AEDF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void InsetListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>();
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  v6 = type metadata accessor for SelectionManagerBox(255, a2, a3, v5);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v6);
  type metadata accessor for PlainListBody();
}

void sub_1872AEEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  v4 = v3;
  v5 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)(v2 - 112) = v4;
  *(_QWORD *)(v2 - 104) = v0;
  *(_QWORD *)(v2 - 96) = v5;
  *(_QWORD *)(v2 - 88) = v1;
  type metadata accessor for InsetList();
}

void sub_1872AEF28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v5 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  *(_QWORD *)(v3 - 112) = v2;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = a1;
  *(_QWORD *)(v3 - 88) = v5;
  type metadata accessor for StaticIf();
}

void sub_1872AEF44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1, a2);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v7 - 160) = v4;
  *(_QWORD *)(v7 - 152) = v2;
  *(_DWORD *)(v7 - 144) = v3;
  *(_QWORD *)(v7 - 208) = v4;
  *(_QWORD *)(v7 - 200) = v2;
  *(_DWORD *)(v7 - 192) = v3;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>, v5, v10);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>, v6);
  StaticIf<>.init<A>(idiom:then:else:)(v11, (void (*)(void))partial apply for closure #1 in InsetListStyle.Body.value.getter, v7 - 176, (uint64_t)partial apply for closure #2 in InsetListStyle.Body.value.getter, v7 - 224, v5, v6, MEMORY[0x1E0CE4EC0]);
}

uint64_t sub_1872AF00C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  *(_QWORD *)(v7 - 128) = v1;
  *(_QWORD *)(v7 - 120) = v2;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v7 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v5, v3, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v5, v3);
  static ViewBuilder.buildBlock<A>(_:)(v4, v3, v0);
  return v9(v4, v3);
}

void closure #1 in InsetListStyle.Body.value.getter(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  int v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;

  v11 = a1;
  v12 = a5;
  type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  type metadata accessor for Binding();
  v7 = type metadata accessor for Optional();
  v10[4] = *(_QWORD *)(v7 - 8);
  v10[5] = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10[3] = (char *)v10 - v9;
  v13 = &type metadata for InsetListStyle;
  v14 = a2;
  v15 = &protocol witness table for InsetListStyle;
  v16 = a3;
  type metadata accessor for _ListValue();
}

void sub_1872AF138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 - 208) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  v5 = v4;
  *(_QWORD *)(v3 - 216) = v4;
  v6 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)(v3 - 224) = v2;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v2);
  *(_QWORD *)(v3 - 112) = v5;
  *(_QWORD *)(v3 - 104) = v2;
  *(_QWORD *)(v3 - 96) = v6;
  *(_QWORD *)(v3 - 88) = v7;
  type metadata accessor for PlainListBody();
}

void sub_1872AF1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v2, v3);
  InsetListStyle.Body.base.getter();
}

void sub_1872AF22C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(*(_QWORD *)(v5 - 208) + 52);
  v7 = *(_QWORD *)(v5 - 200);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 192) + 32))(v7, v6, *(_QWORD *)(v5 - 184));
  *(_QWORD *)(v5 - 144) = v2;
  *(_QWORD *)(v5 - 136) = v1;
  *(_DWORD *)(v5 - 128) = v0;
  PlainListBody.init(selection:isOutline:content:)(v7, v4);
}

uint64_t sub_1872AF27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainListBody<A, B>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v0, v1, *(_QWORD *)(v4 - 168));
  return v6(v0, v1);
}

void closure #2 in InsetListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  v6 = type metadata accessor for SelectionManagerBox(255, a2, a3, v5);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v6);
  type metadata accessor for InsetList();
}

void sub_1872AF38C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  InsetListStyle.Body.insetListBody.getter(v4, v3, v2, v7);
}

uint64_t sub_1872AF3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, v0);
  return v6(v3, v1);
}

void InsetListStyle.Body.insetListBody.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for SelectionManagerBox(255, a2, a3, a4);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _ListValue();
}

void sub_1872AF504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 - 144) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  v7 = v6;
  *(_QWORD *)(v3 - 176) = v6;
  v8 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  *(_QWORD *)(v3 - 184) = v8;
  *(_QWORD *)(v3 - 168) = v2;
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v2);
  *(_QWORD *)(v3 - 192) = v9;
  *(_QWORD *)(v3 - 112) = v7;
  *(_QWORD *)(v3 - 104) = v2;
  *(_QWORD *)(v3 - 96) = v8;
  *(_QWORD *)(v3 - 88) = v9;
  type metadata accessor for InsetList();
}

void sub_1872AF5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v10 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v10 - 160) = (char *)&a9 - v13;
  *(_DWORD *)(v10 - 196) = v9;
  InsetListStyle.Body.base.getter();
}

void sub_1872AF628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 136) + 32))(v2, v1 + *(int *)(v0 + 52), *(_QWORD *)(v3 - 128));
  InsetListStyle.Body.base.getter();
}

void sub_1872AF65C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 144) + 8))(v5, v0);
  v3(v1, v4, v2);
  v7 = *(_QWORD *)(v6 - 168);
  *(_QWORD *)(v6 - 112) = *(_QWORD *)(v6 - 176);
  *(_QWORD *)(v6 - 104) = v7;
  v8 = *(_QWORD *)(v6 - 192);
  *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 184);
  *(_QWORD *)(v6 - 88) = v8;
  type metadata accessor for InsetList();
}

void sub_1872AF6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a1 + 52)) = v1;
  closure #1 in closure #1 in InsetListStyle.Body.value.getter();
}

uint64_t sub_1872AF6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>, v1);
  v4 = *(_QWORD *)(v2 - 160);
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8);
  v5(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v2 - 120));
  return v5(v4, v1);
}

void closure #1 in closure #1 in InsetListStyle.Body.value.getter()
{
  type metadata accessor for _ListValue();
}

void sub_1872AF790(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  InsetListStyle.Body.base.getter();
}

uint64_t sub_1872AF7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void protocol witness for static Rule.initialValue.getter in conformance InsetListStyle.Body<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>();
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  v3 = type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionManagerBox<A>, v3);
  type metadata accessor for PlainListBody();
}

void sub_1872AF890()
{
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  type metadata accessor for InsetList();
}

void sub_1872AF8D8()
{
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_1872AF8F4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance InsetListStyle.Body<A>(uint64_t a1)
{
  unsigned int *v1;

  InsetListStyle.Body.value.getter(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

ValueMetadata *type metadata accessor for InsetListStyle()
{
  return &type metadata for InsetListStyle;
}

uint64_t getEnumTagSinglePayload for InsetList(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = v7 - 1;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v8)
    v11 = v8;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = ((v12 + 16) & ~v12) + *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 + 8;
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v17 = ((v15 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(_QWORD *)(v9 + 64);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if (v8 < v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v9 + 48))((v15 + ((a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v14, *(unsigned int *)(v9 + 84), v4);
      v24 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v26 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v24 + v12 + 8) & ~v12);
      }
      else
      {
        v25 = *v24;
        if (v25 >= 0xFFFFFFFF)
          LODWORD(v25) = -1;
        v26 = v25 + 1;
      }
      if (v26 >= 2)
        return v26 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v15 + ((v13 + 7) & 0xFFFFFFF8)) & ~(_DWORD)v14) + *(_DWORD *)(v9 + 64);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v11 + v22 + 1;
}

void storeEnumTagSinglePayload for InsetList(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= (v6 - 1))
    v8 = v6 - 1;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = ((*(unsigned __int8 *)(v7 + 80)
       + 8
       + ((((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + *(_QWORD *)(v5 + 64)
         + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
     + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v8 < a2)
  {
    v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X6 }
}

ValueMetadata *type metadata accessor for InsetListStyleContext()
{
  return &type metadata for InsetListStyleContext;
}

unint64_t instantiation function for generic protocol witness table for InsetListStyleContext(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in InsetList<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance InsetListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext();
  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

void InsetList.body.getter()
{
  type metadata accessor for InsetList.CollectionViewBody();
}

void sub_1872AFF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 120) = v3;
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = v0;
  *(_QWORD *)(v4 - 96) = v1;
  type metadata accessor for InsetList.TableViewRoot();
}

void sub_1872AFF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v1 - 120) = MEMORY[0x1E0CE4C48];
  *(_QWORD *)(v1 - 112) = v0;
  v3 = MEMORY[0x1E0CE4C38];
  *(_QWORD *)(v1 - 104) = v2;
  *(_QWORD *)(v1 - 96) = v3;
  type metadata accessor for StaticIf();
}

void sub_1872AFFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  *(_QWORD *)(v9 - 288) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v9 - 192) = v7;
  *(_QWORD *)(v9 - 184) = v6;
  *(_QWORD *)(v9 - 176) = v2;
  *(_QWORD *)(v9 - 168) = v4;
  v13 = *(_QWORD *)(v9 - 296);
  *(_QWORD *)(v9 - 160) = v13;
  *(_QWORD *)(v9 - 256) = v7;
  *(_QWORD *)(v9 - 248) = v6;
  *(_QWORD *)(v9 - 240) = v2;
  *(_QWORD *)(v9 - 232) = v4;
  *(_QWORD *)(v9 - 224) = v13;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.CollectionViewBody, v3, v12);
  *(_QWORD *)(v9 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.TableViewRoot, v8);
  *(_QWORD *)(v9 - 128) = v2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 136);
  StaticIf<>.init(_:then:else:)(MEMORY[0x1E0CE4C48], (void (*)(void))partial apply for closure #1 in InsetList.body.getter);
}

uint64_t sub_1872B00A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 152) = v0;
  *(_QWORD *)(v5 - 144) = v4;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v5 - 152);
  static ViewBuilder.buildExpression<A>(_:)(v2, v3, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 288) + 8);
  v7(v2, v3);
  static ViewBuilder.buildBlock<A>(_:)(v1, v3, *(_QWORD *)(v5 - 280));
  return v7(v1, v3);
}

void closure #1 in InsetList.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Binding();
  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for InsetList.CollectionViewBody();
}

void sub_1872B01F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v6 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v5;
  *(_QWORD *)(v6 - 88) = v2;
  type metadata accessor for InsetList();
}

void sub_1872B025C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(v6 - 128);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v7 + *(int *)(a1 + 56), v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 144) + 16))(v5, v7, *(_QWORD *)(v6 - 136));
  InsetList.CollectionViewBody.init(content:selection:)(v1);
}

uint64_t sub_1872B02AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.CollectionViewBody, v1);
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, v4);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 152) + 8);
  v5(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v2, v1, *(_QWORD *)(v3 - 120));
  return v5(v2, v1);
}

void InsetList.CollectionViewBody.init(content:selection:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = swift_getKeyPath();
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 82) = 0u;
  *(_QWORD *)(a1 + 104) = swift_getKeyPath();
  *(_BYTE *)(a1 + 112) = 0;
  type metadata accessor for InsetList.CollectionViewBody();
}

uint64_t sub_1872B03D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v2 + *(int *)(a1 + 64), v4, v3);
  v6 = v2 + *(int *)(a1 + 68);
  type metadata accessor for Binding();
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v1, v7);
}

void closure #2 in InsetList.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Binding();
  v1 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v1, v0);
  type metadata accessor for InsetList.TableViewRoot();
}

void sub_1872B04D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&a9 - v12;
  v14 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v11 - 216) = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  (*(void (**)(uint64_t, _QWORD, _QWORD, double))(v9 + 16))(v10, *(_QWORD *)(v11 - 208), *(_QWORD *)(v11 - 224), v18);
  InsetList.TableViewRoot.init(selection:)((uint64_t)v13);
}

uint64_t sub_1872B05A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  *(_QWORD *)(v9 - 176) = v2;
  *(_QWORD *)(v9 - 168) = v4;
  *(_QWORD *)(v9 - 160) = v3;
  *(_QWORD *)(v9 - 152) = v0;
  *(_QWORD *)(v9 - 144) = v1;
  _VariadicView.Tree.init(_:content:)();
  *(_QWORD *)(v9 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.TableViewRoot, v6);
  *(_QWORD *)(v9 - 128) = v3;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v5, v9 - 136);
  static ViewBuilder.buildExpression<A>(_:)(v8, v5, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 216) + 8);
  v11(v8, v5);
  static ViewBuilder.buildBlock<A>(_:)(v7, v5, *(_QWORD *)(v9 - 200));
  return v11(v7, v5);
}

void InsetList.TableViewRoot.init(selection:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = swift_getKeyPath();
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = swift_getKeyPath();
  *(_BYTE *)(a1 + 40) = 0;
  type metadata accessor for InsetList.TableViewRoot();
}

uint64_t sub_1872B06EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 60);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void closure #1 in closure #2 in InsetList.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for InsetList();
}

uint64_t sub_1872B07A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 56), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void InsetList.CollectionViewBody.body.getter(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v15 = a2;
  v14 = a1[3];
  v3 = v14;
  type metadata accessor for Binding();
  v11 = type metadata accessor for Optional();
  v10[5] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v4);
  v10[4] = (char *)v10 - v5;
  v6 = a1[2];
  v10[1] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v16 = (char *)v10 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[4];
  v12 = a1[5];
  v17 = v6;
  v18 = v3;
  v10[3] = v6;
  v19 = v13;
  v20 = v12;
  type metadata accessor for CollectionViewListRoot();
}

void sub_1872B0900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;

  *(_QWORD *)(v12 - 360) = a1;
  *(_QWORD *)(v12 - 352) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v12 - 384) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v12 - 392) = (char *)&a9 - v16;
  v17 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v12 - 432) = v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&a9 - v24;
  v26 = *(_QWORD *)(v9 + 104);
  v27 = *(_BYTE *)(v9 + 112);
  outlined copy of Environment<Bool>.Content(v26, v27);
  v28 = specialized Environment.wrappedValue.getter(v26, v27);
  outlined consume of Environment<Bool>.Content(v26, v27);
  v29 = (unsigned int *)MEMORY[0x1E0DC2880];
  if ((v28 & 1) == 0)
    v29 = (unsigned int *)MEMORY[0x1E0DC2890];
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v25, *v29, v17);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 440) + 16))(*(_QWORD *)(v12 - 328), v9 + *(int *)(v11 + 64), v10);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v30 = *(_QWORD *)v9;
  v31 = *(unsigned __int8 *)(v9 + 8);
  v32 = *(unsigned __int8 *)(v9 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v9, v31, *(_BYTE *)(v9 + 9));
  *(_QWORD *)(v12 - 440) = specialized Environment.wrappedValue.getter(v30, v31 | (v32 << 8));
  *(_DWORD *)(v12 - 444) = v33 & 1;
  outlined consume of Environment<CGFloat?>.Content(v30, v31, v32);
  v34 = *(_QWORD *)(v9 + 16);
  v35 = *(unsigned __int8 *)(v9 + 24);
  v36 = *(unsigned __int8 *)(v9 + 25);
  outlined copy of Environment<CGFloat?>.Content(v34, v35, *(_BYTE *)(v9 + 25));
  specialized Environment.wrappedValue.getter(v34, v35 | (v36 << 8));
  outlined consume of Environment<CGFloat?>.Content(v34, v35, v36);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v12 - 408) + 16))(*(_QWORD *)(v12 - 416), v9 + *(int *)(v11 + 68), *(_QWORD *)(v12 - 400));
  v37 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)(v12 - 144) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v12 - 128) = v37;
  *(_WORD *)(v12 - 112) = *(_WORD *)(v9 + 96);
  v38 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v12 - 176) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v12 - 160) = v38;
  outlined retain of Environment<ListPadding>(v12 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter(v12 - 248);
  outlined retain of Environment<ListPadding>(v12 - 176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))outlined consume of Environment<ListPadding>.Content);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
  v39 = *(_QWORD *)(v12 - 240);
  v40 = *(_BYTE *)(v12 - 232);
  v41 = *(_QWORD *)(v12 - 224);
  v42 = *(_BYTE *)(v12 - 216);
  v43 = *(_QWORD *)(v12 - 208);
  v44 = *(_BYTE *)(v12 - 200);
  v45 = *(_QWORD *)(v12 - 192);
  v46 = *(_BYTE *)(v12 - 184);
  *(_BYTE *)(v12 - 320) = *(_BYTE *)(v12 - 248);
  *(_QWORD *)(v12 - 312) = v39;
  *(_BYTE *)(v12 - 304) = v40;
  *(_QWORD *)(v12 - 296) = v41;
  *(_BYTE *)(v12 - 288) = v42;
  *(_QWORD *)(v12 - 280) = v43;
  *(_BYTE *)(v12 - 272) = v44;
  *(_QWORD *)(v12 - 264) = v45;
  *(_BYTE *)(v12 - 256) = v46;
  CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)(*(_QWORD *)(v12 - 328), *(_QWORD *)(v12 - 424), *(_QWORD *)(v12 - 384));
}

uint64_t sub_1872B0C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v1 - 392);
  v3 = *(_QWORD *)(v1 - 360);
  static ViewBuilder.buildExpression<A>(_:)(v0, v3, &protocol witness table for CollectionViewListRoot<A, B>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 352) + 8);
  v4(v0, v3);
  static ViewBuilder.buildBlock<A>(_:)(v2, v3, *(_QWORD *)(v1 - 336));
  return v4(v2, v3);
}

uint64_t static InsetList.TableViewRoot._viewListOptions.getter()
{
  return 44;
}

void InsetList.TableViewRoot.body(children:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a2;
  v2 = *(_QWORD *)(a1 + 24);
  v18 = a1;
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v19 = (char *)&v11 - v6;
  v7 = *(_QWORD *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = AssociatedTypeWitness;
  v16 = v2;
  v17 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = type metadata accessor for TableViewListDataSource(255, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v15 = v10;
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableViewListDataSource<A>, v10);
  v23 = v10;
  v24 = v2;
  v25 = v14;
  v26 = v7;
  type metadata accessor for TableViewListCore();
}

void sub_1872B0E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;

  *(_QWORD *)(v9 + 80) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)(v9 + 24) = (char *)&a9 - v17;
  outlined init with copy of _VariadicView_Children(v11, v9 + 240);
  v18 = *(_QWORD *)v10;
  v19 = *(unsigned __int8 *)(v10 + 8);
  v20 = *(unsigned __int8 *)(v10 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v10, v19, *(_BYTE *)(v10 + 9));
  *(_QWORD *)v9 = specialized Environment.wrappedValue.getter(v18, v19 | (v20 << 8));
  v22 = v21 & 1;
  outlined consume of Environment<CGFloat?>.Content(v18, v19, v20);
  v23 = *(_QWORD *)(v10 + 16);
  v24 = *(unsigned __int8 *)(v10 + 24);
  v25 = *(unsigned __int8 *)(v10 + 25);
  outlined copy of Environment<CGFloat?>.Content(v23, v24, *(_BYTE *)(v10 + 25));
  v26 = specialized Environment.wrappedValue.getter(v23, v24 | (v25 << 8));
  v28 = v27;
  outlined consume of Environment<CGFloat?>.Content(v23, v24, v25);
  v29 = *(double *)&v26;
  if ((v28 & 1) != 0)
    v29 = 26.0;
  v30 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)(v9 + 240, 0, *(_QWORD *)v9, v22, v12 - 216, v29);
  (*(void (**)(_QWORD, uint64_t, _QWORD, double))(*(_QWORD *)(v9 + 88) + 16))(*(_QWORD *)(v9 + 72), v10 + *(int *)(*(_QWORD *)(v9 + 64) + 60), *(_QWORD *)(v9 + 96), v30);
  v31 = *(_QWORD *)(v10 + 32);
  v32 = *(_BYTE *)(v10 + 40);
  outlined copy of Environment<Bool>.Content(v31, v32);
  v33 = specialized Environment.wrappedValue.getter(v31, v32);
  outlined consume of Environment<Bool>.Content(v31, v32);
  v34 = v33 & 1;
  v35 = *(_QWORD *)(v9 + 40);
  static TableViewListCore.Configuration.inset(isInExpandedSplitView:)(v34, (_OWORD *)(v9 + 112));
  TableViewListCore.init(dataSource:selection:configuration:)(v12 - 216, v35, (uint64_t)v14);
}

uint64_t sub_1872B0FBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = v0[3];
  static ViewBuilder.buildExpression<A>(_:)(v1, v2, &protocol witness table for TableViewListCore<A, B>);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0[10] + 8);
  v4(v1, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, v0[13]);
  return v4(v3, v2);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance InsetList<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.TableViewRoot, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance InsetList<A, B>.TableViewRoot()
{
  return static InsetList.TableViewRoot._viewListOptions.getter();
}

void base witness table accessor for _AttributeBody in InsetListStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in InsetListStyle.Body.value.getter(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #1 in InsetListStyle.Body.value.getter(*(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

void partial apply for closure #2 in InsetListStyle.Body.value.getter()
{
  uint64_t v0;

  closure #2 in InsetListStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void partial apply for closure #1 in closure #1 in InsetListStyle.Body.value.getter()
{
  closure #1 in closure #1 in InsetListStyle.Body.value.getter();
}

void type metadata accessor for InsetList.CollectionViewBody()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for InsetList.TableViewRoot()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #1 in InsetList.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in InsetList.body.getter);
}

uint64_t partial apply for closure #2 in InsetList.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in InsetList.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in InsetList.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in InsetList.body.getter);
}

uint64_t type metadata completion function for InsetList.TableViewRoot()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Binding();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InsetList.TableViewRoot(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  if (v6 - 1 >= a2)
    goto LABEL_24;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64) + ((v8 + 41) & ~v8);
  v10 = 8 * v9;
  if (v9 > 3)
    goto LABEL_7;
  v13 = (((1 << v10) + a2 - v6) >> v10) + 1;
  if (HIWORD(v13))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_15;
LABEL_24:
    v16 = (unint64_t *)((((((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v8 + 9) & ~v8)
                              + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v7 + 8) & ~v7);
    }
    else
    {
      v17 = *v16;
      if (v17 >= 0xFFFFFFFF)
        LODWORD(v17) = -1;
      v18 = v17 + 1;
    }
    if (v18 >= 2)
      return v18 - 1;
    else
      return 0;
  }
  if (v13 > 0xFF)
  {
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_15;
    goto LABEL_24;
  }
  if (v13 < 2)
    goto LABEL_24;
LABEL_7:
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_24;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      v15 = ((v7 + 16) & ~(_DWORD)v7) + *(_DWORD *)(v4 + 64) + ((v8 + 41) & ~(_DWORD)v8);
    else
      v15 = 4;
    __asm { BR              X12 }
  }
  return (v14 + v6);
}

void storeEnumTagSinglePayload for InsetList.TableViewRoot(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = v6 - 1;
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v5 + 64);
  v10 = (((v8 | 7) + 41) & ~(v8 | 7)) + v9;
  if (v6 - 1 >= a3)
  {
    v11 = 0u;
  }
  else
  {
    v11 = 1u;
    if (v10 <= 3)
    {
      v12 = (((v11 << (8 * v10)) + a3 - v6) >> (8 * v10)) + 1;
      if (HIWORD(v12))
      {
        v11 = 4u;
        if (v7 >= a2)
          goto LABEL_21;
      }
      else
      {
        if (v12 >= 0x100)
          v11 = 2;
        else
          v11 = v12 > 1;
        if (v7 >= a2)
LABEL_21:
          __asm { BR              X17 }
      }
LABEL_14:
      v13 = a2 - v6;
      if (v10 < 4)
      {
        if ((_DWORD)v10)
        {
          v14 = v13 & ~(-1 << (8 * v10));
          bzero(a1, v10);
          if ((_DWORD)v10 == 3)
          {
            *a1 = v14;
            *((_BYTE *)a1 + 2) = BYTE2(v14);
          }
          else if ((_DWORD)v10 == 2)
          {
            *a1 = v14;
          }
          else
          {
            *(_BYTE *)a1 = v14;
          }
        }
      }
      else
      {
        bzero(a1, (((v8 | 7) + 41) & ~(v8 | 7)) + v9);
        *(_DWORD *)a1 = v13;
      }
      __asm { BR              X10 }
    }
  }
  if (v7 >= a2)
    goto LABEL_21;
  goto LABEL_14;
}

void sub_1872B161C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1872B1688);
}

void sub_1872B1624()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872B1688);
}

void sub_1872B162C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872B1688);
}

void sub_1872B165C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1872B1688);
}

void sub_1872B166C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1872B1688);
}

void sub_1872B1674()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1872B1688);
}

uint64_t type metadata completion function for InsetList.CollectionViewBody()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(unint64_t, unint64_t, uint64_t);
  uint64_t __n;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if ((v9 | v7) <= 7
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + (((v9 | 7) + *(_QWORD *)(v6 + 64) + ((v7 + 113) & ~v7)) & ~(v9 | 7)) <= 0x18)
  {
    __n = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64);
    v61 = *(_QWORD *)(a3 + 24);
    v55 = *(_QWORD *)(v6 + 64);
    v57 = ~(v9 | 7);
    v56 = *(_DWORD *)(v8 + 84);
    v59 = *(_QWORD *)(v61 - 8);
    v60 = ~v9;
    v14 = *(_QWORD *)a2;
    v15 = *(_BYTE *)(a2 + 9);
    v16 = *(_BYTE *)(a2 + 8);
    v52 = *(_QWORD *)(v5 - 8);
    v53 = *(_QWORD *)(a3 + 16);
    v54 = v9 | 7;
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v16, v15);
    *(_QWORD *)a1 = v14;
    *(_BYTE *)(a1 + 8) = v16;
    *(_BYTE *)(a1 + 9) = v15;
    v62 = a1;
    v17 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    v58 = v9;
    v18 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    LOBYTE(v14) = *(_BYTE *)(v18 + 9);
    v20 = *(_BYTE *)(v18 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v18, v20, v14);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    *(_BYTE *)(v17 + 9) = v14;
    v21 = (v17 + 17) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v18 + 17) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    v28 = *(_QWORD *)(v22 + 32);
    v27 = *(_QWORD *)(v22 + 40);
    v29 = *(_QWORD *)(v22 + 56);
    v49 = *(_QWORD *)(v22 + 48);
    v50 = *(_BYTE *)(v22 + 64);
    v51 = *(_BYTE *)(v22 + 65);
    outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v22, v24, v25, v26, v28, v27, v49, v29, v50, v51);
    *(_QWORD *)v21 = v23;
    *(_QWORD *)(v21 + 8) = v24;
    *(_QWORD *)(v21 + 16) = v25;
    *(_QWORD *)(v21 + 24) = v26;
    *(_QWORD *)(v21 + 32) = v28;
    *(_QWORD *)(v21 + 40) = v27;
    *(_QWORD *)(v21 + 48) = v49;
    *(_QWORD *)(v21 + 56) = v29;
    *(_BYTE *)(v21 + 64) = v50;
    *(_BYTE *)(v21 + 65) = v51;
    v30 = (v21 + 73) & 0xFFFFFFFFFFFFFFF8;
    v31 = (v22 + 73) & 0xFFFFFFFFFFFFFFF8;
    v32 = *(_QWORD *)v31;
    LOBYTE(v29) = *(_BYTE *)(v31 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v31, v29);
    *(_QWORD *)v30 = v32;
    *(_BYTE *)(v30 + 8) = v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v52 + 16))((v30 + v7 + 9) & ~v7, (v31 + v7 + 9) & ~v7, v53);
    v33 = (_QWORD *)((((v30 + v7 + 9) & ~v7) + v55 + v54) & v57);
    v34 = (_QWORD *)((((v31 + v7 + 9) & ~v7) + v55 + v54) & v57);
    v35 = (uint64_t *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v56 < 0)
    {
      v37 = v61;
      v41 = (*(uint64_t (**)(unint64_t))(v59 + 48))(((unint64_t)v35 + v58 + 8) & v60);
      v39 = v59;
      v38 = v58;
      v40 = v60;
      if (v41)
      {
LABEL_14:
        memcpy(v33, v34, __n);
        return v62;
      }
    }
    else
    {
      v36 = *v35;
      if ((unint64_t)*v35 >= 0xFFFFFFFF)
        LODWORD(v36) = -1;
      v37 = v61;
      v38 = v58;
      v39 = v59;
      v40 = v60;
      if ((_DWORD)v36 != -1)
        goto LABEL_14;
    }
    *v33 = *v34;
    v42 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v42 = *v35;
    v43 = v38 + 8;
    v44 = ((unint64_t)v42 + v43) & v40;
    v45 = ((unint64_t)v35 + v43) & v40;
    v46 = *(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16);
    swift_retain();
    swift_retain();
    v46(v44, v45, v37);
    return v62;
  }
  v12 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v13 = v12 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
  swift_retain();
  return v13;
}

uint64_t destroy for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t result;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)v4, *(unsigned __int8 *)(v4 + 8), *(_BYTE *)(v4 + 9));
  v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_BYTE *)(v5 + 64), *(_BYTE *)(v5 + 65));
  v6 = (v5 + 73) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v6, *(_BYTE *)(v6 + 8));
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + (v12 | 7)) & ~(v12 | 7);
  v14 = ~v12;
  v15 = (uint64_t *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) != 0)
  {
    result = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v15 + v12 + 8) & v14);
    if ((_DWORD)result)
      return result;
LABEL_7:
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v11 + 8))(((unint64_t)v15 + v12 + 8) & v14, v10);
  }
  v16 = *v15;
  if ((unint64_t)*v15 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  result = (v16 + 1);
  if ((_DWORD)v16 == -1)
    goto LABEL_7;
  return result;
}

uint64_t initializeWithCopy for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t, unint64_t, uint64_t);
  char v44;
  char v45;
  uint64_t v47;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  v47 = a1;
  v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  LOBYTE(v5) = *(_BYTE *)(v9 + 9);
  v11 = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v9, v11, v5);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 9) = v5;
  v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  v18 = *(_QWORD *)(v13 + 32);
  v19 = *(_QWORD *)(v13 + 40);
  v20 = *(_QWORD *)(v13 + 48);
  v21 = *(_QWORD *)(v13 + 56);
  v44 = *(_BYTE *)(v13 + 64);
  v45 = *(_BYTE *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v13, v15, v16, v17, v18, v19, v20, v21, v44, v45);
  *(_QWORD *)v12 = v14;
  *(_QWORD *)(v12 + 8) = v15;
  *(_QWORD *)(v12 + 16) = v16;
  *(_QWORD *)(v12 + 24) = v17;
  *(_QWORD *)(v12 + 32) = v18;
  *(_QWORD *)(v12 + 40) = v19;
  *(_QWORD *)(v12 + 48) = v20;
  *(_QWORD *)(v12 + 56) = v21;
  *(_BYTE *)(v12 + 64) = v44;
  *(_BYTE *)(v12 + 65) = v45;
  v22 = (v12 + 73) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v13 + 73) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  LOBYTE(v15) = *(_BYTE *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v23, v15);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = v15;
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = (v26 + 9 + v22) & ~v26;
  v28 = (v26 + 9 + v23) & ~v26;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v27, v28);
  v29 = *(_QWORD *)(v25 + 64);
  v30 = *(_QWORD *)(a3 + 24);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v32 | 7) + v29;
  v34 = (_QWORD *)((v33 + v27) & ~(v32 | 7));
  v35 = (_QWORD *)((v33 + v28) & ~(v32 | 7));
  v36 = ~v32;
  v37 = *(_QWORD *)(v31 + 64);
  v38 = (uint64_t *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v31 + 84) & 0x80000000) == 0)
  {
    v39 = *v38;
    if ((unint64_t)*v38 >= 0xFFFFFFFF)
      LODWORD(v39) = -1;
    if ((_DWORD)v39 != -1)
      goto LABEL_5;
LABEL_7:
    *v34 = *v35;
    v40 = (_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v40 = *v38;
    v41 = ((unint64_t)v40 + v32 + 8) & v36;
    v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16);
    swift_retain();
    swift_retain();
    v42(v41, ((unint64_t)v38 + v32 + 8) & v36, v30);
    return v47;
  }
  if (!(*(unsigned int (**)(unint64_t))(v31 + 48))(((unint64_t)v38 + v32 + 8) & v36))
    goto LABEL_7;
LABEL_5:
  memcpy(v34, v35, ((v32 + 16) & ~v32) + v37);
  return v47;
}

uint64_t assignWithCopy for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t (*v62)(unint64_t, uint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(unint64_t, unint64_t, uint64_t);
  uint64_t v66;
  char v67;
  int v68;
  char v69;
  size_t v70;
  _QWORD *v72;

  v5 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a2 + 9);
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v5;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v66 = a1;
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v5) = *(_BYTE *)(v12 + 9);
  v14 = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v12, v14, v5);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = v13;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v14;
  *(_BYTE *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = v11 + 17;
  v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v18 & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)(v19 + 16);
  v24 = *(_QWORD *)(v19 + 24);
  v25 = *(_QWORD *)(v19 + 32);
  v26 = *(_QWORD *)(v19 + 40);
  v27 = *(_QWORD *)(v19 + 48);
  v28 = *(_QWORD *)(v19 + 56);
  v67 = *(_BYTE *)(v19 + 64);
  v69 = *(_BYTE *)(v19 + 65);
  outlined copy of Environment<ListPadding>.Content(*(_QWORD *)v19, v21, v23, v24, v25, v26, v27, v28, v67, v69);
  v29 = *(_QWORD *)v22;
  v30 = *(_QWORD *)(v22 + 8);
  v31 = *(_QWORD *)(v22 + 16);
  v32 = *(_QWORD *)(v22 + 24);
  v33 = *(_QWORD *)(v22 + 32);
  v34 = *(_QWORD *)(v22 + 40);
  v35 = *(_QWORD *)(v22 + 48);
  v36 = *(_QWORD *)(v22 + 56);
  v37 = *(_BYTE *)(v22 + 64);
  v38 = *(_BYTE *)(v22 + 65);
  *(_QWORD *)v22 = v20;
  *(_QWORD *)(v22 + 8) = v21;
  *(_QWORD *)(v22 + 16) = v23;
  *(_QWORD *)(v22 + 24) = v24;
  *(_QWORD *)(v22 + 32) = v25;
  *(_QWORD *)(v22 + 40) = v26;
  *(_QWORD *)(v22 + 48) = v27;
  *(_QWORD *)(v22 + 56) = v28;
  *(_BYTE *)(v22 + 64) = v67;
  *(_BYTE *)(v22 + 65) = v69;
  outlined consume of Environment<ListPadding>.Content(v29, v30, v31, v32, v33, v34, v35, v36, v37, v38);
  v39 = (v22 + 73) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v19 + 73) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(_QWORD *)v40;
  LOBYTE(v21) = *(_BYTE *)(v40 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v40, v21);
  v42 = *(_QWORD *)v39;
  v43 = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v39 = v41;
  *(_BYTE *)(v39 + 8) = v21;
  outlined consume of Environment<Bool>.Content(v42, v43);
  v44 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v45 = *(unsigned __int8 *)(v44 + 80);
  v46 = (v45 + 9 + v39) & ~v45;
  v47 = (v45 + 9 + v40) & ~v45;
  (*(void (**)(uint64_t, uint64_t))(v44 + 24))(v46, v47);
  v48 = *(_QWORD *)(a3 + 24);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned __int8 *)(v49 + 80);
  v51 = (v50 | 7) + *(_QWORD *)(v44 + 64);
  v52 = (_QWORD *)((v51 + v46) & ~(v50 | 7));
  v53 = (_QWORD *)((v51 + v47) & ~(v50 | 7));
  v54 = *(unsigned int *)(v49 + 84);
  v55 = ~v50;
  v56 = *(_QWORD *)(v49 + 64);
  v57 = ((v50 + 16) & ~v50) + v56;
  v58 = (_QWORD *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v54 & 0x80000000) != 0)
  {
    v70 = ((v50 + 16) & ~v50) + v56;
    v72 = v53;
    v62 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v49 + 48);
    v68 = v62(((unint64_t)v58 + v50 + 8) & ~v50, v54, v48);
    v59 = (_QWORD *)(((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8);
    v55 = ~v50;
    v57 = v70;
    v61 = v62(((unint64_t)v59 + v50 + 8) & ~v50, v54, v48);
    v53 = v72;
    if (!v68)
    {
LABEL_5:
      if (!v61)
      {
        *v52 = *v53;
        swift_retain();
        swift_release();
        *v58 = *v59;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 24))(((unint64_t)v58 + v50 + 8) & v55, ((unint64_t)v59 + v50 + 8) & v55, v48);
        return v66;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v49 + 8))(((unint64_t)v58 + v50 + 8) & v55, v48);
      goto LABEL_9;
    }
  }
  else
  {
    v59 = (_QWORD *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
    v60 = *v59;
    if (*v59 >= 0xFFFFFFFFuLL)
      LODWORD(v60) = -1;
    v61 = v60 + 1;
    if (*v58 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v61)
  {
    *v52 = *v53;
    *v58 = *v59;
    v63 = v48;
    v64 = *(void (**)(unint64_t, unint64_t, uint64_t))(v49 + 16);
    swift_retain();
    swift_retain();
    v64(((unint64_t)v58 + v50 + 8) & v55, ((unint64_t)v59 + v50 + 8) & v55, v63);
    return v66;
  }
LABEL_9:
  memcpy(v52, v53, v57);
  return v66;
}

uint64_t initializeWithTake for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v5 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v6 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  *(_WORD *)(v5 + 8) = *(_WORD *)(v6 + 8);
  *(_QWORD *)v5 = v7;
  v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_OWORD *)(v9 + 32);
  v10 = *(_OWORD *)(v9 + 48);
  v12 = *(_OWORD *)(v9 + 16);
  *(_WORD *)(v8 + 64) = *(_WORD *)(v9 + 64);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v13 = (v8 + 73) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v9 + 73) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v15;
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = (v17 + 9 + v13) & ~v17;
  v19 = (v17 + 9 + v14) & ~v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v18, v19);
  v20 = *(_QWORD *)(v16 + 64);
  v21 = *(_QWORD *)(a3 + 24);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v23 | 7) + v20;
  v25 = (char *)((v24 + v18) & ~(v23 | 7));
  v26 = (_QWORD *)((v24 + v19) & ~(v23 | 7));
  v27 = ~v23;
  v28 = *(_QWORD *)(v22 + 64);
  v29 = (uint64_t *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v22 + 84) & 0x80000000) == 0)
  {
    v30 = *v29;
    if ((unint64_t)*v29 >= 0xFFFFFFFF)
      LODWORD(v30) = -1;
    if ((_DWORD)v30 != -1)
      goto LABEL_5;
LABEL_7:
    *(_QWORD *)v25 = *v26;
    v31 = (unint64_t)(v25 + 15);
    *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8) = *v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v22 + 32))((v23 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & v27, ((unint64_t)v29 + v23 + 8) & v27, v21);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v22 + 48))(((unint64_t)v29 + v23 + 8) & v27))
    goto LABEL_7;
LABEL_5:
  memcpy(v25, v26, ((v23 + 16) & ~v23) + v28);
  return a1;
}

uint64_t assignWithTake for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  size_t v58;
  void *v59;
  const void *v60;
  uint64_t (*v61)(unint64_t, uint64_t, uint64_t);
  int v62;
  uint64_t (*v63)(unint64_t, uint64_t, uint64_t);
  int v65;
  size_t __n;

  v6 = *(_BYTE *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 9);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  v14 = *(_BYTE *)(v12 + 9);
  v15 = *(_QWORD *)v11;
  v16 = *(_BYTE *)(v11 + 9);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v17 = *(unsigned __int8 *)(v11 + 8);
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 64);
  v20 = *(_BYTE *)(v18 + 65);
  v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(_QWORD *)(v21 + 16);
  v25 = *(_QWORD *)(v21 + 24);
  v26 = *(_QWORD *)(v21 + 32);
  v27 = *(_QWORD *)(v21 + 40);
  v28 = *(_QWORD *)(v21 + 48);
  v29 = *(_QWORD *)(v21 + 56);
  v30 = *(_BYTE *)(v21 + 64);
  v31 = *(_BYTE *)(v21 + 65);
  v32 = *(_OWORD *)(v18 + 16);
  v33 = *(_OWORD *)(v18 + 32);
  v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(_BYTE *)(v21 + 64) = v19;
  *(_BYTE *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  v35 = (v21 + 73) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v18 + 73) & 0xFFFFFFFFFFFFFFF8;
  v37 = *(_BYTE *)(v36 + 8);
  v38 = *(_QWORD *)v35;
  v39 = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = v37;
  outlined consume of Environment<Bool>.Content(v38, v39);
  v40 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = (v41 + 9 + v35) & ~v41;
  v43 = (v41 + 9 + v36) & ~v41;
  (*(void (**)(uint64_t, uint64_t))(v40 + 40))(v42, v43);
  v44 = *(_QWORD *)(a3 + 24);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(unsigned __int8 *)(v45 + 80);
  v47 = (v46 | 7) + *(_QWORD *)(v40 + 64);
  v48 = (_QWORD *)((v47 + v42) & ~(v46 | 7));
  v49 = (_QWORD *)((v47 + v43) & ~(v46 | 7));
  v50 = *(unsigned int *)(v45 + 84);
  v51 = ~v46;
  v52 = *(_QWORD *)(v45 + 64);
  v53 = ((v46 + 16) & ~v46) + v52;
  v54 = (_QWORD *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v50 & 0x80000000) != 0)
  {
    __n = ((v46 + 16) & ~v46) + v52;
    v61 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48);
    v62 = v61(((unint64_t)v54 + v46 + 8) & ~v46, v50, v44);
    v63 = v61;
    v65 = v62;
    v55 = (_QWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
    v51 = ~v46;
    v57 = v63(((unint64_t)v55 + v46 + 8) & ~v46, v50, v44);
    v53 = __n;
    if (!v65)
    {
LABEL_5:
      if (!v57)
      {
        *v48 = *v49;
        swift_release();
        *v54 = *v55;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v45 + 40))(((unint64_t)v54 + v46 + 8) & v51, ((unint64_t)v55 + v46 + 8) & v51, v44);
        return a1;
      }
      v58 = v53;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v45 + 8))(((unint64_t)v54 + v46 + 8) & v51, v44);
      v59 = v48;
      v60 = v49;
      v53 = v58;
      goto LABEL_10;
    }
  }
  else
  {
    v55 = (_QWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
    v56 = *v55;
    if (*v55 >= 0xFFFFFFFFuLL)
      LODWORD(v56) = -1;
    v57 = v56 + 1;
    if (*v54 > 0xFFFFFFFEuLL)
      goto LABEL_5;
  }
  if (!v57)
  {
    *v48 = *v49;
    *v54 = *v55;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v45 + 32))(((unint64_t)v54 + v46 + 8) & v51, ((unint64_t)v55 + v46 + 8) & v51, v44);
    return a1;
  }
  v59 = v48;
  v60 = v49;
LABEL_10:
  memcpy(v59, v60, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for InsetList.CollectionViewBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = v9 - 1;
  if (v6 <= v9 - 1)
    v11 = v9 - 1;
  else
    v11 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = v14 | 7;
  v16 = a2 - v11;
  if (a2 <= v11)
    goto LABEL_27;
  v17 = ((v14 + 16) & ~v14) + *(_QWORD *)(v7 + 64) + ((v15 + v13 + ((v12 + 113) & ~v12)) & ~v15);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      v24 = (((((((a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 73) & 0xFFFFFFFFFFFFFFF8) + v12 + 9) & ~v12;
      if (v6 >= v10)
        return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
      v25 = (unint64_t *)((((v24 + v13 + v15) & ~v15) + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) != 0)
      {
        v27 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v25 + v14 + 8) & ~v14);
      }
      else
      {
        v26 = *v25;
        if (v26 >= 0xFFFFFFFF)
          LODWORD(v26) = -1;
        v27 = v26 + 1;
      }
      if (v27 >= 2)
        return v27 - 1;
      else
        return 0;
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = ((v14 + 16) & ~(_DWORD)v14)
          + *(_DWORD *)(v7 + 64)
          + ((v15 + v13 + ((v12 + 113) & ~(_DWORD)v12)) & ~(_DWORD)v15);
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v11 + v22 + 1;
}

void storeEnumTagSinglePayload for InsetList.CollectionViewBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (*(_DWORD *)(v5 + 84) <= (v7 - 1))
    v8 = v7 - 1;
  else
    v8 = *(_DWORD *)(v5 + 84);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (((v9 | 7)
        + *(_QWORD *)(v5 + 64)
        + ((*(unsigned __int8 *)(v5 + 80) + 113) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(v9 | 7))
      + ((v9 + 16) & ~v9)
      + *(_QWORD *)(v6 + 64);
  if (a3 > v8)
  {
    if (v10 <= 3)
    {
      v13 = ((a3 - v8 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v8 < a2)
  {
    v12 = ~v8 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X22 }
}

void sub_1872B2C14()
{
  type metadata accessor for InsetList.CollectionViewBody();
}

void sub_1872B2C48()
{
  type metadata accessor for InsetList.TableViewRoot();
}

void sub_1872B2C60()
{
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for StaticIf();
}

uint64_t sub_1872B2CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.CollectionViewBody, v2);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.TableViewRoot, v3);
  v10 = v4;
  v8[0] = v6;
  v8[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v1, &v9);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v8);
}

uint64_t instantiation function for generic protocol witness table for InsetList<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetList<A, B>.TableViewRoot);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in InsetList<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in InsetList<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

_UNKNOWN **sub_1872B2D58()
{
  return &protocol witness table for CollectionViewListRoot<A, B>;
}

_UNKNOWN **sub_1872B2D64()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

uint64_t EnvironmentValues._defaultMinListRowHeight.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues._defaultMinListRowHeight.setter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>, (uint64_t)&type metadata for DefaultMinListRowHeightKey, (uint64_t)&protocol witness table for DefaultMinListRowHeightKey, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultMinListHeaderHeight : EnvironmentValues(uint64_t a1)
{
  return EnvironmentValues.defaultMinListHeaderHeight.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t EnvironmentValues.defaultMinListHeaderHeight.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues._defaultMinListRowHeight.setter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>, (uint64_t)&type metadata for DefaultMinListHeaderHeightKey, (uint64_t)&protocol witness table for DefaultMinListHeaderHeightKey, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues._defaultMinListRowHeight.setter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a3);
  a6(v8, v9);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v6 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.listDeleteControlVisibility.getter()
{
  return EnvironmentValues.listDeleteControlVisibility.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.listDeleteControlVisibility.getter(unint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v4;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.listStackBehavior : EnvironmentValues()
{
  return EnvironmentValues.listStackBehavior.setter();
}

uint64_t EnvironmentValues.listStackBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.listReorderControlVisibility.setter((uint64_t)&v2);
}

uint64_t EnvironmentValues.listReorderControlVisibility.setter(uint64_t a1)
{
  return EnvironmentValues.listReorderControlVisibility.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.listDeleteControlVisibility : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X3>, void (*a3)(void)@<X6>, _BYTE *a4@<X8>)
{
  uint64_t result;
  char v7;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    a3();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    a3();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a4 = v7;
  return result;
}

uint64_t key path setter for EnvironmentValues.listDeleteControlVisibility : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.listDeleteControlVisibility.setter((uint64_t)&v2);
}

uint64_t EnvironmentValues.listDeleteControlVisibility.setter(uint64_t a1)
{
  return EnvironmentValues.listReorderControlVisibility.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listReorderControlVisibility.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  a5();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.horizontalListMargin.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultMinListRowHeight : EnvironmentValues()
{
  return EnvironmentValues.defaultMinListRowHeight.setter();
}

uint64_t EnvironmentValues.defaultMinListRowHeight.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DefaultMinListRowHeightKey(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0)
    return (*(double *)a1 == *(double *)a2) & ~(_DWORD)result;
  return result;
}

double EnvironmentValues.rowInset.getter()
{
  double v0;

  EnvironmentValues.defaultPadding.getter();
  EdgeInsets.horizontal.getter();
  return v0 * 0.5;
}

uint64_t (*EnvironmentValues.defaultMinListRowHeight.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  double v3;

  *(_QWORD *)(a1 + 24) = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = *(double *)a1;
  if (*(_BYTE *)(a1 + 8))
    v3 = 44.0;
  *(double *)(a1 + 16) = v3;
  return EnvironmentValues.defaultMinListRowHeight.modify;
}

uint64_t EnvironmentValues.defaultMinListRowHeight.modify(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 8) = 0;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.defaultMinListHeaderHeight.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 24);
  *v3 = v3[2];
  *((_BYTE *)v3 + 8) = v4;
  return EnvironmentValues.defaultMinListHeaderHeight.modify;
}

void EnvironmentValues.defaultMinListHeaderHeight.modify(_QWORD **a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;

  v1 = *a1;
  v2 = (*a1)[4];
  v3 = *((_BYTE *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

double EnvironmentValues.horizontalListMargin.getter()
{
  uint64_t v0;
  double v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListMarginKey@<X0>(double *a1@<X8>)
{
  uint64_t result;
  double v3;

  result = static SemanticFeature.isEnabled.getter();
  v3 = 15.0;
  if ((result & 1) != 0)
    v3 = 16.0;
  *a1 = v3;
  return result;
}

void EnvironmentValues._plainListSectionSpacing.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._plainListSectionSpacing.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues._plainListSectionSpacing.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.listBackground(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = a1;
  return View.scrollContentBackground<A>(_:)((uint64_t)&v5, a2, MEMORY[0x1E0CE7170], a3, MEMORY[0x1E0CE7138], a4);
}

uint64_t View.listHasStackBehavior()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = 1;
  v4 = 256;
  return MEMORY[0x18D75B4AC](&v3, a1, &type metadata for ListHasStackBehaviorModifier, a2);
}

uint64_t View.listSizesToFit(maxHeight:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4;
  __int16 v5;

  v4 = a3;
  v5 = 0;
  return MEMORY[0x18D75B4AC](&v4, a1, &type metadata for ListHasStackBehaviorModifier, a2);
}

uint64_t View.resetListStackBehavior()()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ListHasStackBehaviorModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ListHasStackBehaviorModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ListHasStackBehaviorModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance ListHasStackBehaviorModifier(uint64_t a1, uint64_t a2)
{
  uint64_t Value;

  Value = AGGraphGetValue();
  return specialized static ListHasStackBehaviorModifier.makeEnvironment(behavior:environment:)(*(_QWORD *)Value, *(unsigned __int8 *)(Value + 8) | (unsigned __int16)(*(unsigned __int8 *)(Value + 9) << 8), a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListHasStackBehaviorModifier()
{
  lazy protocol witness table accessor for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

void static ListAccessoryVisibility.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ListAccessoryVisibility.editing.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static ListAccessoryVisibility.editing(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if ((result & 1) != 0)
    v2 = 1;
  else
    v2 = 2;
  *a2 = v2;
  return result;
}

void static ListAccessoryVisibility.always.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static ListAccessoryVisibility.never.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

BOOL static ListAccessoryVisibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t View.listReorderControlVisibility(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_1872B4110(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.listReorderControlVisibility.setter((uint64_t)&v2);
}

uint64_t (*EnvironmentValues.listReorderControlVisibility.modify(_QWORD *a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.listReorderControlVisibility.modify;
}

uint64_t EnvironmentValues.listReorderControlVisibility.modify(uint64_t *a1, uint64_t a2)
{
  return EnvironmentValues.listReorderControlVisibility.modify(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t (*EnvironmentValues.listDeleteControlVisibility.modify(_QWORD *a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.listDeleteControlVisibility.modify;
}

uint64_t EnvironmentValues.listDeleteControlVisibility.modify(uint64_t *a1, uint64_t a2)
{
  return EnvironmentValues.listReorderControlVisibility.modify(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listReorderControlVisibility.modify(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7;

  v7 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a3);
  a6();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v7 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void sub_1872B4480(double *a1@<X8>)
{
  *a1 = EnvironmentValues.defaultMinListRowHeight.getter();
}

uint64_t sub_1872B44B8()
{
  return EnvironmentValues.defaultMinListRowHeight.setter();
}

uint64_t sub_1872B44DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.defaultMinListHeaderHeight.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1872B451C(uint64_t a1)
{
  return EnvironmentValues.defaultMinListHeaderHeight.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_1872B4548()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1872B456C()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1872B457C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_1872B45B0(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.listReorderControlVisibility.setter((uint64_t)&v2);
}

uint64_t sub_1872B45E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_1872B4618(char *a1)
{
  char v2;

  v2 = *a1;
  return EnvironmentValues.listDeleteControlVisibility.setter((uint64_t)&v2);
}

uint64_t sub_1872B464C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1872B46D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1872B4748(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier;
  if (!lazy protocol witness table cache variable for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollContentBackgroundModifier, &type metadata for ScrollContentBackgroundModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier);
  }
  return result;
}

uint64_t sub_1872B47E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ListHasStackBehaviorModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1872B4834(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA12KeyboardTypeVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListAccessoryVisibility>, (uint64_t)&type metadata for ListAccessoryVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8], (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListAccessoryVisibility>, (uint64_t)&type metadata for ListAccessoryVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t getEnumTag for ListStackBehavior(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for ListStackBehavior(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    *(_BYTE *)(result + 9) = 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ListHasStackBehaviorModifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ListHasStackBehaviorModifier()
{
  return &type metadata for ListHasStackBehaviorModifier;
}

ValueMetadata *type metadata accessor for DefaultMinListRowHeightKey()
{
  return &type metadata for DefaultMinListRowHeightKey;
}

ValueMetadata *type metadata accessor for ListAccessoryVisibilityKey()
{
  return &type metadata for ListAccessoryVisibilityKey;
}

ValueMetadata *type metadata accessor for ListDeleteAccessoryVisibilityKey()
{
  return &type metadata for ListDeleteAccessoryVisibilityKey;
}

ValueMetadata *type metadata accessor for DefaultMinListHeaderHeightKey()
{
  return &type metadata for DefaultMinListHeaderHeightKey;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ListHasStackBehaviorModifier()
{
  return &protocol witness table for ListHasStackBehaviorModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ListHasStackBehaviorModifier()
{
  return &protocol witness table for ListHasStackBehaviorModifier;
}

unint64_t lazy protocol witness table accessor for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts;
  if (!lazy protocol witness table cache variable for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListAccessoryVisibility.Guts, &type metadata for ListAccessoryVisibility.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ListStackBehavior(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  v2 = *(double *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(double *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 9) == 1)
  {
    if (*(_QWORD *)&v2 | v3)
    {
      if (*(_BYTE *)(a2 + 9))
        return (*(_QWORD *)&v4 | v5) != 0;
    }
    else if (*(_BYTE *)(a2 + 9))
    {
      return (*(_QWORD *)&v4 | v5) == 0;
    }
    return 0;
  }
  if ((*(_BYTE *)(a2 + 9) & 1) != 0)
    return 0;
  if ((v3 & 1) != 0)
    return (v5 & 1) != 0;
  return (v5 & 1) == 0 && v2 == v4;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized static ListHasStackBehaviorModifier.makeEnvironment(behavior:environment:)(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v9 = a1;
  v10 = a2 & 0x1FF;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a3 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  result = swift_release();
  if ((a2 & 0x100) != 0 && a1 | a2)
  {
    v7 = *(_QWORD *)(a3 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v7)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    LOBYTE(v9) = 0;
    outlined init with copy of ScrollEnvironmentProperties((int *)&v9, (uint64_t)&v8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v7)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return outlined destroy of ScrollEnvironmentProperties((uint64_t)&v9);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier;
  if (!lazy protocol witness table cache variable for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListHasStackBehaviorModifier, &type metadata for ListHasStackBehaviorModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListHasStackBehaviorKey()
{
  return &type metadata for ListHasStackBehaviorKey;
}

ValueMetadata *type metadata accessor for ListMarginKey()
{
  return &type metadata for ListMarginKey;
}

uint64_t sub_1872B4E08@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = EnvironmentValues.listStackBehavior.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t sub_1872B4E4C()
{
  return EnvironmentValues.listStackBehavior.setter();
}

void Scene.defaultPosition(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t Scene.defaultSize(_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD v5[2];
  char v6;

  *(double *)v5 = a3;
  *(double *)&v5[1] = a4;
  v6 = 1;
  return Scene.modifier<A>(_:)(v5, a1, &unk_1E1AFE118, a2);
}

uint64_t sub_1872B4EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for WindowDefaultsPropertyModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

void *type metadata accessor for WindowDefaultsPropertyModifier()
{
  return &unk_1E1AFE118;
}

char *WindowDefaultsPropertyModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[272];
  _BYTE v10[232];
  __int128 v11;
  char v12;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
    return (char *)MEMORY[0x1E0DEE9D8];
  Value = AGGraphGetValue();
  v2 = *(_QWORD *)(*(_QWORD *)Value + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)Value + 32;
  swift_bridgeObjectRetain();
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    outlined init with copy of SceneList.Item(v3, (uint64_t)v10);
    v5 = AGGraphGetValue();
    if (*(_BYTE *)(v5 + 16) == 1)
    {
      v11 = *(_OWORD *)v5;
      v12 = 0;
    }
    outlined init with copy of SceneList.Item((uint64_t)v10, (uint64_t)v9);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    v7 = *((_QWORD *)v4 + 2);
    v6 = *((_QWORD *)v4 + 3);
    if (v7 >= v6 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    *((_QWORD *)v4 + 2) = v7 + 1;
    memcpy(&v4[272 * v7 + 32], v9, 0x110uLL);
    outlined destroy of SceneList.Item((uint64_t)v10);
    v3 += 272;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

char *protocol witness for Rule.value.getter in conformance WindowDefaultsPropertyModifier.UpdateSceneList@<X0>(char **a1@<X8>)
{
  uint64_t *v1;
  char *result;

  result = WindowDefaultsPropertyModifier.UpdateSceneList.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t static WindowDefaultsPropertyModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a2 + 56);
  v18 = *(_QWORD *)a2;
  v19 = v6;
  v20 = v7;
  v21 = *(_OWORD *)(a2 + 24);
  v22 = v8;
  v23 = v9;
  v24 = v10;
  a3(&v16);
  v18 = v9;
  v19 = v10;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<WindowDefaultsPropertyModifier>();
    v12 = _GraphValue.value.getter();
    v18 = v16;
    v19 = v17;
    v13 = PreferencesOutputs.subscript.getter();
    v14 = *MEMORY[0x1E0CFED28];
    if ((v13 & 0x100000000) == 0)
      v14 = v13;
    v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    result = PreferencesOutputs.subscript.setter();
  }
  v15 = v17;
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

void type metadata accessor for _GraphValue<WindowDefaultsPropertyModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<WindowDefaultsPropertyModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WindowDefaultsPropertyModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowDefaultsPropertyModifier.UpdateSceneList, &unk_1E1AFE088);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList);
  }
  return result;
}

void *type metadata accessor for WindowDefaultsPropertyModifier.UpdateSceneList()
{
  return &unk_1E1AFE088;
}

void *type metadata accessor for WindowDefaultsPropertyModifier.Property()
{
  return &unk_1E1AFDFF8;
}

void View.pullDownMenu<A>(menuItems:isPresented:anchor:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1872B536C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for PullDownMenuPresentationModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PullDownMenuPresentationModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t type metadata accessor for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PullDownMenuPresentationModifier);
}

uint64_t type metadata completion function for PullDownMenuPresentationModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PullDownMenuPresentationModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((v7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v12 = (a1 + v6 + 17) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
    v15 = (_QWORD *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8);
    v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8;
    v17 = v16 + 15;
    v18 = *(_QWORD *)v16;
    v16 += 31;
    *v15 = v18;
    v19 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    v17 &= 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)v17;
    v21 = *(unsigned __int8 *)(v17 + 8);
    swift_retain();
    outlined copy of Environment<ControlSize>.Content(v20, v21);
    *(_QWORD *)v19 = v20;
    *(_BYTE *)(v19 + 8) = v21;
    v22 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    LOBYTE(v21) = *(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
    outlined copy of Environment<ControlSize>.Content(v23, v21);
    *(_QWORD *)v22 = v23;
    *(_BYTE *)(v22 + 8) = v21;
  }
  return a1;
}

uint64_t destroy for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  swift_release();
  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)((v6 + 15) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)((v6 + 31) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t initializeWithCopy for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (_QWORD *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 15;
  v15 = *(_QWORD *)v13;
  v13 += 31;
  *v12 = v15;
  v16 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v14;
  v18 = *(unsigned __int8 *)(v14 + 8);
  swift_retain();
  outlined copy of Environment<ControlSize>.Content(v17, v18);
  *(_QWORD *)v16 = v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = ((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  LOBYTE(v18) = *(_BYTE *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  outlined copy of Environment<ControlSize>.Content(v20, v18);
  *(_QWORD *)v19 = v20;
  *(_BYTE *)(v19 + 8) = v18;
  return a1;
}

uint64_t assignWithCopy for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v12 = (unint64_t)v11 + 31;
  v13 = ((v10 + v8) & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8) = *v11;
  v14 = ((v10 + v8) & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_retain();
  swift_release();
  v13 &= 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v11) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<ControlSize>.Content(*(_QWORD *)v15, v11);
  v17 = *(_QWORD *)v13;
  v18 = *(unsigned __int8 *)(v13 + 8);
  *(_QWORD *)v13 = v16;
  *(_BYTE *)(v13 + 8) = (_BYTE)v11;
  outlined consume of Environment<ControlSize>.Content(v17, v18);
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  LOBYTE(v11) = *(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
  outlined copy of Environment<ControlSize>.Content(v19, v11);
  v20 = *(_QWORD *)v14;
  v21 = *(unsigned __int8 *)(v14 + 8);
  *(_QWORD *)v14 = v19;
  *(_BYTE *)(v14 + 8) = (_BYTE)v11;
  outlined consume of Environment<ControlSize>.Content(v20, v21);
  return a1;
}

uint64_t initializeWithTake for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 17 + a1) & ~v5;
  v7 = (v5 + 17 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  v14 = ((unint64_t)v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v12) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v12;
  return a1;
}

uint64_t assignWithTake for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = v10 + v8;
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *v12;
  v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_release();
  v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  v16 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  LOBYTE(v16) = *(_BYTE *)(v16 + 8);
  v18 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v19 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v16;
  outlined consume of Environment<ControlSize>.Content(v18, v19);
  v20 = v14 & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_BYTE *)((((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
  v22 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  v23 = *(unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v20 = *(_QWORD *)(((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v20 + 8) = v21;
  outlined consume of Environment<ControlSize>.Content(v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PullDownMenuPresentationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    v8 = ((((*(_QWORD *)(v4 + 64) + ((v7 + 17) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1872B5B18 + 4 * byte_187C1E250[v12]))();
  }
}

void storeEnumTagSinglePayload for PullDownMenuPresentationModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64)
         + ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_1872B5CE0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1872B5D50);
}

void sub_1872B5CE8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1872B5CF0);
  JUMPOUT(0x1872B5D50);
}

void sub_1872B5D04()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872B5D50);
}

void sub_1872B5D0C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872B5D50);
}

void sub_1872B5D14(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x1872B5D20);
    if (a2 < 0)
      JUMPOUT(0x1872B5D44);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x1872B5D50);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PullDownMenuPresentationModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for PullDownMenuPresentation()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for PullDownMenuPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v3 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PullDownMenuPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PullDownMenuPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PullDownMenuPresentation()
{
  return &type metadata for PullDownMenuPresentation;
}

ValueMetadata *type metadata accessor for PullDownMenuPresentation.Key()
{
  return &type metadata for PullDownMenuPresentation.Key;
}

_UNKNOWN **sub_1872B5F40()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

uint64_t static ViewModifier._changedProperties.getter()
{
  return changedBodyProperties<A>(of:)();
}

uint64_t static ViewModifier._printChanges()()
{
  return printChangedBodyProperties<A>(of:)();
}

uint64_t static ViewModifier._logChanges()()
{
  return logChangedBodyProperties<A>(of:)();
}

void type metadata completion function for UITableViewListCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  type metadata accessor for ShadowListUpdateRecorder(319, v4, v5, a4);
  if (v6 <= 0x3F)
  {
    type metadata accessor for Binding();
    type metadata accessor for Optional();
    if (v7 <= 0x3F)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      if (v9 <= 0x3F)
      {
        type metadata accessor for ListCoreBatchUpdates(319, v4, v5, v8);
        if (v10 <= 0x3F)
        {
          type metadata accessor for Optional();
          if (v11 <= 0x3F)
            swift_initClassMetadata2();
        }
      }
    }
  }
}

uint64_t UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (result)
  {
    v2 = v1;
    v3 = result;
    v4 = *v2;
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v6 = *MEMORY[0x1E0DEEDD8];
    v13 = result;
    swift_retain();
    v7 = Transaction.animationIgnoringTransitionPhase.getter();
    swift_release();
    if (v7)
    {
      v8 = v6 & v4;
      *((_BYTE *)v2 + *(_QWORD *)((*v5 & *v2) + 0xF8)) = 1;
      UITableViewListCoordinator.isAnimatingInitialLayout.didset();
      v9 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 80);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v8 + 88);
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(v8 + 104);
      *(_QWORD *)(v10 + 48) = v9;
      swift_retain();
      Transaction.addAnimationListener(allFinished:)();
      swift_release();
      swift_release();
      v3 = v13;
    }
    v11 = (_QWORD *)((char *)v2 + *(_QWORD *)((*v5 & *v2) + 0x88));
    swift_beginAccess();
    v12 = *v11;
    *v11 = v3;
    return outlined consume of Transaction?(v12);
  }
  return result;
}

id UITableViewListCoordinator.dragAndDropController.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v5 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xA8);
  v6 = *(void **)((char *)v4 + v5);
  if (v6)
  {
    v7 = *(id *)((char *)v4 + v5);
  }
  else
  {
    v8 = (void *)closure #1 in UITableViewListCoordinator.dragAndDropController.getter(v4, a2, a3, a4);
    v9 = *(void **)((char *)v4 + v5);
    *(_QWORD *)((char *)v4 + v5) = v8;
    v7 = v8;

    v6 = 0;
  }
  v10 = v6;
  return v7;
}

uint64_t static UITableViewListCoordinator.cellReuseIdentifier.getter()
{
  return 0x6C6C65437473694CLL;
}

_QWORD *UITableViewListCoordinator.updateUITableView(_:to:transaction:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  char *v40;
  uint64_t v41;
  _BOOL8 v42;
  id v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  void (*v57)(_BYTE *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t *v69;
  _BYTE v71[12];
  unsigned int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void (*v90)(_BYTE *, int *);
  void (*v91)(_BYTE *, char *, int *);
  char v92;
  char v93[24];
  _BYTE v94[24];

  v4 = v3;
  v88 = a2;
  v89 = a1;
  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = v6[10];
  v79 = type metadata accessor for Optional();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v8);
  v77 = &v71[-v9];
  v82 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v76 = &v71[-v12];
  v13 = v6[12];
  v85 = type metadata accessor for ShadowListDataSource(0, v7, v13, v14);
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v15);
  v83 = &v71[-v16];
  v75 = v6[11];
  v17 = type metadata accessor for Binding();
  v86 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86, v19);
  v21 = &v71[-v20];
  v81 = v13;
  v22 = *(_QWORD *)(v13 + 8);
  v87 = v7;
  v24 = (int *)type metadata accessor for ListCoreBatchUpdates(0, v7, v22, v23);
  v25 = *((_QWORD *)v24 - 1);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = &v71[-v27];
  v80 = v6[31];
  v29 = v6;
  if ((*((_BYTE *)v4 + v80) & 1) == 0)
  {
    v30 = (_QWORD *)((char *)v4 + v6[17]);
    swift_beginAccess();
    v31 = *v30;
    *v30 = a3;
    outlined consume of Transaction?(v31);
    v29 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
    swift_retain();
  }
  v32 = (char *)v4 + v29[24];
  swift_beginAccess();
  v91 = *(void (**)(_BYTE *, char *, int *))(v25 + 16);
  v91(v28, v32, v24);
  v34 = ListCoreBatchUpdates.isEmpty.getter(v24, v33);
  v90 = *(void (**)(_BYTE *, int *))(v25 + 8);
  v90(v28, v24);
  v35 = (uint64_t *)MEMORY[0x1E0DEEDD8];
  if ((v34 & 1) != 0)
  {
    v36 = *v4;
    v37 = *MEMORY[0x1E0DEEDD8];
    if ((*((_BYTE *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xD8)) & 1) == 0)
    {
      v74 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xB0);
      v38 = *((_BYTE *)v4 + v74);
      v73 = v32;
      if ((v38 & 1) != 0)
      {
        v72 = 0;
      }
      else
      {
        UITableViewListCoordinator.resolvedEditMode.getter(v94);
        if (v94[0] == 1)
        {
          v72 = 0;
          v36 = *v4;
          v37 = *v35;
        }
        else
        {
          v72 = objc_msgSend(v89, sel_isEditing);
          UITableViewListCoordinator.resolvedEditMode.getter(v94);
          v36 = *v4;
          v37 = *v35;
          if (v72 == (v94[0] == 0))
            v39 = 1;
          else
            v39 = *((unsigned __int8 *)v4 + *(_QWORD *)((v37 & v36) + 0xE8));
          v72 = v39;
        }
      }
      v40 = (char *)v4 + *(_QWORD *)((v37 & v36) + 0x78);
      swift_beginAccess();
      v41 = v86;
      (*(void (**)(_BYTE *, char *, uint64_t))(v18 + 16))(v21, v40, v86);
      v42 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v21, 1, v17) != 1;
      (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v21, v41);
      v43 = v89;
      objc_msgSend(v89, sel_setAllowsMultipleSelectionDuringEditing_, v42);
      if ((*((_BYTE *)v4 + v74) & 1) == 0)
      {
        v45 = (char *)v4 + *(_QWORD *)((*v35 & *v4) + 0x70);
        swift_beginAccess();
        v46 = (uint64_t)v83;
        v47 = v85;
        (*(void (**)(_BYTE *, char *, uint64_t))(v84 + 16))(v83, v45, v85);
        swift_beginAccess();
        v48 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v47);
        ListCoreBatchUpdates.formUpdates<A>(from:to:)(v46, v88, (uint64_t)v24, v47, v48);
      }
      UITableViewListCoordinator.resolvedEditMode.getter(v93);
      v44 = v73;
      if (v93[0])
      {
        specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(v43);
        objc_msgSend(v43, sel_setEditing_animated_, 1, 0);
      }
      if ((UITableViewListCoordinator.isAnimated.getter() & 1) != 0)
        v49 = 1;
      else
        v49 = static SemanticFeature.isEnabled.getter() ^ 1;
      LODWORD(v86) = v49;
      *((_BYTE *)v4 + *(_QWORD *)((*v35 & *v4) + 0xE0)) = 0;
      if (objc_msgSend(v43, sel_style))
        v50 = 0;
      else
        v50 = 100;
      v51 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v35 & *v4) + 0x88));
      swift_beginAccess();
      if (*v51 == 1)
      {
        swift_endAccess();
      }
      else
      {
        Transaction.subscript.getter();
        v52 = v92;
        swift_endAccess();
        if ((v52 & 1) != 0)
        {
          v53 = 0;
LABEL_28:
          v91(v28, v44, v24);
          v55 = ListCoreBatchUpdates.isEmpty.getter(v24, v54);
          v90(v28, v24);
          v56 = v82;
          v57 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v82 + 16);
          if ((v55 & 1) != 0)
          {
            v58 = (uint64_t)v76;
            v59 = v87;
            v57(v76, v88, v87);
            ShadowListDataSource.init(_:)(v58, v59);
          }
          v60 = v77;
          v61 = v87;
          v57(v77, v88, v87);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v60, 0, 1, v61);
          v62 = (char *)v4 + *(_QWORD *)((*v35 & *v4) + 0xC8);
          swift_beginAccess();
          (*(void (**)(char *, _BYTE *, uint64_t))(v78 + 40))(v62, v60, v79);
          swift_endAccess();
          v91(v28, v44, v24);
          LOBYTE(v62) = ListCoreBatchUpdates.isEmpty.getter(v24, v63);
          v90(v28, v24);
          v64 = *v4;
          v65 = *v35;
          if (((v62 & 1) == 0 || (*((_BYTE *)v4 + *(_QWORD *)((v65 & v64) + 0xD0)) & 1) == 0)
            && (*((_BYTE *)v4 + v74) & 1) == 0)
          {
            *((_BYTE *)v4 + *(_QWORD *)((v65 & v64) + 0xD0)) = 1;
            v66 = swift_allocObject();
            *(_BYTE *)(v66 + 16) = v86 & 1;
            *(_QWORD *)(v66 + 24) = v4;
            *(_BYTE *)(v66 + 32) = v72;
            v67 = v89;
            *(_QWORD *)(v66 + 40) = v89;
            *(_QWORD *)(v66 + 48) = v50;
            *(_QWORD *)(v66 + 56) = v53;
            v68 = v67;
            v69 = v4;
            static Update.enqueueAction(_:)();
            swift_release();
            v64 = *v69;
            v65 = *v35;
          }
          *((_BYTE *)v4 + *(_QWORD *)((v65 & v64) + 0xB0)) = 0;
          return $defer #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(v4);
        }
      }
      v53 = 100;
      goto LABEL_28;
    }
  }
  return $defer #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(v4);
}

uint64_t closure #1 in UITableViewListCoordinator.dragAndDropController.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v6 = v5[10];
  v7 = v5[12];
  v8 = type metadata accessor for ShadowListDataSource(0, v6, v7, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v18 - v11;
  type metadata accessor for TableViewListDragAndDropController(0, v6, v7, v13);
  v14 = (char *)a1 + v5[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = specialized CollectionViewListDragAndDropController.__allocating_init(dataSource:dispatchUpdate:)(v12, partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter, v15);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v16;
}

uint64_t UITableViewListCoordinator.isAnimated.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88));
  swift_beginAccess();
  if (*v2 == 1)
  {
    swift_endAccess();
  }
  else
  {
    v3 = Transaction.animation.getter();
    swift_endAccess();
    if (v3)
    {
      swift_release();
      return 1;
    }
  }
  return *((unsigned __int8 *)v0 + *(_QWORD *)((*v1 & *v0) + 0xE0));
}

_QWORD *UITableViewListCoordinator.resolvedEditMode.getter@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v3 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80) + 8);
  if (v3)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    result = MEMORY[0x18D75B9C8](&v5);
    LOBYTE(v3) = v5;
  }
  *a1 = v3;
  return result;
}

void UITableViewListCoordinator.isAnimatingInitialLayout.didset()
{
  _QWORD *v0;
  uint64_t *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8)) & 1) == 0)
  {
    v1 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100));
    v2 = (void (*)(uint64_t))*v1;
    if (*v1)
    {
      v3 = swift_retain();
      v2(v3);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v2);
      v4 = *v1;
    }
    else
    {
      v4 = 0;
    }
    *v1 = 0;
    v1[1] = 0;
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  }
}

uint64_t closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v10[6] = a1;
  swift_retain();
  onMainThread(do:)();
  return swift_release();
}

void closure #1 in closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2;
    *((_BYTE *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xF8)) = 0;
    UITableViewListCoordinator.isAnimatingInitialLayout.didset();

  }
}

uint64_t UITableViewListCoordinator.commitUpdates()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  *((_BYTE *)v0 + *(_QWORD *)(v1 + 0xD8)) = 1;
  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 80);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v3 + 48) = v2;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

void closure #1 in UITableViewListCoordinator.commitUpdates()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = a1 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v7)
  {
    swift_beginAccess();
    type metadata accessor for ShadowListDataSource(0, a2, a4, v9);
    ShadowListDataSource.commitUpdates()();
  }
  swift_beginAccess();
  v10 = (_QWORD *)MEMORY[0x18D760234](v6);
  if (v10)
  {
    *((_BYTE *)v10 + *(_QWORD *)((*v8 & *v10) + 0xD8)) = 0;

  }
}

_QWORD *$defer #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*((_BYTE *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0xF8)) & 1) == 0)
  {
    v1 = (_QWORD *)((char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x88));
    swift_beginAccess();
    v2 = *v1;
    *v1 = 1;
    return (_QWORD *)outlined consume of Transaction?(v2);
  }
  return result;
}

uint64_t closure #1 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x18D760234](v3);
  if (result)
    UITableViewListCoordinator.updateListContents(_:)(a2, v5, v6, v7);
  return result;
}

void UITableViewListCoordinator.updateListContents(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  Class isa;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  char *v94;
  uint64_t v95;
  Class v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Class v102;
  char *v103;
  uint64_t (*v104)(uint64_t);
  char v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  char *v141;
  id v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  id v147;
  uint64_t v148;
  void (*v149)(char *, char *, uint64_t);
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, unint64_t, uint64_t);
  void (*v153)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD v160[2];
  char v161;

  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v8 = v7[10];
  v9 = v7[12];
  v131 = type metadata accessor for ShadowSectionCollection(0, v8, *(_QWORD *)(v9 + 8), a4);
  v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x1E0C80A78](v131, v10);
  v129 = (char *)&v113 - v11;
  type metadata accessor for (IndexPath?, IndexPath?)();
  v139 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v150 = (uint64_t)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = v7;
  v15 = v7[11];
  v117 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v16, v15);
  v120 = (char *)&v113 - v17;
  v121 = v18;
  v126 = type metadata accessor for Binding();
  v125 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126, v19);
  v116 = (char *)&v113 - v20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = type metadata accessor for Optional();
  v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  v124 = v22;
  v123 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v127 = (uint64_t)&v113 - v25;
  v140 = AssociatedTypeWitness;
  v128 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v122 = (char *)&v113 - v28;
  v157 = v9;
  v158 = v8;
  v30 = type metadata accessor for ShadowListDataSource(0, v8, v9, v29);
  v145 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v113 - v32;
  v34 = type metadata accessor for IndexPath();
  v155 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v113 - v40;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v42, v23);
  MEMORY[0x1E0C80A78](v43, v44);
  v132 = (uint64_t)&v113 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46, v47);
  v146 = (char *)&v113 - v48;
  MEMORY[0x1E0C80A78](v49, v50);
  v143 = (char *)&v113 - v51;
  UITableViewListCoordinator.clearDataSourceUpdates()();
  *((_BYTE *)v4 + *(_QWORD *)((*v6 & *v4) + 0xD0)) = 0;
  v52 = objc_msgSend(a1, sel_indexPathsForVisibleRows);
  v154 = v4;
  v156 = a1;
  if (v52)
  {
    v53 = v52;
    v151 = v34;
    v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v55 = *(_QWORD *)(v54 + 16);
    v119 = v54;
    if (v55)
    {
      v56 = v54;
      v115 = v37;
      v57 = v154;
      v58 = *v6 & *v154;
      v59 = *(_QWORD *)(v58 + 0x78);
      v60 = (char *)v57 + *(_QWORD *)((*v6 & *v57) + 0x70);
      v133 = (char *)v57 + *(_QWORD *)((*v6 & *v57) + 0x80);
      v61 = (char *)v154 + v59;
      v62 = (uint64_t)v154 + *(_QWORD *)(v58 + 184);
      v63 = (_QWORD *)v155;
      v64 = v56 + ((*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
      v141 = v60;
      swift_beginAccess();
      v114 = v61;
      swift_beginAccess();
      v134 = v62;
      swift_beginAccess();
      v148 = v63[9];
      v152 = (void (*)(char *, unint64_t, uint64_t))v63[2];
      v135 = MEMORY[0x1E0DEE9C0] + 8;
      v65 = v143;
      v66 = v151;
      v144 = v41;
      v152(v143, v64, v151);
      while (1)
      {
        v153 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v63[7];
        v153(v65, 0, 1, v66);
        v67 = (unsigned int (*)(char *, uint64_t, uint64_t))v63[6];
        if (v67(v65, 1, v66) == 1)
          goto LABEL_34;
        v149 = (void (*)(char *, char *, uint64_t))v63[4];
        v149(v41, v65, v66);
        v68 = (uint64_t)v41;
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v70 = objc_msgSend(v156, sel_cellForRowAtIndexPath_, isa);

        if (!v70)
          goto LABEL_5;
        swift_getAssociatedTypeWitness();
        v71 = swift_dynamicCastUnknownClass();
        if (!v71)
        {

LABEL_5:
          v63 = (_QWORD *)v155;
          v66 = v151;
          (*(void (**)(char *, uint64_t))(v155 + 8))(v41, v151);
          goto LABEL_6;
        }
        v147 = v70;
        v72 = v145;
        v73 = (void *)v71;
        v138 = *(uint64_t (**)(char *, char *, uint64_t))(v145 + 16);
        v74 = v138(v33, v141, v30);
        v76 = MEMORY[0x1E0C80A78](v74, v75);
        *(&v113 - 2) = (uint64_t)v154;
        *(&v113 - 1) = (uint64_t)v73;
        v137 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v30, v76);
        ListCoreDataSource.visitContent<A>(atRow:visitor:)(v68, (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.updateListContents(_:), (uint64_t)(&v113 - 4), v30, v135, v137, (uint64_t)v160);
        v136 = *(void (**)(char *, uint64_t))(v72 + 8);
        v136(v33, v30);
        type metadata accessor for ListTableViewCell();
        v142 = v73;
        v77 = swift_dynamicCastClass();
        v78 = v156;
        if (v77)
        {
          v79 = v77;
          v80 = v147;
          UITableViewListCoordinator.updateCell(_:in:at:isVisible:)(v79, v78, v68, 1);

        }
        v81 = objc_msgSend(v78, sel_isEditing);
        v82 = v140;
        if (v81)
        {
          v83 = *((_QWORD *)v133 + 1);
          if (!v83
            || (v84 = v133[16],
                v160[0] = *(_QWORD *)v133,
                v160[1] = v83,
                v161 = v84,
                type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]), MEMORY[0x18D75B9C8](&v159), v159 != 1))
          {
            v138(v33, v141, v30);
            v85 = v127;
            ListCoreDataSource.selectionValue(forRowAt:)((uint64_t)v144, v30, v137, v127);
            v86 = v85;
            v136(v33, v30);
            v87 = v128;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v86, 1, v82) == 1)
            {
              (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v86, v124);
            }
            else
            {
              v88 = v122;
              (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v122, v86, v82);
              if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v114, 1, v126))
              {
                v89 = v125;
                v90 = v116;
                v91 = v126;
                (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v116, v114, v126);
                MEMORY[0x18D75B9C8](v91);
                v92 = *(void (**)(char *, uint64_t))(v89 + 8);
                v93 = v91;
                v87 = v128;
                v82 = v140;
                v92(v90, v93);
                v94 = v120;
                LODWORD(v138) = (*(uint64_t (**)(char *, uint64_t))(v118[13] + 56))(v88, v121);
                (*(void (**)(char *, uint64_t))(v117 + 8))(v94, v121);
                if ((v138 & 1) != 0)
                {
                  v95 = v87;
                  v41 = v144;
                  v96 = IndexPath._bridgeToObjectiveC()().super.isa;
                  objc_msgSend(v156, sel_selectRowAtIndexPath_animated_scrollPosition_, v96, UITableViewListCoordinator.isAnimated.getter() & 1, 0);

                  (*(void (**)(char *, uint64_t))(v95 + 8))(v88, v82);
                  v63 = (_QWORD *)v155;
                  v66 = v151;
                  (*(void (**)(char *, uint64_t))(v155 + 8))(v41, v151);
                  v65 = v143;
                  goto LABEL_6;
                }
              }
              (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v82);
            }
          }
        }
        v97 = (uint64_t)v146;
        v41 = v144;
        v98 = v151;
        v152(v146, (unint64_t)v144, v151);
        v153((char *)v97, 0, 1, v98);
        v99 = v150;
        v100 = v150 + *(int *)(v139 + 48);
        outlined init with copy of IndexPath?(v97, v150);
        outlined init with copy of IndexPath?(v134, v100);
        if (v67((char *)v99, 1, v98) == 1)
        {
          outlined destroy of TaskPriority?(v97, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
          v66 = v98;
          if (v67((char *)v100, 1, v98) != 1)
            goto LABEL_27;
          outlined destroy of TaskPriority?(v150, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
          v65 = v143;
          (*(void (**)(char *, uint64_t))(v155 + 8))(v41, v66);
        }
        else
        {
          v101 = v132;
          outlined init with copy of IndexPath?(v150, v132);
          v66 = v98;
          if (v67((char *)v100, 1, v98) == 1)
          {
            outlined destroy of TaskPriority?((uint64_t)v146, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
            (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v101, v98);
LABEL_27:
            outlined destroy of (IndexPath?, IndexPath?)(v150);
            v65 = v143;
LABEL_28:
            v102 = IndexPath._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v156, sel_deselectRowAtIndexPath_animated_, v102, 0);

            objc_msgSend(v142, sel_setSelected_animated_, 0, 0);
            v63 = (_QWORD *)v155;
            (*(void (**)(char *, uint64_t))(v155 + 8))(v41, v66);
            goto LABEL_6;
          }
          v103 = v115;
          v149(v115, (char *)v100, v98);
          v104 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
          v105 = dispatch thunk of static Equatable.== infix(_:_:)();
          v106 = v101;
          v107 = *(void (**)(char *, uint64_t))(v155 + 8);
          v108 = v103;
          v41 = v144;
          v107(v108, v66);
          outlined destroy of TaskPriority?((uint64_t)v146, &lazy cache variable for type metadata for IndexPath?, v104);
          v107((char *)v106, v151);
          v66 = v151;
          outlined destroy of TaskPriority?(v150, &lazy cache variable for type metadata for IndexPath?, v104);
          v65 = v143;
          if ((v105 & 1) == 0)
            goto LABEL_28;
          v107(v41, v66);
        }

        v63 = (_QWORD *)v155;
LABEL_6:
        v64 += v148;
        if (!--v55)
          goto LABEL_33;
        v152(v65, v64, v66);
      }
    }
    v153 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v155 + 56);
    v65 = v143;
    v66 = v151;
LABEL_33:
    v153(v65, 1, 1, v66);
LABEL_34:
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  }
  v109 = (char *)v154 + *(_QWORD *)((*v6 & *v154) + 0x70);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v33, v109, v30);
  ShadowListDataSource.sectionIDs.getter(v30, v110, v111, v112);
}

void performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(_QWORD *a1, int a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BOOL8 v27;
  uint64_t isEscapingClosureAtFileLocation;
  char v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  id v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, void *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t aBlock;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;

  v71 = a5;
  v72 = a6;
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v12 = v11[10];
  v66 = type metadata accessor for Optional();
  v64 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v13);
  v65 = (char *)&v60 - v14;
  v69 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v63 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v68 = (char *)&v60 - v20;
  v62 = v11[12];
  v22 = (int *)type metadata accessor for ListCoreBatchUpdates(0, v12, *(_QWORD *)(v62 + 8), v21);
  v23 = *((_QWORD *)v22 - 1);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v60 - v25;
  v61 = v11;
  *((_BYTE *)a1 + v11[26]) = 1;
  LODWORD(v70) = a2;
  if ((a2 & 1) != 0)
  {
    if (*((_BYTE *)a1 + *(_QWORD *)((*v10 & *a1) + 0xE8)) == 1)
    {
      UITableViewListCoordinator.resolvedEditMode.getter(&aBlock);
      if ((_BYTE)aBlock)
      {
        specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a3);
        objc_msgSend(a3, sel_setEditing_animated_, 0, a4 & 1);
      }
    }
    UITableViewListCoordinator.resolvedEditMode.getter(&aBlock);
    v27 = (_BYTE)aBlock != 0;
    specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a3);
    objc_msgSend(a3, sel_setEditing_animated_, v27, a4 & 1);
  }
  v67 = v12;
  isEscapingClosureAtFileLocation = swift_allocObject();
  *(_QWORD *)(isEscapingClosureAtFileLocation + 16) = a1;
  *(_BYTE *)(isEscapingClosureAtFileLocation + 24) = a4 & 1;
  v29 = (char)v70;
  *(_BYTE *)(isEscapingClosureAtFileLocation + 25) = v70 & 1;
  v30 = v71;
  *(_QWORD *)(isEscapingClosureAtFileLocation + 32) = a3;
  *(_QWORD *)(isEscapingClosureAtFileLocation + 40) = v30;
  *(_QWORD *)(isEscapingClosureAtFileLocation + 48) = v72;
  v31 = (char *)a1 + *(_QWORD *)((*v10 & *a1) + 0xC0);
  swift_beginAccess();
  (*(void (**)(char *, char *, int *))(v23 + 16))(v26, v31, v22);
  v32 = a1;
  v33 = a3;
  v35 = ListCoreBatchUpdates.isEmpty.getter(v22, v34);
  (*(void (**)(char *, int *))(v23 + 8))(v26, v22);
  if ((v35 & 1) == 0)
  {
    v36 = (char *)v32 + *(_QWORD *)((*v10 & *v32) + 0xC8);
    swift_beginAccess();
    v37 = v64;
    v38 = v65;
    v39 = v66;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v65, v36, v66);
    v40 = v69;
    v41 = v67;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v69 + 48))(v38, 1, v67) != 1)
    {
LABEL_13:
      v70 = *(void (**)(char *, void *, uint64_t))(v40 + 32);
      v46 = v68;
      v70(v68, v38, v41);
      v47 = v63;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v63, v46, v41);
      v48 = (*(unsigned __int8 *)(v40 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      v49 = (v60 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
      v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF8;
      v51 = (char *)swift_allocObject();
      *((_QWORD *)v51 + 2) = v41;
      v52 = v61;
      v53 = v62;
      *((_QWORD *)v51 + 3) = v61[11];
      *((_QWORD *)v51 + 4) = v53;
      *((_QWORD *)v51 + 5) = v52[13];
      *((_QWORD *)v51 + 6) = v32;
      v70(&v51[v48], v47, v41);
      *(_QWORD *)&v51[v49] = v33;
      *(_QWORD *)&v51[v50] = v71;
      *(_QWORD *)&v51[(v50 + 15) & 0xFFFFFFFFFFFFFFF8] = v72;
      v54 = swift_allocObject();
      *(_QWORD *)(v54 + 16) = partial apply for closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
      *(_QWORD *)(v54 + 24) = v51;
      v77 = (uint64_t (*)(uint64_t))thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
      v78 = v54;
      v55 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v74 = 1107296256;
      v75 = thunk for @escaping @callee_guaranteed () -> ();
      v76 = &block_descriptor_119;
      v56 = _Block_copy(&aBlock);
      v57 = v32;
      v58 = v33;
      swift_release();
      v77 = partial apply for closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
      v78 = isEscapingClosureAtFileLocation;
      aBlock = v55;
      v74 = 1107296256;
      v75 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      v76 = &block_descriptor_122;
      v59 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v58, sel_performBatchUpdates_completion_, v56, v59);
      _Block_release(v59);
      _Block_release(v56);
      swift_release();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v41);
      swift_release();
      return;
    }
    (*(void (**)(void *, uint64_t))(v37 + 8))(v38, v39);
    v29 = (char)v70;
  }
  if ((v29 & 1) != 0)
  {
    v77 = partial apply for closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
    v78 = isEscapingClosureAtFileLocation;
    aBlock = MEMORY[0x1E0C809B0];
    v74 = 1107296256;
    v75 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v76 = &block_descriptor_109;
    v42 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v33, sel_performBatchUpdates_completion_, 0, v42);
    swift_release();
    _Block_release(v42);
    return;
  }
  v43 = (void *)objc_opt_self();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = v33;
  *(_QWORD *)(v41 + 24) = v32;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = partial apply for closure #3 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
  *(_QWORD *)(v40 + 24) = v41;
  v77 = (uint64_t (*)(uint64_t))thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  v78 = v40;
  aBlock = MEMORY[0x1E0C809B0];
  v74 = 1107296256;
  v75 = thunk for @escaping @callee_guaranteed () -> ();
  v76 = &block_descriptor_106;
  v38 = _Block_copy(&aBlock);
  v44 = v32;
  v45 = v33;
  swift_retain();
  swift_release();
  objc_msgSend(v43, sel_performWithoutAnimation_, v38);
  swift_release();
  _Block_release(v38);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  char v10;
  uint64_t *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v10 = a4;
  v13 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v14 = (int *)type metadata accessor for ListCoreBatchUpdates(0, v13[10], *(_QWORD *)(v13[12] + 8), a4);
  v15 = *((_QWORD *)v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v27 - v17;
  v19 = (char *)a2 + v13[24];
  swift_beginAccess();
  (*(void (**)(char *, char *, int *))(v15 + 16))(v18, v19, v14);
  LOBYTE(v19) = ListCoreBatchUpdates.isEmpty.getter(v14, v20);
  v21 = (*(uint64_t (**)(char *, int *))(v15 + 8))(v18, v14);
  if ((v19 & 1) != 0)
  {
    UITableViewListCoordinator.enqueueLayoutInvalidationIfNeeded(_:)(a5);
    UITableViewListCoordinator.updateListContents(_:)(a5, v23, v24, v25);
  }
  MEMORY[0x1E0C80A78](v21, v22);
  *((_BYTE *)&v27 - 48) = a3 & 1;
  *(&v27 - 5) = (uint64_t)a2;
  *((_BYTE *)&v27 - 32) = v10 & 1;
  *(&v27 - 3) = (uint64_t)a5;
  *(&v27 - 2) = a6;
  *(&v27 - 1) = a7;
  return static Update.ensure<A>(_:)();
}

uint64_t closure #1 in closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(char a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  char isEscapingClosureAtFileLocation;
  _QWORD v19[6];

  if ((a1 & 1) != 0)
    return performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(a2, a3 & 1, a4, 1, a5, a6);
  v12 = (void *)objc_opt_self();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_BYTE *)(v13 + 24) = a3 & 1;
  *(_QWORD *)(v13 + 32) = a4;
  *(_BYTE *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 48) = a5;
  *(_QWORD *)(v13 + 56) = a6;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
  *(_QWORD *)(v14 + 24) = v13;
  v19[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  v19[5] = v14;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed () -> ();
  v19[3] = &block_descriptor_133;
  v15 = _Block_copy(v19);
  v16 = a2;
  v17 = a4;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_performWithoutAnimation_, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void UITableViewListCoordinator.enqueueLayoutInvalidationIfNeeded(_:)(void *a1)
{
  _QWORD *v1;
  char *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v5;
  id v6;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x98);
  if (v2[9] != 1 || *(_QWORD *)v2 | v2[8])
  {
    v3 = specialized UIView.firstAncestorWhere(_:)(a1);
    if (v3)
    {
      v6 = v3;
      ObjectType = swift_getObjectType();
      v5 = swift_conformsToProtocol2();
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

void closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v22[2] = a4;
  v22[3] = a5;
  v28 = a3;
  v25 = a2;
  v5 = *MEMORY[0x1E0DEEDD8] & *a1;
  v6 = type metadata accessor for IndexPath();
  v26 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v27 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v15 = type metadata accessor for IndexSet();
  MEMORY[0x1E0C80A78](v15, v16);
  swift_beginAccess();
  v17 = *(_QWORD *)(v5 + 80);
  v23 = *(_QWORD *)(v5 + 96);
  v24 = v17;
  v19 = type metadata accessor for ShadowListDataSource(0, v17, v23, v18);
  ShadowListDataSource.updateBase(to:)(v25, v19, v20, v21);
}

uint64_t UITableViewListCoordinator.clearDataSourceUpdates()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  v3 = *(_QWORD *)(v2 + 0x50);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - v7;
  swift_beginAccess();
  type metadata accessor for ListCoreBatchUpdates(0, v3, *(_QWORD *)(*(_QWORD *)(v2 + 96) + 8), v9);
  ListCoreBatchUpdates.resetAll()();
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v8, 1, 1, v3);
  v10 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xC8);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v10, v8, v4);
  return swift_endAccess();
}

void closure #2 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(char a1, _QWORD *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  _QWORD v18[6];

  if ((a1 & 1) != 0)
  {
    performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(a2, a3 & 1, a4, 1, a5, a6);
  }
  else
  {
    v11 = (void *)objc_opt_self();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a2;
    *(_BYTE *)(v12 + 24) = a3 & 1;
    *(_QWORD *)(v12 + 32) = a4;
    *(_BYTE *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = a5;
    *(_QWORD *)(v12 + 56) = a6;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = partial apply for performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
    *(_QWORD *)(v13 + 24) = v12;
    v18[4] = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    v18[5] = v13;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1107296256;
    v18[2] = thunk for @escaping @callee_guaranteed () -> ();
    v18[3] = &block_descriptor_93;
    v14 = _Block_copy(v18);
    v15 = a2;
    v16 = a4;
    swift_retain();
    swift_release();
    objc_msgSend(v11, sel_performWithoutAnimation_, v14);
    _Block_release(v14);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

uint64_t UITableViewListCoordinator.updateCell(_:in:at:isVisible:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;

  if ((a4 & 1) != 0)
    ListTableViewCell.updateSeparatorsFromConfiguration()();
  v7 = a1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration;
  v8 = *((_BYTE *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x90));
  swift_beginAccess();
  v9 = type metadata accessor for CellConfiguration();
  v10 = *(int *)(v9 + 20);
  v11 = *(_BYTE *)(v7 + v10);
  *(_BYTE *)(v7 + v10) = v8;
  specialized CellConfiguration.updateValues<A>(pre:post:)(v11, v8);
  swift_endAccess();
  v12 = OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host;
  v13 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  if (v13)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v14 = v13;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  *(_QWORD *)(v7 + *(int *)(v9 + 32)) = objc_msgSend(a2, sel_style);
  v15 = *(void **)(a1 + v12);
  if (v15)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v16 = v15;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_delegate + 8) = &protocol witness table for UITableViewListCoordinator<A, B>;
  return swift_unknownObjectWeakAssign();
}

void closure #1 in UITableViewListCoordinator.updateListContents(_:)(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v9 = type metadata accessor for ShadowListDataSource(0, v8[10], v8[12], a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v23 - v12;
  v14 = (char *)a2 + v8[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v15 = *v7 & *a2;
  v16 = *(_QWORD *)(v15 + 0xF8);
  if ((*((_BYTE *)a2 + v16) & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    v18 = (_QWORD *)((char *)a2 + *(_QWORD *)(v15 + 136));
    swift_beginAccess();
    v17 = *v18;
    outlined copy of Transaction?(v17);
  }
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)a3, v17, a1, v9);
  outlined consume of Transaction?(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v19 = objc_msgSend(a3, sel_layer);
  v20 = 0.0;
  if (*((_BYTE *)a2 + v16) == 1)
  {
    v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9, 0.0);
    v23[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for _RowVisitationContext(0, v9, v21, v22) + 40));
    ViewTraitCollection.zIndex.getter();
  }
  objc_msgSend(v19, sel_setZPosition_, v20);

}

void @objc UITableViewListCoordinator.numberOfSections(in:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a3;
  v5 = a1;
  specialized UITableViewListCoordinator.numberOfSections(in:)((uint64_t)v5, v6, v7, v8);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:numberOfRowsInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a3;
  v7 = a1;
  v11 = specialized UITableViewListCoordinator.tableView(_:numberOfRowsInSection:)(a4, v8, v9, v10);

  return v11;
}

uint64_t closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  BOOL v24;
  void (*v25)(char *, uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v28 = a5;
  v10 = type metadata accessor for ShadowListDataSource(255, a2, a4, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  v13 = type metadata accessor for _RowVisitationContext(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v27 - v20;
  LOBYTE(v10) = _RowVisitationContext.canDelete.getter(v22);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23(v21, a1, v13);
  v24 = (v10 & 1) != 0 || _RowVisitationContext.canMove.getter();
  v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  v25(v21, v13);
  v23(v17, a1, v13);
  if (v24)
  {
    result = ((uint64_t (*)(char *, uint64_t))v25)(v17, v13);
  }
  else
  {
    implicit closure #3 in implicit closure #2 in closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)((uint64_t)v17, a2, v27, a4, v28);
    v25(v17, v13);
    result = swift_release();
  }
  *a6 = 1;
  return result;
}

uint64_t (*implicit closure #3 in implicit closure #2 in closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v22;

  v10 = type metadata accessor for ShadowListDataSource(255, a2, a4, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  v13 = type metadata accessor for _RowVisitationContext(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v22 - v17, a1, v13, v16);
  v19 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = a2;
  *((_QWORD *)v20 + 3) = a3;
  *((_QWORD *)v20 + 4) = a4;
  *((_QWORD *)v20 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v20[v19], v18, v13);
  return partial apply for implicit closure #4 in implicit closure #3 in implicit closure #2 in closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:);
}

uint64_t implicit closure #4 in implicit closure #3 in implicit closure #2 in closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for ShadowListDataSource(255, a2, a4, a3);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v10 = type metadata accessor for _RowVisitationContext(0, v7, v8, v9);
  return _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a1, v10, a5);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UITableViewListCoordinator.tableView(_:canEditRowAt:));
}

BOOL closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)@<W0>(uint64_t a1@<X1>, uint64_t a2@<X3>, _BOOL8 *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;

  v4 = type metadata accessor for ShadowListDataSource(255, a1, a2, a2);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v4);
  v7 = type metadata accessor for _RowVisitationContext(0, v4, v5, v6);
  result = _RowVisitationContext.canDelete.getter(v7);
  *a3 = result;
  return result;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  v15 = specialized UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)((uint64_t)v9, v12, v13, v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v15;
}

void UITableViewListCoordinator.tableView(_:commit:forRowAt:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  id v25;
  uint64_t aBlock;
  uint64_t v27;
  void *v28;
  void *v29;
  void (*v30)();
  uint64_t v31;

  v7 = *v3;
  v8 = *MEMORY[0x1E0DEEDD8];
  v9 = type metadata accessor for IndexPath();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = MEMORY[0x1E0C80A78](v9, v12);
  if (a2 == 1)
  {
    v14 = v8 & v7;
    *((_BYTE *)v3 + *(_QWORD *)((v8 & v7) + 0xE0)) = 1;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)&aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v9, v13);
    v15 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v14 + 80);
    *(_OWORD *)(v16 + 24) = *(_OWORD *)(v14 + 88);
    *(_QWORD *)(v16 + 40) = *(_QWORD *)(v14 + 104);
    *(_QWORD *)(v16 + 48) = v3;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, (char *)&aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
    *(_QWORD *)(v16 + ((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = partial apply for closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:);
    *(_QWORD *)(v17 + 24) = v16;
    v30 = (void (*)())thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    v31 = v17;
    v18 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v27 = 1107296256;
    v28 = thunk for @escaping @callee_guaranteed () -> ();
    v29 = &block_descriptor_67;
    v19 = _Block_copy(&aBlock);
    v20 = v3;
    v21 = a1;
    swift_release();
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(v22 + 24) = v21;
    v30 = partial apply for closure #2 in UITableViewListCoordinator.tableView(_:commit:forRowAt:);
    v31 = v22;
    aBlock = v18;
    v27 = 1107296256;
    v28 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v29 = &block_descriptor_73;
    v23 = _Block_copy(&aBlock);
    v24 = v20;
    v25 = v21;
    swift_release();
    objc_msgSend(v25, sel_performBatchUpdates_completion_, v19, v23);
    _Block_release(v23);
    _Block_release(v19);
    UITableViewListCoordinator.commitUpdates()();
    swift_release();
  }
}

void closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Class isa;

  v5 = *MEMORY[0x1E0DEEDD8] & *a1;
  swift_beginAccess();
  v7 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 96), v6);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  ListCoreDataSource.deleteCell(forRowAt:)(a2, v7, v8);
  swift_endAccess();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = type metadata accessor for IndexPath();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v12 + v11, a2, v9);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_deleteRowsAtIndexPaths_withRowAnimation_, isa, 100);

}

uint64_t @objc UITableViewListCoordinator.tableView(_:commit:forRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v15;

  v7 = type metadata accessor for IndexPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = a3;
  v13 = a1;
  UITableViewListCoordinator.tableView(_:commit:forRowAt:)(v12, a4, (uint64_t)v11);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:canMoveRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UITableViewListCoordinator.tableView(_:canMoveRowAt:));
}

uint64_t UITableViewListCoordinator.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v8 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v9 = type metadata accessor for ShadowListDataSource(0, v8[10], v8[12], a3);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v19 - v12;
  v14 = (char *)v4 + v8[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  LOBYTE(v14) = ListCoreDataSource.canMoveCell(fromRowAt:to:)(a1, a2, v9, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v16 = type metadata accessor for IndexPath();
  if ((v14 & 1) != 0)
    v17 = a2;
  else
    v17 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a4, v17, v16);
}

Class @objc UITableViewListCoordinator.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  Class isa;
  uint64_t v24;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v24 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v24 - v16;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = a3;
  v19 = a1;
  UITableViewListCoordinator.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:)((uint64_t)v13, (uint64_t)v9, v20, (uint64_t)v17);

  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v9, v5);
  v21(v13, v5);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v21(v17, v5);
  return isa;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:moveRowAt:to:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v18 - v12;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = a3;
  v15 = a1;
  specialized UITableViewListCoordinator.tableView(_:moveRowAt:to:)((uint64_t)v13, (uint64_t)v9);

  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, v5);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(a1, a2, a3, a4, (void (*)(char *))specialized UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didEndEditingRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v16 - v9;
  if (a4)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = type metadata accessor for IndexPath();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  }
  v13 = a3;
  v14 = a1;
  specialized UITableViewListCoordinator.tableView(_:didEndEditingRowAt:)();

  return outlined destroy of TaskPriority?((uint64_t)v10, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
}

void closure #1 in UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;

  v5 = *(double *)(a2 + 8);
  v6 = a3 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  if (v7)
  {
    v8 = (void *)v7;
    swift_beginAccess();
    v9 = MEMORY[0x18D760234](a4 + 16);
    if (v9)
    {
      v10 = (void *)v9;
      if ((objc_msgSend(v8, sel_isEditing) & 1) != 0)
      {
        v11 = v8;
      }
      else
      {
        objc_msgSend(v10, sel_bounds);
        if (v5 == v12)
        {
          v11 = v10;
          v10 = v8;
        }
        else
        {
          type metadata accessor for UpdateCoalescingTableView();
          v13 = swift_dynamicCastClassUnconditional();
          v14 = (_BYTE *)(v13 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate);
          if (*(uint64_t *)(v13 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate + 8) >= 2)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          v15 = (void *)v13;
          v11 = v8;
          objc_msgSend(v15, sel_setNeedsLayout);
          *v14 = 1;

          v10 = v11;
        }
      }

      v8 = v10;
    }

  }
}

void @objc UITableViewListCoordinator.tableView(_:willDisplayHeaderView:forSection:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized UITableViewListCoordinator.tableView(_:willDisplayHeaderView:forSection:)(v6, v7);

}

void @objc UITableViewListCoordinator.tableView(_:didEndDisplayingHeaderView:forSection:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;

  type metadata accessor for ListTableViewHeaderFooter();
  v7 = swift_dynamicCastClass();
  v8 = a3;
  if (v7)
  {
    v11 = v8;
    v9 = a4;
    v10 = a1;
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(0, 0, 0);

    v8 = v11;
  }

}

void UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(void *a1, void *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  id v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char v47;
  char v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  _QWORD aBlock[6];

  v85 = a3;
  v90 = a1;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v84 = type metadata accessor for IndexPath();
  v82 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v7);
  v83 = v8;
  v81 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v6[11];
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v11, v9);
  v71 = (char *)&v68 - v12;
  v88 = v13;
  v14 = type metadata accessor for Binding();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v72 = (char *)&v68 - v17;
  v18 = v6[10];
  v19 = v6[12];
  v79 = type metadata accessor for ShadowListDataSource(0, v18, v19, v20);
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v21);
  v77 = (char *)&v68 - v22;
  v86 = v18;
  v87 = v19;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = type metadata accessor for Optional();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74, v24);
  v26 = (char *)&v68 - v25;
  v80 = AssociatedTypeWitness;
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v76 = (char *)&v68 - v30;
  type metadata accessor for ListTableViewCell();
  v31 = swift_dynamicCastClass();
  if (v31)
  {
    v32 = (char *)v31;
    v69 = v10;
    v75 = a2;
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(1, 0, 0);
    v33 = *(void **)&v32[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
    if (v33)
    {
      v70 = v27;
      v34 = v33;
      swift_retain();
      v27 = v70;
      specialized UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(v90);

      swift_release();
    }
    if (objc_msgSend(v90, sel_isEditing))
    {
      v35 = (char *)v89 + *(_QWORD *)((*v5 & *v89) + 0x70);
      swift_beginAccess();
      v36 = v78;
      v37 = v77;
      v38 = v35;
      v39 = v79;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v77, v38, v79);
      v40 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v39);
      ListCoreDataSource.selectionValue(forRowAt:)(v85, v39, v40, (uint64_t)v26);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v39);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v26, 1, v80) == 1)
      {
        (*(void (**)(char *, uint64_t))(v73 + 8))(v26, v74);
      }
      else
      {
        v41 = v32;
        v42 = v76;
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v76, v26, v80);
        v43 = (char *)v89 + *(_QWORD *)((*v5 & *v89) + 0x78);
        swift_beginAccess();
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v43, 1, v14))
        {
          v44 = v72;
          (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v72, v43, v14);
          v45 = v71;
          MEMORY[0x18D75B9C8](v14);
          (*(void (**)(char *, uint64_t))(v15 + 8))(v44, v14);
          v46 = v88;
          v47 = (*(uint64_t (**)(char *, uint64_t))(v6[13] + 56))(v76, v88);
          v42 = v76;
          v48 = v47;
          (*(void (**)(char *, uint64_t))(v69 + 8))(v45, v46);
          if ((v48 & 1) != 0)
          {
            v49 = v42;
            v50 = v27;
            v51 = v6;
            v32 = v41;
            objc_msgSend(v41, sel_setSelected_animated_, 1, 0);
            (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v80);
LABEL_13:
            v52 = v32;
            v53 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
            v54 = v82;
            v55 = v81;
            v56 = v84;
            (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, v85, v84);
            v57 = (*(unsigned __int8 *)(v54 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
            v58 = (v83 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
            v59 = (char *)swift_allocObject();
            v60 = v88;
            *((_QWORD *)v59 + 2) = v86;
            *((_QWORD *)v59 + 3) = v60;
            *((_QWORD *)v59 + 4) = v87;
            v61 = v51[13];
            v62 = v89;
            *((_QWORD *)v59 + 5) = v61;
            *((_QWORD *)v59 + 6) = v62;
            (*(void (**)(char *, char *, uint64_t))(v54 + 32))(&v59[v57], v55, v56);
            *(_QWORD *)&v59[v58] = v52;
            v63 = v90;
            *(_QWORD *)&v59[(v58 + 15) & 0xFFFFFFFFFFFFFFF8] = v90;
            aBlock[4] = partial apply for closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:);
            aBlock[5] = v59;
            aBlock[0] = MEMORY[0x1E0C809B0];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_40_0;
            v64 = _Block_copy(aBlock);
            v65 = v75;
            v66 = v62;
            v67 = v63;
            swift_release();
            objc_msgSend(v53, sel__performBlockAfterCATransactionCommits_, v64);
            _Block_release(v64);

            ListTableViewCell.updateSeparatorsFromConfiguration()();
            return;
          }
        }
        (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v80);
        v32 = v41;
      }
    }
    v51 = v6;
    if (objc_msgSend(v32, sel_isSelected))
      objc_msgSend(v32, sel_setSelected_animated_, 0, 0);
    goto LABEL_13;
  }
}

id closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v6;

  if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasDragItemsPreference) & 1) != 0)
    v6 = 1;
  else
    v6 = *(_BYTE *)(a3 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasItemProviderTrait);
  UITableViewListCoordinator.updateIndexPathsWithDragItems(indexPath:hasDragItems:)(a2, v6);
  objc_msgSend(a4, sel_isEditing);
  return specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a4);
}

uint64_t UITableViewListCoordinator.updateIndexPathsWithDragItems(indexPath:hasDragItems:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE v22[12];
  int v23;

  v23 = a2 & 1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v22[-v7];
  v9 = type metadata accessor for IndexPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v22[-v16];
  v18 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xF0));
  swift_beginAccess();
  v19 = *v18;
  swift_bridgeObjectRetain();
  v20 = a1;
  LODWORD(a1) = specialized Set.contains(_:)(a1, v19) & 1;
  result = swift_bridgeObjectRelease();
  if ((_DWORD)a1 != v23)
  {
    if ((a2 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v20, v9);
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((uint64_t)v17, v13);
      swift_endAccess();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v17, v9);
    }
    else
    {
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(v20, (uint64_t)v8);
      swift_endAccess();
      return outlined destroy of TaskPriority?((uint64_t)v8, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
    }
  }
  return result;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  return @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(a1, a2, a3, a4, a5, (void (*)(id, id, char *))UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:));
}

id UITableViewListCoordinator.tableView(_:didEndDisplaying:forRowAt:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ListTableViewCell();
  if (swift_dynamicCastClass())
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(0, 0, 0);
  UITableViewListCoordinator.updateIndexPathsWithDragItems(indexPath:hasDragItems:)(a3, 0);
  objc_msgSend(a1, sel_isEditing);
  return specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a1);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didEndDisplaying:forRowAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  return @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(a1, a2, a3, a4, a5, (void (*)(id, id, char *))UITableViewListCoordinator.tableView(_:didEndDisplaying:forRowAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  v10 = type metadata accessor for IndexPath();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = a3;
  v16 = a4;
  v17 = a1;
  a6(v15, v16, v14);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:shouldIndentWhileEditingRowAt:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for IndexPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return 0;
}

BOOL UITableViewListCoordinator.tableView(_:shouldHighlightRowAt:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _BOOL8 v21;
  Class isa;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v7 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v44 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for Optional();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v44 - v17;
  if (objc_msgSend(a1, sel_isEditing, v16))
  {
    v19 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v19, v7);
    v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
    ListCoreDataSource.selectionValue(forRowAt:)(a2, v7, v20, (uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v21 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v18, 1, AssociatedTypeWitness) != 1;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    return v21;
  }
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v23 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (!v23)
    return 0;
  type metadata accessor for ListTableViewCell();
  v24 = swift_dynamicCastClass();
  if (!v24
    || (v25 = v24 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior,
        v26 = *(_QWORD *)(v24 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8),
        v26 == 1))
  {

    return 0;
  }
  v28 = *(_QWORD *)v25;
  v29 = *(_QWORD *)(v25 + 16);
  v30 = *(_QWORD *)(v25 + 24);
  v31 = *(_QWORD *)(v25 + 32);
  v32 = *(_QWORD *)(v25 + 40);
  v33 = *(_QWORD *)(v25 + 48);
  v47 = *(_QWORD *)(v25 + 56);
  v48 = v28;
  v21 = v26 != 0;
  v34 = *(_BYTE *)(v25 + 64);
  if (v26)
  {
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = v26;
    *(_QWORD *)(v35 + 24) = v29;
    v45 = partial apply for thunk for @callee_guaranteed () -> ();
    v46 = v35;
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
  LOBYTE(v40) = v34;
  v36 = v48;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v48, v26, v29, v30, v31, v32, v33, v47, v40, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  LOBYTE(v41) = v34;
  v37 = v36;
  v38 = v47;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v37, v26, v29, v30, v31, v32, v33, v47, v41, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined copy of AppIntentExecutor?(v26);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v45);

  LOBYTE(v42) = v34;
  v39 = v48;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v48, v26, v29, v30, v31, v32, v33, v38, v42, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  LOBYTE(v43) = v34;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v39, v26, v29, v30, v31, v32, v33, v38, v43, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  return v21;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:shouldHighlightRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  LOBYTE(a1) = UITableViewListCoordinator.tableView(_:shouldHighlightRowAt:)(v10, (uint64_t)v9, v12, v13);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return a1 & 1;
}

Swift::Bool __swiftcall UITableViewListCoordinator.tableView(_:shouldDrawTopSeparatorForSection:)(UITableView *_, Swift::Int shouldDrawTopSeparatorForSection)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[14];
  uint64_t v36;

  v35[12] = shouldDrawTopSeparatorForSection;
  v35[10] = _;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = type metadata accessor for IndexPath();
  v35[7] = *(_QWORD *)(v4 - 8);
  v35[8] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v35[9] = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v3[12];
  v8 = *(_QWORD *)(v7 + 8);
  v9 = v3[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v35[6] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v35[2] = (char *)v35 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v35[3] = *(_QWORD *)(v13 - 8);
  v35[4] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v35[1] = (char *)v35 - v15;
  v36 = type metadata accessor for ShadowRowCollection(0, v9, v8, v16);
  v35[11] = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v17);
  v35[13] = (char *)v35 - v18;
  v20 = type metadata accessor for ShadowSectionCollection(0, v9, v8, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = type metadata accessor for ShadowListDataSource(0, v9, v7, v22);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)v35 - v28;
  v30 = (char *)v2 + v3[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v29, v30, v23);
  ShadowListDataSource.sectionIDs.getter(v23, v31, v32, v33);
}

Swift::Int @objc UITableViewListCoordinator.tableView(_:shouldDrawTopSeparatorForSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  UITableView *v6;
  id v7;

  v6 = a3;
  v7 = a1;
  LOBYTE(a4) = UITableViewListCoordinator.tableView(_:shouldDrawTopSeparatorForSection:)(v6, a4);

  return a4 & 1;
}

Swift::Bool __swiftcall UITableViewListCoordinator.tableView(_:shouldDrawBottomSeparatorForSection:)(UITableView *_, Swift::Int shouldDrawBottomSeparatorForSection)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[19];

  v36[18] = shouldDrawBottomSeparatorForSection;
  v36[5] = _;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = type metadata accessor for IndexPath();
  v36[14] = *(_QWORD *)(v4 - 8);
  v36[15] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v36[13] = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v3[12];
  v8 = *(_QWORD *)(v7 + 8);
  v9 = v3[10];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v36[12] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v36[10] = (char *)v36 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v36[8] = *(_QWORD *)(v13 - 8);
  v36[9] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v36[7] = (char *)v36 - v15;
  v17 = type metadata accessor for ShadowRowCollection(0, v9, v8, v16);
  v36[16] = *(_QWORD *)(v17 - 8);
  v36[17] = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = type metadata accessor for ShadowSectionCollection(0, v9, v8, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = type metadata accessor for ShadowListDataSource(0, v9, v7, v22);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v36[6] = (char *)v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v36 - v29;
  v31 = (char *)v2 + v3[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v30, v31, v23);
  ShadowListDataSource.sectionIDs.getter(v23, v32, v33, v34);
}

Swift::Int @objc UITableViewListCoordinator.tableView(_:shouldDrawBottomSeparatorForSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  UITableView *v6;
  id v7;

  v6 = a3;
  v7 = a1;
  LOBYTE(a4) = UITableViewListCoordinator.tableView(_:shouldDrawBottomSeparatorForSection:)(v6, a4);

  return a4 & 1;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:selectionFollowsFocusForRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v13;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  LOBYTE(a1) = specialized UITableViewListCoordinator.tableView(_:selectionFollowsFocusForRowAt:)(v10);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return a1 & 1;
}

uint64_t UITableViewListCoordinator.tableView(_:cellForRowAt:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void *v14;
  Class isa;
  id v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v24;
  void *v25;
  char v26[16];
  _QWORD *v27;
  uint64_t v28;
  char v29;

  v5 = v4;
  v8 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60), a4);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v24 - v12;
  v14 = (void *)MEMORY[0x18D75CC88](0x6C6C65437473694CLL, 0xE800000000000000, v11);
  swift_bridgeObjectRelease();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v25 = a1;
  v16 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v14, isa);

  swift_getAssociatedTypeWitness();
  v17 = swift_dynamicCastUnknownClassUnconditional();
  v18 = (char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x70);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v18, v8);
  v27 = v5;
  v28 = v17;
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v8);
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:), (uint64_t)v26, v8, MEMORY[0x1E0DEE9C0] + 8, v19, (uint64_t)&v29);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  type metadata accessor for ListTableViewCell();
  v20 = swift_dynamicCastClass();
  if (v20)
  {
    v21 = (void *)v20;
    v22 = v16;
    UITableViewListCoordinator.updateCell(_:in:at:isVisible:)((uint64_t)v21, v25, a2, 0);
    objc_msgSend(v21, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
    objc_msgSend(v21, sel_setAutomaticallyUpdatesContentConfiguration_, 0);

  }
  return v17;
}

void closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:)(uint64_t a1, _QWORD *a2, void *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v9 = type metadata accessor for ShadowListDataSource(0, v8[10], v8[12], a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v20 - v12;
  v14 = (char *)a2 + v8[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v15 = (_QWORD *)((char *)a2 + *(_QWORD *)((*v7 & *a2) + 0x88));
  swift_beginAccess();
  v16 = *v15;
  outlined copy of Transaction?(v16);
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)a3, v16, a1, v9);
  outlined consume of Transaction?(v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if (*((_BYTE *)a2 + *(_QWORD *)((*v7 & *a2) + 0xF8)) == 1)
  {
    v17 = objc_msgSend(a3, sel_layer);
    v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
    v20[1] = *(_QWORD *)(a1 + *(int *)(type metadata accessor for _RowVisitationContext(0, v9, v18, v19) + 40));
    ViewTraitCollection.zIndex.getter();
    objc_msgSend(v17, sel_setZPosition_);

  }
}

id @objc UITableViewListCoordinator.tableView(_:cellForRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  v14 = (void *)UITableViewListCoordinator.tableView(_:cellForRowAt:)(v10, (uint64_t)v9, v12, v13);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v14;
}

id @objc UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a3;
  v7 = a1;
  UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(v6, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))ListDiffable.hasHeader(forSectionAtOffset:), (uint64_t)ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:), 0);
  v9 = v8;

  return v9;
}

uint64_t ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  unsigned __int8 v14;
  char v15;

  v6 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v13 - v10;
  ListDiffable.sectionIndex(atOffset:)(a1, a2, v6);
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t))(a3 + 104))(&v13, v11, a2, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  if ((v15 & 1) != 0)
    return 0;
  else
    return v14 & (v13 != 0);
}

double @objc UITableViewListCoordinator.tableView(_:heightForHeaderInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v6 = a3;
  v7 = a1;
  v11 = specialized UITableViewListCoordinator.tableView(_:heightForHeaderInSection:)(a4, v8, v9, v10);

  return v11;
}

double @objc UITableViewListCoordinator.tableView(_:estimatedHeightForHeaderInSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v6 = a3;
  v7 = a1;
  v11 = specialized UITableViewListCoordinator.tableView(_:estimatedHeightForHeaderInSection:)(a4, v8, v9, v10);

  return v11;
}

void UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, int a5)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v34;
  void *v35;

  HIDWORD(v30) = a5;
  v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a4;
  v35 = a1;
  v8 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v5);
  v9 = v8[12];
  v31 = v8[10];
  v10 = type metadata accessor for ShadowListDataSource(0, v31, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v30 - v13;
  v15 = v8[14];
  v34 = v5;
  v16 = (char *)v5 + v15;
  swift_beginAccess();
  v17 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v17(v14, v16, v10);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
  v32 = a2;
  LOBYTE(a3) = a3(a2, v10, v18);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  if ((a3 & 1) != 0)
  {
    v20 = (void *)MEMORY[0x18D75CC88](0x646165487473694CLL, 0xEA00000000007265);
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v35, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v20);

    if (v21)
    {
      swift_getAssociatedTypeWitness();
      v22 = swift_dynamicCastUnknownClassUnconditional();
      v17(v14, v16, v10);
      v23 = (_QWORD *)((char *)v34 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x88));
      swift_beginAccess();
      v24 = *v23;
      outlined copy of Transaction?(v24);
      v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v10);
      v33(v22, v24, v32, v10, v25);
      outlined consume of Transaction?(v24);
      v19(v14, v10);
      type metadata accessor for ListTableViewHeaderFooter();
      v26 = swift_dynamicCastClass();
      if (v26)
      {
        v27 = (void *)v26;
        v28 = v21;
        v29 = v27;
        specialized UITableViewListCoordinator.updateHeaderFooter(_:section:position:in:)((uint64_t)v29, SBYTE4(v30), v35);

      }
    }
    else
    {
      __break(1u);
    }
  }
}

id @objc UITableViewListCoordinator.tableView(_:viewForFooterInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a3;
  v7 = a1;
  UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(v6, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))ListDiffable.hasFooter(forSectionAtOffset:), (uint64_t)ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:), 1);
  v9 = v8;

  return v9;
}

double @objc UITableViewListCoordinator.tableView(_:heightForFooterInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v6 = a3;
  v7 = a1;
  v11 = specialized UITableViewListCoordinator.tableView(_:heightForFooterInSection:)(a4, v8, v9, v10);

  return v11;
}

double @objc UITableViewListCoordinator.tableView(_:estimatedHeightForFooterInSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v6 = a3;
  v7 = a1;
  v11 = specialized UITableViewListCoordinator.tableView(_:estimatedHeightForFooterInSection:)(a4, v8, v9, v10);

  return v11;
}

void UITableViewListCoordinator.listTableViewCell(_:platformItemIsSelected:)(char *a1, int a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  Class isa;
  Class v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  char v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  int v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;

  type metadata accessor for (IndexPath?, IndexPath?)();
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v80 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v101 = (char *)&v80 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v102 = (char *)&v80 - v23;
  v24 = type metadata accessor for IndexPath();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  MEMORY[0x1E0C80A78](v27, v28);
  v32 = &a1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior];
  v33 = *(_QWORD *)&a1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8];
  if (v33 == 1)
    return;
  v34 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 0x101) != 0x100)
    return;
  v86 = a2;
  v83 = v6;
  v87 = v2;
  v97 = v31;
  v84 = v17;
  v82 = v13;
  v99 = v29;
  v100 = v34;
  v98 = v25;
  v88 = (char *)&v80 - v30;
  v85 = v9;
  v35 = *((_QWORD *)v32 + 2);
  v36 = *((_QWORD *)v32 + 3);
  v37 = *((_QWORD *)v32 + 4);
  v38 = *((_QWORD *)v32 + 5);
  v40 = *((_QWORD *)v32 + 6);
  v39 = *((_QWORD *)v32 + 7);
  v41 = v32[64];
  outlined copy of AppIntentExecutor?(v33);
  outlined copy of AppIntentExecutor?(v36);
  outlined copy of AppIntentExecutor?(v38);
  v42 = objc_msgSend(a1, sel__tableView);
  if (!v42)
  {
    LOBYTE(v79) = v41;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v33, v35, v36, v37, v38, v40, v39, v79, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    return;
  }
  v94 = v41;
  v89 = v33;
  v90 = v35;
  v91 = v36;
  v92 = v40;
  v95 = v37;
  v96 = v38;
  v93 = v39;
  v43 = v42;
  v44 = objc_msgSend(v42, sel_indexPathForCell_, a1);
  if (!v44)
  {
    v49 = (uint64_t)v102;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v102, 1, 1, v99);
    goto LABEL_10;
  }
  v45 = v44;
  v46 = v97;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  v47 = v98;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 32);
  v49 = (uint64_t)v102;
  v50 = v46;
  v51 = v99;
  v52 = v98;
  v48(v102, (uint64_t)v50, v99);
  v53 = *(char **)(v47 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v53)(v49, 0, 1, v51);
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  if (v54(v49, 1, v51) == 1)
  {
LABEL_10:

    LOBYTE(v79) = v94;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v89, v90, v91, v95, v96, v92, v93, v79, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of TaskPriority?(v49, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
    return;
  }
  v81 = v54;
  v55 = v88;
  v48(v88, v49, v51);
  v57 = v95;
  v56 = v96;
  v58 = v94;
  if ((v86 & 1) != 0)
  {
    v59 = v55;
    v60 = (uint64_t)v101;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v101, v59, v51);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v53)(v60, 0, 1, v51);
    v61 = (uint64_t)v87 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v87) + 0xB8);
    swift_beginAccess();
    outlined assign with take of IndexPath?(v60, v61);
    swift_endAccess();
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v43, sel_selectRowAtIndexPath_animated_scrollPosition_, isa, 0, 0);

    LOBYTE(v79) = v58;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v89, v90, v91, v57, v56, v92, v93, v79, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v59, v51);
    return;
  }
  v63 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v43, sel_deselectRowAtIndexPath_animated_, v63, 0);

  v64 = (uint64_t)v87 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v87) + 0xB8);
  swift_beginAccess();
  v65 = v53;
  v66 = (uint64_t)v84;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v84, v55, v51);
  v102 = v65;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v65)(v66, 0, 1, v51);
  v67 = v55;
  v68 = (uint64_t)v85;
  v69 = (uint64_t)&v85[*(int *)(v83 + 48)];
  v87 = (_QWORD *)v64;
  outlined init with copy of IndexPath?(v64, (uint64_t)v85);
  outlined init with copy of IndexPath?(v66, v69);
  v70 = v81;
  if (v81(v68, 1, v51) == 1)
  {

    LOBYTE(v79) = v94;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v89, v90, v91, v95, v96, v92, v93, v79, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of TaskPriority?(v66, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v67, v51);
    if (v70(v69, 1, v51) == 1)
    {
      outlined destroy of TaskPriority?((uint64_t)v85, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
LABEL_19:
      v77 = (uint64_t)v101;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v102)(v101, 1, 1, v51);
      v78 = (uint64_t)v87;
      swift_beginAccess();
      outlined assign with take of IndexPath?(v77, v78);
      swift_endAccess();
      return;
    }
LABEL_17:
    outlined destroy of (IndexPath?, IndexPath?)((uint64_t)v85);
    return;
  }
  v71 = (uint64_t)v82;
  outlined init with copy of IndexPath?(v68, (uint64_t)v82);
  if (v70(v69, 1, v51) == 1)
  {

    LOBYTE(v79) = v94;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v89, v90, v91, v95, v96, v92, v93, v79, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of TaskPriority?(v66, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
    v72 = *(void (**)(char *, uint64_t))(v52 + 8);
    v72(v67, v51);
    v72((char *)v71, v51);
    goto LABEL_17;
  }
  v73 = v97;
  v48(v97, v69, v51);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1680]);
  v74 = dispatch thunk of static Equatable.== infix(_:_:)();

  LOBYTE(v79) = v94;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v100, v89, v90, v91, v95, v96, v92, v93, v79, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  v75 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
  v75((uint64_t)v73, v51);
  v76 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
  outlined destroy of TaskPriority?(v66, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
  v75((uint64_t)v67, v51);
  v75(v71, v51);
  outlined destroy of TaskPriority?(v68, &lazy cache variable for type metadata for IndexPath?, v76);
  if ((v74 & 1) != 0)
    goto LABEL_19;
}

void UITableViewListCoordinator.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  Class isa;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  id v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  Class v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  _QWORD *v71;
  id v72;
  uint64_t v73;

  v3 = v2;
  v73 = a2;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v64 = (char *)&v64 - v8;
  v9 = v5[11];
  v67 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v10, v9);
  v66 = (char *)&v64 - v11;
  v68 = v12;
  v13 = (_QWORD *)type metadata accessor for Binding();
  v71 = (_QWORD *)*(v13 - 1);
  v72 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v65 = (char *)&v64 - v15;
  v16 = v5[10];
  v69 = v5;
  v18 = type metadata accessor for ShadowListDataSource(0, v16, v5[12], v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v64 - v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = type metadata accessor for Optional();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v64 - v27;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  v70 = (uint64_t)&v64 - v33;
  if (!objc_msgSend(a1, sel_isEditing, v32))
  {
    v37 = v73;
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v72 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

    if (!v72)
      return;
    type metadata accessor for ListTableViewCell();
    v39 = swift_dynamicCastClass();
    if (v39)
    {
      v40 = v39 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior;
      v41 = *(void (**)(uint64_t))(v39 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8);
      if (v41 != (void (*)(uint64_t))1)
      {
        v71 = v3;
        v42 = *(_QWORD *)v40;
        v43 = *(_QWORD *)(v40 + 16);
        v44 = *(_QWORD *)(v40 + 24);
        v45 = *(_QWORD *)(v40 + 32);
        v46 = *(_QWORD *)(v40 + 40);
        v48 = *(_QWORD *)(v40 + 48);
        v47 = *(_QWORD *)(v40 + 56);
        v69 = a1;
        v70 = v47;
        v49 = *(_BYTE *)(v40 + 64);
        if (v41)
        {
          outlined copy of AppIntentExecutor?((uint64_t)v41);
          outlined copy of AppIntentExecutor?(v44);
          v50 = outlined copy of AppIntentExecutor?(v46);
          v41(v50);
          if ((v42 & 1) == 0)
          {
LABEL_9:
            LOBYTE(v63) = v49;
            outlined consume of PlatformItemList.Item.SelectionBehavior?(v42, (uint64_t)v41, v43, v44, v45, v46, v48, v70, v63, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);

            v51 = type metadata accessor for IndexPath();
            v52 = *(_QWORD *)(v51 - 8);
            v53 = (uint64_t)v64;
            (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v64, v37, v51);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v51);
            v54 = (uint64_t)v71 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v71) + 0xB8);
            swift_beginAccess();
            outlined assign with take of IndexPath?(v53, v54);
LABEL_12:
            swift_endAccess();
            return;
          }
        }
        else
        {
          outlined copy of AppIntentExecutor?(0);
          outlined copy of AppIntentExecutor?(v44);
          outlined copy of AppIntentExecutor?(v46);
          if ((v42 & 1) == 0)
            goto LABEL_9;
        }
        v62 = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v69, sel_deselectRowAtIndexPath_animated_, v62, UITableViewListCoordinator.isAnimated.getter() & 1);
        LOBYTE(v63) = v49;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v42, (uint64_t)v41, v43, v44, v45, v46, v48, v70, v63, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);

      }
    }

    return;
  }
  v34 = v3;
  v35 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x70);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v35, v18);
  v36 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v18);
  ListCoreDataSource.selectionValue(forRowAt:)(v73, v18, v36, (uint64_t)v28);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    return;
  }
  v55 = v70;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v70, v28, AssociatedTypeWitness);
  v56 = (char *)v34 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v34) + 0x78);
  swift_beginAccess();
  v58 = v71;
  v57 = v72;
  if (((unsigned int (*)(char *, uint64_t, id))v71[6])(v56, 1, v72))
  {
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v55, AssociatedTypeWitness);
    goto LABEL_12;
  }
  v59 = v65;
  ((void (*)(char *, char *, id))v58[2])(v65, v56, v57);
  swift_endAccess();
  v60 = v66;
  MEMORY[0x18D75B9C8](v57);
  v61 = v68;
  (*(void (**)(uint64_t, uint64_t))(*((_QWORD *)v69 + 13) + 32))(v55, v68);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v60, v61);
  ((void (*)(char *, id))v58[1])(v59, v57);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v55, AssociatedTypeWitness);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(a1, a2, a3, a4, (void (*)(id, char *))UITableViewListCoordinator.tableView(_:didSelectRowAt:));
}

id UITableViewListCoordinator.tableView(_:didDeselectRowAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  id result;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (**v37)(_QWORD, _QWORD, _QWORD);
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;

  v51 = a2;
  v55 = a1;
  v3 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = v3[11];
  v48 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v47 = (char *)&v41 - v5;
  v49 = type metadata accessor for Binding();
  v6 = *(void **)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v7);
  v9 = (char *)&v41 - v8;
  v11 = type metadata accessor for ShadowListDataSource(0, v3[10], v3[12], v10);
  v50 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v41 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v41 - v19;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v53 = AssociatedTypeWitness;
  v54 = v21;
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v41 - v25;
  result = objc_msgSend(v55, sel_isEditing, v24);
  if ((_DWORD)result)
  {
    v44 = v17;
    v45 = v16;
    v46 = v26;
    v41 = v9;
    v42 = v3;
    v55 = v6;
    v28 = v49;
    v43 = v4;
    v29 = v52;
    v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v31 = (char *)v52 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v52) + 0x70);
    swift_beginAccess();
    v32 = v50;
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v14, v31, v11);
    v33 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v11);
    ListCoreDataSource.selectionValue(forRowAt:)(v51, v11, v33, (uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v11);
    v34 = v53;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v20, 1, v53) == 1)
    {
      return (id)(*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v20, v45);
    }
    else
    {
      v35 = v46;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v46, v20, v34);
      v36 = (char *)v29 + *(_QWORD *)((*v30 & *v29) + 0x78);
      swift_beginAccess();
      v37 = (void (**)(_QWORD, _QWORD, _QWORD))v55;
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v55 + 6))(v36, 1, v28))
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v34);
        return (id)swift_endAccess();
      }
      else
      {
        v38 = v41;
        ((void (**)(char *, char *, uint64_t))v37)[2](v41, v36, v28);
        swift_endAccess();
        v39 = v47;
        MEMORY[0x18D75B9C8](v28);
        v40 = v43;
        (*(void (**)(char *, uint64_t))(v42[13] + 40))(v35, v43);
        specialized Binding.wrappedValue.setter();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v40);
        ((void (*)(char *, uint64_t))v37[1])(v38, v28);
        return (id)(*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v35, v34);
      }
    }
  }
  return result;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didDeselectRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(a1, a2, a3, a4, (void (*)(id, char *))UITableViewListCoordinator.tableView(_:didDeselectRowAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  a5(v13, v12);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:shouldBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UITableViewListCoordinator.tableView(_:shouldBeginMultipleSelectionInteractionAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  LOBYTE(a5) = a5(v12);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return a5 & 1;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(a1, a2, a3, a4, (void (*)(char *))specialized UITableViewListCoordinator.tableView(_:didBeginMultipleSelectionInteractionAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v8 = type metadata accessor for IndexPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = a3;
  v14 = a1;
  a5(v12);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

id @objc UITableViewListCoordinator.tableView(_:contextMenuConfigurationForRowAt:point:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v14;

  v5 = type metadata accessor for IndexPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a3;
  v11 = a1;
  v12 = (void *)specialized UITableViewListCoordinator.tableView(_:contextMenuConfigurationForRowAt:point:)(v10);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v12;
}

uint64_t (*UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(void *a1, uint64_t a2))()
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v5 + 80);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v5 + 88);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v12 + 48) = a1;
  *(_QWORD *)(v12 + 56) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v13 = a1;
  return partial apply for closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:);
}

uint64_t closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t aBlock;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t (*v39)();
  uint64_t v40;

  v33 = a4;
  v34 = a5;
  v31 = a2;
  v32 = a1;
  v12 = type metadata accessor for IndexPath();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, a3, v12, v16);
  v18 = (*(unsigned __int8 *)(v13 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = a4;
  *((_QWORD *)v20 + 3) = a5;
  *((_QWORD *)v20 + 4) = a6;
  *((_QWORD *)v20 + 5) = a7;
  v21 = v31;
  *((_QWORD *)v20 + 6) = v31;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v18], v17, v12);
  v22 = v32;
  *(_QWORD *)&v20[v19] = v32;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = partial apply for closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:);
  *(_QWORD *)(v23 + 24) = v20;
  v39 = partial apply for thunk for @callee_guaranteed () -> ();
  v40 = v23;
  v24 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v36 = 1107296256;
  v37 = thunk for @escaping @callee_guaranteed () -> ();
  v38 = &block_descriptor_20;
  v25 = _Block_copy(&aBlock);
  swift_retain();
  v26 = v22;
  swift_retain();
  swift_release();
  v39 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v40 = 0;
  aBlock = v24;
  v36 = 1107296256;
  v37 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v38 = &block_descriptor_17;
  v27 = _Block_copy(&aBlock);
  objc_msgSend(v26, sel_performBatchUpdates_completion_, v25, v27);
  _Block_release(v27);
  _Block_release(v25);
  v28 = (_QWORD *)swift_allocObject();
  v29 = v34;
  v28[2] = v33;
  v28[3] = v29;
  v28[4] = a6;
  v28[5] = a7;
  v28[6] = v21;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v24 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Class isa;

  v10 = a1 + 16;
  swift_beginAccess();
  v11 = MEMORY[0x18D760234](v10);
  if (v11)
  {
    v12 = (void *)v11;
    swift_beginAccess();
    v14 = type metadata accessor for ShadowListDataSource(0, a4, a6, v13);
    v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v14);
    ListCoreDataSource.deleteCell(forRowAt:)(a2, v14, v15);
    swift_endAccess();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v16 = type metadata accessor for IndexPath();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BF9830;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 16))(v19 + v18, a2, v16);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_deleteRowsAtIndexPaths_withRowAnimation_, isa, 100);

  }
}

uint64_t closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x18D760234](v6);
  if (result)
  {
    swift_beginAccess();
    type metadata accessor for ShadowListDataSource(0, a2, a4, v8);
    ShadowListDataSource.discardUpdatesForDeletion()();
  }
  return result;
}

uint64_t UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  Class isa;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[28];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[232];

  v3 = v2;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  result = 0;
  if (v7)
  {
    type metadata accessor for ListTableViewCell();
    v9 = swift_dynamicCastClass();
    if (v9)
    {
      if (*(_QWORD *)(v9 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host))
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        swift_retain();
        static Update.dispatchImmediately<A>(_:)();

        swift_release();
      }
      else
      {

        _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)&v41);
        outlined init with take of SwipeActions.Value?((uint64_t)&v41, (uint64_t)v55, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      }
      outlined init with take of SwipeActions.Value?((uint64_t)v55, (uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined init with take of SwipeActions.Value?((uint64_t)v40, (uint64_t)&v41, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v41) != 1)
      {
        v10 = v44;
        v11 = v54;
        v18 = v53;
        v19 = v3;
        v12 = v52;
        v20 = v51;
        v21 = v48;
        v23 = v42;
        v24 = v50;
        v13 = v49;
        v14 = v41;
        v22 = v43;
        v15 = v45;
        v16 = v46;
        v17 = v47;
        outlined copy of SwipeActions.Configuration?(v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53);
        outlined release of SwipeActions.Value?(v40);
        if (v10)
        {
          v26 = v14 & 0x101;
          v27 = v23;
          v28 = v22 & 0x1FF;
          v29 = v10;
          v30 = v15;
          v31 = v16;
          v32 = v17;
          v33 = v21;
          v34 = v13;
          v35 = v24;
          v36 = v20;
          v37 = v12;
          v38 = v18;
          v39 = v11;
          swift_bridgeObjectRetain();
          outlined copy of Binding<NavigationSplitViewColumn>?(v15, v16);
          outlined copy of Binding<SwipeActionResultToken?>?(v21, v13, v24, v20, v12, v18);
          closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)((unsigned __int8 *)&v26, v19, a1, a2, (uint64_t)&unk_1E1B29DF0, (uint64_t)partial apply for closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:), &v25);
          outlined consume of SwipeActions.Configuration?(v14, v23, v22, v10, v15, v16, v17, v21, v13, v24, v20, v12, v18);
          outlined consume of SwipeActions.Configuration?(v14, v23, v22, v10, v15, v16, v17, v21, v13, v24, v20, v12, v18);
          return v25;
        }
      }
    }
    else
    {

    }
    return 0;
  }
  return result;
}

id @objc UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:));
}

uint64_t UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  Class isa;
  id v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[28];
  _BYTE v41[112];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[232];

  v3 = v2;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  result = 0;
  if (v7)
  {
    type metadata accessor for ListTableViewCell();
    v9 = swift_dynamicCastClass();
    if (v9)
    {
      if (*(_QWORD *)(v9 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host))
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        swift_retain();
        static Update.dispatchImmediately<A>(_:)();

        swift_release();
      }
      else
      {

        _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)v41);
        outlined init with take of SwipeActions.Value?((uint64_t)v41, (uint64_t)v56, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      }
      outlined init with take of SwipeActions.Value?((uint64_t)v56, (uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      outlined init with take of SwipeActions.Value?((uint64_t)v40, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v41) != 1)
      {
        v10 = v45;
        v11 = v55;
        v18 = v54;
        v19 = v3;
        v12 = v53;
        v20 = v52;
        v21 = v49;
        v23 = v43;
        v24 = v51;
        v13 = v50;
        v14 = v42;
        v22 = v44;
        v15 = v46;
        v16 = v47;
        v17 = v48;
        outlined copy of SwipeActions.Configuration?(v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54);
        outlined release of SwipeActions.Value?(v40);
        if (v10)
        {
          v26 = v14 & 0x101;
          v27 = v23;
          v28 = v22 & 0x1FF;
          v29 = v10;
          v30 = v15;
          v31 = v16;
          v32 = v17;
          v33 = v21;
          v34 = v13;
          v35 = v24;
          v36 = v20;
          v37 = v12;
          v38 = v18;
          v39 = v11;
          swift_bridgeObjectRetain();
          outlined copy of Binding<NavigationSplitViewColumn>?(v15, v16);
          outlined copy of Binding<SwipeActionResultToken?>?(v21, v13, v24, v20, v12, v18);
          closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)((unsigned __int8 *)&v26, v19, a1, a2, (uint64_t)&unk_1E1B29D28, (uint64_t)partial apply for closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:), &v25);
          outlined consume of SwipeActions.Configuration?(v14, v23, v22, v10, v15, v16, v17, v21, v13, v24, v20, v12, v18);
          outlined consume of SwipeActions.Configuration?(v14, v23, v22, v10, v15, v16, v17, v21, v13, v24, v20, v12, v18);
          return v25;
        }
      }
    }
    else
    {

    }
    return 0;
  }
  return result;
}

id closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id result;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int8 v57[8];
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v56 = a6;
  v53 = a5;
  v50 = a4;
  v54 = a3;
  v49 = a2;
  v55 = a7;
  v51 = *MEMORY[0x1E0DEEDD8] & *a2;
  v47 = type metadata accessor for IndexPath();
  v38 = *(_QWORD *)(v47 - 8);
  v48 = *(_QWORD *)(v38 + 64);
  MEMORY[0x1E0C80A78](v47, v8);
  v37 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *a1;
  v34 = a1[1];
  v33 = *((_QWORD *)a1 + 1);
  v32 = a1[16];
  v31 = a1[17];
  v10 = *((_QWORD *)a1 + 4);
  v72 = *((_QWORD *)a1 + 3);
  v41 = v10;
  v40 = *((_QWORD *)a1 + 5);
  v11 = v40;
  v12 = *((_QWORD *)a1 + 7);
  v36 = *((_QWORD *)a1 + 8);
  v13 = *((_QWORD *)a1 + 10);
  v46 = *((_QWORD *)a1 + 9);
  v14 = v46;
  v45 = v13;
  v16 = *((_QWORD *)a1 + 12);
  v44 = *((_QWORD *)a1 + 11);
  v15 = v44;
  v43 = v16;
  v42 = *((_QWORD *)a1 + 13);
  v17 = v42;
  LODWORD(a1) = a1[48];
  v39 = (int)a1;
  v52 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  v57[0] = v35;
  v57[1] = v34;
  v58 = v33;
  v59 = v32;
  v60 = v31;
  v61 = v72;
  v62 = v10;
  v63 = v11;
  v64 = (char)a1;
  v65 = v12;
  v18 = v12;
  v19 = v36;
  v66 = v36;
  v67 = v14;
  v68 = v13;
  v69 = v15;
  v70 = v16;
  v71 = v17;
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v21 = v38;
  v22 = v37;
  v23 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v50, v47);
  v24 = v21;
  v25 = (*(unsigned __int8 *)(v21 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v26 = swift_allocObject();
  v27 = v51;
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(v51 + 80);
  *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 88);
  *(_QWORD *)(v26 + 40) = *(_QWORD *)(v27 + 104);
  *(_QWORD *)(v26 + 48) = v20;
  v28 = v54;
  *(_QWORD *)(v26 + 56) = v54;
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v26 + v25, v22, v23);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v41, v40);
  outlined copy of Binding<SwipeActionResultToken?>?(v18, v19, v46, v45, v44, v43);
  v29 = v28;
  result = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)(v57, v56, v26);
  *v55 = result;
  return result;
}

uint64_t closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)();

  v8 = a3 + 16;
  swift_beginAccess();
  v9 = MEMORY[0x18D760234](v8);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(a4, a5);

    v11();
    swift_release();
  }
  return a1(1);
}

id @objc UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc CollectionViewListDragAndDropController.collectionView(_:dragPreviewParametersForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:));
}

void @objc UITableViewListCoordinator.init()()
{
  specialized UITableViewListCoordinator.init()();
}

uint64_t UITableViewListCoordinator.__ivar_destroyer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70);
  v7 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50);
  v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60);
  v9 = type metadata accessor for ShadowListDataSource(0, v7, v8, a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
  v10 = (char *)v4 + *(_QWORD *)((*v5 & *v4) + 0x78);
  type metadata accessor for Binding();
  v11 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (_QWORD *)((char *)v4 + *(_QWORD *)((*v5 & *v4) + 0x80));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v12, v12[1]);
  outlined consume of Transaction?(*(_QWORD *)((char *)v4 + *(_QWORD *)((*v5 & *v4) + 0x88)));

  outlined destroy of TaskPriority?((uint64_t)v4 + *(_QWORD *)((*v5 & *v4) + 0xB8), &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
  v13 = (char *)v4 + *(_QWORD *)((*v5 & *v4) + 0xC0);
  v15 = type metadata accessor for ListCoreBatchUpdates(0, v7, *(_QWORD *)(v8 + 8), v14);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  v16 = (char *)v4 + *(_QWORD *)((*v5 & *v4) + 0xC8);
  v17 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)v4 + *(_QWORD *)((*v5 & *v4) + 0x100)));
}

uint64_t @objc UITableViewListCoordinator.__ivar_destroyer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70);
  v7 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50);
  v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60);
  v9 = type metadata accessor for ShadowListDataSource(0, v7, v8, a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
  v10 = (char *)a1 + *(_QWORD *)((*v5 & *a1) + 0x78);
  type metadata accessor for Binding();
  v11 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = (_QWORD *)((char *)a1 + *(_QWORD *)((*v5 & *a1) + 0x80));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v12, v12[1]);
  outlined consume of Transaction?(*(_QWORD *)((char *)a1 + *(_QWORD *)((*v5 & *a1) + 0x88)));

  outlined destroy of TaskPriority?((uint64_t)a1 + *(_QWORD *)((*v5 & *a1) + 0xB8), &lazy cache variable for type metadata for IndexPath?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658]);
  v13 = (char *)a1 + *(_QWORD *)((*v5 & *a1) + 0xC0);
  v15 = type metadata accessor for ListCoreBatchUpdates(0, v7, *(_QWORD *)(v8 + 8), v14);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  v16 = (char *)a1 + *(_QWORD *)((*v5 & *a1) + 0xC8);
  v17 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)((char *)a1 + *(_QWORD *)((*v5 & *a1) + 0x100)));
}

void type metadata accessor for UITableViewListCoordinator()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined destroy of (IndexPath?, IndexPath?)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (IndexPath?, IndexPath?)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  BOOL *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 v33;
  CGRect v34;

  v4 = v3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10.n128_f64[0] = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v27 - v11;
  v13 = OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host;
  v14 = *(_QWORD **)(v3 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
  if (v14)
  {
    v15 = (BOOL *)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0xF8);
    swift_beginAccess();
    if (*v15 == (a1 & 1))
    {
      *v15 = (a1 & 1) == 0;
      v16 = v14;
      specialized _UIHostingView.updateRemovedState()();

    }
  }
  MEMORY[0x18D75D6B4](v10);
  v17 = type metadata accessor for UIBackgroundConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v12, 1, v17))
  {
    outlined destroy of TaskPriority?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130]);
  }
  else
  {
    v18 = (void *)UIBackgroundConfiguration.customView.getter();
    outlined destroy of TaskPriority?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130]);
    if (v18)
    {
      type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
      v19 = (_QWORD *)swift_dynamicCastClass();
      if (v19)
      {
        v20 = (BOOL *)v19 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v19) + 0xF8);
        swift_beginAccess();
        if (*v20 == (a1 & 1))
        {
          *v20 = (a1 & 1) == 0;
          specialized _UIHostingView.updateRemovedState()();
        }
      }

    }
  }
  v21 = *(void **)(v4 + v13);
  if ((a1 & 1) != 0)
  {
    if (!v21)
      return;
    v22 = v21;
    v23 = objc_msgSend(v22, sel_superview);
    if (!v23)
      goto LABEL_16;
    v24 = v23;
    if (a2)
    {
      swift_retain();
      objc_msgSend(v24, sel_bounds);
      CGRectGetWidth(v34);
      _ProposedSize.init(width:height:)();
      v25 = v31;
      v28 = v32;
      v29 = v30;
      HIDWORD(v27) = v33;
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = a2;
      *(_QWORD *)(v26 + 24) = a3;
      swift_beginAccess();
      outlined copy of AppIntentExecutor?(a2);
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      swift_retain();
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();
      swift_release();
      swift_release();
      v30 = v29;
      v31 = v25;
      v32 = v28;
      v33 = BYTE4(v27);
      swift_beginAccess();
      swift_retain();
      ViewGraphGeometryObservers.resetObserver(for:)();
      swift_endAccess();

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
      swift_release();
LABEL_16:

      return;
    }

  }
  else if (v21)
  {
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    swift_retain();
    ViewGraphGeometryObservers.removeAll()();
    swift_endAccess();
    swift_release();
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  BOOL *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 v33;
  CGRect v34;

  v4 = v3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v10.n128_f64[0] = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v27 - v11;
  v13 = OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host;
  v14 = *(_QWORD **)(v3 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  if (v14)
  {
    v15 = (BOOL *)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0xF8);
    swift_beginAccess();
    if (*v15 == (a1 & 1))
    {
      *v15 = (a1 & 1) == 0;
      v16 = v14;
      specialized _UIHostingView.updateRemovedState()();

    }
  }
  MEMORY[0x18D75D864](v10);
  v17 = type metadata accessor for UIBackgroundConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v12, 1, v17))
  {
    outlined destroy of TaskPriority?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130]);
  }
  else
  {
    v18 = (void *)UIBackgroundConfiguration.customView.getter();
    outlined destroy of TaskPriority?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2130]);
    if (v18)
    {
      type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>(0);
      v19 = (_QWORD *)swift_dynamicCastClass();
      if (v19)
      {
        v20 = (BOOL *)v19 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v19) + 0xF8);
        swift_beginAccess();
        if (*v20 == (a1 & 1))
        {
          *v20 = (a1 & 1) == 0;
          specialized _UIHostingView.updateRemovedState()();
        }
      }

    }
  }
  v21 = *(void **)(v4 + v13);
  if ((a1 & 1) != 0)
  {
    if (!v21)
      return;
    v22 = v21;
    v23 = objc_msgSend(v22, sel_superview);
    if (!v23)
      goto LABEL_16;
    v24 = v23;
    if (a2)
    {
      swift_retain();
      objc_msgSend(v24, sel_bounds);
      CGRectGetWidth(v34);
      _ProposedSize.init(width:height:)();
      v25 = v31;
      v28 = v32;
      v29 = v30;
      HIDWORD(v27) = v33;
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = a2;
      *(_QWORD *)(v26 + 24) = a3;
      swift_beginAccess();
      outlined copy of AppIntentExecutor?(a2);
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      swift_retain();
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();
      swift_release();
      swift_release();
      v30 = v29;
      v31 = v25;
      v32 = v28;
      v33 = BYTE4(v27);
      swift_beginAccess();
      swift_retain();
      ViewGraphGeometryObservers.resetObserver(for:)();
      swift_endAccess();

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
      swift_release();
LABEL_16:

      return;
    }

  }
  else if (v21)
  {
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    swift_retain();
    ViewGraphGeometryObservers.removeAll()();
    swift_endAccess();
    swift_release();
  }
}

id specialized ContextMenuBridge.menuConfigurationFromResponder(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;
  uint64_t v18;

  v2 = v1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  if (v18)
    v4 = v18;
  else
    v4 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v4 + 16))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextMenuConfiguration);
    v5 = (objc_class *)type metadata accessor for ContextMenuIdentity();
    v6 = (char *)objc_allocWithZone(v5);
    v7 = &v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath];
    v8 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
    *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base] = a1;
    v17.receiver = v6;
    v17.super_class = v5;
    swift_retain();
    v9 = objc_msgSendSuper2(&v17, sel_init);
    v11 = (*(uint64_t (**)(id, uint64_t))(class metadata base offset for ContextMenuResponder + *a1 + 16))(v9, v10);
    v13 = v12;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v4;
    v15 = UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)((uint64_t)v9, v11, v13, (uint64_t)partial apply for closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:), v14);
    objc_msgSend(v15, sel_setPreferredMenuElementOrder_, qword_187C1E438[*(char *)(v2 + direct field offset for ContextMenuBridge.menuOrder)], v17.receiver, v17.super_class);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v15;
}

void specialized UITableViewListCoordinator.init(dataSource:selection:transaction:editMode:sidebarStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27[2];
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  int v39;

  v6 = v5;
  v39 = a5;
  v36 = a2;
  v37 = a3;
  v32 = a1;
  ObjectType = swift_getObjectType();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v6);
  v10 = v9[10];
  v27[1] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](ObjectType, v11);
  v29 = (char *)v27 - v12;
  v27[0] = v9[12];
  v14 = type metadata accessor for ShadowListDataSource(0, v10, v27[0], v13);
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = *a4;
  v33 = a4[1];
  v34 = v16;
  v35 = *((unsigned __int8 *)a4 + 16);
  v28 = (char *)v6 + v9[15];
  v17 = v28;
  v18 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = (char *)v6 + *(_QWORD *)((*v8 & *v6) + 0x80);
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v8 & *v6) + 0x88)) = 1;
  v20 = (char *)v6 + *(_QWORD *)((*v8 & *v6) + 0x98);
  *(_QWORD *)v20 = 0;
  *((_WORD *)v20 + 4) = 256;
  v21 = *(_QWORD *)((*v8 & *v6) + 0xA0);
  v22 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  v23 = v6;
  v24 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  v24[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(_QWORD *)((char *)v6 + v21) = v24;
  *(_QWORD *)((char *)v23 + *(_QWORD *)((*v8 & *v23) + 0xA8)) = 0;
  *((_BYTE *)v23 + *(_QWORD *)((*v8 & *v23) + 0xB0)) = 1;
  v25 = (char *)v23 + *(_QWORD *)((*v8 & *v23) + 0xB8);
  v26 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  ListCoreBatchUpdates.init()(v10, *(_QWORD *)(v27[0] + 8), (uint64_t)v23 + *(_QWORD *)((*v8 & *v23) + 0xC0));
}

void sub_1872C05B0()
{
  char *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t v7;

  v4 = *(_QWORD *)(v3 - 232);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(&v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0xC8)], 1, 1, v1);
  v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0xD0)] = 0;
  v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0xD8)] = 0;
  v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0xE0)] = 0;
  v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0xE8)] = 0;
  *(_QWORD *)&v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0xF0)] = MEMORY[0x1E0DEE9E8];
  v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0xF8)] = 0;
  v5 = &v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0x100)];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16);
  v7 = *(_QWORD *)(v3 - 216);
  v6(v7, *(_QWORD *)(v3 - 192), v1);
  ShadowListDataSource.init(_:)(v7, v1);
}

id sub_1872C06A0()
{
  char *v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(char *, uint64_t, _QWORD))(*(_QWORD *)(v5 - 208) + 32))(&v0[*(_QWORD *)((*v3 & *(_QWORD *)v0) + 0x70)], v1, *(_QWORD *)(v5 - 200));
  v6 = *(_QWORD *)(v5 - 224);
  swift_beginAccess();
  v7 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v6, *(_QWORD *)(v5 - 160), v7);
  swift_endAccess();
  swift_beginAccess();
  v8 = *v2;
  v9 = *(_QWORD *)(v5 - 152);
  *v2 = v9;
  outlined copy of Transaction?(v9);
  outlined consume of Transaction?(v8);
  v10 = *(_QWORD *)v4;
  v11 = *(_QWORD *)(v4 + 8);
  v12 = *(_QWORD *)(v5 - 184);
  *(_QWORD *)v4 = *(_QWORD *)(v5 - 176);
  *(_QWORD *)(v4 + 8) = v12;
  *(_BYTE *)(v4 + 16) = *(_DWORD *)(v5 - 164);
  outlined consume of Binding<NavigationSplitViewColumn>?(v10, v11);
  v0[*(_QWORD *)((*v3 & *(_QWORD *)v0) + 0x90)] = *(_DWORD *)(v5 - 132);

  v13 = *(_QWORD *)(v5 - 144);
  *(_QWORD *)(v5 - 128) = v0;
  *(_QWORD *)(v5 - 120) = v13;
  return objc_msgSendSuper2((objc_super *)(v5 - 128), sel_init);
}

void specialized UITableViewListCoordinator.__allocating_init(dataSource:selection:transaction:editMode:sidebarStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  specialized UITableViewListCoordinator.init(dataSource:selection:transaction:editMode:sidebarStatus:)(a1, a2, a3, a4, a5);
}

id specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(void *a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;
  id result;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF0);
  swift_beginAccess();
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  result = objc_msgSend(a1, sel_dragInteractionEnabled);
  if ((v4 != 0) != (_DWORD)result)
    return objc_msgSend(a1, sel_setDragInteractionEnabled_, v4 != 0);
  return result;
}

void specialized UITableViewListCoordinator.updateHeaderFooter(_:section:position:in:)(uint64_t a1, char a2, void *a3)
{
  _QWORD *v3;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;

  v6 = a2 & 1;
  v7 = *((_BYTE *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x90));
  v8 = a1 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration;
  swift_beginAccess();
  *(_BYTE *)(v8 + 1) = v7;
  v9 = OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host;
  v10 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
  if (v10)
  {
    LOWORD(v18) = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v11 = v10;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  *(_QWORD *)(v8 + 8) = objc_msgSend(a3, sel_style, v18);
  v12 = *(void **)(a1 + v9);
  if (v12)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v13 = v12;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  swift_beginAccess();
  *(_BYTE *)v8 = v6;
  HeaderFooterConfiguration.updateValues()();
  swift_endAccess();
  v14 = *(void **)(a1 + v9);
  if (v14)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v15 = v14;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
  *(_BYTE *)(v8 + 17) = UITableView.isPseudoInsetGrouped.getter();
  v16 = *(void **)(a1 + v9);
  if (v16)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v17 = v16;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
}

void specialized UITableViewListCoordinator.numberOfSections(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v6 = v5[10];
  v7 = v5[12];
  v8 = type metadata accessor for ShadowSectionCollection(0, v6, *(_QWORD *)(v7 + 8), a4);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = type metadata accessor for ShadowListDataSource(0, v6, v7, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v20 - v14;
  v16 = (char *)v4 + v5[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v16, v11);
  ShadowListDataSource.sectionIDs.getter(v11, v17, v18, v19);
}

uint64_t specialized UITableViewListCoordinator.tableView(_:numberOfRowsInSection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = v6[10];
  v8 = v6[12];
  v9 = type metadata accessor for ShadowListDataSource(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v24 - v12;
  v15 = type metadata accessor for ShadowRowCollection(0, v7, *(_QWORD *)(v8 + 8), v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v24 - v18;
  v20 = (char *)v4 + v6[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v20, v9);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  ListDiffable.rowIDs(forSectionAtOffset:)(a1, v9, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v22 = ShadowRowCollection.count.getter(v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return v22;
}

void specialized UITableViewListCoordinator.tableView(_:canEditRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v5 = v4;
  v6 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50);
  v29 = *MEMORY[0x1E0DEEDD8] & *v4;
  v7 = *(_QWORD *)(v29 + 96);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = type metadata accessor for ShadowRowCollection(0, v6, v8, a4);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v32 = (char *)&v28 - v11;
  v12 = type metadata accessor for IndexPath();
  MEMORY[0x1E0C80A78](v12, v13);
  v38 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ShadowSectionCollection(0, v6, v8, v15);
  v37 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v30 = v6;
  v31 = v7;
  v19 = type metadata accessor for ShadowListDataSource(0, v6, v7, v18);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v28 - v22;
  v36 = IndexPath.section.getter();
  v24 = (char *)v5 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v5) + 0x70);
  swift_beginAccess();
  v35 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v35(v23, v24, v19);
  ShadowListDataSource.sectionIDs.getter(v19, v25, v26, v27);
}

uint64_t specialized UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = v6[10];
  v8 = v6[12];
  v9 = type metadata accessor for ShadowListDataSource(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v21[-v12];
  v14 = (char *)v4 + v6[14];
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v15 = v6[11];
  v22 = v7;
  v23 = v15;
  v16 = v6[13];
  v24 = v8;
  v25 = v16;
  type metadata accessor for UITableViewCellEditingStyle(0);
  v18 = v17;
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:), (uint64_t)v21, v9, v18, v19, (uint64_t)&v26);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
  if (v27)
    return 0;
  else
    return v26;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:canMoveRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v6 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[10], v6[12], a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v15 - v10;
  v12 = (char *)v4 + v6[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  LOBYTE(a1) = ListCoreDataSource.canMoveCell(forRowAt:)(a1, v7, v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return a1 & 1;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:moveRowAt:to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v6 = *MEMORY[0x1E0DEEDD8] & *v3;
  swift_beginAccess();
  v8 = type metadata accessor for ShadowListDataSource(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 96), v7);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v8);
  ListCoreDataSource.moveCell(fromRowAt:to:)(a1, a2, v8, v9);
  swift_endAccess();
  return UITableViewListCoordinator.commitUpdates()();
}

_QWORD *specialized UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8)) = 1;
  result = UITableViewListCoordinator.resolvedEditMode.getter(&v6);
  if (v6 != 2)
  {
    v3 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x80));
    v4 = v3[1];
    if (v4)
    {
      v5 = *v3;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (_QWORD *)outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
    }
  }
  return result;
}

_QWORD *specialized UITableViewListCoordinator.tableView(_:didEndEditingRowAt:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8)) = 0;
  result = UITableViewListCoordinator.resolvedEditMode.getter(&v6);
  if (v6)
  {
    v3 = (_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x80));
    v4 = v3[1];
    if (v4)
    {
      v5 = *v3;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (_QWORD *)outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
    }
  }
  return result;
}

uint64_t specialized UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CGRect v5;

  objc_msgSend(a1, sel_bounds);
  CGRectGetWidth(v5);
  _ProposedSize.init(width:height:)();
  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_beginAccess();
  type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
  ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  ViewGraphGeometryObservers.resetObserver(for:)();
  return swift_endAccess();
}

void specialized UITableViewListCoordinator.tableView(_:willDisplayHeaderView:forSection:)(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  type metadata accessor for ListTableViewHeaderFooter();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = v4;
    v8 = a2;
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(1, 0, 0);
    v6 = *(void **)(v5 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
    if (v6)
    {
      v7 = v6;
      swift_retain();
      specialized UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(a1);

      swift_release();
    }

  }
}

unint64_t specialized UITableViewListCoordinator.tableView(_:selectionFollowsFocusForRowAt:)(void *a1)
{
  Class isa;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v3 = (unint64_t)objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (v3)
  {
    type metadata accessor for ListTableViewCell();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior);
      v6 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior);
      v18 = *(unsigned __int16 *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 5);
      v19 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 7);
      v20 = *(unsigned int *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 1);
      v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8);
      v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 16);
      v9 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 24);
      v10 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 32);
      v11 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 40);
      v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 48);
      v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 56);
      v14 = *(_BYTE *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 64);
      LOBYTE(v16) = v14;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(*(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior), v5[1], v5[2], v5[3], v5[4], v5[5], v5[6], v5[7], v16, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);

      if (v7 == 1)
      {
        return 0;
      }
      else
      {
        v3 = (v6 & 1) == 0;
        LOBYTE(v17) = v14;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v6 | ((v20 | ((unint64_t)(v18 | (v19 << 16)) << 32)) << 8), v7, v8, v9, v10, v11, v12, v13, v17, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      }
    }
    else
    {

      return 0;
    }
  }
  return v3;
}

double specialized UITableViewListCoordinator.tableView(_:heightForHeaderInSection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  double v17;
  Swift::Bool v18;
  char v19;
  uint64_t v21;

  v6 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[10], v6[12], a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v21 - v10;
  v12 = (char *)v4 + v6[14];
  swift_beginAccess();
  v13 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v15 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v7, v14);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v17 = 6.0;
  if ((v15 & 1) == 0)
  {
    if (a1 < 1)
      return *MEMORY[0x1E0DC53D8];
    v13(v11, v12, v7);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
    v18 = ListDiffable.hasHeader(forSectionAtOffset:)(a1);
    v16(v11, v7);
    if (v18)
      return *MEMORY[0x1E0DC53D8];
    v13(v11, v12, v7);
    v19 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1 - 1, v7, v14);
    v16(v11, v7);
    if ((v19 & 1) == 0)
      return *MEMORY[0x1E0DC53D8];
  }
  return v17;
}

double specialized UITableViewListCoordinator.tableView(_:estimatedHeightForHeaderInSection:)(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  Swift::Bool v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  char v17;
  double v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  v6 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = type metadata accessor for ShadowListDataSource(0, v6[10], v6[12], a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v23 - v10;
  v12 = (char *)v4 + v6[14];
  swift_beginAccess();
  v13 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v13(v11, v12, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v14 = ListDiffable.hasHeader(forSectionAtOffset:)(a1);
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  if (v14)
    return 28.0;
  v13(v11, v12, v7);
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v17 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v7, v16);
  v15(v11, v7);
  if ((v17 & 1) != 0)
    return 28.0;
  v18 = 0.0;
  v19 = a1 < 1;
  v20 = a1 - 1;
  if (!v19)
  {
    v13(v11, v12, v7);
    v21 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(v20, v7, v16);
    v15(v11, v7);
    if ((v21 & 1) != 0)
      return 28.0;
  }
  return v18;
}

double specialized UITableViewListCoordinator.tableView(_:heightForFooterInSection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = v6[10];
  v8 = v6[12];
  v9 = type metadata accessor for ShadowSectionCollection(0, v7, *(_QWORD *)(v8 + 8), a4);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = type metadata accessor for ShadowListDataSource(0, v7, v8, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - v15;
  v17 = (char *)v4 + v6[14];
  swift_beginAccess();
  v18 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v18(v16, v17, v12);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v12);
  v25 = a1;
  v20 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v12, v19);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if ((v20 & 1) == 0)
  {
    v18(v16, v17, v12);
    ShadowListDataSource.sectionIDs.getter(v12, v21, v22, v23);
  }
  return 6.0;
}

double specialized UITableViewListCoordinator.tableView(_:estimatedHeightForFooterInSection:)(Swift::Int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  Swift::Bool v19;
  void (*v20)(char *, uint64_t);
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v7 = v6[10];
  v8 = v6[12];
  v9 = type metadata accessor for ShadowSectionCollection(0, v7, *(_QWORD *)(v8 + 8), a4);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = type metadata accessor for ShadowListDataSource(0, v7, v8, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v26 - v15;
  v17 = (char *)v4 + v6[14];
  swift_beginAccess();
  v18 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v18(v16, v17, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v12);
  v19 = ListDiffable.hasFooter(forSectionAtOffset:)(a1);
  v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  v20(v16, v12);
  if (!v19)
  {
    v18(v16, v17, v12);
    v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v12);
    v21 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v12, v26);
    v20(v16, v12);
    if ((v21 & 1) == 0)
    {
      v18(v16, v17, v12);
      ShadowListDataSource.sectionIDs.getter(v12, v23, v24, v25);
    }
  }
  return 28.0;
}

BOOL specialized UITableViewListCoordinator.tableView(_:shouldBeginMultipleSelectionInteractionAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a1;
  v5 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v6 = type metadata accessor for ShadowListDataSource(0, v5[10], v5[12], a4);
  v28 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v27 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v12);
  v14 = (char *)&v27 - v13;
  v15 = type metadata accessor for IndexPath();
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)((char *)v4 + v5[16] + 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v29, v15, v18);
  if (v21)
  {
    v22 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x70);
    swift_beginAccess();
    v23 = v28;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v9, v22, v6);
    v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v6);
    ListCoreDataSource.selectionValue(forRowAt:)((uint64_t)v20, v6, v24, (uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    v25 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v14, 1, AssociatedTypeWitness) != 1;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v27);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    return 0;
  }
  return v25;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:didBeginMultipleSelectionInteractionAt:)()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = (_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80));
  v2 = v1[1];
  if (v2)
  {
    v3 = *v1;
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined consume of Binding<NavigationSplitViewColumn>?(v3, v2);
  }
  return result;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:contextMenuConfigurationForRowAt:point:)(void *a1)
{
  Class isa;
  char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v3 = (char *)objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (!v3)
    return 0;
  type metadata accessor for ListTableViewCell();
  v4 = swift_dynamicCastClass();
  if (!v4)
    goto LABEL_7;
  v5 = *(void **)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  v6 = v5;

  if (!v5)
    return 0;
  v3 = (char *)*(id *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x210));

  result = MEMORY[0x18D760234](&v3[direct field offset for ContextMenuBridge.host]);
  if (result)
  {
    v8 = (void *)result;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    v9 = ViewRendererHost.responderNode.getter();

    if (v9)
    {
      MEMORY[0x1E0C80A78](v10, v11);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
LABEL_7:

    return 0;
  }
  __break(1u);
  return result;
}

void specialized UITableViewListCoordinator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t partial apply for closure #1 in ViewGraph.swipeActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ViewGraph.swipeActions()(a1);
}

uint64_t _s7SwiftUI12SwipeActionsO5ValueVSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t outlined copy of SwipeActions.Configuration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a5, a6);
    return outlined copy of Binding<SwipeActionResultToken?>?(a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t outlined copy of Binding<SwipeActionResultToken?>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    return outlined copy of SwipeActionResultToken?(a3, a4, a5, a6);
  }
  return result;
}

uint64_t outlined copy of SwipeActionResultToken?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    outlined copy of AppIntentExecutor?(a2);
    return outlined copy of AppIntentExecutor?(a4);
  }
  return result;
}

uint64_t *outlined release of SwipeActions.Value?(uint64_t *a1)
{
  outlined consume of SwipeActions.Value?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26]);
  return a1;
}

uint64_t outlined consume of SwipeActions.Value?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a4 != 1)
  {
    outlined consume of SwipeActions.Configuration?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
    return outlined consume of SwipeActions.Configuration?(a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
  }
  return result;
}

uint64_t outlined consume of SwipeActions.Configuration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(a5, a6);
    return outlined consume of Binding<SwipeActionResultToken?>?(a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t outlined consume of Binding<SwipeActionResultToken?>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    return outlined consume of SwipeActionResultToken?(a3, a4, a5, a6);
  }
  return result;
}

uint64_t outlined consume of SwipeActionResultToken?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
  }
  return result;
}

double _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return result;
}

uint64_t sub_1872C29E4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1872C2A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath() - 8) + 80);
  return closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(*(void **)(v0 + 48), *(_QWORD *)(v0 + 56), v0 + ((v5 + 64) & ~v5), v1, v2, v3, v4);
}

uint64_t sub_1872C2AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(v0[6], (uint64_t)v0 + v5, *(void **)((char *)v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)), v1, v2, v3);
}

uint64_t sub_1872C2BF0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:));
}

uint64_t objectdestroy_3Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath() - 8) + 80);
  return closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(a1, a2, *(_QWORD *)(v2 + 48), *(void **)(v2 + 56), v2 + ((v5 + 64) & ~v5));
}

uint64_t partial apply for closure #1 in ContextMenuBridge.outermostContextMenuResponder.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ContextMenuBridge.outermostContextMenuResponder.getter(*(uint64_t **)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in ContextMenuResponderBase.items.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in ContextMenuResponderBase.items.getter(a1);
}

uint64_t sub_1872C2D30()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:)(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:)(a1, *(_QWORD **)(v4 + 16), *(void **)(v4 + 24), a4);
}

uint64_t sub_1872C2D64()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>)
  {
    lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer();
    v0 = type metadata accessor for ViewGraphGeometryObservers();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>);
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()(double *a1, double *a2)
{
  uint64_t v2;

  return thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()(a1, a2, *(uint64_t (**)(double, double, double, double))(v2 + 16));
}

uint64_t sub_1872C2DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

id partial apply for closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(*(_QWORD *)(v0 + 48), v0 + v2, *(_QWORD *)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1872C2ED8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.commitUpdates()()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in UITableViewListCoordinator.commitUpdates());
}

uint64_t sub_1872C2F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for IndexPath() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)(*(_QWORD **)(v0 + 48), v0 + v2, *(void **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1872C2FEC()
{
  return swift_deallocObject();
}

uint64_t sub_1872C2FFC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #2 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)()
{
  uint64_t v0;

  UITableViewListCoordinator.enqueueLayoutInvalidationIfNeeded(_:)(*(void **)(v0 + 24));
}

BOOL partial apply for closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)@<W0>(_BOOL8 *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_1872C3064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for _RowVisitationContext(0, v5, v6, v7);
  v9 = v4
     + ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v9, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9 + *(int *)(TupleTypeMetadata2 + 48), v11);
  v13 = v9 + *(int *)(v8 + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  v15 = v9 + *(int *)(v8 + 44);
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in implicit closure #2 in closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = type metadata accessor for ShadowListDataSource(255, v6, v8, a2);
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v9);
  type metadata accessor for _RowVisitationContext(0, v9, v10, v11);
  return implicit closure #4 in implicit closure #3 in implicit closure #2 in closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, v6, v7, v8, a3);
}

uint64_t sub_1872C33A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #2 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  uint64_t v0;

  closure #2 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(_BYTE *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_BYTE *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1872C33E8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  uint64_t v0;

  return closure #1 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(_QWORD *)(v0 + 48), *(void **)(v0 + 56));
}

void partial apply for closure #1 in UITableViewListCoordinator.updateListContents(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in UITableViewListCoordinator.updateListContents(_:)(a1, *(_QWORD **)(v4 + 16), *(void **)(v4 + 24), a4);
}

uint64_t sub_1872C3430()
{
  return swift_deallocObject();
}

uint64_t sub_1872C3440()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(a1, *(_QWORD **)(v1 + 16), *(_BYTE *)(v1 + 24), *(unsigned __int8 *)(v1 + 25), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void partial apply for closure #3 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_layoutIfNeeded);
  UITableViewListCoordinator.updateListContents(_:)(v1, v2, v3, v4);
}

uint64_t sub_1872C34B8()
{
  return swift_deallocObject();
}

uint64_t sub_1872C34C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(_QWORD **)(v0 + 48), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1872C35AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1872C35E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  uint64_t v0;

  performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(_QWORD **)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1872C3628()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;

  closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter(a1, a2, v2);
}

uint64_t sub_1872C3640()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter(closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:));
}

uint64_t partial apply for closure #1 in closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:));
}

ValueMetadata *type metadata accessor for LazyContainerModifier()
{
  return &type metadata for LazyContainerModifier;
}

void View.configuredForLazyContainer()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  PreferenceKeys.remove<A>(_:)();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  LOBYTE(v9) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    PreferenceKeys.remove<A>(_:)();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  uint64_t v4;
  uint64_t v6;
  int v7;

  _ViewInputs.withoutGeometryDependencies.getter();
  v7 &= v7 & 0xFFFFFFBF ^ 0x80;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  a3(v4, &v6);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<IndexViewPlacementModifier>);
  _GraphValue.value.getter();
  AGGraphGetValue();
  lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v20 = v4;
  *(_OWORD *)&v20[16] = *(_OWORD *)(a2 + 64);
  v21 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v5;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<CoordinateSpaceNameModifier>);
  _GraphValue.value.getter();
  _ViewInputs.transform.getter();
  _ViewInputs.animatedPosition()();
  v10 = _ViewInputs.animatedCGSize()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  v8 = v18;
  v9 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  a3(v6, &v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<PresentedSceneValueInputModifier>);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type PresentedSceneValueInput and conformance PresentedSceneValueInput();
  PropertyList.subscript.setter();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  _BYTE v19[32];
  _BYTE v20[32];
  int v21;

  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_DWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v20[16] = v5;
  v21 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v18 = *(_OWORD *)a2;
  *(_OWORD *)v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    PreferenceKeys.remove<A>(_:)();
  v9 = v18;
  v10 = DWORD2(v18);
  v11 = *(_QWORD *)v19;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_QWORD *)&v19[24];
  v14 = *(_QWORD *)v20;
  v15 = *(_OWORD *)&v20[8];
  v16 = *(_QWORD *)&v20[24];
  v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[32];
  int v14;
  __int128 v15;
  _BYTE v16[32];
  _BYTE v17[32];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v17 = v5;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v15 = *(_OWORD *)a2;
  *(_OWORD *)v16 = v6;
  LODWORD(v10) = a1;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<TableRowForegroundStyleModifier>);
  _GraphValue.value.getter();
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v12[8] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v13 = v7;
  *(_OWORD *)&v13[16] = *(_OWORD *)(a2 + 64);
  v14 = *(_DWORD *)(a2 + 80);
  v10 = *(_OWORD *)a2;
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  *(_QWORD *)&v10 = v15;
  DWORD2(v10) = DWORD2(v15);
  v11 = *(_QWORD *)v16;
  *(_OWORD *)v12 = *(_OWORD *)&v16[8];
  *(_QWORD *)&v12[16] = *(_QWORD *)&v16[24];
  *(_QWORD *)v13 = *(_QWORD *)v17;
  *(_OWORD *)&v13[8] = *(_OWORD *)&v17[8];
  *(_QWORD *)&v13[24] = *(_QWORD *)&v17[24];
  v14 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LazyContainerModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LazyContainerModifier()
{
  lazy protocol witness table accessor for type LazyContainerModifier and conformance LazyContainerModifier();
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance LazyContainerModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance LazyContainerModifier()
{
  uint64_t result;

  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  result = static SemanticFeature.isEnabled.getter();
  if ((result & 1) != 0)
    return PreferenceKeys.remove<A>(_:)();
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInLazyContainer()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInLazyContainer()
{
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in LazyContainerModifier()
{
  return &protocol witness table for LazyContainerModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInLazyContainer()
{
  return &protocol witness table for IsInLazyContainer;
}

unint64_t lazy protocol witness table accessor for type LazyContainerModifier and conformance LazyContainerModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LazyContainerModifier and conformance LazyContainerModifier;
  if (!lazy protocol witness table cache variable for type LazyContainerModifier and conformance LazyContainerModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyContainerModifier, &type metadata for LazyContainerModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyContainerModifier and conformance LazyContainerModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewPlacementModifier.Input, &type metadata for IndexViewPlacementModifier.Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexViewPlacementModifier.Input, &type metadata for IndexViewPlacementModifier.Input);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoordinateSpaceNameTransform, &type metadata for CoordinateSpaceNameTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CoordinateSpaceNameTransform, &type metadata for CoordinateSpaceNameTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceNameTransform and conformance CoordinateSpaceNameTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowForegroundStyleModifier.ChildEnvironment, &type metadata for TableRowForegroundStyleModifier.ChildEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for _GraphValue<IndexViewPlacementModifier>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _GraphValue();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type PresentedSceneValueInput and conformance PresentedSceneValueInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput;
  if (!lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedSceneValueInput, &type metadata for PresentedSceneValueInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput;
  if (!lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentedSceneValueInput, &type metadata for PresentedSceneValueInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentedSceneValueInput and conformance PresentedSceneValueInput);
  }
  return result;
}

void __swiftcall LinkButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void LinkButtonStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in LinkButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LinkButtonStyle()
{
  return &type metadata for LinkButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v7[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, a2, a3, a4);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>);
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17SystemSegmentItemVG_yps5NeverOTg503_s7d4UI22f135SegmentedControl33_D74FE142C3C5A6C2CEA4987A69AEBD75LLV10makeUIView7contextAD011UISegmentedE0CAA0P20RepresentableContextVyADG_tFypAA0C11gH6VXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[184];
  id v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  char v54;
  char v55;
  __int16 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v3 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v3, v4);
  v61 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SystemSegmentItem();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v28 = v1;
    v60 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = (void **)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    v14 = *(_QWORD *)(v7 + 72);
    v29 = v14;
    v30 = v10 + 64;
    while (1)
    {
      v15 = *v13;
      if (*v13)
      {
        *((_QWORD *)&v59 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        *(_QWORD *)&v58 = v15;
      }
      else
      {
        v59 = 0u;
        v58 = 0u;
      }
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      if (!*((_QWORD *)&v59 + 1))
        break;
      v16 = v15;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      outlined init with take of Any(&v58, &v31);
LABEL_18:
      v12 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v60;
      }
      v26 = *(_QWORD *)(v12 + 16);
      v25 = *(_QWORD *)(v12 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1);
        v12 = v60;
      }
      *(_QWORD *)(v12 + 16) = v26 + 1;
      outlined init with take of Any(&v31, (_OWORD *)(v12 + 32 * v26 + 32));
      v13 = (void **)((char *)v13 + v14);
      if (!--v11)
        return v12;
    }
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v30, (uint64_t)v44, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v44, (uint64_t)&v45, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v45) == 1)
    {
      v17 = v15;
      v14 = v29;
LABEL_10:
      *((_QWORD *)&v32 + 1) = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v31 = 0;
      *((_QWORD *)&v31 + 1) = 0xE000000000000000;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
LABEL_17:
      outlined destroy of Any?((uint64_t)&v58);
      goto LABEL_18;
    }
    if (v57)
    {
      v18 = v15;
      outlined retain of Image.Resolved?((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      objc_opt_self();
      v19 = swift_dynamicCastObjCClassUnconditional();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, v61, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (v19)
      {
        outlined retain of Image.Resolved?((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v61, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v14 = v29;
        goto LABEL_16;
      }
    }
    else
    {
      v20 = v15;
      outlined retain of Image.Resolved?((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, v61, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    }
    v21 = v45;
    v22 = v61;
    v23 = v46;
    *(_QWORD *)&v31 = v45;
    BYTE8(v31) = v46;
    v32 = v47;
    v33 = v48;
    v34 = v49;
    v35 = v50;
    v36 = v51;
    v37 = v52;
    v38 = v53;
    v39 = v54;
    v40 = v55;
    v41 = v56;
    v24 = *(_QWORD *)(v61 + 48);
    outlined copy of GraphicsImage.Contents?(v45, v46);
    v19 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v24);
    outlined retain of Image.Resolved?((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v21, v23);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v22, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v14 = v29;
    if (!v19)
      goto LABEL_10;
LABEL_16:
    v43 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
    *(_QWORD *)&v42 = v19;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    outlined init with take of Any(&v42, &v31);
    goto LABEL_17;
  }
  return v12;
}

uint64_t one-time initialization function for default()
{
  uint64_t result;

  type metadata accessor for StyleBox<SystemSegmentedControlStyle>(0);
  result = swift_allocObject();
  static AnySegmentedControlStyle.default = result;
  return result;
}

uint64_t SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v12[96];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];

  outlined init with copy of SystemSegmentedControlStyle.Body(v1, (uint64_t)&v13);
  v3 = (_OWORD *)swift_allocObject();
  v4 = *(_OWORD *)v18;
  v3[5] = v17;
  v3[6] = v4;
  *(_OWORD *)((char *)v3 + 105) = *(_OWORD *)&v18[9];
  v5 = v14;
  v3[1] = v13;
  v3[2] = v5;
  v6 = v16;
  v3[3] = v15;
  v3[4] = v6;
  *(_QWORD *)a1 = partial apply for closure #1 in SystemSegmentedControlStyle.Body.body.getter;
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain();
  *(_QWORD *)(a1 + 16) = static Alignment.center.getter();
  *(_QWORD *)(a1 + 24) = v7;
  outlined init with copy of SubviewsCollection(v1, (uint64_t)&v13);
  type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
  lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  lazy protocol witness table accessor for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  ForEach<>.init(_:content:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)&v13, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>);
  *(_QWORD *)&v18[16] = closure #1 in View.forcePlatformItem();
  *(_QWORD *)&v18[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>);
  v8 = *(_OWORD *)v18;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)&v18[16];
  v9 = v14;
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v9;
  v10 = v16;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v10;
  return swift_release();
}

uint64_t closure #1 in SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for SystemSegmentItem();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v25 = a2;
    v26 = a3;
    v27 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = v27;
    v13 = *(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8);
    v14 = *(unsigned __int8 *)(v13 + 80);
    v24 = a1;
    v15 = a1 + ((v14 + 32) & ~v14);
    v16 = *(_QWORD *)(v13 + 72);
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v27 = v12;
      v18 = *(_QWORD *)(v12 + 16);
      v17 = *(_QWORD *)(v12 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v12 = v27;
      }
      *(_QWORD *)(v12 + 16) = v18 + 1;
      outlined init with take of SystemSegmentItem((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18);
      v15 += v16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    a2 = v25;
    a3 = v26;
  }
  v19 = *(_QWORD *)(a2 + 56);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 72);
  v22 = *(_BYTE *)(a2 + 80);
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = v21;
  *(_BYTE *)(a3 + 32) = v22;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  __int128 v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)&v7 = *(_QWORD *)(a1 + 88);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = (v6 & 1) == 0;
  *(_OWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 40) = v8;
  *(_BYTE *)(v4 + 48) = v9;
  result = outlined init with copy of Subview(a1, a2);
  *(_QWORD *)(a2 + 96) = partial apply for closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter;
  *(_QWORD *)(a2 + 104) = v4;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  v6 = *(_QWORD **)result;
  v7 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v7)
  {
    LOBYTE(v12) = a2;
    v17 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v6 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    v13 = 0;
    v14 = (v12 & 1) == 0;
    do
    {
      if (v13 >= v6[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      v15 = type metadata accessor for PlatformItemList.Item();
      v16 = (unint64_t)v6
          + ((*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v15 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v13;
      *(_BYTE *)(v16 + 56) = v14;
      v12 = *(_QWORD *)(v16 + 480);
      *(_QWORD *)(v16 + 472) = a3;
      *(_QWORD *)(v16 + 480) = a4;
      *(_QWORD *)(v16 + 488) = a5;
      *(_BYTE *)(v16 + 496) = a6;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      ++v13;
    }
    while (v7 != v13);
    *v17 = v6;
  }
  return result;
}

uint64_t protocol witness for SegmentedControlStyle.body(configuration:) in conformance SystemSegmentedControlStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ResolvedSegmentedControl(a1, a2);
}

id SystemSegmentedControl.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  _BYTE v14[25];
  uint64_t v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(unsigned __int8 *)(a2 + 32);
  v7 = *(void **)(a2 + 40);
  specialized SegmentedControlCoordinator.update(configuration:)(v2);
  swift_retain();
  v8 = swift_bridgeObjectRetain();
  SegmentedControlCoordinator.apply(_:to:in:)(v8, a1);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v14 = *(_OWORD *)(v2 + 8);
  *(_OWORD *)&v14[9] = *(_OWORD *)(v2 + 17);
  type metadata accessor for Binding<Int?>();
  MEMORY[0x18D75B9C8](&v15);
  if (v16)
    v9 = -1;
  else
    v9 = v15;
  v10 = objc_msgSend(a1, sel_setSelectedSegmentIndex_, v9);
  if (v6 == 1)
  {
    MEMORY[0x1E0C80A78](v10, v11);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    v12 = v7;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);

    v5 = *(_QWORD *)&v14[8];
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>, (uint64_t)&type metadata for SpringLoadingBehavior.Key, (uint64_t)&protocol witness table for SpringLoadingBehavior.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return objc_msgSend(a1, sel_setSpringLoaded_, v15 == 1);
}

uint64_t type metadata accessor for SystemSegmentedControl.UISegmentedControl()
{
  return objc_opt_self();
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance SystemSegmentedControl(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  id v3;
  Class isa;
  id v5;

  v2 = *(_QWORD *)(a1 + 40);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17SystemSegmentItemVG_yps5NeverOTg503_s7d4UI22f135SegmentedControl33_D74FE142C3C5A6C2CEA4987A69AEBD75LLV10makeUIView7contextAD011UISegmentedE0CAA0P20RepresentableContextVyADG_tFypAA0C11gH6VXEfU_Tf1cn_n(*v1);
  v3 = objc_allocWithZone((Class)type metadata accessor for SystemSegmentedControl.UISegmentedControl());
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithItems_, isa);

  objc_msgSend(v5, sel_addTarget_action_forControlEvents_, v2, sel_selectionChanged_, 4096);
  return v5;
}

id protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance SystemSegmentedControl(void *a1, uint64_t a2)
{
  return SystemSegmentedControl.updateUIView(_:context:)(a1, a2);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance SystemSegmentedControl@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  objc_class *v8;
  char *v9;
  char *v10;
  id result;
  objc_super v12;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = *((_BYTE *)v1 + 32);
  v8 = (objc_class *)type metadata accessor for SegmentedControlCoordinator();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = &v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration];
  *(_QWORD *)v10 = v3;
  *((_QWORD *)v10 + 1) = v4;
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = v6;
  v10[32] = v7;
  *(_QWORD *)&v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_itemChanges] = MEMORY[0x1E0DEE9D8];
  v12.receiver = v9;
  v12.super_class = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  result = objc_msgSendSuper2(&v12, sel_init);
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance SystemSegmentedControl(uint64_t *a1)
{
  uint64_t result;
  char v3;

  result = _ProposedSize.width.getter();
  if ((v3 & 1) == 0)
    *a1 = result;
  return result;
}

uint64_t SegmentedControlCoordinator.apply(_:to:in:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  id *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  Class isa;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v68;
  id v69;
  __int128 v70;
  unsigned int v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  int64_t v85;
  int64_t v86;
  unint64_t v87;
  unint64_t v89;
  id *v90;
  id v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  id v105;
  uint64_t v106;
  void *v107;
  void *v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  void *v113;
  id v114;
  id v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  Class v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(__int128 *__return_ptr, uint64_t, uint64_t);
  id v127;
  id v128;
  __int128 v129;
  unsigned int v130;
  void *v131;
  id v132;
  void *v133;
  id v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  _QWORD v142[2];
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  id *v146;
  id *v147;
  char *v148;
  id v149;
  uint64_t v150;
  id v151;
  int64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  _QWORD *v160;
  id *v161;
  id *v162;
  uint64_t v163;
  void *v164;
  char v165;
  __int128 v166;
  uint64_t v167;
  char v168;
  __int128 v169;
  char v170;
  __int128 v171;
  __int128 v172;
  char v173;
  char v174;
  __int16 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  char v181;
  __int128 v182;
  char v183;
  __int128 v184;
  __int128 v185;
  char v186;
  char v187;
  __int16 v188;
  uint64_t v189;

  v5 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v142 - v11;
  v13 = type metadata accessor for SystemSegmentItem();
  v154 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v159 = (char *)v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v161 = (id *)((char *)v142 - v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v142 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v158 = (uint64_t)v142 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (id *)((char *)v142 - v28);
  v155 = *(_QWORD *)(v2
                   + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration);
  swift_bridgeObjectRetain();
  v30 = Transaction.animation.getter();
  if (v30)
    swift_release();
  v31 = *(_QWORD *)(a1 + 16);
  if (!v31)
    return swift_bridgeObjectRelease();
  v160 = v22;
  v156 = v12;
  v162 = v29;
  v163 = a1 + 32;
  swift_bridgeObjectRetain();
  v157 = v31;
  v32 = v31;
  while (1)
  {
    --v32;
    v33 = (uint64_t *)(v163 + 40 * v32);
    v35 = *v33;
    v34 = v33[1];
    if (!*((_BYTE *)v33 + 32) && v34 != v35)
      break;
LABEL_5:
    if (!v32)
      goto LABEL_14;
  }
  while (v35 < v34)
  {
    objc_msgSend(a2, sel_removeSegmentAtIndex_animated_, --v34, v30 != 0);
    if (v35 == v34)
      goto LABEL_5;
  }
  __break(1u);
LABEL_14:
  v148 = v8;
  swift_bridgeObjectRelease();
  v37 = v162;
  v146 = v162 + 8;
  v147 = v161 + 8;
  v142[1] = a1;
  result = swift_bridgeObjectRetain();
  v39 = 0;
  v150 = MEMORY[0x1E0DEE9B8] + 8;
  v143 = xmmword_187BF9840;
  while (1)
  {
    v145 = v39;
    v40 = v163 + 40 * v39;
    if (!*(_BYTE *)(v40 + 32))
      goto LABEL_15;
    if (*(_BYTE *)(v40 + 32) != 1)
      break;
    v42 = *(_QWORD *)v40;
    v41 = *(_QWORD *)(v40 + 8);
    if (*(_QWORD *)v40 != v41)
    {
      if (v41 < v42)
      {
        __break(1u);
      }
      else if (v42 < v41)
      {
        if ((v42 & 0x8000000000000000) == 0)
        {
          v43 = *(_QWORD *)(v155 + 16);
          if (v42 < v43 && v41 - 1 < v43)
          {
            v45 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
            v46 = *(_QWORD *)(v154 + 72);
            v152 = v41;
            v153 = v46;
            v47 = v155 + v45 + v42 * v46;
            while (1)
            {
              outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
              if (*v37)
              {
                v48 = *v37;
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                v49 = objc_msgSend(v48, sel_string);
                if (!v49)
                {
                  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  v49 = (id)MEMORY[0x18D75CC88](v50);
                  v41 = v152;
                  swift_bridgeObjectRelease();
                }
                objc_msgSend(a2, sel_insertSegmentWithTitle_atIndex_animated_, v49, v42, v30 != 0);

                goto LABEL_42;
              }
              outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v146, (uint64_t)&v176, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
              outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v176, (uint64_t)&v178, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
              if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v178) != 1)
              {
                if (v189)
                {
                  outlined retain of Image.Resolved?((uint64_t)&v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
                  swift_unknownObjectRetain();
                  objc_opt_self();
                  v51 = (void *)swift_dynamicCastObjCClassUnconditional();
                  v52 = (uint64_t)v156;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v37, (uint64_t)v156, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
                  if (v51)
                  {
                    outlined retain of Image.Resolved?((uint64_t)&v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
LABEL_40:
                    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                    objc_msgSend(a2, sel_insertSegmentWithImage_atIndex_animated_, v51, v42, v30 != 0);

                    goto LABEL_41;
                  }
                }
                else
                {
                  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v176, (uint64_t)&v164, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
                  outlined retain of Image.Resolved((uint64_t)&v164);
                  v52 = (uint64_t)v156;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v37, (uint64_t)v156, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
                }
                v53 = (void *)v178;
                v54 = BYTE8(v178);
                v164 = (void *)v178;
                v165 = BYTE8(v178);
                v166 = v179;
                v167 = v180;
                v168 = v181;
                v169 = v182;
                v170 = v183;
                v171 = v184;
                v172 = v185;
                v173 = v186;
                v174 = v187;
                v175 = v188;
                v55 = *(_QWORD *)(v52 + 48);
                outlined copy of GraphicsImage.Contents?((id)v178, SBYTE8(v178));
                v56 = v55;
                v37 = v162;
                v51 = (void *)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v56);
                outlined retain of Image.Resolved?((uint64_t)&v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
                outlined consume of GraphicsImage.Contents?(v53, v54);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v52, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
                if (v51)
                  goto LABEL_40;
              }
              outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
              objc_msgSend(a2, sel_insertSegmentWithImage_atIndex_animated_, 0, v42, v30 != 0);
LABEL_41:
              v41 = v152;
LABEL_42:
              if (objc_msgSend(a2, sel__accessibilitySegmentItemAtIndex_, v42))
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
              }
              else
              {
                v176 = 0u;
                v177 = 0u;
              }
              outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v176, (uint64_t)&v178, (unint64_t *)&lazy cache variable for type metadata for Any?);
              if (*((_QWORD *)&v179 + 1))
              {
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
                result = swift_dynamicCast();
                if ((result & 1) != 0)
                {
                  v57 = v164;
                  v58 = v158;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, v158, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v58, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                  isa = Bool._bridgeToObjectiveC()().super.super.isa;
                  v60 = (void *)MEMORY[0x18D75CC88](0x64656C62616E65, 0xE700000000000000);
                  objc_msgSend(v57, sel_setValue_forKey_, isa, v60);

                  v61 = v160;
                  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, (uint64_t)v160, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                  v62 = v61[66];
                  v151 = v57;
                  if (v62)
                  {
                    if (*(_QWORD *)(v62 + 16)
                      && (v63 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5710]), (v64 & 1) != 0))
                    {
                      outlined init with copy of TableColumnList(*(_QWORD *)(v62 + 56) + 40 * v63, (uint64_t)&v178);
                      v65 = *((_QWORD *)&v179 + 1);
                      v66 = v180;
                      __swift_project_boxed_opaque_existential_1(&v178, *((uint64_t *)&v179 + 1));
                      v67 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v66 + 8);
                      v68 = v151;
                      swift_bridgeObjectRetain();
                      v67(&v176, v65, v66);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v178);
                    }
                    else
                    {
                      v176 = 0u;
                      v177 = 0u;
                      v69 = v57;
                      swift_bridgeObjectRetain();
                    }
                    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
                    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?);
                    if ((swift_dynamicCast() & 1) != 0)
                    {
                      v70 = v178;
                      v71 = v179;
                      swift_bridgeObjectRelease();
                      if (*((_QWORD *)&v70 + 1))
                      {
                        if (v71 >= 2)
                        {
                          outlined consume of _ViewList_ID??(v70, *((uint64_t *)&v70 + 1));
                        }
                        else
                        {
                          v72 = (void *)MEMORY[0x18D75CC88](v70, *((_QWORD *)&v70 + 1));
                          outlined consume of _ViewList_ID??(v70, *((uint64_t *)&v70 + 1));
                          objc_msgSend(v151, sel_setAccessibilityIdentifier_, v72);

                        }
                      }
                    }
                    else
                    {
                      v178 = v143;
                      LOBYTE(v179) = 0;
                      swift_bridgeObjectRelease();
                    }
                  }
                  else
                  {
                    v73 = v57;
                  }
                  v74 = PlatformItemList.Item.accessibilityEffectiveText.getter();
                  if (v74)
                  {
                    v75 = v74;
                    objc_msgSend(v151, sel_setAccessibilityAttributedLabel_, v74);

                  }
                  v76 = v160;
                  v77 = v160[66];
                  if (!v77)
                    goto LABEL_64;
                  v78 = v160[68];
                  v79 = v160[67];
                  *(_QWORD *)&v178 = v160[66];
                  swift_retain();
                  swift_bridgeObjectRetain();
                  swift_retain();
                  AccessibilityProperties.hints.getter();
                  *(_QWORD *)&v178 = v79;
                  *((_QWORD *)&v178 + 1) = v78;
                  v176 = 0uLL;
                  swift_retain();
                  swift_retain();
                  v149 = (id)static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
                  v81 = v80;
                  swift_release();
                  swift_release();
                  v76 = v160;
                  swift_bridgeObjectRelease();
                  outlined consume of PlatformItemList.Item.Accessibility?(v77);
                  if (v81)
                  {
                    v82 = (void *)MEMORY[0x18D75CC88](v149, v81);
                    swift_bridgeObjectRelease();
                    v83 = v151;
                    objc_msgSend(v151, sel_setAccessibilityHint_, v82);

                  }
                  else
                  {
LABEL_64:
                    v84 = v151;

                  }
                  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v76, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                  v37 = v162;
                  v41 = v152;
                }
              }
              else
              {
                result = outlined destroy of Any?((uint64_t)&v178);
              }
              ++v42;
              v47 += v153;
              if (v41 == v42)
                goto LABEL_15;
            }
          }
          goto LABEL_133;
        }
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      __break(1u);
      goto LABEL_132;
    }
LABEL_15:
    v39 = v145 + 1;
    if (v145 + 1 == v157)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  v86 = *(_QWORD *)(v40 + 16);
  v85 = *(_QWORD *)(v40 + 24);
  if (v86 == v85)
    goto LABEL_15;
  if (v85 < v86)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  if (v86 >= v85)
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  if ((v86 & 0x8000000000000000) == 0)
  {
    v87 = *(_QWORD *)(v155 + 16);
    if (v86 >= v87 || v85 - 1 >= v87)
      goto LABEL_137;
    v89 = (*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80);
    v151 = *(id *)(v154 + 72);
    v152 = v85;
    result = v155 + v89 + v86 * (_QWORD)v151;
    while (2)
    {
      v153 = result;
      v90 = v161;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(result, (uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      if (*v90)
      {
        v91 = *v90;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
        v92 = objc_msgSend(a2, sel_titleForSegmentAtIndex_, v86);
        if (v92)
        {
          v93 = v92;
          v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v96 = v95;

        }
        else
        {
          v94 = 0;
          v96 = 0;
        }
        v100 = objc_msgSend(v91, sel_string);
        v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v103 = v102;

        if (v96)
        {
          v99 = v159;
          if (v94 == v101 && v96 == v103)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_90;
          }
          v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v104 & 1) != 0)
          {

LABEL_90:
            v37 = v162;
LABEL_104:
            if (objc_msgSend(a2, sel__accessibilitySegmentItemAtIndex_, v86))
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              v176 = 0u;
              v177 = 0u;
            }
            outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v176, (uint64_t)&v178, (unint64_t *)&lazy cache variable for type metadata for Any?);
            if (*((_QWORD *)&v179 + 1))
            {
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
              if ((swift_dynamicCast() & 1) != 0)
              {
                v116 = v164;
                v117 = v153;
                v118 = v158;
                outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v153, v158, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v118, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                v119 = Bool._bridgeToObjectiveC()().super.super.isa;
                v120 = (void *)MEMORY[0x18D75CC88](0x64656C62616E65, 0xE700000000000000);
                objc_msgSend(v116, sel_setValue_forKey_, v119, v120);

                outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v117, (uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                v121 = v99[66];
                v149 = v116;
                if (v121)
                {
                  if (*(_QWORD *)(v121 + 16)
                    && (v122 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5710]), (v123 & 1) != 0))
                  {
                    outlined init with copy of TableColumnList(*(_QWORD *)(v121 + 56) + 40 * v122, (uint64_t)&v178);
                    v124 = *((_QWORD *)&v179 + 1);
                    v125 = v180;
                    __swift_project_boxed_opaque_existential_1(&v178, *((uint64_t *)&v179 + 1));
                    v126 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v125 + 8);
                    v127 = v149;
                    swift_bridgeObjectRetain();
                    v126(&v176, v124, v125);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v178);
                  }
                  else
                  {
                    v176 = 0u;
                    v177 = 0u;
                    v128 = v116;
                    swift_bridgeObjectRetain();
                  }
                  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
                  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?);
                  if ((swift_dynamicCast() & 1) != 0)
                  {
                    v129 = v178;
                    v130 = v179;
                    swift_bridgeObjectRelease();
                    if (*((_QWORD *)&v129 + 1))
                    {
                      if (v130 >= 2)
                      {
                        outlined consume of _ViewList_ID??(v129, *((uint64_t *)&v129 + 1));
                      }
                      else
                      {
                        v131 = (void *)MEMORY[0x18D75CC88](v129, *((_QWORD *)&v129 + 1));
                        outlined consume of _ViewList_ID??(v129, *((uint64_t *)&v129 + 1));
                        objc_msgSend(v149, sel_setAccessibilityIdentifier_, v131);

                      }
                    }
                  }
                  else
                  {
                    v178 = v143;
                    LOBYTE(v179) = 0;
                    swift_bridgeObjectRelease();
                  }
                }
                else
                {
                  v132 = v116;
                }
                v133 = PlatformItemList.Item.accessibilityEffectiveText.getter();
                v134 = v149;
                if (v133)
                {
                  v135 = v133;
                  objc_msgSend(v149, sel_setAccessibilityAttributedLabel_, v133);

                }
                v136 = v99[66];
                if (!v136)
                  goto LABEL_126;
                v137 = v99[68];
                v138 = v99[67];
                *(_QWORD *)&v178 = v99[66];
                swift_retain();
                swift_bridgeObjectRetain();
                swift_retain();
                AccessibilityProperties.hints.getter();
                *(_QWORD *)&v178 = v138;
                *((_QWORD *)&v178 + 1) = v137;
                v176 = 0uLL;
                swift_retain();
                swift_retain();
                v144 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
                v140 = v139;
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                v134 = v149;
                outlined consume of PlatformItemList.Item.Accessibility?(v136);
                if (v140)
                {
                  v141 = (void *)MEMORY[0x18D75CC88](v144, v140);
                  swift_bridgeObjectRelease();
                  objc_msgSend(v134, sel_setAccessibilityHint_, v141);

                }
                else
                {
LABEL_126:

                }
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
                v37 = v162;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v178);
            }
            ++v86;
            result = (uint64_t)v151 + v153;
            if (v152 == v86)
              goto LABEL_15;
            continue;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v99 = v159;
        }
        v105 = objc_msgSend(v91, sel_string);
        v37 = v162;
        if (!v105)
        {
          v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v105 = (id)MEMORY[0x18D75CC88](v106);
          swift_bridgeObjectRelease();
        }
        objc_msgSend(a2, sel_setTitle_forSegmentAtIndex_, v105, v86);

        goto LABEL_104;
      }
      break;
    }
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v147, (uint64_t)&v176, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v176, (uint64_t)&v178, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    v97 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v178);
    v98 = (uint64_t)v148;
    if (v97 == 1)
    {
LABEL_81:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
      objc_msgSend(a2, sel_setImage_forSegmentAtIndex_, 0, v86);
      v99 = v159;
      goto LABEL_104;
    }
    if (v189)
    {
      outlined retain of Image.Resolved?((uint64_t)&v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      objc_opt_self();
      v107 = (void *)swift_dynamicCastObjCClassUnconditional();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v161, v98, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (v107)
      {
        outlined retain of Image.Resolved?((uint64_t)&v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v98, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        goto LABEL_99;
      }
    }
    else
    {
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v176, (uint64_t)&v164, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
      outlined retain of Image.Resolved((uint64_t)&v164);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v161, v98, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    }
    v108 = (void *)v178;
    v109 = BYTE8(v178);
    v164 = (void *)v178;
    v165 = BYTE8(v178);
    v166 = v179;
    v167 = v180;
    v168 = v181;
    v169 = v182;
    v170 = v183;
    v171 = v184;
    v172 = v185;
    v173 = v186;
    v174 = v187;
    v175 = v188;
    v110 = *(_QWORD *)(v98 + 48);
    outlined copy of GraphicsImage.Contents?((id)v178, SBYTE8(v178));
    v111 = v110;
    v37 = v162;
    v107 = (void *)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v111);
    outlined retain of Image.Resolved?((uint64_t)&v176, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v108, v109);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v98, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    if (!v107)
      goto LABEL_81;
LABEL_99:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v161, (uint64_t (*)(_QWORD))type metadata accessor for SystemSegmentItem);
    v112 = objc_msgSend(a2, sel_imageForSegmentAtIndex_, v86);
    if (!v112)
      goto LABEL_102;
    v113 = v112;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
    v114 = v107;
    v115 = v113;
    LOBYTE(v113) = static NSObject.== infix(_:_:)();

    v37 = v162;
    if ((v113 & 1) != 0)
    {

    }
    else
    {
LABEL_102:
      objc_msgSend(a2, sel_setImage_forSegmentAtIndex_, v107, v86);

    }
    v99 = v159;
    goto LABEL_104;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
  return result;
}

id SegmentedControlCoordinator.selectionChanged(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (objc_msgSend(a1, sel_selectedSegmentIndex) != (id)-1)
    objc_msgSend(a1, sel_selectedSegmentIndex);
  v3 = v1 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  v6 = *(_OWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 24);
  LOBYTE(v8) = *(_BYTE *)(v3 + 32);
  type metadata accessor for Binding<Int?>();
  MEMORY[0x18D75B9C8](&v9);
  if (v10)
    v4 = -1;
  else
    v4 = v9;
  return objc_msgSend(a1, sel_setSelectedSegmentIndex_, v4, v6, v7, v8);
}

uint64_t SegmentedControlCoordinator.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

id SegmentedControlCoordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SegmentedControlCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SegmentedControlCoordinator()
{
  return objc_opt_self();
}

uint64_t destroy for SystemSegmentedControl()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SystemSegmentedControl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemSegmentedControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for SystemSegmentedControl(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemSegmentedControl(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemSegmentedControl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemSegmentedControl()
{
  return &type metadata for SystemSegmentedControl;
}

uint64_t specialized SegmentedControlCoordinator.update(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD v9[3];

  v3 = v1 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration;
  v4 = *(_QWORD *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration);
  v5 = *(_QWORD *)a1;
  v6 = v1 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_itemChanges;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)(v4, v5);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9[0] = *(_QWORD *)(a1 + 8);
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v7;
  *(_BYTE *)(v3 + 32) = *(_BYTE *)(a1 + 32);
  swift_bridgeObjectRetain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v9);
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return *(_QWORD *)v6;
}

uint64_t outlined consume of PlatformItemList.Item.Accessibility?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for StyleBox<SystemSegmentedControlStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for StyleBox<SystemSegmentedControlStyle>)
  {
    v2 = lazy protocol witness table accessor for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle();
    v4 = type metadata accessor for StyleBox(a1, (uint64_t)&unk_1E1AF4668, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for StyleBox<SystemSegmentedControlStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle;
  if (!lazy protocol witness table cache variable for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemSegmentedControlStyle, &unk_1E1AF4668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle);
  }
  return result;
}

void *type metadata accessor for SystemSegmentedControlStyle()
{
  return &unk_1E1AF4668;
}

unint64_t lazy protocol witness table accessor for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body;
  if (!lazy protocol witness table cache variable for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemSegmentedControlStyle.Body, &unk_1E1AF45E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SystemSegmentedControlStyle.Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SystemSegmentedControlStyle.Body(a2, a1);
  return a2;
}

uint64_t sub_1872C72A8()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SystemSegmentedControlStyle.Body.body.getter(a1, v2 + 16, a2);
}

void type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>, (uint64_t)&type metadata for AllPlatformItemListFlags, (uint64_t)&protocol witness table for AllPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    v2[0] = &protocol witness table for Subview;
    v2[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>)
  {
    type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>);
  }
}

uint64_t sub_1872C7470()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
}

uint64_t outlined init with take of SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemSegmentItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ResolvedSegmentedControl(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SystemSegmentedControlStyle.Body(a2, a1);
  return a2;
}

uint64_t destroy for SystemSegmentedControlStyle.Body(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  id v10;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = v9;
  v10 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char v8;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  v4 = *(void **)(a2 + 40);
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;
  char v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  v7 = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemSegmentedControlStyle.Body(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemSegmentedControlStyle.Body(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SystemSegmentedControlStyle.Body()
{
  return &unk_1E1AF45E8;
}

_UNKNOWN **sub_1872C7854()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

uint64_t SearchModifier.init<>(text:isPresented:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  id v52;
  char v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[2];

  v93 = a7;
  v103 = a6;
  v91 = a5;
  v107 = a4;
  v108 = a2;
  v105 = a3;
  v109 = a1;
  v92 = a9;
  type metadata accessor for TextField<EmptyView>(0, a2, a3, a4);
  v90 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v18, v19);
  v89 = (char *)&v84 - v20;
  v86 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v86, v21);
  v101 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, v23, v24, v25);
  v99 = v26;
  MEMORY[0x1E0C80A78](v26, v27);
  v100 = (uint64_t)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v29, v30);
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1E0C80A78](v31, v32);
  v104 = (uint64_t)&v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v102 = (uint64_t *)((char *)&v84 - v36);
  v88 = *a8;
  if (a13)
  {
    v37 = a12 & 1;
    v87 = a10;
    v98 = a11;
    v106 = a13;
  }
  else
  {
    v87 = static Text.System.search.getter();
    v98 = v38;
    v106 = v39;
    v37 = v40 & 1;
  }
  v41 = v102;
  swift_bridgeObjectRetain();
  v94 = a10;
  v95 = a11;
  v96 = a12;
  v97 = a13;
  outlined copy of Text?(a10, a11, a12, a13);
  AttributeContainer.init()();
  AttributedString.init(_:attributes:)();
  lazy protocol witness table accessor for type StringToAttributedStringProjection and conformance StringToAttributedStringProjection();
  v42 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *v41 = v109;
  v41[1] = v42;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v41, v104, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  v43 = v100;
  v44 = v100 + *(int *)(v99 + 48);
  *(_QWORD *)v44 = 0;
  *(_QWORD *)(v44 + 8) = 0;
  v84 = v44;
  *(_WORD *)(v44 + 16) = 0;
  v45 = v101;
  *v101 = 2;
  v46 = (void *)objc_opt_self();
  swift_retain();
  swift_bridgeObjectRetain();
  v47 = v87;
  v48 = v98;
  outlined copy of Text.Storage(v87, v98, v37);
  v49 = objc_msgSend(v46, sel_currentTraitCollection);
  v50 = objc_msgSend(v49, sel_horizontalSizeClass);

  v51 = objc_msgSend(v46, sel_currentTraitCollection);
  v52 = objc_msgSend(v51, sel_userInterfaceIdiom);

  v53 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v50, (uint64_t)v52, 2u);
  v45[1] = (v53 == 2) | v53 & 1;
  *((_WORD *)v45 + 1) = 2;
  *((_DWORD *)v45 + 1) = 0;
  v45[8] = 1;
  v54 = v86;
  AttributedString.init()();
  v45[*(int *)(v54 + 40)] = 0;
  v55 = &v45[*(int *)(v54 + 44)];
  *(_DWORD *)v55 = 0;
  v55[4] = 0;
  v110 = 0;
  v56 = v106;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v47, v48, v37);
  Text.assertUnstyled(_:options:)();
  outlined consume of Text.Storage(v47, v48, v37);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 8) = v47;
  *(_QWORD *)(v43 + 16) = v48;
  *(_BYTE *)(v43 + 24) = v37;
  *(_QWORD *)(v43 + 32) = v56;
  v106 = v56;
  v57 = v99;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v104, v43 + *(int *)(v99 + 44), (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  v58 = v43 + *(int *)(v57 + 52);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v45, v58, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)(v58 + *(int *)(v59 + 28)) = 0;
  v86 = v43 + *(int *)(v57 + 40);
  v85 = v37;
  v110 = v109;
  v111 = v108;
  v112 = v105;
  v113 = v107;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  LODWORD(v99) = v37;
  outlined copy of Text.Storage(v47, v48, v37);
  type metadata accessor for Binding<String>();
  v61 = v60;
  swift_retain();
  MEMORY[0x18D75B9C8](v114, v61);
  v63 = v114[0];
  v62 = v114[1];
  type metadata accessor for Binding<TextSelection?>(0);
  v65 = v64;
  v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
  v67 = (uint64_t)v89;
  v66(v89, 1, 1, v64);
  v68 = (uint64_t)&v17[*(int *)(v90 + 56)];
  v66((char *)v68, 1, 1, v65);
  *((_QWORD *)v17 + 9) = v63;
  *((_QWORD *)v17 + 10) = v62;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *((_QWORD *)v17 + 19) = 0;
  *((_OWORD *)v17 + 10) = xmmword_187C1E760;
  *((_DWORD *)v17 + 44) = 0;
  v69 = v108;
  *(_QWORD *)v17 = v109;
  *((_QWORD *)v17 + 1) = v69;
  v70 = v106;
  v71 = v107;
  *((_QWORD *)v17 + 2) = v105;
  *((_QWORD *)v17 + 3) = v71;
  *((_WORD *)v17 + 16) = 0;
  *((_QWORD *)v17 + 5) = v47;
  *((_QWORD *)v17 + 6) = v48;
  *((_QWORD *)v17 + 7) = v85;
  *((_QWORD *)v17 + 8) = v70;
  outlined assign with take of Binding<TextSelection?>?(v67, v68);
  outlined init with take of TableCellFormula((uint64_t)v17, v86, (uint64_t (*)(_QWORD))type metadata accessor for TextField<EmptyView>);
  *(_BYTE *)v43 = v88;
  v72 = v93;
  v73 = v103;
  v74 = v91;
  v75 = v47;
  if (v103)
  {
    v76 = v84;
    v77 = *(_QWORD *)v84;
    v78 = *(_QWORD *)(v84 + 8);
    v79 = *(_BYTE *)(v84 + 17);
    *(_QWORD *)v84 = v91;
    *(_QWORD *)(v76 + 8) = v73;
    v80 = *(unsigned __int8 *)(v76 + 16);
    *(_BYTE *)(v76 + 16) = v72 & 1;
    *(_BYTE *)(v76 + 17) = 1;
    swift_retain();
    swift_retain();
    v81 = v78;
    v75 = v47;
    v48 = v98;
    v82 = v80;
    v73 = v103;
    outlined consume of StateOrBinding<Bool>(v77, v81, v82, v79);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v104, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v101, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined consume of Binding<NavigationSplitViewColumn>?(v74, v73);
  outlined init with take of TableCellFormula(v100, v92, (uint64_t (*)(_QWORD))type metadata accessor for SearchModifier<TextField<EmptyView>>);
  outlined consume of Text.Storage(v75, v48, v99);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v94, v95, v96, v97);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.searchable(text:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;

  v28 = a9;
  v26 = a3;
  v27 = a12;
  v25 = a11;
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, a2, a3, a4);
  v20 = v19;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a6, a7, a8, a10);
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v26, a4, 0, 0, 0, &v29, (uint64_t)v23, a6, a7, a8, a10);
  MEMORY[0x18D75B4AC](v23, v25, v20, v27);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

void type metadata accessor for SearchModifier<TextField<EmptyView>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!lazy cache variable for type metadata for SearchModifier<TextField<EmptyView>>)
  {
    type metadata accessor for TextField<EmptyView>(255, a2, a3, a4);
    v6 = v5;
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextField<EmptyView> and conformance TextField<A>, (uint64_t (*)(uint64_t))type metadata accessor for TextField<EmptyView>, (uint64_t)&protocol conformance descriptor for TextField<A>);
    v9 = type metadata accessor for SearchModifier(a1, v6, v7, v8);
    if (!v10)
      atomic_store(v9, (unint64_t *)&lazy cache variable for type metadata for SearchModifier<TextField<EmptyView>>);
  }
}

void type metadata accessor for TextField<EmptyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TextField<EmptyView>)
  {
    v4 = type metadata accessor for TextField(0, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TextField<EmptyView>);
  }
}

uint64_t View.searchable(text:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;

  v26 = a6;
  v24 = a3;
  v25 = a9;
  v23 = a8;
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, a2, a3, a4);
  v14 = v13;
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = Text.init(_:tableName:bundle:comment:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v24, a4, 0, 0, 0, &v27, (uint64_t)v17, v18, v20, v19 & 1, v21);
  MEMORY[0x18D75B4AC](v17, v23, v14, v25);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t View.searchable<A>(text:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;

  v38 = a7;
  v35 = a3;
  v36 = a9;
  v37 = a10;
  v34[1] = a11;
  v17 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, v20, v21, v22);
  v24 = v23;
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v28 = (char *)v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *a5;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a6, a8, v26);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v29 = Text.init<A>(_:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v35, a4, 0, 0, 0, &v39, (uint64_t)v28, v29, v31, v30 & 1, v32);
  MEMORY[0x18D75B4AC](v28, v38, v24, v37);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t View.searchable(text:isPresented:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;

  v35 = a9;
  v31 = a7;
  v29 = a5;
  v30 = a6;
  v28 = a1;
  v34 = a14;
  v32 = a3;
  v33 = a15;
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, a2, a3, a4);
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *a8;
  swift_retain();
  v23 = a2;
  swift_retain();
  v24 = a4;
  swift_bridgeObjectRetain();
  outlined copy of Text?(a10, a11, a12, a13);
  v25 = v29;
  swift_retain();
  v26 = v30;
  swift_retain();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v28, v23, v32, v24, v25, v26, v31 & 1, &v36, (uint64_t)v22, a10, a11, a12, a13);
  MEMORY[0x18D75B4AC](v22, v34, v19, v33);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;

  v40 = a9;
  v36 = a7;
  v34 = a5;
  v35 = a6;
  v33 = a4;
  v38 = a3;
  v39 = a15;
  v37 = a14;
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, a2, a3, a4);
  v19 = v18;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *a8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = Text.init(_:tableName:bundle:comment:)();
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  v30 = v34;
  swift_retain();
  v31 = v35;
  swift_retain();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v38, v33, v30, v31, v36 & 1, &v41, (uint64_t)v22, v23, v25, v29, v27);
  MEMORY[0x18D75B4AC](v22, v37, v19, v39);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t View.searchable<A>(text:isPresented:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;

  v50 = a9;
  v46 = a7;
  v44 = a5;
  v45 = a6;
  v42 = a1;
  v43 = a14;
  v48 = a11;
  v49 = a3;
  v47 = a13;
  v17 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>(0, v20, v21, v22);
  v24 = v23;
  v26 = MEMORY[0x1E0C80A78](v23, v25);
  v28 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *a8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a10, a12, v26);
  swift_retain();
  v29 = a2;
  swift_retain();
  v30 = a4;
  swift_bridgeObjectRetain();
  v31 = Text.init<A>(_:)();
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = v44;
  swift_retain();
  v39 = v45;
  swift_retain();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v42, v29, v49, v30, v38, v39, v46 & 1, &v51, (uint64_t)v28, v31, v33, v37, v35);
  MEMORY[0x18D75B4AC](v28, v48, v24, v47);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t sub_1872C8960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for SearchModifier<TextField<EmptyView>>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>, (uint64_t)&protocol conformance descriptor for SearchModifier<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_1872C89E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for SearchModifier<TextField<EmptyView>>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>, (uint64_t)&protocol conformance descriptor for SearchModifier<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

void type metadata accessor for Binding<String>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<String>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>);
  }
}

uint64_t outlined consume of StateOrBinding<Bool>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  result = swift_release();
  if ((a4 & 1) != 0)
    return swift_release();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigableListModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  int v32;
  _QWORD *__dst;
  _QWORD *v34;
  uint64_t v35;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = ~(unint64_t)(v6 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v5 + 64);
  v10 = ((v6 & 0xF8) + 23) & v8;
  if (v7)
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = v9 + 1;
  if (v11 <= v9)
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = v11;
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = v12;
  v14 = v10 | 1;
  v15 = (v10 | 1) + v13;
  if ((v6 & 0x1000F8) != 0
    || ((v15 + (((v6 & 0xF8) + 15) & v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v17 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v17 + v10);
  }
  else
  {
    v19 = *a2;
    v18 = (unint64_t)a2 + 15;
    *a1 = v19;
    v20 = ((unint64_t)a1 + 15) & v8;
    v21 = v18 & v8;
    v22 = (_QWORD *)(((v18 & v8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if (*v22 < 0xFFFFFFFFuLL)
    {
      memcpy((void *)(((unint64_t)a1 + 15) & v8), (const void *)(v18 & v8), v15);
    }
    else
    {
      v32 = v7;
      v34 = (_QWORD *)(v18 & v8);
      v35 = ((unint64_t)a1 + 15) & v8;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v23 = (_QWORD *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v23 = *v22;
      __dst = (_QWORD *)(((unint64_t)v23 + 15) & v8);
      v24 = (_QWORD *)(((unint64_t)v22 + 15) & v8);
      v25 = *((unsigned __int8 *)v24 + v13);
      swift_retain();
      swift_retain();
      if (v25 >= 3)
      {
        if (v13 <= 3)
          v26 = v13;
        else
          v26 = 4;
        __asm { BR              X11 }
      }
      if (v25 == 2)
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(__dst, v24, v4);
        *((_BYTE *)__dst + v13) = 2;
        v21 = (unint64_t)v34;
      }
      else if (v25 == 1)
      {
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v24, 1, v4))
        {
          v27 = __dst;
          memcpy(__dst, v24, v11);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(__dst, v24, v4);
          v28 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56);
          v27 = __dst;
          v28(__dst, 0, 1, v4);
        }
        v21 = (unint64_t)v34;
        *((_BYTE *)v27 + v13) = 1;
      }
      else
      {
        v21 = (unint64_t)v34;
        *__dst = *v24;
        *((_BYTE *)__dst + v13) = 0;
        swift_bridgeObjectRetain();
      }
      v29 = 8;
      if (v9 > 8)
        v29 = v9;
      if (v9 + 1 <= v9)
        v30 = v9;
      else
        v30 = v9 + 1;
      if (v30 <= 8)
        v30 = 8;
      if (v32)
        v13 = v29;
      else
        v13 = v30;
      v20 = v35;
    }
    *(_QWORD *)(((v20 | 7) + v14 + v13) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v21 | 7) + v14 + v13) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

_QWORD *initializeWithTake for NavigableListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 + 15;
  v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)a1 + v7 + 15) & v9;
  v11 = ((unint64_t)a2 + v7 + 15) & v9;
  v12 = *(_QWORD *)(v5 + 64);
  v13 = (v7 + 23) & v9;
  v14 = (_QWORD *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v6)
      v24 = *(_QWORD *)(v5 + 64);
    else
      v24 = v12 + 1;
    if (v24 > v12)
      v12 = v24;
    if (v12 <= 8)
      v21 = 8;
    else
      v21 = v12;
    memcpy((void *)v10, (const void *)v11, (v13 | 1) + v21);
  }
  else
  {
    v15 = v6 == 0;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v16 = (_QWORD *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v16 = *v14;
    v17 = (unint64_t)v16 + v8;
    v18 = (_QWORD *)(v17 & v9);
    v19 = (_QWORD *)(((unint64_t)v14 + v8) & v9);
    if (v15)
      v20 = v12 + 1;
    else
      v20 = v12;
    if (v20 > v12)
      v12 = v20;
    if (v12 <= 8)
      v21 = 8;
    else
      v21 = v12;
    v22 = *((unsigned __int8 *)v19 + v21);
    if (v22 >= 3)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    if (v22 == 2)
    {
      (*(void (**)(unint64_t, _QWORD *, uint64_t))(v5 + 32))(v17 & v9, v19, v4);
      v25 = 2;
LABEL_32:
      *((_BYTE *)v18 + v21) = v25;
      goto LABEL_33;
    }
    if (v22 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v19, 1, v4))
      {
        memcpy(v18, v19, v20);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v18, v19, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
      }
      v25 = 1;
      goto LABEL_32;
    }
    *v18 = *v19;
    *((_BYTE *)v18 + v21) = 0;
  }
LABEL_33:
  *(_QWORD *)(((v10 | 7) + (v13 | 1) + v21) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v11 | 7) + (v13 | 1) + v21) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for NavigableListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  uint64_t v38;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = v7 + 15;
  v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)a1 + v7 + 15) & v9;
  v11 = ((unint64_t)a2 + v7 + 15) & v9;
  v12 = *(_QWORD *)(v5 + 64);
  v38 = (v7 + 23) & v9;
  v13 = (_QWORD *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (unint64_t *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      v16 = v6 == 0;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *v13 = *v14;
      v17 = (_QWORD *)(((unint64_t)v13 + v8) & v9);
      v18 = (_QWORD *)(((unint64_t)v14 + v8) & v9);
      if (v16)
        v19 = v12 + 1;
      else
        v19 = v12;
      if (v19 <= v12)
        v24 = v12;
      else
        v24 = v19;
      if (v24 <= 8)
        v21 = 8;
      else
        v21 = v24;
      v25 = *((unsigned __int8 *)v18 + v21);
      if (v25 >= 3)
      {
        if (v21 <= 3)
          v26 = v21;
        else
          v26 = 4;
        __asm { BR              X12 }
      }
      if (v25 != 2)
      {
        if (v25 == 1)
        {
          v31 = v4;
          if (!(*(unsigned int (**)(_QWORD *, uint64_t))(v5 + 48))(v18, 1))
          {
LABEL_80:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v17, v18, v31);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v31);
            goto LABEL_81;
          }
LABEL_64:
          memcpy(v17, v18, v19);
LABEL_81:
          v35 = 1;
LABEL_85:
          *((_BYTE *)v17 + v21) = v35;
          goto LABEL_86;
        }
LABEL_82:
        *v17 = *v18;
        *((_BYTE *)v17 + v21) = 0;
LABEL_86:
        v32 = v38;
        goto LABEL_87;
      }
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v17, v18, v4);
LABEL_84:
      v35 = 2;
      goto LABEL_85;
    }
    if (v6)
      v30 = *(_QWORD *)(v5 + 64);
    else
      v30 = v12 + 1;
    if (v30 <= v12)
      v30 = *(_QWORD *)(v5 + 64);
    if (v30 <= 8)
      v21 = 8;
    else
      v21 = v30;
  }
  else
  {
    v37 = v4;
    if (v15 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      swift_release();
      *v13 = *v14;
      swift_release();
      v16 = v6 == 0;
      v17 = (_QWORD *)(((unint64_t)v13 + v8) & v9);
      v18 = (_QWORD *)(((unint64_t)v14 + v8) & v9);
      if (v16)
        v19 = v12 + 1;
      else
        v19 = v12;
      if (v19 <= v12)
        v20 = v12;
      else
        v20 = v19;
      if (v20 <= 8)
        v21 = 8;
      else
        v21 = v20;
      if (v17 == v18)
        goto LABEL_86;
      v22 = *((unsigned __int8 *)v17 + v21);
      if (v22 >= 3)
      {
        if (v21 <= 3)
          v23 = v21;
        else
          v23 = 4;
        __asm { BR              X12 }
      }
      if (v22 == 2)
        goto LABEL_71;
      if (v22 == 1)
      {
        if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v37))
LABEL_71:
          (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v17, v37);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v33 = *((unsigned __int8 *)v18 + v21);
      if (v33 >= 3)
      {
        if (v21 <= 3)
          v34 = v21;
        else
          v34 = 4;
        __asm { BR              X12 }
      }
      v31 = v37;
      if (v33 != 2)
      {
        if (v33 == 1)
        {
          if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v18, 1, v37))
            goto LABEL_80;
          goto LABEL_64;
        }
        goto LABEL_82;
      }
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 32))(v17, v18, v37);
      goto LABEL_84;
    }
    swift_release();
    swift_release();
    if (v6)
      v27 = v12;
    else
      v27 = v12 + 1;
    if (v27 <= v12)
      v27 = v12;
    if (v27 <= 8)
      v21 = 8;
    else
      v21 = v27;
    v28 = *(unsigned __int8 *)((((unint64_t)v13 + v8) & v9) + v21);
    if (v28 >= 3)
    {
      if (v21 <= 3)
        v29 = v21;
      else
        v29 = 4;
      __asm { BR              X12 }
    }
    if (v28 == 2)
      goto LABEL_68;
    if (v28 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_70;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v13 + v8) & v9, 1, v37))LABEL_68:(*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v13 + v8) & v9, v37);
  }
LABEL_70:
  v32 = v38;
  memcpy((void *)v10, (const void *)v11, (v38 | 1) + v21);
LABEL_87:
  *(_QWORD *)(((v10 | 7) + (v32 | 1) + v21) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((v11 | 7) + (v32 | 1) + v21) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigableListModifier(int *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
    v5 = *(_QWORD *)(v3 + 64);
  else
    v5 = v4 + 1;
  if (v5 <= v4)
    v5 = *(_QWORD *)(v3 + 64);
  if (v5 <= 8)
    v5 = 8;
  if (!a2)
    return 0;
  v6 = *(_DWORD *)(v3 + 80) & 0xF8;
  v7 = v6 | 7;
  v8 = v5 + ((v6 + 23) & ~(v6 | 7)) + 1;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_10;
  v11 = ((v8 + ((v6 + 15) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v12 = v11 & 0xFFFFFFF8;
  v13 = a2 - 2147483646;
  if ((v11 & 0xFFFFFFF8) != 0)
    v13 = 2;
  if (v13 >= 0x10000)
    v14 = 4;
  else
    v14 = 2;
  if (v13 < 0x100)
    v15 = 1;
  else
    v15 = v14;
  if (v15 == 4)
  {
    v16 = *(int *)((char *)a1 + v11);
    if (!v16)
      goto LABEL_10;
  }
  else if (v15 == 2)
  {
    v16 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!v16)
      goto LABEL_10;
  }
  else
  {
    v16 = *((unsigned __int8 *)a1 + v11);
    if (!v16)
    {
LABEL_10:
      v9 = *(_QWORD *)(((((unint64_t)a1 + v7 + 8) & ~v7 | 7) + v8) & 0xFFFFFFFFFFFFF8);
      if (v9 >= 0xFFFFFFFF)
        LODWORD(v9) = -1;
      return (v9 + 1);
    }
  }
  v17 = v16 - 1;
  if (v12)
  {
    v17 = 0;
    v18 = *a1;
  }
  else
  {
    v18 = 0;
  }
  return (v18 | v17) ^ 0x80000000;
}

void storeEnumTagSinglePayload for NavigableListModifier(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = (v7 + 15) & ~(v7 | 7);
  v9 = (v7 + 23) & ~(v7 | 7);
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v6 + 1;
  if (v10 > v6)
    v6 = v10;
  if (v6 <= 8)
    v6 = 8;
  v11 = ((v6 + v9 + 1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a3 < 0)
  {
    v13 = a3 - 2147483646;
    if ((_DWORD)v11)
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v12 = 1;
    else
      v12 = v14;
    if ((a2 & 0x80000000) == 0)
LABEL_10:
      __asm { BR              X13 }
  }
  else
  {
    v12 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_10;
  }
  if ((_DWORD)v11)
  {
    v15 = a2 ^ 0x80000000;
    bzero(a1, v11);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_1872C97EC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x1872C97D8);
  JUMPOUT(0x1872C97B8);
}

void sub_1872C97F8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872C97D8);
}

void sub_1872C9800()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872C97D8);
}

uint64_t closure #1 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for NavigableListModifier(0, a2, a3, a4);
  v5 = MEMORY[0x1E0CE7DD0];
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for NavigableListModifier(0, a2, a3, a4);
  v8 = a1 + *(int *)(v7 + 36);
  v13[2] = v7;
  type metadata accessor for SelectionManagerBox(255, a2, a3, v9);
  type metadata accessor for Binding();
  v14 = type metadata accessor for Optional();
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  return v15;
}

uint64_t closure #3 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = type metadata accessor for NavigableListModifier(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 40);
  v11[2] = v5;
  v7 = type metadata accessor for NavigationStateHost();
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v11, v7, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v11[5];
}

uint64_t NavigableListModifier.BoundListSelectionDetector.init(listKey:selection:isEditing:navigationAuthority:phase:transaction:isExtractionPass:cycleDetector:lastResetSeed:lastSelection:wasEditing:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v15 = *(_DWORD *)(a8 + 8);
  v16 = *(_BYTE *)(a8 + 12);
  *(_QWORD *)a9 = a1;
  *(_DWORD *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 12) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 24) = a5;
  *(_DWORD *)(a9 + 28) = a6;
  *(_BYTE *)(a9 + 32) = a7;
  *(_QWORD *)(a9 + 36) = *(_QWORD *)a8;
  *(_DWORD *)(a9 + 44) = v15;
  *(_BYTE *)(a9 + 48) = v16;
  *(_DWORD *)(a9 + 52) = a10;
  v17 = type metadata accessor for NavigableListModifier.BoundListSelectionDetector(0, a13, a14, a4);
  v18 = a9 + *(int *)(v17 + 68);
  type metadata accessor for SelectionManagerBox(255, a13, a14, v19);
  v20 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, a11, v20);
  *(_BYTE *)(a9 + *(int *)(v17 + 72)) = a12;
  return result;
}

uint64_t NavigableListModifier.ListKey.inheritedStackKey.getter()
{
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetWeakValue();
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t NavigableListModifier.ListKey.selection.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  type metadata accessor for SelectionManagerBox(255, a1, a2, a2);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t NavigableListModifier.ListKey.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1;
  type metadata accessor for SelectionManagerBox(255, a1, a2, a2);
  v6 = type metadata accessor for Binding();
  v33 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - v13;
  v15 = NavigableListModifier.ListKey.inheritedStackKey.getter();
  if (v16 == 7)
    v18 = 0;
  else
    v18 = v15;
  v19 = 6;
  if (v16 != 7)
    v19 = v16;
  v31 = v19;
  v32 = v18;
  if (v16 == 7)
    v20 = 0;
  else
    v20 = v17;
  v30 = v20;
  v29 = *(_QWORD *)AGGraphGetValue();
  NavigableListModifier.ListKey.selection.getter(v4, a2, (uint64_t)v14);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  v28 = v21(v14, 1, v6) != 1;
  v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23 = v14;
  v24 = v33;
  v22(v23, v33);
  NavigableListModifier.ListKey.selection.getter(v4, a2, (uint64_t)v10);
  if (v21(v10, 1, v6) == 1)
    v4 = 0;
  result = ((uint64_t (*)(char *, uint64_t))v22)(v10, v24);
  v26 = v32;
  *a3 = v29;
  a3[1] = v26;
  v27 = v30;
  a3[2] = v31;
  a3[3] = v27;
  a3[4] = v28;
  a3[5] = v4;
  return result;
}

double NavigableListModifier.EnsureNavigationAuthority.inheritedAuthority.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t NavigableListModifier.EnsureNavigationAuthority.selection.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

double protocol witness for static Rule.initialValue.getter in conformance NavigableListModifier<A>.ListKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 2;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigableListModifier<A>.ListKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[6];

  NavigableListModifier.ListKey.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v4);
  return outlined init with take of Image.Resolved?((uint64_t)v4, a2, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
}

uint64_t NavigableListModifier.EnsureNavigationAuthority.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  __n128 v20;
  _OWORD *Value;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE v43[24];
  _OWORD v44[3];
  _OWORD v45[2];
  __n128 v46;
  __n128 v47[3];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 16);
  type metadata accessor for SelectionManagerBox(255, v24, v6, a4);
  v7 = type metadata accessor for Binding();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v23 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v23 - v16;
  NavigableListModifier.EnsureNavigationAuthority.selection.getter(a1, v18, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, v7);
    NavigableListModifier.EnsureNavigationAuthority.inheritedAuthority.getter((uint64_t)&v33);
    if (*((_QWORD *)&v33 + 1) == 1)
    {
      outlined destroy of NavigationAuthority?((uint64_t)&v33);
    }
    else
    {
      if (*((_QWORD *)&v33 + 1) != 2)
      {
LABEL_12:
        outlined init with take of NavigationAuthority((uint64_t)&v33, (uint64_t)v43);
        if ((*(_BYTE *)(v4 + 48) & 1) != 0)
        {
LABEL_17:
          outlined init with copy of NavigationAuthority((uint64_t)v43, (uint64_t)&v33);
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          AGGraphSetOutputValue();
          outlined destroy of NavigationAuthority?((uint64_t)&v33);
          outlined destroy of NavigationAuthority((uint64_t)v43);
          return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v7);
        }
        *(_BYTE *)(v4 + 48) = 1;
        outlined init with copy of NavigationAuthority((uint64_t)v43, (uint64_t)v42);
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        Value = (_OWORD *)AGGraphGetValue();
        v22 = Value[1];
        v44[0] = *Value;
        v44[1] = v22;
        v44[2] = Value[2];
        result = outlined init with take of Image.Resolved?((uint64_t)v44, (uint64_t)v45, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
        if (v46.n128_u64[1] != 1)
        {
          v47[0] = (__n128)v45[0];
          v47[1] = (__n128)v45[1];
          v47[2] = v46;
          static NavigationRequest.setSelection<A>(_:list:)((uint64_t)v17, v47, v24, v6, (uint64_t)&v33);
          if (*(_BYTE *)(v4 + 20) != 1)
          {
            v30 = v39;
            v31 = v40;
            v32 = v41;
            v26 = v35;
            v27 = v36;
            v28 = v37;
            v29 = v38;
            *(_OWORD *)v25 = v33;
            *(_OWORD *)&v25[16] = v34;
            NavigationAuthority.enqueueRequest(_:)((__int128 *)v25);
          }
          outlined release of NavigationRequest((uint64_t)&v33);
          outlined destroy of NavigationAuthority((uint64_t)v42);
          goto LABEL_17;
        }
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
      outlined destroy of NavigationAuthority??((uint64_t)&v33);
    }
    outlined init with copy of NavigationAuthority?(v4 + 24, (uint64_t)&v33);
    if (*((_QWORD *)&v33 + 1) == 1)
    {
      outlined destroy of NavigationAuthority?((uint64_t)&v33);
      type metadata accessor for NavigationStateHost();
      AGGraphGetValue();
      swift_retain();
      EnvironmentValues.init()();
      v20 = v47[0];
      swift_weakInit();
      swift_weakAssign();
      swift_release();
      *(__n128 *)&v25[8] = v20;
      outlined init with take of NavigationAuthority((uint64_t)v25, (uint64_t)&v33);
      outlined assign with take of NavigationAuthority?((uint64_t)&v33, v4 + 24);
      result = outlined init with copy of NavigationAuthority?(v4 + 24, (uint64_t)&v33);
      if (*((_QWORD *)&v33 + 1) == 1)
        goto LABEL_20;
    }
    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  NavigableListModifier.EnsureNavigationAuthority.inheritedAuthority.getter((uint64_t)v25);
  if (*(_QWORD *)&v25[8] == 2)
  {
    v33 = xmmword_187BF9840;
    *(_QWORD *)&v34 = 0;
    outlined destroy of NavigationAuthority??((uint64_t)v25);
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v25, (uint64_t)&v33, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphSetOutputValue();
  return outlined destroy of NavigationAuthority?((uint64_t)&v33);
}

__int128 *NavigableListModifier.BoundListSelectionDetector.listKey.getter@<X0>(_OWORD *a1@<X8>)
{
  __int128 *result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = (__int128 *)AGGraphGetWeakValue();
  if (result)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
  }
  else
  {
    v5 = xmmword_187BF9F90;
    v3 = 0uLL;
    v4 = 0uLL;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t NavigableListModifier.BoundListSelectionDetector.selection.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  type metadata accessor for SelectionManagerBox(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for Binding();
  v4 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

double NavigableListModifier.BoundListSelectionDetector.navigationAuthority.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t WeakValue;
  double result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationAuthority?(WeakValue, a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = xmmword_187BF9F90;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance NavigableListModifier<A>.EnsureNavigationAuthority@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_187BF9F90;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t NavigableListModifier.BoundListSelectionDetector.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t result;
  int v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  void (*v49)(char *, _BYTE *, uint64_t);
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  void (*v56)(char *, _BYTE *, uint64_t);
  unsigned int (*v57)(_BYTE *, uint64_t, uint64_t);
  void (*v58)(_BYTE *, uint64_t);
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _BYTE *v65;
  void (*v66)(_BYTE *, uint64_t);
  char v67;
  char v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  void (*v77)(_BYTE *, uint64_t);
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE v81[12];
  int v82;
  _BYTE *v83;
  uint64_t v84;
  void (*v85)(char *, _BYTE *, uint64_t);
  int v86;
  _BYTE *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t TupleTypeMetadata2;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  _BYTE v119[24];
  _OWORD v120[3];
  _QWORD v121[6];
  _BYTE v122[48];
  _OWORD v123[2];
  __n128 v124;
  __n128 v125[4];

  v6 = *(_QWORD *)(a1 + 16);
  v91 = *(_QWORD *)(a1 + 24);
  v92 = v6;
  v7 = type metadata accessor for SelectionManagerBox(255, v6, v91, a4);
  v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v89 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v9);
  v93 = &v81[-v10];
  v100 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v90 = &v81[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  v94 = &v81[-v16];
  MEMORY[0x1E0C80A78](v17, v18);
  v96 = &v81[-v19];
  v98 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v88 = &v81[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v23, v24);
  v97 = &v81[-v25];
  v99 = v7;
  v26 = type metadata accessor for Binding();
  v27 = type metadata accessor for Optional();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = &v81[-v30];
  v32 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = &v81[-v35];
  NavigableListModifier.BoundListSelectionDetector.selection.getter(a1, v37, (uint64_t)v31);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v26) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v28 + 8))(v31, v27);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32))(v36, v31, v26);
  NavigableListModifier.BoundListSelectionDetector.listKey.getter(v120);
  outlined init with take of NavigationState.ListKey??((uint64_t)v120, (uint64_t)v121);
  if (v121[5] == 2)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v32 + 8))(v36, v26);
  outlined init with take of Image.Resolved?((uint64_t)v121, (uint64_t)v122, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  outlined init with take of Image.Resolved?((uint64_t)v122, (uint64_t)v123, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  if (v124.n128_u64[1] == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v32 + 8))(v36, v26);
  v125[0] = (__n128)v123[0];
  v125[1] = (__n128)v123[1];
  v125[2] = v124;
  v39 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v39 != *(_DWORD *)(v4 + 52))
  {
    *(_DWORD *)(v4 + 52) = v39;
    *(_QWORD *)(v4 + 40) = 0xFFFFFFFFLL;
    *(_BYTE *)(v4 + 48) = 0;
  }
  v40 = NavigableListModifier.BoundListSelectionDetector.navigationAuthority.getter((uint64_t)&v110);
  v42 = v99;
  v41 = v100;
  if (*((_QWORD *)&v110 + 1) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, double))(v32 + 8))(v36, v26, v40);
    return outlined destroy of NavigationAuthority?((uint64_t)&v110);
  }
  if (*((_QWORD *)&v110 + 1) == 2)
  {
    (*(void (**)(_BYTE *, uint64_t, double))(v32 + 8))(v36, v26, v40);
    return outlined destroy of NavigationAuthority??((uint64_t)&v110);
  }
  outlined init with take of NavigationAuthority((uint64_t)&v110, (uint64_t)v119);
  v43 = *(_DWORD *)(v4 + 12);
  v44 = *MEMORY[0x1E0CFED28];
  v87 = v36;
  if (v43 == v44)
    v45 = 0;
  else
    v45 = *(unsigned __int8 *)AGGraphGetValue();
  v46 = *(unsigned __int8 *)(v4 + *(int *)(a1 + 72));
  v86 = v45;
  v82 = v45 ^ v46;
  v47 = v97;
  MEMORY[0x18D75B9C8](v26);
  v48 = v4 + *(int *)(a1 + 68);
  v49 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16);
  v84 = v4;
  v85 = v49;
  v50 = v96;
  v49(v96, (_BYTE *)v48, v8);
  v51 = v98;
  v52 = v94;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v98 + 16))(v94, v47, v42);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v42);
  v53 = v93;
  v54 = &v93[*(int *)(TupleTypeMetadata2 + 48)];
  v55 = v50;
  v56 = v85;
  v85(v93, v55, v8);
  v83 = v54;
  v56(v54, v52, v8);
  v57 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48);
  if (v57(v53, 1, v42) != 1)
  {
    v64 = (uint64_t)v90;
    v56(v90, v53, v8);
    v65 = v83;
    if (v57(v83, 1, v42) != 1)
    {
      v72 = v98;
      v73 = v42;
      v74 = v88;
      (*(void (**)(char *, _BYTE *, uint64_t))(v98 + 32))(v88, v65, v73);
      v61 = v91;
      v63 = static SelectionManagerBox.== infix(_:_:)(v64, v74, v92, v91);
      v75 = *(void (**)(char *, uint64_t))(v72 + 8);
      v76 = v74;
      v42 = v73;
      v75(v76, v73);
      v77 = *(void (**)(_BYTE *, uint64_t))(v100 + 8);
      v77(v94, v8);
      v77(v96, v8);
      v75(v90, v73);
      v78 = v8;
      v62 = v92;
      v77(v93, v78);
      v60 = v84;
      if (v82 & 1 | ((v63 & 1) == 0))
        goto LABEL_22;
LABEL_31:
      v79 = v97;
      $defer #2 <A>() in NavigableListModifier.BoundListSelectionDetector.updateValue()(v60, (uint64_t)v97, v62, v61);
      (*(void (**)(_BYTE *, uint64_t))(v98 + 8))(v79, v42);
      outlined destroy of NavigationAuthority((uint64_t)v119);
      (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v87, v26);
      result = type metadata accessor for NavigableListModifier.BoundListSelectionDetector(0, v62, v61, v80);
      *(_BYTE *)(v60 + *(int *)(result + 72)) = v86;
      return result;
    }
    v66 = *(void (**)(_BYTE *, uint64_t))(v100 + 8);
    v66(v94, v8);
    v66(v96, v8);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v64, v42);
    v60 = v84;
LABEL_21:
    (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v53, TupleTypeMetadata2);
    v63 = 0;
    v61 = v91;
    v62 = v92;
    goto LABEL_22;
  }
  v58 = *(void (**)(_BYTE *, uint64_t))(v100 + 8);
  v58(v52, v8);
  v58(v96, v8);
  v59 = v57(v83, 1, v42);
  v60 = v84;
  if (v59 != 1)
    goto LABEL_21;
  v58(v53, v8);
  v61 = v91;
  v62 = v92;
  if ((v82 & 1) == 0)
    goto LABEL_31;
  v63 = 1;
LABEL_22:
  v67 = UpdateCycleDetector.dispatch(label:isDebug:)();
  v68 = v86;
  if ((v67 & 1) != 0)
  {
    if (((v63 | v86) & 1) == 0)
    {
      AGGraphClearUpdate();
      closure #1 in NavigableListModifier.BoundListSelectionDetector.updateValue()(v62, v61, v69, &v110);
      AGGraphSetUpdate();
      static NavigationRequest.boundSelectionChange<A>(list:newValue:transaction:)(v125, v62, (uint64_t)&v110);
      if (*(_BYTE *)(v60 + 32) != 1)
      {
        v107 = v116;
        v108 = v117;
        v109 = v118;
        v103 = v112;
        v104 = v113;
        v105 = v114;
        v106 = v115;
        v101 = v110;
        v102 = v111;
        NavigationAuthority.enqueueRequest(_:)(&v101);
      }
      swift_release();
      outlined release of NavigationRequest((uint64_t)&v110);
      v68 = v86;
    }
    if ((v82 & 1) != 0)
    {
      static NavigationRequest.editingChanged<A>(forSelectionType:list:newValue:)((uint64_t)v125, v68, v62, (uint64_t)&v110);
      v107 = v116;
      v108 = v117;
      v109 = v118;
      v103 = v112;
      v104 = v113;
      v105 = v114;
      v106 = v115;
      v101 = v110;
      v102 = v111;
      NavigationAuthority.enqueueRequest(_:)(&v101);
      outlined release of NavigationRequest((uint64_t)&v110);
    }
  }
  v70 = v97;
  $defer #2 <A>() in NavigableListModifier.BoundListSelectionDetector.updateValue()(v60, (uint64_t)v97, v62, v61);
  (*(void (**)(_BYTE *, uint64_t))(v98 + 8))(v70, v42);
  outlined destroy of NavigationAuthority((uint64_t)v119);
  (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v87, v26);
  result = type metadata accessor for NavigableListModifier.BoundListSelectionDetector(0, v62, v61, v71);
  *(_BYTE *)(v60 + *(int *)(result + 72)) = v68;
  return result;
}

uint64_t $defer #2 <A>() in NavigableListModifier.BoundListSelectionDetector.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = a1 + *(int *)(type metadata accessor for NavigableListModifier.BoundListSelectionDetector(0, a3, a4, a4) + 68);
  v9 = type metadata accessor for SelectionManagerBox(255, a3, a4, v8);
  v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  v11 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v7, a2, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v9);
}

unint64_t implicit closure #3 in NavigableListModifier.BoundListSelectionDetector.updateValue()()
{
  return 0xD00000000000002ALL;
}

uint64_t closure #1 in NavigableListModifier.BoundListSelectionDetector.updateValue()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  type metadata accessor for NavigableListModifier.BoundListSelectionDetector(0, a1, a2, a3);
  *a4 = *(_QWORD *)AGGraphGetValue();
  return swift_retain();
}

uint64_t NavigableListModifier.IsEditing.editMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for Binding<EditMode>?();
  Value = AGGraphGetValue();
  v4 = *(_QWORD *)Value;
  v3 = *(_QWORD *)(Value + 8);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(Value + 16);
  return outlined copy of Binding<NavigationSplitViewColumn>?(v4, v3);
}

BOOL NavigableListModifier.IsEditing.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;

  NavigableListModifier.IsEditing.editMode.getter((uint64_t)&v4);
  v0 = v5;
  if (!v5)
    return 0;
  v1 = v4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v3);
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v0);
  return v3 != 0;
}

BOOL protocol witness for Rule.value.getter in conformance NavigableListModifier<A>.IsEditing@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = NavigableListModifier.IsEditing.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigableListModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigableListModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigableListModifier<A>()
{
  return &protocol witness table for NavigableListModifier<A>;
}

uint64_t partial apply for closure #1 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static NavigableListModifier._makeInputs(modifier:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #2 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #2 in static NavigableListModifier._makeInputs(modifier:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for closure #3 in static NavigableListModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #3 in static NavigableListModifier._makeInputs(modifier:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

void type metadata accessor for _GraphValue<NavigationStateHost>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<NavigationStateHost>)
  {
    type metadata accessor for NavigationStateHost();
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationStateHost>);
  }
}

uint64_t type metadata accessor for NavigableListModifier.ListKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigableListModifier.ListKey);
}

uint64_t type metadata accessor for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigableListModifier.EnsureNavigationAuthority);
}

uint64_t type metadata accessor for NavigableListModifier.IsEditing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigableListModifier.IsEditing);
}

uint64_t destroy for NavigableListModifier.EnsureNavigationAuthority(uint64_t result)
{
  if (*(_QWORD *)(result + 32) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = a1 + 24;
  v5 = a2 + 24;
  if (*(_QWORD *)(a2 + 32) == 1)
  {
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  }
  else
  {
    swift_weakCopyInit();
    v6 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    swift_retain();
    swift_retain();
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = a1 + 24;
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) == 1)
  {
    if (v6 == 1)
    {
      v7 = *v5;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)v4 = v7;
    }
    else
    {
      swift_weakCopyInit();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_retain();
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 24);
    v8 = *((_QWORD *)v5 + 2);
    *(_OWORD *)v4 = *v5;
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    swift_weakCopyAssign();
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_retain();
    swift_release();
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t initializeWithTake for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = a1 + 24;
  v5 = a2 + 24;
  if (*(_QWORD *)(a2 + 32) == 1)
  {
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = a1 + 24;
  v5 = a2 + 24;
  v6 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) != 1)
  {
    if (v7 != 1)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_release();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of NavigationAuthority(a1 + 24);
    goto LABEL_6;
  }
  if (v7 == 1)
  {
LABEL_6:
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
    goto LABEL_8;
  }
  swift_weakTakeInit();
  *v6 = *v8;
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigableListModifier.EnsureNavigationAuthority(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2 + 1;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigableListModifier.BoundListSelectionDetector(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  unint64_t v37;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_DWORD *)(v5 + 84);
  v8 = v6 & 0xF8 | 7;
  v9 = ~v8;
  v10 = *(_QWORD *)(v5 + 64);
  if (v7)
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = v10 + 1;
  if (v11 <= v10)
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = v11;
  if (v12 <= 8)
    v13 = 8;
  else
    v13 = v12;
  if ((v6 & 0x1000F8) == 0 && v13 + 1 + (((v6 & 0xF8) + 63) & (unint64_t)~v8) + 1 <= 0x18)
  {
    v17 = *a2;
    v16 = (unint64_t)a2 + 11;
    *a1 = v17;
    v18 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFCLL);
    *v18 = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (_DWORD *)(((v16 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v19 = *v20;
    v21 = (_QWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFCLL);
    v22 = (_QWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v21 = *v22;
    v23 = (_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (_DWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *v24 = *v23;
    v25 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v26 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)v25 = *(_DWORD *)v26;
    *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
    v27 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFFCLL);
    v28 = (uint64_t *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFFCLL);
    v29 = *v28;
    *(_QWORD *)((char *)v27 + 5) = *(uint64_t *)((char *)v28 + 5);
    *v27 = v29;
    v30 = (_DWORD *)(((unint64_t)v24 + 31) & 0xFFFFFFFFFFFFFCLL);
    v31 = (_DWORD *)(((unint64_t)v23 + 31) & 0xFFFFFFFFFFFFFCLL);
    *v30 = *v31;
    v32 = (_QWORD *)(((unint64_t)v30 + 11) & v9);
    v33 = (_QWORD *)(((unint64_t)v31 + 11) & v9);
    v34 = *((unsigned __int8 *)v33 + v13);
    if (v34 > 2)
    {
      memcpy(v32, v33, v13 + 1);
LABEL_37:
      *((_BYTE *)v32 + v13 + 1) = *((_BYTE *)v33 + v13 + 1);
      return v3;
    }
    if (v34 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v32, v33, v4);
      v35 = 2;
    }
    else
    {
      if (v34 != 1)
      {
        *v32 = *v33;
        *((_BYTE *)v32 + v13) = 0;
        swift_bridgeObjectRetain();
LABEL_27:
        v36 = 8;
        if (v10 > 8)
          v36 = v10;
        if (v10 + 1 <= v10)
          v37 = v10;
        else
          v37 = v10 + 1;
        if (v37 <= 8)
          v37 = 8;
        if (v7)
          v13 = v36;
        else
          v13 = v37;
        goto LABEL_37;
      }
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v33, 1, v4))
      {
        memcpy(v32, v33, v11);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(v32, v33, v4);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v32, 0, 1, v4);
      }
      v35 = 1;
    }
    *((_BYTE *)v32 + v13) = v35;
    goto LABEL_27;
  }
  v15 = *a2;
  *v3 = *a2;
  v3 = (uint64_t *)(v15 + ((v8 + 16) & v9));
  swift_retain();
  return v3;
}

uint64_t destroy for NavigableListModifier.BoundListSelectionDetector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  v5 = (((((((((((result + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL)
        + 31) & 0xFFFFFFFFFFFFFFFCLL)
      + v4
      + 4) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
    v7 = *(_QWORD *)(v3 + 64);
  else
    v7 = v6 + 1;
  if (v7 > v6)
    v6 = v7;
  if (v6 <= 8)
    v6 = 8;
  v8 = *(unsigned __int8 *)(v5 + v6);
  if (v8 <= 2)
  {
    if (v8 == 2)
      return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v5, v2);
    if (v8 != 1)
      return swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

_QWORD *initializeWithCopy for NavigableListModifier.BoundListSelectionDetector(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;

  v5 = *a2;
  v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v7;
  v9 = (_QWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_QWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v9;
  v11 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = ((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  v15 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = *v16;
  *(_QWORD *)((char *)v15 + 5) = *(uint64_t *)((char *)v16 + 5);
  *v15 = v17;
  v18 = (_DWORD *)(((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  v19 = (_DWORD *)(((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *v18 = *v19;
  v20 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  v23 = v22 + 11;
  v24 = (unint64_t)v18 + v22 + 11;
  v25 = ~v22 & 0xFFFFFFFFFFFFFFF8;
  v26 = (_QWORD *)(v24 & v25);
  v27 = (_QWORD *)(((unint64_t)v19 + v23) & v25);
  v28 = *(_QWORD *)(v21 + 64);
  if (*(_DWORD *)(v21 + 84))
    v29 = *(_QWORD *)(v21 + 64);
  else
    v29 = v28 + 1;
  if (v29 > v28)
    v28 = v29;
  if (v28 <= 8)
    v30 = 8;
  else
    v30 = v28;
  v31 = *((unsigned __int8 *)v27 + v30);
  if (v31 <= 2)
  {
    if (v31 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v21 + 16))(v26, v27, *(_QWORD *)(a3 + 16));
      v33 = 2;
    }
    else
    {
      if (v31 != 1)
      {
        *v26 = *v27;
        *((_BYTE *)v26 + v30) = 0;
        swift_bridgeObjectRetain();
LABEL_20:
        v32 = v30 + 1;
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v21 + 48))(v27, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v26, v27, v29);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 + 16))(v26, v27, v20);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v26, 0, 1, v20);
      }
      v33 = 1;
    }
    *((_BYTE *)v26 + v30) = v33;
    goto LABEL_20;
  }
  v32 = v30 + 1;
  memcpy(v26, v27, v30 + 1);
LABEL_21:
  *((_BYTE *)v26 + v32) = *((_BYTE *)v27 + v32);
  return a1;
}

_DWORD *assignWithCopy for NavigableListModifier.BoundListSelectionDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v8[1] = v9[1];
  v10 = (_DWORD *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = ((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 12) = *(_BYTE *)(v15 + 12);
  v16 = (_DWORD *)(((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = (_DWORD *)(((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *v16 = *v17;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 80) & 0xF8;
  v21 = v20 + 11;
  v22 = (unint64_t)v16 + v20 + 11;
  v23 = ~v20 & 0xFFFFFFFFFFFFFFF8;
  v24 = (_QWORD *)(v22 & v23);
  v25 = (_QWORD *)(((unint64_t)v17 + v21) & v23);
  v26 = *(_QWORD *)(v19 + 64);
  if (*(_DWORD *)(v19 + 84))
    v27 = *(_QWORD *)(v19 + 64);
  else
    v27 = v26 + 1;
  if (v27 > v26)
    v26 = v27;
  if (v26 <= 8)
    v28 = 8;
  else
    v28 = v26;
  v29 = *((unsigned __int8 *)v24 + v28);
  v30 = *((unsigned __int8 *)v25 + v28);
  if (v29 > 2)
  {
    if (v30 <= 2)
    {
      if (v30 == 2)
      {
LABEL_37:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(v24, v25, v18);
        v31 = 2;
LABEL_38:
        *((_BYTE *)v24 + v28) = v31;
        goto LABEL_39;
      }
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (v30 > 2)
  {
    if (v29 == 2)
      goto LABEL_25;
    if (v29 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v19 + 48))(v24, 1, *(_QWORD *)(a3 + 16)))
LABEL_25:
      (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v24, v18);
LABEL_28:
    memcpy(v24, v25, v28 + 1);
    goto LABEL_39;
  }
  if (v24 == v25)
    goto LABEL_39;
  if (v29 == 2)
  {
LABEL_15:
    (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v24, v18);
    goto LABEL_30;
  }
  if (v29 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v19 + 48))(v24, 1, *(_QWORD *)(a3 + 16)))
      goto LABEL_30;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  v30 = *((unsigned __int8 *)v25 + v28);
  if (v30 >= 3)
  {
    if (v28 <= 3)
      v32 = v28;
    else
      v32 = 4;
    __asm { BR              X12 }
  }
  if (v30 == 2)
    goto LABEL_37;
LABEL_18:
  if (v30 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v25, 1, v18))
    {
      memcpy(v24, v25, v27);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(v24, v25, v18);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v24, 0, 1, v18);
    }
    v31 = 1;
    goto LABEL_38;
  }
  *v24 = *v25;
  *((_BYTE *)v24 + v28) = 0;
  swift_bridgeObjectRetain();
LABEL_39:
  *((_BYTE *)v24 + v28 + 1) = *((_BYTE *)v25 + v28 + 1);
  return a1;
}

_QWORD *initializeWithTake for NavigableListModifier.BoundListSelectionDetector(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;

  v5 = *a2;
  v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v7;
  v9 = (_QWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFCLL);
  v10 = (_QWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v9;
  v11 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = ((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  v15 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  v17 = *v16;
  *(_QWORD *)((char *)v15 + 5) = *(uint64_t *)((char *)v16 + 5);
  *v15 = v17;
  v18 = (_DWORD *)(((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  v19 = (_DWORD *)(((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *v18 = *v19;
  v20 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  v23 = v22 + 11;
  v24 = (unint64_t)v18 + v22 + 11;
  v25 = ~v22 & 0xFFFFFFFFFFFFFFF8;
  v26 = (_QWORD *)(v24 & v25);
  v27 = (_QWORD *)(((unint64_t)v19 + v23) & v25);
  v28 = *(_QWORD *)(v21 + 64);
  if (*(_DWORD *)(v21 + 84))
    v29 = *(_QWORD *)(v21 + 64);
  else
    v29 = v28 + 1;
  if (v29 > v28)
    v28 = v29;
  if (v28 <= 8)
    v30 = 8;
  else
    v30 = v28;
  v31 = *((unsigned __int8 *)v27 + v30);
  if (v31 > 2)
  {
    v32 = v30 + 1;
    memcpy(v26, v27, v30 + 1);
  }
  else
  {
    if (v31 == 2)
    {
      (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v21 + 32))(v26, v27, *(_QWORD *)(a3 + 16));
    }
    else if (v31 == 1)
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v21 + 48))(v27, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v26, v27, v29);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v21 + 32))(v26, v27, v20);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v26, 0, 1, v20);
      }
    }
    else
    {
      *v26 = *v27;
    }
    *((_BYTE *)v26 + v30) = v31;
    v32 = v30 + 1;
  }
  *((_BYTE *)v26 + v32) = *((_BYTE *)v27 + v32);
  return a1;
}

_QWORD *assignWithTake for NavigableListModifier.BoundListSelectionDetector(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  uint64_t v33;

  v5 = *a2;
  v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  v12 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = ((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  v15 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  v16 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 + 4);
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 12) = *(_BYTE *)(v16 + 12);
  v17 = (_DWORD *)(((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  v18 = (_DWORD *)(((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *v17 = *v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  v22 = v21 + 11;
  v23 = (unint64_t)v17 + v21 + 11;
  v24 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  v25 = (_QWORD *)(v23 & v24);
  v26 = (_QWORD *)(((unint64_t)v18 + v22) & v24);
  v27 = *(_QWORD *)(v20 + 64);
  if (*(_DWORD *)(v20 + 84))
    v28 = *(_QWORD *)(v20 + 64);
  else
    v28 = v27 + 1;
  if (v28 > v27)
    v27 = v28;
  if (v27 <= 8)
    v29 = 8;
  else
    v29 = v27;
  v30 = *((unsigned __int8 *)v25 + v29);
  v31 = *((unsigned __int8 *)v26 + v29);
  if (v30 > 2)
  {
    if (v31 <= 2)
    {
      if (v31 == 2)
      {
LABEL_37:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 32))(v25, v26, v19);
        v32 = 2;
LABEL_38:
        *((_BYTE *)v25 + v29) = v32;
        goto LABEL_39;
      }
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (v31 > 2)
  {
    if (v30 == 2)
      goto LABEL_25;
    if (v30 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v20 + 48))(v25, 1, *(_QWORD *)(a3 + 16)))
LABEL_25:
      (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v25, v19);
LABEL_28:
    memcpy(v25, v26, v29 + 1);
    goto LABEL_39;
  }
  if (v25 == v26)
    goto LABEL_39;
  if (v30 == 2)
  {
LABEL_15:
    (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v25, v19);
    goto LABEL_30;
  }
  if (v30 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v20 + 48))(v25, 1, *(_QWORD *)(a3 + 16)))
      goto LABEL_30;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  v31 = *((unsigned __int8 *)v26 + v29);
  if (v31 >= 3)
  {
    if (v29 <= 3)
      v33 = v29;
    else
      v33 = 4;
    __asm { BR              X12 }
  }
  if (v31 == 2)
    goto LABEL_37;
LABEL_18:
  if (v31 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v26, 1, v19))
    {
      memcpy(v25, v26, v28);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 32))(v25, v26, v19);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v25, 0, 1, v19);
    }
    v32 = 1;
    goto LABEL_38;
  }
  *v25 = *v26;
  *((_BYTE *)v25 + v29) = 0;
LABEL_39:
  *((_BYTE *)v25 + v29 + 1) = *((_BYTE *)v26 + v29 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigableListModifier.BoundListSelectionDetector(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
    v5 = *(_QWORD *)(v3 + 64);
  else
    v5 = v4 + 1;
  if (v5 <= v4)
    v5 = *(_QWORD *)(v3 + 64);
  if (v5 <= 8)
    v5 = 8;
  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    v6 = v5
       + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 63) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
       + 2;
    v7 = 8 * v6;
    if (v6 > 3)
      goto LABEL_11;
    v9 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v9))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (v8)
        goto LABEL_18;
    }
    else
    {
      if (v9 <= 0xFF)
      {
        if (v9 < 2)
          goto LABEL_25;
LABEL_11:
        v8 = *(unsigned __int8 *)(a1 + v6);
        if (!*(_BYTE *)(a1 + v6))
          goto LABEL_25;
LABEL_18:
        v10 = (v8 - 1) << v7;
        if (v6 > 3)
          v10 = 0;
        if (!(_DWORD)v6)
          return (v10 + 255);
        if (v6 > 3)
          LODWORD(v6) = 4;
        return ((uint64_t (*)(void))((char *)&loc_1872CC188 + 4 * byte_187C1E7C0[(v6 - 1)]))();
      }
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (*(_WORD *)(a1 + v6))
        goto LABEL_18;
    }
  }
LABEL_25:
  v12 = *(unsigned __int8 *)(((((((((((a1 + 11) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFCLL)
                               + 11) & 0xFFFFFFFFFFFFFCLL)
                             + 7) & 0xFFFFFFFFFFFFFCLL)
                           + 4);
  if (v12 < 2)
    return 0;
  return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for NavigableListModifier.BoundListSelectionDetector(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 84) == 0;
  v8 = (unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 63) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8;
  if (v7)
    v9 = v6 + 1;
  else
    v9 = v6;
  if (v9 > v6)
    v6 = v9;
  if (v6 <= 8)
    v6 = 8;
  v10 = v6 + v8 + 2;
  if (a3 < 0xFF)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X10 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v10)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *a1 = v14;
        *((_BYTE *)a1 + 2) = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *a1 = v14;
      }
      else
      {
        *(_BYTE *)a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v10);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

void base witness table accessor for _AttributeBody in NavigableListModifier<A>.BoundListSelectionDetector()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigableListModifier<A>.IsEditing()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigableListModifier<A>.EnsureNavigationAuthority()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigableListModifier<A>.ListKey()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined destroy of NavigationAuthority??(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationAuthority??, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of NavigationState.ListKey??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, &lazy cache variable for type metadata for NavigationState.ListKey??, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 __swift_memcpy27_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FocusViewGraph(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 27))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusViewGraph(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 27) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusViewGraph()
{
  return &type metadata for FocusViewGraph;
}

_DWORD *ViewGraph.setFocusedItem(_:)()
{
  uint64_t v0;
  _DWORD *result;
  uint64_t v2;
  uint64_t ObjectType;

  result = (_DWORD *)swift_beginAccess();
  if ((*(_BYTE *)(v0 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    result = (_DWORD *)ViewGraph.subscript.getter();
    if (result)
    {
      if (*result != *MEMORY[0x1E0CFED28])
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        result = (_DWORD *)AGGraphSetValue();
        if ((_DWORD)result)
        {
          swift_beginAccess();
          result = (_DWORD *)MEMORY[0x18D760234](v0 + 200);
          if (result)
          {
            v2 = *(_QWORD *)(v0 + 208);
            ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 16))(ObjectType);
            return (_DWORD *)swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

uint64_t ViewGraph.setFocusedValues(_:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t ObjectType;

  result = swift_beginAccess();
  if ((*(_BYTE *)(v0 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    result = ViewGraph.subscript.getter();
    if (result)
    {
      result = *(unsigned int *)(result + 4);
      if ((_DWORD)result != *MEMORY[0x1E0CFED28])
      {
        result = AGGraphSetValue();
        if ((_DWORD)result)
        {
          swift_beginAccess();
          result = MEMORY[0x18D760234](v0 + 200);
          if (result)
          {
            v2 = *(_QWORD *)(v0 + 208);
            ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 16))(ObjectType);
            return swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

uint64_t ViewGraph.setFocusStore(_:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t ObjectType;

  result = swift_beginAccess();
  if ((*(_BYTE *)(v0 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    result = ViewGraph.subscript.getter();
    if (result)
    {
      result = *(unsigned int *)(result + 8);
      if ((_DWORD)result != *MEMORY[0x1E0CFED28])
      {
        result = AGGraphSetValue();
        if ((_DWORD)result)
        {
          swift_beginAccess();
          result = MEMORY[0x18D760234](v0 + 200);
          if (result)
          {
            v2 = *(_QWORD *)(v0 + 208);
            ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 16))(ObjectType);
            return swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

uint64_t FocusViewGraph.needsUpdate(graph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  void *v13;

  v2 = v1;
  v4 = *(_BYTE *)(v1 + 24);
  v5 = a1 + 200;
  swift_beginAccess();
  if (MEMORY[0x18D760234](v5))
  {
    v6 = *(_QWORD *)(a1 + 208);
    ObjectType = swift_getObjectType();
    v8 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(&v13, v8, v8, ObjectType, v6);
    swift_unknownObjectRelease();
    v9 = v13;
    if (v13)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
      v10 = v9;
      v11 = (void *)static UIFocusSystem.focusSystem(for:)();

      if (v11)
      *(_BYTE *)(v2 + 26) = ((v11 != 0) ^ *(_BYTE *)(v2 + 25)) & 1;
      *(_BYTE *)(v2 + 25) = v11 != 0;
    }
  }
  if ((v4 & 1) != 0)
    return 1;
  else
    return *(unsigned __int8 *)(v2 + 26);
}

uint64_t FocusViewGraph.update(graph:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = result;
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    *(_BYTE *)(v1 + 24) = 0;
    swift_beginAccess();
    result = MEMORY[0x18D760234](v2 + 200);
    if (result)
    {
      v3 = *(_QWORD *)(v2 + 208);
      ObjectType = swift_getObjectType();
      v5 = type metadata accessor for FocusHost();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(&v10, v5, v5, ObjectType, v3);
      result = swift_unknownObjectRelease();
      if (v10)
      {
        v6 = v11;
        v7 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v6 + 80))(v7, v6);
        result = swift_unknownObjectRelease();
      }
    }
  }
  if (*(_BYTE *)(v1 + 26) == 1)
  {
    result = *(unsigned int *)(v1 + 12);
    if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    {
      *(_BYTE *)(v1 + 26) = 0;
      v8 = AGCreateWeakAttribute();
      v9 = *(_BYTE *)(v1 + 25);
      v10 = v8;
      LOBYTE(v11) = v9;
      v12 = 1;
      lazy protocol witness table accessor for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation();
      default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      return GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    }
  }
  return result;
}

uint64_t FocusViewGraph.IsFocusSystemEnabledMutation.combine<A>(with:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v2 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v5 = v8;
  if ((static WeakAttribute.== infix(_:_:)() & 1) == 0)
    return 0;
  *(_BYTE *)(v1 + 8) = v5;
  return 1;
}

uint64_t protocol witness for GraphMutation.apply() in conformance FocusViewGraph.IsFocusSystemEnabledMutation()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    return AGGraphSetValue();
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation;
  if (!lazy protocol witness table cache variable for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusViewGraph.IsFocusSystemEnabledMutation, &unk_1E1AB7E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation);
  }
  return result;
}

unint64_t type metadata accessor for FocusHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for FocusHost;
  if (!lazy cache variable for type metadata for FocusHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for FocusHost);
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.IsFocusSystemEnabledKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static _GraphInputs.IsFocusSystemEnabledKey.defaultValue;
  return result;
}

unint64_t specialized FocusViewGraph.init(graph:)(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(void);
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)GraphHost.globalSubgraph.getter();
  AGSubgraphSetCurrent();

  swift_beginAccess();
  if ((*(_BYTE *)(a1 + 361) & 0x20) != 0)
  {
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    v16 = 1;
    v17 = 0;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for External<FocusItem?>();
    lazy protocol witness table accessor for type External<FocusItem?> and conformance External<A>();
    v12 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of FocusItem?((uint64_t)&v13);
    *(_QWORD *)&v13 = 0;
    BYTE8(v13) = 0;
    HIDWORD(v13) = 0;
    v4 = MEMORY[0x1E0CFECF8];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<FocusedValues>, (uint64_t)&type metadata for FocusedValues, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<FocusedValues> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<FocusedValues>, (uint64_t)&type metadata for FocusedValues);
    v3 = Attribute.init<A>(body:value:flags:update:)();
    v5 = MEMORY[0x1E0DEE9D8];
    v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    LODWORD(v13) = 0;
    *((_QWORD *)&v13 + 1) = v5;
    *(_QWORD *)&v14 = v6;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<FocusStore>, (uint64_t)&type metadata for FocusStore, (uint64_t (*)(_QWORD, uint64_t))v4);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<FocusStore> and conformance External<A>, &lazy cache variable for type metadata for External<FocusStore>, (uint64_t)&type metadata for FocusStore);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static CoreTesting.isRunning.getter();
    LOBYTE(v13) = 0;
    v7 = MEMORY[0x1E0DEAFA0];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))v4);
    lazy protocol witness table accessor for type External<UInt32> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, v7);
    Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    v3 = *MEMORY[0x1E0CFED28];
    v12 = *MEMORY[0x1E0CFED28];
  }
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = v9;
  *(_QWORD *)&v14 = MEMORY[0x1E0DEE9E0];
  v10 = MEMORY[0x1E0CFECF8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityFocusStore>, (uint64_t)&type metadata for AccessibilityFocusStore, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<AccessibilityFocusStore> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityFocusStore>, (uint64_t)&type metadata for AccessibilityFocusStore);
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Dictionary.init(dictionaryLiteral:)(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v13 = specialized Dictionary.init(dictionaryLiteral:)(v8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<AccessibilityFocus>, (uint64_t)&type metadata for AccessibilityFocus, (uint64_t (*)(_QWORD, uint64_t))v10);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<AccessibilityFocus> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityFocus>, (uint64_t)&type metadata for AccessibilityFocus);
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();
  return v12 | (unint64_t)(v3 << 32);
}

uint64_t specialized FocusViewGraph.modifyViewInputs(inputs:graph:)()
{
  lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type FocusStoreInputKey and conformance FocusStoreInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey();
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey;
  if (!lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedItemInputKey, &type metadata for FocusedItemInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey[0];
  if (!lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey[0])
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedItemInputKey, &type metadata for FocusedItemInputKey);
    atomic_store(result, lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey;
  if (!lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValuesInputKey, &type metadata for FocusedValuesInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey;
  if (!lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValuesInputKey, &type metadata for FocusedValuesInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.IsFocusSystemEnabledKey, &type metadata for _GraphInputs.IsFocusSystemEnabledKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStoreInputKey, &type metadata for AccessibilityFocusStoreInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStoreInputKey, &type metadata for AccessibilityFocusStoreInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusInputKey, &type metadata for AccessibilityFocusInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusInputKey, &type metadata for AccessibilityFocusInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey);
  }
  return result;
}

void type metadata accessor for External<FocusItem?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<FocusItem?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<FocusItem?>);
  }
}

ValueMetadata *type metadata accessor for _GraphInputs.IsFocusSystemEnabledKey()
{
  return &type metadata for _GraphInputs.IsFocusSystemEnabledKey;
}

void *type metadata accessor for FocusViewGraph.IsFocusSystemEnabledMutation()
{
  return &unk_1E1AB7E30;
}

BOOL static Visibility.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

SwiftUI::CodableVisibility __swiftcall CodableVisibility.init(_:)(SwiftUI::CodableVisibility result)
{
  SwiftUI::CodableVisibility *v1;

  v1->base = result.base;
  return result;
}

void Visibility.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

void *static Visibility.allCases.getter()
{
  return &outlined read-only object #0 of static Visibility.allCases.getter;
}

Swift::Int Visibility.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Visibility(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Visibility;
}

uint64_t Visibility.codingProxy.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableVisibility.base.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CodableVisibility.base.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*CodableVisibility.base.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t CodableVisibility.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t CodableVisibility.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (v5 == 2)
      v6 = 2;
    else
      v6 = v5 == 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Visibility and conformance Visibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Visibility and conformance Visibility;
  if (!lazy protocol witness table cache variable for type Visibility and conformance Visibility)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Visibility, &type metadata for Visibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Visibility and conformance Visibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Visibility] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Visibility] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Visibility] and conformance [A])
  {
    type metadata accessor for [Visibility]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Visibility] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [Visibility]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Visibility])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Visibility]);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableVisibility@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return CodableVisibility.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableVisibility(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t storeEnumTagSinglePayload for Visibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1872CD878 + 4 * byte_187C1ECF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1872CD8AC + 4 * byte_187C1ECF0[v4]))();
}

uint64_t sub_1872CD8AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872CD8B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1872CD8BCLL);
  return result;
}

uint64_t sub_1872CD8C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1872CD8D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1872CD8D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872CD8DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodableVisibility()
{
  return &type metadata for CodableVisibility;
}

uint64_t type metadata completion function for PickerCurrentValueLabel()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PickerCurrentValueLabel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7 | 7;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = ((v7 + 16) & ~v7) + *(_QWORD *)(v6 + 64) + v10;
  v12 = v7 | 7 | v10;
  if (v12 != 7
    || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v11 + (((v7 | 7) + 1) & ~(v7 | 7))) & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = ~v7;
    v27 = ~v10;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v17 = (_QWORD *)(((unint64_t)a1 + v8 + 1) & ~v8);
    v18 = (_QWORD *)(((unint64_t)a2 + v8 + 1) & ~v8);
    *v17 = *v18;
    v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = v7 + 8;
    v22 = ((unint64_t)v19 + v21) & v16;
    v23 = ((unint64_t)v20 + v21) & v16;
    v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    v26 = v4;
    swift_retain();
    swift_retain();
    v24(v22, v23, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v17 + v11) & v27, ((unint64_t)v18 + v11) & v27, v26);
  }
  return v3;
}

uint64_t destroy for PickerCurrentValueLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (a1 + (v5 | 7) + 1) & ~(v5 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))((v5 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v5, v3);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v6 + ((v5 + 16) & ~v5) + *(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *initializeWithCopy for PickerCurrentValueLabel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 1;
  v8 = (_QWORD *)((unint64_t)&a1[v7] & ~(v6 | 7));
  v9 = (_QWORD *)((unint64_t)&a2[v7] & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = ((unint64_t)v10 + v6 + 8) & ~v6;
  v13 = ((unint64_t)v11 + v6 + 8) & ~v6;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  swift_retain();
  v14(v12, v13, v4);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v5 + 64) + v16 + ((v6 + 16) & ~v6);
  (*(void (**)(unint64_t, unint64_t))(v15 + 16))(((unint64_t)v8 + v17) & ~v16, ((unint64_t)v9 + v17) & ~v16);
  return a1;
}

_BYTE *assignWithCopy for PickerCurrentValueLabel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 1;
  v9 = (_QWORD *)((unint64_t)&a1[v8] & ~(v7 | 7));
  v10 = (_QWORD *)((unint64_t)&a2[v8] & ~(v7 | 7));
  *v9 = *v10;
  swift_retain();
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v11 + v7 + 8) & ~v7, ((unint64_t)v12 + v7 + 8) & ~v7, v5);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14 + ((v7 + 16) & ~v7);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))(((unint64_t)v9 + v15) & ~v14, ((unint64_t)v10 + v15) & ~v14);
  return a1;
}

_BYTE *initializeWithTake for PickerCurrentValueLabel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 | 7) + 1;
  v8 = (_QWORD *)((unint64_t)&a1[v7] & ~(v6 | 7));
  v9 = (_QWORD *)((unint64_t)&a2[v7] & ~(v6 | 7));
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)v10 + v6 + 8) & ~v6, ((unint64_t)v11 + v6 + 8) & ~v6);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v5 + 64) + v13 + ((v6 + 16) & ~v6);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(((unint64_t)v8 + v14) & ~v13, ((unint64_t)v9 + v14) & ~v13);
  return a1;
}

_BYTE *assignWithTake for PickerCurrentValueLabel(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 1;
  v9 = (_QWORD *)((unint64_t)&a1[v8] & ~(v7 | 7));
  v10 = (_QWORD *)((unint64_t)&a2[v8] & ~(v7 | 7));
  *v9 = *v10;
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v7 + 8) & ~v7, ((unint64_t)v12 + v7 + 8) & ~v7, v5);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v6 + 64) + v14 + ((v7 + 16) & ~v7);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(((unint64_t)v9 + v15) & ~v14, ((unint64_t)v10 + v15) & ~v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerCurrentValueLabel(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7)
    v10 = v7;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = v11 | 7;
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = ((v11 + 16) & ~v11) + *(_QWORD *)(v5 + 64) + v13;
  v15 = a2 - v10;
  if (a2 <= v10)
    goto LABEL_27;
  v16 = ((v14 + ((v12 + 1) & ~v12)) & ~v13) + *(_QWORD *)(v8 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v20 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_27:
      v23 = (a1 + v12 + 1) & ~v12;
      if (v7 < v9)
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 48))((v14 + v23) & ~v13, *(unsigned int *)(v8 + 84), v4);
      v24 = (unint64_t *)((v23 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v24 + v11 + 8) & ~v11);
      v25 = *v24;
      if (v25 >= 0xFFFFFFFF)
        LODWORD(v25) = -1;
      return (v25 + 1);
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_27;
LABEL_18:
  v21 = (v18 - 1) << v17;
  if (v16 > 3)
    v21 = 0;
  if (!(_DWORD)v16)
    return v10 + v21 + 1;
  if (v16 <= 3)
    v22 = ((v14 + ((v12 + 1) & ~(_DWORD)v12)) & ~(_DWORD)v13) + *(_DWORD *)(v8 + 64);
  else
    v22 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872CE090 + 4 * byte_187C1EEB0[v22 - 1]))();
}

void storeEnumTagSinglePayload for PickerCurrentValueLabel(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= v6)
    v8 = v6;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = ((((v9 + 16) & ~v9) + *(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v7 + 80) + (((v9 | 7) + 1) & ~(v9 | 7))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(_QWORD *)(v7 + 64);
  if (a3 > v8)
  {
    if (v10 <= 3)
    {
      v13 = ((a3 - v8 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v8 < a2)
  {
    v12 = ~v8 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v14 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X7 }
}

void type metadata accessor for PickerCurrentValueLabel()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for View.Body : View in PickerCurrentValueLabel<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void PickerCurrentValueLabel.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[24];

  v8[10] = a3;
  v3 = *(_QWORD *)(a1 + 24);
  v8[3] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8[2] = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v5[4];
  v7 = v5[5];
  v8[19] = v5[2];
  v8[20] = v3;
  v8[9] = v6;
  v8[21] = v6;
  v8[22] = v7;
  type metadata accessor for PickerCurrentValueLabel.Root();
}

uint64_t sub_1872CE4D4(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_BYTE *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[96];

  MEMORY[0x1E0C80A78](a1, a1);
  *(_QWORD *)(v5 - 264) = &v42[-v6];
  *(_QWORD *)(v5 - 224) = v7;
  v8 = type metadata accessor for _VariadicView.Tree();
  *(_QWORD *)(v5 - 240) = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v5 - 232) = &v42[-v14];
  v16 = type metadata accessor for PickerStyleConfiguration.CurrentValueLabel(255, v1, v4, v15);
  v17 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v5 - 216) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v5 - 208) = v17;
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = &v42[-v20];
  v22 = *v2;
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, v16, v19);
  v24 = OptionalViewAlias.wrappedValue.getter(v22, v16, v23, (_QWORD *)(v5 - 120));
  if ((*(_BYTE *)(v5 - 120) & 1) != 0)
  {
    v25 = type metadata accessor for Binding();
    v26 = *(_QWORD *)(v5 - 256);
    MEMORY[0x18D75B9C8](v25);
    v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 248) + 32))(*(_QWORD *)(v5 - 264), v26, v1);
    MEMORY[0x1E0C80A78](v27, v28);
    *(_QWORD *)&v42[-48] = v3;
    *(_QWORD *)&v42[-40] = v1;
    v29 = *(_QWORD *)(v5 - 200);
    *(_QWORD *)&v42[-32] = v29;
    *(_QWORD *)&v42[-24] = v4;
    *(_QWORD *)&v42[-16] = v2;
    v30 = *(_QWORD *)(v5 - 224);
    v31 = v29;
    _VariadicView.Tree.init(_:content:)();
    *(_QWORD *)(v5 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>.Root, v30);
    *(_QWORD *)(v5 - 128) = v31;
    v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v8, v5 - 136);
    v33 = *(_QWORD *)(v5 - 232);
    static ViewBuilder.buildExpression<A>(_:)(v11, v8, v32);
    v34 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 240) + 8);
    v34(v11, v8);
    static ViewBuilder.buildBlock<A>(_:)(v33, v8, (uint64_t)v11);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v11, v16, v8);
    v34(v11, v8);
    v34((_BYTE *)v33, v8);
  }
  else
  {
    v35 = static ViewBuilder.buildExpression<A>(_:)(v24, v16, &protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel);
    static ViewBuilder.buildBlock<A>(_:)(v35, v16, v36);
    v30 = *(_QWORD *)(v5 - 224);
    v37 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>.Root, v30);
    v31 = *(_QWORD *)(v5 - 200);
    *(_QWORD *)(v5 - 184) = v37;
    *(_QWORD *)(v5 - 176) = v31;
    v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v8, v5 - 184);
    static ViewBuilder.buildEither<A, B>(first:)(v38, v16);
  }
  *(_QWORD *)(v5 - 152) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>.Root, v30);
  *(_QWORD *)(v5 - 144) = v31;
  v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v8, v5 - 152);
  *(_QWORD *)(v5 - 168) = &protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel;
  *(_QWORD *)(v5 - 160) = v39;
  v40 = *(_QWORD *)(v5 - 208);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v40, v5 - 168);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v40, *(_QWORD *)(v5 - 192));
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 216) + 8))(v21, v40);
}

void closure #1 in PickerCurrentValueLabel.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for PickerCurrentValueLabel();
}

uint64_t sub_1872CE8A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 56), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

double PickerCurrentValueLabel.Root.body(children:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (_VariadicView_Children.endIndex.getter())
    closure #1 in PickerCurrentValueLabel.Root.body(children:)();
  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void closure #1 in PickerCurrentValueLabel.Root.body(children:)()
{
  type metadata accessor for PickerCurrentValueLabel.Root();
}

uint64_t sub_1872CE9DC()
{
  _OWORD *v0;
  uint64_t result;
  char v2;

  result = PickerCurrentValueLabel.Root.selectedIndex(for:)();
  if ((v2 & 1) == 0)
    return _VariadicView_Children.subscript.getter();
  v0[4] = 0u;
  v0[5] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t PickerCurrentValueLabel.Root.selectedIndex(for:)()
{
  uint64_t v0;
  char v1;
  Swift::String v2;
  Swift::String v3;

  v0 = _VariadicView_Children.tagIndex<A>(_:)();
  if ((v1 & 1) != 0)
  {
    _StringGuts.grow(_:)(108);
    v2._object = (void *)0x8000000187BDBD10;
    v2._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v2);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v3._countAndFlagsBits = 0xD000000000000053;
    v3._object = (void *)0x8000000187BDBD30;
    String.append(_:)(v3);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  return v0;
}

void closure #2 in PickerCurrentValueLabel.Root.body(children:)()
{
  type metadata accessor for PickerCurrentValueLabel.Root();
}

uint64_t sub_1872CEB38()
{
  PickerCurrentValueLabel.Root.selectedIndex(for:)();
  return _VariadicView_Children.subscript.getter();
}

void PickerCurrentValueLabel.init(selection:options:)(uint64_t a1@<X3>, uint64_t a2@<X5>, _BYTE *a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for PickerStyleConfiguration.CurrentValueLabel(0, a1, a2, a1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerStyleConfiguration<A>.CurrentValueLabel, v4);
  *a3 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key() & 1;
  type metadata accessor for PickerCurrentValueLabel();
}

uint64_t sub_1872CEBF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a1 + 52);
  v7 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v3, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v4 + *(int *)(a1 + 56), v2, v1);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PickerCurrentValueLabel<A, B>.Root(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>.Root, a5);
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void type metadata accessor for PickerCurrentValueLabel.Root()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in PickerCurrentValueLabel.body.getter()
{
  uint64_t v0;

  closure #1 in PickerCurrentValueLabel.body.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for PickerCurrentValueLabel.Root(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872CEDA4 + 4 * byte_187C1EEC2[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PickerCurrentValueLabel.Root(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void sub_1872CEFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for PickerStyleConfiguration.CurrentValueLabel(255, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24), a4);
  type metadata accessor for PickerCurrentValueLabel.Root();
}

uint64_t sub_1872CEFEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for _VariadicView.Tree();
  v4 = type metadata accessor for _ConditionalContent();
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>.Root, a1);
  v8 = v1;
  v6[0] = &protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel;
  v6[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v3, &v7);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v4, v6);
}

uint64_t instantiation function for generic protocol witness table for PickerCurrentValueLabel<A, B>.Root(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerCurrentValueLabel<A, B>.Root);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PickerCurrentValueLabel<A, B>.Root()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?);
  }
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>)
  {
    type metadata accessor for _VariadicView_Children.Element?();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for _VariadicView_Children.Element?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView_Children.Element?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_Children.Element?);
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>();
    v2[0] = lazy protocol witness table accessor for type _VariadicView_Children.Element? and conformance <A> A?();
    v2[1] = MEMORY[0x1E0CE55C8];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Element? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type _VariadicView_Children.Element? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Element? and conformance <A> A?)
  {
    type metadata accessor for _VariadicView_Children.Element?();
    v2 = MEMORY[0x1E0CE55C8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Element? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AutomaticMultiDatePickerStyle.Body@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for UIKitCalendarView(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance AutomaticMultiDatePickerStyle.Body@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(0, a1, a2, a3);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(Value, (uint64_t)v8, v10, v11);
  outlined init with take of MultiDatePickerStyleConfiguration((uint64_t)v8, a4);
  v12 = (int *)type metadata accessor for UIKitCalendarView(0);
  v13 = (uint64_t *)(a4 + v12[5]);
  *v13 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  swift_storeEnumTagMultiPayload();
  v14 = (uint64_t *)(a4 + v12[6]);
  *v14 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  swift_storeEnumTagMultiPayload();
  v15 = (uint64_t *)(a4 + v12[7]);
  *v15 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  swift_storeEnumTagMultiPayload();
  v16 = a4 + v12[8];
  *(_QWORD *)v16 = swift_getKeyPath();
  *(_BYTE *)(v16 + 8) = 0;
  v17 = a4 + v12[9];
  result = swift_getKeyPath();
  *(_QWORD *)v17 = result;
  *(_BYTE *)(v17 + 8) = 0;
  return result;
}

void type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>)
  {
    v4 = type metadata accessor for MultiDatePickerValue(0, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>);
  }
}

uint64_t outlined init with copy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Environment<Locale>.Content(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Environment.Content();
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for AutomaticMultiDatePickerStyle.Body()
{
  return &type metadata for AutomaticMultiDatePickerStyle.Body;
}

ValueMetadata *type metadata accessor for AutomaticMultiDatePickerStyle()
{
  return &type metadata for AutomaticMultiDatePickerStyle;
}

unint64_t lazy protocol witness table accessor for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body;
  if (!lazy protocol witness table cache variable for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticMultiDatePickerStyle.Body, &type metadata for AutomaticMultiDatePickerStyle.Body);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body);
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v0);
}

void ForEach.init<A, B>(_:editActions:content:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  _QWORD *KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v31 = a8;
  v32 = a7;
  v36 = a3;
  v37 = a4;
  v34 = a1;
  v35 = a9;
  v28 = a10;
  v29 = a12;
  v18 = type metadata accessor for Binding();
  v19 = *(_QWORD *)(v18 - 8);
  v33 = v18;
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v28 - v22;
  v24 = *a2;
  (*(void (**)(char *, uint64_t, double))(v19 + 16))((char *)&v28 - v22, a1, v21);
  v38 = a5;
  v39 = a6;
  v40 = a7;
  v25 = v31;
  v26 = v28;
  v41 = v31;
  v42 = v28;
  v43 = a11;
  v44 = v29;
  v45 = a13;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v46 = v24;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  ForEach.init<A, B>(_:id:editActions:content:)((uint64_t)v23, KeyPath, v36, v37, a6, v32, AssociatedConformanceWitness, v35, v25, v26, a11, a13);
}

uint64_t sub_1872CF7FC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 192), *(_QWORD *)(v1 - 200));
}

uint64_t key path getter for Identifiable.id : <A, B, C><A1, B1>A1.Sequence.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_1872CF894()
{
  return 64;
}

__n128 sub_1872CF8A0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ForEach.init<A, B>(_:id:editActions:content:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[15];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22[9] = a6;
  v22[12] = a3;
  v22[13] = a4;
  v26 = a2;
  v25 = a1;
  v22[14] = a8;
  v22[8] = a12;
  v24 = a11;
  v22[7] = a10;
  v14 = *a2;
  v15 = type metadata accessor for Binding();
  v23 = *(_QWORD *)(v15 - 8);
  v22[3] = *(_QWORD *)(v23 + 64);
  MEMORY[0x1E0C80A78](v15, v16);
  v22[4] = (char *)v22 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v20 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v14 + 8);
  v21 = *(_QWORD *)(a9 + 8);
  v22[2] = a9;
  v27 = a5;
  v28 = v20;
  v29 = v21;
  v30 = a7;
  type metadata accessor for IndexedIdentifierCollection();
}

void sub_1872CF9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;

  *(_QWORD *)(v15 - 264) = a1;
  v16 = MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 272) = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 304) = *v14;
  *(_QWORD *)(v15 - 344) = v10;
  MEMORY[0x18D75B9C8](v10, v16);
  v19 = *(_QWORD **)(v15 - 200);
  swift_retain();
  *(_QWORD *)(v15 - 208) = v13;
  IndexedIdentifierCollection.init(_:id:)(v12, v19, v11, v9, v13, (uint64_t)v18);
}

uint64_t sub_1872CFA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v6 - 192) = v0;
  *(_QWORD *)(v6 - 184) = v2;
  v7 = *(_QWORD *)(v6 - 280);
  *(_QWORD *)(v6 - 176) = v7;
  *(_QWORD *)(v6 - 168) = v3;
  *(_QWORD *)(v6 - 160) = v5;
  v8 = *(_QWORD *)(v6 - 296);
  v9 = *(_QWORD *)(v6 - 224);
  *(_QWORD *)(v6 - 152) = v8;
  *(_QWORD *)(v6 - 144) = v9;
  v10 = *(_QWORD *)(v6 - 288);
  *(_QWORD *)(v6 - 136) = v10;
  *(_QWORD *)(v6 - 312) = swift_getKeyPath();
  v11 = *(_QWORD *)(v6 - 232);
  v12 = *(_QWORD *)(v6 - 320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v1, v4);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (*(_QWORD *)(v6 - 328) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v0;
  v15[3] = v2;
  v16 = *(_QWORD *)(v6 - 208);
  v15[4] = v7;
  v15[5] = v16;
  v15[6] = *(_QWORD *)(v6 - 336);
  v15[7] = v8;
  v15[8] = *(_QWORD *)(v6 - 224);
  v15[9] = v10;
  v17 = (char *)v15 + v13;
  v18 = *(_QWORD *)(v6 - 232);
  v19 = v12;
  v20 = *(_QWORD *)(v6 - 344);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v17, v19, v20);
  *(_QWORD *)((char *)v15 + v14) = *(_QWORD *)(v6 - 304);
  v21 = (_QWORD *)((char *)v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8));
  v22 = *(_QWORD *)(v6 - 248);
  *v21 = *(_QWORD *)(v6 - 256);
  v21[1] = v22;
  v24 = type metadata accessor for EditableCollectionContent(0, v7, v2, v23);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, *(_QWORD *)(v6 - 264), v6 + 24);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> EditableCollectionContent<A, B>, v24, v6 + 32);
  ForEach<>.init(_:id:content:)();
  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v18 + 8))(*(_QWORD *)(v6 - 216), v20);
}

void type metadata accessor for IndexedIdentifierCollection()
{
  JUMPOUT(0x18D75FF28);
}

void IndexedIdentifierCollection.init(_:id:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v16 = a5;
  v23 = a2;
  v24 = a6;
  v17 = a1;
  v9 = *a2;
  v19 = *(_QWORD *)(a3 - 8);
  v21 = *(_QWORD *)(v19 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v20 = type metadata accessor for LazySequence();
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v9 + 8);
  v25 = a3;
  v26 = v15;
  v27 = a4;
  v28 = a5;
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872CFD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  *(_QWORD *)(v7 - 200) = a1;
  v8 = type metadata accessor for LazyMapSequence();
  *(_QWORD *)(v7 - 168) = v8;
  *(_QWORD *)(v7 - 184) = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v22 - v10;
  v12 = *(_QWORD *)(v7 - 192);
  dispatch thunk of Collection.indices.getter();
  Sequence.enumerated()();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v5);
  v13 = *(_QWORD *)(v7 - 160);
  v14 = *(_QWORD *)(v7 - 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v12, v2);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (*(_QWORD *)(v7 - 144) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (char *)swift_allocObject();
  v18 = *(_QWORD *)(v7 - 216);
  *((_QWORD *)v17 + 2) = v2;
  *((_QWORD *)v17 + 3) = v18;
  v19 = *(_QWORD *)(v7 - 208);
  *((_QWORD *)v17 + 4) = v4;
  *((_QWORD *)v17 + 5) = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(&v17[v15], v14, v2);
  *(_QWORD *)&v17[v16] = *(_QWORD *)(v7 - 128);
  swift_retain();
  v20 = *(_QWORD *)(v7 - 152);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v20);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 136) + 8))(v6, v20);
  return (*(uint64_t (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v7 - 184) + 32))(*(_QWORD *)(v7 - 120), v11, *(_QWORD *)(v7 - 168));
}

void closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[26];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v27 = a5;
  v28 = a4;
  v25[25] = a3;
  v31 = a1;
  v30 = a8;
  v25[20] = a12;
  v25[21] = a13;
  v32 = a11;
  v33 = a2;
  v25[14] = a9;
  v25[17] = a7;
  MEMORY[0x1E0C80A78](a1, a7);
  v25[23] = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v15;
  v26 = type metadata accessor for EditableCollectionContent(0, v17, v15, v18);
  v29 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v19);
  v25[22] = (char *)v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v25[24] = (char *)v25 - v23;
  v24 = *(_QWORD *)(a10 + 8);
  v25[7] = a10;
  v34 = v16;
  v35 = a6;
  v25[6] = a6;
  v36 = v24;
  v37 = a9;
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872D0040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  void (*v24)(_BYTE *, _QWORD, uint64_t, double);
  uint64_t v25;
  void (*v26)(_BYTE *, _QWORD, uint64_t);
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, _BYTE *, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(char *, _QWORD, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  _BYTE v63[96];

  *(_QWORD *)(v5 - 328) = a1;
  v6 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v5 - 160) = v6;
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v5 - 288) = &v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v63[-v10];
  *(_QWORD *)(v5 - 352) = &v63[-v10];
  v12 = type metadata accessor for Binding();
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v5 - 168) = v12;
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12, v15);
  *(_QWORD *)(v5 - 320) = &v63[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v63[-v18];
  *(_QWORD *)(v5 - 400) = v2;
  *(_QWORD *)(v5 - 296) = swift_getAssociatedTypeWitness();
  v20 = type metadata accessor for Binding();
  *(_QWORD *)(v5 - 264) = v20;
  *(_QWORD *)(v5 - 272) = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v5 - 312) = &v63[-v23];
  v24 = *(void (**)(_BYTE *, _QWORD, uint64_t, double))(v13 + 16);
  *(_QWORD *)(v5 - 152) = v24;
  *(_QWORD *)(v5 - 336) = v19;
  v24(v19, *(_QWORD *)(v5 - 128), v12, v22);
  v25 = *(_QWORD *)(v5 - 160);
  v26 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v25 + 16);
  *(_QWORD *)(v5 - 344) = v26;
  v27 = v11;
  v28 = *(_QWORD *)(v5 - 328);
  v26(v27, *(_QWORD *)(v5 - 144), v28);
  v29 = *(unsigned __int8 *)(v13 + 80);
  v30 = (v29 + 96) & ~v29;
  v31 = *(unsigned __int8 *)(v25 + 80);
  v32 = v30;
  *(_QWORD *)(v5 - 376) = v30;
  v33 = (v14 + v31 + v30) & ~v31;
  *(_QWORD *)(v5 - 384) = v33 + v7;
  v34 = v33;
  *(_QWORD *)(v5 - 408) = v33;
  *(_QWORD *)(v5 - 392) = v29 | v31 | 7;
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = 0;
  v35[3] = 0;
  v35[4] = v4;
  v35[5] = v2;
  v36 = *(_QWORD *)(v5 - 280);
  v37 = *(_QWORD *)(v5 - 304);
  v35[6] = v36;
  v35[7] = v37;
  v38 = *(_QWORD *)(v5 - 136);
  v35[8] = v3;
  v35[9] = v38;
  v40 = *(_QWORD *)(v5 - 256);
  v39 = *(_QWORD *)(v5 - 248);
  v35[10] = v40;
  v35[11] = v39;
  v41 = (char *)v35 + v32;
  v42 = *(void (**)(char *, _BYTE *, uint64_t))(v13 + 32);
  *(_QWORD *)(v5 - 416) = v42;
  v43 = *(_QWORD *)(v5 - 168);
  v42(v41, v19, v43);
  v44 = (char *)v35 + v34;
  v45 = *(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 160) + 32);
  *(_QWORD *)(v5 - 160) = v45;
  v46 = v28;
  v45(v44, *(_QWORD *)(v5 - 352), v28);
  v47 = *(_QWORD *)(v5 - 320);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 - 152))(v47, *(_QWORD *)(v5 - 128), v43);
  v48 = *(_QWORD *)(v5 - 288);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 - 344))(v48, *(_QWORD *)(v5 - 144), v46);
  v49 = (char *)swift_allocObject();
  *((_QWORD *)v49 + 2) = 0;
  *((_QWORD *)v49 + 3) = 0;
  v50 = *(_QWORD *)(v5 - 400);
  *((_QWORD *)v49 + 4) = *(_QWORD *)(v5 - 368);
  *((_QWORD *)v49 + 5) = v50;
  *((_QWORD *)v49 + 6) = v36;
  *((_QWORD *)v49 + 7) = v37;
  v51 = *(_QWORD *)(v5 - 136);
  *((_QWORD *)v49 + 8) = *(_QWORD *)(v5 - 360);
  *((_QWORD *)v49 + 9) = v51;
  v52 = &v49[*(_QWORD *)(v5 - 376)];
  *((_QWORD *)v49 + 10) = v40;
  *((_QWORD *)v49 + 11) = v39;
  v53 = *(_QWORD *)(v5 - 168);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 - 416))(v52, v47, v53);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 - 160))(&v49[*(_QWORD *)(v5 - 408)], v48, v46);
  v54 = *(_QWORD *)(v5 - 312);
  Binding.init(get:set:)();
  v55 = *(_QWORD *)(v5 - 336);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 - 152))(v55, *(_QWORD *)(v5 - 128), v53);
  *(_QWORD *)(v5 - 120) = *(_QWORD *)(v5 - 216);
  v56 = *(_QWORD *)(v5 - 232);
  (*(void (**)(uint64_t))(v5 - 192))(v54);
  v57 = *(_QWORD *)(v5 - 240);
  EditableCollectionContent.init(data:editActions:content:)(v55, (uint64_t *)(v5 - 120), v56, v36, v50, v57);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 272) + 8))(v54, *(_QWORD *)(v5 - 264));
  v58 = *(_QWORD *)(v5 - 208);
  v59 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> EditableCollectionContent<A, B>, v58, v5 + 40);
  v60 = *(_QWORD *)(v5 - 224);
  static ViewBuilder.buildExpression<A>(_:)(v57, v58, v59);
  v61 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 184) + 8);
  v61(v57, v58);
  static ViewBuilder.buildBlock<A>(_:)(v60, v58, *(_QWORD *)(v5 - 176));
  return ((uint64_t (*)(uint64_t, uint64_t))v61)(v60, v58);
}

uint64_t sub_1872D0494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Binding();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = v0 + ((v3 + 80) & ~v3);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 32), v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 32);
  v11 = *(_OWORD *)(v2 + 56);
  v12 = *(_OWORD *)(v2 + 40);
  v7 = *(_QWORD *)(v2 + 72);
  v8 = *(_QWORD *)(type metadata accessor for Binding() - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(a1, v2 + v9, *(_QWORD *)(v2 + v10), *(_QWORD *)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), v5, v6, a2, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v7);
}

uint64_t type metadata accessor for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EditableCollectionContent);
}

uint64_t closure #1 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  _BYTE v15[32];

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v9);
  v10 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  v12 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v12, AssociatedTypeWitness);
  v10(v15, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, a3);
}

uint64_t closure #2 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a1;
  v9 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = (char *)&v23 - v15;
  v17 = swift_getAssociatedTypeWitness();
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  (*(void (**)(char *, uint64_t, double))(v20 + 16))((char *)&v23 - v21, a5, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v24, AssociatedTypeWitness);
  type metadata accessor for Binding();
  MEMORY[0x18D75B9C8]();
  dispatch thunk of MutableCollection.subscript.setter();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a7);
}

uint64_t EditableCollectionContent.init(data:editActions:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, double);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t);
  char v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t (**v35)(uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a1;
  v11 = type metadata accessor for Binding();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v36 - v15;
  v17 = *a2;
  v37 = *(_QWORD *)(a4 - 8);
  v38 = a3;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v37 + 16);
  v40 = a6;
  v18(a6, a3, a4, v14);
  v41 = v17;
  v21 = type metadata accessor for EditActions(0, a5, v19, v20);
  v23 = 0;
  v24 = 0;
  if ((EditActions.canDelete.getter(v21) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v39, v11);
    v25 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = a4;
    *(_QWORD *)(v24 + 24) = a5;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v24 + v25, v16, v11);
    v23 = partial apply for closure #1 in EditableCollectionContent.init(data:editActions:content:);
  }
  v36 = v16;
  v26 = type metadata accessor for EditableCollectionContent(0, a4, a5, v22);
  v27 = (uint64_t (**)(uint64_t))(v40 + *(int *)(v26 + 36));
  *v27 = v23;
  v27[1] = (uint64_t (*)(uint64_t))v24;
  v41 = v17;
  v28 = EditActions.canDelete.getter(v21);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, a4);
  if ((v28 & 1) != 0)
  {
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    v30 = v36;
    v29(v36, v39, v11);
    v31 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = a4;
    *(_QWORD *)(v32 + 24) = a5;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v29)(v32 + v31, v30, v11);
    v34 = partial apply for closure #2 in EditableCollectionContent.init(data:editActions:content:);
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v39, v11);
    v34 = 0;
    v32 = 0;
  }
  v35 = (uint64_t (**)(uint64_t, uint64_t))(v40 + *(int *)(v26 + 40));
  *v35 = v34;
  v35[1] = (uint64_t (*)(uint64_t, uint64_t))v32;
  return result;
}

uint64_t EditActions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EditActions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static EditActions.move.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static EditActions.all.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for EditActions(0, a1, a3, a4);
  static Array._allocateUninitialized(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>, v4);
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t EditActions.canDelete.getter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>, a1);
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance EditActions<A>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return EditActions.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.init() in conformance EditActions<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>, a1);
  lazy protocol witness table accessor for type Int and conformance Int();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance EditActions<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  return OptionSet<>.contains(_:)();
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance EditActions<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance EditActions<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance EditActions<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>, a3);
  return OptionSet<>.insert(_:)();
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance EditActions<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance EditActions<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(a1, a2, a3, MEMORY[0x1E0DEE948]);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(a1, a2, a3, MEMORY[0x1E0DEE938]);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(a1, a2, a3, MEMORY[0x1E0DEE940]);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  v7 = lazy protocol witness table accessor for type Int and conformance Int();
  return a4(a1, a2, v6, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EditActions<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = EditActions.init(rawValue:)(*a1, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EditActions<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EditActions.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance EditActions<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>);
  return SetAlgebra<>.init(arrayLiteral:)();
}

void static EditActions<A>.delete.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static EditActions<A>.all.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = type metadata accessor for EditActions(255, a1, a3, a4);
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  *v5 = 1;
  v6 = type metadata accessor for Array();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>, v4);
  return SetAlgebra<>.init(arrayLiteral:)();
}

{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  v4 = type metadata accessor for EditActions(255, a1, a3, a4);
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  *v5 = xmmword_187BF9830;
  v6 = type metadata accessor for Array();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditActions<A>, v4);
  return SetAlgebra<>.init(arrayLiteral:)();
}

void static EditActions<A>.move.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static EditActions<A>.all.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t closure #1 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8]();
  type metadata accessor for MutableCollection & RangeReplaceableCollection();
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ToggleStyleConfiguration.Effect(&v14, &v17);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v17, v18);
    RangeReplaceableCollection<>.remove(atOffsets:)();
    outlined init with copy of MutableCollection & RangeReplaceableCollection((uint64_t)&v17, (uint64_t)&v14);
LABEL_5:
    swift_dynamicCast();
    specialized Binding.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  }
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  outlined destroy of (MutableCollection & RangeReplaceableCollection)?((uint64_t)&v14);
  MEMORY[0x18D75B9C8](v12);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for RangeReplaceableCollection);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of OptionalBinaryInteger(&v14, (uint64_t)&v17);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v17, v18);
    RangeReplaceableCollection._remove(atOffsets:)();
    outlined init with copy of TableColumnList((uint64_t)&v17, (uint64_t)&v14);
    goto LABEL_5;
  }
  *(_QWORD *)&v16 = 0;
  v14 = 0u;
  v15 = 0u;
  return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v14, &lazy cache variable for type metadata for RangeReplaceableCollection?, &lazy cache variable for type metadata for RangeReplaceableCollection);
}

uint64_t closure #2 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12[2];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;

  v6 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  type metadata accessor for Binding();
  MEMORY[0x18D75B9C8]();
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for MutableCollection);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of OptionalBinaryInteger(v12, (uint64_t)v14);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
    MutableCollection.move(fromOffsets:toOffset:)();
    outlined init with copy of TableColumnList((uint64_t)v14, (uint64_t)v12);
    swift_dynamicCast();
    specialized Binding.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v12, &lazy cache variable for type metadata for MutableCollection?, &lazy cache variable for type metadata for MutableCollection);
  }
}

uint64_t EditableCollectionContent<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t (*v50)(uint64_t);
  uint64_t v51;

  v4 = v3;
  v46 = a2;
  v47 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteDefaultTraitKey>);
  v10 = type metadata accessor for ModifiedContent();
  v43 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v40 - v12;
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveDefaultTraitKey>);
  v14 = type metadata accessor for ModifiedContent();
  v45 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v42 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v44 = (char *)&v40 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v4, v6, v19);
  v40 = a1;
  v41 = v4;
  v21 = (uint64_t *)(v4 + *(int *)(a1 + 36));
  v23 = *v21;
  v22 = v21[1];
  if (*v21)
  {
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v23;
    *(_QWORD *)(v24 + 24) = v22;
    v25 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  v50 = v25;
  v51 = v24;
  outlined copy of AppIntentExecutor?(v23);
  v26 = v46;
  View._trait<A>(_:_:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v25);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v27 = (uint64_t *)(v41 + *(int *)(v40 + 40));
  v28 = *v27;
  v29 = v27[1];
  if (*v27)
  {
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v28;
    *(_QWORD *)(v30 + 24) = v29;
    v31 = (uint64_t (*)(uint64_t))partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @guaranteed Transaction) -> ();
  }
  else
  {
    v31 = 0;
    v30 = 0;
  }
  v50 = v31;
  v51 = v30;
  outlined copy of AppIntentExecutor?(v28);
  v32 = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteDefaultTraitKey>);
  v49[0] = v26;
  v49[1] = v32;
  v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v49);
  v34 = v42;
  View._trait<A>(_:_:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v31);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v10);
  v35 = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveDefaultTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveDefaultTraitKey>);
  v48[0] = v33;
  v48[1] = v35;
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v48);
  v37 = (uint64_t)v44;
  static ViewBuilder.buildExpression<A>(_:)(v34, v14, v36);
  v38 = *(void (**)(char *, uint64_t))(v45 + 8);
  v38(v34, v14);
  static ViewBuilder.buildBlock<A>(_:)(v37, v14, v47);
  return ((uint64_t (*)(uint64_t, uint64_t))v38)(v37, v14);
}

void IndexedIdentifierCollection.Element.init(index:id:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872D18D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v3 + *(int *)(a1 + 52), v2, v1);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  return a3(a1, *a2);
}

uint64_t protocol witness for View.body.getter in conformance <> EditableCollectionContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return EditableCollectionContent<>.body.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

void closure #1 in IndexedIdentifierCollection.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];

  v21 = a5;
  v22 = a4;
  v20[1] = *(_QWORD *)(*a3 + *MEMORY[0x1E0DEE2A8] + 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v20 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v17 = (char *)v20 - v16;
  (*(void (**)(char *, uint64_t, double))(v18 + 16))((char *)v20 - v16, a1, v15);
  v19 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v8 + 16))(v12);
  v19(v23, 0);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  IndexedIdentifierCollection.Element.init(index:id:)((uint64_t)v17, v21);
}

void IndexedIdentifierCollection.startIndex.getter()
{
  IndexedIdentifierCollection.startIndex.getter();
}

{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
}

void IndexedIdentifierCollection.endIndex.getter()
{
  IndexedIdentifierCollection.startIndex.getter();
}

uint64_t sub_1872D1B58()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v2 = type metadata accessor for LazyMapSequence();
  return v0(v2, AssociatedConformanceWitness);
}

void IndexedIdentifierCollection.subscript.getter()
{
  IndexedIdentifierCollection.subscript.getter();
}

{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
}

void IndexedIdentifierCollection.index(after:)()
{
  IndexedIdentifierCollection.subscript.getter();
}

uint64_t sub_1872D1C48()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v3 = type metadata accessor for LazyMapSequence();
  return v0(v1, v3, AssociatedConformanceWitness);
}

void protocol witness for Collection.subscript.read in conformance IndexedIdentifierCollection<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  IndexedIdentifierCollection.subscript.read(v6, a2, a3);
}

void (*sub_1872D1CF8(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void IndexedIdentifierCollection.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  __int128 v6;

  v5 = malloc(0x38uLL);
  *a1 = v5;
  v6 = *(_OWORD *)(a3 + 32);
  *v5 = *(_OWORD *)(a3 + 16);
  v5[1] = v6;
  type metadata accessor for IndexedIdentifierCollection.Element();
}

void sub_1872D1D5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[4] = a1;
  v2 = *(_QWORD *)(a1 - 8);
  v1[5] = v2;
  v1[6] = malloc(*(_QWORD *)(v2 + 64));
  IndexedIdentifierCollection.subscript.getter();
}

void (*sub_1872D1D88())(uint64_t a1)
{
  return IndexedIdentifierCollection.subscript.read;
}

void IndexedIdentifierCollection.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 48);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 32));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance IndexedIdentifierCollection<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void protocol witness for Collection.formIndex(after:) in conformance IndexedIdentifierCollection<A, B>()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v1);
  IndexedIdentifierCollection.index(after:)();
}

uint64_t sub_1872D1EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

void protocol witness for Sequence.makeIterator() in conformance IndexedIdentifierCollection<A, B>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  double v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1, v7);
  IndexedIdentifierCollection.startIndex.getter();
}

uint64_t sub_1872D1FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexedIdentifierCollection<A, B>, v2);
  v7 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v0 + *(int *)(v7 + 36), v4, v3);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IndexedIdentifierCollection<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexedIdentifierCollection<A, B>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexedIdentifierCollection<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IndexedIdentifierCollection<A, B>, a1);
  return Collection._copyToContiguousArray()();
}

void IndexedIdentifierCollection<>.index(before:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872D2104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;

  swift_getAssociatedConformanceWitness();
  v1 = type metadata accessor for LazyMapSequence();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75E50C](v0, v1, AssociatedConformanceWitness);
}

void protocol witness for BidirectionalCollection.index(before:) in conformance <> IndexedIdentifierCollection<A, B>()
{
  IndexedIdentifierCollection<>.index(before:)();
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> IndexedIdentifierCollection<A, B>()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v1);
  IndexedIdentifierCollection<>.index(before:)();
}

uint64_t sub_1872D221C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a3, &v5);
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;

  v9 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a3, &v9);
  return MEMORY[0x18D75CB20](a1, a2, a3, v7);
}

uint64_t type metadata accessor for EditActions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EditActions);
}

void type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _TraitWritingModifier();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1872D23E0()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for IndexedIdentifierCollection.Element()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for RawRepresentable in EditActions<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for SetAlgebra in EditActions<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in EditActions<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for ExpressibleByArrayLiteral in EditActions<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in <> EditableCollectionContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for Sequence in IndexedIdentifierCollection<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in IndexedIdentifierCollection<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

void base witness table accessor for Collection in <> IndexedIdentifierCollection<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, MEMORY[0x1E0DEA210]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, MEMORY[0x1E0DEDE28]);
}

uint64_t base witness table accessor for BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a1, &v4);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, MEMORY[0x1E0DEA220]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, MEMORY[0x1E0DEDE40]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x18D75FFDC](a4, a2, &v9);
  return MEMORY[0x18D75FFDC](a5, a1, &v8);
}

uint64_t type metadata completion function for EditableCollectionContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EditableCollectionContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_QWORD *)(v10 + 8) = v12;
      swift_retain();
    }
    v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      return v4;
    }
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for EditableCollectionContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(void))(v3 + 8))();
  v5 = (_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
    result = swift_release();
  if (*(_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
    swift_retain();
  }
  v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = v8[1];
      *v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v7 = *(_OWORD *)v8;
LABEL_8:
  v12 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v16 = v13[1];
      *v12 = v14;
      v12[1] = v16;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    return a1;
  }
  if (v14 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v15 = v13[1];
  *v12 = v14;
  v12[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v7 = *(_OWORD *)v8;
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v8;
    *(_QWORD *)(v7 + 8) = v9;
  }
  v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v11 = (uint64_t *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = *v11;
  if ((unint64_t)*v11 < 0xFFFFFFFF)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v13 = v11[1];
    *(_QWORD *)v10 = v12;
    *(_QWORD *)(v10 + 8) = v13;
  }
  return a1;
}

uint64_t assignWithTake for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v11 = v8[1];
      *v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = v8[1];
      *v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v7 = *(_OWORD *)v8;
LABEL_8:
  v12 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      v16 = v13[1];
      *v12 = v14;
      v12[1] = v16;
      return a1;
    }
LABEL_14:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    return a1;
  }
  if (v14 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v15 = v13[1];
  *v12 = v14;
  v12[1] = v15;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditableCollectionContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1872D2BD8 + 4 * byte_187C1F150[v10]))();
  }
}

void storeEnumTagSinglePayload for EditableCollectionContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1872D2D60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1872D2DE4);
}

void sub_1872D2D68(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1872D2D70);
  JUMPOUT(0x1872D2DE4);
}

void sub_1872D2DB8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872D2DE4);
}

void sub_1872D2DC0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872D2DE4);
}

uint64_t sub_1872D2DC8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x1872D2DD4);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x1872D2DE4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void type metadata completion function for IndexedIdentifierCollection()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872D2E64()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedConformanceWitness();
  result = type metadata accessor for LazyMapSequence();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexedIdentifierCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = v10[1];
    v12 = (_QWORD *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for IndexedIdentifierCollection(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_release();
}

uint64_t initializeWithCopy for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexedIdentifierCollection(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2)
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    __asm { BR              X15 }
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

void storeEnumTagSinglePayload for IndexedIdentifierCollection(unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v10 = 0u;
    if (a2 <= v7)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v7 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v7)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1872D34B4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1872D3530);
}

void sub_1872D34BC()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1872D34C4);
  JUMPOUT(0x1872D3530);
}

void sub_1872D3508()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872D3530);
}

void sub_1872D3510()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872D3530);
}

uint64_t sub_1872D3518@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4)
    JUMPOUT(0x1872D3530);
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0)
      JUMPOUT(0x1872D352CLL);
    JUMPOUT(0x1872D3524);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

uint64_t type metadata completion function for IndexedIdentifierCollection.Element()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexedIdentifierCollection.Element(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v16, ((unint64_t)a2 + v11) & v16, v8);
  }
  return a1;
}

uint64_t destroy for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t initializeWithCopy for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithCopy for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t initializeWithTake for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, AssociatedTypeWitness);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexedIdentifierCollection.Element(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  if (a2 <= v12)
    goto LABEL_23;
  v15 = (v14 & ~v13) + *(_QWORD *)(v10 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v12)
      {
        if (v8 >= v11)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, AssociatedTypeWitness);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v14 + a1) & ~v13, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = (v14 & ~(_DWORD)v13) + *(_DWORD *)(v10 + 64);
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v12 + v19 + 1;
}

void storeEnumTagSinglePayload for IndexedIdentifierCollection.Element(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, ((*(_QWORD *)(v8 + 64) + v11) & ~v11) + *(_QWORD *)(v9 + 64));
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_1872D3D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteDefaultTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveDefaultTraitKey>);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteDefaultTraitKey>);
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveDefaultTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveDefaultTraitKey>);
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

void partial apply for closure #1 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)()
{
  type metadata accessor for Binding();
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872D3F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return closure #1 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v2, v0);
}

void objectdestroy_10Tm()
{
  type metadata accessor for Binding();
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872D3FEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v9 = (v6 + v5 + v8) & ~v8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2 + v6 + *(int *)(v4 + 32), v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2 + v9, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v2 + v9 + *(int *)(a1 + 52), v1);
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)()
{
  type metadata accessor for Binding();
  type metadata accessor for IndexedIdentifierCollection.Element();
}

uint64_t sub_1872D413C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return closure #2 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(v1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v5, v2 + ((v5 + v6 + v7) & ~v7), v3, v4);
}

uint64_t partial apply for closure #2 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Binding() - 8) + 80);
  return closure #2 in EditableCollectionContent.init(data:editActions:content:)(a1, a2, v2 + ((v7 + 32) & ~v7), v5, v6);
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Binding();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = v0 + ((v3 + 32) & ~v3);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 32), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Binding() - 8) + 80);
  return closure #1 in EditableCollectionContent.init(data:editActions:content:)(a1, v1 + ((v5 + 32) & ~v5), v3, v4);
}

unint64_t type metadata accessor for MutableCollection & RangeReplaceableCollection()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MutableCollection & RangeReplaceableCollection;
  if (!lazy cache variable for type metadata for MutableCollection & RangeReplaceableCollection)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MutableCollection & RangeReplaceableCollection);
  }
  return result;
}

uint64_t outlined destroy of (MutableCollection & RangeReplaceableCollection)?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (MutableCollection & RangeReplaceableCollection)?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (MutableCollection & RangeReplaceableCollection)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (MutableCollection & RangeReplaceableCollection)?)
  {
    type metadata accessor for MutableCollection & RangeReplaceableCollection();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (MutableCollection & RangeReplaceableCollection)?);
  }
}

uint64_t outlined init with copy of MutableCollection & RangeReplaceableCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1872D4420()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in IndexedIdentifierCollection.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 16) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in IndexedIdentifierCollection.init(_:id:)(a1, v2 + v4, *(_QWORD **)(v2 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + 40), a2);
}

void static EditActions.delete.getter()
{
  static EditActions.move.getter();
}

uint64_t _AutomaticNavigationStackStyle.makeBody(configuration:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t associated type witness table accessor for _NavigationStackStyle.Body : View in _AutomaticNavigationStackStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for _NavigationStackStyle.makeBody(configuration:) in conformance _AutomaticNavigationStackStyle@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _AutomaticNavigationStackStyle()
{
  return &type metadata for _AutomaticNavigationStackStyle;
}

_UNKNOWN **sub_1872D452C()
{
  return &protocol witness table for NavigationStackCore<A>;
}

uint64_t DocumentGroupsIntroRootView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t result;
  _BYTE v13[224];

  outlined init with copy of DocumentGroupsIntroRootView(v1, (uint64_t)v13);
  v3 = swift_allocObject();
  outlined init with take of DocumentGroupsIntroRootView((uint64_t)v13, v3 + 16);
  swift_retain();
  v4 = static Alignment.center.getter();
  v6 = v5;
  v7 = *(_QWORD *)(v1 + 16);
  swift_retain();
  swift_release();
  v8 = static Alignment.center.getter();
  v10 = v9;
  KeyPath = swift_getKeyPath();
  swift_retain();
  result = static Edge.Set.all.getter();
  *(_QWORD *)a1 = partial apply for closure #1 in DocumentGroupsIntroRootView.body.getter;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = KeyPath;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = -1;
  *(_BYTE *)(a1 + 96) = result;
  return result;
}

uint64_t closure #1 in DocumentGroupsIntroRootView.body.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v19 = *a1;
  v20 = v5;
  v21 = v6;
  v18 = specialized static CustomizableDocumentViewController.provideActions(from:)((uint64_t)&v19);
  v7 = a2[3];
  v8 = a2[5];
  v9 = a2[6];
  v17 = a2[4];
  v15 = a2[7];
  v11 = a2[9];
  v10 = a2[10];
  v13 = a2[12];
  v14 = a2[11];
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(v7, v17, v8, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v11);
  outlined copy of AppIntentExecutor?(v14);
  v16 = a2[14];
  outlined init with copy of RootModifier((uint64_t)(a2 + 15), (uint64_t)(a3 + 1));
  a3[14] = v7;
  a3[15] = v17;
  a3[16] = v8;
  a3[17] = v9;
  a3[18] = v18;
  a3[19] = v11;
  a3[20] = v10;
  a3[21] = v14;
  a3[22] = v13;
  swift_bridgeObjectRetain();
  outlined copy of Text?(v7, v17, v8, v9);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v11);
  outlined copy of AppIntentExecutor?(v14);
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Text?(v7, v17, v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  result = swift_bridgeObjectRelease();
  a3[23] = v15;
  *a3 = v16;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DocumentGroupsIntroRootView()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

id CustomizableDocumentViewControllerRepresentable.makeUIViewController(context:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[12];
  __int128 v36;
  uint64_t v37;
  __int128 v38[3];

  v2 = v1;
  if (v1[17])
  {
    v3 = *(_QWORD *)(a1 + 16);
    v34 = *(_QWORD *)(a1 + 8);
    v35[0] = v3;
    v38[0] = 0uLL;
    *(_QWORD *)&v36 = 0;
    swift_retain();
    swift_retain();
    v4 = Text.resolveString(in:with:idiom:)();
    v32 = v5;
    swift_release();
    swift_release();
  }
  else
  {
    v4 = 0;
    v32 = 0;
  }
  v7 = v1[18];
  v6 = v1[19];
  v9 = v2[20];
  v8 = v2[21];
  v10 = v2[22];
  v11 = *v2;
  v12 = *(_QWORD *)(v7 + 16);
  v33 = v4;
  v31 = v2[23];
  if (v12)
  {
    v13 = v7 + 32;
    swift_retain();
    v29 = v7;
    swift_bridgeObjectRetain_n();
    v30 = v9;
    outlined copy of AppIntentExecutor?(v6);
    v14 = v8;
    outlined copy of AppIntentExecutor?(v8);
    v28 = v11;
    swift_bridgeObjectRetain();
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      outlined init with copy of DocumentLaunchScreenAction(v13, &v34);
      outlined init with copy of DocumentCreationStrategy?((uint64_t)v35, (uint64_t)&v36);
      outlined destroy of DocumentLaunchScreenAction((uint64_t)&v34);
      if (v37)
      {
        outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)v38);
        outlined init with take of OptionalBinaryInteger(v38, (uint64_t)&v36);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        v17 = v15[2];
        v16 = v15[3];
        if (v17 >= v16 >> 1)
          v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
        v15[2] = v17 + 1;
        outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)&v15[5 * v17 + 4]);
      }
      else
      {
        outlined destroy of DocumentCreationStrategy?((uint64_t)&v36);
      }
      v13 += 48;
      --v12;
    }
    while (v12);
    v18 = v29;
    swift_bridgeObjectRelease();
    v19 = v32;
    v9 = v30;
    v20 = v6;
    v21 = v28;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(v6);
    outlined copy of AppIntentExecutor?(v8);
    swift_bridgeObjectRetain();
    v21 = v11;
    v18 = v7;
    v14 = v8;
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v20 = v6;
    v19 = v32;
  }
  v22 = objc_allocWithZone((Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation());
  v23 = IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)(v21, (uint64_t)v15);
  v24 = objc_allocWithZone((Class)type metadata accessor for CustomizableDocumentViewController());
  v25 = (void *)specialized CustomizableDocumentViewController.init<A>(_:screenBackground:actions:backgroundAccessoryView:overlayAccessoryView:documentBrowserMediator:onDocumentClose:)(v33, v19, v31, v18, v20, v9, v14, v10, (uint64_t)v23, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
  swift_release();
  outlined init with copy of RootModifier((uint64_t)(v2 + 1), (uint64_t)&v34);
  v26 = v25;
  DocumentViewController.rootModifier.setter((uint64_t)&v34);

  return v26;
}

void CustomizableDocumentViewControllerRepresentable.updateUIViewController(_:context:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[13];

  v3 = v2;
  v5 = v3[17];
  if (v5)
  {
    v6 = v3[14];
    v7 = v3[15];
    v8 = v3[16];
    v9 = *(_QWORD *)(a2 + 16);
    v24[0] = *(_QWORD *)(a2 + 8);
    v24[1] = v9;
    outlined copy of Text?(v6, v7, v8, v5);
    swift_retain();
    swift_retain();
    v10 = Text.resolveString(in:with:idiom:)();
    v12 = v11;
    swift_release();
    swift_release();
    v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle);
    v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle + 8);
    if (v14
      && (*v13 == v10 ? (v15 = v14 == v12) : (v15 = 0), v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      outlined consume of Text.Storage(v6, v7, v8 & 1);
      swift_bridgeObjectRelease();
    }
    else
    {
      *v13 = v10;
      v13[1] = v12;
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v6, v7, v8 & 1);
    }
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions) = v3[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground) = v3[23];
  swift_retain();
  swift_release();
  v16 = v3[19];
  v17 = v3[20];
  v18 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView);
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView);
  *v18 = v16;
  v18[1] = v17;
  outlined copy of AppIntentExecutor?(v16);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  v20 = v3[21];
  v21 = v3[22];
  v22 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView);
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView);
  *v22 = v20;
  v22[1] = v21;
  outlined copy of AppIntentExecutor?(v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  outlined init with copy of RootModifier((uint64_t)(v3 + 1), (uint64_t)v24);
  DocumentViewController.rootModifier.setter((uint64_t)v24);
  CustomizableDocumentViewController.setupLaunchOptions()();
}

uint64_t closure #1 in static CustomizableDocumentViewController.provideActions(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[48];
  uint64_t v6;

  outlined init with copy of SwiftUIAnySortComparator?(a2 + 240, (uint64_t)v5, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
  if (v6 == 1)
    return outlined destroy of AccessibilityTableContext?((uint64_t)v5, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
  v3 = AGGraphClearUpdate();
  MEMORY[0x1E0C80A78](v3, v4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  return outlined destroy of PlatformItem.SelectionContent((uint64_t)v5);
}

Swift::Void __swiftcall CustomizableDocumentViewController.setupLaunchOptions()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  void *v15;
  Class v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  objc_class *v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  Class v30;
  id v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  objc_class *v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  Class v49;
  id v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  id v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  UIMenuElementSize v89;
  Swift::String v90;
  UIMenu *v91;
  void *v92;
  uint64_t v93;
  Swift::OpaquePointer v94;
  uint64_t v95;
  objc_super v96;
  objc_super v97;
  _QWORD v98[5];
  id v99;
  uint64_t v100;
  UIImage_optional v101;

  v1 = v0;
  v2 = type metadata accessor for UIBackgroundConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v95 - v9;
  DocumentViewController.setupLaunchOptions()();
  v11 = &v0[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle];
  v12 = *(_QWORD **)&v0[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle + 8];
  if (v12)
  {
    v13 = *(_QWORD *)v11;
    swift_bridgeObjectRetain();
    v14 = objc_msgSend(v1, sel_launchOptions);
    v15 = (void *)MEMORY[0x18D75CC88](v13, v12);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setTitle_, v15);

  }
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground])
  {
    swift_retain();
    static UIBackgroundConfiguration.clear()();
    type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for _UIHostingView);
    v17 = objc_allocWithZone(v16);
    v18 = swift_retain();
    specialized _UIHostingView.init(rootView:)(v18);
    swift_release();
    UIBackgroundConfiguration.customView.setter();
    v12 = objc_msgSend(v1, sel_launchOptions);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
    UIDocumentViewControllerLaunchOptions.background.setter();
    swift_release();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView];
  if (v19)
  {
    v20 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView + 8];
    swift_retain();
    v21 = objc_msgSend(v1, sel_launchOptions);
    v22 = (char *)objc_msgSend(v21, sel_backgroundAccessoryView);

    if (v22)
    {
      type metadata accessor for DocumentAccessoryView();
      v23 = swift_dynamicCastClass();
      if (v23)
      {
        v12 = (_QWORD *)v23;
        v24 = (uint64_t *)(v23
                        + OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_viewProvider);
        v6 = *(char **)(v23
                      + OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_viewProvider
                      + 8);
        *v24 = v19;
        v24[1] = v20;
        swift_retain();
        swift_release();
        DocumentAccessoryView.updateRootView()();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
        goto LABEL_12;
      }

    }
    v6 = (char *)objc_msgSend(v1, sel_launchOptions);
    v25 = (objc_class *)type metadata accessor for DocumentAccessoryView();
    v26 = (char *)objc_allocWithZone(v25);
    v27 = (uint64_t *)&v26[OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_viewProvider];
    *v27 = v19;
    v27[1] = v20;
    outlined copy of AppIntentExecutor?(v19);
    outlined copy of AppIntentExecutor?(v19);
    v28 = v26;
    v29 = AnyView.init<A>(_:)();
    type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for _UIHostingView);
    v31 = objc_allocWithZone(v30);
    v32 = specialized _UIHostingView.init(rootView:)(v29);
    swift_release();
    *(_QWORD *)&v28[OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView] = v32;

    v96.receiver = v28;
    v96.super_class = v25;
    v33 = (char *)objc_msgSendSuper2(&v96, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    v34 = OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView;
    v35 = *(_QWORD *)&v33[OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView];
    v36 = v33;
    objc_msgSend(v36, sel_addSubview_, v35);
    v37 = *(void **)&v33[v34];
    v22 = v36;
    v12 = v37;
    UIView.constrainToView(_:exceptEdges:identifier:)(v22, 0, 0xD000000000000015, (void *)0x8000000187C1F6C0);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
    swift_bridgeObjectRelease();

    objc_msgSend(v6, sel_setBackgroundAccessoryView_, v22);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);

  }
  else
  {
    v22 = (char *)objc_msgSend(v1, sel_launchOptions);
    objc_msgSend(v22, sel_setBackgroundAccessoryView_, 0);
  }
LABEL_12:

  v38 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView];
  if (v38)
  {
    v39 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView + 8];
    swift_retain();
    v40 = objc_msgSend(v1, sel_launchOptions);
    v41 = (char *)objc_msgSend(v40, sel_foregroundAccessoryView);

    if (v41)
    {
      type metadata accessor for DocumentAccessoryView();
      v42 = swift_dynamicCastClass();
      if (v42)
      {
        v12 = (_QWORD *)v42;
        v43 = (uint64_t *)(v42
                        + OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_viewProvider);
        v6 = *(char **)(v42
                      + OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_viewProvider
                      + 8);
        *v43 = v38;
        v43[1] = v39;
        swift_retain();
        swift_release();
        DocumentAccessoryView.updateRootView()();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v38);
        goto LABEL_19;
      }

    }
    v6 = (char *)objc_msgSend(v1, sel_launchOptions);
    v44 = (objc_class *)type metadata accessor for DocumentAccessoryView();
    v45 = (char *)objc_allocWithZone(v44);
    v46 = (uint64_t *)&v45[OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_viewProvider];
    *v46 = v38;
    v46[1] = v39;
    outlined copy of AppIntentExecutor?(v38);
    outlined copy of AppIntentExecutor?(v38);
    v47 = v45;
    v48 = AnyView.init<A>(_:)();
    type metadata accessor for _UIHostingView<AnyView>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for _UIHostingView);
    v50 = objc_allocWithZone(v49);
    v51 = specialized _UIHostingView.init(rootView:)(v48);
    swift_release();
    *(_QWORD *)&v47[OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView] = v51;

    v97.receiver = v47;
    v97.super_class = v44;
    v52 = (char *)objc_msgSendSuper2(&v97, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    v53 = OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView;
    v54 = *(_QWORD *)&v52[OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView];
    v55 = v52;
    objc_msgSend(v55, sel_addSubview_, v54);
    v56 = *(void **)&v52[v53];
    v41 = v55;
    v12 = v56;
    UIView.constrainToView(_:exceptEdges:identifier:)(v41, 0, 0xD000000000000015, (void *)0x8000000187C1F6C0);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v38);
    swift_bridgeObjectRelease();

    objc_msgSend(v6, sel_setForegroundAccessoryView_, v41);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v38);

  }
  else
  {
    v41 = (char *)objc_msgSend(v1, sel_launchOptions);
    objc_msgSend(v41, sel_setForegroundAccessoryView_, 0);
  }
LABEL_19:

  v57 = OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions;
  v58 = *(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions] + 16);
  switch(v58)
  {
    case 2:
      v61 = objc_msgSend(v1, sel_launchOptions);
      v62 = *(_QWORD *)&v1[v57];
      if (*(_QWORD *)(v62 + 16))
      {
        v12 = v61;
        v38 = (uint64_t)*(id *)(v62 + 32);
        objc_msgSend(v12, sel_setPrimaryAction_, v38);

        v63 = objc_msgSend(v1, sel_launchOptions);
        v64 = *(_QWORD *)&v1[v57];
        if (*(_QWORD *)(v64 + 16) >= 2uLL)
        {
          v65 = v63;
          v66 = *(id *)(v64 + 80);
          objc_msgSend(v65, sel_setSecondaryAction_, v66);

          v60 = objc_msgSend(v1, sel_launchOptions);
          goto LABEL_28;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_50;
    case 1:
      v67 = objc_msgSend(v1, sel_launchOptions);
      v68 = *(_QWORD *)&v1[v57];
      if (*(_QWORD *)(v68 + 16))
      {
        v69 = v67;
        v70 = *(id *)(v68 + 32);
        objc_msgSend(v69, sel_setPrimaryAction_, v70);

        v71 = objc_msgSend(v1, sel_launchOptions);
        objc_msgSend(v71, sel_setSecondaryAction_, 0);

        v60 = objc_msgSend(v1, sel_launchOptions);
        goto LABEL_28;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    case 0:
      v59 = objc_msgSend(v1, sel_launchOptions);
      objc_msgSend(v59, sel_setSecondaryAction_, 0);

      v60 = objc_msgSend(v1, sel_launchOptions);
LABEL_28:
      v72 = v60;
      objc_msgSend(v72, sel__setSecondaryMenu_, 0);
      goto LABEL_47;
  }
  v73 = objc_msgSend(v1, sel_launchOptions);
  v74 = *(_QWORD *)&v1[v57];
  if (!*(_QWORD *)(v74 + 16))
    goto LABEL_51;
  v75 = v73;
  v76 = *(id *)(v74 + 32);
  objc_msgSend(v75, sel_setPrimaryAction_, v76);

  v77 = objc_msgSend(v1, sel_launchOptions);
  objc_msgSend(v77, sel_setSecondaryAction_, 0);

  v12 = *(_QWORD **)&v1[v57];
  v6 = (char *)v12[2];
  v38 = v6 != 0;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v78 = swift_dynamicCastClass();
  if (!v78)
  {
    swift_bridgeObjectRelease();
    v78 = MEMORY[0x1E0DEE9D8];
  }
  v79 = *(char **)(v78 + 16);
  swift_release();
  if (v79 == &v6[-v38])
  {
    v80 = swift_dynamicCastClass();
    if (!v80)
    {
      swift_bridgeObjectRelease();
      v80 = MEMORY[0x1E0DEE9D8];
    }
    goto LABEL_35;
  }
LABEL_52:
  swift_bridgeObjectRelease();
  specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v12, (uint64_t)(v12 + 4), v38, (2 * (_QWORD)v6) | 1);
  v80 = v93;
LABEL_35:
  swift_bridgeObjectRelease();
  v81 = *(_QWORD *)(v80 + 16);
  if (v81)
  {
    v82 = v80 + 32;
    while (1)
    {
      outlined init with copy of DocumentLaunchScreenAction(v82, &v99);
      outlined init with copy of DocumentCreationStrategy?((uint64_t)&v100, (uint64_t)v98);
      v83 = v98[3];
      outlined destroy of DocumentCreationStrategy?((uint64_t)v98);
      outlined destroy of DocumentLaunchScreenAction((uint64_t)&v99);
      if (v83)
        break;
      v82 += 48;
      if (!--v81)
        goto LABEL_41;
    }
    MEMORY[0x18D75AC90](0x10000000000000CDLL, 0x8000000187BDBF20);
  }
LABEL_41:
  v84 = objc_msgSend(v1, sel_launchOptions);
  v85 = MEMORY[0x18D75CC88](0xD00000000000001ALL, 0x8000000187BDBF00);
  v86 = *(_QWORD *)(v80 + 16);
  if (v86)
  {
    v98[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v87 = v80 + 32;
    do
    {
      outlined init with copy of DocumentLaunchScreenAction(v87, &v99);
      v88 = v99;
      outlined destroy of DocumentLaunchScreenAction((uint64_t)&v99);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v87 += 48;
      --v86;
    }
    while (v86);
    v89 = v98[0];
    swift_release();
  }
  else
  {
    swift_release();
    v89 = MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v90._countAndFlagsBits = 0;
  v90._object = (void *)0xE000000000000000;
  v101.value.super.isa = 0;
  v101.is_nil = v85;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v91, v90, (Swift::String_optional)0, v101, 0, 0xFFFFFFFFFFFFFFFFLL, v89, v94);
  v72 = v92;
  objc_msgSend(v84, sel__setSecondaryMenu_, v92);

LABEL_47:
}

uint64_t CustomizableDocumentViewController.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView));
}

id CustomizableDocumentViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustomizableDocumentViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CustomizableDocumentViewController()
{
  return objc_opt_self();
}

uint64_t DocumentAccessoryView.updateRootView()()
{
  UIView *v0;
  UIView *v1;
  UILayoutGuide *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(_QWORD *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  _QWORD v16[4];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __C::CGRect_optional v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v1 = v0;
  v2 = -[UIView layoutMarginsGuide](v0, sel_layoutMarginsGuide);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UILayoutGuide);
  UIPopoverPresentationControllerSourceItem.frame(in:)(&v20, v1);

  result = outlined init with take of CGRect?((uint64_t)&v20, (uint64_t)&v21);
  if ((v24 & 1) == 0)
  {
    v15 = v21;
    v4 = v22;
    v5 = v23;
    -[UIView frame](v1, sel_frame);
    v6 = *(Class *)((char *)&v1->super.super.isa
                  + OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView);
    v7 = *(uint64_t (**)(_QWORD *))((char *)&v1->super.super.isa
                                            + OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_viewProvider);
    v16[0] = v8;
    v16[1] = v9;
    v16[2] = v10;
    v16[3] = v11;
    v17 = v15;
    v18 = v4;
    v19 = v5;
    v12 = v6;
    swift_retain();
    v13 = v7(v16);
    swift_release();
    static Transaction.current.getter();
    v14 = (_QWORD *)((char *)v12 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v12) + 0x60));
    swift_beginAccess();
    *v14 = v13;
    swift_retain();
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();
    swift_release();

    swift_release_n();
    return swift_release();
  }
  return result;
}

char *DocumentAccessoryView.hitTest(_:with:)(uint64_t a1, double a2, double a3)
{
  char *v3;
  char *v4;
  char *v8;
  BOOL v9;
  char *v10;
  void *v11;
  id v12;
  char v13;
  objc_super v15;

  v4 = v3;
  v15.receiver = v4;
  v15.super_class = (Class)swift_getObjectType();
  v8 = (char *)objc_msgSendSuper2(&v15, sel_hitTest_withEvent_, a1, a2, a3);
  if (v8)
    v9 = v8 == v4;
  else
    v9 = 0;
  if (v9)
    goto LABEL_7;
  v10 = v8;
  if (v8)
  {
    v11 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUIP33_F9CBE93C642018E3EAE34C65780A39FB21DocumentAccessoryView_hostingView];
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v12 = v11;
    v4 = v10;
    v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
LABEL_7:

      return 0;
    }
  }
  return v10;
}

uint64_t type metadata accessor for DocumentAccessoryView()
{
  return objc_opt_self();
}

void destroy for DocumentLaunchScreenAction(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
}

_QWORD *initializeWithCopy for DocumentLaunchScreenAction(_QWORD *a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v5 = a1 + 1;
  v6 = a2 + 8;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = v4;
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 40);
    a1[4] = v7;
    a1[5] = v9;
    (**(void (***)(_QWORD *, uint64_t, uint64_t))(v7 - 8))(v5, v6, v7);
  }
  else
  {
    v10 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v10;
    v5[4] = *(_QWORD *)(v6 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for DocumentLaunchScreenAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 24) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for DocumentLaunchScreenAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for DocumentLaunchScreenAction()
{
  return &type metadata for DocumentLaunchScreenAction;
}

uint64_t sub_1872D6220()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

_QWORD *outlined init with copy of DocumentLaunchScreenAction(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for DocumentLaunchScreenAction(a2, a1);
  return a2;
}

uint64_t outlined init with copy of DocumentCreationStrategy?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (void (*)(uint64_t))type metadata accessor for DocumentCreationStrategy);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for DocumentCreationStrategy()
{
  unint64_t result;

  result = lazy cache variable for type metadata for DocumentCreationStrategy;
  if (!lazy cache variable for type metadata for DocumentCreationStrategy)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
  }
  return result;
}

uint64_t outlined destroy of DocumentCreationStrategy?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (void (*)(uint64_t))type metadata accessor for DocumentCreationStrategy);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of DocumentLaunchScreenAction(uint64_t a1)
{
  destroy for DocumentLaunchScreenAction(a1);
  return a1;
}

uint64_t specialized static CustomizableDocumentViewController.provideActions(from:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  _OWORD __src[21];
  _BYTE v32[216];
  id v33[27];
  __int128 v34;
  _OWORD v35[3];
  _OWORD v36[2];
  uint64_t v37;
  _BYTE v38[24];
  _BYTE v39[216];
  uint64_t v40;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    v30 = (void *)*MEMORY[0x1E0DC4990];
    result = swift_bridgeObjectRetain();
    v5 = 0;
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v5 >= v2)
      {
        __break(1u);
        return result;
      }
      outlined init with copy of PlatformItem(v3, (uint64_t)v38);
      v37 = 0;
      memset(v36, 0, sizeof(v36));
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v40, (uint64_t)__src, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
      if (*(_QWORD *)&__src[3] == 1)
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)__src, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
      }
      else
      {
        v34 = __src[0];
        v35[0] = __src[1];
        v35[1] = __src[2];
        v35[2] = __src[3];
        if ((__src[1] & 8) != 0)
        {
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v35 + 8, (uint64_t)v33, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
          if (v33[3])
          {
            outlined destroy of DocumentCreationStrategy?((uint64_t)v36);
            outlined init with take of OptionalBinaryInteger((__int128 *)v33, (uint64_t)__src);
            outlined init with copy of TableColumnList((uint64_t)__src, (uint64_t)v36);
            v16 = *((_QWORD *)&__src[1] + 1);
            v17 = *(_QWORD *)&__src[2];
            __swift_project_boxed_opaque_existential_1(__src, *((uint64_t *)&__src[1] + 1));
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
            v20 = v19;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
            v21 = (id)MEMORY[0x18D75CC88](v18, v20);
          }
          else
          {
            outlined destroy of AccessibilityTableContext?((uint64_t)v33, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
            v21 = v30;
          }
          v9 = objc_msgSend((id)objc_opt_self(), sel_createDocumentActionWithIntent_, v21);
          swift_bridgeObjectRelease();

          outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v39, (uint64_t)v33);
          outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v33, (uint64_t)__src);
          if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)__src) == 1
            || (v22 = *(void **)&__src[0]) == 0)
          {
            outlined destroy of PlatformItem.SelectionContent((uint64_t)&v34);
          }
          else
          {
            v23 = v9;
            v24 = objc_msgSend(v22, sel_string);
            v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v27 = v26;

            v28 = HIBYTE(v27) & 0xF;
            if ((v27 & 0x2000000000000000) == 0)
              v28 = v25 & 0xFFFFFFFFFFFFLL;
            if (v28)
            {
              v29 = (void *)MEMORY[0x18D75CC88](v25, v27);
              swift_bridgeObjectRelease();
              objc_msgSend(v23, sel_setTitle_, v29);

              outlined destroy of PlatformItem.SelectionContent((uint64_t)&v34);
            }
            else
            {
              outlined destroy of PlatformItem.SelectionContent((uint64_t)&v34);

              swift_bridgeObjectRelease();
            }
          }
          goto LABEL_12;
        }
        outlined destroy of PlatformItem.SelectionContent((uint64_t)&v34);
      }
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v39, (uint64_t)v32);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v32, (uint64_t)v33);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v33) != 1 && v33[0])
      {
        v7 = objc_msgSend(v33[0], sel_string);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
      outlined init with copy of PlatformItem((uint64_t)v38, (uint64_t)__src);
      v8 = swift_allocObject();
      memcpy((void *)(v8 + 16), __src, 0x150uLL);
      v9 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
LABEL_12:
      outlined init with copy of DocumentCreationStrategy?((uint64_t)v36, (uint64_t)__src + 8);
      *(_QWORD *)&__src[0] = v9;
      v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v12 = *((_QWORD *)v6 + 2);
      v11 = *((_QWORD *)v6 + 3);
      if (v12 >= v11 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v6);
      ++v5;
      *((_QWORD *)v6 + 2) = v12 + 1;
      v13 = &v6[48 * v12];
      v14 = __src[0];
      v15 = __src[2];
      *((_OWORD *)v13 + 3) = __src[1];
      *((_OWORD *)v13 + 4) = v15;
      *((_OWORD *)v13 + 2) = v14;

      outlined destroy of DocumentCreationStrategy?((uint64_t)v36);
      result = outlined destroy of PlatformItem((uint64_t)v38);
      v2 = *(_QWORD *)(v1 + 16);
      v3 += 336;
      if (v5 == v2)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v6;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t outlined init with take of PlatformItem.PrimaryContent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1872D68C4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 40);
  if (v1 != (void *)1)
  {

    v2 = *(_QWORD *)(v0 + 184);
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v4 = *(unsigned __int8 *)(v0 + 72);
      if (v4 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v0 + 64), v4);
        v2 = *(_QWORD *)(v0 + 184);
        v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v3 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), v2);
      swift_unknownObjectRelease();
      swift_release();

    }
    swift_release();
  }
  if (*(_QWORD *)(v0 + 304) >= 2uLL)
    __swift_destroy_boxed_opaque_existential_1(v0 + 280);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CustomizableDocumentViewController.provideActions(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static CustomizableDocumentViewController.provideActions(from:)(a1, v1 + 16);
}

uint64_t outlined destroy of PlatformItem.SelectionContent(uint64_t a1)
{
  destroy for PlatformButtonActionTransform(a1);
  return a1;
}

void (**partial apply for closure #1 in closure #1 in PlatformItem.SelectionContent.select()@<X0>(char *a1@<X8>))(uint64_t)
{
  return closure #1 in closure #1 in PlatformItem.SelectionContent.select()(a1);
}

uint64_t destroy for DocumentGroupsIntroRootView(uint64_t a1)
{
  uint64_t result;
  int v3;

  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(a1 + 48))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 72))
    swift_release();
  if (*(_QWORD *)(a1 + 88))
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_weakDestroy();
  result = swift_weakDestroy();
  if (*(_QWORD *)(a1 + 168))
    result = __swift_destroy_boxed_opaque_existential_1(a1 + 144);
  v3 = *(unsigned __int8 *)(a1 + 208);
  if (v3 != 255)
    return outlined consume of SceneID(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), v3 & 1);
  return result;
}

uint64_t initializeWithCopy for DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_BYTE *)(a2 + 40);
    outlined copy of Text.Storage(v6, v7, v8);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v9;
  }
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10)
  {
    v12 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  v13 = *(_QWORD *)(a2 + 88);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v13;
    *(_QWORD *)(a1 + 96) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  }
  v15 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  v16 = (_OWORD *)(a1 + 144);
  v17 = (_OWORD *)(a2 + 144);
  v18 = *(_QWORD *)(a2 + 168);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = v18;
    *(_QWORD *)(a1 + 176) = v19;
    (**(void (***)(_OWORD *, _OWORD *))(v18 - 8))(v16, v17);
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 160);
    *v16 = *v17;
    *(_OWORD *)(a1 + 160) = v20;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  }
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v21 = *(unsigned __int8 *)(a2 + 208);
  if (v21 == 255)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  }
  else
  {
    v22 = v21 & 1;
    v23 = *(_QWORD *)(a2 + 192);
    v24 = *(_QWORD *)(a2 + 200);
    outlined copy of SceneID(v23, v24, v21 & 1);
    *(_QWORD *)(a1 + 192) = v23;
    *(_QWORD *)(a1 + 200) = v24;
    *(_BYTE *)(a1 + 208) = v22;
  }
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  return a1;
}

uint64_t assignWithCopy for DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 *v32;
  int v33;
  char v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a2 + 32);
      v9 = *(_BYTE *)(a2 + 40);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_BYTE *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v8;
      *(_BYTE *)(a1 + 40) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 24);
      v16 = *(_OWORD *)(a2 + 40);
      *v4 = *v5;
      *(_OWORD *)(a1 + 40) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 24);
    v14 = *(_QWORD *)(a2 + 32);
    v15 = *(_BYTE *)(a2 + 40);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v14;
    *(_BYTE *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 40);
    *v4 = *v5;
    *(_OWORD *)(a1 + 40) = v17;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v18)
    {
      v19 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = v18;
      *(_QWORD *)(a1 + 80) = v19;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v18)
  {
    v20 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v18;
    *(_QWORD *)(a1 + 80) = v20;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_15:
  v21 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v21)
    {
      v22 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v21;
      *(_QWORD *)(a1 + 96) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v21)
  {
    v23 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v21;
    *(_QWORD *)(a1 + 96) = v23;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_22:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  v24 = (_OWORD *)(a1 + 144);
  v25 = (_OWORD *)(a2 + 144);
  v26 = *(_QWORD *)(a2 + 168);
  if (*(_QWORD *)(a1 + 168))
  {
    if (v26)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 144), (uint64_t *)(a2 + 144));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 144);
      v27 = *(_QWORD *)(a2 + 176);
      v28 = *(_OWORD *)(a2 + 160);
      *v24 = *v25;
      *(_OWORD *)(a1 + 160) = v28;
      *(_QWORD *)(a1 + 176) = v27;
    }
  }
  else if (v26)
  {
    *(_QWORD *)(a1 + 168) = v26;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(a1 + 144, a2 + 144);
  }
  else
  {
    v29 = *v25;
    v30 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *v24 = v29;
    *(_OWORD *)(a1 + 160) = v30;
  }
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v31 = (__int128 *)(a1 + 192);
  v32 = (__int128 *)(a2 + 192);
  v33 = *(unsigned __int8 *)(a2 + 208);
  if (*(unsigned __int8 *)(a1 + 208) == 255)
  {
    if (v33 == 255)
    {
      v35 = *v32;
      *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
      *v31 = v35;
    }
    else
    {
      v42 = v33 & 1;
      v43 = *(_QWORD *)(a2 + 192);
      v44 = *(_QWORD *)(a2 + 200);
      outlined copy of SceneID(v43, v44, v33 & 1);
      *(_QWORD *)(a1 + 192) = v43;
      *(_QWORD *)(a1 + 200) = v44;
      *(_BYTE *)(a1 + 208) = v42;
    }
  }
  else if (v33 == 255)
  {
    outlined destroy of SceneID(a1 + 192);
    v34 = *(_BYTE *)(a2 + 208);
    *v31 = *v32;
    *(_BYTE *)(a1 + 208) = v34;
  }
  else
  {
    v36 = v33 & 1;
    v37 = *(_QWORD *)(a2 + 192);
    v38 = *(_QWORD *)(a2 + 200);
    outlined copy of SceneID(v37, v38, v33 & 1);
    v39 = *(_QWORD *)(a1 + 192);
    v40 = *(_QWORD *)(a1 + 200);
    v41 = *(_BYTE *)(a1 + 208);
    *(_QWORD *)(a1 + 192) = v37;
    *(_QWORD *)(a1 + 200) = v38;
    *(_BYTE *)(a1 + 208) = v36;
    outlined consume of SceneID(v39, v40, v41);
  }
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  return a1;
}

uint64_t initializeWithTake for DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v6;
  swift_weakTakeInit();
  swift_weakTakeInit();
  swift_weakTakeInit();
  v8 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v8;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  return a1;
}

uint64_t assignWithTake for DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  if (*(_QWORD *)(a1 + 48))
  {
    v5 = *(_QWORD *)(a2 + 48);
    if (v5)
    {
      v6 = *(_BYTE *)(a2 + 40);
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_BYTE *)(a1 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 48) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 24);
  }
  v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v10;
LABEL_6:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 80) = v12;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v11)
  {
    v13 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v13;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
LABEL_13:
  v14 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v14;
      *(_QWORD *)(a1 + 96) = v15;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v14)
  {
    v16 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v14;
    *(_QWORD *)(a1 + 96) = v16;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_20:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(_QWORD *)(a1 + 168))
  {
    if (*(_QWORD *)(a2 + 168))
      __swift_destroy_boxed_opaque_existential_1(a1 + 144);
    else
      outlined destroy of AnyHashable(a1 + 144);
  }
  v17 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v17;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v18 = (_OWORD *)(a2 + 192);
  v19 = *(unsigned __int8 *)(a1 + 208);
  if (v19 != 255)
  {
    v20 = *(unsigned __int8 *)(a2 + 208);
    if (v20 != 255)
    {
      v21 = *(_QWORD *)(a1 + 192);
      v22 = *(_QWORD *)(a1 + 200);
      *(_OWORD *)(a1 + 192) = *v18;
      *(_BYTE *)(a1 + 208) = v20 & 1;
      outlined consume of SceneID(v21, v22, v19 & 1);
      goto LABEL_29;
    }
    outlined destroy of SceneID(a1 + 192);
  }
  *(_OWORD *)(a1 + 192) = *v18;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
LABEL_29:
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentGroupsIntroRootView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentGroupsIntroRootView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentGroupsIntroRootView()
{
  return &type metadata for DocumentGroupsIntroRootView;
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupsIntroRootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1872D73C8()
{
  uint64_t v0;
  int v1;

  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 88))
    swift_release();
  if (*(_QWORD *)(v0 + 104))
    swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(_QWORD *)(v0 + 184))
    __swift_destroy_boxed_opaque_existential_1(v0 + 160);
  v1 = *(unsigned __int8 *)(v0 + 224);
  if (v1 != 255)
    outlined consume of SceneID(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), v1 & 1);
  return swift_deallocObject();
}

uint64_t outlined init with take of DocumentGroupsIntroRootView(uint64_t a1, uint64_t a2)
{
  initializeWithTake for DocumentGroupsIntroRootView(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in DocumentGroupsIntroRootView.body.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in DocumentGroupsIntroRootView.body.getter(a1, (_QWORD *)(v2 + 16), a2);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>)
  {
    type metadata accessor for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BackgroundContext>, MEMORY[0x1E0CE3780], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>);
  }
}

void type metadata accessor for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>)
  {
    type metadata accessor for PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>();
    type metadata accessor for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>);
  }
}

uint64_t type metadata accessor for PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>;
  if (!lazy cache variable for type metadata for PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    type metadata accessor for PlatformItemsReader();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyView? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type AnyView? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyView? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E0CE7518], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = MEMORY[0x1E0CE7508];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyView? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>)
  {
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>?();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?();
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>);
  }
}

void type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>?)
  {
    type metadata accessor for _UIHostingView<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>, MEMORY[0x1E0CE2BB8], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>?);
  }
}

void type metadata accessor for _UIHostingView<AnyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0CE7518]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<AnyView, _OpacityEffect>?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _UIHostingView<AnyView>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _OpacityEffect>, MEMORY[0x1E0CE2BB8], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE7508];
    v2[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for NavigationCommonTransformEnvironment);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>();
    v2 = v1;
    v3[0] = &protocol witness table for PlatformItemsReader<A, B, C>;
    v3[1] = lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?> and conformance _BackgroundModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<BackgroundContext>, MEMORY[0x1E0CE3780], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<BackgroundContext> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t destroy for CustomizableDocumentViewControllerRepresentable(uint64_t a1)
{
  int v2;

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(_QWORD *)(a1 + 56))
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255)
    outlined consume of SceneID(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v2 & 1);
  if (*(_QWORD *)(a1 + 136))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_BYTE *)(a1 + 128));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 152))
    swift_release();
  if (*(_QWORD *)(a1 + 168))
    swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *v4 = *v5;
    *(_OWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(unsigned __int8 *)(a2 + 96);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  }
  else
  {
    v10 = v9 & 1;
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 88);
    outlined copy of SceneID(v11, v12, v9 & 1);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    *(_BYTE *)(a1 + 96) = v10;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a2 + 136))
  {
    v13 = *(_QWORD *)(a2 + 112);
    v14 = *(_QWORD *)(a2 + 120);
    v15 = *(_BYTE *)(a2 + 128);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 112) = v13;
    *(_QWORD *)(a1 + 120) = v14;
    *(_BYTE *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v16;
  }
  v17 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  if (v17)
  {
    v18 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v17;
    *(_QWORD *)(a1 + 160) = v18;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  }
  v19 = *(_QWORD *)(a2 + 168);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = v19;
    *(_QWORD *)(a1 + 176) = v20;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  char v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 32);
      v7 = *(_QWORD *)(a2 + 64);
      v8 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v8;
      *(_QWORD *)(a1 + 64) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 32, a2 + 32);
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *v4 = v9;
    *(_OWORD *)(a1 + 48) = v10;
  }
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v11 = (__int128 *)(a1 + 80);
  v12 = (__int128 *)(a2 + 80);
  v13 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v13 == 255)
    {
      v15 = *v12;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *v11 = v15;
    }
    else
    {
      v22 = v13 & 1;
      v23 = *(_QWORD *)(a2 + 80);
      v24 = *(_QWORD *)(a2 + 88);
      outlined copy of SceneID(v23, v24, v13 & 1);
      *(_QWORD *)(a1 + 80) = v23;
      *(_QWORD *)(a1 + 88) = v24;
      *(_BYTE *)(a1 + 96) = v22;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of SceneID(a1 + 80);
    v14 = *(_BYTE *)(a2 + 96);
    *v11 = *v12;
    *(_BYTE *)(a1 + 96) = v14;
  }
  else
  {
    v16 = v13 & 1;
    v17 = *(_QWORD *)(a2 + 80);
    v18 = *(_QWORD *)(a2 + 88);
    outlined copy of SceneID(v17, v18, v13 & 1);
    v19 = *(_QWORD *)(a1 + 80);
    v20 = *(_QWORD *)(a1 + 88);
    v21 = *(_BYTE *)(a1 + 96);
    *(_QWORD *)(a1 + 80) = v17;
    *(_QWORD *)(a1 + 88) = v18;
    *(_BYTE *)(a1 + 96) = v16;
    outlined consume of SceneID(v19, v20, v21);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v25 = (_OWORD *)(a1 + 112);
  v26 = (_OWORD *)(a2 + 112);
  v27 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v27)
    {
      v28 = *(_QWORD *)(a2 + 112);
      v29 = *(_QWORD *)(a2 + 120);
      v30 = *(_BYTE *)(a2 + 128);
      outlined copy of Text.Storage(v28, v29, v30);
      v31 = *(_QWORD *)(a1 + 112);
      v32 = *(_QWORD *)(a1 + 120);
      v33 = *(_BYTE *)(a1 + 128);
      *(_QWORD *)(a1 + 112) = v28;
      *(_QWORD *)(a1 + 120) = v29;
      *(_BYTE *)(a1 + 128) = v30;
      outlined consume of Text.Storage(v31, v32, v33);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 112);
      v37 = *(_OWORD *)(a2 + 128);
      *v25 = *v26;
      *(_OWORD *)(a1 + 128) = v37;
    }
  }
  else if (v27)
  {
    v34 = *(_QWORD *)(a2 + 112);
    v35 = *(_QWORD *)(a2 + 120);
    v36 = *(_BYTE *)(a2 + 128);
    outlined copy of Text.Storage(v34, v35, v36);
    *(_QWORD *)(a1 + 112) = v34;
    *(_QWORD *)(a1 + 120) = v35;
    *(_BYTE *)(a1 + 128) = v36;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
  }
  else
  {
    v38 = *(_OWORD *)(a2 + 128);
    *v25 = *v26;
    *(_OWORD *)(a1 + 128) = v38;
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v39)
    {
      v40 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = v39;
      *(_QWORD *)(a1 + 160) = v40;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v39)
  {
    v41 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v39;
    *(_QWORD *)(a1 + 160) = v41;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
LABEL_29:
  v42 = *(_QWORD *)(a2 + 168);
  if (!*(_QWORD *)(a1 + 168))
  {
    if (v42)
    {
      v44 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = v42;
      *(_QWORD *)(a1 + 176) = v44;
      swift_retain();
      goto LABEL_36;
    }
LABEL_35:
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    goto LABEL_36;
  }
  if (!v42)
  {
    swift_release();
    goto LABEL_35;
  }
  v43 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v42;
  *(_QWORD *)(a1 + 176) = v43;
  swift_retain();
  swift_release();
LABEL_36:
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_weakTakeInit();
  swift_weakTakeInit();
  swift_weakTakeInit();
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  v6 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v6;
    *(_QWORD *)(a1 + 160) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  }
  v8 = *(_QWORD *)(a2 + 168);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = v8;
    *(_QWORD *)(a1 + 176) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  }
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  return a1;
}

uint64_t assignWithTake for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(_QWORD *)(a1 + 56))
  {
    if (*(_QWORD *)(a2 + 56))
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    else
      outlined destroy of AnyHashable(a1 + 32);
  }
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v5 = (_OWORD *)(a2 + 80);
  v6 = *(unsigned __int8 *)(a1 + 96);
  if (v6 == 255)
    goto LABEL_8;
  v7 = *(unsigned __int8 *)(a2 + 96);
  if (v7 == 255)
  {
    outlined destroy of SceneID(a1 + 80);
LABEL_8:
    *(_OWORD *)(a1 + 80) = *v5;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *v5;
  *(_BYTE *)(a1 + 96) = v7 & 1;
  outlined consume of SceneID(v8, v9, v6 & 1);
LABEL_10:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 136))
  {
    if (*(_QWORD *)(a2 + 136))
    {
      v10 = *(_BYTE *)(a2 + 128);
      v11 = *(_QWORD *)(a1 + 112);
      v12 = *(_QWORD *)(a1 + 120);
      v13 = *(_BYTE *)(a1 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 128) = v10;
      outlined consume of Text.Storage(v11, v12, v13);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined destroy of Text(a1 + 112);
  }
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
LABEL_15:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v15)
    {
      v16 = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = v15;
      *(_QWORD *)(a1 + 160) = v16;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v15)
  {
    v17 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = v15;
    *(_QWORD *)(a1 + 160) = v17;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
LABEL_22:
  v18 = *(_QWORD *)(a2 + 168);
  if (!*(_QWORD *)(a1 + 168))
  {
    if (v18)
    {
      v20 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 168) = v18;
      *(_QWORD *)(a1 + 176) = v20;
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    goto LABEL_29;
  }
  if (!v18)
  {
    swift_release();
    goto LABEL_28;
  }
  v19 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v18;
  *(_QWORD *)(a1 + 176) = v19;
  swift_release();
LABEL_29:
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomizableDocumentViewControllerRepresentable(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomizableDocumentViewControllerRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomizableDocumentViewControllerRepresentable()
{
  return &type metadata for CustomizableDocumentViewControllerRepresentable;
}

uint64_t sub_1872D83B8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>, _SafeAreaRegionsIgnoringLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE65D8]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlatformItemsReader<MultiButtonPlatformItemsStrategy, CustomizableDocumentViewControllerRepresentable, AnyView?>, _BackgroundModifier<ModifiedContent<AnyView, _OpacityEffect>?>>, _EnvironmentKeyWritingModifier<BackgroundContext>>, NavigationCommonTransformEnvironment>);
}

uint64_t _GeometryActionModifier.value.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t _GeometryActionModifier.value.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_GeometryActionModifier.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _GeometryActionModifier.action.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  return a3;
}

uint64_t _GeometryActionModifier.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_GeometryActionModifier.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t default argument 7 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return ValueCycleDetector.init()();
}

uint64_t default argument 8 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  static Semantics.v6.getter();
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) != 0)
  {
    v3 = 0;
    v4 = 0x200000000;
  }
  else
  {
    result = UpdateCycleDetector.init()();
    v3 = v6;
    v5 = 0x100000000;
    if (!v8)
      v5 = 0;
    v4 = v5 | v7;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = BYTE4(v4);
  return result;
}

uint64_t GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, _DWORD *a9@<X8>, uint64_t *a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  int v17;
  char v18;
  int *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v16 = *a10;
  v17 = *((_DWORD *)a10 + 2);
  v18 = *((_BYTE *)a10 + 12);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  v19 = (int *)type metadata accessor for GeometryActionBinder(0, a14, a15, a4);
  v20 = (char *)a9 + v19[15];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v21 = type metadata accessor for ValueCycleDetector();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a8, v21);
  v22 = (char *)a9 + v19[16];
  *(_QWORD *)v22 = v16;
  v22[12] = v18;
  *((_DWORD *)v22 + 2) = v17;
  *(_DWORD *)((char *)a9 + v19[17]) = a11;
  *(_DWORD *)((char *)a9 + v19[18]) = a12;
  v23 = (char *)a9 + v19[19];
  v24 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23, a13, v24);
}

uint64_t protocol witness for GeometryActionProvider.value(geometry:) in conformance _GeometryActionModifier<A>(uint64_t a1)
{
  uint64_t (**v1)(_OWORD *);

  return _GeometryActionModifier.value(geometry:)(a1, *v1);
}

uint64_t protocol witness for GeometryActionProvider.action(oldValue:newValue:) in conformance _GeometryActionModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _GeometryActionModifier.action(oldValue:newValue:)(a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(uint64_t (**)(void))(v2 + 16));
}

uint64_t (*_GeometryActionModifier2.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a3 + a2;
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v7 - 16);
  *(_QWORD *)(v10 + 32) = v9;
  *(_QWORD *)(v10 + 40) = v8;
  *a5 = a4;
  a5[1] = v10;
  return swift_retain();
}

uint64_t key path setter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = a4 + a3;
  v10 = *a1;
  v9 = a1[1];
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v8 - 16);
  *(_QWORD *)(v11 + 32) = v10;
  *(_QWORD *)(v11 + 40) = v9;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 16) = a6;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

uint64_t (*_GeometryActionModifier2.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GeometryActionModifier2._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _GeometryActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))type metadata accessor for _GeometryActionModifier2, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier2<A>, a7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t static _GeometryActionModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, double)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t AssociatedTypeWitness;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  _BYTE v58[12];
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  _BYTE *v67;
  _DWORD *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t *);
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  _BYTE v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  int v99;
  char v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;

  v74 = a4;
  v75 = a3;
  v73 = a9;
  v72 = a10;
  v115 = *MEMORY[0x1E0C80C00];
  v16 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v16, v17);
  v70 = &v58[-v18];
  v19 = type metadata accessor for ValueCycleDetector();
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v67 = &v58[-v22];
  v23 = a7(255, a5, a6, v21);
  v65 = MEMORY[0x18D75FFDC](a8, v23);
  v62 = v23;
  v69 = type metadata accessor for GeometryActionBinder(0, v23, v65, v24);
  v71 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v25);
  v68 = &v58[-v26];
  LODWORD(v26) = *a1;
  v27 = *(_QWORD *)a2;
  v79 = *(_DWORD *)(a2 + 8);
  LODWORD(a8) = v79;
  v28 = *(_QWORD *)(a2 + 16);
  v29 = *(_DWORD *)(a2 + 28);
  v30 = *(_DWORD *)(a2 + 32);
  LODWORD(a7) = *(_DWORD *)(a2 + 36);
  v90 = *(_DWORD *)(a2 + 24);
  LODWORD(a6) = v90;
  v91 = v30;
  v88 = *(_QWORD *)(a2 + 40);
  v87 = *(_QWORD *)(a2 + 48);
  v80 = *(_DWORD *)(a2 + 56);
  LODWORD(a1) = v80;
  v31 = *(_DWORD *)(a2 + 64);
  v82 = *(_DWORD *)(a2 + 60);
  v86 = v31;
  v84 = *(_DWORD *)(a2 + 68);
  v83 = *(_DWORD *)(a2 + 72);
  v81 = *(_DWORD *)(a2 + 76);
  v85 = *(_DWORD *)(a2 + 80);
  LODWORD(v98) = v26;
  type metadata accessor for _GraphValue();
  v66 = _GraphValue.value.getter();
  v89 = v27;
  v98 = v27;
  v99 = a8;
  v101 = v28;
  v32 = v28;
  v77 = v28;
  v102 = a6;
  v103 = v29;
  v78 = v29;
  v104 = v91;
  v105 = (int)a7;
  LODWORD(a6) = (_DWORD)a7;
  v76 = (int)a7;
  v33 = v88;
  v34 = v87;
  v106 = v88;
  v107 = v87;
  v108 = (int)a1;
  LODWORD(a1) = v82;
  v109 = v82;
  v110 = v31;
  v35 = v83;
  v111 = v84;
  v112 = v83;
  LODWORD(v28) = v81;
  v113 = v81;
  v114 = v85;
  v64 = _ViewInputs.position.getter();
  v98 = v27;
  LODWORD(v27) = v79;
  v99 = v79;
  v101 = v32;
  LODWORD(v32) = v90;
  v102 = v90;
  v103 = v29;
  v104 = v91;
  v105 = a6;
  v106 = v33;
  v107 = v34;
  LODWORD(v34) = v80;
  v108 = v80;
  v109 = (int)a1;
  LODWORD(v33) = v86;
  LODWORD(a1) = v84;
  v110 = v86;
  v111 = v84;
  v112 = v35;
  v113 = v28;
  LODWORD(v28) = v85;
  v114 = v85;
  v63 = _ViewInputs.size.getter();
  v36 = v89;
  v98 = v89;
  v99 = v27;
  v101 = v77;
  v102 = v32;
  v103 = v29;
  v37 = v76;
  v104 = v91;
  v105 = v76;
  v38 = v88;
  v39 = v87;
  v106 = v88;
  v107 = v87;
  v108 = v34;
  v109 = v82;
  v110 = v33;
  v111 = (int)a1;
  LODWORD(v33) = v83;
  LODWORD(a1) = v81;
  v112 = v83;
  v113 = v81;
  v114 = v28;
  v61 = _ViewInputs.transform.getter();
  v98 = v36;
  v99 = v27;
  v40 = v77;
  v101 = v77;
  LODWORD(v28) = v90;
  v102 = v90;
  v103 = v78;
  v104 = v91;
  v105 = v37;
  v106 = v38;
  v107 = v39;
  LODWORD(v36) = v82;
  v108 = v80;
  v109 = v82;
  v110 = v86;
  v111 = v84;
  v112 = v33;
  v113 = (int)a1;
  LODWORD(v33) = v85;
  v114 = v85;
  v60 = _ViewInputs.environment.getter();
  v98 = v89;
  v99 = v27;
  v41 = v40;
  v101 = v40;
  LODWORD(v38) = v78;
  v102 = v28;
  v103 = v78;
  v42 = v91;
  LODWORD(v27) = v76;
  v104 = v91;
  v105 = v76;
  v43 = v88;
  v44 = v87;
  v106 = v88;
  v107 = v87;
  v108 = v80;
  v109 = v36;
  LODWORD(v40) = v86;
  LODWORD(v36) = v84;
  v110 = v86;
  v111 = v84;
  v112 = v83;
  v113 = v81;
  v114 = v33;
  v59 = _ViewInputs.safeAreaInsets.getter();
  v98 = v89;
  v99 = v79;
  v101 = v41;
  v102 = v90;
  v103 = v38;
  v104 = v42;
  v105 = v27;
  v106 = v43;
  v107 = v44;
  v45 = v80;
  LODWORD(v38) = v82;
  v108 = v80;
  v109 = v82;
  v110 = v40;
  v111 = v36;
  LODWORD(v44) = v83;
  LODWORD(v40) = v81;
  v112 = v83;
  v113 = v81;
  v114 = v33;
  LODWORD(a2) = _ViewInputs.viewPhase.getter();
  v46 = (uint64_t)v67;
  v47 = v62;
  v48 = v65;
  default argument 7 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)();
  default argument 8 of GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)((uint64_t)&v98);
  v95 = v98;
  v97 = v100;
  v96 = v99;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = (uint64_t)v70;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v70, 1, 1, AssociatedTypeWitness);
  v57 = v47;
  v51 = v68;
  GeometryActionBinder.init(provider:position:size:transform:environment:safeAreaInsets:phase:cycleDetector:legacyCycleDetector:lastResetSeed:proxySeed:lastValue:)(v66, v64, v63, v61, v60, v59, a2, v46, v68, &v95, 0, 0, v50, v57, v48);
  v52 = v69;
  v93 = v69;
  v94 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GeometryActionBinder<A>, v69);
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v51, v72, (uint64_t)v92, v52, MEMORY[0x1E0DEDCE8], v53, MEMORY[0x1E0DEDD18], v54);
  (*(void (**)(_DWORD *, uint64_t))(v71 + 8))(v51, v52);
  static AGAttributeFlags.transactional.getter();
  v55 = AGGraphSetFlags();
  v98 = v89;
  v99 = v79;
  v101 = v77;
  v102 = v90;
  v103 = v78;
  v104 = v91;
  v105 = v76;
  v106 = v88;
  v107 = v87;
  v108 = v45;
  v109 = v38;
  v110 = v86;
  v111 = v36;
  v112 = v44;
  v113 = v40;
  v114 = v85;
  return v75(v55, &v98);
}

uint64_t _GeometryActionModifier.value(geometry:)(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  int v2;
  __int128 v3;
  _OWORD v5[3];
  int v6;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = v2;
  return a2(v5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GeometryActionModifier2<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _GeometryActionModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t GeometryActionBinder.dispatch(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  if ((unint64_t)*(unsigned __int8 *)(v2 + *(int *)(a2 + 64) + 12) << 32 == 0x200000000)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for ValueCycleDetector();
    v8 = ValueCycleDetector.dispatch(value:label:isDebug:)();
    v9 = v3;
    v10 = a1;
    v11 = v6;
    v12 = v7;
  }
  else
  {
    v8 = UpdateCycleDetector.dispatch(label:isDebug:)();
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v9 = v3;
    v10 = a1;
  }
  $defer #1 <A>() in GeometryActionBinder.dispatch(value:)(v9, v10, v11, v12);
  return v8 & 1;
}

uint64_t $defer #1 <A>() in GeometryActionBinder.dispatch(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  v5 = a1 + *(int *)(type metadata accessor for GeometryActionBinder(0, a3, a4, a4) + 76);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v5, a2, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, AssociatedTypeWitness);
}

uint64_t implicit closure #1 in GeometryActionBinder.dispatch(value:)()
{
  return 0x797274656D6F6547;
}

uint64_t View.onGeometryChange<A>(for:of:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  _QWORD v13[4];

  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v11 = type metadata accessor for _GeometryActionModifier2(0, a7, a9, a4);
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v13, a6, v11, a8);
  swift_release();
  return swift_release();
}

uint64_t View.onGeometryChange<A>(of:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD v12[4];

  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v12[3] = a4;
  v10 = type metadata accessor for _GeometryActionModifier(0, a6, a8, a4);
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B4AC](v12, a5, v10, a7);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for _GeometryActionModifier2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _GeometryActionModifier2);
}

_UNKNOWN **base witness table accessor for ViewModifier in _GeometryActionModifier<A>()
{
  return &protocol witness table for _GeometryActionModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GeometryActionModifier2<A>()
{
  return &protocol witness table for _GeometryActionModifier2<A>;
}

uint64_t sub_1872D93B0()
{
  return 16;
}

__n128 sub_1872D93BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1872D93C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return key path getter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ()), a4);
}

uint64_t sub_1872D93EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1E1B2AC80, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ()));
}

uint64_t sub_1872D9410()
{
  return 16;
}

__n128 sub_1872D941C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t keypath_getTm_2@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t keypath_setTm_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_retain();
  result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_1872D947C()
{
  return 16;
}

__n128 sub_1872D9488(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1872D9494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return key path getter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ()), a4);
}

uint64_t sub_1872D94B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1E1B2AC30, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ()));
}

uint64_t sub_1872D94DC()
{
  return 16;
}

__n128 sub_1872D94E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1872D94F4(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _GeometryActionModifier, (uint64_t)&protocol witness table for _GeometryActionModifier<A>);
}

uint64_t sub_1872D9508(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _GeometryActionModifier2, (uint64_t)&protocol witness table for _GeometryActionModifier2<A>);
}

uint64_t *initializeBufferWithCopyOfBuffer for GeometryActionBinder(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  unsigned int (*v38)(unint64_t, uint64_t, uint64_t);
  void *v39;
  const void *v40;
  void *v41;
  const void *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  void *v50;
  const void *v51;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t *v55;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 | 3;
  v9 = ~v8;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = *(_QWORD *)(v5 + 64) + 1;
  v11 = v10 + v6;
  v12 = ((v6 + 9) & ~(unint64_t)v6)
      + v10
      + ((v11 + (v11 & ~(unint64_t)v6)) & ~(unint64_t)v6);
  v13 = v6 + 4;
  v14 = v6 & 0x100000;
  if (v8 > 7
    || v14 != 0
    || ((v7 + 4 + ((((((v7 + 28) & ~(v7 | 3)) + v12 + 19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v7)
     + v10 > 0x18)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = v17 + ((v7 + 16) & v9);
    swift_retain();
  }
  else
  {
    v19 = AssociatedTypeWitness;
    v20 = ~v7;
    v55 = a1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v21 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v22 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v21 = *v22;
    v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v23 = *v24;
    v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFCLL);
    v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v25 = *v26;
    v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v27 = *v28;
    v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFCLL);
    v30 = (_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v29 = *v30;
    v31 = (_DWORD *)(((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v32 = (_DWORD *)(((unint64_t)v30 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v31 = *v32;
    v53 = (_DWORD *)(((unint64_t)v32 + v8 + 4) & v9);
    v54 = (_DWORD *)(((unint64_t)v31 + v8 + 4) & v9);
    *v54 = *v53;
    v33 = ((unint64_t)v54 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = ((unint64_t)v53 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)v33 = *(_DWORD *)v34;
    *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
    v35 = v7 + 5;
    v36 = (void *)((v35 + v33) & v20);
    v37 = (const void *)((v35 + v34) & v20);
    v38 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v38((v35 + v34) & v20, 1, AssociatedTypeWitness))
    {
      memcpy(v36, v37, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v36, v37, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v36, 0, 1, v19);
    }
    v39 = (void *)(((unint64_t)v36 + v11) & v20);
    v40 = (const void *)(((unint64_t)v37 + v11) & v20);
    if (v38((unint64_t)v40, 1, v19))
    {
      memcpy(v39, v40, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v39, v40, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v39, 0, 1, v19);
    }
    v41 = (void *)(((unint64_t)v39 + v11) & v20);
    v42 = (const void *)(((unint64_t)v40 + v11) & v20);
    if (v38((unint64_t)v42, 1, v19))
    {
      memcpy(v41, v42, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v41, v42, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v41, 0, 1, v19);
    }
    v43 = (_QWORD *)(((unint64_t)v54 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v44 = (uint64_t *)(((unint64_t)v53 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v45 = *v44;
    *(_QWORD *)((char *)v43 + 5) = *(uint64_t *)((char *)v44 + 5);
    *v43 = v45;
    v46 = (_DWORD *)(((unint64_t)v54 + v12 + 19) & 0xFFFFFFFFFFFFFCLL);
    v47 = (_DWORD *)(((unint64_t)v53 + v12 + 19) & 0xFFFFFFFFFFFFFCLL);
    *v46 = *v47;
    v48 = (_DWORD *)(((unint64_t)v46 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v49 = (_DWORD *)(((unint64_t)v47 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v48 = *v49;
    v50 = (void *)(((unint64_t)v48 + v13) & v20);
    v51 = (const void *)(((unint64_t)v49 + v13) & v20);
    if (v38((unint64_t)v51, 1, v19))
    {
      memcpy(v50, v51, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v50, v51, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v50, 0, 1, v19);
    }
    return v55;
  }
  return (uint64_t *)v18;
}

uint64_t destroy for GeometryActionBinder(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  v1 = (((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + 7) & 0xFFFFFFFFFFFFFFFCLL;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v1 + (v4 | 3) + 4) & ~(v4 | 3);
  v6 = v4 + ((v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5;
  v7 = ~v4;
  v8 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v8(v6 & ~v4, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v6 & ~v4, AssociatedTypeWitness);
  if (*(_DWORD *)(v3 + 84))
    v9 = *(_QWORD *)(v3 + 64);
  else
    v9 = *(_QWORD *)(v3 + 64) + 1;
  v10 = ((v6 | v4) + v9) & v7;
  if (!v8(v10, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v10, AssociatedTypeWitness);
  v11 = (v9 + v4 + v10) & v7;
  if (!v8(v11, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v11, AssociatedTypeWitness);
  result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v8)((v4+ ((((((v4 + 9) & v7) + v9 + v5 + ((v9 + v4 + ((v9 + v4) & v7)) & v7) + 19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 4) & v7, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))((v4+ ((((((v4 + 9) & v7) + v9 + v5 + ((v9 + v4 + ((v9 + v4) & v7)) & v7) + 19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 4) & v7, AssociatedTypeWitness);
  return result;
}

_DWORD *initializeWithCopy for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  size_t v24;
  size_t v25;
  size_t v26;
  void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  void *v41;
  const void *v42;
  _DWORD *v44;
  _DWORD *v45;
  unsigned int (*v46)(unint64_t, uint64_t, uint64_t);
  uint64_t v47;

  *a1 = *a2;
  v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v2 = *v3;
  v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v47 = v16 + 4;
  v44 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  v45 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  *v45 = *v44;
  v18 = ((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = ((unint64_t)v44 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = v16 + 5 + v18;
  v21 = ~v16;
  v22 = v16 + 5 + v19;
  v46 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v46(v22 & ~v16, 1, AssociatedTypeWitness))
  {
    v23 = *(_DWORD *)(v15 + 84);
    v24 = *(_QWORD *)(v15 + 64);
    if (v23)
      v25 = *(_QWORD *)(v15 + 64);
    else
      v25 = v24 + 1;
    memcpy((void *)(v20 & ~v16), (const void *)(v22 & ~v16), v25);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
    v23 = *(_DWORD *)(v15 + 84);
    v24 = *(_QWORD *)(v15 + 64);
  }
  if (v23)
    v26 = v24;
  else
    v26 = v24 + 1;
  v27 = (void *)(((v20 | v16) + v26) & v21);
  v28 = (const void *)(((v22 | v16) + v26) & v21);
  if (v46((unint64_t)v28, 1, AssociatedTypeWitness))
  {
    memcpy(v27, v28, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v27, v28, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, AssociatedTypeWitness);
  }
  v29 = (void *)(((unint64_t)v27 + v26 + v16) & v21);
  v30 = (const void *)(((unint64_t)v28 + v26 + v16) & v21);
  if (v46((unint64_t)v30, 1, AssociatedTypeWitness))
  {
    memcpy(v29, v30, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v29, v30, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v29, 0, 1, AssociatedTypeWitness);
  }
  v31 = v26 + ((v16 + 9) & v21) + ((v26 + v16 + ((v26 + v16) & v21)) & v21);
  v32 = (char *)v45 + v31;
  v33 = (char *)v44 + v31;
  v34 = (_QWORD *)((unint64_t)(v32 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v35 = (uint64_t *)((unint64_t)(v33 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v36 = *v35;
  *(_QWORD *)((char *)v34 + 5) = *(uint64_t *)((char *)v35 + 5);
  *v34 = v36;
  v37 = (_DWORD *)((unint64_t)(v32 + 19) & 0xFFFFFFFFFFFFFCLL);
  v38 = (_DWORD *)((unint64_t)(v33 + 19) & 0xFFFFFFFFFFFFFCLL);
  *v37 = *v38;
  v39 = (_DWORD *)(((unint64_t)v37 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v40 = (_DWORD *)(((unint64_t)v38 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v39 = *v40;
  v41 = (void *)(((unint64_t)v39 + v47) & v21);
  v42 = (const void *)(((unint64_t)v40 + v47) & v21);
  if (v46((unint64_t)v42, 1, AssociatedTypeWitness))
  {
    memcpy(v41, v42, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v41, v42, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v41, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithCopy for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(unint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  size_t v26;
  size_t v27;
  void *v28;
  const void *v29;
  int v30;
  int v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  void *v46;
  const void *v47;
  int v48;
  int v49;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;

  *a1 = *a2;
  v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v2 = *v3;
  v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v52 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  v53 = v16 + 4;
  v51 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  *v52 = *v51;
  v18 = ((unint64_t)v52 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = ((unint64_t)v51 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = v16 + 5 + v18;
  v21 = ~v16;
  v22 = v16 + 5 + v19;
  v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  v24 = v23(v20 & ~v16, 1, AssociatedTypeWitness);
  v25 = v23(v22 & ~v16, 1, AssociatedTypeWitness);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v20 & ~v16, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v15 + 84))
    v26 = *(_QWORD *)(v15 + 64);
  else
    v26 = *(_QWORD *)(v15 + 64) + 1;
  memcpy((void *)(v20 & ~v16), (const void *)(v22 & ~v16), v26);
LABEL_10:
  if (*(_DWORD *)(v15 + 84))
    v27 = *(_QWORD *)(v15 + 64);
  else
    v27 = *(_QWORD *)(v15 + 64) + 1;
  v28 = (void *)(((v20 | v16) + v27) & v21);
  v29 = (const void *)(((v22 | v16) + v27) & v21);
  v30 = v23((unint64_t)v28, 1, AssociatedTypeWitness);
  v31 = v23((unint64_t)v29, 1, AssociatedTypeWitness);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v28, v29, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, AssociatedTypeWitness);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v28, AssociatedTypeWitness);
LABEL_18:
    memcpy(v28, v29, v27);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v28, v29, AssociatedTypeWitness);
LABEL_19:
  v32 = (void *)(((unint64_t)v28 + v27 + v16) & v21);
  v33 = (const void *)(((unint64_t)v29 + v27 + v16) & v21);
  v34 = v23((unint64_t)v32, 1, AssociatedTypeWitness);
  v35 = v23((unint64_t)v33, 1, AssociatedTypeWitness);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v32, v33, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, AssociatedTypeWitness);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v32, AssociatedTypeWitness);
LABEL_24:
    memcpy(v32, v33, v27);
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v32, v33, AssociatedTypeWitness);
LABEL_25:
  v36 = v27 + ((v16 + 9) & v21) + ((v27 + v16 + ((v27 + v16) & v21)) & v21);
  v37 = (char *)v52 + v36;
  v38 = (char *)v51 + v36;
  v39 = (_QWORD *)((unint64_t)(v37 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v40 = (uint64_t *)((unint64_t)(v38 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v41 = *v40;
  *(_QWORD *)((char *)v39 + 5) = *(uint64_t *)((char *)v40 + 5);
  *v39 = v41;
  v42 = (_DWORD *)((unint64_t)(v37 + 19) & 0xFFFFFFFFFFFFFCLL);
  v43 = (_DWORD *)((unint64_t)(v38 + 19) & 0xFFFFFFFFFFFFFCLL);
  *v42 = *v43;
  v44 = (_DWORD *)(((unint64_t)v42 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v45 = (_DWORD *)(((unint64_t)v43 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v44 = *v45;
  v46 = (void *)(((unint64_t)v44 + v53) & v21);
  v47 = (const void *)(((unint64_t)v45 + v53) & v21);
  v48 = v23((unint64_t)v46, 1, AssociatedTypeWitness);
  v49 = v23((unint64_t)v47, 1, AssociatedTypeWitness);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v46, v47, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v46, AssociatedTypeWitness);
    goto LABEL_30;
  }
  if (v49)
  {
LABEL_30:
    memcpy(v46, v47, v27);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v46, v47, AssociatedTypeWitness);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v46, 0, 1, AssociatedTypeWitness);
  return a1;
}

_DWORD *initializeWithTake for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  size_t v24;
  size_t v25;
  size_t v26;
  void *v27;
  const void *v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  void *v41;
  const void *v42;
  _DWORD *v44;
  _DWORD *v45;
  unsigned int (*v46)(unint64_t, uint64_t, uint64_t);
  uint64_t v47;

  *a1 = *a2;
  v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v2 = *v3;
  v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v47 = v16 + 4;
  v44 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  v45 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  *v45 = *v44;
  v18 = ((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = ((unint64_t)v44 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = v16 + 5 + v18;
  v21 = ~v16;
  v22 = v16 + 5 + v19;
  v46 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v46(v22 & ~v16, 1, AssociatedTypeWitness))
  {
    v23 = *(_DWORD *)(v15 + 84);
    v24 = *(_QWORD *)(v15 + 64);
    if (v23)
      v25 = *(_QWORD *)(v15 + 64);
    else
      v25 = v24 + 1;
    memcpy((void *)(v20 & ~v16), (const void *)(v22 & ~v16), v25);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
    v23 = *(_DWORD *)(v15 + 84);
    v24 = *(_QWORD *)(v15 + 64);
  }
  if (v23)
    v26 = v24;
  else
    v26 = v24 + 1;
  v27 = (void *)(((v20 | v16) + v26) & v21);
  v28 = (const void *)(((v22 | v16) + v26) & v21);
  if (v46((unint64_t)v28, 1, AssociatedTypeWitness))
  {
    memcpy(v27, v28, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v27, v28, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, AssociatedTypeWitness);
  }
  v29 = (void *)(((unint64_t)v27 + v26 + v16) & v21);
  v30 = (const void *)(((unint64_t)v28 + v26 + v16) & v21);
  if (v46((unint64_t)v30, 1, AssociatedTypeWitness))
  {
    memcpy(v29, v30, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v29, v30, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v29, 0, 1, AssociatedTypeWitness);
  }
  v31 = v26 + ((v16 + 9) & v21) + ((v26 + v16 + ((v26 + v16) & v21)) & v21);
  v32 = (char *)v45 + v31;
  v33 = (char *)v44 + v31;
  v34 = (_QWORD *)((unint64_t)(v32 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v35 = (uint64_t *)((unint64_t)(v33 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v36 = *v35;
  *(_QWORD *)((char *)v34 + 5) = *(uint64_t *)((char *)v35 + 5);
  *v34 = v36;
  v37 = (_DWORD *)((unint64_t)(v32 + 19) & 0xFFFFFFFFFFFFFCLL);
  v38 = (_DWORD *)((unint64_t)(v33 + 19) & 0xFFFFFFFFFFFFFCLL);
  *v37 = *v38;
  v39 = (_DWORD *)(((unint64_t)v37 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v40 = (_DWORD *)(((unint64_t)v38 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v39 = *v40;
  v41 = (void *)(((unint64_t)v39 + v47) & v21);
  v42 = (const void *)(((unint64_t)v40 + v47) & v21);
  if (v46((unint64_t)v42, 1, AssociatedTypeWitness))
  {
    memcpy(v41, v42, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v41, v42, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v41, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithTake for GeometryActionBinder(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(unint64_t, uint64_t, uint64_t);
  int v24;
  int v25;
  size_t v26;
  size_t v27;
  void *v28;
  const void *v29;
  int v30;
  int v31;
  void *v32;
  const void *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  void *v46;
  const void *v47;
  int v48;
  int v49;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;

  *a1 = *a2;
  v2 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v2 = *v3;
  v4 = (_DWORD *)(((unint64_t)v2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v4 = *v5;
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFCLL);
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v6 = *v7;
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v8 = *v9;
  v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFCLL);
  v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v10 = *v11;
  v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v12 = *v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v52 = (_DWORD *)(((unint64_t)v12 + v16 + 4) & v17);
  v53 = v16 + 4;
  v51 = (_DWORD *)(((unint64_t)v13 + v16 + 4) & v17);
  *v52 = *v51;
  v18 = ((unint64_t)v52 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  v19 = ((unint64_t)v51 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = v16 + 5 + v18;
  v21 = ~v16;
  v22 = v16 + 5 + v19;
  v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
  v24 = v23(v20 & ~v16, 1, AssociatedTypeWitness);
  v25 = v23(v22 & ~v16, 1, AssociatedTypeWitness);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20 & ~v16, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v25)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))(v20 & ~v16, v22 & ~v16, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v20 & ~v16, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v15 + 84))
    v26 = *(_QWORD *)(v15 + 64);
  else
    v26 = *(_QWORD *)(v15 + 64) + 1;
  memcpy((void *)(v20 & ~v16), (const void *)(v22 & ~v16), v26);
LABEL_10:
  if (*(_DWORD *)(v15 + 84))
    v27 = *(_QWORD *)(v15 + 64);
  else
    v27 = *(_QWORD *)(v15 + 64) + 1;
  v28 = (void *)(((v20 | v16) + v27) & v21);
  v29 = (const void *)(((v22 | v16) + v27) & v21);
  v30 = v23((unint64_t)v28, 1, AssociatedTypeWitness);
  v31 = v23((unint64_t)v29, 1, AssociatedTypeWitness);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v28, v29, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, AssociatedTypeWitness);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v28, AssociatedTypeWitness);
LABEL_18:
    memcpy(v28, v29, v27);
    goto LABEL_19;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v28, v29, AssociatedTypeWitness);
LABEL_19:
  v32 = (void *)(((unint64_t)v28 + v27 + v16) & v21);
  v33 = (const void *)(((unint64_t)v29 + v27 + v16) & v21);
  v34 = v23((unint64_t)v32, 1, AssociatedTypeWitness);
  v35 = v23((unint64_t)v33, 1, AssociatedTypeWitness);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v32, v33, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v32, 0, 1, AssociatedTypeWitness);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v32, AssociatedTypeWitness);
LABEL_24:
    memcpy(v32, v33, v27);
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v32, v33, AssociatedTypeWitness);
LABEL_25:
  v36 = v27 + ((v16 + 9) & v21) + ((v27 + v16 + ((v27 + v16) & v21)) & v21);
  v37 = (char *)v52 + v36;
  v38 = (char *)v51 + v36;
  v39 = (_QWORD *)((unint64_t)(v37 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v40 = (uint64_t *)((unint64_t)(v38 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v41 = *v40;
  *(_QWORD *)((char *)v39 + 5) = *(uint64_t *)((char *)v40 + 5);
  *v39 = v41;
  v42 = (_DWORD *)((unint64_t)(v37 + 19) & 0xFFFFFFFFFFFFFCLL);
  v43 = (_DWORD *)((unint64_t)(v38 + 19) & 0xFFFFFFFFFFFFFCLL);
  *v42 = *v43;
  v44 = (_DWORD *)(((unint64_t)v42 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v45 = (_DWORD *)(((unint64_t)v43 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v44 = *v45;
  v46 = (void *)(((unint64_t)v44 + v53) & v21);
  v47 = (const void *)(((unint64_t)v45 + v53) & v21);
  v48 = v23((unint64_t)v46, 1, AssociatedTypeWitness);
  v49 = v23((unint64_t)v47, 1, AssociatedTypeWitness);
  if (!v48)
  {
    if (!v49)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v46, v47, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v46, AssociatedTypeWitness);
    goto LABEL_30;
  }
  if (v49)
  {
LABEL_30:
    memcpy(v46, v47, v27);
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v46, v47, AssociatedTypeWitness);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v46, 0, 1, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeometryActionBinder(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  int v20;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v9 | 3;
  if (a2 > v7)
  {
    v11 = ((v9
          + ((((v8 + ((v9 + 9) & ~v9) + ((v9 + 28) & ~v10) + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9) + 19) & 0xFFFFFFFFFFFFFFFCLL)
            + 7) & 0xFFFFFFFFFFFFFFFCLL)
          + 4) & ~v9)
        + v8;
    v12 = 8 * v11;
    if (v11 > 3)
      goto LABEL_13;
    v14 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v14 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v14 >= 2)
    {
LABEL_13:
      v13 = *(unsigned __int8 *)(a1 + v11);
      if (!*(_BYTE *)(a1 + v11))
        goto LABEL_29;
LABEL_20:
      v15 = (v13 - 1) << v12;
      if (v11 > 3)
        v15 = 0;
      if ((_DWORD)v11)
      {
        if (v11 <= 3)
          v16 = v11;
        else
          v16 = 4;
        __asm { BR              X12 }
      }
      v20 = v7 + v15;
      return (v20 + 1);
    }
  }
LABEL_29:
  if (v6 <= 0xFE)
  {
    v17 = *(unsigned __int8 *)(((((((((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                 + v10
                                 + 4) & ~v10)
                               + 7) & 0xFFFFFFFFFFFFFFFCLL)
                             + 4);
    if (v17 < 2)
      return 0;
    v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v9
                                                               + ((((((((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                   + v10
                                                                   + 4) & ~v10)
                                                                 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                               + 5) & ~v9);
  if (v19 >= 2)
    return v19 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for GeometryActionBinder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v12 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v12;
  v11 = *(unsigned __int8 *)(v7 + 80);
  v13 = ((v11
        + ((((((v11 + 9) & ~v11) + ((v11 + 28) & ~(v11 | 3)) + ((v12 + v11 + ((v12 + v11) & ~v11)) & ~v11) + v12 + 19) & 0xFFFFFFFFFFFFFFFCLL)
          + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 4) & ~v11)
      + v12;
  if (a3 > v10)
  {
    if (v13 > 3)
    {
      v6 = 1u;
      if (v10 >= a2)
LABEL_24:
        __asm { BR              X16 }
LABEL_17:
      v15 = ~v10 + a2;
      if (v13 < 4)
      {
        if ((_DWORD)v13)
        {
          v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, v13);
          if ((_DWORD)v13 == 3)
          {
            *(_WORD *)a1 = v16;
            a1[2] = BYTE2(v16);
          }
          else if ((_DWORD)v13 == 2)
          {
            *(_WORD *)a1 = v16;
          }
          else
          {
            *a1 = v16;
          }
        }
      }
      else
      {
        bzero(a1, v13);
        *(_DWORD *)a1 = v15;
      }
      __asm { BR              X10 }
    }
    v14 = ((a3 - v10 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v10 >= a2)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v10 >= a2)
    goto LABEL_24;
  goto LABEL_17;
}

void sub_1872DAF64()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1872DAF6C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_1872DAF8C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1872DAF9C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1872DAFA4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t specialized _GeometryActionModifier.action(oldValue:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t specialized GeometryActionBinder.reset(seed:)(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(v1 + a1[17]) = *(_DWORD *)AGGraphGetValue() >> 1;
  v3 = v1 + a1[16];
  if ((unint64_t)*(unsigned __int8 *)(v3 + 12) << 32 != 0x200000000)
  {
    *(_QWORD *)(v3 + 4) = 0xFFFFFFFFLL;
    *(_BYTE *)(v3 + 12) = 0;
  }
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ValueCycleDetector();
  ValueCycleDetector.reset()();
  v5 = v1 + a1[19];
  v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v5, 1, 1, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in GeometryActionBinder.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[3];
  int v7;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[5];
  v4 = *(_OWORD *)(v3 + 16);
  v6[0] = *(_OWORD *)v3;
  v6[1] = v4;
  v6[2] = *(_OWORD *)(v3 + 32);
  v7 = *(_DWORD *)(v3 + 48);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v2 + 24))(v6, v1);
}

uint64_t sub_1872DB14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = (*(_QWORD *)(v6 + 64) + v7 + v8) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v10 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v10(v0 + v8, AssociatedTypeWitness);
  v10(v0 + v9, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_1872DB224()
{
  swift_release();
  return swift_deallocObject();
}

__n128 SafeAreaPaddingModifier.init(edges:insets:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t KeyPath;
  __n128 result;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  outlined init with take of EdgeInsets?(a2, (uint64_t)&v11);
  v10 = v11;
  v5 = v12;
  v6 = v13;
  v7 = v14;
  KeyPath = swift_getKeyPath();
  *(_BYTE *)a3 = a1;
  result = v10;
  *(__n128 *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 24) = v5;
  *(_QWORD *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = KeyPath;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  return result;
}

void type metadata accessor for EdgeInsets?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EdgeInsets?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?);
  }
}

double SafeAreaPaddingModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  char *v1;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v9[7];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  int v16;
  __int16 v17;
  _BYTE v18[7];
  _BYTE v19[7];
  int v20;
  __int16 v21;
  _BYTE v22[7];
  _BYTE v23[7];
  int v24;
  __int16 v25;
  _BYTE v26[7];
  _BYTE v27[7];
  int v28;
  __int16 v29;

  v8 = *v1;
  v7 = static HorizontalAlignment.center.getter();
  SafeAreaPaddingModifier.insetView(edge:)(0);
  v6 = static HorizontalAlignment.center.getter();
  SafeAreaPaddingModifier.insetView(edge:)(2);
  v5 = static VerticalAlignment.center.getter();
  SafeAreaPaddingModifier.insetView(edge:)(1);
  v4 = static VerticalAlignment.center.getter();
  v9[0] = v8;
  SafeAreaPaddingModifier.insetView(edge:)(3);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)&v27[3];
  *(_DWORD *)(a1 + 281) = *(_DWORD *)v27;
  *(_DWORD *)(a1 + 300) = *(_DWORD *)&v26[3];
  *(_DWORD *)(a1 + 297) = *(_DWORD *)v26;
  *(_DWORD *)(a1 + 338) = v24;
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)v23;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)&v23[3];
  *(_QWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 32) = v14;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v22;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v22[3];
  *(_OWORD *)(a1 + 40) = v15;
  *(_QWORD *)&result = 1;
  *(_BYTE *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 78) = v21;
  *(_DWORD *)(a1 + 74) = v20;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v12;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v19[3];
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v19;
  *(_QWORD *)(a1 + 112) = v13;
  *(_BYTE *)(a1 + 120) = v14;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v18[3];
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v18;
  *(_OWORD *)(a1 + 128) = v15;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 161) = 2;
  *(_WORD *)(a1 + 166) = v17;
  *(_DWORD *)(a1 + 162) = v16;
  *(_QWORD *)(a1 + 168) = v6;
  *(_QWORD *)(a1 + 176) = v10;
  *(_QWORD *)(a1 + 184) = v11;
  *(_BYTE *)(a1 + 192) = v12;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)&v9[3];
  *(_DWORD *)(a1 + 193) = *(_DWORD *)v9;
  *(_QWORD *)(a1 + 200) = v13;
  *(_BYTE *)(a1 + 208) = v14;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)((char *)&v10 + 3);
  *(_DWORD *)(a1 + 209) = v10;
  *(_OWORD *)(a1 + 216) = v15;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 249) = 1;
  *(_WORD *)(a1 + 254) = v29;
  *(_DWORD *)(a1 + 250) = v28;
  *(_QWORD *)(a1 + 256) = v5;
  *(_QWORD *)(a1 + 264) = v10;
  *(_QWORD *)(a1 + 272) = v11;
  *(_BYTE *)(a1 + 280) = v12;
  *(_QWORD *)(a1 + 288) = v13;
  *(_BYTE *)(a1 + 296) = v14;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 337) = 3;
  *(_WORD *)(a1 + 342) = v25;
  *(_QWORD *)(a1 + 344) = v4;
  *(_OWORD *)(a1 + 56) = xmmword_187BFE310;
  *(_BYTE *)(a1 + 73) = 0;
  *(_OWORD *)(a1 + 144) = xmmword_187BFE310;
  *(_OWORD *)(a1 + 232) = xmmword_187BFE310;
  *(_OWORD *)(a1 + 304) = v15;
  *(_OWORD *)(a1 + 320) = xmmword_187BFE310;
  return result;
}

void SafeAreaPaddingModifier.insetView(edge:)(char a1)
{
  static Color.clear.getter();
  __asm { BR              X10 }
}

uint64_t sub_1872DB828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned int v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if (((v22 >> v23) & 1) != 0)
  {
    if ((a14 & 0x100000000) != 0)
    {
      outlined copy of Environment<EdgeInsets>.Content(v24, v25, v26, v27, v28);
      specialized Environment.wrappedValue.getter();
      outlined consume of Environment<EdgeInsets>.Content(v24, v25, v26, v27, v28);
    }
    a1 = EdgeInsets.subscript.getter();
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_1872DB8DC + 4 * byte_187C1FA74[v23]))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

double sub_1872DB8DC()
{
  uint64_t v0;
  unsigned int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  if (((v1 >> v2) & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      outlined copy of Environment<EdgeInsets>.Content(v3, v4, v5, v6, v7);
      specialized Environment.wrappedValue.getter();
      outlined consume of Environment<EdgeInsets>.Content(v3, v4, v5, v6, v7);
    }
    EdgeInsets.subscript.getter();
  }
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_QWORD *)v0 = v10;
  *(_QWORD *)(v0 + 8) = v11;
  *(_BYTE *)(v0 + 16) = v12;
  *(_QWORD *)(v0 + 24) = v13;
  *(_BYTE *)(v0 + 32) = v14;
  result = *(double *)&v15;
  *(_OWORD *)(v0 + 40) = v15;
  return result;
}

uint64_t sub_1872DB9E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = EnvironmentValues.defaultPadding.getter();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultPadding : EnvironmentValues()
{
  return EnvironmentValues.defaultPadding.setter();
}

uint64_t sub_1872DBA4C()
{
  return EnvironmentValues.defaultPadding.setter();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SafeAreaPaddingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for SafeAreaPaddingModifier(uint64_t a1)
{
  return outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
}

uint64_t initializeWithCopy for SafeAreaPaddingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<EdgeInsets>.Content(v3, v4, v5, v6, v7);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(a1 + 80) = v7;
  return a1;
}

uint64_t assignWithCopy for SafeAreaPaddingModifier(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<EdgeInsets>.Content(v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = v9;
  outlined consume of Environment<EdgeInsets>.Content(v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SafeAreaPaddingModifier(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v3 = *(_BYTE *)(a2 + 80);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 80);
  v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 80) = v3;
  outlined consume of Environment<EdgeInsets>.Content(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SafeAreaPaddingModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 81))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SafeAreaPaddingModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeAreaPaddingModifier()
{
  return &type metadata for SafeAreaPaddingModifier;
}

uint64_t sub_1872DBCC4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(a1, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>);
}

void type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>)
  {
    lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier;
  if (!lazy protocol witness table cache variable for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SafeAreaPaddingModifier, &type metadata for SafeAreaPaddingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier);
  }
  return result;
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>)
  {
    type metadata accessor for ModifiedContent<Color, _FrameLayout>();
    lazy protocol witness table accessor for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for _InsetViewModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>);
  }
}

void type metadata accessor for ModifiedContent<Color, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Color, _FrameLayout>)
  {
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Color, _FrameLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Color, _FrameLayout>();
    v2[0] = MEMORY[0x1E0CE7140];
    v2[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<Color, _FrameLayout>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>, MEMORY[0x1E0CE4640]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<SafeAreaPaddingModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SafeAreaPaddingModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<Color, _FrameLayout>> and conformance _InsetViewModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>, MEMORY[0x1E0CE4640]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *FileDocumentWriteConfiguration.existingFile.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for FileDocumentWriteConfiguration(0) + 20));
  v2 = v1;
  return v1;
}

uint64_t type metadata accessor for FileDocumentWriteConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileDocumentWriteConfiguration);
}

uint64_t FileDocumentWriteConfiguration.contentType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UTType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

id FileDocumentReadConfiguration.file.getter()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for FileDocumentReadConfiguration(0) + 20));
}

uint64_t type metadata accessor for FileDocumentReadConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileDocumentReadConfiguration);
}

uint64_t assignWithCopy for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = v9;

  return a1;
}

uint64_t assignWithTake for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentWriteConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872DC250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for FileDocumentWriteConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872DC2E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UTType();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for FileDocumentWriteConfiguration()
{
  return type metadata completion function for FileDocumentWriteConfiguration();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UTType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDocumentWriteConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UTType();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void destroy for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for FileDocumentReadConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t initializeWithTake for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for FileDocumentReadConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentReadConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872DC5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FileDocumentReadConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872DC654(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UTType();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for FileDocumentReadConfiguration()
{
  return type metadata completion function for FileDocumentWriteConfiguration();
}

uint64_t View.searchFocused(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v7;
  _QWORD v8[2];
  char v9;

  v8[0] = a1;
  v8[1] = a2;
  v9 = a3;
  v7 = 1;
  return View.searchFocused<A>(_:equals:)((uint64_t)v8, (uint64_t)&v7, a4, MEMORY[0x1E0DEAFA0], a5, MEMORY[0x1E0DEAFB0], a6);
}

uint64_t View.searchFocused<A>(_:equals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v22[3];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;
  __int128 v28;

  v22[2] = a5;
  v22[0] = a7;
  v22[1] = a3;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FocusState.Binding(0, v14, v15, v14);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)v22 - v19;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, a4);
  SearchFocusContext.init<A>(binding:value:)((uint64_t)v20, (uint64_t)v13, a4, a6, (uint64_t *)v26);
  v23 = *(_OWORD *)v26;
  v24 = *(_OWORD *)&v26[16];
  v25 = v27;
  View.environment<A>(_:_:)();
  swift_release();
  v28 = *(_OWORD *)&v26[8];
  outlined release of AnyDynamicChild<A, B>((uint64_t)&v28);
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.searchFocusContext : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[40];

  EnvironmentValues.searchFocusContext.getter((uint64_t)v3);
  return outlined init with take of SearchFocusContext?((uint64_t)v3, a1);
}

uint64_t sub_1872DC92C@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[40];

  EnvironmentValues.searchFocusContext.getter((uint64_t)v3);
  return outlined init with take of SearchFocusContext?((uint64_t)v3, a1);
}

_QWORD *key path setter for EnvironmentValues.searchFocusContext : EnvironmentValues(uint64_t a1)
{
  uint64_t v2[5];

  outlined init with take of SearchFocusContext?(a1, (uint64_t)v2);
  outlined retain of SearchFocusContext?(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of SearchFocusContext?);
  specialized EnvironmentValues.subscript.setter(v2);
  return outlined retain of SearchFocusContext?(v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of SearchFocusContext?);
}

uint64_t SearchFocusContext.init<A>(binding:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v10 = *(_QWORD *)(a3 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = type metadata accessor for FocusState.Binding(0, v12, v13, v13);
  v26 = FocusState.Binding.propertyID.getter(v14, v15, v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a3);
  v18 = FocusStateBindingUpdateAction.init<A>(binding:value:)(a1, (uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  v21((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a3);
  v22 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a3;
  *(_QWORD *)(v23 + 24) = a4;
  result = ((uint64_t (*)(unint64_t, char *, uint64_t))v21)(v23 + v22, (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  *a5 = v26;
  a5[1] = (uint64_t)v18;
  a5[2] = v20;
  a5[3] = (uint64_t)partial apply for closure #1 in SearchFocusContext.init<A>(binding:value:);
  a5[4] = v23;
  return result;
}

uint64_t (*closure #1 in SearchFocusContext.init<A>(binding:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v22;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v22 - v12;
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v18, a3, a4, v16);
  outlined init with copy of Binding<SearchFieldState>(a2, (uint64_t)v13);
  v20 = FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)((uint64_t)v18, a1, (uint64_t)v13, a4, a5);
  swift_bridgeObjectRetain();
  return v20;
}

uint64_t View.onSearchFocusChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a1;
  v4[1] = a2;
  return MEMORY[0x18D75B4AC](v4, a3, &unk_1E1AF3728);
}

uint64_t sub_1872DCC34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchFocusContext?>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFocusContext?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for SearchFocusContext?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SearchFocusContext?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchFocusContext?>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFocusContext?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1872DCD5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchFocusContext?>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFocusContext?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_1872DCDD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier;
  if (!lazy protocol witness table cache variable for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnSearchFocusChangeModifier, &unk_1E1AF3728);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier);
  }
  return result;
}

void *type metadata accessor for OnSearchFocusChangeModifier()
{
  return &unk_1E1AF3728;
}

uint64_t initializeWithCopy for SearchFocusContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SearchFocusContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SearchFocusContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SearchFocusContext()
{
  return &type metadata for SearchFocusContext;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnSearchFocusChangeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnSearchFocusChangeModifier@<X0>(uint64_t (**a1)(unsigned __int8 *a1)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v1;
  v3 = v1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a1 = partial apply for closure #1 in OnSearchFocusChangeModifier.body(content:);
  a1[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return swift_retain();
}

uint64_t sub_1872DCFE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnSearchFocusChangeModifier.body(content:)(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1872DD02C()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in SearchFocusContext.init<A>(binding:value:)(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return closure #1 in SearchFocusContext.init<A>(binding:value:)(a1, a2, v2 + ((v4 + 32) & ~v4), v3, *(_QWORD *)(v2 + 24));
}

uint64_t outlined init with copy of Binding<SearchFieldState>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of SearchFocusContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SearchFocusContext?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of SearchFocusContext?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

_QWORD *outlined retain of SearchFocusContext?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t outlined consume of SearchFocusContext?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<OnSearchFocusChangeModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for _PreferenceActionModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>)
  {
    type metadata accessor for _ViewModifier_Content<OnSearchFocusChangeModifier>();
    type metadata accessor for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>);
  }
}

void type metadata accessor for _ViewModifier_Content<OnSearchFocusChangeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnSearchFocusChangeModifier>)
  {
    lazy protocol witness table accessor for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnSearchFocusChangeModifier>);
  }
}

void type metadata accessor for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>)
  {
    v0 = type metadata accessor for _PreferenceActionModifier(0, (uint64_t)&type metadata for IsSearchFocusedPreferenceKey, (uint64_t)&protocol witness table for IsSearchFocusedPreferenceKey, MEMORY[0x1E0DEAFB8]);
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OnSearchFocusChangeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<OnSearchFocusChangeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OnSearchFocusChangeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OnSearchFocusChangeModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OnSearchFocusChangeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void ForEachSectionCollection.init<A>(subviewOf:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ValueMetadata *v14;
  ValueMetadata *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = &type metadata for SectionCollection;
  v15 = &type metadata for SectionConfiguration.ID;
  v16 = a4;
  v17 = lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection();
  v18 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  v11 = type metadata accessor for ForEach();
  v13 = a6;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v11, &v13);
  v14 = a5;
  v15 = (ValueMetadata *)v11;
  v16 = a7;
  v17 = v12;
  type metadata accessor for GroupSectionsOfContent();
}

void sub_1872DD484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for Group();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 16))(v4, v1, v0, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = *(_QWORD *)(v5 - 168);
  v9[3] = v0;
  v9[4] = *(_QWORD *)(v5 - 192);
  v9[5] = v2;
  v10 = *(_QWORD *)(v5 - 152);
  v9[6] = *(_QWORD *)(v5 - 160);
  v9[7] = v10;
  swift_retain();
  Group.init<A, B>(sections:transform:)();
}

uint64_t sub_1872DD534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  *(_QWORD *)(v3 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupSectionsOfContent<A, B>, v2);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v1, v3 - 136);
  v4 = AnyView.init<A>(_:)();
  swift_release();
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 176) + 8))(*(_QWORD *)(v3 - 184), v0);
  **(_QWORD **)(v3 - 144) = v4;
  return result;
}

uint64_t sub_1872DD5B0()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t type metadata accessor for ForEachSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ForEachSectionCollection);
}

void ForEach.init<A>(sectionOf:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5, uint64_t a6, uint64_t a7)
{
  void (**Description)(char *, uint64_t, uint64_t, double);
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  Description = (void (**)(char *, uint64_t, uint64_t, double))a5[-1].Description;
  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Description[2](v17, a1, v18, v15);
  swift_retain();
  ForEachSectionCollection.init<A>(subviewOf:content:)((uint64_t)v17, a2, a3, a4, a5, a6, a7);
}

__n128 sub_1872DD6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  *(_QWORD *)(v6 - 144) = swift_getKeyPath();
  v8 = type metadata accessor for ForEachSectionCollection(0, v3, v4, v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, v8);
  lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  ForEach.init(_:idGenerator:content:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v1);
  v9 = *(_QWORD *)(v6 - 112);
  v10 = *(_QWORD *)(v6 - 88);
  result = *(__n128 *)(v6 - 104);
  *(_OWORD *)v0 = *(_OWORD *)(v6 - 128);
  *(_QWORD *)(v0 + 16) = v9;
  *(__n128 *)(v0 + 24) = result;
  *(_QWORD *)(v0 + 40) = v10;
  return result;
}

uint64_t closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  v15 = lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection();
  lazy protocol witness table accessor for type SectionConfiguration and conformance SectionConfiguration();
  swift_bridgeObjectRetain();
  swift_retain();
  ForEach<>.init(_:content:)();
  v20 = v24;
  v21 = v25;
  v22 = v26;
  v23 = v27;
  *(_QWORD *)&v28 = &type metadata for SectionCollection;
  *((_QWORD *)&v28 + 1) = &type metadata for SectionConfiguration.ID;
  v29 = a3;
  v30 = v15;
  *(_QWORD *)&v31 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  v16 = type metadata accessor for ForEach();
  v19 = a5;
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v16, &v19);
  static ViewBuilder.buildExpression<A>(_:)(&v20, v16, v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v24 = v28;
  v25 = v29;
  v26 = v30;
  v27 = v31;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v24, v16, a7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

void ForEachSectionCollection.startIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ForEachSectionCollection.endIndex.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ForEachSectionCollection.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void base witness table accessor for BidirectionalCollection in ForEachSectionCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachSectionCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

void base witness table accessor for Collection in ForEachSectionCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachSectionCollection<A>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachSectionCollection<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

void base witness table accessor for Sequence in ForEachSectionCollection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void protocol witness for Collection.startIndex.getter in conformance ForEachSectionCollection<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Collection.endIndex.getter in conformance ForEachSectionCollection<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Collection.subscript.read in conformance ForEachSectionCollection<A>(void **a1)
{
  *a1 = malloc(0x28uLL);
  ForEachSectionCollection.subscript.read();
}

void (*sub_1872DDDF4(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void ForEachSectionCollection.subscript.read()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachSectionCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachSectionCollection<A>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ForEachSectionCollection<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSectionCollection<A>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x1E0DEB458]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachSectionCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachSectionCollection<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEachSectionCollection<A>, a1);
  return Collection._copyToContiguousArray()();
}

unint64_t lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionCollection, &type metadata for SectionCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionCollection, &type metadata for SectionCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionCollection, &type metadata for SectionCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection;
  if (!lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionCollection, &type metadata for SectionCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionCollection and conformance SectionCollection);
  }
  return result;
}

uint64_t sub_1872DE014()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in ForEachSectionCollection.init<A>(subviewOf:content:)(a1, v2[6], v2[2], v2[4], a2);
}

unint64_t lazy protocol witness table accessor for type SectionConfiguration and conformance SectionConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionConfiguration and conformance SectionConfiguration;
  if (!lazy protocol witness table cache variable for type SectionConfiguration and conformance SectionConfiguration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionConfiguration, &type metadata for SectionConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionConfiguration and conformance SectionConfiguration);
  }
  return result;
}

uint64_t static _DocumentIntroAccessoryBuilder.buildEither<A>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

void static _DocumentIntroAccessoryBuilder.buildPartialBlock<A, B>(accumulated:next:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[4];

  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v23 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v17 + 16))(v22, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a7, v22, a3);
  v23[0] = a3;
  v23[1] = a4;
  v23[2] = a5;
  v23[3] = a6;
  type metadata accessor for MergedDocumentIntroAccessory();
}

uint64_t sub_1872DE1A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

uint64_t static _DocumentIntroAccessoryBuilder.buildOptional<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  _QWORD v25[4];

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v25 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a2) != 1)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v24(v22, v12, a2);
    v24(v17, v22, a2);
    v25[0] = a2;
    v25[1] = &type metadata for EmptyDocumentIntroAccessory;
    v25[2] = a3;
    v25[3] = &protocol witness table for EmptyDocumentIntroAccessory;
    type metadata accessor for MergedDocumentIntroAccessory();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  result = type metadata accessor for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>();
  *(_QWORD *)(a4 + 24) = result;
  *(_QWORD *)(a4 + 32) = &protocol witness table for MergedDocumentIntroAccessory<A, B>;
  return result;
}

uint64_t type metadata accessor for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>;
  if (!lazy cache variable for type metadata for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>)
    type metadata accessor for MergedDocumentIntroAccessory();
  return result;
}

void type metadata accessor for MergedDocumentIntroAccessory()
{
  JUMPOUT(0x18D75FF28);
}

void MergedDocumentIntroAccessory.position.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall MergedDocumentIntroAccessory._resolve(into:)(SwiftUI::_ResolvedDocumentIntroAccessory *into)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  (*(void (**)(SwiftUI::_ResolvedDocumentIntroAccessory *, _QWORD))(*(_QWORD *)(v1 + 32) + 48))(into, *(_QWORD *)(v1 + 16));
  (*(void (**)(SwiftUI::_ResolvedDocumentIntroAccessory *, _QWORD))(*(_QWORD *)(v2 + 40) + 48))(into, *(_QWORD *)(v2 + 24));
}

void protocol witness for _DocumentIntroAccessory.anchor.getter in conformance MergedDocumentIntroAccessory<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _DocumentIntroAccessory.position.getter in conformance MergedDocumentIntroAccessory<A, B>()
{
  MergedDocumentIntroAccessory.position.getter();
}

void protocol witness for _DocumentIntroAccessory.content.getter in conformance MergedDocumentIntroAccessory<A, B>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _DocumentIntroAccessory.anchor.getter in conformance EmptyDocumentIntroAccessory()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _DocumentIntroAccessory.position.getter in conformance EmptyDocumentIntroAccessory()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for _DocumentIntroAccessory.content.getter in conformance EmptyDocumentIntroAccessory()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _AnyDocumentIntroAccessory.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (*(double (**)(uint64_t, uint64_t, double))(a3 + 24))(a2, a3, v10);
  v13 = v12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v17, a2, a3);
  BYTE1(v17) = v17;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  swift_getAssociatedConformanceWitness();
  v14 = AnyView.init<A>(_:)();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  v16 = BYTE1(v17);
  *(double *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v16;
  *(_QWORD *)(a4 + 24) = v14;
  return result;
}

void _DocumentIntroAccessoryPosition.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static _DocumentIntroAccessoryPosition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int _DocumentIntroAccessoryPosition.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double _DocumentIntroAccessoryItem.anchor.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void _DocumentIntroAccessoryItem.anchor.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*_DocumentIntroAccessoryItem.anchor.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void _DocumentIntroAccessoryItem.position.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *_DocumentIntroAccessoryItem.position.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*_DocumentIntroAccessoryItem.position.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _DocumentIntroAccessoryItem.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t _DocumentIntroAccessoryItem.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*_DocumentIntroAccessoryItem.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _DocumentIntroAccessoryItem.init(anchor:position:content:)@<X0>(char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  char v9;

  v9 = *a1;
  *(double *)a5 = a6;
  *(double *)(a5 + 8) = a7;
  *(_BYTE *)(a5 + 16) = v9;
  type metadata accessor for _DocumentIntroAccessoryItem(0, a3, a4, a3);
  return a2();
}

uint64_t type metadata accessor for _DocumentIntroAccessoryItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _DocumentIntroAccessoryItem);
}

Swift::Void __swiftcall _DocumentIntroAccessoryItem._resolve(into:)(SwiftUI::_ResolvedDocumentIntroAccessory *into)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *rawValue;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v3 = v1;
  v5 = ((double (*)(SwiftUI::_ResolvedDocumentIntroAccessory *))MEMORY[0x1E0C80A78])(into);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v7, v2, v3, v5);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DocumentIntroAccessoryItem<A>, v3);
  _AnyDocumentIntroAccessory.init<A>(_:)((uint64_t)v7, v3, v9, (uint64_t)v18);
  v10 = v18[0];
  v11 = v18[1];
  v12 = v19;
  v13 = v20;
  rawValue = (char *)into->storage._rawValue;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)rawValue + 2) + 1, 1, rawValue);
  v16 = *((_QWORD *)rawValue + 2);
  v15 = *((_QWORD *)rawValue + 3);
  if (v16 >= v15 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, rawValue);
  *((_QWORD *)rawValue + 2) = v16 + 1;
  v17 = &rawValue[32 * v16];
  *((_QWORD *)v17 + 4) = v10;
  *((_QWORD *)v17 + 5) = v11;
  v17[48] = v12;
  *((_QWORD *)v17 + 7) = v13;
  swift_release();
  into->storage._rawValue = rawValue;
}

unint64_t lazy protocol witness table accessor for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition;
  if (!lazy protocol witness table cache variable for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DocumentIntroAccessoryPosition, &type metadata for _DocumentIntroAccessoryPosition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition);
  }
  return result;
}

ValueMetadata *type metadata accessor for _DocumentIntroAccessoryBuilder()
{
  return &type metadata for _DocumentIntroAccessoryBuilder;
}

uint64_t dispatch thunk of _DocumentIntroAccessory.anchor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _DocumentIntroAccessory.position.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _DocumentIntroAccessory.content.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _DocumentIntroAccessory._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for _ResolvedDocumentIntroAccessory()
{
  return &type metadata for _ResolvedDocumentIntroAccessory;
}

uint64_t storeEnumTagSinglePayload for _DocumentIntroAccessoryPosition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1872DEAC0 + 4 * byte_187C1FE55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1872DEAF4 + 4 * byte_187C1FE50[v4]))();
}

uint64_t sub_1872DEAF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872DEAFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1872DEB04);
  return result;
}

uint64_t sub_1872DEB10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1872DEB18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1872DEB1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872DEB24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _DocumentIntroAccessoryPosition()
{
  return &type metadata for _DocumentIntroAccessoryPosition;
}

uint64_t type metadata completion function for _DocumentIntroAccessoryItem()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for _DocumentIntroAccessoryItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for _DocumentIntroAccessoryItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _DocumentIntroAccessoryItem(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 17) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 16);
      if (v15 >= 2)
        return v15 - 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872DED4C + 4 * byte_187C1FE5A[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for _DocumentIntroAccessoryItem(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_UNKNOWN **sub_1872DEFA8()
{
  return &protocol witness table for MergedDocumentIntroAccessory<A, B>;
}

_UNKNOWN **sub_1872DEFB4()
{
  return &protocol witness table for EmptyDocumentIntroAccessory;
}

uint64_t initializeWithCopy for _AnyDocumentIntroAccessory(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _AnyDocumentIntroAccessory(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _AnyDocumentIntroAccessory(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for _AnyDocumentIntroAccessory()
{
  return &type metadata for _AnyDocumentIntroAccessory;
}

ValueMetadata *type metadata accessor for EmptyDocumentIntroAccessory()
{
  return &type metadata for EmptyDocumentIntroAccessory;
}

uint64_t getEnumTagSinglePayload for MergedDocumentIntroAccessory(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872DF188 + 4 * byte_187C1FE68[v17 - 1]))();
}

void storeEnumTagSinglePayload for MergedDocumentIntroAccessory(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void protocol witness for View.body.getter in conformance NavigationSplitViewStyleConfiguration.Sidebar()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for View.body.getter in conformance NavigationSplitViewStyleConfiguration.Detail()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedNavigationSplitStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedNavigationSplitStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_WORD *)(v1 + 16);
  v4 = *(_WORD *)(v1 + 18);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 18) = 1;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 41) = 1;
  *(_WORD *)(a1 + 42) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t View.navigationSplitViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NavigationSplitStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t dispatch thunk of NavigationSplitViewStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration()
{
  return &type metadata for NavigationSplitViewStyleConfiguration;
}

uint64_t sub_1872DF65C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for NavigationSplitStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for NavigationSplitStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration.Detail()
{
  return &type metadata for NavigationSplitViewStyleConfiguration.Detail;
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration.Content()
{
  return &type metadata for NavigationSplitViewStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration.Sidebar()
{
  return &type metadata for NavigationSplitViewStyleConfiguration.Sidebar;
}

uint64_t getEnumTagSinglePayload for NavigationSplitStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872DF79C + 4 * byte_187C20090[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationSplitStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationSplitStyleModifier<A>()
{
  return &protocol witness table for NavigationSplitStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in NavigationSplitStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t NavigationSplitStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  void (*v20)(char *, uint64_t);
  _QWORD v23[2];
  int v24;
  __int128 v25;
  uint64_t v26;
  char v27;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23[-1] - v14;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_DWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 40);
  LOBYTE(v14) = *(_BYTE *)(a1 + 48);
  v23[0] = *(_QWORD *)a1;
  v23[1] = v16;
  v24 = v17;
  v25 = *(_OWORD *)(a1 + 24);
  v26 = v18;
  v27 = v14;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 24))(v23, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for NavigationSplitStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in NavigationSplitViewStyleConfiguration.Sidebar()
{
  return &protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar;
}

unint64_t instantiation function for generic protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewStyleConfiguration.Sidebar, &type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewStyleConfiguration.Sidebar, &type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in NavigationSplitViewStyleConfiguration.Content()
{
  return &protocol witness table for NavigationSplitViewStyleConfiguration.Content;
}

unint64_t instantiation function for generic protocol witness table for NavigationSplitViewStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewStyleConfiguration.Content, &type metadata for NavigationSplitViewStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewStyleConfiguration.Content, &type metadata for NavigationSplitViewStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in NavigationSplitViewStyleConfiguration.Detail()
{
  return &protocol witness table for NavigationSplitViewStyleConfiguration.Detail;
}

unint64_t instantiation function for generic protocol witness table for NavigationSplitViewStyleConfiguration.Detail(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewStyleConfiguration.Detail, &type metadata for NavigationSplitViewStyleConfiguration.Detail);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewStyleConfiguration.Detail, &type metadata for NavigationSplitViewStyleConfiguration.Detail);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  }
  return result;
}

uint64_t destroy for NavigationSplitViewStyleConfiguration()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for NavigationSplitViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationSplitViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for NavigationSplitViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitViewStyleConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewStyleConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedNavigationSplitStyle()
{
  return &type metadata for ResolvedNavigationSplitStyle;
}

uint64_t sub_1872DFF44()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedNavigationSplitStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle> and conformance NavigationSplitStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>, (uint64_t)&protocol conformance descriptor for NavigationSplitStyleModifier<A>);
}

void type metadata accessor for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>)
  {
    v2 = lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle();
    v4 = type metadata accessor for NavigationSplitStyleModifier(a1, (uint64_t)&type metadata for AutomaticNavigationSplitViewStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle;
  if (!lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticNavigationSplitViewStyle, &type metadata for AutomaticNavigationSplitViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticNavigationSplitViewStyle and conformance AutomaticNavigationSplitViewStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedNavigationSplitStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedNavigationSplitStyle, &type metadata for ResolvedNavigationSplitStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedNavigationSplitStyle, &type metadata for ResolvedNavigationSplitStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedNavigationSplitStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1872E00E4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&protocol conformance descriptor for NavigationSplitView<A, B, C>);
}

uint64_t type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>;
  if (!lazy cache variable for type metadata for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>)
    type metadata accessor for NavigationSplitView();
  return result;
}

void __swiftcall DefaultWindowStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DefaultWindowStyle.configureWindow(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for DefaultWindowStyle()
{
  return &type metadata for DefaultWindowStyle;
}

uint64_t TabContent.sectionActions<A>(content:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  v22 = a5;
  v10 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TabSectionActionsModifier(0, v13, v14, v13);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v22 - v19;
  a1(v18);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v20, v12, a4);
  TabContent.modifier<A>(_:)((uint64_t)v20, a3, v15, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
}

uint64_t type metadata accessor for TabSectionActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabSectionActionsModifier);
}

uint64_t sub_1872E02D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *a1;
  v5 = a1[2];
  v6 = type metadata accessor for TabSectionActionsModifier(255, a1[1], a1[3], a4);
  v8 = type metadata accessor for ModifiedTabContent(255, v4, v6, v7);
  v10[0] = v5;
  v10[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionActionsModifier<A>, v6);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v8, v10);
}

uint64_t type metadata accessor for TabSectionActions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TabSectionActions);
}

uint64_t getEnumTagSinglePayload for TabSectionActions(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872E0414 + 4 * byte_187C20340[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TabSectionActions(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t associated type witness table accessor for View.Body : View in TabSectionActions<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TabSectionActionsModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t);
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionActionsModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  type metadata accessor for TabSectionActions(255, v5, v6, v7);
  swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for TupleView();
  v9 = type metadata accessor for Group();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = &v23[-v17];
  v24 = v5;
  v25 = v6;
  v26 = v2;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v8, v16);
  Group<A>.init(content:)();
  v27 = v19;
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v9, &v27);
  static ViewBuilder.buildExpression<A>(_:)(v13, v9, v20);
  v21 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
  v21(v13, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v9, a2);
  return ((uint64_t (*)(_BYTE *, uint64_t))v21)(v18, v9);
}

uint64_t closure #1 in TabSectionActionsModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  _QWORD v29[4];
  _QWORD v30[2];
  uint64_t v31[2];

  v29[1] = a4;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TabSectionActions(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v29 - v20;
  v23 = type metadata accessor for TabSectionActionsModifier(255, a2, a3, v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionActionsModifier<A>, v23);
  v24 = type metadata accessor for _ViewModifier_Content();
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v24);
  static ViewBuilder.buildExpression<A>(_:)(v25, v24, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v9, a2);
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionActions<A>, v13);
  static ViewBuilder.buildExpression<A>(_:)(v17, v13, v26);
  v27 = *(void (**)(char *, uint64_t))(v14 + 8);
  v27(v17, v13);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v21, v13);
  v31[1] = (uint64_t)v17;
  v30[0] = v24;
  v30[1] = v13;
  v29[2] = v25;
  v29[3] = v26;
  static ViewBuilder.buildBlock<each A>(_:)(v31, 2uLL, (uint64_t)v30);
  v27(v21, v13);
  return ((uint64_t (*)(char *, uint64_t))v27)(v17, v13);
}

uint64_t TabSectionActions.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[2];

  v23 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for _VariadicView.Tree();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a1 + 24);
  v24 = v4;
  v25 = v15;
  v26 = v2;
  _VariadicView.Tree.init(_:content:)();
  v16 = lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer();
  v17 = lazy protocol witness table accessor for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>();
  v28[0] = v15;
  v28[1] = v17;
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v28);
  v27[0] = v16;
  v27[1] = v18;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v6, v27);
  static ViewBuilder.buildExpression<A>(_:)(v10, v6, v19);
  v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v10, v6);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, v6, v23);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v6);
}

uint64_t closure #1 in TabSectionActions.body.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];

  type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>();
  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v17 - v11;
  lazy protocol witness table accessor for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext();
  View.styleContext<A>(_:)();
  v13 = lazy protocol witness table accessor for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>();
  v17[0] = a1;
  v17[1] = v13;
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v17);
  static ViewBuilder.buildExpression<A>(_:)(v8, v4, v14);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v12, v4, a2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, v4);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabSectionActionsModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in TabSectionActionsModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in TabSectionActionsModifier.body(content:)(v1[4], v1[2], v1[3], a1);
}

void type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextWriter<SidebarSectionActionStyleContext>)
  {
    lazy protocol witness table accessor for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext();
    v0 = type metadata accessor for StyleContextWriter();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SidebarSectionActionStyleContext>);
  }
}

unint64_t lazy protocol witness table accessor for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext;
  if (!lazy protocol witness table cache variable for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarSectionActionStyleContext, &type metadata for SidebarSectionActionStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext);
  }
  return result;
}

uint64_t partial apply for closure #1 in TabSectionActions.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TabSectionActions.body.getter(*(_QWORD *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer;
  if (!lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActionPreparer, &type metadata for ActionPreparer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer;
  if (!lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActionPreparer, &type metadata for ActionPreparer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionPreparer()
{
  return &type metadata for ActionPreparer;
}

uint64_t sub_1872E0DFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for TabSectionActionsModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionActionsModifier<A>, v6);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for TabSectionActions(255, v4, v5, v7);
  swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for TupleView();
  v9 = type metadata accessor for Group();
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v8);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v9, &v11);
}

uint64_t sub_1872E0ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>();
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for _VariadicView.Tree();
  v4 = lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>();
  v6[0] = v4;
  v6[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v3, v6);
}

unint64_t instantiation function for generic protocol witness table for ActionPreparer(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in ActionPreparer()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in ActionPreparer.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD v5[6];
  _BYTE v6[25];
  __int128 v7;
  _OWORD v8[5];
  _OWORD v9[2];
  uint64_t v10;

  v7 = (unint64_t)static HorizontalAlignment.center.getter();
  LOBYTE(v8[0]) = 1;
  outlined init with copy of _VariadicView_Children.Element(a1, (uint64_t)v8 + 8);
  outlined init with copy of VStack<_VariadicView_Children.Element>((uint64_t)&v7, (uint64_t)v5);
  v6[24] = 1;
  outlined destroy of VStack<_VariadicView_Children.Element>((uint64_t)&v7);
  outlined init with copy of _VariadicView_Children.Element(a1, (uint64_t)&v10);
  v8[3] = v5[4];
  v8[4] = v5[5];
  v9[0] = *(_OWORD *)v6;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v6[9];
  v7 = v5[0];
  v8[0] = v5[1];
  v8[1] = v5[2];
  v8[2] = v5[3];
  outlined init with copy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>((uint64_t)&v7, a2);
  *(_QWORD *)(a2 + 224) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>((uint64_t)&v7);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance ActionPreparer()
{
  lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer();
  return static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance ActionPreparer(uint64_t a1)
{
  _BYTE v2[56];

  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v2);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>();
  lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified);
  lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element();
  return ForEach<>.init(_:content:)();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>)
  {
    type metadata accessor for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
    type metadata accessor for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E0CE55D8], MEMORY[0x1E0CE55C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E0CE6028], MEMORY[0x1E0CE6018], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>);
  }
}

uint64_t type metadata accessor for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>;
  if (!lazy cache variable for type metadata for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>)
    type metadata accessor for PlatformItemTraitWriter();
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type VStack<_VariadicView_Children.Element> and conformance VStack<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>);
    v3[1] = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VStack<_VariadicView_Children.Element> and conformance VStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type VStack<_VariadicView_Children.Element> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<_VariadicView_Children.Element> and conformance VStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E0CE55D8], MEMORY[0x1E0CE55C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<_VariadicView_Children.Element> and conformance VStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabPlatformIdentified and conformance TabPlatformIdentified;
  if (!lazy protocol witness table cache variable for type TabPlatformIdentified and conformance TabPlatformIdentified)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabPlatformIdentified, &type metadata for TabPlatformIdentified);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlatformIdentified and conformance TabPlatformIdentified);
  }
  return result;
}

uint64_t outlined init with copy of VStack<_VariadicView_Children.Element>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E0CE55D8], MEMORY[0x1E0CE55C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of VStack<_VariadicView_Children.Element>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E0CE55D8], MEMORY[0x1E0CE55C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE74A8]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>();
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>);
  }
}

ValueMetadata *type metadata accessor for VersionSeedSetTracker()
{
  return &type metadata for VersionSeedSetTracker;
}

uint64_t type metadata accessor for VersionSeedTracker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VersionSeedTracker);
}

void VersionSeedTracker.init()(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t VersionSeedTracker.didChange(_:action:)(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  BOOL v17;
  _QWORD v19[2];
  void (*v20)(char *);
  uint64_t v21;

  v4 = v3;
  v19[1] = a3;
  v20 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)v19 - v9;
  v11 = type metadata accessor for PreferenceList.Value();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v19 - v14;
  v21 = *a1;
  PreferenceList.subscript.getter();
  v16 = *(_DWORD *)&v15[*(int *)(v11 + 28)];
  if (*v4 == -1 || (v16 != -1 ? (v17 = *v4 == v16) : (v17 = 0), !v17))
  {
    *v4 = v16;
    (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(v11 + 16) - 8) + 16))(v10, v15);
    v20(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t VersionSeedSetTracker.hasChanges(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t HasChangesVisitor;
  char v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  char v12;

  v10 = *a1;
  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    HasChangesVisitor = lazy protocol witness table accessor for type VersionSeedSetTracker.HasChangesVisitor and conformance VersionSeedSetTracker.HasChangesVisitor();
    swift_retain();
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = (_DWORD *)(a2 + 48);
    do
    {
      v7 = *((_QWORD *)v6 - 1);
      v8 = *v6;
      v6 += 6;
      v11 = v8;
      v12 = 2;
      (*(void (**)(uint64_t *, void *, unint64_t))(v7 + 16))(&v10, &unk_1E1B1AE18, HasChangesVisitor);
      if (v12 != 2)
        v5 |= (v12 & 1) == 0;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    v5 = 0;
  }
  swift_release();
  return v5 & 1;
}

uint64_t VersionSeedSetTracker.HasChangesVisitor.visit<A>(key:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  uint64_t result;
  BOOL v12;
  _QWORD v13[2];

  v1 = v0;
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for PreferenceList.Value();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v13 - v5;
  v7 = *(_DWORD *)(v0 + 8);
  v13[1] = *(_QWORD *)v0;
  PreferenceList.subscript.getter();
  v8 = *(_DWORD *)&v6[*(int *)(v2 + 28)];
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = v7 != -1 && v8 != -1 && v7 == v8;
  *(_BYTE *)(v1 + 12) = v12;
  return result;
}

uint64_t VersionSeedSetTracker.UpdateSeedVisitor.visit<A>(key:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t result;
  _QWORD v9[2];

  v1 = v0;
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for PreferenceList.Value();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v9 - v5;
  v9[1] = *v0;
  PreferenceList.subscript.getter();
  v7 = *(_DWORD *)&v6[*(int *)(v2 + 28)];
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *((_DWORD *)v1 + 2) = v7;
  *((_BYTE *)v1 + 12) = 0;
  return result;
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v8;
  uint64_t v9;
  int v10;

  PreferenceList.subscript.getter();
  if (*a2 == -1 || v10 == -1 || *a2 != v10)
  {
    *a2 = v10;
    *(_QWORD *)(a3 + 56) = v8;
    *(_QWORD *)(a3 + 64) = v9;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v19 = a1;
  result = PreferenceList.subscript.getter();
  if (*a2 != -1 && v25 != -1 && *a2 == v25)
    return outlined consume of NavigationTitleStorage?(v20, v21, v22, v23, v24);
  *a2 = v25;
  v8 = v23;
  if (v23 == 1)
    return result;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v24;
  v13 = MEMORY[0x18D760234](a3 + 32);
  if (!v13)
    return outlined consume of NavigationTitleStorage?(v20, v21, v22, v23, v24);
  v14 = (void *)v13;
  outlined copy of Text?(v20, v21, v22, v23);
  outlined copy of Transaction?(v24);
  swift_retain();
  outlined copy of Text?(v20, v21, v22, v23);
  outlined copy of Transaction?(v24);
  swift_retain();
  v15 = objc_msgSend(v14, sel_traitCollection);
  UITraitCollection.baseEnvironment.getter(&v19);

  v16 = v14;
  if (v8)
  {
    v17 = Text.resolveString(in:with:idiom:)();
    v18 = (void *)MEMORY[0x18D75CC88](v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
  }
  objc_msgSend(v14, sel_setTitle_, v18);

  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v9, v10, v11, v8, v12);
  outlined consume of NavigationTitleStorage?(v9, v10, v11, v8, v12);
  outlined consume of Text?(v9, v10, v11, v8);
  outlined consume of Transaction?(v12);
  return swift_release();
}

void specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char v15;
  int v16;

  v6 = type metadata accessor for UITraitOverrides();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1;
  PreferenceList.subscript.getter();
  if (*a2 == -1 || v16 == -1 || *a2 != v16)
  {
    *a2 = v16;
    if (v15 != 2)
    {
      v12 = MEMORY[0x18D760234](a3 + 32);
      if (v12)
      {
        v13 = (void *)v12;
        MEMORY[0x18D75D7BC]();
        UIMutableTraits.userInterfaceStyle.setter();
        MEMORY[0x18D75D7C8](v9);

      }
    }
  }
}

uint64_t *specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, void (*a3)(uint64_t *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22[13];

  v22[0] = a1;
  PreferenceList.subscript.getter();
  if (*a2 != -1 && v21 != -1 && *a2 == v21)
    return (uint64_t *)outlined copy of AnyShareConfiguration?(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, (void (*)(void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  *a2 = v21;
  outlined init with take of AnyShareConfiguration?((uint64_t)&v8, (uint64_t)v22);
  outlined copy of AnyShareConfiguration?(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, (void (*)(void))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  a3(v22);
  outlined release of AnyShareConfiguration?(v22);
  return outlined release of AnyShareConfiguration?(v22);
}

uint64_t *outlined release of AnyShareConfiguration?(uint64_t *a1)
{
  outlined copy of AnyShareConfiguration?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], (void (*)(void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  return a1;
}

uint64_t outlined copy of AnyShareConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void), void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;

  if (a9 != 1)
  {
    a14();
    a15(a6, a7, a8, a9);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a15)(a10, a11, a12, a13);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VersionSeedSetTracker.UpdateSeedVisitor and conformance VersionSeedSetTracker.UpdateSeedVisitor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VersionSeedSetTracker.UpdateSeedVisitor and conformance VersionSeedSetTracker.UpdateSeedVisitor;
  if (!lazy protocol witness table cache variable for type VersionSeedSetTracker.UpdateSeedVisitor and conformance VersionSeedSetTracker.UpdateSeedVisitor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VersionSeedSetTracker.UpdateSeedVisitor, &unk_1E1B1AD98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VersionSeedSetTracker.UpdateSeedVisitor and conformance VersionSeedSetTracker.UpdateSeedVisitor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VersionSeedSetTracker.HasChangesVisitor and conformance VersionSeedSetTracker.HasChangesVisitor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VersionSeedSetTracker.HasChangesVisitor and conformance VersionSeedSetTracker.HasChangesVisitor;
  if (!lazy protocol witness table cache variable for type VersionSeedSetTracker.HasChangesVisitor and conformance VersionSeedSetTracker.HasChangesVisitor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VersionSeedSetTracker.HasChangesVisitor, &unk_1E1B1AE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VersionSeedSetTracker.HasChangesVisitor and conformance VersionSeedSetTracker.HasChangesVisitor);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for VersionSeedSetTracker.HasChangesVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VersionSeedSetTracker.HasChangesVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for VersionSeedSetTracker.HasChangesVisitor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

void *type metadata accessor for VersionSeedSetTracker.HasChangesVisitor()
{
  return &unk_1E1B1AE18;
}

uint64_t assignWithCopy for VersionSeedSetTracker.UpdateSeedVisitor(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for VersionSeedSetTracker.HasChangesVisitor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 13))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VersionSeedSetTracker.HasChangesVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void *type metadata accessor for VersionSeedSetTracker.UpdateSeedVisitor()
{
  return &unk_1E1B1AD98;
}

ValueMetadata *type metadata accessor for VersionSeedSetTracker.Value()
{
  return &type metadata for VersionSeedSetTracker.Value;
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10;
  int v11;

  PreferenceList.subscript.getter();
  if (*a2 == -1 || v11 == -1 || *a2 != v11)
  {
    *a2 = v11;
    *(_QWORD *)(a3 + direct field offset for ToolbarBridge.navigationAdaptor) = v10;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a4 + 9) = 1;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_DWORD *)(a2 + 56);
  v2 = MEMORY[0x1E0CE1470];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_AllowsHitTestingModifier>, (uint64_t)&type metadata for _AllowsHitTestingModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v3 = MEMORY[0x1E0DEAFA0];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v3, (uint64_t (*)(_QWORD, uint64_t))v2);
  _GraphValue.value.getter();
  outlined retain of [Text.Modifier]((uint64_t)&v5);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  return swift_bridgeObjectRelease();
}

uint64_t _AllowsHitTestingModifier.allowsHitTesting.getter(char a1)
{
  return a1 & 1;
}

uint64_t _AllowsHitTestingModifier.allowsHitTesting.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_AllowsHitTestingModifier.allowsHitTesting.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_AllowsHitTestingModifier __swiftcall _AllowsHitTestingModifier.init(allowsHitTesting:)(Swift::Bool allowsHitTesting)
{
  return (SwiftUI::_AllowsHitTestingModifier)allowsHitTesting;
}

unint64_t lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

uint64_t AllowsHitTestingResponder.__allocating_init(inputs:)()
{
  *(_BYTE *)(swift_allocObject() + 208) = 1;
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t _AllowsHitTestingModifier.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  if ((result & 1) != 0)
    v2 = 0;
  else
    v2 = 2;
  *(_QWORD *)a2 = v2;
  if ((result & 1) != 0)
    v3 = 19;
  else
    v3 = 2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = v3;
  return result;
}

BOOL static _AllowsHitTestingModifier.== infix(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _AllowsHitTestingModifier(uint64_t a1@<X8>)
{
  _BYTE *v1;
  BOOL v2;
  uint64_t v3;
  char v4;

  v2 = *v1 == 0;
  if (*v1)
    v3 = 0;
  else
    v3 = 2;
  *(_QWORD *)a1 = v3;
  if (v2)
    v4 = 2;
  else
    v4 = 19;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = v4;
}

void protocol witness for ViewModifier.body(content:) in conformance _AllowsHitTestingModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t AllowsHitTestingResponder.allowsHitTesting.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 208);
}

double AllowsHitTestingResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  void (*v8)(_QWORD *, uint64_t, uint64_t, uint64_t *);
  double result;
  uint64_t v10;

  if (*(_BYTE *)(v4 + 208) == 1)
  {
    v10 = *a4;
    type metadata accessor for DefaultLayoutViewResponder();
    v8 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t *))method lookup function for ViewResponder();
    v8(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), &v10);
  }
  else
  {
    *a1 = 0;
    return 0.0;
  }
  return result;
}

uint64_t AllowsHitTestingResponder.extendPrintTree(string:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;

  if (*(_BYTE *)(v0 + 208))
    v1 = 1702195828;
  else
    v1 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 208))
    v2 = 0xE400000000000000;
  else
    v2 = 0xE500000000000000;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x206465776F6C6C61;
  v4._object = (void *)0xEA0000000000203DLL;
  String.append(_:)(v4);
  return swift_bridgeObjectRelease();
}

uint64_t AllowsHitTestingResponder.__allocating_init(inputs:viewSubgraph:)()
{
  *(_BYTE *)(swift_allocObject() + 208) = 1;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t AllowsHitTestingResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

_UNKNOWN **base witness table accessor for ViewModifier in _AllowsHitTestingModifier()
{
  return &protocol witness table for _AllowsHitTestingModifier;
}

uint64_t storeEnumTagSinglePayload for _AllowsHitTestingModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1872E2A74 + 4 * byte_187C20525[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1872E2AA8 + 4 * byte_187C20520[v4]))();
}

uint64_t sub_1872E2AA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872E2AB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1872E2AB8);
  return result;
}

uint64_t sub_1872E2AC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1872E2ACCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1872E2AD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872E2AD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata completion function for AllowsHitTestingResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for AllowsHitTestingResponder()
{
  return type metadata accessor for AllowsHitTestingResponder();
}

uint64_t sub_1872E2B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _AllowsHitTestingModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t assignWithCopy for AllowsHitTestingFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for AllowsHitTestingFilter(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void *type metadata accessor for AllowsHitTestingFilter()
{
  return &unk_1E1ADAD78;
}

uint64_t partial apply for implicit closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)()
{
  return implicit closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)();
}

uint64_t FocusBridge.host.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - v4;
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)MEMORY[0x18D760234](v1 + 24, v9);

  if (!v12)
  {
    static Log.focus.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      outlined destroy of WeakBox<FocusBridge>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for Logger?, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v5, v6);
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        v21 = swift_slowAlloc();
        v22 = v1;
        v23 = v21;
        *(_DWORD *)v15 = 136315138;
        v20 = v15 + 4;
        v16 = String.init<A>(describing:)();
        v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_186E48000, v13, v14, "Focus bridge %s has no host.", v15, 0xCu);
        v18 = v21;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v18, -1, -1);
        MEMORY[0x18D760108](v15, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    }
  }
  return MEMORY[0x18D760234](v1 + 24);
}

void FocusBridge.moveFocus(to:designatedPlatformResponder:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  id v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  _BYTE v24[48];
  uint64_t v25;
  int v26;
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  FocusBridge.focusedItem.getter((uint64_t)v27);
  outlined init with copy of FocusItem(a1, (uint64_t)v24);
  v6 = specialized static FocusItem.isFocusChange(from:to:)((uint64_t)v27, (uint64_t)v24);
  outlined destroy of FocusItem?((uint64_t)v24);
  outlined destroy of FocusItem?((uint64_t)v27);
  if ((v6 & 1) != 0)
  {
    v7 = FocusBridge.host.getter();
    if (v7)
    {
      v10 = (void *)v7;
      v11 = v8;
      v12 = v9;
      FocusBridge.focusedItem.getter((uint64_t)v27);
      v14 = v31;
      v13 = v32;
      outlined destroy of FocusItem?((uint64_t)v27);
      if (!v14 && v13 == 1)
      {
        if (swift_weakLoadStrong())
        {
          swift_release();
          swift_getObjectType();
          v15 = v10;
          v16 = specialized static FocusBridge.representedFocusItem(_:in:)(a1, v15);

          if (v16)
          {
            if (swift_weakLoadStrong())
            {
              v25 = 0;
              swift_weakInit();
              v26 = 0;
              swift_unknownObjectWeakInit();
              swift_unknownObjectWeakAssign();
              outlined init with take of WeakBox<UIFocusItem>((uint64_t)v27, (uint64_t)v24);
              v24[32] = 1;
              v25 = 0;
              swift_weakAssign();
              v24[33] = 0;
              outlined init with take of FocusItem((uint64_t)v24, (uint64_t)v27);
              FocusBridge.moveFocus(to:designatedPlatformResponder:)(v27, 0);

              swift_unknownObjectRelease();
              swift_release();
              outlined destroy of FocusItem((uint64_t)v27);
            }
            else
            {

              swift_unknownObjectRelease();
            }
            return;
          }
        }
      }
      if ((FocusBridge.canAcceptFocus.getter() & 1) == 0)
        goto LABEL_28;
      v17 = (id)FocusItem.platformResponder.getter();
      if (!v17)
        goto LABEL_16;
      if ((FocusItem.isFocusable.getter() & 1) != 0)
      {
        if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
          goto LABEL_16;
        v18 = UIView.firstFocusableDescendant.getter();
      }
      else
      {
        v18 = 0;
      }

      v17 = v18;
LABEL_16:
      outlined init with copy of FocusItem.Base(a1, (uint64_t)v27);
      v19 = v30;
      outlined destroy of FocusItem.Base((uint64_t)v27);
      if (v19)
      {
        if (!v17)
        {
          outlined init with copy of FocusItem.Base(a1, (uint64_t)v27);
          if (v30 == 1)
          {
            outlined init with take of WeakBox<UIFocusItem>((uint64_t)v27, (uint64_t)v24);
            v20 = MEMORY[0x18D760234](v24);
            outlined destroy of WeakBox<FocusBridge>((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIFocusItem>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIFocusItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
            if (v20)
            {
              *(_QWORD *)(v3 + 160) = v20;
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              objc_msgSend(v10, sel_setNeedsFocusUpdate);
              type metadata accessor for UIFocusSystem();
              swift_unknownObjectRetain();
              v21 = (void *)static UIFocusSystem.focusSystem(for:)();
              swift_unknownObjectRelease();
              if (v21)
              {
                objc_msgSend(v21, sel_requestFocusUpdateToEnvironment_, v10);
                swift_unknownObjectRelease();

              }
              else
              {

                swift_unknownObjectRelease();
              }
              return;
            }
          }
          else
          {
            outlined destroy of FocusItem.Base((uint64_t)v27);
          }
LABEL_28:

          return;
        }
      }
      else
      {
        outlined init with copy of FocusItem(a1, (uint64_t)v27);
        FocusBridge.focusedItem.setter((uint64_t)v27);

        v17 = a2;
        if (!a2)
          v17 = v10;
        v22 = a2;
      }
      v23 = v17;
      swift_allocObject();
      swift_unknownObjectWeakInit();
      v28 = v11;
      v29 = v12;
      swift_unknownObjectWeakInit();
      swift_retain();
      static Update.enqueueAction(_:)();

      swift_release();
      outlined destroy of weak FallbackResponderProvider?((uint64_t)v27);
      swift_release();
    }
  }
}

uint64_t FocusBridge.focusedItem.setter(uint64_t a1)
{
  uint64_t v1;
  BOOL v3;
  _BYTE v5[64];
  _BYTE v6[64];
  _BYTE v7[32];
  __int128 v8;
  uint64_t v9;
  int v10;

  outlined init with copy of FocusItem?(a1, (uint64_t)v7);
  if (*((_QWORD *)&v8 + 1))
    v3 = 0;
  else
    v3 = v9 == 1;
  if (v3)
  {
    outlined destroy of FocusItem?((uint64_t)v7);
    memset(v7, 0, sizeof(v7));
    v8 = 0u;
    v9 = 1;
    v10 = 0;
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v7, (uint64_t)v6);
    outlined init with copy of FocusItem((uint64_t)v6, (uint64_t)v7);
    v10 = static FocusBridge.nextSeedValue++;
    outlined destroy of FocusItem((uint64_t)v6);
  }
  swift_beginAccess();
  outlined init with copy of FocusItem?(v1 + 88, (uint64_t)v6);
  swift_beginAccess();
  outlined assign with copy of FocusItem?((uint64_t)v7, v1 + 88);
  swift_endAccess();
  outlined init with copy of FocusItem?(v1 + 88, (uint64_t)v5);
  FocusBridge.didChangeFocusItem(from:to:)((uint64_t)v6, (uint64_t)v5);
  outlined destroy of FocusItem?((uint64_t)v5);
  outlined destroy of FocusItem?((uint64_t)v7);
  outlined destroy of FocusItem?((uint64_t)v6);
  return outlined destroy of FocusItem?(a1);
}

void FocusBridge.didChangeFocusItem(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(_QWORD);
  void (*v6)(uint64_t);
  id v7;
  _BYTE v8[16];
  void (*v9)(_QWORD);
  char v10;
  _WORD v11[20];
  uint64_t v12;
  uint64_t v13;

  v4 = FocusBridge.host.getter();
  if (v4)
  {
    v7 = (id)v4;
    if ((specialized static FocusItem.isFocusChange(from:to:)(a1, a2) & 1) != 0)
    {
      outlined init with copy of FocusItem?(a1, (uint64_t)v11);
      if (v12 || v13 != 1)
      {
        outlined init with copy of FocusItem.Base((uint64_t)v11, (uint64_t)v8);
        if (v10)
        {
          outlined destroy of FocusItem.Base((uint64_t)v8);
        }
        else
        {
          v5 = v9;
          swift_retain();
          v5(0);
          swift_release_n();
        }
        outlined destroy of FocusItem((uint64_t)v11);
      }
      else
      {
        outlined destroy of FocusItem?((uint64_t)v11);
      }
      outlined init with copy of FocusItem?(a2, (uint64_t)v11);
      if (v12 || v13 != 1)
      {
        outlined init with copy of FocusItem.Base((uint64_t)v11, (uint64_t)v8);
        if (v10)
        {
          outlined destroy of FocusItem.Base((uint64_t)v8);
        }
        else
        {
          v6 = v9;
          swift_retain();
          v6(1);
          swift_release_n();
        }
        outlined destroy of FocusItem((uint64_t)v11);
      }
      else
      {
        outlined destroy of FocusItem?((uint64_t)v11);
      }
      swift_getObjectType();
      v11[0] = 512;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
    else
    {

    }
  }
}

ValueMetadata *type metadata accessor for FocusBridge.Flags()
{
  return &type metadata for FocusBridge.Flags;
}

unint64_t lazy protocol witness table accessor for type FocusBridge.Flags and conformance FocusBridge.Flags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusBridge.Flags, &type metadata for FocusBridge.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusBridge.Flags, &type metadata for FocusBridge.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusBridge.Flags, &type metadata for FocusBridge.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags;
  if (!lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusBridge.Flags, &type metadata for FocusBridge.Flags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusBridge.Flags and conformance FocusBridge.Flags);
  }
  return result;
}

uint64_t outlined init with copy of FocusItem(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for FocusItem(a2, a1);
  return a2;
}

void closure #1 in FocusBridge.moveFocus(to:designatedPlatformResponder:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (void *)MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_becomeFirstResponder);

  }
}

uint64_t outlined init with copy of FocusItem.Base(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for FocusItem.Base(a2, a1);
  return a2;
}

uint64_t outlined destroy of FocusItem.Base(uint64_t a1)
{
  destroy for FocusItem.Base(a1);
  return a1;
}

uint64_t outlined init with take of WeakBox<UIFocusItem>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIFocusItem>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UIFocusItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WeakBox<FocusBridge>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1872E37D4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in FocusBridge.moveFocus(to:designatedPlatformResponder:)()
{
  uint64_t v0;

  closure #1 in FocusBridge.moveFocus(to:designatedPlatformResponder:)(v0);
}

uint64_t outlined assign with copy of FocusItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t WidgetHost.__allocating_init(content:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  swift_allocObject();
  v4 = specialized WidgetHost.init(content:)();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t WidgetHost.init(content:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = specialized WidgetHost.init(content:)();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t WidgetHost.readPreference<A>(_:)()
{
  return WidgetHost.readPreference<A>(_:)();
}

{
  mainThreadPrecondition()();
  swift_getAssociatedTypeWitness();
  return static Update.ensure<A>(_:)();
}

uint64_t WidgetHost.setEnvironment(_:)()
{
  return WidgetHost.setEnvironment(_:)();
}

{
  mainThreadPrecondition()();
  return static Update.ensure<A>(_:)();
}

uint64_t WidgetHost.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t WidgetBundleHost.__allocating_init<A>(bundle:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = specialized WidgetBundleHost.init<A>(bundle:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t WidgetBundleHost.init<A>(bundle:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = specialized WidgetBundleHost.init<A>(bundle:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t WidgetBundleHost.readPreference<A>(_:)()
{
  return WidgetHost.readPreference<A>(_:)();
}

uint64_t closure #1 in WidgetHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void (*v20)(void **, _QWORD);
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v28 = a1;
  v30 = a2;
  swift_getAssociatedTypeWitness();
  v27 = type metadata accessor for PreferenceList.Value();
  v29 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v3);
  v5 = (char *)&v26 - v4;
  v6 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v8 = *(void **)(v6 + 24);
  v9 = *(void **)(v6 + 32);
  v10 = *(_BYTE *)(v6 + 40);
  v11 = *(_BYTE *)(v6 + 41);
  v12 = *(_DWORD *)(v6 + 68);
  v13 = *(_QWORD *)(v6 + 72);
  v14 = *(_DWORD *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 88);
  v16 = *(_QWORD *)(v6 + 112);
  v32 = *(void **)(v6 + 16);
  v7 = v32;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = v11;
  v37 = *(_OWORD *)(v6 + 44);
  v38 = *(_QWORD *)(v6 + 60);
  v39 = v12;
  v40 = v13;
  v41 = v14;
  v42 = v15;
  v43 = *(_OWORD *)(v6 + 96);
  v44 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = (void (*)(void **, _QWORD))GraphHost.Data.hostPreferenceKeys.modify();
  PreferenceKeys.add<A>(_:)();
  v20(&v31, 0);
  v21 = v32;
  v22 = v33;
  v23 = v34;
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  GraphHost.preferenceValues()();
  v31 = v32;
  PreferenceList.subscript.getter();
  swift_release();
  v24 = v27;
  PreferenceList.Value.value.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v24);
  return $defer #1 <A><A1>() in closure #1 in WidgetHost.readPreference<A>(_:)(v28);
}

uint64_t $defer #1 <A><A1>() in closure #1 in WidgetHost.readPreference<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void (*v14)(uint64_t *, _QWORD);
  id v15;
  void *v16;
  void *v17;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  char v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v2 = *(void **)(v1 + 24);
  v3 = *(void **)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  v5 = *(_BYTE *)(v1 + 41);
  v6 = *(_DWORD *)(v1 + 68);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_DWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 112);
  v20 = *(id *)(v1 + 16);
  v21 = v2;
  v22 = v3;
  v23 = v4;
  v24 = v5;
  v25 = *(_OWORD *)(v1 + 44);
  v26 = *(_QWORD *)(v1 + 60);
  v27 = v6;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  v31 = *(_OWORD *)(v1 + 96);
  v32 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = v20;
  v12 = v2;
  v13 = v3;
  v14 = (void (*)(uint64_t *, _QWORD))GraphHost.Data.hostPreferenceKeys.modify();
  PreferenceKeys.remove<A>(_:)();
  v14(&v19, 0);
  v15 = v20;
  v16 = v21;
  v17 = v22;
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t WidgetBundleHost.setEnvironment(_:)()
{
  return WidgetHost.setEnvironment(_:)();
}

void closure #1 in WidgetHost.setEnvironment(_:)()
{
  GraphHost.setEnvironment(_:)();
  GraphHost.setNeedsUpdate(mayDeferUpdate:)(1);
  GraphHost.runTransaction()();
}

uint64_t WidgetHost.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized WidgetHost.init(content:)()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for WidgetGraph();
  static Update.ensure<A>(_:)();
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t partial apply for closure #1 in WidgetHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in WidgetHost.readPreference<A>(_:)(*(_QWORD *)(v1 + 32), a1);
}

void partial apply for closure #1 in WidgetHost.setEnvironment(_:)()
{
  closure #1 in WidgetHost.setEnvironment(_:)();
}

uint64_t specialized WidgetBundleHost.init<A>(bundle:)()
{
  uint64_t v0;
  uint64_t v2;

  type metadata accessor for WidgetGraph();
  static Update.ensure<A>(_:)();
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t type metadata completion function for WidgetHost()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WidgetHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WidgetHost);
}

uint64_t method lookup function for WidgetHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WidgetHost.__allocating_init(content:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for WidgetBundleHost()
{
  return objc_opt_self();
}

uint64_t method lookup function for WidgetBundleHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WidgetBundleHost.__allocating_init<A>(bundle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)(specialized WidgetGraph.__allocating_init<A>(rootBundle:), a1);
}

uint64_t partial apply for closure #1 in WidgetHost.init(content:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)(specialized WidgetGraph.__allocating_init<A>(rootWidget:), a1);
}

uint64_t partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  type metadata accessor for WidgetGraph();
  result = a1(v7, v5, v6);
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in WidgetBundleHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in WidgetHost.readPreference<A>(_:)(a1);
}

void partial apply for closure #1 in WidgetBundleHost.setEnvironment(_:)()
{
  partial apply for closure #1 in WidgetHost.setEnvironment(_:)();
}

void UIKitInspectorBridgeV5.update(presentation:in:transaction:)(uint64_t a1, char *a2)
{
  int v4;

  v4 = *(unsigned __int8 *)(a1 + 104);
  if (v4 != 2 && (v4 & 1) == 0)
  {
    swift_beginAccess();
    PresentationState.dismissInspector()();
    swift_endAccess();
  }
  SheetBridge.update(presentation:in:transaction:)(a1, a2);
}

uint64_t UIKitInspectorBridgeV5.contingentlyPresent(_:from:animated:)(uint64_t result, void *a2, char a3)
{
  int v3;

  v3 = *(unsigned __int8 *)(result + 104);
  if (v3 == 2 || (v3 & 1) != 0)
    return SheetBridge.contingentlyPresent(_:from:animated:)((_QWORD *)result, a2, a3 & 1);
  return result;
}

Swift::Void __swiftcall UIKitInspectorBridgeV5.willTransitionToRegularSizeClass()()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v2[5];
  _BYTE v3[25];
  id v4;
  unsigned __int8 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];

  v1 = v0 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState.Base(v1, (uint64_t)v2);
  if (v5 >= 2u)
  {
    if (v5 == 6)
      outlined destroy of SheetPreference((uint64_t)v2);
    else
      outlined destroy of PresentationState.Base((uint64_t)v2);
  }
  else
  {

    *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)&v3[9];
    v10 = v2[4];
    v11[0] = *(_OWORD *)v3;
    v8 = v2[2];
    v9 = v2[3];
    v6 = v2[0];
    v7 = v2[1];
    *(_OWORD *)&v3[9] = *(_OWORD *)((char *)v11 + 9);
    v5 = 6;
    PresentationState.base.willset((uint64_t)v2);
    outlined assign with take of PresentationState.Base((uint64_t)v2, v1);
  }
  swift_endAccess();
}

uint64_t specialized UIKitInspectorBridgeV5.addPreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized UIKitInspectorBridgeV5.removePreferences(from:)()
{
  GraphHost.removePreference<A>(_:)();
  return GraphHost.removePreference<A>(_:)();
}

uint64_t outlined assign with take of PresentationState.Base(uint64_t a1, uint64_t a2)
{
  assignWithTake for PresentationState.Base(a2, a1);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata accessor for ResponderViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResponderViewModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in ResponderViewModifier<A>()
{
  return &protocol witness table for ResponderViewModifier<A>;
}

double static ResponderViewModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, double *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v10;
  double v11;

  type metadata accessor for DefaultLayoutViewResponder();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DefaultLayoutViewResponder.init(inputs:)();
  type metadata accessor for ResponderViewModifier(255, a1, a2, v5);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v7 = type metadata accessor for ResponderChild(0, a1, a2, v6);
  swift_retain_n();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResponderChild<A>, v7);
  _GraphValue.init<A>(_:)();
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    _ViewOutputs.viewResponders()();
    swift_retain();
    DefaultLayoutResponderFilter.init(children:responder:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _ViewOutputs.subscript.setter();
  }
  swift_release_n();
  *(_QWORD *)a3 = v10;
  result = v11;
  a3[1] = v11;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResponderViewModifier<A>@<D0>(uint64_t a1@<X4>, double *a2@<X8>)
{
  return static ResponderViewModifier._makeView(modifier:inputs:body:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResponderViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResponderViewModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t ResponderChild.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v5)(uint64_t);

  type metadata accessor for ResponderViewModifier(0, a3, a4, a4);
  v5 = *(void (**)(uint64_t))AGGraphGetValue();
  swift_retain();
  v5(a2);
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ResponderChild<A>(uint64_t a1)
{
  unsigned int *v1;

  return ResponderChild.value.getter(*v1, *((_QWORD *)v1 + 1), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t type metadata accessor for ResponderChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ResponderChild);
}

unint64_t lazy protocol witness table accessor for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter;
  if (!lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6328], MEMORY[0x1E0CE6338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter);
  }
  return result;
}

void base witness table accessor for _AttributeBody in ResponderChild<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized LinkShapeStyle._apply(to:)(uint64_t a1)
{
  __n128 v1;
  __n128 v2;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(a1 + 48);
  EnvironmentValues.colorScheme.getter();
  LOBYTE(v4) = 0;
  if (v5 == 1)
  {
    v1.n128_u64[0] = 0x3FA2121212121212;
    v2.n128_u64[0] = 0x3FE0909090909091;
  }
  else
  {
    v2.n128_u64[0] = 0x3FDE9E9E9E9E9E9FLL;
    v1.n128_u64[0] = 0;
  }
  MEMORY[0x18D75B6A4](&v4, v1, v2, 1.0, 1.0);
  Color._apply(to:)();
  return swift_release();
}

ValueMetadata *type metadata accessor for LinkShapeStyle()
{
  return &type metadata for LinkShapeStyle;
}

uint64_t destroy for AccessibilityTableContext(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 4)
    v1 = *(_DWORD *)a1 + 4;
  if (!v1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  char v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 4)
    v3 = *(_DWORD *)a2 + 4;
  switch(v3)
  {
    case 0u:
      v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t))(v4 - 8))(a1);
      *(_BYTE *)(a1 + 40) = 0;
      return a1;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v6 = 1;
      goto LABEL_9;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v6 = 2;
      goto LABEL_9;
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 3;
LABEL_9:
      *(_BYTE *)(a1 + 40) = v6;
      break;
    default:
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityTableContext(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 4)
      v5 = *(_DWORD *)a2 + 4;
    switch(v5)
    {
      case 0u:
        v6 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *a2;
        v9 = 1;
        goto LABEL_14;
      case 2u:
        *(_OWORD *)a1 = *a2;
        v9 = 2;
        goto LABEL_14;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v9 = 3;
LABEL_14:
        *(_BYTE *)(a1 + 40) = v9;
        break;
      default:
        v7 = *a2;
        v8 = a2[1];
        *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  char v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (!v4)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 4)
      v5 = *(_DWORD *)a2 + 4;
    switch(v5)
    {
      case 0u:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_BYTE *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v8 = 1;
        goto LABEL_14;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v8 = 2;
        goto LABEL_14;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = 3;
LABEL_14:
        *(_BYTE *)(a1 + 40) = v8;
        break;
      default:
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityTableContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 5)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccessibilityTableContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AccessibilityTableContext(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityTableContext(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTableContext()
{
  return &type metadata for AccessibilityTableContext;
}

uint64_t ModifiedContent<>.accessibilityTableContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _BYTE v6[48];
  _BYTE v7[48];

  if (*(unsigned __int8 *)(a1 + 40) == 255)
    return ModifiedContent<>.accessibility()(a2, a3);
  result = outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v6, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v6[40] == 255)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of AccessibilityTableContext((uint64_t)v6, (uint64_t)v7);
    lazy protocol witness table accessor for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey();
    ModifiedContent<>.update<A>(_:replacing:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey, (uint64_t)v7, 1, a2, a3);
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)v7, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  }
  return result;
}

uint64_t AccessibilityTableContext.resolve(into:for:)(_QWORD *a1)
{
  uint64_t v1;
  int8x16_t v3;
  uint64_t result;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  char v8;

  outlined init with copy of AccessibilityTableContext(v1, (uint64_t)&v5);
  if (!v8)
  {
    *a1 |= 0x200000000000uLL;
    return outlined destroy of AccessibilityTableContext((uint64_t)&v5);
  }
  if (v8 != 4)
    return outlined destroy of AccessibilityTableContext((uint64_t)&v5);
  v3 = vorrq_s8(v6, v7);
  if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v5)
    return outlined destroy of AccessibilityTableContext((uint64_t)&v5);
  result = AccessibilityNullableOptionSet<>.subscript.getter();
  if (result == 2 || (result & 1) != 0)
    *a1 |= 0x10000uLL;
  return result;
}

uint64_t AccessibilityCollectionViewTableDataSource.rowCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t result;
  _BYTE v6[176];
  _BYTE v7[176];
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v8);
  if (v9)
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v8, (uint64_t)v7);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    outlined init with copy of TableRowList((uint64_t)v7, (uint64_t)v6);
    v1 = outlined destroy of TableDataSourceAdaptor((uint64_t)v7);
    MEMORY[0x1E0C80A78](v1, v2);
    static Update.ensure<A>(_:)();
    outlined destroy of TableRowList((uint64_t)v6);
  }
  else
  {
    outlined destroy of IntelligenceElement?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  }
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v8);
  if (!v9)
  {
    outlined destroy of IntelligenceElement?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    return v10;
  }
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v8, (uint64_t)v7);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  v3 = v7[168];
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v7, (uint64_t)v6);
  if ((v3 & 1) != 0)
  {
    outlined destroy of TableDataSourceAdaptor((uint64_t)v6);
    outlined destroy of TableDataSourceAdaptor((uint64_t)v7);
    return v10;
  }
  v4 = v6[169];
  outlined destroy of TableDataSourceAdaptor((uint64_t)v6);
  outlined destroy of TableDataSourceAdaptor((uint64_t)v7);
  if (v4 == 2)
    return v10;
  result = v10 + 1;
  if (__OFADD__(v10, 1))
    __break(1u);
  return result;
}

BOOL AccessibilityCollectionViewTableDataSource.hasGlobalHeader.getter()
{
  uint64_t v0;
  int v1;
  _BOOL8 v2;
  int v3;
  _BYTE v5[176];
  _BYTE v6[176];
  _BYTE v7[24];
  uint64_t v8;

  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v7);
  if (v8)
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v7, (uint64_t)v6);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    v1 = v6[168];
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v6, (uint64_t)v5);
    if (v1 == 1)
    {
      outlined destroy of TableDataSourceAdaptor((uint64_t)v5);
      v2 = 0;
    }
    else
    {
      v3 = v5[169];
      outlined destroy of TableDataSourceAdaptor((uint64_t)v5);
      v2 = v3 != 2;
    }
    outlined destroy of TableDataSourceAdaptor((uint64_t)v6);
  }
  else
  {
    outlined destroy of IntelligenceElement?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    return 0;
  }
  return v2;
}

uint64_t AccessibilityCollectionViewTableDataSource.columnCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  void (*v10)(uint64_t);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];
  char v21;
  _BYTE v22[48];
  _BYTE v23[48];
  _BYTE v24[128];
  _BYTE v25[24];
  uint64_t v26;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for TableColumnCollection.Entry?, (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v17[-1] - v3;
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v25);
  if (v26)
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v25, (uint64_t)v23);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    v5 = v24[120];
    outlined destroy of TableDataSourceAdaptor((uint64_t)v23);
    if (v5 == 1)
    {
      outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v25);
      if (v26)
      {
        outlined init with copy of TableDataSourceAdaptor((uint64_t)v25, (uint64_t)v23);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
        outlined init with copy of TableColumnCollection((uint64_t)v24, (uint64_t)v22);
        outlined destroy of TableDataSourceAdaptor((uint64_t)v23);
        specialized Collection.first.getter((uint64_t)v4);
        outlined destroy of TableColumnCollection((uint64_t)v22);
        v6 = type metadata accessor for TableColumnCollection.Entry(0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6) != 1)
        {
          outlined destroy of IntelligenceElement?((uint64_t)v4, &lazy cache variable for type metadata for TableColumnCollection.Entry?, (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
          return 1;
        }
      }
      else
      {
        outlined destroy of IntelligenceElement?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
        v14 = type metadata accessor for TableColumnCollection.Entry(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
      }
      v9 = &lazy cache variable for type metadata for TableColumnCollection.Entry?;
      v10 = (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry;
      v11 = v4;
LABEL_15:
      outlined destroy of IntelligenceElement?((uint64_t)v11, v9, v10);
      return 0;
    }
  }
  else
  {
    outlined destroy of IntelligenceElement?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  }
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v25);
  if (!v26)
  {
    v9 = (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?;
    v10 = type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>;
    v11 = v25;
    goto LABEL_15;
  }
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v25, (uint64_t)v23);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  outlined init with copy of TableColumnCollection((uint64_t)v24, (uint64_t)v22);
  outlined destroy of TableDataSourceAdaptor((uint64_t)v23);
  outlined init with copy of TableColumnCollection.Backing((uint64_t)v22, (uint64_t)v20);
  if ((v21 & 1) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)&v20[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v20, (uint64_t)v17);
    v12 = v18;
    v13 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  v7 = specialized RandomAccessCollection<>.distance(from:to:)(0, v8);
  outlined destroy of TableColumnCollection((uint64_t)v22);
  return v7;
}

uint64_t AccessibilityCollectionViewTableAttachment.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *WeakValue;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[5];
  char v28;

  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, a1, a2, a3);
  WeakValue = (_QWORD *)AGGraphGetWeakValue();
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (WeakValue)
  {
    v7 = *WeakValue + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)*WeakValue) + 0x88);
    swift_beginAccess();
    outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>(v7, (uint64_t)&v15);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
  }
  v8 = (_QWORD *)AGGraphGetWeakValue();
  if (v8)
    v9 = MEMORY[0x18D760234](*v8 + *(_QWORD *)((*v6 & *(_QWORD *)*v8) + 0xF8));
  else
    v9 = 0;
  v27[3] = &type metadata for AccessibilityCollectionViewTableDataSource;
  v27[4] = &protocol witness table for AccessibilityCollectionViewTableDataSource;
  v10 = swift_allocObject();
  v27[0] = v10;
  outlined init with take of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)&v15, v10 + 16);
  *(_QWORD *)(v10 + 208) = v9;
  v28 = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v14 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>();
  *((_QWORD *)&v16 + 1) = v11;
  *(_QWORD *)&v17 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>, MEMORY[0x1E0CE6310]);
  *(_QWORD *)&v15 = swift_allocObject();
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v27, v15 + 16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  specialized Dictionary.subscript.setter((uint64_t)&v15, (uint64_t)&type metadata for AccessibilityProperties.TableContextKey);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v27, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v27[0] = v14;
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  v12 = v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = v12;
  *a4 = result;
  a4[1] = 0;
  return result;
}

uint64_t type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>;
  if (!lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>)
  {
    type metadata accessor for SelectionManagerBox<AnyHashable>(255, a2, a3, a4);
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>, (uint64_t (*)(uint64_t))type metadata accessor for SelectionManagerBox<AnyHashable>, (uint64_t)&protocol conformance descriptor for SelectionManagerBox<A>);
    type metadata accessor for UICollectionViewListCoordinator();
  }
  return result;
}

void type metadata accessor for SelectionManagerBox<AnyHashable>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>)
  {
    v4 = type metadata accessor for SelectionManagerBox(0, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>);
  }
}

uint64_t sub_1872E5724()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v0 + 104) & 1) != 0)
      swift_bridgeObjectRelease();
    else
      __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 136))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(v0 + 160))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of ShadowListDataSource<TableDataSourceAdaptor>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>)
  {
    v2 = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    v4 = type metadata accessor for ShadowListDataSource(a1, (uint64_t)&type metadata for TableDataSourceAdaptor, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>);
  }
}

uint64_t sub_1872E58F4()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityCollectionViewTableAttachment@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return AccessibilityCollectionViewTableAttachment.value.getter(a1, a2, a3, a4);
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance AccessibilityRowAccumulator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AccessibilityRowAccumulator.visit<A, B>(rowValue:view:children:traits:)(a3);
}

uint64_t outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AccessibilityTableContext(a2, a1);
  return a2;
}

uint64_t outlined destroy of AccessibilityTableContext(uint64_t a1)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 4)
    v2 = *(_DWORD *)a1 + 4;
  if (!v2)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AccessibilityRowAccumulator()
{
  return &type metadata for AccessibilityRowAccumulator;
}

void destroy for AccessibilityCollectionViewTableDataSource(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a1 + 88) & 1) != 0)
      swift_bridgeObjectRelease();
    else
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 120))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (*(_QWORD *)(a1 + 144))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

uint64_t initializeWithCopy for AccessibilityCollectionViewTableDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  id v20;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v6 = *(_BYTE *)(a2 + 88);
    swift_bridgeObjectRetain();
    if ((v6 & 1) != 0)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
    }
    *(_BYTE *)(a1 + 88) = v6;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    v14 = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    if (v14)
    {
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v14;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v15 = *(_QWORD *)(a2 + 144);
      if (v15)
      {
LABEL_8:
        *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a1 + 144) = v15;
        v16 = *(_QWORD *)(a2 + 160);
        *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 160) = v16;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_11:
        *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
        *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
        v18 = *(_QWORD *)(a2 + 184);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 184) = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      v15 = *(_QWORD *)(a2 + 144);
      if (v15)
        goto LABEL_8;
    }
    v17 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v17;
    goto LABEL_11;
  }
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
LABEL_12:
  v19 = *(void **)(a2 + 192);
  *(_QWORD *)(a1 + 192) = v19;
  v20 = v19;
  return a1;
}

uint64_t assignWithCopy for AccessibilityCollectionViewTableDataSource(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  void *v40;
  id v41;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (!v4)
    {
      v15 = *a2;
      v16 = a2[1];
      v17 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v17;
      *(_OWORD *)a1 = v15;
      *(_OWORD *)(a1 + 16) = v16;
      v18 = a2[4];
      v19 = a2[5];
      v20 = a2[7];
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_OWORD *)(a1 + 112) = v20;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 80) = v19;
      v21 = a2[8];
      v22 = a2[9];
      v23 = a2[11];
      *(_OWORD *)(a1 + 160) = a2[10];
      *(_OWORD *)(a1 + 176) = v23;
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 144) = v22;
      goto LABEL_34;
    }
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    v5 = *((_BYTE *)a2 + 88);
    swift_bridgeObjectRetain();
    if ((v5 & 1) != 0)
    {
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      swift_bridgeObjectRetain();
    }
    else
    {
      v28 = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 72) = v28;
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 48, (uint64_t)(a2 + 3));
    }
    *(_BYTE *)(a1 + 88) = v5;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v29 = *((_QWORD *)a2 + 15);
    swift_bridgeObjectRetain();
    if (v29)
    {
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (*((_QWORD *)a2 + 18))
      {
LABEL_20:
        *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
        *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_24:
        *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
        *(_BYTE *)(a1 + 169) = *((_BYTE *)a2 + 169);
        *(_BYTE *)(a1 + 170) = *((_BYTE *)a2 + 170);
        *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
        *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_34;
      }
    }
    else
    {
      v31 = a2[7];
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      *(_OWORD *)(a1 + 112) = v31;
      if (*((_QWORD *)a2 + 18))
        goto LABEL_20;
    }
    v32 = *(__int128 *)((char *)a2 + 152);
    *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
    *(_OWORD *)(a1 + 152) = v32;
    goto LABEL_24;
  }
  if (v4)
  {
    __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((__int128 *)a1 != a2)
    {
      outlined destroy of TableColumnCollection.Backing(a1 + 48);
      if ((*((_BYTE *)a2 + 88) & 1) != 0)
      {
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        *(_BYTE *)(a1 + 88) = 1;
        swift_bridgeObjectRetain();
      }
      else
      {
        v24 = *((_QWORD *)a2 + 9);
        *(_QWORD *)(a1 + 72) = v24;
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 48, (uint64_t)(a2 + 3));
        *(_BYTE *)(a1 + 88) = 0;
      }
    }
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    v25 = (_OWORD *)(a1 + 112);
    v26 = a2 + 7;
    v27 = *((_QWORD *)a2 + 15);
    if (*(_QWORD *)(a1 + 120))
    {
      if (v27)
      {
        *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 112, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
        v30 = *((_QWORD *)a2 + 16);
        *v25 = *v26;
        *(_QWORD *)(a1 + 128) = v30;
      }
    }
    else if (v27)
    {
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v33 = *v26;
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      *v25 = v33;
    }
    v34 = (_OWORD *)(a1 + 136);
    v35 = (__int128 *)((char *)a2 + 136);
    v36 = *((_QWORD *)a2 + 18);
    if (*(_QWORD *)(a1 + 144))
    {
      if (v36)
      {
        *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of AccessibilityScrollableContext?(a1 + 136, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
        v37 = *(__int128 *)((char *)a2 + 152);
        *v34 = *v35;
        *(_OWORD *)(a1 + 152) = v37;
      }
    }
    else if (v36)
    {
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v38 = *(__int128 *)((char *)a2 + 152);
      *v34 = *v35;
      *(_OWORD *)(a1 + 152) = v38;
    }
    *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
    *(_BYTE *)(a1 + 169) = *((_BYTE *)a2 + 169);
    *(_BYTE *)(a1 + 170) = *((_BYTE *)a2 + 170);
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    v6 = a2[3];
    v8 = *a2;
    v7 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    v9 = a2[7];
    v11 = a2[4];
    v10 = a2[5];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v9;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v10;
    v12 = a2[11];
    v14 = a2[8];
    v13 = a2[9];
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_OWORD *)(a1 + 176) = v12;
    *(_OWORD *)(a1 + 128) = v14;
    *(_OWORD *)(a1 + 144) = v13;
  }
LABEL_34:
  v39 = *(void **)(a1 + 192);
  v40 = (void *)*((_QWORD *)a2 + 24);
  *(_QWORD *)(a1 + 192) = v40;
  v41 = v40;

  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityCollectionViewTableDataSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      v5 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v5;
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        outlined destroy of TableColumnCollection.Backing(a1 + 48);
        v6 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      }
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      if (*(_QWORD *)(a1 + 120))
      {
        if (*(_QWORD *)(a2 + 120))
        {
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
          swift_release();
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
          swift_release();
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 112, (uint64_t (*)(_QWORD))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      }
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
LABEL_12:
      if (*(_QWORD *)(a1 + 144))
      {
        if (*(_QWORD *)(a2 + 144))
        {
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
          swift_release();
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          swift_release();
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
          swift_bridgeObjectRelease();
LABEL_17:
          *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
          *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
          *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
          swift_bridgeObjectRelease();
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        outlined destroy of AccessibilityScrollableContext?(a1 + 136, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      }
      v13 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v13;
      goto LABEL_17;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  }
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
LABEL_18:
  v14 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCollectionViewTableDataSource(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 200))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCollectionViewTableDataSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 200) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCollectionViewTableDataSource()
{
  return &type metadata for AccessibilityCollectionViewTableDataSource;
}

ValueMetadata *type metadata accessor for AccessibilityCollectionViewTableAttachment()
{
  return &type metadata for AccessibilityCollectionViewTableAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityTableSpanPosition()
{
  return &type metadata for AccessibilityTableSpanPosition;
}

ValueMetadata *type metadata accessor for AccessibilityTableCellPosition()
{
  return &type metadata for AccessibilityTableCellPosition;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityCollectionViewTableAttachment, &type metadata for AccessibilityCollectionViewTableAttachment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment);
  }
  return result;
}

uint64_t specialized AccessibilityRowAccumulator.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = v1;
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)&v11, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList);
  if (*((_QWORD *)&v12 + 1))
  {
    v14 = v11;
    v15 = v12;
    v3 = v13;
    v16 = v13;
    v4 = *((_QWORD *)&v12 + 1);
    __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v12 + 1));
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v4, v3);
    v6 = swift_release();
    if (v5)
    {
      v8 = *((_QWORD *)&v15 + 1);
      v9 = v16;
      __swift_project_boxed_opaque_existential_1(&v14, *((uint64_t *)&v15 + 1));
      *v2 += (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    }
    else
    {
      MEMORY[0x1E0C80A78](v6, v7);
      static Update.ensure<A>(_:)();
    }
    outlined destroy of TableRowList((uint64_t)&v14);
  }
  else
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v11, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    ++*v1;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.TableContextKey, &type metadata for AccessibilityProperties.TableContextKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey);
  }
  return result;
}

uint64_t type metadata completion function for AccessibilityFocusStoreLocation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = class metadata base offset for AccessibilityFocusStoreLocation;
  v3 = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    swift_getTupleTypeMetadata2();
    v5 = type metadata accessor for Optional();
    if (v7 > 0x3F)
    {
      return v5;
    }
    else
    {
      type metadata accessor for AccessibilityFocusStore.Entry(255, v3, *(_QWORD *)(v2 + a1 + 8), v6);
      v3 = type metadata accessor for Optional();
      if (v8 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return v3;
}

_QWORD *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI17fg6CSgAA7hi16VyACGIeggr_AcGs5j120OIegnrzr_TR03_s7a4UI35c92FocusStoreListModifierV10ItemFilter33_2CCA6A140D82DC7D61A1924E7705DDD6LLV11updateValueyyFAA7ef7O29AA0C4D11CGAKSgcfu6_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t (*v6)(void);
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE v11[8];
  uint64_t v12;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return (_QWORD *)v3;
    v12 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v12;
    v6 = MEMORY[0x1E0CE77D8];
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x18D75E3BC](v5, a1);
      else
        v7 = *(id *)(a1 + 8 * v5 + 32);
      v8 = v7;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();

      v12 = v3;
      v10 = *(_QWORD *)(v3 + 16);
      v9 = *(_QWORD *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1);
        v3 = v12;
      }
      ++v5;
      *(_QWORD *)(v3 + 16) = v10 + 1;
      outlined init with take of Binding<SearchFieldState>((uint64_t)v11, v3 + 8 * v10 + 32, (uint64_t)&lazy cache variable for type metadata for WeakBox<AccessibilityNode>, (uint64_t)type metadata accessor for AccessibilityNode, (uint64_t)v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      if (v2 == v5)
        return (_QWORD *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static AccessibilityFocusStore.Key.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for AccessibilityFocusStore.Entry(0, a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance AccessibilityFocusStore.Key<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return static AccessibilityFocusStore.Key.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t AccessibilityFocusStore.makeStoreContent(_:)(uint64_t result)
{
  int8x8_t *v1;
  int8x8_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint64_t v7;
  uint64_t *v8;
  int64x2_t v9;
  unint64_t v10;
  int64x2_t v11;
  uint64_t *v12;
  int64x2_t v13;
  uint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int8x8_t v26;
  unint64_t v27;
  char v28;
  __int128 v29;
  void (*v30)(_QWORD, _QWORD, uint64_t *);
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = v1;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = result;
    if (v3 >= 5)
    {
      v7 = *(_QWORD *)(result + 16) & 3;
      if ((v3 & 3) == 0)
        v7 = 4;
      v5 = v3 - v7;
      v8 = (uint64_t *)(result + 144);
      v9 = 0uLL;
      v10 = v5;
      v11 = 0uLL;
      do
      {
        v12 = v8 + 7;
        v13.i64[0] = *(v8 - 14);
        v13.i64[1] = *(v8 - 7);
        v14 = *v8;
        v8 += 28;
        v15.i64[0] = v14;
        v15.i64[1] = *v12;
        v9 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v13, v9), (int8x16_t)v13, (int8x16_t)v9);
        v11 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v15, v11), (int8x16_t)v15, (int8x16_t)v11);
        v10 -= 4;
      }
      while (v10);
      v16 = vbslq_s8((int8x16_t)vcgtq_s64(v9, v11), (int8x16_t)v9, (int8x16_t)v11);
      v17 = vextq_s8(v16, v16, 8uLL).u64[0];
      v6 = vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v18 = v3 - v5;
    v19 = 56 * v5 + 32;
    do
    {
      if (*(_QWORD *)(result + v19) > *(_QWORD *)&v6)
        v6 = *(int8x8_t *)(result + v19);
      v19 += 56;
      --v18;
    }
    while (v18);
    *v1 = v6;
    swift_bridgeObjectRetain();
    v20 = 32;
    v42 = v4;
    while (1)
    {
      v24 = *(_OWORD *)(v4 + v20 + 16);
      v45 = *(_OWORD *)(v4 + v20);
      v46 = v24;
      v47 = *(_OWORD *)(v4 + v20 + 32);
      v48 = *(_QWORD *)(v4 + v20 + 48);
      v25 = *((_QWORD *)&v45 + 1);
      v26 = v2[2];
      if (!*(_QWORD *)(*(_QWORD *)&v26 + 16))
        goto LABEL_20;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(*((uint64_t *)&v45 + 1));
      if ((v28 & 1) != 0)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v26 + 56) + 8 * v27);
        swift_retain();
      }
      else
      {
LABEL_20:
        v44 = 0;
      }
      v29 = v47;
      v30 = (void (*)(_QWORD, _QWORD, uint64_t *))v46;
      outlined retain of AccessibilityFocusStoreList.Item((uint64_t)&v45);
      v30(v29, *((_QWORD *)&v29 + 1), &v44);
      v31 = v44;
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v43 = (_QWORD *)v2[2];
      v2[2] = (int8x8_t)0x8000000000000000;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
      v35 = v43[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        break;
      v38 = v33;
      if (v43[3] >= v37)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_31;
        v34 = v39;
      }
      v4 = v42;
      if ((v38 & 1) != 0)
      {
        v41 = v43[7];
        swift_release();
        *(_QWORD *)(v41 + 8 * v34) = v31;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v34, v25, v31, v43);
      }
      v2[2] = (int8x8_t)v43;
      v21 = swift_bridgeObjectRelease();
      MEMORY[0x1E0C80A78](v21, v22);
      v23 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v23, partial apply for closure #1 in AccessibilityFocusStore.makeStoreContent(_:));
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of AccessibilityFocusStoreList.Item((uint64_t)&v45);
      v20 += 56;
      if (!--v3)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_31:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *v1 = 0;
  }
  return result;
}

uint64_t closure #1 in AccessibilityFocusStore.makeStoreContent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  uint64_t v18;

  v6 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_8;
  }
  else
  {
    v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    if (!*(_QWORD *)(v9 + 16))
    {
LABEL_8:
      v12 = MEMORY[0x1E0DEE9E8];
      goto LABEL_9;
    }
  }
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v11 & 1) == 0)
    goto LABEL_8;
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
LABEL_9:
  v13 = swift_bridgeObjectRetain();
  v14 = specialized Set.union<A>(_:)(v13, v12);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v16 = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, v16);
  *(_QWORD *)(a3 + 8) = v18;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityFocusStoreLocation.wasRead.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v0 + 72));
}

uint64_t AccessibilityFocusStoreLocation.wasRead.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v1 + 72)) = result;
  return result;
}

uint64_t (*AccessibilityFocusStoreLocation.wasRead.modify(uint64_t a1))(uint64_t result)
{
  _QWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)v1
                       + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v1 + 72));
  return AccessibilityFocusStoreLocation.wasRead.modify;
}

uint64_t AccessibilityFocusStoreLocation.wasRead.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result
           + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + **(_QWORD **)result + 72)) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t AccessibilityFocusStoreLocation.getValue(forReading:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v4 = a1;
  v34 = a2;
  v5 = (uint64_t *)(*v2 + class metadata base offset for AccessibilityFocusStoreLocation);
  v6 = *v5;
  v33 = *(_QWORD *)(*v5 - 8);
  MEMORY[0x1E0C80A78](a1, v6);
  v31 = (char *)&v31 - v8;
  v32 = v7;
  v11 = type metadata accessor for AccessibilityFocusStore.Entry(255, v7, *(_QWORD *)(v9 + 8), v10);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v31 - v19;
  type metadata accessor for GraphHost();
  if ((static GraphHost.isUpdating.getter() & 1) != 0 && (v4 & 1) != 0)
    *((_BYTE *)v2 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v2 + 72)) = 1;
  v21 = (char *)v2 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v2 + 56);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  v23 = v22(v20, 1, v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
  if (v23 == 1
    || v3[2] != *(_QWORD *)((char *)v3
                          + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 64)))
  {
    AccessibilityFocusStoreLocation.resolve()(v24, (uint64_t)v16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v21, v16, v12);
    swift_endAccess();
    *(_QWORD *)((char *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 64)) = v3[2];
  }
  v25 = v22(v21, 1, v11);
  v26 = v32;
  if (v25)
  {
    v27 = (char *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 32);
    v28 = 2;
    v29 = v33;
  }
  else
  {
    v29 = v33;
    v27 = v31;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v31, v21, v32);
    v28 = 4;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 8 * v28))(v34, v27, v26);
}

unint64_t AccessibilityFocusStoreLocation.resolve()@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (uint64_t *)(*v2 + class metadata base offset for AccessibilityFocusStoreLocation);
  v5 = *v4;
  v6 = v4[1];
  v7 = type metadata accessor for AccessibilityFocusStore.Entry(0, *v4, v6, a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 1, 1, v7);
  if (*(_QWORD *)(v2[4] + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
    if ((v10 & 1) != 0)
    {
      v11 = type metadata accessor for AccessibilityFocusStore.Key(0, v5, v6, v9);
      MEMORY[0x1E0C80A78](v11, v12);
      swift_retain();
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStore.Key<A>, v11);
      PropertyList.forEach<A>(keyType:_:)();
      return swift_release();
    }
  }
  return result;
}

uint64_t AccessibilityFocusStoreLocation.get()@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityFocusStoreLocation.getValue(forReading:)(0, a1);
}

BOOL AccessibilityFocusStoreLocation.update()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  void (*v21)(uint64_t, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v28 = a1;
  v31 = *MEMORY[0x1E0C80C00];
  v3 = *v2;
  v4 = (uint64_t *)(*v2 + class metadata base offset for AccessibilityFocusStoreLocation);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v28 - v7;
  v9 = type metadata accessor for Optional();
  v29 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v28 - v15;
  v17 = (char *)v2 + v4[7];
  swift_beginAccess();
  v19 = type metadata accessor for AccessibilityFocusStore.Entry(0, v5, *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + v3 + 8), v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v17, 1, v19))
  {
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v20(v16, 1, 1, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v16, v17, v5);
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v20(v16, 0, 1, v5);
  }
  AccessibilityFocusStoreLocation.getValue(forReading:)(0, (uint64_t)v8);
  v21 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 16);
  v21(v28, v8, v5);
  v21((uint64_t)v12, v8, v5);
  v22 = ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v20)(v12, 0, 1, v5);
  MEMORY[0x1E0C80A78](v22, v23);
  *(&v28 - 4) = v9;
  *(&v28 - 3) = (uint64_t)v12;
  *((_DWORD *)&v28 - 4) = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v28 - 6), v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v24);
  v25 = v30;
  v26 = *(void (**)(char *, uint64_t))(v29 + 8);
  v26(v12, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v26(v16, v9);
  return (v25 & 1) == 0;
}

uint64_t AccessibilityFocusStoreLocation.deferUpdate(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v3 = *(_QWORD *)(*v1 + class metadata base offset for AccessibilityFocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)&v14 - v9;
  v11 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(v3 - 8) + 16))((char *)&v14 - v9, a1, v3, v8);
  *(_QWORD *)&v10[v11] = *(_QWORD *)((char *)v1
                                   + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation
                                               + *v1
                                               + 64));
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v10, 0, 1, TupleTypeMetadata2);
  v12 = (char *)v1 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v1 + 48);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v12, v10, v5);
  return swift_endAccess();
}

Swift::Void __swiftcall AccessibilityFocusStoreLocation.performDeferredUpdate()()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;

  v1 = (uint64_t *)(*v0 + class metadata base offset for AccessibilityFocusStoreLocation);
  v2 = *v1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v26 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - v10;
  v25 = v2;
  v12 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - v15;
  v17 = (char *)v0 + v1[6];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v17, v4);
  v18 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  }
  else
  {
    v19 = *(_QWORD *)&v11[*(int *)(TupleTypeMetadata2 + 48)];
    v20 = v11;
    v21 = v25;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v20, v25);
    if (v19)
      v22 = v19 == *(_QWORD *)((char *)v0
                             + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v0 + 64));
    else
      v22 = 1;
    if (v22)
    {
      v23 = static Transaction.current.getter();
      AccessibilityFocusStoreLocation.set(_:transaction:)((uint64_t)v16, v23);
      swift_release();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v21);
      return;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v21);
  }
  v24 = v26;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v26, 1, 1, TupleTypeMetadata2);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v17, v24, v4);
  swift_endAccess();
}

uint64_t AccessibilityFocusStoreLocation.set(_:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + class metadata base offset for AccessibilityFocusStoreLocation);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v2 + 5, a2);
  v8 = (char *)&v13 - v7;
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    v11 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = (char *)swift_allocObject();
    *((_QWORD *)v12 + 2) = v5;
    *((_QWORD *)v12 + 3) = *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + v4 + 8);
    *((_QWORD *)v12 + 4) = v10;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v12[v11], v8, v5);
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in AccessibilityFocusStoreLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t Strong;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  BOOL v36;
  char *v37;
  void *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned __int8 v48[9];
  char v49[24];

  v47 = a2;
  v4 = type metadata accessor for AccessibilityFocusStore.Entry(255, a3, a4, a4);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v42 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v46 = (char *)&v42 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v42 - v18;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return;
  v21 = (_QWORD *)Strong;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v19, 1, 1, TupleTypeMetadata2);
  v22 = (char *)v21 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v21 + 48);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v22, v19, v15);
  swift_endAccess();
  v23 = v47;
  AccessibilityFocusStoreLocation.find(for:)(v24, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    AccessibilityFocusStoreLocation.deferUpdate(_:)(v23);
LABEL_26:
    swift_release();
    return;
  }
  v25 = v10;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v46, v9, v4);
  v26 = swift_bridgeObjectRetain();
  v27 = specialized Sequence.compactMap<A>(_:)(v26);
  swift_bridgeObjectRelease();
  v45 = v4;
  if (v27 >> 62)
    goto LABEL_34;
  v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v28)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v46, v45);
    goto LABEL_26;
  }
LABEL_6:
  v29 = v27 & 0xC000000000000001;
  v30 = 4;
  do
  {
    if (v29)
      v31 = (char *)MEMORY[0x18D75E3BC](v30 - 4, v27);
    else
      v31 = (char *)*(id *)(v27 + 8 * v30);
    v32 = v31;
    v33 = v30 - 3;
    if (__OFADD__(v30 - 4, 1))
    {
      __break(1u);
LABEL_34:
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter();
      if (!v28)
        goto LABEL_25;
      goto LABEL_6;
    }
    v48[0] = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v48, v49);
    if (v49[0] != 3)
    {
      swift_bridgeObjectRelease_n();
LABEL_29:
      AccessibilityNode.platformElement.getter();
      v40 = v45;
      if (!v39)
        v39 = v32;
      v41 = v39;
      *(_WORD *)v49 = *(_WORD *)((char *)v21
                               + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v21 + 40));
      specialized static AccessibilityFocus.move(to:for:)(v39, v49);
      swift_release();

      (*(void (**)(char *, uint64_t))(v25 + 8))(v46, v40);
      return;
    }

    ++v30;
  }
  while (v33 != v28);
  v43 = v27 + 32;
  swift_bridgeObjectRelease();
  v47 = v27 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v34 = 0;
  v44 = v25;
  while (v29)
  {
    v35 = (id)MEMORY[0x18D75E3BC](v34, v27);
    v36 = __OFADD__(v34++, 1);
    if (v36)
      goto LABEL_36;
LABEL_20:
    v37 = (char *)v35;
    v48[0] = 4;
    v32 = v37;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v48, v49);
    if (v49[0] != 3)
    {
LABEL_28:
      swift_bridgeObjectRelease_n();

      v25 = v44;
      goto LABEL_29;
    }
    while (1)
    {
      v38 = (void *)MEMORY[0x18D760234](&v32[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

      if (!v38)
        break;
      v32 = v38;
      v48[0] = 4;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v48, v49);
      if (v49[0] != 3)
        goto LABEL_28;
    }

    v25 = v44;
    if (v34 == v28)
      goto LABEL_25;
  }
  if (v34 >= *(_QWORD *)(v47 + 16))
    goto LABEL_37;
  v35 = *(id *)(v43 + 8 * v34);
  v36 = __OFADD__(v34++, 1);
  if (!v36)
    goto LABEL_20;
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

unint64_t AccessibilityFocusStoreLocation.find(for:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (uint64_t *)(*v2 + class metadata base offset for AccessibilityFocusStoreLocation);
  v5 = *v4;
  v6 = v4[1];
  v7 = type metadata accessor for AccessibilityFocusStore.Entry(0, *v4, v6, a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 1, 1, v7);
  if (*(_QWORD *)(v2[4] + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
    if ((v10 & 1) != 0)
    {
      v11 = type metadata accessor for AccessibilityFocusStore.Key(0, v5, v6, v9);
      MEMORY[0x1E0C80A78](v11, v12);
      swift_retain();
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStore.Key<A>, v11);
      PropertyList.forEach<A>(keyType:_:)();
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in AccessibilityFocusStoreLocation.find(for:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v22 = a4;
  v23 = a2;
  v7 = type metadata accessor for AccessibilityFocusStore.Entry(255, a5, a6, a4);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, a1, v8, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v20(v18, v12, v7);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v7);
  v21 = v22;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v22, v8);
  v20((char *)v21, v18, v7);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v7);
  *v23 = 1;
  return result;
}

uint64_t closure #1 in AccessibilityFocusStoreLocation.resolve()(uint64_t a1, _BYTE *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  _BYTE *v35;

  v34 = a4;
  v35 = a2;
  v6 = type metadata accessor for AccessibilityFocusStore.Entry(255, *(_QWORD *)(*a3 + class metadata base offset for AccessibilityFocusStoreLocation), *(_QWORD *)(*a3 + class metadata base offset for AccessibilityFocusStoreLocation + 8), a4);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v32 - v14;
  v16 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v32 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v15, a1, v7, v23);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v26(v15, 1, v6) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  v28 = v15;
  v29 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v29(v25, v28, v6);
  find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(0, a3, (uint64_t)v25, (uint64_t)v11);
  if (v26(v11, 1, v6) == 1
    && (v33 = *(void (**)(char *, uint64_t))(v8 + 8),
        v33(v11, v7),
        find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(1, a3, (uint64_t)v25, (uint64_t)v11),
        v26(v11, 1, v6) == 1)
    && (v33(v11, v7),
        find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(2, a3, (uint64_t)v25, (uint64_t)v11),
        v26(v11, 1, v6) == 1)
    && (v33(v11, v7),
        find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(3, a3, (uint64_t)v25, (uint64_t)v11),
        v26(v11, 1, v6) == 1))
  {
    v33(v11, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v25, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v6);
    v29(v20, v11, v6);
    v30 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v31 = v34;
    v30(v34, v7);
    v29((char *)v31, v20, v6);
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v31, 0, 1, v6);
    *v35 = 1;
  }
  return result;
}

uint64_t find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  Swift::UInt v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = *a2;
  v6 = a2[3];
  v7 = *(_WORD *)((char *)a2 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *a2 + 40));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = AccessibilityTechnologySet.list.getter(v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = MEMORY[0x1E0DEE9E8];
    v12 = MEMORY[0x1E0DEE9E8];
    while (1)
    {
      v14 = v12;
      if (*(_QWORD *)(v6 + 16))
      {
        v15 = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(v8 + v10 + 32));
        v13 = v11;
        if ((v16 & 1) == 0)
          goto LABEL_4;
        v17 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v15);
        if (*(_QWORD *)(v17 + 16))
        {
          v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
          v13 = v11;
          if ((v19 & 1) != 0)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
            swift_bridgeObjectRetain();
          }
          goto LABEL_4;
        }
      }
      v13 = v11;
LABEL_4:
      ++v10;
      swift_bridgeObjectRetain();
      v12 = specialized Set.union<A>(_:)(v13, v14);
      swift_bridgeObjectRelease();
      if (v9 == v10)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease_n();
        goto LABEL_12;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v12 = MEMORY[0x1E0DEE9E8];
LABEL_12:
  v22 = 0;
  v23 = v12 + 56;
  v24 = 1 << *(_BYTE *)(v12 + 32);
  if (v24 < 64)
    v25 = ~(-1 << v24);
  else
    v25 = -1;
  v26 = v25 & *(_QWORD *)(v12 + 56);
  v27 = (unint64_t)(v24 + 63) >> 6;
  while (1)
  {
    if (v26)
    {
      v28 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v29 = v28 | (v22 << 6);
      goto LABEL_32;
    }
    v30 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v30 >= v27)
      goto LABEL_40;
    v31 = *(_QWORD *)(v23 + 8 * v30);
    ++v22;
    if (!v31)
    {
      v22 = v30 + 1;
      if (v30 + 1 >= v27)
        goto LABEL_40;
      v31 = *(_QWORD *)(v23 + 8 * v22);
      if (!v31)
      {
        v22 = v30 + 2;
        if (v30 + 2 >= v27)
          goto LABEL_40;
        v31 = *(_QWORD *)(v23 + 8 * v22);
        if (!v31)
          break;
      }
    }
LABEL_31:
    v26 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v22 << 6);
LABEL_32:
    v33 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v29);
    result = type metadata accessor for AccessibilityFocusStore.Entry(0, *(_QWORD *)(v5 + class metadata base offset for AccessibilityFocusStoreLocation), *(_QWORD *)(v5 + class metadata base offset for AccessibilityFocusStoreLocation + 8), v21);
    v34 = *(_QWORD *)(a3 + *(int *)(result + 40));
    if (*(_QWORD *)(v34 + 16))
    {
      v35 = result;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v33);
      result = Hasher._finalize()();
      v36 = -1 << *(_BYTE *)(v34 + 32);
      v37 = result & ~v36;
      if (((*(_QWORD *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
      {
        v38 = *(_QWORD *)(v34 + 48);
        if (*(_QWORD *)(v38 + 8 * v37) == v33)
        {
LABEL_38:
          swift_release();
          v40 = *(_QWORD *)(v35 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(a4, a3, v35);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(a4, 0, 1, v35);
        }
        v39 = ~v36;
        while (1)
        {
          v37 = (v37 + 1) & v39;
          if (((*(_QWORD *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
            break;
          if (*(_QWORD *)(v38 + 8 * v37) == v33)
            goto LABEL_38;
        }
      }
    }
  }
  v32 = v30 + 3;
  if (v32 >= v27)
  {
LABEL_40:
    swift_release();
    v42 = type metadata accessor for AccessibilityFocusStore.Entry(0, *(_QWORD *)(v5 + class metadata base offset for AccessibilityFocusStoreLocation), *(_QWORD *)(v5 + class metadata base offset for AccessibilityFocusStoreLocation + 8), v41);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a4, 1, 1, v42);
  }
  v31 = *(_QWORD *)(v23 + 8 * v32);
  if (v31)
  {
    v22 = v32;
    goto LABEL_31;
  }
  while (1)
  {
    v22 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v22 >= v27)
      goto LABEL_40;
    v31 = *(_QWORD *)(v23 + 8 * v22);
    ++v32;
    if (v31)
      goto LABEL_31;
  }
LABEL_42:
  __break(1u);
  return result;
}

void AccessibilityFocusStoreLocation.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t AccessibilityFocusStoreLocation.__ivar_destroyer()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  v2 = *(_QWORD *)(v1 + class metadata base offset for AccessibilityFocusStoreLocation);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(&v0[*(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *(_QWORD *)v0 + 32)], v2);
  v3 = &v0[*(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *(_QWORD *)v0 + 48)];
  swift_getTupleTypeMetadata2();
  v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = &v0[*(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *(_QWORD *)v0 + 56)];
  type metadata accessor for AccessibilityFocusStore.Entry(255, v2, *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + v1 + 8), v6);
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
}

char *AccessibilityFocusStoreLocation.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  v2 = (char *)AnyLocation.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  v3 = *(_QWORD *)(v1 + class metadata base offset for AccessibilityFocusStoreLocation);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(&v2[*(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *(_QWORD *)v2 + 32)], v3);
  v4 = &v2[*(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *(_QWORD *)v2 + 48)];
  swift_getTupleTypeMetadata2();
  v5 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = &v2[*(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *(_QWORD *)v2 + 56)];
  type metadata accessor for AccessibilityFocusStore.Entry(255, v3, *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + v1 + 8), v7);
  v8 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  return v2;
}

uint64_t AccessibilityFocusStoreLocation.__deallocating_deinit()
{
  AccessibilityFocusStoreLocation.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessibilityFocusStoreLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusStoreLocation);
}

uint64_t type metadata accessor for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusStore.Entry);
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityFocusStore.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    *v10 = *v11;
    *(_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t initializeWithTake for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  *(_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusStore.Entry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1872E8D2C + 4 * byte_187C20D60[v10]))();
  }
}

void storeEnumTagSinglePayload for AccessibilityFocusStore.Entry(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1872E8EAC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1872E8F20);
}

void sub_1872E8EB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1872E8EBCLL);
  JUMPOUT(0x1872E8F20);
}

void sub_1872E8EFC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872E8F20);
}

void sub_1872E8F04()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1872E8F20);
}

uint64_t sub_1872E8F0C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x1872E8F20);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x1872E8F1CLL);
    JUMPOUT(0x1872E8F18);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

_QWORD *assignWithCopy for AccessibilityFocusStore(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityFocusStore(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreList.Key()
{
  return &type metadata for AccessibilityFocusStoreList.Key;
}

uint64_t protocol witness for Location.wasRead.getter in conformance AccessibilityFocusStoreLocation<A>()
{
  return AccessibilityFocusStoreLocation.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1)
{
  return AccessibilityFocusStoreLocation.wasRead.setter(a1);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1))(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = AccessibilityFocusStoreLocation.wasRead.getter() & 1;
  return protocol witness for Location.wasRead.modify in conformance AccessibilityFocusStoreLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1)
{
  return AccessibilityFocusStoreLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t protocol witness for Location.get() in conformance AccessibilityFocusStoreLocation<A>@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityFocusStoreLocation.get()(a1);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1, uint64_t a2)
{
  return AccessibilityFocusStoreLocation.set(_:transaction:)(a1, a2);
}

BOOL protocol witness for Location.update() in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1, uint64_t a2)
{
  return AccessibilityFocusStoreLocation.update()(a1, a2);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AccessibilityFocusStoreList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t (*AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v8 + v7, a1, a2);
  return partial apply for closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:);
}

uint64_t closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AccessibilityFocusStore.Entry(255, v15, v16, v14);
  v18 = type metadata accessor for Optional();
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v28 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a4, a5, v20);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v22, v13, a5);
  v24 = type metadata accessor for AccessibilityFocusStore.Entry(0, a5, a6, v23);
  *(_QWORD *)&v22[*(int *)(v24 + 36)] = a1;
  *(_QWORD *)&v22[*(int *)(v24 + 40)] = a2;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v22, 0, 1, v17);
  v26 = type metadata accessor for AccessibilityFocusStore.Key(0, a5, a6, v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStore.Key<A>, v26);
  return PropertyList.subscript.setter();
}

uint64_t AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _QWORD *Value;
  uint64_t v5;

  result = HIDWORD(a1);
  if (*MEMORY[0x1E0CFED28] == (_DWORD)result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    Value = (_QWORD *)AGGraphGetValue();
    v5 = Value[1];
    *a2 = *Value;
    a2[1] = v5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AccessibilityFocusStoreListModifier.ItemFilter.updateValue()(uint64_t a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *Value;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t);
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char **v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  id v34;
  char *v35;
  unint64_t v36;
  char *v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  id v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  int v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v122;
  char v123;
  void *v124;
  char v125;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE v147[4];
  _BOOL4 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  char *v165;
  unint64_t v166;
  int v167;
  unint64_t v168;
  int v169;
  unint64_t *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  void *v180;
  char v181[8];
  _OWORD v182[2];
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = &v147[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(char **)(v7 + 24);
  v10 = type metadata accessor for AccessibilityFocusStoreListModifier(0, v3, (uint64_t)v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v147[-v13];
  Value = (_BYTE *)AGGraphGetValue();
  v16 = MEMORY[0x1E0DEE9D8];
  if ((*Value & 1) == 0)
  {
    v183 = (void *)MEMORY[0x1E0DEE9D8];
    return AGGraphSetOutputValue();
  }
  v152 = v6;
  v153 = v4;
  v170 = v2;
  v17 = v2;
  v18 = v3;
  v19 = *v17;
  v20 = v170[3];
  v21 = AGGraphGetValue();
  v149 = v22;
  v156 = v11;
  v23 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16);
  v155 = v10;
  v23(v14, v21, v10);
  v154 = v18;
  AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(v19, &v183);
  if (v183)
    v16 = (unint64_t)v183;
  swift_bridgeObjectRetain();
  v24 = swift_bridgeObjectRetain();
  v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d69UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateValueyyFAA8h7IDVAA17fG53Ccfu_33_2f504ee4f610784b00e9281caac81f7cAiGTf3nnnpk_nTf1cn_n(v24);
  v151 = 0;
  v26 = (char *)v170;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((_QWORD *)v26 + 3) = v25;
  v148 = specialized static Array<A>.== infix(_:_:)((uint64_t)v25, v20);
  swift_bridgeObjectRelease();
  if (one-time initialization token for focusSupportingTechnologies != -1)
    goto LABEL_166;
LABEL_5:
  v27 = static AccessibilityTechnology.focusSupportingTechnologies;
  v158 = *(_QWORD *)(static AccessibilityTechnology.focusSupportingTechnologies + 16);
  if (!v158)
  {
LABEL_148:
    v127 = MEMORY[0x1E0DEE9E0];
    goto LABEL_149;
  }
  v163 = v16 & 0xFFFFFFFFFFFFFF8;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v171 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v171 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v28 = 0;
  v160 = v27 + 32;
  v168 = v16 & 0xC000000000000001;
  v162 = v16 + 32;
  v159 = MEMORY[0x1E0DEE9E0];
  v167 = *MEMORY[0x1E0CFED28];
  v29 = &selRef_setSensitive_;
  v179 = MEMORY[0x1E0DEE9B8] + 8;
  v166 = v16;
  v164 = v14;
  v157 = v27;
  v165 = v8;
  while (1)
  {
    if (v28 >= *(_QWORD *)(v27 + 16))
      goto LABEL_165;
    v161 = v28;
    v30 = *(unsigned __int8 *)(v160 + v28);
    if (v171)
      break;
LABEL_138:
    v117 = v159;
    v118 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
    if ((v119 & 1) != 0)
    {
      v120 = v118;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v183 = (void *)v117;
      v122 = v117;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v122 = (uint64_t)v183;
      }
      v159 = v122;
      specialized _NativeDictionary._delete(at:)(v120, v122);
LABEL_143:
      swift_bridgeObjectRelease();
    }
    v28 = v161 + 1;
    v27 = v157;
    if (v161 + 1 == v158)
      goto LABEL_158;
  }
  v31 = 1 << (v30 & 0xF);
  v150 = *(unsigned __int8 *)(v160 + v28);
  if (v30 >= 0x10)
    v31 = 0;
  v169 = v31;
  swift_bridgeObjectRetain();
  v32 = 0;
  v33 = 4;
  while (1)
  {
    v174 = v33;
    if (v168)
    {
      v36 = v32;
      v37 = (char *)MEMORY[0x18D75E3BC](v32, v16);
      v38 = __OFADD__(v36, 1);
      v39 = v36 + 1;
      if (v38)
        goto LABEL_160;
    }
    else
    {
      if (v32 >= *(_QWORD *)(v163 + 16))
        goto LABEL_161;
      v40 = v32;
      v37 = (char *)*(id *)(v162 + 8 * v32);
      v38 = __OFADD__(v40, 1);
      v39 = v40 + 1;
      if (v38)
        goto LABEL_160;
    }
    v175 = v37;
    v173 = v39;
    if (v167 == *((_DWORD *)v26 + 2) || (v41 = *(_QWORD *)AGGraphGetValue(), swift_bridgeObjectRetain(), !v41))
    {
      v42 = MEMORY[0x1E0DEE9D8];
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      v41 = specialized Dictionary.init(dictionaryLiteral:)(v42);
    }
    if (one-time initialization token for focusSupportingTechnologies != -1)
      swift_once();
    v43 = AccessibilityTechnologySet.list.getter(static AccessibilityTechnologies.focusSupportingTechnologies & (unsigned __int16)v169);
    v44 = v43;
    v178 = *(_BYTE **)(v43 + 16);
    if (v178)
      break;
    swift_bridgeObjectRetain();
    v34 = v175;
    v35 = v175;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();

    v33 = v174;
    v32 = v173;
LABEL_16:
    if (v32 == v171)
    {
      v123 = v33;
      swift_bridgeObjectRelease();
      LOBYTE(v30) = v150;
      if (v33 == 4)
        goto LABEL_138;
LABEL_142:
      v124 = (void *)v159;
      v125 = swift_isUniquelyReferenced_nonNull_native();
      v183 = v124;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v30, v125);
      v159 = (unint64_t)v183;
      goto LABEL_143;
    }
  }
  v45 = v175;
  v26 = &v175[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  v177 = v43 + 32;
  swift_bridgeObjectRetain();
  v46 = v45;
  swift_beginAccess();
  v14 = 0;
  v172 = v41;
  v176 = v44;
  while (1)
  {
    if (*(_QWORD *)(v41 + 16))
    {
      v47 = specialized __RawDictionaryStorage.find<A>(_:)(v14[v177]);
      if ((v48 & 1) != 0)
        break;
    }
LABEL_33:
    if (++v14 == v178)
      goto LABEL_125;
  }
  outlined init with copy of AccessibilityFocus.Target(*(_QWORD *)(v41 + 56) + 8 * v47, (uint64_t)&v183);
  outlined init with take of AccessibilityFocus.Target((uint64_t)&v183, (uint64_t)v181);
  v49 = MEMORY[0x18D760234](v181);
  if (v49)
  {
    v50 = (void *)v49;
    type metadata accessor for AccessibilityNode();
    v51 = (id)swift_dynamicCastClass();
    swift_bridgeObjectRetain();
    if (v51)
    {
      outlined init with copy of AccessibilityFocus.Target((uint64_t)v181, (uint64_t)&v183);
      outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
      goto LABEL_43;
    }

  }
  else
  {
    swift_bridgeObjectRetain();
  }
  outlined init with copy of AccessibilityFocus.Target((uint64_t)v181, (uint64_t)&v183);
  v52 = (void *)MEMORY[0x18D760234](&v183);
  if (!v52)
  {
    outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
    goto LABEL_46;
  }
  v53 = v52;
  v51 = objc_msgSend(v52, v29[364]);

  outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
  if (!v51)
    goto LABEL_46;
LABEL_43:
  type metadata accessor for AccessibilityNode();
  v54 = v46;
  v55 = v51;
  v56 = static NSObject.== infix(_:_:)();

  if ((v56 & 1) != 0)
    goto LABEL_124;
LABEL_46:
  v57 = *(_QWORD *)v26;
  v58 = *(_QWORD *)(*(_QWORD *)v26 + 16);
  if (!v58)
  {
    swift_bridgeObjectRetain();
LABEL_58:
    swift_bridgeObjectRelease();
    v44 = v176;
    goto LABEL_59;
  }
  swift_bridgeObjectRetain();
  v59 = (uint64_t *)(v57 + 40 * v58);
  while (v58 <= *(_QWORD *)(v57 + 16))
  {
    v60 = *v59;
    v183 = (void *)*(v59 - 1);
    v184 = v60;
    v61 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v61)
    {
      if (v58 > *(_QWORD *)(v57 + 16))
        goto LABEL_162;
      v62 = *v59;
      v183 = (void *)*(v59 - 1);
      v184 = v62;
      v63 = AccessibilityAttachment.platformElement.getter();
      if (!v63)
        goto LABEL_170;
      v64 = (void *)v63;
      swift_bridgeObjectRelease();
      v65 = (void *)MEMORY[0x18D760234](v181);
      v44 = v176;
      if (v65)
      {
        v66 = v65;

        if (v66 == v64)
          goto LABEL_124;
      }
      else
      {

      }
LABEL_59:
      v67 = MEMORY[0x18D760234](v181);
      if (v67)
      {
        v68 = (void *)v67;
        type metadata accessor for AccessibilityNode();
        v69 = swift_dynamicCastClass();
        if (v69)
        {
          v70 = (id)v69;
          outlined init with copy of AccessibilityFocus.Target((uint64_t)v181, (uint64_t)&v183);
          outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
LABEL_71:
          type metadata accessor for NSObject();
          v77 = static NSObject.== infix(_:_:)();

          if ((v77 & 1) != 0)
            goto LABEL_124;
          goto LABEL_72;
        }

      }
      outlined init with copy of AccessibilityFocus.Target((uint64_t)v181, (uint64_t)&v183);
      v71 = (void *)MEMORY[0x18D760234](&v183);
      if (v71)
      {
        v72 = v71;
        v70 = objc_msgSend(v71, v29[364]);

        outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
        if (v70)
          goto LABEL_71;
      }
      else
      {
        outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
      }
      v73 = MEMORY[0x18D760234](v181);
      if (v73)
      {
        v74 = (void *)v73;
        swift_getObjectType();
        v75 = objc_msgSend(v74, v29[364]);
        if (v75)
        {
          v70 = v75;

          goto LABEL_71;
        }
        v183 = 0;
        MEMORY[0x1E0C80A78](0, v76);
        *(_QWORD *)&v147[-16] = &v183;
        PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getterpartial apply);

        v70 = v183;
        if (v183)
          goto LABEL_71;
      }
LABEL_72:
      v78 = MEMORY[0x18D760234](v181);
      if (v78)
      {
        v79 = (void *)v78;
        type metadata accessor for AccessibilityNode();
        v80 = swift_dynamicCastClass();
        if (v80)
        {
          v81 = (id)v80;
          outlined init with copy of AccessibilityFocus.Target((uint64_t)v181, (uint64_t)&v183);
          outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
          goto LABEL_84;
        }

      }
      outlined init with copy of AccessibilityFocus.Target((uint64_t)v181, (uint64_t)&v183);
      v82 = (void *)MEMORY[0x18D760234](&v183);
      if (!v82)
      {
        outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
        goto LABEL_80;
      }
      v83 = v82;
      v81 = objc_msgSend(v82, v29[364]);

      outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
      if (v81)
        goto LABEL_84;
LABEL_80:
      v84 = MEMORY[0x18D760234](v181);
      if (!v84)
        goto LABEL_120;
      v85 = (void *)v84;
      swift_getObjectType();
      v86 = objc_msgSend(v85, v29[364]);
      if (v86)
      {
        v81 = v86;

        goto LABEL_84;
      }
      v183 = 0;
      MEMORY[0x1E0C80A78](0, v87);
      *(_QWORD *)&v147[-16] = &v183;
      PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)((uint64_t (*)(void))partial apply for closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter);

      v81 = v183;
      if (!v183)
      {
LABEL_120:
        v41 = v172;
LABEL_32:
        outlined destroy of AccessibilityFocus.Target((uint64_t)v181);
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
LABEL_84:
      v88 = v46;
      v89 = *(_QWORD *)v26;
      v90 = *(_QWORD *)(*(_QWORD *)v26 + 16);
      if (v90)
      {
        v91 = v81;
        swift_bridgeObjectRetain();
        v92 = (uint64_t *)(v89 + 40 * v90);
        while (1)
        {
          if (v90 > *(_QWORD *)(v89 + 16))
            goto LABEL_157;
          v93 = *v92;
          v183 = (void *)*(v92 - 1);
          v184 = v93;
          v94 = (void *)AccessibilityAttachment.platformElement.getter();

          if (v94)
            break;
          v92 -= 5;
          if (!--v90)
            goto LABEL_94;
        }
        if (v90 > *(_QWORD *)(v89 + 16))
          goto LABEL_164;
        v96 = *v92;
        v183 = (void *)*(v92 - 1);
        v184 = v96;
        v97 = AccessibilityAttachment.platformElement.getter();
        if (!v97)
          goto LABEL_171;
        v98 = (id)v97;
        swift_bridgeObjectRelease();
        v46 = v88;
      }
      else
      {
        v95 = v81;
        swift_bridgeObjectRetain();
LABEL_94:
        swift_bridgeObjectRelease();
        v46 = v88;
        v98 = v88;
      }

      if (v81 != v98)
      {
        v8 = sel_accessibilityContainer;
        v99 = v81;
        while (1)
        {
          if (objc_msgSend(v99, sel_respondsToSelector_, sel_accessibilityContainer))
          {
            if (objc_msgSend(v99, sel_accessibilityContainer))
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              memset(v182, 0, sizeof(v182));
            }
            outlined init with take of Binding<SearchFieldState>((uint64_t)v182, (uint64_t)&v183, (uint64_t)&lazy cache variable for type metadata for Any?, v179, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
            if (v185)
            {
              type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
              if ((swift_dynamicCast() & 1) != 0)
              {

                v99 = v180;
                goto LABEL_110;
              }
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v183);
            }
          }
          objc_opt_self();
          v102 = swift_dynamicCastObjCClass();
          if (!v102)
          {

LABEL_31:
            v8 = v165;
            v16 = v166;
            v29 = &selRef_setSensitive_;
            v41 = v172;
            v44 = v176;
            goto LABEL_32;
          }
          v103 = (void *)v102;
          v104 = v99;
          v99 = objc_msgSend(v103, sel_superview);

          if (!v99)
          {
            v99 = v81;
            goto LABEL_31;
          }
LABEL_110:
          v105 = *(_QWORD *)v26;
          v106 = *(_QWORD *)(*(_QWORD *)v26 + 16);
          if (v106)
          {
            v107 = v99;
            swift_bridgeObjectRetain();
            v16 = v105 + 40 * v106;
            while (1)
            {
              if (v106 > *(_QWORD *)(v105 + 16))
              {
                __break(1u);
                goto LABEL_148;
              }
              v108 = *(_QWORD *)v16;
              v183 = *(void **)(v16 - 8);
              v184 = v108;
              v109 = (void *)AccessibilityAttachment.platformElement.getter();

              if (v109)
                break;
              v16 -= 40;
              if (!--v106)
                goto LABEL_98;
            }
            if (v106 <= *(_QWORD *)(v105 + 16))
            {
              v110 = *(_QWORD *)v16;
              v183 = *(void **)(v16 - 8);
              v184 = v110;
              v111 = AccessibilityAttachment.platformElement.getter();
              if (v111)
              {
                v101 = (id)v111;
                v46 = v88;
                swift_bridgeObjectRelease();
                goto LABEL_99;
              }
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
            }
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            swift_once();
            goto LABEL_5;
          }
          v100 = v99;
          swift_bridgeObjectRetain();
LABEL_98:
          swift_bridgeObjectRelease();
          v46 = v88;
          v101 = v88;
LABEL_99:

          if (v99 == v101)
            goto LABEL_123;
        }
      }
      v99 = v81;
LABEL_123:

      v8 = v165;
      v16 = v166;
      v29 = &selRef_setSensitive_;
      v44 = v176;
LABEL_124:
      outlined destroy of AccessibilityFocus.Target((uint64_t)v181);
      swift_bridgeObjectRelease();
      v112 = v172;
      if (v14 == v178)
      {
LABEL_125:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = v164;
        v26 = (char *)v170;
        v34 = v175;
        goto LABEL_15;
      }
      v26 = (char *)v170;
      if ((unint64_t)v14 >= *(_QWORD *)(v44 + 16))
        goto LABEL_163;
      if (!*(_QWORD *)(v172 + 16))
        goto LABEL_169;
      v113 = specialized __RawDictionaryStorage.find<A>(_:)(v14[v177]);
      if ((v114 & 1) == 0)
        goto LABEL_169;
      outlined init with copy of AccessibilityFocus.Target(*(_QWORD *)(v112 + 56) + 8 * v113, (uint64_t)v182);
      outlined init with take of AccessibilityFocus.Target((uint64_t)v182, (uint64_t)&v183);
      v33 = AccessibilityFocus.Target.match(focusStoreNode:)(v46);
      outlined destroy of AccessibilityFocus.Target((uint64_t)&v183);
      if (v33 == 4)
        goto LABEL_169;

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v14 = v164;
      if (v174 == 4)
      {

      }
      else
      {
        v115 = v174;
        v116 = specialized AccessibilityFocus.Match.takesPriority(over:)(v33);

        if (!v116)
          v33 = v115;
      }
      v32 = v173;
      if (!(_BYTE)v33)
      {
        swift_bridgeObjectRelease();
        v123 = 0;
        LOBYTE(v30) = v150;
        goto LABEL_142;
      }
      goto LABEL_16;
    }
    v59 -= 5;
    if (!--v58)
      goto LABEL_58;
  }
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  swift_bridgeObjectRelease();
  v127 = v159;
LABEL_149:
  if ((specialized static Dictionary<>.== infix(_:_:)(v127, *((_QWORD *)v26 + 2)) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v26 + 2) = v127;
LABEL_154:
    v129 = v155;
    v130 = (uint64_t)v152;
    v131 = v154;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v153 + 16))(v152, &v14[*(int *)(v155 + 36)], v154);
    AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(v130, v131, (uint64_t)v8);
    v179 = v132;
    DisplayList.Version.init(forUpdate:)();
    v133 = v183;
    v135 = type metadata accessor for AccessibilityFocusState.Binding(0, v131, (uint64_t)v8, v134);
    v139 = AccessibilityFocusState.Binding.propertyID.getter(v135, v136, v137, v138);
    v140 = v26;
    v141 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI17fg6CSgAA7hi16VyACGIeggr_AcGs5j120OIegnrzr_TR03_s7a4UI35c92FocusStoreListModifierV10ItemFilter33_2CCA6A140D82DC7D61A1924E7705DDD6LLV11updateValueyyFAA7ef7O29AA0C4D11CGAKSgcfu6_Tf3nnnpf_nTf1cn_n(v16);
    v142 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d69UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateValueyyFAA8h7IDVAA17fG53Ccfu_33_2f504ee4f610784b00e9281caac81f7cAiGTf3nnnpk_nTf1cn_n(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v143 = specialized Set.init<A>(_:)((uint64_t)v142);
    swift_bridgeObjectRelease();
    v144 = *((_QWORD *)v140 + 2);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityFocusStoreList.Item>, (uint64_t)&type metadata for AccessibilityFocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v145 = swift_allocObject();
    *(_OWORD *)(v145 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v145 + 32) = v133;
    *(_QWORD *)(v145 + 40) = v139;
    v146 = v179;
    *(_QWORD *)(v145 + 48) = partial apply for closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:);
    *(_QWORD *)(v145 + 56) = v146;
    v128 = v129;
    *(_QWORD *)(v145 + 64) = v141;
    *(_QWORD *)(v145 + 72) = v143;
    *(_QWORD *)(v145 + 80) = v144;
    v183 = (void *)v145;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v156 + 8))(v14, v128);
  }
  if ((v149 & 1) != 0 || !v148 || !AGGraphGetOutputValue())
    goto LABEL_154;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v128 = v155;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v156 + 8))(v14, v128);
}

uint64_t (*AccessibilityFocusStoreListModifier.ListTransform.value.getter())()
{
  uint64_t v0;

  v0 = *(_QWORD *)AGGraphGetValue();
  *(_QWORD *)(swift_allocObject() + 16) = v0;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in AccessibilityFocusStoreListModifier.ListTransform.value.getter;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityFocusStoreListModifier<A>.ListTransform@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  AccessibilityFocusStoreListModifier.ListTransform.value.getter();
  v3 = v2;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in AccessibilityFocusStoreListModifier.ListTransform.value.getter;
  *(_QWORD *)(result + 24) = v3;
  *a1 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t static AccessibilityFocusStoreListModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t result;
  unint64_t *v44;
  _BYTE v45[16];
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  void (*v55)(unint64_t *__return_ptr);
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;

  v63 = a5;
  v64 = a6;
  v54 = a4;
  v55 = a3;
  v65 = a7;
  v84 = *MEMORY[0x1E0C80C00];
  v53 = *a1;
  v62 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v57 = *(_DWORD *)(a2 + 60);
  v56 = *(_DWORD *)(a2 + 64);
  v16 = *(_DWORD *)(a2 + 68);
  v60 = *(_DWORD *)(a2 + 72);
  v61 = v16;
  v59 = *(_DWORD *)(a2 + 76);
  v58 = *(_DWORD *)(a2 + 80);
  v17 = v13;
  v69 = v13;
  v18 = v15;
  LODWORD(v70) = v15;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
    return _ViewOutputs.init()();
  v69 = v62;
  v51 = v7;
  LODWORD(v70) = v7;
  v71 = v8;
  v50 = v9;
  v72 = __PAIR64__(v10, v9);
  v49 = v10;
  v19 = v12;
  v73 = v12;
  v74 = v11;
  v48 = v11;
  v75 = v14;
  v76 = v17;
  v52 = v18;
  v77 = v18;
  v78 = v57;
  v79 = v56;
  v80 = v61;
  v81 = v60;
  v82 = v59;
  v83 = v58;
  v55(&v67);
  LODWORD(v69) = v53;
  type metadata accessor for AccessibilityFocusStoreListModifier(255, v63, v64, v20);
  type metadata accessor for _GraphValue();
  LODWORD(v55) = _GraphValue.value.getter();
  v69 = v67;
  v70 = v68;
  v21 = _ViewOutputs.subscript.getter();
  v22 = *MEMORY[0x1E0CFED28];
  if ((v21 & 0x100000000) == 0)
    v22 = v21;
  LODWORD(v54) = v22;
  lazy protocol witness table accessor for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  v23 = v69;
  v69 = v62;
  LODWORD(v70) = v51;
  v71 = v8;
  v72 = __PAIR64__(v49, v50);
  v73 = v19;
  v74 = v48;
  v75 = v14;
  v76 = v17;
  v77 = v18;
  v78 = v57;
  v79 = v56;
  v80 = v61;
  v81 = v60;
  v82 = v59;
  v83 = v58;
  swift_getKeyPath();
  v24 = _ViewInputs.mapEnvironment<A>(_:)();
  v25 = swift_release();
  v69 = __PAIR64__(v54, v55);
  v70 = __PAIR64__(v24, v23);
  v71 = MEMORY[0x1E0DEE9E0];
  v72 = MEMORY[0x1E0DEE9D8];
  MEMORY[0x1E0C80A78](v25, v26);
  v27 = v63;
  v28 = v64;
  v46 = type metadata accessor for AccessibilityFocusStoreListModifier.ItemFilter(0, v63, v64, v29);
  v47 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStoreListModifier<A>.ItemFilter, v46);
  v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<AccessibilityFocusStoreList>, (uint64_t)&type metadata for AccessibilityFocusStoreList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v31 = MEMORY[0x1E0DEDCE8];
  v32 = MEMORY[0x1E0DEDD18];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v69, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)v45, v46, MEMORY[0x1E0DEDCE8], v33, MEMORY[0x1E0DEDD18], v34);
  swift_bridgeObjectRelease();
  v35 = swift_bridgeObjectRelease();
  LODWORD(v69) = v66;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = type metadata accessor for AccessibilityFocusStoreListModifier.ListTransform(0, v27, v28, v37);
  v46 = v38;
  v47 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStoreListModifier<A>.ListTransform, v38);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), v30);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v69, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v45, v38, v31, v39, v32, v40);
  v69 = v17;
  LODWORD(v70) = v52;
  MEMORY[0x1E0C80A78](v17, v41);
  LODWORD(v46) = v42;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  v44 = v65;
  *v65 = v67;
  v44[1] = v68;
  return result;
}

uint64_t AccessibilityFocusStoreListModifier.init(binding:prototype:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = type metadata accessor for AccessibilityFocusState.Binding(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v12 = a5 + *(int *)(type metadata accessor for AccessibilityFocusStoreListModifier(0, a3, a4, v11) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v12, a2, a3);
}

uint64_t type metadata accessor for AccessibilityFocusStoreListModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusStoreListModifier);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityFocusStoreListModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  return static AccessibilityFocusStoreListModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityFocusStoreListModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusStoreListModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release();
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release();
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            return swift_release();
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    result = a2(*(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v12), *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v12));
  }
  v15 = v13 + 4;
  if (v15 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1872EADBC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1872EADE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityFocusStoreLocation.set(_:transaction:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  closure #1 in AccessibilityFocusStoreLocation.set(_:transaction:)(v0[4], (uint64_t)v0 + ((v2 + 40) & ~v2), v1, v0[3]);
}

uint64_t sub_1872EAE6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MEMORY[0x18D760234]();
  *a1 = result;
  return result;
}

uint64_t sub_1872EAE90()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for AccessibilityFocusStore.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusStore.Key);
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreLocation.find(for:)(uint64_t a1, _BYTE *a2)
{
  uint64_t *v2;

  return closure #1 in AccessibilityFocusStoreLocation.find(for:)(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreLocation.resolve()(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return closure #1 in AccessibilityFocusStoreLocation.resolve()(a1, a2, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t outlined retain of AccessibilityFocusStoreList.Item(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityFocusStore.makeStoreContent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in AccessibilityFocusStore.makeStoreContent(_:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t outlined release of AccessibilityFocusStoreList.Item(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreInputKey()
{
  return &type metadata for AccessibilityFocusStoreInputKey;
}

uint64_t type metadata completion function for AccessibilityFocusStoreListModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityFocusStoreListModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = ((v6 + 16) & ~v6) + v7 + v6;
  v9 = *(_DWORD *)(v5 + 80) & 0x100000;
  v10 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v9 != 0 || (v8 & (unint64_t)~v6) + v7 > 0x18)
  {
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v14 = ~v6;
    v15 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = ((unint64_t)v15 + v6 + 8) & ~v6;
    v18 = ((unint64_t)v16 + v6 + 8) & ~v6;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v19(v17, v18, v4);
    v19(((unint64_t)a1 + v8) & v14, ((unint64_t)a2 + v8) & v14, v4);
  }
  return a1;
}

uint64_t destroy for AccessibilityFocusStoreListModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(unint64_t, uint64_t);

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v9(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v7 + a1 + *(_QWORD *)(v6 + 64) + ((v7 + 16) & ~v7)) & ~v7, v5);
}

_QWORD *initializeWithCopy for AccessibilityFocusStoreListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + v9;
  v12(((unint64_t)a1 + v13) & ~v9, ((unint64_t)a2 + v13) & ~v9, v7);
  return a1;
}

_QWORD *assignWithCopy for AccessibilityFocusStoreListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 8 + v6) & ~v10;
  v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 24);
  v12(((unint64_t)v7 + v10 + 8) & ~v10, v11, v8);
  v13 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + v10;
  v12(((unint64_t)a1 + v13) & ~v10, ((unint64_t)a2 + v13) & ~v10, v8);
  return a1;
}

_QWORD *initializeWithTake for AccessibilityFocusStoreListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, unint64_t, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  v10(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9, v7);
  v11 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + v9;
  v10(((unint64_t)a1 + v11) & ~v9, ((unint64_t)a2 + v11) & ~v9, v7);
  return a1;
}

_QWORD *assignWithTake for AccessibilityFocusStoreListModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 8 + v6) & ~v10;
  v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 40);
  v12(((unint64_t)v7 + v10 + 8) & ~v10, v11, v8);
  v13 = ((v10 + 16) & ~v10) + *(_QWORD *)(v9 + 64) + v10;
  v12(((unint64_t)a1 + v13) & ~v10, ((unint64_t)a2 + v13) & ~v10, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusStoreListModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((*(_QWORD *)(v4 + 64) + v7 + ((v7 + 16) & ~v7)) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1872EB5B0 + 4 * byte_187C20D6F[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityFocusStoreListModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v5 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t destroy for AccessibilityFocusStoreList.Item()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityFocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AccessibilityFocusStoreList.Item(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityFocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusStoreList.Item(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityFocusStoreList.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreList.Item()
{
  return &type metadata for AccessibilityFocusStoreList.Item;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityFocusStoreListModifier<A>()
{
  return &protocol witness table for AccessibilityFocusStoreListModifier<A>;
}

uint64_t type metadata accessor for AccessibilityFocusStoreListModifier.ItemFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusStoreListModifier.ItemFilter);
}

uint64_t type metadata accessor for AccessibilityFocusStoreListModifier.ListTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusStoreListModifier.ListTransform);
}

_QWORD *specialized AccessibilityFocusStoreLocation.init(host:resetValue:technologies:)(uint64_t a1, uint64_t a2, __int16 *a3)
{
  _QWORD *v3;
  uint64_t v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *v3;
  v6 = *a3;
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v3[2] = 0;
  v3[3] = v7;
  v3[4] = MEMORY[0x1E0DEE9E0];
  swift_weakInit();
  v8 = (char *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 48);
  v9 = *(_QWORD *)(v5 + class metadata base offset for AccessibilityFocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v8, 1, 1, TupleTypeMetadata2);
  v11 = (char *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 56);
  v13 = type metadata accessor for AccessibilityFocusStore.Entry(0, v9, *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + v5 + 8), v12);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 64)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 72)) = 0;
  swift_weakAssign();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))((char *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 32), a2, v9);
  *(_WORD *)((char *)v3 + *(_QWORD *)(class metadata base offset for AccessibilityFocusStoreLocation + *v3 + 40)) = v6;
  return v3;
}

_QWORD *specialized AccessibilityFocusStoreLocation.__allocating_init(host:resetValue:technologies:)(uint64_t a1, uint64_t a2, __int16 *a3)
{
  swift_allocObject();
  return specialized AccessibilityFocusStoreLocation.init(host:resetValue:technologies:)(a1, a2, a3);
}

uint64_t destroy for AccessibilityFocusStoreListModifier.ItemFilter()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityFocusStoreListModifier.ItemFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityFocusStoreListModifier.ItemFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AccessibilityFocusStoreListModifier.ItemFilter(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreUpdateAction()
{
  return &type metadata for AccessibilityFocusStoreUpdateAction;
}

void base witness table accessor for _AttributeBody in AccessibilityFocusStoreListModifier<A>.ListTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in AccessibilityFocusStoreListModifier<A>.ItemFilter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with copy of AccessibilityFocus.Target(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BridgedPopUpButtonProvider(a2, a1);
  return a2;
}

uint64_t outlined destroy of AccessibilityFocus.Target(uint64_t a1)
{
  destroy for UIKitScenePresentationModeLocation();
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter(void *a1)
{
  uint64_t v1;

  return closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter(a1, *(void ***)(v1 + 16));
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_1872EBF24()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  return closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(a1, a2, a3, v3 + ((v5 + 32) & ~v5), v4, *(_QWORD *)(v3 + 24));
}

uint64_t sub_1872EBF98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1872EBFBC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreListModifier.ListTransform.value.getter()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v0);
}

ValueMetadata *type metadata accessor for PlatformSearchFieldStyle()
{
  return &type metadata for PlatformSearchFieldStyle;
}

uint64_t associated type witness table accessor for SearchFieldStyle.Body : View in PlatformSearchFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in PlatformSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UIKitSearchFieldAdaptor(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v18 - v14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v18 - v14, type metadata accessor for SearchFieldConfiguration);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  LOBYTE(a1) = (*v7 & 1) == 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11, type metadata accessor for UIKitSearchFieldAdaptor);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, a2, type metadata accessor for UIKitSearchFieldAdaptor);
  type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)();
  *(_BYTE *)(a2 + *(int *)(v16 + 48)) = a1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for UIKitSearchFieldAdaptor);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for UIKitSearchFieldAdaptor);
}

uint64_t protocol witness for View.body.getter in conformance PlatformSearchFieldStyle.Implementation@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = static HorizontalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>();
  return closure #1 in PlatformSearchFieldStyle.Implementation.body.getter(v1, a1 + *(int *)(v3 + 44));
}

uint64_t protocol witness for SearchFieldStyle.makeBody(configuration:) in conformance PlatformSearchFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for SearchFieldConfiguration);
}

_QWORD *initializeBufferWithCopyOfBuffer for PlatformSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v33;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)v4;
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v10[1] = *((_BYTE *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    v12 = (int *)type metadata accessor for SearchFieldState();
    v13 = v12[9];
    v33 = &v10[v13];
    v14 = &v11[v13];
    v15 = type metadata accessor for AttributedString();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v16(v33, v14, v15);
    v10[v12[10]] = v11[v12[10]];
    v17 = v12[11];
    v18 = &v10[v17];
    v19 = &v11[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v7[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = v22[8];
    if (v23 == 255)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
    }
    else
    {
      v24 = v23 & 1;
      v25 = *(_QWORD *)v22;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v22, v23 & 1);
      *(_QWORD *)v21 = v25;
      v21[8] = v24;
    }
    *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
    v26 = v7[8];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(_QWORD *)((char *)a2 + v26);
    v30 = *((_QWORD *)v28 + 1);
    v31 = v28[16];
    outlined copy of Text.Storage(v29, v30, v31);
    *(_QWORD *)v27 = v29;
    *((_QWORD *)v27 + 1) = v30;
    v27[16] = v31;
    *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *initializeWithCopy for PlatformSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v7[1] = *((_BYTE *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((_BYTE *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  v9 = (int *)type metadata accessor for SearchFieldState();
  v10 = v9[9];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for AttributedString();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  v15 = v9[11];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v16[4] = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = v21[8];
  if (v22 == 255)
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
  }
  else
  {
    v23 = v22 & 1;
    v24 = *(_QWORD *)v21;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v21, v22 & 1);
    *(_QWORD *)v20 = v24;
    v20[8] = v23;
  }
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v25 = v18[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25);
  v29 = *((_QWORD *)v27 + 1);
  v30 = v27[16];
  outlined copy of Text.Storage(v28, v29, v30);
  *(_QWORD *)v26 = v28;
  *((_QWORD *)v26 + 1) = v29;
  v26[16] = v30;
  *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PlatformSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *v6 = *((_BYTE *)a2 + v5);
  v6[1] = *((_BYTE *)a2 + v5 + 1);
  v6[2] = *((_BYTE *)a2 + v5 + 2);
  v6[3] = *((_BYTE *)a2 + v5 + 3);
  LODWORD(v5) = *(_DWORD *)((char *)a2 + v5 + 4);
  v6[8] = v7[8];
  *((_DWORD *)v6 + 1) = v5;
  v8 = (int *)type metadata accessor for SearchFieldState();
  v9 = v8[9];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  v13 = v8[11];
  v14 = &v6[v13];
  v15 = &v7[v13];
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v17 = v16[6];
  v18 = (uint64_t)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *((unsigned __int8 *)a1 + v17 + 8);
  v21 = *((unsigned __int8 *)a2 + v17 + 8);
  if (v20 == 255)
  {
    if (v21 == 255)
    {
      v23 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      *(_QWORD *)v18 = v23;
    }
    else
    {
      v28 = v21 & 1;
      v29 = *(_QWORD *)v19;
      outlined copy of PlatformItemCollection.Storage(v29, v21 & 1);
      *(_QWORD *)v18 = v29;
      *(_BYTE *)(v18 + 8) = v28;
    }
  }
  else if (v21 == 255)
  {
    outlined destroy of PlatformItemCollection(v18);
    v22 = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_BYTE *)(v18 + 8) = v22;
  }
  else
  {
    v24 = v21 & 1;
    v25 = *(_QWORD *)v19;
    outlined copy of PlatformItemCollection.Storage(v25, v21 & 1);
    v26 = *(_QWORD *)v18;
    v27 = *(_BYTE *)(v18 + 8);
    *(_QWORD *)v18 = v25;
    *(_BYTE *)(v18 + 8) = v24;
    outlined consume of PlatformItemCollection.Storage(v26, v27);
  }
  *((_BYTE *)a1 + v16[7]) = *((_BYTE *)a2 + v16[7]);
  v30 = v16[8];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *((_QWORD *)v32 + 1);
  v35 = v32[16];
  outlined copy of Text.Storage(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Text.Storage(v36, v37, v38);
  *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for PlatformSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v7[1] = *((_BYTE *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((_BYTE *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  v9 = (int *)type metadata accessor for SearchFieldState();
  v10 = v9[9];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  v14 = v9[11];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v15[4] = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v18 = v17[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *((_BYTE *)a1 + v17[7]) = *((_BYTE *)a2 + v17[7]);
  v21 = v17[8];
  v22 = (_OWORD *)((char *)a1 + v21);
  v23 = (_OWORD *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  return a1;
}

_QWORD *assignWithTake for PlatformSearchFieldStyle.Implementation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *v6 = *((_BYTE *)a2 + v5);
  v6[1] = *((_BYTE *)a2 + v5 + 1);
  *((_WORD *)v6 + 1) = *(_WORD *)((char *)a2 + v5 + 2);
  v6[8] = *((_BYTE *)a2 + v5 + 8);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  v8 = (int *)type metadata accessor for SearchFieldState();
  v9 = v8[9];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  v13 = v8[11];
  v14 = &v6[v13];
  v15 = &v7[v13];
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v17 = v16[6];
  v18 = (uint64_t)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *((unsigned __int8 *)a1 + v17 + 8);
  if (v20 != 255)
  {
    v21 = v19[8];
    if (v21 != 255)
    {
      v22 = *(_QWORD *)v18;
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v21 & 1;
      outlined consume of PlatformItemCollection.Storage(v22, v20 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v18);
  }
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v19[8];
LABEL_6:
  *((_BYTE *)a1 + v16[7]) = *((_BYTE *)a2 + v16[7]);
  v23 = v16[8];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  LOBYTE(v23) = v25[16];
  v26 = *(_QWORD *)v24;
  v27 = *((_QWORD *)v24 + 1);
  v28 = v24[16];
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v23;
  outlined consume of Text.Storage(v26, v27, v28);
  *((_QWORD *)v24 + 3) = *((_QWORD *)v25 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformSearchFieldStyle.Implementation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872ECAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PlatformSearchFieldStyle.Implementation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1872ECB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PlatformSearchFieldStyle.Implementation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PlatformSearchFieldStyle.Implementation;
  if (!type metadata singleton initialization cache for PlatformSearchFieldStyle.Implementation)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PlatformSearchFieldStyle.Implementation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1872ECC04()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PlatformSearchFieldStyle.Implementation and conformance PlatformSearchFieldStyle.Implementation, (uint64_t (*)(uint64_t))type metadata accessor for PlatformSearchFieldStyle.Implementation, (uint64_t)&protocol conformance descriptor for PlatformSearchFieldStyle.Implementation);
}

uint64_t associated type witness table accessor for View.Body : View in PlatformSearchFieldStyle.Implementation()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>);
  }
}

void type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?))
  {
    type metadata accessor for UIKitSearchFieldAdaptor(255);
    type metadata accessor for SearchFieldConfiguration.Suggestions?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?));
  }
}

void type metadata accessor for SearchFieldConfiguration.Suggestions?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?);
  }
}

uint64_t sub_1872ECD7C()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t View.contentShape<A>(_:_:eoFill:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a6;
  v25 = a4;
  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _ContentShapeKindModifier(0, v14, v15, v13);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v24 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a2, a5, v19);
  v22 = *a1;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v12, a5);
  v21[*(int *)(v16 + 36)] = a3;
  *(_QWORD *)&v21[*(int *)(v16 + 40)] = v22;
  MEMORY[0x18D75B4AC](v21, v25, v16, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v16);
}

uint64_t _ContentShapeKindModifier.init(shape:eoFill:kind:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  result = type metadata accessor for _ContentShapeKindModifier(0, a4, a5, v11);
  *(_BYTE *)(a6 + *(int *)(result + 36)) = a2;
  *(_QWORD *)(a6 + *(int *)(result + 40)) = *a3;
  return result;
}

uint64_t _ContentShapeKindModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ContentShapeKindModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ContentShapeKindModifier.shape.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ContentShapeKindModifier.eoFill.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _ContentShapeKindModifier.eoFill.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_ContentShapeKindModifier.eoFill.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ContentShapeKindModifier.kind.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(v2 + *(int *)(result + 40));
  return result;
}

_QWORD *_ContentShapeKindModifier.kind.setter(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 40)) = *result;
  return result;
}

uint64_t (*_ContentShapeKindModifier.kind.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t type metadata accessor for ContentShapeKindResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentShapeKindResponder);
}

uint64_t ContentShapeKindResponder.__allocating_init(inputs:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_allocObject();
  return ContentShapeKindResponder.init(inputs:)(a1, v2, v3, v4);
}

uint64_t _ContentShapeKindModifier.contains(points:size:)()
{
  _BYTE v1[40];

  Shape.effectivePath(in:)();
  default argument 2 of Path.contains(points:eoFill:origin:)();
  Path.contains(points:eoFill:origin:)();
  return outlined release of Path((uint64_t)v1);
}

uint64_t _ContentShapeKindModifier.contentPath(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;

  if ((*(_BYTE *)(v2 + *(int *)(result + 40)) & 1) != 0)
  {
    result = Shape.effectivePath(in:)();
    v4 = v7;
    v6 = v8;
    v5 = v9;
  }
  else
  {
    v4 = 0uLL;
    v5 = 6;
    v6 = 0uLL;
  }
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = v5;
  return result;
}

_QWORD *_ContentShapeKindModifier.contentPath(size:kind:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  char v10;

  if ((*(_QWORD *)(v3 + *(int *)(a2 + 40)) & *result) != 0)
  {
    result = (_QWORD *)Shape.effectivePath(in:)();
    v5 = v8;
    v6 = v9;
    v7 = v10;
  }
  else
  {
    v5 = 0uLL;
    v7 = 6;
    v6 = 0uLL;
  }
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  *(_BYTE *)(a3 + 32) = v7;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _ContentShapeKindModifier<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  _ContentShapeKindModifier.contentPath(size:)(a1, (uint64_t)v5);
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 32) = v6;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance _ContentShapeKindModifier<A>@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  _ContentShapeKindModifier.contentPath(size:kind:)(a1, a2, (uint64_t)v6);
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a3 = v6[0];
  *(_OWORD *)(a3 + 16) = v5;
  *(_BYTE *)(a3 + 32) = v7;
  return result;
}

uint64_t ContentShapeKindResponderFilter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v5 = v4;
  v31 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for _ContentShapeKindModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v23 = *(_QWORD *)(v6 - 8);
  v7 = v23;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v23 - v9;
  Value = AGGraphGetValue();
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v24(v10, Value, v6);
  v12 = (__int128 *)AGGraphGetValue();
  v13 = v12[1];
  v26 = *v12;
  v27 = v13;
  v25 = *(_OWORD *)AGGraphGetValue();
  v14 = AGGraphGetValue();
  v28 = *(_QWORD *)v14;
  v29 = *(_OWORD *)(v14 + 8);
  v30 = *(_OWORD *)(v14 + 24);
  swift_beginAccess();
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v6);
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v23 + 8);
  v15(v10, v6);
  v16 = *(_QWORD *)(v5 + 24);
  v17 = AGGraphGetValue();
  v24(v10, v17, v6);
  v18 = *(_QWORD *)&v10[*(int *)(v6 + 40)];
  v15(v10, v6);
  *(_QWORD *)(v16 + 208) = v18;
  v19 = *(_QWORD *)(v5 + 24);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v20 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v22 + 32) = v19;
    v28 = v22;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ContentShapeKindResponder.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, _QWORD *);
  uint64_t result;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t, uint64_t *);
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;

  v8 = *a4;
  if ((v4[26] & 1) != 0)
  {
    v11 = *v4;
    static Semantics.v6.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) != 0)
    {
      v16 = v8;
      type metadata accessor for DefaultLayoutViewResponder();
      v12 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t *))method lookup function for ViewResponder();
      v12(v15, a2, a3 | ((HIDWORD(a3) & 1) << 32), &v16);
    }
    v15[3] = v8;
    swift_beginAccess();
    v14 = type metadata accessor for _ContentShapeKindModifier(255, *(_QWORD *)(v11 + class metadata base offset for ContentShapeKindResponder), *(_QWORD *)(v11 + class metadata base offset for ContentShapeKindResponder + 8), v13);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v14);
    type metadata accessor for ContentResponderHelper();
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)();
    result = swift_endAccess();
    *a1 = v16;
  }
  else
  {
    v15[0] = *a4;
    type metadata accessor for DefaultLayoutViewResponder();
    v9 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _QWORD *))method lookup function for ViewResponder();
    return v9(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), v15);
  }
  return result;
}

uint64_t ContentShapeKindResponder.addContentPath(to:kind:in:observer:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD v17[4];

  v9 = result;
  v10 = *a2;
  if ((v5[26] & *a2) != 0)
  {
    v11 = *v5;
    v17[3] = v5[26] & *a2;
    swift_beginAccess();
    v13 = type metadata accessor for _ContentShapeKindModifier(255, *(_QWORD *)(v11 + class metadata base offset for ContentShapeKindResponder), *(_QWORD *)(v11 + class metadata base offset for ContentShapeKindResponder + 8), v12);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v13);
    type metadata accessor for ContentResponderHelper();
    ContentResponderHelper.addContentPath(to:kind:in:observer:)();
    result = swift_endAccess();
    v14 = v5[26];
    if ((v14 & v10) != 0)
      v15 = ~v14;
    else
      v15 = -1;
    v10 &= v15;
  }
  if (v10)
  {
    v17[0] = v10;
    type metadata accessor for DefaultLayoutViewResponder();
    v16 = (uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))method lookup function for ViewResponder();
    return v16(v9, v17, a3, a4, a5);
  }
  return result;
}

unint64_t ContentShapeKindResponder.descriptionName.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for _ContentShapeKindModifier(255, *(_QWORD *)(v1 + class metadata base offset for ContentShapeKindResponder), *(_QWORD *)(v1 + class metadata base offset for ContentShapeKindResponder + 8), v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v3);
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = ContentShapeKinds.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 10272;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8745;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  return 0xD00000000000001ALL;
}

uint64_t ContentShapeKindResponder.extendPrintTree(string:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD v23[3];
  Swift::String v24;

  v5 = (uint64_t *)(*v4 + class metadata base offset for ContentShapeKindResponder);
  v6 = type metadata accessor for _ContentShapeKindModifier(255, *v5, v5[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v6);
  v7 = type metadata accessor for ContentResponderHelper();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v23 - v10;
  v12 = (char *)v4 + v5[3];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, v7);
  ContentResponderHelper.globalPosition.getter();
  v14 = v13;
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 91;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v18._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v20._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 4202589;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  v23[0] = v14;
  v23[1] = v16;
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v24);
  return swift_bridgeObjectRelease();
}

uint64_t ContentShapeKindResponder.init(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *v4;
  v4[26] = 1;
  v6 = type metadata accessor for _ContentShapeKindModifier(0, *(_QWORD *)(v5 + class metadata base offset for ContentShapeKindResponder), *(_QWORD *)(v5 + class metadata base offset for ContentShapeKindResponder + 8), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v6);
  ContentResponderHelper.init()();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t ContentShapeKindResponder.__allocating_init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_allocObject();
  return ContentShapeKindResponder.init(inputs:viewSubgraph:)(a1, a2, v4, v5);
}

uint64_t ContentShapeKindResponder.init(inputs:viewSubgraph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *v4;
  v4[26] = 1;
  v6 = type metadata accessor for _ContentShapeKindModifier(0, *(_QWORD *)(v5 + class metadata base offset for ContentShapeKindResponder), *(_QWORD *)(v5 + class metadata base offset for ContentShapeKindResponder + 8), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v6);
  ContentResponderHelper.init()();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t ContentShapeKindResponder.__ivar_destroyer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (uint64_t *)(*v4 + class metadata base offset for ContentShapeKindResponder);
  v6 = (char *)v4 + v5[3];
  v7 = type metadata accessor for _ContentShapeKindModifier(255, *v5, v5[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v7);
  v8 = type metadata accessor for ContentResponderHelper();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
}

_QWORD *ContentShapeKindResponder.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = (_QWORD *)DefaultLayoutViewResponder.deinit();
  v3 = (char *)v2 + *(_QWORD *)(class metadata base offset for ContentShapeKindResponder + *v2 + 24);
  v5 = type metadata accessor for _ContentShapeKindModifier(255, *(_QWORD *)(v1 + class metadata base offset for ContentShapeKindResponder), *(_QWORD *)(v1 + class metadata base offset for ContentShapeKindResponder + 8), v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v5);
  v6 = type metadata accessor for ContentResponderHelper();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3, v6);
  return v2;
}

uint64_t ContentShapeKindResponder.__deallocating_deinit()
{
  ContentShapeKindResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContentShapeKindResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContentShapeKindResponderFilter);
}

_UNKNOWN **base witness table accessor for ViewModifier in _ContentShapeKindModifier<A>()
{
  return &protocol witness table for _ContentShapeKindModifier<A>;
}

_QWORD *initializeBufferWithCopyOfBuffer for _ContentShapeKindModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    *(_QWORD *)((((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFF8)
                                                                                    + 8);
  }
  return v4;
}

uint64_t initializeWithCopy for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithCopy for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t initializeWithTake for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithTake for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 8) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ContentShapeKindModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 >= 0xFE)
      return (*(uint64_t (**)(void))(v4 + 48))();
    v12 = *(unsigned __int8 *)(v7 + a1);
    if (v12 >= 2)
      return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  if ((((v7 & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
    v8 = 2;
  else
    v8 = a2 - v6 + 1;
  if (v8 >= 0x10000)
    v9 = 4;
  else
    v9 = 2;
  if (v8 < 0x100)
    v9 = 1;
  if (v8 >= 2)
    v10 = v9;
  else
    v10 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1872EE288 + 4 * byte_187C21340[v10]))();
}

uint64_t type metadata completion function for ContentShapeKindResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;

  v4 = type metadata accessor for _ContentShapeKindModifier(255, *(_QWORD *)(a1 + class metadata base offset for ContentShapeKindResponder), *(_QWORD *)(a1 + class metadata base offset for ContentShapeKindResponder + 8), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ContentShapeKindModifier<A>, v4);
  result = type metadata accessor for ContentResponderHelper();
  if (v6 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1872EE3C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for _ContentShapeKindModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for _ContentShapeKindModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t initializeWithCopy for ContentShapeKindResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ContentShapeKindResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContentShapeKindResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

void base witness table accessor for _AttributeBody in ContentShapeKindResponderFilter<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for (CGFloat, CGFloat)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CGFloat, CGFloat))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
  }
}

void __swiftcall SystemPreferencesSidebarListStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SystemPreferencesSidebarListStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SystemPreferencesSidebarListStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for SystemPreferencesSidebarListStyle()
{
  return &type metadata for SystemPreferencesSidebarListStyle;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  Swift::Int v39;
  char *v40;
  uint64_t result;
  char *v42;
  char *v43;
  char *v44;
  _QWORD v45[2];
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v48 = a8;
  v49 = a5;
  v9 = v8;
  v61 = a4;
  v62 = a1;
  v63 = a2;
  v47 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v60 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v59 = (char *)v45 - v13;
  v53 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v19);
  v46 = (char *)v45 - v20;
  v21 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v21 - 8);
  v51 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v57 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v45 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v45[1] = (char *)v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v56 = *((_QWORD *)v16 - 1);
  MEMORY[0x1E0C80A78](v33, v34);
  v55 = (char *)v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v36);
  v54 = (char *)v45 - v37;
  v38 = v16;
  v39 = dispatch thunk of Sequence.underestimatedCount.getter();
  v65 = Array.init()();
  v61 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v39);
  (*(void (**)(char *, _QWORD, _QWORD *))(v56 + 16))(v55, v58, v16);
  v40 = v54;
  v58 = v38;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v39 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v39)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v27, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v62(v27, v60);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v60, v49);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v27, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v27, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v39)
      {
        v42 = v57;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v42 = v57;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  v60 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v42, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v57;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    return v65;
  }
  else
  {
    v58 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v46;
    v43 = v57;
    while (1)
    {
      v58(v44, v43, AssociatedTypeWitness);
      v62(v44, v59);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v59, v49);
  }
}

uint64_t NavigationPath.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 32);
  if ((*(_BYTE *)(v0 + 24) & 1) == 0)
    goto LABEL_10;
  if (v2 >> 62)
  {
    outlined copy of NavigationPath.Representation(v2, v1, v3, 1);
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 + v6;
  if (__OFADD__(v5, v6))
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
  outlined consume of NavigationPath.Representation(v2, v1, v3, 1);
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  if (!v9)
  {
LABEL_12:
    if (!(v4 >> 62))
      goto LABEL_13;
    goto LABEL_19;
  }
  __break(1u);
LABEL_10:
  if (!(v2 >> 62))
  {
    v10 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of NavigationPath.Representation(v2, v1, v3, 0);
  if (!(v4 >> 62))
  {
LABEL_13:
    v11 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = v10 + v11;
    if (!__OFADD__(v10, v11))
      return result;
LABEL_21:
    __break(1u);
    return result;
  }
LABEL_19:
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  result = v10 + v13;
  if (__OFADD__(v10, v13))
    goto LABEL_21;
  return result;
}

uint64_t NavigationPath.updatePossibilities(from:to:into:)(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = v4;
  v8 = result;
  v10 = *(_QWORD *)v3;
  v9 = *(_QWORD *)(v3 + 8);
  v11 = *(_QWORD *)(v3 + 16);
  if ((*(_BYTE *)(v3 + 24) & 1) == 0)
  {
    if (a2 >= result)
    {
      if (result == a2)
        return result;
      v18 = *(_QWORD *)(v3 + 16);
      result = swift_bridgeObjectRetain();
      while (v8 < a2)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          v12 = MEMORY[0x18D75E3BC](v8, v10);
        }
        else
        {
          if (v8 < 0)
            goto LABEL_20;
          if ((unint64_t)v8 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_21;
          v12 = *(_QWORD *)(v10 + 8 * v8 + 32);
          swift_retain();
        }
        (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v12 + 168))(a3, v8);
        if (v5)
        {
          outlined consume of NavigationPath.Representation(v10, v9, v18, 0);
          return swift_release();
        }
        ++v8;
        result = swift_release();
        if (a2 == v8)
          return outlined consume of NavigationPath.Representation(v10, v9, v18, 0);
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
    return result;
  }
  *(_QWORD *)&v16 = *(_QWORD *)v3;
  *((_QWORD *)&v16 + 1) = v9;
  v17 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NavigationPath.CodableRepresentation.updatePossibilities(from:to:into:)(v8, a2, a3);
  v13 = v16;
  v14 = v11;
  v15 = 1;
  if (!v5)
    return NavigationPath.items.setter((uint64_t)&v13);
  NavigationPath.items.setter((uint64_t)&v13);
  return swift_willThrow();
}

BOOL NavigationPath.isEmpty.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  if (!NavigationPath.Representation.isEmpty.getter())
    return 0;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v2 == 0;
}

uint64_t NavigationPath.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ItemBox(0, v7, v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  v10 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 192) - 8) + 32))(&v10[*(_QWORD *)(*(_QWORD *)v10 + 208)], v6);
  v10[16] = 0;
  NavigationPath.append<A>(box:)();
  return swift_release();
}

void NavigationPath.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for CodableItemBox();
}

uint64_t sub_1872EF000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v0);
  v4 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 192) - 8) + 32))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 224)], v2);
  v4[16] = 0;
  NavigationPath.append<A>(box:)();
  return swift_release();
}

Swift::Void __swiftcall NavigationPath.removeLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  Swift::Int v6;
  Swift::Int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(v3 + 32);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v12)
      goto LABEL_7;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v6)
      goto LABEL_7;
  }
  if (v6 >= a1)
    v7 = a1;
  else
    v7 = v6;
  specialized RangeReplaceableCollection<>.removeLast(_:)(v7, v1, v2);
  v8 = __OFSUB__(a1, v7);
  a1 -= v7;
  if (v8)
  {
    __break(1u);
    return;
  }
LABEL_7:
  if (a1 >= 1)
  {
    v9 = *(_QWORD *)(v3 + 8);
    v10 = *(_QWORD *)(v3 + 16);
    v11 = *(_BYTE *)(v3 + 24);
    *(_QWORD *)&v16 = *(_QWORD *)v3;
    *((_QWORD *)&v16 + 1) = v9;
    v17 = v10;
    v18 = v11;
    outlined copy of NavigationPath.Representation(v16, v9, v10, v11);
    NavigationPath.Representation.removeLast(_:)(a1);
    v13 = v16;
    v14 = v17;
    v15 = v18;
    NavigationPath.items.setter((uint64_t)&v13);
  }
}

uint64_t NavigationPath.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  if ((*(_BYTE *)(v8 + 24) & 1) != 0)
    goto LABEL_13;
  v10 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v11 = *((_QWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 4);
  v14 = *(__int128 *)((char *)a2 + 40);
  v15 = *((_QWORD *)a2 + 7);
  v16 = *((_QWORD *)a2 + 8);
  v17 = *((_BYTE *)a2 + 72);
  v18 = *((_QWORD *)a2 + 10);
  v20 = *(_QWORD *)v8;
  v19 = *(_QWORD *)(v8 + 8);
  v21 = *(_QWORD *)(v8 + 16);
  v37 = v19;
  v35 = v14;
  v36 = v10;
  v33 = *(_QWORD *)v8 & 0xC000000000000001;
  v34 = v21;
  v28 = v18;
  if (!v33)
  {
    if ((a5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10) > a5)
    {
      v26 = a6;
      v27 = *(_QWORD *)(v20 + 8 * a5 + 32);
      outlined copy of NavigationPath.Representation(v20, v19, v21, 0);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
LABEL_13:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v26 = a6;
  swift_bridgeObjectRetain();
  v27 = MEMORY[0x18D75E3BC](a5, v20);
LABEL_7:
  v38 = v36;
  v39 = v12;
  v40 = v11;
  v41 = v13;
  v42 = v35;
  v43 = v15;
  v44 = v16;
  v45 = v17;
  v46 = v28;
  v22 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 176))(&v38, v26, a3, a4, a7, a8);
  swift_release();
  if (v33)
  {
    v23 = MEMORY[0x18D75E3BC](a5, v20);
  }
  else
  {
    v23 = *(_QWORD *)(v20 + 8 * a5 + 32);
    swift_retain();
  }
  v24 = outlined consume of NavigationPath.Representation(v20, v37, v34, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 112))(v24);
  swift_release();
  return v22;
}

uint64_t NavigationPath.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v3 + 16);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    v10 = *(_QWORD *)(v3 + 32);
    if ((NavigationPath.CodableRepresentation.contains<A>(_:)(a1, a2, a3) & 1) != 0)
      return 1;
    if (!(v10 >> 62))
    {
      v13 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_13:
        v7 = v10 & 0xC000000000000001;
        if ((v10 & 0xC000000000000001) != 0)
        {
          v19 = MEMORY[0x18D75E3BC](0, v10);
        }
        else
        {
          if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          v19 = *(_QWORD *)(v10 + 32);
          swift_retain();
        }
        v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 152))(a1, a2, a3);
        swift_release();
        if ((v20 & 1) != 0)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          return 1;
        }
        v9 = 0;
        v8 = v10 & 0xFFFFFFFFFFFFFF8;
        v12 = v13 - 1;
        while (v12 != v9)
        {
          v21 = v9 + 1;
          if (v7)
          {
            v13 = MEMORY[0x18D75E3BC](v9 + 1, v10);
            if (__OFADD__(v21, 1))
              goto LABEL_40;
          }
          else
          {
            if (v21 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_46;
            }
            v13 = *(_QWORD *)(v10 + 8 * v9 + 40);
            swift_retain();
            if (__OFADD__(v21, 1))
            {
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
          }
          v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 152))(a1, a2, a3);
          swift_release();
          ++v9;
          if ((v22 & 1) != 0)
            goto LABEL_26;
        }
      }
LABEL_49:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_48:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v13 = result;
    if (result)
      goto LABEL_13;
    goto LABEL_49;
  }
  v12 = v7 & 0xFFFFFFFFFFFFFF8;
  if (!(v7 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_6;
LABEL_43:
    v26 = v7;
    v27 = v8;
    v28 = v9;
LABEL_44:
    outlined consume of NavigationPath.Representation(v26, v27, v28, 0);
    return 0;
  }
LABEL_42:
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10)
    goto LABEL_43;
LABEL_6:
  v13 = v7 & 0xC000000000000001;
  v30 = v8;
  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_46:
    v14 = MEMORY[0x18D75E3BC](0, v7);
  }
  else
  {
    if (!*(_QWORD *)(v12 + 16))
    {
      __break(1u);
      goto LABEL_48;
    }
    v14 = *(_QWORD *)(v7 + 32);
    swift_retain();
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 152))(a1, a2, a3);
  swift_release();
  if ((v15 & 1) == 0)
  {
    v29 = v9;
    v8 = 0;
    v9 = v10 - 1;
    while (1)
    {
      if (v9 == v8)
      {
        v26 = v7;
        v28 = v29;
        v27 = v30;
        goto LABEL_44;
      }
      v23 = v8 + 1;
      if (v13)
      {
        v24 = MEMORY[0x18D75E3BC](v8 + 1, v7);
        if (__OFADD__(v23, 1))
          goto LABEL_39;
      }
      else
      {
        if (v23 >= *(_QWORD *)(v12 + 16))
          goto LABEL_41;
        v24 = *(_QWORD *)(v7 + 8 * v8 + 40);
        swift_retain();
        if (__OFADD__(v23, 1))
        {
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
      }
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 152))(a1, a2, a3);
      swift_release();
      ++v8;
      if ((v25 & 1) != 0)
      {
        v16 = v7;
        v18 = v29;
        v17 = v30;
        goto LABEL_37;
      }
    }
  }
  v16 = v7;
  v17 = v30;
  v18 = v9;
LABEL_37:
  outlined consume of NavigationPath.Representation(v16, v17, v18, 0);
  return 1;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v4 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else if (!(*v3 >> 62))
    {
      v5 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v6 = -v5;
      if (!__OFSUB__(0, v5))
        goto LABEL_5;
      goto LABEL_17;
    }
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v6 = -v5;
    if (!__OFSUB__(0, v5))
    {
LABEL_5:
      v7 = -v4;
      if (v6 <= 0 && v6 > v7)
        goto LABEL_20;
      result = v5 - v4;
      if (!__OFADD__(v5, v7))
      {
        if (v5 >= result)
          return specialized Array.replaceSubrange<A>(_:with:)(result, v5, a3, (void (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      while (1)
      {
        v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x18D75E3BC](v3 - 4, a1);
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_12;
        }
        else
        {
          v5 = *(_QWORD *)(a1 + 8 * v3);
          swift_retain();
          v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        v7 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 128))();
        swift_release();
        if ((v7 & 1) != 0)
        {
          ++v3;
          if (v6 != v2)
            continue;
        }
        goto LABEL_15;
      }
    }
  }
  v7 = 1;
LABEL_15:
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t NavigationPath.items.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  if (!(v7 >> 62))
  {
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_6:
    if (!v6)
      goto LABEL_8;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 1) != 0)
  {
LABEL_7:
    if (!*(_QWORD *)(v4 + 16))
    {
      v12 = v3;
      swift_bridgeObjectRetain();
      v10 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v10);
      outlined consume of NavigationPath.Representation(v3, v4, v5, v6);
      goto LABEL_10;
    }
LABEL_8:
    result = outlined consume of NavigationPath.Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
    *(_QWORD *)v2 = v3;
    *(_QWORD *)(v2 + 8) = v4;
    *(_QWORD *)(v2 + 16) = v5;
    *(_BYTE *)(v2 + 24) = v6;
    return result;
  }
  v12 = v3;
LABEL_10:
  v11 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v11);
  outlined consume of NavigationPath.Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = v12;
  *(_BYTE *)(v2 + 24) = 0;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = MEMORY[0x1E0DEE9D8];
  return result;
}

BOOL NavigationPath.Representation.isEmpty.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    if (v1 >> 62)
    {
      outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_5;
    }
    else
    {
      v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v4)
      {
LABEL_5:
        outlined consume of NavigationPath.Representation(v1, v2, v3, 1);
        return 0;
      }
    }
    if (*(_QWORD *)(v2 + 16))
      goto LABEL_5;
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v1, v2, v3, 1);
  }
  else if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of NavigationPath.Representation(v1, v2, v3, 0);
  }
  else
  {
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v6 == 0;
}

uint64_t NavigationPath.codable.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  _QWORD v9[3];
  char v10;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v9[0] = v3;
  v9[1] = v4;
  v9[2] = v5;
  v10 = v6;
  outlined copy of NavigationPath.Representation(v3, v4, v5, v6);
  swift_bridgeObjectRetain();
  return NavigationPath.CodableRepresentation.init(items:subsequentItems:)((uint64_t)v9, v7, a1);
}

uint64_t NavigationPath.CodableRepresentation.init(items:subsequentItems:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((Array<A>.isCodable.getter(a2) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(a2);
      outlined consume of NavigationPath.Representation(v5, v6, v7, 1);
      result = outlined consume of NavigationPath.Representation(v5, v6, v7, 1);
      v10 = v7;
LABEL_6:
      *a3 = v5;
      a3[1] = v6;
      a3[2] = v10;
      return result;
    }
    swift_bridgeObjectRelease();
    outlined consume of NavigationPath.Representation(v5, v6, v7, 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = swift_bridgeObjectRetain();
    v12 = Array<A>.isCodable.getter(v11);
    result = outlined consume of NavigationPath.Representation(v5, v6, v7, 0);
    if ((v12 & 1) != 0)
    {
      v10 = MEMORY[0x1E0DEE9D8];
      v6 = MEMORY[0x1E0DEE9D8];
      goto LABEL_6;
    }
  }
  result = outlined consume of NavigationPath.Representation(v5, v6, v7, v8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void NavigationPath.init()(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v1;
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t NavigationPath.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[8];

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = partial apply for implicit closure #1 in NavigationPath.init<A>(_:);
  v15[6] = v10;
  v11 = type metadata accessor for NavigationPath_ItemBoxBase();
  v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned ItemBox<A.Sequence.Element>), (uint64_t)v15, a2, v11, MEMORY[0x1E0DEDCE8], a3, MEMORY[0x1E0DEDD18], v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = swift_release();
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = v13;
  *(_BYTE *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a5 + 40) = 0;
  return result;
}

_BYTE *implicit closure #1 in NavigationPath.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v14 - v9;
  type metadata accessor for ItemBox(0, AssociatedTypeWitness, a4, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, AssociatedTypeWitness);
  v12 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 192) - 8) + 32))(&v12[*(_QWORD *)(*(_QWORD *)v12 + 208)], v10);
  v12[16] = 0;
  return v12;
}

_BYTE *ItemBox.__allocating_init(_:)(uint64_t a1)
{
  _BYTE *v2;

  v2 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 192) - 8) + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 208)], a1);
  v2[16] = 0;
  return v2;
}

uint64_t NavigationPath.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[10];

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a5;
  v19[6] = a6;
  v19[7] = partial apply for implicit closure #1 in NavigationPath.init<A>(_:);
  v19[8] = v14;
  v15 = type metadata accessor for NavigationPath_ItemBoxBase();
  v17 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned CodableItemBox<A.Sequence.Element>), (uint64_t)v19, a2, v15, MEMORY[0x1E0DEDCE8], a3, MEMORY[0x1E0DEDD18], v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = swift_release();
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = v17;
  *(_BYTE *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a7 + 40) = 0;
  return result;
}

void implicit closure #1 in NavigationPath.init<A>(_:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v1);
  type metadata accessor for CodableItemBox();
}

_BYTE *sub_1872F009C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v0, v1);
  v4 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 192) - 8) + 32))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 224)], v2);
  v4[16] = 0;
  return v4;
}

_BYTE *CodableItemBox.__allocating_init(_:)(uint64_t a1)
{
  _BYTE *v2;

  v2 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 192) - 8) + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 224)], a1);
  v2[16] = 0;
  return v2;
}

uint64_t NavigationPath.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_4;
  }
  else
  {
    v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_4;
  }
  if (!*(_QWORD *)(v4 + 16))
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v11)
        goto LABEL_5;
    }
    else
    {
      v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v9)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v4 = 0;
    v5 = 0;
    v8 = 0;
    v3 = MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
LABEL_4:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_5:
  v8 = 1;
LABEL_6:
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void NavigationPath.Representation.removeLast(_:)(Swift::Int a1)
{
  __int128 *v1;
  __int128 *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  __int128 v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  __int128 v30;

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v6 = (uint64_t)v1 + 8;
  v5 = *((_QWORD *)v1 + 1);
  v7 = *((_QWORD *)v1 + 2);
  if ((*((_BYTE *)v1 + 24) & 1) == 0)
  {
    v29 = *(_QWORD *)v1;
    if (!(v4 >> 62))
    {
      v15 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15 < a1)
      {
LABEL_19:
        _StringGuts.grow(_:)(53);
        v18._object = (void *)0x8000000187BDC4C0;
        v18._countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v18);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 0xD000000000000016;
        v20._object = (void *)0x8000000187BDC4E0;
        String.append(_:)(v20);
        outlined consume of NavigationPath.Representation(v4, v5, v7, 0);
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0x736D65746920;
        v22._object = (void *)0xE600000000000000;
        String.append(_:)(v22);
LABEL_24:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
LABEL_12:
      outlined consume of NavigationPath.Representation(v4, v5, v7, 0);
      specialized RangeReplaceableCollection<>.removeLast(_:)(a1, v16, v17);
      *(_QWORD *)v2 = v29;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 16) = 0;
      return;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter() < a1)
      goto LABEL_19;
    goto LABEL_12;
  }
  v30 = *v1;
  if (v4 >> 62)
  {
    outlined copy of NavigationPath.Representation(v4, v5, v7, 1);
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v9 = *(_QWORD *)(v5 + 16);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (!(v7 >> 62))
  {
    v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v12 = v10 + v11;
    if (!__OFADD__(v10, v11))
      goto LABEL_7;
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v12 = v10 + v23;
  if (__OFADD__(v10, v23))
    goto LABEL_22;
LABEL_7:
  if (v12 < a1)
  {
LABEL_23:
    _StringGuts.grow(_:)(53);
    v24._object = (void *)0x8000000187BDC4C0;
    v24._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v24);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD000000000000016;
    v26._object = (void *)0x8000000187BDC4E0;
    String.append(_:)(v26);
    outlined consume of NavigationPath.Representation(v4, v5, v7, 1);
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x736D65746920;
    v28._object = (void *)0xE600000000000000;
    String.append(_:)(v28);
    goto LABEL_24;
  }
  outlined consume of NavigationPath.Representation(v4, v5, v7, 1);
  if (v12 == a1)
  {
    outlined consume of NavigationPath.Representation(v4, v5, v7, 1);
    v14 = 0;
    v13 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    NavigationPath.CodableRepresentation.removeLast(_:)(a1);
    v13 = v30;
    v14 = v7;
  }
  *v2 = v13;
  *((_QWORD *)v2 + 2) = v14;
  *((_BYTE *)v2 + 24) = v12 != a1;
}

Swift::Void __swiftcall NavigationPath.CodableRepresentation.removeLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(v2[1] + 16);
  if (!v4)
    goto LABEL_9;
  if (v4 >= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(v2[1] + 16);
  if (v5)
  {
    if (v5 < 0)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, v5);
  }
  v6 = __OFSUB__(v3, v5);
  v3 -= v5;
  if (v6)
  {
    __break(1u);
  }
  else
  {
LABEL_9:
    if (v3 < 1)
      return;
    if (!(*v2 >> 62))
    {
      v7 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v8 = -v7;
      if (!__OFSUB__(0, v7))
        goto LABEL_12;
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v8 = -v7;
  if (__OFSUB__(0, v7))
    goto LABEL_24;
LABEL_12:
  v9 = -v3;
  if (v8 <= 0 && v8 > v9)
    goto LABEL_28;
  v11 = v7 - v3;
  if (__OFADD__(v7, v9))
    goto LABEL_25;
  if (v7 < v11)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  specialized Array.replaceSubrange<A>(_:with:)(v11, v7, v1, (void (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase);
}

uint64_t NavigationPath.append<A>(box:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  char v7;
  uint64_t v8;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v1 = swift_retain();
    MEMORY[0x18D75CF58](v1);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 8);
    v4 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)v0;
    outlined copy of NavigationPath.Representation(v8, v3, v4, 0);
    v5 = swift_retain();
    MEMORY[0x18D75CF58](v5);
    if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v6[1] = 0;
    v6[2] = 0;
    v6[0] = v8;
    v7 = 0;
    return NavigationPath.items.setter((uint64_t)v6);
  }
}

void NavigationPath.CodableRepresentation.updatePossibilities(from:to:into:)(int64_t a1, int64_t a2, uint64_t a3)
{
  int64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  int v18;
  id v19;
  uint64_t *v20;
  uint64_t v22;
  unint64_t v23;

  v5 = v4;
  v8 = *v3;
  v9 = v3[1];
  v10 = v3[2];
  if ((unint64_t)v8 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    v12 = *(_QWORD *)(v9 + 16);
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
    }
    else if (!(v10 >> 62))
    {
      v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v8;
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v8 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    if (v8 < a1)
      goto LABEL_29;
    if (v8 == a1)
      return;
    while (a1 < v8)
    {
      v15 = NavigationPath.CodableRepresentation.item(at:given:)(a1, *(_QWORD *)(a3 + 32));
      if (v5)
      {
        v10 = v5;
        v5 = 0;
        v16 = (id)v10;
        v17 = (id)v10;
        v9 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for Error);
        v18 = swift_dynamicCast();

        if (v18)
        {
          swift_willThrow();
          return;
        }
        v19 = (id)v10;
        if (swift_dynamicCast())
        {
          v9 = v23;
          if (v23 >= 2)
          {

            lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
            swift_allocError();
            *v20 = v22;
            v20[1] = v23;
            swift_willThrow();

            return;
          }
          outlined consume of NavigationPath.Error(v22, v23);
        }

      }
      else
      {
        v10 = v15;
        if (a1 < a2)
          (*(void (**)(uint64_t, int64_t))(*(_QWORD *)v15 + 168))(a3, a1);
        swift_release();
      }
      if (v8 == ++a1)
        return;
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t NavigationPath.CodableRepresentation.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;

  v8 = *v4;
  v23 = v4[2];
  if ((unint64_t)*v4 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9)
      goto LABEL_19;
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v9)
      goto LABEL_19;
  }
  v10 = v8 & 0xC000000000000001;
  if ((v8 & 0xC000000000000001) != 0)
  {
LABEL_36:
    v11 = MEMORY[0x18D75E3BC](0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_38;
    }
    v11 = *(_QWORD *)(v8 + 32);
    swift_retain();
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 152))(a1, a2, a3);
  swift_release();
  if ((v12 & 1) != 0)
  {
LABEL_7:
    v9 = 1;
LABEL_40:
    swift_bridgeObjectRelease();
    return v9;
  }
  v13 = 0;
  v3 = v9 - 1;
  while (v3 != v13)
  {
    v16 = v13 + 1;
    if (v10)
    {
      v14 = MEMORY[0x18D75E3BC](v13 + 1, v8);
      if (__OFADD__(v16, 1))
        goto LABEL_16;
    }
    else
    {
      if (v16 >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_17;
      v14 = *(_QWORD *)(v8 + 8 * v13 + 40);
      swift_retain();
      if (__OFADD__(v16, 1))
      {
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 152))(a1, a2, a3);
    swift_release();
    ++v13;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  v3 = v23;
  if (!(v23 >> 62))
  {
    v8 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_21;
LABEL_39:
    v9 = 0;
    goto LABEL_40;
  }
LABEL_38:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v8 = result;
  if (!result)
    goto LABEL_39;
LABEL_21:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v18 = MEMORY[0x18D75E3BC](0, v3);
LABEL_24:
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 152))(a1, a2, a3);
    swift_release();
    if ((v19 & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v10 = 0;
      v20 = v8 - 1;
      while (1)
      {
        v9 = v20 != v10;
        if (v20 == v10)
          break;
        v22 = v10 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x18D75E3BC](v10 + 1, v3);
          if (__OFADD__(v22, 1))
            goto LABEL_34;
        }
        else
        {
          if (v22 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_35;
          v8 = *(_QWORD *)(v3 + 8 * v10 + 40);
          swift_retain();
          if (__OFADD__(v22, 1))
          {
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
        }
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 152))(a1, a2, a3);
        swift_release();
        ++v10;
        if ((v21 & 1) != 0)
          goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v18 = *(_QWORD *)(v3 + 32);
    swift_retain();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

unint64_t NavigationPath.CodableRepresentation.item(at:given:)(unint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  _OWORD *v54;
  uint64_t *v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;

  v4 = v3;
  v5 = v2;
  v66 = a1;
  v7 = type metadata accessor for String.Encoding();
  v68 = *(_QWORD *)(v7 - 8);
  v69 = v7;
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v7, v8);
  v67 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v2 >> 62)
  {
LABEL_44:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  result = v66;
  if (v11 <= (uint64_t)v66)
  {
    if (!(v12 >> 62))
    {
      v15 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      v16 = v66 - v15;
      if (!__OFSUB__(v66, v15))
        goto LABEL_10;
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
  }
  else
  {
    if ((v12 & 0xC000000000000001) != 0)
      return MEMORY[0x18D75E3BC](v9);
    if ((v66 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) > v66)
    {
      v14 = v12 + 8 * v66;
LABEL_33:
      v49 = *(_BYTE **)(v14 + 32);
      swift_retain();
      return (unint64_t)v49;
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v60 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  result = v66;
  v16 = v66 - v60;
  if (__OFSUB__(v66, v60))
    goto LABEL_50;
LABEL_10:
  v65 = a2;
  v17 = v5 + 1;
  v18 = *(_QWORD *)(v5[1] + 16);
  result = v16 - v18;
  if (v16 < v18)
  {
    v63 = xmmword_187BF9830;
    v64 = v5;
    v62 = v5 + 1;
    while (1)
    {
      v19 = (_QWORD *)*v17;
      if (!*(_QWORD *)(*v17 + 16))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v20 = v19[2];
        if (!v20)
          goto LABEL_42;
      }
      else
      {
        v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
        v20 = v19[2];
        if (!v20)
          goto LABEL_42;
      }
      v71 = v16;
      v21 = v20 - 1;
      v22 = &v19[4 * v21];
      v24 = v22[4];
      v23 = v22[5];
      v19[2] = v21;
      *v17 = v19;
      v25 = v67;
      static String.Encoding.utf8.getter();
      v26 = String.data(using:allowLossyConversion:)();
      a2 = v27;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v25, v69);
      if (a2 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
        swift_allocError();
        *v54 = xmmword_187BF9840;
        swift_willThrow();
        goto LABEL_38;
      }
      v70 = v4;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      v28 = JSONDecoder.init()();
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CodingUserInfoKey, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (CodingUserInfoKey, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      type metadata accessor for (CodingUserInfoKey, Any)();
      v30 = v29;
      v31 = *(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80);
      v32 = (v31 + 32) & ~v31;
      v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = v63;
      v34 = *(int *)(v30 + 48);
      if (one-time initialization token for navigationPathTypesByTag != -1)
        swift_once();
      v35 = v33 + v32;
      v36 = (unint64_t *)(v33 + v32 + v34);
      v37 = type metadata accessor for CodingUserInfoKey();
      v38 = __swift_project_value_buffer(v37, (uint64_t)static CodingUserInfoKey.navigationPathTypesByTag);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v38, v37);
      type metadata accessor for [String : Decodable & Encodable.Type]();
      v36[3] = v39;
      v40 = v65;
      *v36 = v65;
      swift_bridgeObjectRetain();
      specialized Dictionary.init(dictionaryLiteral:)(v33);
      dispatch thunk of JSONDecoder.userInfo.setter();
      v5 = v64;
      if (!*(_QWORD *)(v40 + 16))
        goto LABEL_36;
      swift_bridgeObjectRetain();
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v23);
      if ((v42 & 1) == 0)
        break;
      v43 = *(_QWORD *)(v40 + 56) + 24 * v41;
      v44 = *(_BYTE **)v43;
      v45 = *(_QWORD *)(v43 + 8);
      v46 = *(_QWORD *)(v43 + 16);
      swift_bridgeObjectRelease_n();
      v47 = v70;
      v48 = decode #1 <A>(_:) in NavigationPath.CodableRepresentation.item(at:given:)((uint64_t)v44, v28, v26, a2, v44, v45, v46);
      v4 = v47;
      if (v47)
        goto LABEL_37;
      v49 = v48;
      v50 = swift_retain();
      MEMORY[0x18D75CF58](v50);
      v17 = v62;
      if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined consume of Data?(v26, a2);
      v51 = v71;
      if (!v71)
        return (unint64_t)v49;
      swift_release();
      v52 = __OFSUB__(v51, 1);
      v16 = v51 - 1;
      if (v52)
        goto LABEL_43;
    }
    swift_bridgeObjectRelease();
LABEL_36:
    lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
    swift_allocError();
    *v55 = v24;
    v55[1] = v23;
    swift_willThrow();
LABEL_37:
    swift_release();
    outlined consume of Data?(v26, a2);
    v17 = v62;
LABEL_38:
    v72 = 0;
    v73 = 0xE000000000000000;
    _StringGuts.grow(_:)(141);
    v56._object = (void *)0x8000000187BDC370;
    v56._countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v56);
    v74 = v66;
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58._countAndFlagsBits = 0xD000000000000059;
    v58._object = (void *)0x8000000187BDC3B0;
    String.append(_:)(v58);
    v49 = (_BYTE *)v73;
    MEMORY[0x18D75AC90](v72, v73);
    swift_bridgeObjectRelease();
    v59 = *(_QWORD *)(*v17 + 16);
    result = v71;
    if (v59 < v71)
      goto LABEL_53;
    specialized Array.replaceSubrange<A>(_:with:)(v71, v59);
    swift_bridgeObjectRelease();
    v5[2] = MEMORY[0x1E0DEE9D8];
    swift_willThrow();
    return (unint64_t)v49;
  }
  v53 = v5[2];
  if ((v53 & 0xC000000000000001) != 0)
    return MEMORY[0x18D75E3BC](v9);
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (result < *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = v53 + 8 * result;
    goto LABEL_33;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t Array<A>.isCodable.getter(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  uint64_t v11;
  char v12;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_21:
    v9 = 1;
LABEL_22:
    swift_bridgeObjectRelease();
    return v9;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_21;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = MEMORY[0x18D75E3BC](0, a1);
    v4 = v5;
LABEL_6:
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v5);
    swift_release();
    if ((v6 & 1) != 0)
    {
      v7 = 0;
      v8 = v2 - 1;
      while (1)
      {
        v9 = v8 == v7;
        if (v8 == v7)
          break;
        v10 = v7 + 1;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v11 = MEMORY[0x18D75E3BC](v7 + 1, a1);
          if (__OFADD__(v10, 1))
            goto LABEL_18;
        }
        else
        {
          if (v10 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_19;
          v11 = *(_QWORD *)(a1 + 8 * v7 + 40);
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v12 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 128))();
        swift_release();
        ++v7;
        if ((v12 & 1) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_22;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t NavigationPath.CodableRepresentation.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD *v21;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v19, v20);
    v5 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v21 = a2;
    if ((v5 & 1) == 0)
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v20);
        v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        v11 = v10;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v20);
        v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        v14 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v16 = v6[2];
        v15 = v6[3];
        if (v16 >= v15 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v6);
        v6[2] = v16 + 1;
        v17 = &v6[4 * v16];
        v17[4] = v9;
        v17[5] = v11;
        v17[6] = v12;
        v17[7] = v14;
        __swift_project_boxed_opaque_existential_1(v19, v20);
      }
      while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v7 = v21;
    v8 = MEMORY[0x1E0DEE9D8];
    *v21 = MEMORY[0x1E0DEE9D8];
    v7[1] = v6;
    v7[2] = v8;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t NavigationPath.CodableRepresentation.encode(to:)(_QWORD *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _BYTE v17[24];
  uint64_t v18;
  uint64_t v19;

  v3 = *v1;
  v15 = v1[1];
  v4 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    v16 = v3;
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v16 = v3;
    if (v5)
    {
LABEL_3:
      v19 = v4 & 0xFFFFFFFFFFFFFF8;
      do
      {
        v6 = __OFSUB__(v5--, 1);
        if (v6)
        {
          __break(1u);
LABEL_32:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        if ((v4 & 0xC000000000000001) != 0)
        {
          v7 = MEMORY[0x18D75E3BC](v5, v4);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            swift_bridgeObjectRelease();
            goto LABEL_30;
          }
          if (v5 >= *(_QWORD *)(v19 + 16))
            goto LABEL_34;
          v7 = *(_QWORD *)(v4 + 32 + 8 * v5);
          swift_retain();
        }
        (*(void (**)(void))(*(_QWORD *)v7 + 144))();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        if (v2)
          goto LABEL_32;
        v8 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 136))(v8);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        swift_release();
        swift_bridgeObjectRelease();
      }
      while (v5);
    }
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v15 + 16);
  if (v9)
  {
    v10 = swift_bridgeObjectRetain() + 56;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_bridgeObjectRelease();
      if (v2)
        goto LABEL_35;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_bridgeObjectRelease();
      v10 += 32;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  if (v16 >> 62)
    goto LABEL_42;
  v11 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    v19 = v16 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      v6 = __OFSUB__(v11--, 1);
      if (v6)
        break;
      if ((v16 & 0xC000000000000001) != 0)
      {
        v12 = MEMORY[0x18D75E3BC](v11, v16);
      }
      else
      {
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_40;
        if (v11 >= *(_QWORD *)(v19 + 16))
          goto LABEL_41;
        v12 = *(_QWORD *)(v16 + 32 + 8 * v11);
        swift_retain();
      }
      (*(void (**)(void))(*(_QWORD *)v12 + 144))();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (v2)
        goto LABEL_32;
      v13 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 136))(v13);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      if (!v11)
        goto LABEL_30;
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
  }
LABEL_30:
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

_BYTE *decode #1 <A>(_:) in NavigationPath.CodableRepresentation.item(at:given:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v19[2];

  v10 = a5;
  v11 = *((_QWORD *)a5 - 1);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v19 - v16;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (!v7)
  {
    type metadata accessor for DecodedItemBox(0, (uint64_t)v10, a6, a7);
    (*(void (**)(char *, char *, _BYTE *))(v11 + 32))(v13, v17, v10);
    v10 = (_BYTE *)swift_allocObject();
    (*(void (**)(_BYTE *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 192) - 8) + 32))(&v10[*(_QWORD *)(*(_QWORD *)v10 + 216)], v13);
    v10[16] = 0;
  }
  return v10;
}

_BYTE *DecodedItemBox.__allocating_init(_:)(uint64_t a1)
{
  _BYTE *v2;

  v2 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 192) - 8) + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 216)], a1);
  v2[16] = 0;
  return v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NavigationPath.CodableRepresentation@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return NavigationPath.CodableRepresentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NavigationPath.CodableRepresentation(_QWORD *a1)
{
  return NavigationPath.CodableRepresentation.encode(to:)(a1);
}

uint64_t NavigationPath.mutateWithCodableCollectionProxy(transform:)(void (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v2 = v1;
    v4 = *(_QWORD *)v1;
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v2 + 16);
    v7 = swift_bridgeObjectRetain();
    if ((specialized Sequence.allSatisfy(_:)(v7) & 1) != 0)
    {
      v13 = v4;
      v10 = 0;
      v11 = 0;
      v9 = MEMORY[0x1E0DEE9D8];
      v12 = 0;
      NavigationPath.items.setter((uint64_t)&v9);
      a1(&v13);
      v10 = 0;
      v11 = 0;
      v9 = v13;
      v12 = 0;
      return NavigationPath.items.setter((uint64_t)&v9);
    }
    else
    {
      outlined consume of NavigationPath.Representation(v4, v5, v6, 0);
      lazy protocol witness table accessor for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t NavigationPath.mutateWithCollectionProxy(transform:)(void (*a1)(uint64_t *))
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if ((v1[3] & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v8 = *v1;
    v5 = 0;
    v6 = 0;
    v4 = MEMORY[0x1E0DEE9D8];
    v7 = 0;
    swift_bridgeObjectRetain();
    NavigationPath.items.setter((uint64_t)&v4);
    a1(&v8);
    v5 = 0;
    v6 = 0;
    v4 = v8;
    v7 = 0;
    return NavigationPath.items.setter((uint64_t)&v4);
  }
  return result;
}

uint64_t NavigationPath.withCollectionProxy(_:)(void (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 8);
    v3 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)v1;
    v5 = v7;
    swift_bridgeObjectRetain();
    a1(&v7);
    return outlined consume of NavigationPath.Representation(v5, v4, v3, 0);
  }
  return result;
}

uint64_t static NavigationPath.CollectionProxyError.== infix(_:_:)()
{
  return 1;
}

void NavigationPath.CollectionProxyError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int NavigationPath.CollectionProxyError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t NavigationPath.CodableCollectionProxy.startIndex.getter()
{
  return 0;
}

unint64_t NavigationPath.CodableCollectionProxy.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      v5 = *(_QWORD *)(v4 + 8 * result + 32);
      v6 = swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_10;
  }
  v6 = MEMORY[0x18D75E3BC]();
  v5 = v6;
LABEL_5:
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v5 + 120))(&v7, v6);
  result = swift_release();
  if (v8)
    return outlined init with take of Decodable & Encodable & Hashable(&v7, a2);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v4 = a2;
    v5 = a1;
    if (!(*v3 >> 62))
    {
      v8 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v8 >= a2)
        goto LABEL_4;
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v8 < v4)
    goto LABEL_37;
LABEL_4:
  v8 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v7 = v6 >> 62;
  if (!(v6 >> 62))
  {
    v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = v9 - v8;
    if (!__OFSUB__(v9, v8))
      goto LABEL_7;
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v12 = v11 + v33;
    if (!__OFADD__(v11, v33))
      goto LABEL_9;
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = *v3;
    goto LABEL_16;
  }
LABEL_39:
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v10 = v9 - v8;
  if (__OFSUB__(v9, v8))
    goto LABEL_41;
LABEL_7:
  v33 = v10;
  if (*v3 >> 62)
    goto LABEL_42;
  v11 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v12 = v11 + v10;
  if (__OFADD__(v11, v10))
    goto LABEL_44;
LABEL_9:
  v13 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v13;
  v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v13 & 0x8000000000000000) == 0
    && (v13 & 0x4000000000000000) == 0)
  {
    v15 = v13 & 0xFFFFFFFFFFFFFF8;
    if (v12 <= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v11 = 1;
  }
  v32 = v5;
  v8 = v4;
  v4 = v9;
  v9 = v7;
  v7 = v6;
  if (v13 >> 62)
    goto LABEL_45;
  v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v12)
    v16 = v12;
  swift_bridgeObjectRetain();
  *v3 = MEMORY[0x18D75E3C8](v11, v16, 1, v13);
  swift_bridgeObjectRelease();
  v15 = *v3 & 0xFFFFFFFFFFFFFF8;
  v6 = v7;
  v7 = v9;
  v9 = v4;
  v4 = v8;
  v5 = v32;
LABEL_19:
  v17 = v15 + 32;
  v18 = v15 + 32 + 8 * v5;
  type metadata accessor for NavigationPath_ItemBoxBase();
  swift_arrayDestroy();
  v19 = v33;
  if (!v33)
  {
LABEL_29:
    if (v9 < 1)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return specialized Array._endMutation()();
    }
    if (v7)
    {
      v26 = swift_bridgeObjectRetain();
      v27 = specialized _copyCollectionToContiguousArray<A>(_:)(v26);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v27 + 4), v27[2], v9, v18, v28, (void (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase);
      swift_release();
      goto LABEL_34;
    }
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) == v9)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_52;
  }
  if (!(*v3 >> 62))
  {
    v20 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v20 - v4;
    if (!__OFSUB__(v20, v4))
      goto LABEL_22;
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v19 = v33;
  v21 = v30 - v4;
  if (__OFSUB__(v30, v4))
    goto LABEL_48;
LABEL_22:
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = (char *)(v18 + 8 * v9);
    v23 = (char *)(v17 + 8 * v4);
    if (v22 != v23 || v22 >= &v23[8 * v21])
    {
      memmove(v22, v23, 8 * v21);
      v19 = v33;
    }
    if (!(*v3 >> 62))
    {
      v24 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v25 = v24 + v19;
      if (!__OFADD__(v24, v19))
      {
LABEL_28:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v25;
        goto LABEL_29;
      }
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_49:
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v25 = v31 + v33;
    if (!__OFADD__(v31, v33))
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_53:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = (uint64_t)&v5[120 * a1 + 32];
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_20;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v14 + 120);
    v19 = &v5[120 * a2 + 32];
    if ((char *)(v14 + 120) != v19 || v18 >= &v19[120 * v17])
      memmove(v18, v19, 120 * v17);
    v20 = *((_QWORD *)v5 + 2);
    v16 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v16)
    {
      *((_QWORD *)v5 + 2) = v21;
LABEL_20:
      outlined init with copy of SwiftUIAnySortComparator(a3, (uint64_t)&v5[120 * a1 + 32]);
      return outlined destroy of CollectionOfOne<FocusStoreList.Item>(a3, &lazy cache variable for type metadata for CollectionOfOne<SwiftUIAnySortComparator>);
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(_QWORD *)v3 = v5;
  }
  v14 = (uint64_t)&v5[9 * a1 + 4];
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_22;
  v15 = v5[2];
  v16 = v15 - a2;
  if (__OFSUB__(v15, a2))
    goto LABEL_28;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = v14 + 72;
    v18 = (unint64_t)&v5[9 * a2 + 4];
    if (v14 + 72 < v18 || v17 >= v18 + 72 * v16)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != v18)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v19 = v5[2];
    v20 = __OFADD__(v19, v9);
    v21 = v19 + v9;
    if (!v20)
    {
      v5[2] = v21;
LABEL_22:
      outlined init with copy of FocusStoreList.Item(a3, v14);
      return outlined destroy of CollectionOfOne<FocusStoreList.Item>(a3, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>);
    }
    goto LABEL_29;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[56 * a1 + 32];
  result = (char *)swift_arrayDestroy();
  if (!v9)
    goto LABEL_20;
  v16 = *((_QWORD *)v5 + 2);
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 56);
    v19 = &v5[56 * a2 + 32];
    if ((char *)(v14 + 56) != v19 || result >= &v19[56 * v18])
      result = (char *)memmove(result, v19, 56 * v18);
    v20 = *((_QWORD *)v5 + 2);
    v17 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v17)
    {
      *((_QWORD *)v5 + 2) = v21;
LABEL_20:
      v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v14 + 48) = *(_QWORD *)(a3 + 48);
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v10 > *((_QWORD *)v5 + 3) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v5);
    v5 = result;
  }
  v14 = &v5[8 * a1 + 32];
  if (!v9)
    goto LABEL_20;
  v15 = *((_QWORD *)v5 + 2);
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    result = v14 + 8;
    v18 = &v5[8 * a2 + 32];
    if (v14 + 8 != v18 || result >= &v18[8 * v17])
      result = (char *)memmove(result, v18, 8 * v17);
    v19 = *((_QWORD *)v5 + 2);
    v16 = __OFADD__(v19, v9);
    v20 = v19 + v9;
    if (!v16)
    {
      *((_QWORD *)v5 + 2) = v20;
LABEL_20:
      *(_QWORD *)v14 = a3;
      *v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, unint64_t a3)
{
  unint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = a3;
    v4 = a2;
    v5 = a1;
    if (!(*v3 >> 62))
    {
      v9 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 >= a2)
        goto LABEL_4;
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)v9 < v4)
    goto LABEL_37;
LABEL_4:
  v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v7 = v8 >> 62;
  if (!(v8 >> 62))
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v6;
    if (!__OFSUB__(v10, v6))
      goto LABEL_7;
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = v12 + v32;
    if (!__OFADD__(v12, v32))
      goto LABEL_9;
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_39:
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v11 = v10 - v6;
  if (__OFSUB__(v10, v6))
    goto LABEL_41;
LABEL_7:
  v9 = *v3;
  v32 = v11;
  if (*v3 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 + v11;
  if (__OFADD__(v12, v11))
    goto LABEL_44;
LABEL_9:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v30 = v7;
  v31 = v8;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v15 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v12 = 1;
  }
  if (v9 >> 62)
    goto LABEL_45;
  v16 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x18D75E3C8](v12, v16, 1, v9);
  swift_bridgeObjectRelease();
  *v3 = v9;
  v15 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  v17 = v15 + 32 + 8 * v5;
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  swift_arrayDestroy();
  v18 = v32;
  if (!v32)
  {
LABEL_29:
    if (v10 < 1)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return specialized Array._endMutation()();
    }
    if (v30)
    {
      v25 = swift_bridgeObjectRetain();
      v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v25);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v26 + 4), v26[2], v10, v17, 0, (void (*)(uint64_t))type metadata accessor for NSObject & PlatformAccessibilityElementProtocol);
      swift_release();
      goto LABEL_34;
    }
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) == v10)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_52;
  }
  if (!(v9 >> 62))
  {
    v19 = *(_QWORD *)(v15 + 16);
    v20 = v19 - v4;
    if (!__OFSUB__(v19, v4))
      goto LABEL_22;
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v18 = v32;
  v20 = v28 - v4;
  if (__OFSUB__(v28, v4))
    goto LABEL_48;
LABEL_22:
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = (char *)(v17 + 8 * v10);
    v22 = (char *)(v15 + 32 + 8 * v4);
    if (v21 != v22 || v21 >= &v22[8 * v20])
    {
      memmove(v21, v22, 8 * v20);
      v18 = v32;
    }
    if (!(v9 >> 62))
    {
      v23 = *(_QWORD *)(v15 + 16);
      v24 = v23 + v18;
      if (!__OFADD__(v23, v18))
      {
LABEL_28:
        *(_QWORD *)(v15 + 16) = v24;
        goto LABEL_29;
      }
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_49:
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v24 = v29 + v32;
    if (!__OFADD__(v29, v32))
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_53:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  char **v4;
  char *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v15;
  char *v16;
  char *result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = *v4;
  v7 = *((_QWORD *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > *((_QWORD *)v6 + 3) >> 1)
  {
    if (v7 <= v11)
      v15 = v7 + v10;
    else
      v15 = v7;
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  v16 = &v6[16 * a1 + 32];
  result = (char *)swift_arrayDestroy();
  if (!v10)
    goto LABEL_20;
  v18 = *((_QWORD *)v6 + 2);
  v19 = __OFSUB__(v18, a2);
  v20 = v18 - a2;
  if (v19)
    goto LABEL_26;
  if ((v20 & 0x8000000000000000) == 0)
  {
    result = v16 + 16;
    v21 = &v6[16 * a2 + 32];
    if (v16 + 16 != v21 || result >= &v21[16 * v20])
      result = (char *)memmove(result, v21, 16 * v20);
    v22 = *((_QWORD *)v6 + 2);
    v19 = __OFADD__(v22, v10);
    v23 = v22 + v10;
    if (!v19)
    {
      *((_QWORD *)v6 + 2) = v23;
LABEL_20:
      *(_QWORD *)v16 = a3;
      *((_QWORD *)v16 + 1) = a4;
      *v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char **v5;
  char *v7;
  int64_t v8;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  char *result;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v7 = *v5;
  v8 = *((_QWORD *)*v5 + 2);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v12 > *((_QWORD *)v7 + 3) >> 1)
  {
    if (v8 <= v12)
      v17 = v8 + v11;
    else
      v17 = v8;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v17, 1, v7);
    v7 = result;
  }
  v18 = (uint64_t)&v7[24 * a1 + 32];
  if (!v11)
    goto LABEL_20;
  v19 = *((_QWORD *)v7 + 2);
  v20 = __OFSUB__(v19, a2);
  v21 = v19 - a2;
  if (v20)
    goto LABEL_26;
  if ((v21 & 0x8000000000000000) == 0)
  {
    result = (char *)(v18 + 24);
    v22 = &v7[24 * a2 + 32];
    v23 = 24 * v21;
    if ((char *)(v18 + 24) != v22 || result >= &v22[v23])
      result = (char *)memmove(result, v22, v23);
    v24 = *((_QWORD *)v7 + 2);
    v20 = __OFADD__(v24, v11);
    v25 = v24 + v11;
    if (!v20)
    {
      *((_QWORD *)v7 + 2) = v25;
LABEL_20:
      *(_QWORD *)v18 = a3;
      *(_QWORD *)(v18 + 8) = a4;
      *(_BYTE *)(v18 + 16) = a5 & 1;
      *v5 = v7;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy(_QWORD *a1, unint64_t *a2))(uint64_t *a1)
{
  void *v4;

  v4 = malloc(0x38uLL);
  *a1 = v4;
  NavigationPath.CodableCollectionProxy.subscript.getter(*a2, (uint64_t)v4);
  return protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy;
}

void protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  __swift_destroy_boxed_opaque_existential_1(*a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance NavigationPath.CodableCollectionProxy(_QWORD *a1)
{
  _QWORD *v1;

  return specialized Collection<>.subscript.getter(*a1, a1[1], *v1);
}

uint64_t protocol witness for Collection.count.getter in conformance NavigationPath.CodableCollectionProxy()
{
  _QWORD *v0;

  return specialized Collection.count.getter(*v0);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationPath.CodableCollectionProxy@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationPath.CodableCollectionProxy(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, _QWORD))specialized Collection.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance NavigationPath.CodableCollectionProxy()
{
  return RangeReplaceableCollection.init<A>(_:)();
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance NavigationPath.CodableCollectionProxy()
{
  return RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance NavigationPath.CodableCollectionProxy(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v4[56];

  v2 = *a2;
  outlined init with take of Decodable & Encodable & Hashable(a1, (uint64_t)v4);
  specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of CollectionOfOne<Decodable & Encodable & Hashable>((uint64_t)v4);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance NavigationPath.CodableCollectionProxy()
{
  return RangeReplaceableCollection.insert<A>(contentsOf:at:)();
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance NavigationPath.CodableCollectionProxy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1, a2);
}

double protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance NavigationPath.CodableCollectionProxy@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance NavigationPath.CodableCollectionProxy(char a1)
{
  return specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(a1);
}

uint64_t specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *v1;
  if ((a1 & 1) != 0)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6 < 0)
        __break(1u);
      v4 = v6;
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    return specialized Array.replaceSubrange<A>(_:with:)(0, v4, MEMORY[0x1E0DEE9D8]);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v1 = MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance NavigationPath.CodableCollectionProxy(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NavigationPath.CodableCollectionProxy()
{
  unint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NavigationPath.CodableCollectionProxy(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t NavigationPath.CollectionProxy.startIndex.getter()
{
  return 0;
}

uint64_t NavigationPath.CodableCollectionProxy.endIndex.getter()
{
  _QWORD *v0;
  uint64_t v2;

  if (!(*v0 >> 62))
    return *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

SwiftUI::NavigationPath::CollectionProxy __swiftcall NavigationPath.CollectionProxy.init()()
{
  _QWORD *v0;
  SwiftUI::NavigationPath::CollectionProxy result;

  *v0 = MEMORY[0x1E0DEE9D8];
  return result;
}

Swift::Int __swiftcall NavigationPath.CollectionProxy.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

unint64_t NavigationPath.CollectionProxy.subscript.getter(unint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x18D75E3BC]();
    v3 = v4;
    goto LABEL_5;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
  {
    v3 = *(_QWORD *)(v2 + 8 * result + 32);
    v4 = swift_retain();
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 112))(v4);
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;

  v19 = a2;
  v18 = a1;
  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)&v18 - v13;
  v24 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a3, a4, v12);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v23)
      break;
    outlined init with take of OptionalBinaryInteger(&v22, (uint64_t)v20);
    v15 = v21;
    v16 = __swift_project_boxed_opaque_existential_1(v20, v21);
    specialized append #1 <A><A1>(_:) in NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)((uint64_t)v16, &v24, a4, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, AssociatedTypeWitness);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(v18, v19, v24);
}

uint64_t specialized append #1 <A><A1>(_:) in NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ItemBox(0, v11, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a4);
  v12 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 192) - 8) + 32))(&v12[*(_QWORD *)(*(_QWORD *)v12 + 208)], v9);
  v12[16] = 0;
  v13 = swift_beginAccess();
  MEMORY[0x18D75CF58](v13);
  if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int128 v20;
  uint64_t v21;
  unint64_t v22;

  v18 = a2;
  v17 = a1;
  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v14 = (char *)&v17 - v13;
  v22 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a3, a4, v12);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (v21)
  {
    outlined init with take of Decodable & Encodable & Hashable(&v20, (uint64_t)v19);
    v15 = __swift_project_boxed_opaque_existential_1(v19, v19[3]);
    specialized append #1 <A><A1>(_:) in NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)((uint64_t)v15, (uint64_t)&v22);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, AssociatedTypeWitness);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(v17, v18, v22);
}

void specialized append #1 <A><A1>(_:) in NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for CodableItemBox();
}

uint64_t sub_1872F4238()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v0);
  v5 = (_BYTE *)swift_allocObject();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 192) - 8) + 32))(&v5[*(_QWORD *)(*(_QWORD *)v5 + 224)], v3);
  v5[16] = 0;
  v6 = swift_beginAccess();
  MEMORY[0x18D75CF58](v6);
  if (*(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

void protocol witness for Collection.endIndex.getter in conformance NavigationPath.CodableCollectionProxy(uint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *a1 = v4;
}

void (*protocol witness for Collection.subscript.read in conformance NavigationPath.CollectionProxy(void **a1, unint64_t *a2))(uint64_t *a1)
{
  *a1 = malloc(0x28uLL);
  NavigationPath.CollectionProxy.subscript.getter(*a2);
  return protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy;
}

uint64_t protocol witness for Collection.indices.getter in conformance NavigationPath.CodableCollectionProxy@<X0>(unint64_t *a1@<X8>)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  *a1 = *v1;
  a1[1] = 0;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  a1[2] = v4;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance NavigationPath.CodableCollectionProxy()
{
  _QWORD *v0;
  uint64_t v1;

  if (*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = *(_QWORD *)((*v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 == 0;
}

uint64_t *protocol witness for Collection.index(_:offsetBy:) in conformance NavigationPath.CodableCollectionProxy@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v3 = *result;
    if (!a2)
    {
LABEL_6:
      *a3 = v3;
      return result;
    }
    v4 = v3 ^ 0x7FFFFFFFFFFFFFFFLL;
    v5 = a2 - 1;
    while (v4 > v5)
    {
      ++v3;
      if (!--a2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationPath.CodableCollectionProxy@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result;
  char v7;

  result = a4(*a1, a2, *a3);
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for Collection.distance(from:to:) in conformance NavigationPath.CodableCollectionProxy(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;

  v2 = *result;
  v3 = *a2;
  if (*a2 < *result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*a2 == *result)
    return 0;
  v4 = (uint64_t *)(v3 - v2);
  if (v3 > v2)
  {
    result = 0;
    v5 = v3 + ~v2;
    while (v5 <= 0x7FFFFFFFFFFFFFFELL)
    {
      result = (uint64_t *)((char *)result + 1);
      if (v4 == result)
        return result;
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CollectionProxy(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))
{
  a7(*a1, a1[1], a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance NavigationPath.CollectionProxy(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v4[40];

  v2 = *a2;
  outlined init with take of OptionalBinaryInteger(a1, (uint64_t)v4);
  specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of CollectionOfOne<Hashable>((uint64_t)v4);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance NavigationPath.CollectionProxy(uint64_t *a1)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance NavigationPath.CollectionProxy(uint64_t *a1)
{
  return specialized Array.replaceSubrange<A>(_:with:)(*a1, a1[1], MEMORY[0x1E0DEE9D8]);
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance NavigationPath.CollectionProxy(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1, a2);
}

void protocol witness for Sequence.makeIterator() in conformance NavigationPath.CollectionProxy(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NavigationPath.CollectionProxy()
{
  unint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NavigationPath.CollectionProxy(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

void NavigationPath_ItemBoxBase.value.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.codableValue.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.isCodable.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.jsonEncoding.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.valueTypeTag.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.contains<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.equals(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.updatePossibilities(into:pathIndex:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void NavigationPath_ItemBoxBase.view<A>(basedOn:at:applying:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationPath_ItemBoxBase(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 160))(*a2) & 1;
}

uint64_t ItemBox.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
  v5 = *(_QWORD *)(*v1 + 192);
  a1[3] = v5;
  a1[4] = *(_QWORD *)(v3 + 200);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
}

uint64_t ItemBox.isCodable.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(112);
  v0._countAndFlagsBits = 0x100000000000005BLL;
  v0._object = (void *)0x8000000187BDC440;
  String.append(_:)(v0);
  swift_getMetatypeMetadata();
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000187BDC4A0;
  v2._countAndFlagsBits = 0x1000000000000013;
  String.append(_:)(v2);
  MEMORY[0x18D75AC90](0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  return 0;
}

void ItemBox.jsonEncoding.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ItemBox.valueTypeTag.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ItemBox.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char v25;
  _QWORD v27[2];

  v27[0] = a3;
  v27[1] = a1;
  v5 = *(_QWORD *)v3;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v27 - v9;
  v11 = *(_QWORD *)(v5 + 192);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))(v15, &v3[*(_QWORD *)(v5 + 208)], v11, v19);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v23)
  {
    v24(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v10, a2);
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a2);
  }
  else
  {
    v24(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t ItemBox.equals(_:)()
{
  uint64_t result;
  char v1;

  result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

unint64_t ItemBox.updatePossibilities(into:pathIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 208), a2, *(_QWORD *)(*(_QWORD *)v2 + 192));
}

uint64_t ItemBox.view<A>(basedOn:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 208), a2, a3, a4, *(_QWORD *)(*(_QWORD *)v6 + 192), a5, a6);
}

uint64_t ItemBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
}

uint64_t ItemBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
  return swift_deallocClassInstance();
}

uint64_t CodableItemBox.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 224);
  v5 = *(_QWORD *)(*v1 + 192);
  a1[3] = v5;
  a1[4] = *(_QWORD *)(v3 + 216);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
}

uint64_t CodableItemBox.codableValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 224);
  v5 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 200);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v3 + 216);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
}

char *CodableItemBox.jsonEncoding.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v1 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v0)
  {
    v7 = v5;
    v8 = v6;
    static String.Encoding.utf8.getter();
    v9 = String.init(data:encoding:)();
    if (v10)
    {
      v4 = (char *)v9;
      outlined consume of Data._Representation(v7, v8);
      swift_release();
      return v4;
    }
    lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
    swift_allocError();
    *v12 = 0;
    v12[1] = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v7, v8);
  }
  swift_release();
  return v4;
}

uint64_t CodableItemBox.valueTypeTag.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t CodableItemBox.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char v25;
  _QWORD v27[2];

  v27[0] = a3;
  v27[1] = a1;
  v5 = *(_QWORD *)v3;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v27 - v9;
  v11 = *(_QWORD *)(v5 + 192);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))(v15, &v3[*(_QWORD *)(v5 + 224)], v11, v19);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v23)
  {
    v24(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v10, a2);
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a2);
  }
  else
  {
    v24(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t CodableItemBox.equals(_:)()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t result;
  char v3;

  v1 = *v0;
  if (swift_dynamicCastClass()
    || (type metadata accessor for DecodedItemBox(0, v1[24], v1[25], v1[26]), (result = swift_dynamicCastClass()) != 0))
  {
    swift_retain();
    v3 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v3 & 1;
  }
  return result;
}

unint64_t CodableItemBox.updatePossibilities(into:pathIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 224), a2, *(_QWORD *)(*(_QWORD *)v2 + 192));
}

uint64_t CodableItemBox.view<A>(basedOn:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 224), a2, a3, a4, *(_QWORD *)(*(_QWORD *)v6 + 192), a5, a6);
}

uint64_t CodableItemBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
}

uint64_t CodableItemBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_deallocClassInstance();
}

uint64_t DecodedItemBox.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2 + *(_QWORD *)(v6 + 216), v3, v4);
  type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for Hashable);
  return swift_dynamicCast();
}

uint64_t DecodedItemBox.codableValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v4 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2 + *(_QWORD *)(v6 + 216), v3, v4);
  type metadata accessor for Decodable & Encodable & Hashable();
  return swift_dynamicCast();
}

char *DecodedItemBox.jsonEncoding.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v1 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v5 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v0)
  {
    v7 = v5;
    v8 = v6;
    static String.Encoding.utf8.getter();
    v9 = String.init(data:encoding:)();
    if (v10)
    {
      v4 = (char *)v9;
      outlined consume of Data._Representation(v7, v8);
      swift_release();
      return v4;
    }
    lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
    swift_allocError();
    *v12 = 0;
    v12[1] = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v7, v8);
  }
  swift_release();
  return v4;
}

uint64_t DecodedItemBox.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  char v25;
  _QWORD v27[2];

  v27[0] = a3;
  v27[1] = a1;
  v5 = *(_QWORD *)v3;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v27 - v9;
  v11 = *(_QWORD *)(v5 + 192);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v22 + 16))(v15, &v3[*(_QWORD *)(v5 + 216)], v11, v19);
  v23 = swift_dynamicCast();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v23)
  {
    v24(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v10, a2);
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, a2);
  }
  else
  {
    v24(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t DecodedItemBox.equals(_:)(_BYTE *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;

  v3 = *v1;
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v6 = (uint64_t)v1 + *(_QWORD *)(v3 + 216);
    MEMORY[0x1E0C80A78](v4, v5);
    v12 = *(_QWORD *)(v3 + 192);
    v13 = v7;
    v14 = 3;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)&v11, v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v8);
    swift_release();
    return v15;
  }
  else if ((v1[2] & 1) != 0)
  {
    return 0;
  }
  else
  {
    a1[16] = 1;
    v10 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)a1 + 160))(v1);
    a1[16] = 0;
    return v10 & 1;
  }
}

unint64_t DecodedItemBox.updatePossibilities(into:pathIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 216), a2, *(_QWORD *)(*(_QWORD *)v2 + 192));
}

uint64_t DecodedItemBox.view<A>(basedOn:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 216), a2, a3, a4, *(_QWORD *)(*(_QWORD *)v6 + 192), a5, a6);
}

uint64_t DecodedItemBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216));
}

uint64_t DecodedItemBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216));
  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for navigationPathTypesByTag()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CodingUserInfoKey?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v8 - v2;
  v4 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v4, static CodingUserInfoKey.navigationPathTypesByTag);
  v5 = __swift_project_value_buffer(v4, (uint64_t)static CodingUserInfoKey.navigationPathTypesByTag);
  CodingUserInfoKey.init(rawValue:)();
  v6 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v5, v3, v4);
  __break(1u);
  return result;
}

uint64_t CodableItemBox.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(18);
  v0._countAndFlagsBits = 0x49656C6261646F43;
  v0._object = (void *)0xEF28786F426D6574;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableItemBox<A>()
{
  return CodableItemBox.description.getter();
}

uint64_t ItemBox.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x28786F426D657449;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ItemBox<A>()
{
  return ItemBox.description.getter();
}

uint64_t DecodedItemBox.description.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(18);
  v0._countAndFlagsBits = 0x496465646F636544;
  v0._object = (void *)0xEF28786F426D6574;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DecodedItemBox<A>()
{
  return DecodedItemBox.description.getter();
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  if (a2 == a3)
  {
    if (result)
    {
      a6(a5);
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for NSObject(0, a5);
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(void), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(void), unint64_t a2, uint64_t a3))(void)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x18D75E3BC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return destroy for ScrollOverlayLayout;
  }
  __break(1u);
  return result;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x18D75E3BC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for NotificationFeedbackImplementation;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x18D75E3BC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return destroy for NavigationDestinationModifier.SeededResolver;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x18D75E3BC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x18D75E3BC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    v3 = a3 + 32 * a2;
    v4 = *(_QWORD *)(v3 + 40);
    v5 = *(_BYTE *)(v3 + 48);
    v6 = *(_QWORD *)(v3 + 56);
    *(_QWORD *)result = *(_QWORD *)(v3 + 32);
    *((_QWORD *)result + 1) = v4;
    *((_BYTE *)result + 16) = v5;
    *((_QWORD *)result + 3) = v6;
    swift_retain();
    return destroy for NavigationDestinationModifier.SeededResolver;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x18D75E3BC](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for ForEach<>.PreferenceTransform.Item;
  }
  __break(1u);
  return result;
}

uint64_t (*specialized Array.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3))(_QWORD)
{
  uint64_t (*result)(_QWORD);

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a2)
  {
    type metadata accessor for IntelligenceElement();
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[16 * a1 + 32];
    v15 = &v4[16 * a2 + 32];
    if (a1 != a2 || result >= &v15[16 * v14])
      result = (char *)memmove(result, v15, 16 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[64 * a1 + 32];
    v15 = &v4[64 * a2 + 32];
    if (a1 != a2 || result >= &v15[64 * v14])
      result = (char *)memmove(result, v15, v14 << 6);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_24;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_24;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_30;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[96 * a1 + 32];
    v15 = &v4[96 * a2 + 32];
    v16 = 96 * v14;
    if (96 * a1 < 96 * a2 || (result < &v15[v16] ? (v17 = a1 == a2) : (v17 = 0), !v17))
      result = (char *)memmove(result, v15, v16);
    v18 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v18, v8);
    v19 = v18 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v19;
LABEL_24:
      *v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_24;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_24;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_30;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[40 * a1 + 32];
    v15 = &v4[40 * a2 + 32];
    v16 = 40 * v14;
    if (40 * a1 < 40 * a2 || (result < &v15[v16] ? (v17 = a1 == a2) : (v17 = 0), !v17))
      result = (char *)memmove(result, v15, v16);
    v18 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v18, v8);
    v19 = v18 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v19;
LABEL_24:
      *v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[24 * a1 + 32];
    v15 = &v4[24 * a2 + 32];
    if (a1 != a2 || result >= &v15[24 * v14])
      result = (char *)memmove(result, v15, 24 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2)
    goto LABEL_31;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v5 = *v3;
  if (*v3 >> 62)
    goto LABEL_34;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v8 - v7;
  if (__OFADD__(v8, v6))
    goto LABEL_36;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if (v5 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x18D75E3C8](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  swift_arrayDestroy();
  if (!v6)
    return specialized Array._endMutation()();
  if (!(v5 >> 62))
  {
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v13 - v2;
    if (!__OFSUB__(v13, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v14 = v20 - v2;
  if (__OFSUB__(v20, v2))
    goto LABEL_40;
LABEL_21:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14)
      memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
    if (!(v5 >> 62))
    {
      v16 = *(_QWORD *)(v11 + 16);
      v17 = v16 + v6;
      if (!__OFADD__(v16, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v17;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v17 = v21 + v6;
    if (!__OFADD__(v21, v6))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, 0, (void (*)(uint64_t))type metadata accessor for AccessibilityNode);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1658]);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))type metadata accessor for (source: IndexPath, destination: IndexPath));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for DisplayList.HostedViewState.Key);
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2)
    goto LABEL_31;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = v8 + v6;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v5 = *v3;
  if (*v3 >> 62)
    goto LABEL_34;
  v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v9 = v8 - v7;
  if (__OFADD__(v8, v6))
    goto LABEL_36;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if (v5 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x18D75E3C8](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for UIFocusItem();
  swift_arrayDestroy();
  if (!v6)
    return specialized Array._endMutation()();
  if (!(v5 >> 62))
  {
    v13 = *(_QWORD *)(v11 + 16);
    v14 = v13 - v2;
    if (!__OFSUB__(v13, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v14 = v20 - v2;
  if (__OFSUB__(v20, v2))
    goto LABEL_40;
LABEL_21:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14)
      memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
    if (!(v5 >> 62))
    {
      v16 = *(_QWORD *)(v11 + 16);
      v17 = v16 + v6;
      if (!__OFADD__(v16, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v17;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v17 = v21 + v6;
    if (!__OFADD__(v21, v6))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
}

uint64_t specialized static NavigationPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42[3];
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v41 = *(_BYTE *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v43 = *(_QWORD *)a1;
  v44 = v2;
  v45 = v4;
  v11 = v5;
  v46 = v5;
  v39 = v6 >> 62;
  v40 = v10;
  v12 = v10 >> 62;
  if (!NavigationPath.Representation.isEmpty.getter())
    goto LABEL_7;
  if (v6 >> 62)
    goto LABEL_44;
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_7:
    while (1)
    {
      v38 = v12;
      v12 = v11;
      if ((v11 & 1) != 0)
        break;
      if (!(v3 >> 62))
      {
        v17 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(v3, v2, v4, 0);
        swift_bridgeObjectRetain();
        if (!v39)
          goto LABEL_18;
        goto LABEL_51;
      }
LABEL_50:
      outlined copy of NavigationPath.Representation(v3, v2, v4, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v3, v2, v4, 0);
      v17 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v3, v2, v4, 0);
      if (!v39)
      {
LABEL_18:
        v18 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_19;
      }
LABEL_51:
      swift_bridgeObjectRetain();
      v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_19:
      outlined consume of NavigationPath.Representation(v3, v2, v4, v12);
      swift_bridgeObjectRelease();
      v16 = __OFADD__(v17, v18);
      v19 = v17 + v18;
      if (v16)
      {
        __break(1u);
        goto LABEL_42;
      }
      v36 = v4;
      v37 = v2;
      if ((v41 & 1) != 0)
      {
        if (v8 >> 62)
        {
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
          swift_bridgeObjectRetain();
          v20 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v20 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
        }
        v6 = v7;
        v21 = *(_QWORD *)(v7 + 16);
        v7 = v20 + v21;
        if (__OFADD__(v20, v21))
        {
          __break(1u);
        }
        else if (!(v9 >> 62))
        {
          v22 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_26:
          outlined consume of NavigationPath.Representation(v8, v6, v9, 1);
          v16 = __OFADD__(v7, v22);
          v17 = v7 + v22;
          if (!v16)
          {
            v4 = v8;
            v2 = v12;
            v7 = v6;
            v6 = v40;
            goto LABEL_30;
          }
          __break(1u);
          goto LABEL_56;
        }
        swift_bridgeObjectRetain();
        v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      v6 = v40;
      v2 = v12;
      if (!(v8 >> 62))
      {
        v17 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v4 = v8;
        outlined copy of NavigationPath.Representation(v8, v7, v9, 0);
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
LABEL_56:
      outlined copy of NavigationPath.Representation(v8, v7, v9, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v8, v7, v9, 0);
      v17 = _CocoaArrayWrapper.endIndex.getter();
      v4 = v8;
      outlined consume of NavigationPath.Representation(v8, v7, v9, 0);
LABEL_30:
      v12 = v19;
      if (!v38)
      {
        v11 = v6;
        v6 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_32;
      }
LABEL_42:
      v11 = v6;
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_32:
      outlined consume of NavigationPath.Representation(v4, v7, v9, v41);
      swift_bridgeObjectRelease();
      if (!__OFADD__(v17, v6))
      {
        if (v12 != v17 + v6)
        {
          v26 = 0;
          return v26 & 1;
        }
        v23 = v2;
        if ((v2 & 1) != 0)
        {
          v24 = v41;
          v25 = v37;
          if ((v41 & 1) != 0)
          {
            v43 = v3;
            v44 = v37;
            v45 = v36;
            v42[0] = v4;
            v42[1] = v7;
            v42[2] = v9;
            outlined copy of NavigationPath.Representation(v3, v37, v36, 1);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 1);
            outlined copy of NavigationPath.Representation(v3, v37, v36, 1);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 1);
            v26 = specialized static NavigationPath.CodableRepresentation.== infix(_:_:)(&v43, v42);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 1);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 1);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 1);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 1);
            return v26 & 1;
          }
        }
        else
        {
          v24 = v41;
          v25 = v37;
          if ((v41 & 1) == 0)
          {
            outlined copy of NavigationPath.Representation(v3, v37, v36, 0);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 0);
            outlined copy of NavigationPath.Representation(v3, v37, v36, 0);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 0);
            v26 = specialized static Array<A>.== infix(_:_:)(v3, v4);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 0);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 0);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 0);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 0);
            return v26 & 1;
          }
        }
        outlined copy of NavigationPath.Representation(v3, v25, v36, v23);
        outlined copy of NavigationPath.Representation(v4, v7, v9, v24);
        outlined consume of NavigationPath.Representation(v3, v25, v36, v23);
        outlined consume of NavigationPath.Representation(v4, v7, v9, v24);
        v26 = 0;
        return v26 & 1;
      }
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
      v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v27)
        goto LABEL_4;
    }
    v35 = v7;
    if (v3 >> 62)
    {
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
    }
    v14 = *(_QWORD *)(v2 + 16);
    v7 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
    }
    else if (!(v4 >> 62))
    {
      v15 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_13:
      outlined consume of NavigationPath.Representation(v3, v2, v4, 1);
      v16 = __OFADD__(v7, v15);
      v17 = v7 + v15;
      if (!v16)
      {
        v7 = v35;
        if (!v39)
          goto LABEL_18;
        goto LABEL_51;
      }
      __break(1u);
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_4:
  v43 = v8;
  v44 = v7;
  v45 = v9;
  v46 = v41;
  if (!NavigationPath.Representation.isEmpty.getter())
    goto LABEL_7;
  if (v12)
  {
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28)
      goto LABEL_7;
  }
  else if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_7;
  }
  v43 = v3;
  v44 = v2;
  v45 = v4;
  v46 = v11;
  if (NavigationPath.Representation.isEmpty.getter())
  {
    if (v39)
    {
      swift_bridgeObjectRetain();
      v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v31 = v41;
    v30 = v29 == 0;
  }
  else
  {
    v30 = 0;
    v31 = v41;
  }
  v43 = v8;
  v44 = v7;
  v45 = v9;
  v46 = v31;
  if (NavigationPath.Representation.isEmpty.getter())
  {
    if (v12)
    {
      swift_bridgeObjectRetain();
      v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v33 = v32 == 0;
  }
  else
  {
    v33 = 0;
  }
  v26 = v30 ^ v33 ^ 1;
  return v26 & 1;
}

uint64_t type metadata accessor for ItemBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ItemBox);
}

void type metadata accessor for CodableItemBox()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_1872F6F9C()
{
  return swift_deallocObject();
}

_BYTE *partial apply for implicit closure #1 in NavigationPath.init<A>(_:)(uint64_t a1)
{
  uint64_t *v1;

  return implicit closure #1 in NavigationPath.init<A>(_:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned ItemBox<A.Sequence.Element>)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for NavigationPath_ItemBoxBase()
{
  return objc_opt_self();
}

uint64_t sub_1872F7010()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #1 in NavigationPath.init<A>(_:)()
{
  implicit closure #1 in NavigationPath.init<A>(_:)();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned CodableItemBox<A.Sequence.Element>)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 56))();
  *a1 = result;
  return result;
}

unint64_t specialized static NavigationPath.CodableRepresentation.== infix(_:_:)(unint64_t *a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;

  v2 = (_QWORD *)a1[1];
  v3 = a1[2];
  v4 = (_QWORD *)a2[1];
  v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0)
  {
    v6 = v2[2];
    if (v6 == v4[2])
    {
      if (!v6)
        return specialized static Array<A>.== infix(_:_:)(v3, v5);
      v7 = v2[6];
      v8 = v2[7];
      v9 = v4[6];
      v10 = v4[7];
      v11 = v2[4] == v4[4] && v2[5] == v4[5];
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v12 = v7 == v9 && v8 == v10;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          v13 = v6 - 1;
          if (!v13)
            return specialized static Array<A>.== infix(_:_:)(v3, v5);
          v15 = v2 + 11;
          for (i = v4 + 11; ; i += 4)
          {
            v17 = *(v15 - 1);
            v18 = *v15;
            v19 = *(i - 1);
            v20 = *i;
            v21 = *(v15 - 3) == *(i - 3) && *(v15 - 2) == *(i - 2);
            if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              break;
            v22 = v17 == v19 && v18 == v20;
            if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              break;
            v15 += 4;
            if (!--v13)
              return specialized static Array<A>.== infix(_:_:)(v3, v5);
          }
        }
      }
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CollectionProxyError, &type metadata for NavigationPath.CollectionProxyError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CollectionProxyError, &type metadata for NavigationPath.CollectionProxyError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CodableCollectionProxy, &type metadata for NavigationPath.CodableCollectionProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CodableCollectionProxy, &type metadata for NavigationPath.CodableCollectionProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CodableCollectionProxy, &type metadata for NavigationPath.CodableCollectionProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in NavigationPath.CodableCollectionProxy()
{
  return lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<NavigationPath.CodableCollectionProxy>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200], MEMORY[0x1E0DEA228]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in NavigationPath.CodableCollectionProxy()
{
  return lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<NavigationPath.CodableCollectionProxy>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy, (uint64_t)&type metadata for NavigationPath.CodableCollectionProxy, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<NavigationPath.CodableCollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy, (uint64_t)&type metadata for NavigationPath.CodableCollectionProxy, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE50], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NavigationPath.CodableCollectionProxy()
{
  return lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CodableCollectionProxy> and conformance IndexingIterator<A>, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<NavigationPath.CodableCollectionProxy>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

unint64_t lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CollectionProxy, &type metadata for NavigationPath.CollectionProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CollectionProxy, &type metadata for NavigationPath.CollectionProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.CollectionProxy, &type metadata for NavigationPath.CollectionProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>;
  if (!lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DefaultIndices<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEA200]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEA228], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE48], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for Slice<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE50], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for IndexingIterator<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC908], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>);
  }
  return result;
}

uint64_t destroy for NavigationPath(uint64_t a1)
{
  outlined consume of NavigationPath.Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NavigationPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(_QWORD *)a2, v5, v6, v7);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(_QWORD *)a2, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  outlined consume of NavigationPath.Representation(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NavigationPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  outlined consume of NavigationPath.Representation(v6, v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

_QWORD *assignWithCopy for NavigationPath.CodableRepresentation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationPath.CodableRepresentation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationPath.CodableRepresentation()
{
  return &type metadata for NavigationPath.CodableRepresentation;
}

ValueMetadata *type metadata accessor for NavigationPath.CodableCollectionProxy()
{
  return &type metadata for NavigationPath.CodableCollectionProxy;
}

ValueMetadata *type metadata accessor for NavigationPath.CollectionProxy()
{
  return &type metadata for NavigationPath.CollectionProxy;
}

uint64_t storeEnumTagSinglePayload for NavigationPath.CollectionProxyError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1872F79F8 + 4 * asc_187C215A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1872F7A18 + 4 * byte_187C215A5[v4]))();
}

_BYTE *sub_1872F79F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1872F7A18(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1872F7A20(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1872F7A28(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1872F7A30(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1872F7A38(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NavigationPath.CollectionProxyError()
{
  return &type metadata for NavigationPath.CollectionProxyError;
}

uint64_t type metadata completion function for ItemBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for CodableItemBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata completion function for DecodedItemBox()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DecodedItemBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DecodedItemBox);
}

uint64_t destroy for NavigationPath.Representation(uint64_t a1)
{
  return outlined consume of NavigationPath.Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for NavigationPath.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NavigationPath.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of NavigationPath.Representation(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for NavigationPath.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of NavigationPath.Representation(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPath.Representation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationPath.Representation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationPath.Representation(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

void *type metadata accessor for NavigationPath.Representation()
{
  return &unk_1E1AB8710;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_23;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_29;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[96 * a2 + 32];
    v17 = 96 * v15;
    if (96 * a1 < 96 * a2 || (&v4[96 * a1 + 32] < &v16[v17] ? (v18 = a1 == a2) : (v18 = 0), !v18))
      result = (uint64_t)memmove(&v4[96 * a1 + 32], v16, v17);
    v19 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v19, v8);
    v20 = v19 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v20;
LABEL_23:
      *v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[72 * a2 + 32];
    if (a1 != a2 || &v4[72 * a1 + 32] >= &v16[72 * v15])
      result = (uint64_t)memmove(&v4[72 * a1 + 32], v16, 72 * v15);
    v17 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_22;
  v13 = v4[2];
  v14 = v13 - a2;
  if (__OFSUB__(v13, a2))
    goto LABEL_28;
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (72 * a1 < 72 * a2 || &v4[9 * a1 + 4] >= &v4[9 * a2 + 4 + 9 * v14])
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (a1 != a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v15 = v4[2];
    v16 = __OFADD__(v15, v8);
    v17 = v15 - v7;
    if (!v16)
    {
      v4[2] = v17;
LABEL_22:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[56 * a2 + 32];
    if (a1 != a2 || &v4[56 * a1 + 32] >= &v16[56 * v15])
      result = (uint64_t)memmove(&v4[56 * a1 + 32], v16, 56 * v15);
    v17 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for (tag: String, item: String)();
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[104 * a2 + 32];
    if (a1 != a2 || &v4[104 * a1 + 32] >= &v16[104 * v15])
      result = (uint64_t)memmove(&v4[104 * a1 + 32], v16, 104 * v15);
    v17 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[48 * a2 + 32];
    if (a1 != a2 || &v4[48 * a1 + 32] >= &v16[48 * v15])
      result = (uint64_t)memmove(&v4[48 * a1 + 32], v16, 48 * v15);
    v17 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_21;
  v13 = *((_QWORD *)v4 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_27;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = &v4[40 * a2 + 32];
    v17 = 40 * v15;
    if (40 * a1 < 40 * a2 || &v4[40 * a1 + 32] >= &v16[v17] || a1 != a2)
      result = (uint64_t)memmove(&v4[40 * a1 + 32], v16, v17);
    v18 = *((_QWORD *)v4 + 2);
    v14 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v14)
    {
      *((_QWORD *)v4 + 2) = v19;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v9 = a4;
    v7 = a3;
    v4 = a2;
    v6 = a1;
    v8 = *v5;
    if (!(*v5 >> 62))
    {
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v4)
    goto LABEL_15;
LABEL_4:
  v10 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = v6 - v4;
  if (__OFSUB__(0, v10))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = v20 + v32;
    if (!__OFADD__(v20, v32))
      goto LABEL_8;
LABEL_20:
    __break(1u);
LABEL_21:
    v15 = 1;
    goto LABEL_22;
  }
  v8 = *v5;
  v32 = v6 - v4;
  v33 = v6;
  if (*v5 >> 62)
    goto LABEL_18;
  v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 - v10;
  if (__OFADD__(v12, v11))
    goto LABEL_20;
LABEL_8:
  v8 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v8;
  v15 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    v16 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
      v17 = v7;
      v18 = v9;
      goto LABEL_27;
    }
    goto LABEL_21;
  }
LABEL_22:
  v17 = v7;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v18 = v9;
  if (v21 <= v13)
    v21 = v13;
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x18D75E3C8](v15, v21, 1, v8);
  swift_bridgeObjectRelease();
  *v5 = v8;
  v16 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_27:
  v22 = (char *)(v16 + 32 + 8 * v33);
  v18(v17);
  swift_arrayDestroy();
  v23 = v32;
  if (!v32)
    return specialized Array._endMutation()();
  if (!(v8 >> 62))
  {
    v24 = *(_QWORD *)(v16 + 16);
    v25 = v24 - v4;
    if (!__OFSUB__(v24, v4))
      goto LABEL_30;
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v23 = v32;
  v25 = v30 - v4;
  if (__OFSUB__(v30, v4))
    goto LABEL_41;
LABEL_30:
  if ((v25 & 0x8000000000000000) == 0)
  {
    v26 = (char *)(v16 + 32 + 8 * v4);
    if (v33 != v4 || v22 >= &v26[8 * v25])
    {
      memmove(v22, v26, 8 * v25);
      v23 = v32;
    }
    if (!(v8 >> 62))
    {
      v27 = *(_QWORD *)(v16 + 16);
      v28 = v27 + v23;
      if (!__OFADD__(v27, v23))
      {
LABEL_36:
        *(_QWORD *)(v16 + 16) = v28;
        return specialized Array._endMutation()();
      }
      goto LABEL_44;
    }
LABEL_42:
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v28 = v31 + v32;
    if (!__OFADD__(v31, v32))
      goto LABEL_36;
LABEL_44:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  char **v3;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v5 = *v3;
  v6 = *((_QWORD *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = a1 - a2;
  if (__OFSUB__(0, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v10 <= *((_QWORD *)v5 + 3) >> 1)
  {
    if (!v9)
      goto LABEL_18;
  }
  else
  {
    result = (char *)a3();
    v5 = result;
    if (!v9)
    {
LABEL_18:
      *v3 = v5;
      return result;
    }
  }
  v13 = *((_QWORD *)v5 + 2);
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_24;
  if ((v15 & 0x8000000000000000) == 0)
  {
    result = &v5[16 * a1 + 32];
    v16 = &v5[16 * a2 + 32];
    if (a1 != a2 || result >= &v16[16 * v15])
      result = (char *)memmove(result, v16, 16 * v15);
    v17 = *((_QWORD *)v5 + 2);
    v14 = __OFADD__(v17, v9);
    v18 = v17 + v9;
    if (!v14)
    {
      *((_QWORD *)v5 + 2) = v18;
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_26:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of NavigationPath.Error(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationPath.Error and conformance NavigationPath.Error;
  if (!lazy protocol witness table cache variable for type NavigationPath.Error and conformance NavigationPath.Error)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationPath.Error, &type metadata for NavigationPath.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.Error and conformance NavigationPath.Error);
  }
  return result;
}

void type metadata accessor for (CodingUserInfoKey, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (CodingUserInfoKey, Any))
  {
    type metadata accessor for CodingUserInfoKey();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CodingUserInfoKey, Any));
  }
}

unint64_t type metadata accessor for Decodable & Encodable.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for Decodable & Encodable.Type;
  if (!lazy cache variable for type metadata for Decodable & Encodable.Type)
  {
    type metadata accessor for Decodable & Encodable();
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable.Type);
  }
  return result;
}

void type metadata accessor for (tag: String, item: String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (tag: String, item: String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (tag: String, item: String));
  }
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(_QWORD))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = *(_QWORD *)(a4(0) - 8);
  v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_22;
  v19 = *(_QWORD *)(v6 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_28;
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v22 = *(_QWORD *)(v6 + 16);
    v23 = __OFADD__(v22, v10);
    v24 = v22 - v9;
    if (!v23)
    {
      *(_QWORD *)(v6 + 16) = v24;
LABEL_22:
      *v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  type metadata accessor for ContainerBackgroundHost(0, a4);
  result = swift_arrayDestroy();
  if (!v9)
    goto LABEL_17;
  v14 = *(_QWORD *)(v6 + 16);
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_23;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v6 + 32 + 16 * a2);
    if (a1 != a2 || v6 + 32 + 16 * a1 >= (unint64_t)v17 + 16 * v16)
      result = (uint64_t)memmove((void *)(v6 + 32 + 16 * a1), v17, 16 * v16);
    v18 = *(_QWORD *)(v6 + 16);
    v15 = __OFADD__(v18, v10);
    v19 = v18 - v9;
    if (!v15)
    {
      *(_QWORD *)(v6 + 16) = v19;
LABEL_17:
      *v4 = v6;
      return result;
    }
    goto LABEL_24;
  }
LABEL_25:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of CollectionOfOne<FocusStoreList.Item>(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  type metadata accessor for CollectionOfOne<FocusStoreList.Item>(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for CollectionOfOne<FocusStoreList.Item>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for CollectionOfOne();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t outlined destroy of CollectionOfOne<Hashable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CollectionOfOne<Hashable>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CollectionOfOne<Hashable>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CollectionOfOne<Hashable>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for Hashable);
    v0 = type metadata accessor for CollectionOfOne();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>);
  }
}

uint64_t outlined destroy of CollectionOfOne<Decodable & Encodable & Hashable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEC628]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t destroy for NavigationPath.Error(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationPath.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for NavigationPath.Error(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationPath.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPath.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NavigationPath.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for NavigationPath.Error(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for NavigationPath.Error(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationPath.Error()
{
  return &type metadata for NavigationPath.Error;
}

uint64_t ArchivedTemplateHost.viewGraph.getter()
{
  specialized _ArchivedViewHost.viewGraph.getter();
  return swift_retain();
}

double ArchivedTemplateHost.currentTimestamp.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  swift_beginAccess();
  result = *(double *)(v1 + 24);
  *a1 = result;
  return result;
}

uint64_t ArchivedTemplateHost.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*ArchivedTemplateHost.currentTimestamp.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t ArchivedTemplateHost.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 32);
  return result;
}

uint64_t ArchivedTemplateHost.propertiesNeedingUpdate.setter(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_WORD *)(v1 + 32) = v2;
  return result;
}

uint64_t (*ArchivedTemplateHost.propertiesNeedingUpdate.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t ArchivedTemplateHost.renderingPhase.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 34);
  return result;
}

uint64_t ArchivedTemplateHost.renderingPhase.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 34) = v2;
  return result;
}

uint64_t (*ArchivedTemplateHost.renderingPhase.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t ArchivedTemplateHost.externalUpdateCount.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t ArchivedTemplateHost.externalUpdateCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ArchivedTemplateHost.externalUpdateCount.modify())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t ArchivedTemplateHost.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
  swift_beginAccess();
  v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path getter for ArchivedTemplateHost.environment : <A>ArchivedTemplateHost<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 144));
  swift_beginAccess();
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for ArchivedTemplateHost.environment : <A>ArchivedTemplateHost<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a1;
  v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_retain();
  swift_retain();
  return ArchivedTemplateHost.environment.setter(v4);
}

uint64_t ArchivedTemplateHost.environment.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
  swift_beginAccess();
  *v4 = v2;
  v4[1] = v3;
  swift_release();
  swift_release();
  return ArchivedTemplateHost.environment.didset();
}

uint64_t ArchivedTemplateHost.environment.didset()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  GraphHost.emptyTransaction(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, v1);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*ArchivedTemplateHost.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ArchivedTemplateHost.environment.modify;
}

uint64_t ArchivedTemplateHost.environment.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return ArchivedTemplateHost.environment.didset();
  return result;
}

double ArchivedTemplateHost.size.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t ArchivedTemplateHost.size.setter(double a1, double a2)
{
  uint64_t v2;
  double *v5;

  v5 = (double *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 152));
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return ArchivedTemplateHost.size.didset();
}

uint64_t (*ArchivedTemplateHost.size.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ArchivedTemplateHost.size.modify;
}

uint64_t ArchivedTemplateHost.size.modify(uint64_t a1, char a2)
{
  return ArchivedTemplateHost.safeAreaInsets.modify(a1, a2);
}

uint64_t ArchivedTemplateHost.safeAreaInsets.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return ArchivedTemplateHost.size.didset();
  return result;
}

{
  return ArchivedTemplateHost.safeAreaInsets.modify(a1, a2);
}

double ArchivedTemplateHost.safeAreaInsets.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t ArchivedTemplateHost.safeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;

  v9 = (double *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 160));
  swift_beginAccess();
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return ArchivedTemplateHost.size.didset();
}

uint64_t ArchivedTemplateHost.size.didset()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  GraphHost.emptyTransaction(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, v1);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*ArchivedTemplateHost.safeAreaInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return ArchivedTemplateHost.safeAreaInsets.modify;
}

uint64_t *ArchivedTemplateHost.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;

  v2 = v1;
  swift_allocObject();
  v4 = specialized ArchivedTemplateHost.init(_:)();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t *ArchivedTemplateHost.init(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = specialized ArchivedTemplateHost.init(_:)();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t ArchivedTemplateHost.metadata()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  NSObject *v30;
  os_signpost_type_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint8_t *v35;
  uint8_t *v36;
  os_signpost_id_t v37;
  uint8_t *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;

  v67 = a1;
  v64 = *v1;
  v2 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  v63 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v60 = (uint64_t *)((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Graphic?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  MEMORY[0x1E0C80A78](v5, v6);
  v61 = (char *)&v57 - v7;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1E0C80A78](v8, v9);
  v66 = (char *)&v57 - v10;
  v11 = type metadata accessor for OSSignposter();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v57 - v18;
  v20 = type metadata accessor for OSSignpostID();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v57 - v27;
  static Signpost.metadataExtraction.getter();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v62 = v11;
  v29(v19, v11);
  static Signpost.metadataExtraction.getter();
  v30 = OSSignposter.logHandle.getter();
  v31 = static os_signpost_type_t.begin.getter();
  v32 = OS_os_log.signpostsEnabled.getter();
  v65 = v21;
  if ((v32 & 1) != 0)
  {
    v58 = v29;
    v33 = v21;
    v34 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v34(v24, v28, v20);
    v35 = (uint8_t *)swift_slowAlloc();
    v59 = v2;
    v36 = v35;
    *(_WORD *)v35 = 0;
    v37 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_186E48000, v30, v31, v37, "Metadata Extraction", "", v36, 2u);
    v38 = v36;
    v2 = v59;
    MEMORY[0x18D760108](v38, -1, -1);

    v39 = *(void (**)(char *, uint64_t))(v33 + 8);
    v29 = v58;
    v39(v24, v20);
  }
  else
  {

    v34 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  }
  v40 = v20;
  v34(v24, v28, v20);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  v29(v15, v62);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, v64);
  v41 = (uint64_t)v66;
  ViewRendererHost.preferenceValue<A>(_:)();
  v42 = v28;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v41, 1, v2) == 1)
  {
    v43 = (int *)v2;
    v44 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
    v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56);
    v46 = (uint64_t)v61;
    v45(v61, 1, 1, v44);
    v47 = v42;
    v48 = (uint64_t)v60;
    *v60 = 0;
    *(_QWORD *)(v48 + 8) = 0;
    v49 = v48 + v43[6];
    v45((char *)v49, 1, 1, v44);
    *(_QWORD *)(v48 + v43[7]) = 0;
    v50 = v48 + v43[8];
    v51 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
    v52 = v48 + v43[9];
    *(_BYTE *)(v52 + 48) = 0;
    *(_OWORD *)(v52 + 16) = 0u;
    *(_OWORD *)(v52 + 32) = 0u;
    *(_OWORD *)v52 = 0u;
    v53 = v48 + v43[10];
    v54 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 1, 1, v54);
    v55 = (_OWORD *)(v48 + v43[11]);
    *v55 = xmmword_187BF9840;
    v55[1] = 0u;
    v55[2] = 0u;
    v55[3] = 0u;
    outlined assign with take of WidgetAuxiliaryViewMetadata.Graphic?(v46, v49);

    *(_QWORD *)v48 = 0;
    v42 = v47;
    outlined init with take of WidgetAuxiliaryViewMetadata(v48, v67);
    outlined destroy of WidgetAuxiliaryViewMetadata?(v41);
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata(v41, v67);
  }
  $defer #1 <A>() in ArchivedTemplateHost.metadata()();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v42, v40);
}

uint64_t $defer #1 <A>() in ArchivedTemplateHost.metadata()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v25;
  os_signpost_id_t v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v28[4];
  int v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v0 = type metadata accessor for OSSignpostError();
  v1 = *(_QWORD *)(v0 - 8);
  v32 = v0;
  v33 = v1;
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v6);
  v31 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v28[-v10];
  v12 = type metadata accessor for OSSignposter();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = &v28[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Signpost.metadataExtraction.getter();
  v17 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v18 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v29 = v18;
    v30 = v12;
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    v19 = v32;
    v20 = (*(uint64_t (**)(_BYTE *, uint64_t))(v33 + 88))(v4, v32);
    v21 = v31;
    v22 = v34;
    if (v20 == *MEMORY[0x1E0DF2190])
    {
      v23 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v4, v19);
      v23 = "";
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v21, v11, v22);
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_186E48000, v17, (os_signpost_type_t)v29, v26, "Metadata Extraction", v23, v25, 2u);
    MEMORY[0x18D760108](v25, -1, -1);

    v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v27(v11, v22);
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v30);
    return ((uint64_t (*)(_BYTE *, uint64_t))v27)(v21, v22);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v11, v34);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
  }
}

uint64_t ArchivedTemplateHost.preferenceValue<A>(for:)()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  mainThreadPrecondition()();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, v1);
  return ViewRendererHost.preferenceValue<A>(_:)();
}

uint64_t ArchivedTemplateHost.containsPrivacySensitive.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *v0;
  mainThreadPrecondition()();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, v1);
  ViewRendererHost.updateViewGraph<A>(body:)();
  swift_bridgeObjectRelease();
  return (v3 >> 2) & 1;
}

uint64_t closure #1 in ArchivedTemplateHost.containsPrivacySensitive.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  __int16 v4;
  char v5;

  GraphHost.instantiateIfNeeded()();
  result = ViewGraph.displayList()();
  *(_QWORD *)a1 = v3;
  *(_WORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 10) = v5;
  return result;
}

uint64_t ArchivedTemplateHost.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  v2 = type metadata accessor for ModifiedContent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ArchivedTemplateHost.__deallocating_deinit()
{
  ArchivedTemplateHost.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall ArchivedTemplateHost.updateRootView()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v1 = *(_QWORD *)v0;
  v2 = type metadata accessor for ModifiedContent();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)v10 - v6;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)v10 - v6, &v0[*(_QWORD *)(v1 + 136)], v2, v5);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers();
  v10[0] = v8;
  v10[1] = v9;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
}

Swift::Void __swiftcall ArchivedTemplateHost.updateEnvironment()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_beginAccess();
  v2 = *v1;
  v3 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v3 != -1)
    swift_once();
  v4 = static EnvironmentValues.configuredForPlatform;
  if (v2)
  {
    swift_release();
    if (!v4 || v2 != v4)
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release_n();
  swift_release_n();
}

Swift::Void __swiftcall ArchivedTemplateHost.updateSize()()
{
  uint64_t v0;
  CGSize *v1;

  v1 = (CGSize *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_beginAccess();
  ViewGraph.setProposedSize(_:)(*v1);
}

Swift::Void __swiftcall ArchivedTemplateHost.updateSafeArea()()
{
  swift_beginAccess();
  ViewGraph.setSafeAreaInsets(_:)();
}

Swift::Void __swiftcall ArchivedTemplateHost.updateScrollableContainerSize()()
{
  swift_beginAccess();
  swift_beginAccess();
  CGSize.inset(by:)();
  static ViewSize.fixed(_:)();
  ViewGraph.setScrollableContainerSize(_:)();
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance ArchivedTemplateHost<A>(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return ArchivedTemplateHost.currentTimestamp.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance ArchivedTemplateHost<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.currentTimestamp.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance ArchivedTemplateHost<A>(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return ArchivedTemplateHost.propertiesNeedingUpdate.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance ArchivedTemplateHost<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.propertiesNeedingUpdate.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance ArchivedTemplateHost<A>(char *a1)
{
  char v2;

  v2 = *a1;
  return ArchivedTemplateHost.renderingPhase.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance ArchivedTemplateHost<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.renderingPhase.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance ArchivedTemplateHost<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.externalUpdateCount.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:) in conformance ArchivedTemplateHost<A>(uint64_t a1)
{
  return ArchivedTemplateHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(a1, 0);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance ArchivedTemplateHost<A>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, *v0);
  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance ArchivedTemplateHost<A>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, *v0);
  return ViewGraphDelegate.updateGraph<A>(body:)();
}

void protocol witness for GraphDelegate.graphDidChange() in conformance ArchivedTemplateHost<A>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, *v0);
  ViewRendererHost.graphDidChange()();
}

uint64_t *specialized ArchivedTemplateHost.init(_:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];
  char v17;
  _QWORD v18[2];

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v16 - v7;
  v0[3] = 0;
  *((_WORD *)v0 + 16) = 0;
  *((_BYTE *)v0 + 34) = 0;
  v0[5] = 0;
  v9 = EnvironmentValues.init()();
  v10 = (uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 152));
  *v10 = 0;
  v10[1] = 0;
  v11 = (_OWORD *)((char *)v1 + *(_QWORD *)(*v1 + 160));
  *v11 = 0u;
  v11[1] = 0u;
  v12 = *(_QWORD *)(v2 + 88);
  MEMORY[0x18D75B4AC](v9, v3, &unk_1E1ABAAA0, v12);
  v13 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 136), v8, v4);
  MEMORY[0x18D75B908](v13);
  type metadata accessor for ViewGraph();
  LOBYTE(v16[0]) = 17;
  v14 = lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers();
  v18[0] = v12;
  v18[1] = v14;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v18);
  v0[2] = ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  ViewGraph.append<A>(feature:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, (uint64_t)v1 + *(_QWORD *)(*v1 + 136), v4);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  LOWORD(v16[0]) = 2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedTemplateHost<A>, v2);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  ViewRendererHost.initializeViewGraph()();
  static Update.end()();
  return v0;
}

uint64_t outlined assign with take of WidgetAuxiliaryViewMetadata.Graphic?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Graphic?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonModifiers and conformance CommonModifiers;
  if (!lazy protocol witness table cache variable for type CommonModifiers and conformance CommonModifiers)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommonModifiers, &unk_1E1ABAAA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonModifiers and conformance CommonModifiers);
  }
  return result;
}

void base witness table accessor for ViewGraphDelegate in ArchivedTemplateHost<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for GraphDelegate in ArchivedTemplateHost<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1872FBB00()
{
  return 16;
}

__n128 sub_1872FBB0C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_1872FBB18@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 152));
  swift_beginAccess();
  result = *v3;
  *a2 = *v3;
  return result;
}

uint64_t sub_1872FBB68(double *a1)
{
  return ArchivedTemplateHost.size.setter(*a1, a1[1]);
}

uint64_t sub_1872FBB8C()
{
  return 16;
}

__n128 sub_1872FBB98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_1872FBBA4@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 + 160);
  swift_beginAccess();
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t sub_1872FBBF4(double *a1)
{
  return ArchivedTemplateHost.safeAreaInsets.setter(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1872FBC1C()
{
  return 16;
}

__n128 sub_1872FBC28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for ArchivedTemplateHost()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ArchivedTemplateHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ArchivedTemplateHost);
}

uint64_t method lookup function for ArchivedTemplateHost()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ArchivedTemplateHost.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void *type metadata accessor for CommonModifiers()
{
  return &unk_1E1ABAAA0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CommonModifiers()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for WidgetAuxiliaryViewMetadataModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>)
  {
    type metadata accessor for _ViewModifier_Content<CommonModifiers>();
    type metadata accessor for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>);
  }
}

void type metadata accessor for _ViewModifier_Content<CommonModifiers>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<CommonModifiers>)
  {
    lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<CommonModifiers>);
  }
}

void type metadata accessor for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>)
  {
    type metadata accessor for _ViewModifier_Content<CommonModifiers>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>();
    v6 = type metadata accessor for WidgetAuxiliaryViewMetadataModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<CommonModifiers>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t View.accessibilityDataSeries(_:)(void *__src, uint64_t a2, uint64_t a3)
{
  _BYTE v6[312];
  _BYTE __dst[320];

  memcpy(__dst, __src, 0x138uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst);
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)__dst, (uint64_t)v6);
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5810], (uint64_t)v6, 1, a2, MEMORY[0x1E0CE5810], a3);
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for AccessibilityDataSeriesConfiguration?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityDataSeriesConfiguration?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?);
  }
}

uint64_t ModifiedContent<>.accessibilityDataSeries(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE v6[312];
  _BYTE __dst[312];

  memcpy(__dst, __src, sizeof(__dst));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst);
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)__dst, (uint64_t)v6);
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E0CE5810], (uint64_t)v6, 1, a2, a3);
}

void static AnimationCompletionCriteria.logicallyComplete.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t withAnimation<A>(_:completionCriteria:_:completion:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8;
  uint64_t v9;

  v8 = *a2;
  swift_retain();
  Transaction.animation.setter();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a5;
  *(_QWORD *)(v9 + 24) = a6;
  swift_retain();
  if ((v8 & 1) != 0)
    Transaction.addAnimationListener(allFinished:)();
  else
    Transaction.addAnimationLogicalListener(allFinished:)();
  swift_release();
  swift_retain();
  withTransaction<A>(_:_:)();
  return swift_release_n();
}

uint64_t Transaction.addAnimationCompletion(criteria:_:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((*a1 & 1) != 0)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a2;
    *(_QWORD *)(v5 + 24) = a3;
    swift_retain();
    Transaction.addAnimationListener(allFinished:)();
  }
  else
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a2;
    *(_QWORD *)(v6 + 24) = a3;
    swift_retain();
    Transaction.addAnimationLogicalListener(allFinished:)();
  }
  return swift_release();
}

BOOL static AnimationCompletionCriteria.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1872FC288()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Transaction.addAnimationCompletion(criteria:_:)()
{
  return static Update.enqueueAction(_:)();
}

void static AnimationCompletionCriteria.removed.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void AnimationCompletionCriteria.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AnimationCompletionCriteria.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria;
  if (!lazy protocol witness table cache variable for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimationCompletionCriteria, &type metadata for AnimationCompletionCriteria);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria);
  }
  return result;
}

void *type metadata accessor for AnimationCompletionCriteria.Storage()
{
  return &unk_1E1AF1E80;
}

unint64_t lazy protocol witness table accessor for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage;
  if (!lazy protocol witness table cache variable for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimationCompletionCriteria.Storage, &unk_1E1AF1E80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage);
  }
  return result;
}

uint64_t Color.Resolved.accessibilityName.getter()
{
  CGColor *v0;
  NSString *v1;
  uint64_t v2;

  v0 = (CGColor *)Color.Resolved.cgColor.getter();
  v1 = AXNameFromColor(v0);

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t static ScrollTransitionConfiguration.interactive.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for interactive != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDE21EF8;
  v3 = qword_1EDE21F00;
  v4 = qword_1EDE21F08;
  v5 = qword_1EDE21F10;
  v6 = qword_1EDE21F18;
  v7 = qword_1EDE21F20;
  *a1 = static ScrollTransitionConfiguration.interactive;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  swift_retain();
  return outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
}

_QWORD *View.scrollTransition<A>(_:axis:transition:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  _OWORD v11[3];
  uint64_t v12;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a1 + 32);
  v12 = v8;
  return View.scrollTransition<A>(_:axis:transition:)((uint64_t *)v11, a2 & 1, a3, a4, a5, a6, a7, a8);
}

_QWORD *View.scrollTransition<A>(_:axis:transition:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v22[8];
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;

  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1[5];
  v16 = a1[6];
  *(_QWORD *)&v24 = a3;
  *((_QWORD *)&v24 + 1) = a4;
  *(_QWORD *)&v25 = v10;
  *((_QWORD *)&v25 + 1) = v11;
  *(_QWORD *)&v26 = v12;
  *((_QWORD *)&v26 + 1) = v13;
  *(_QWORD *)&v27 = v14;
  *((_QWORD *)&v27 + 1) = v15;
  *(_QWORD *)&v28 = v16;
  *((_QWORD *)&v28 + 1) = v10;
  *(_QWORD *)&v29 = v11;
  *((_QWORD *)&v29 + 1) = v12;
  *(_QWORD *)&v30 = v13;
  *((_QWORD *)&v30 + 1) = v14;
  *(_QWORD *)&v31 = v15;
  *((_QWORD *)&v31 + 1) = v16;
  v32 = a2;
  v22[6] = v30;
  v22[7] = v31;
  v23 = a2;
  v22[2] = v26;
  v22[3] = v27;
  v22[4] = v28;
  v22[5] = v29;
  v22[0] = v24;
  v22[1] = v25;
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v11, v12, v13, v14, v15);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v11, v12, v13, v14, v15);
  v18 = type metadata accessor for ScrollTransitionModifier(0, a6, a8, v17);
  swift_retain();
  MEMORY[0x18D75B4AC](v22, a5, v18, a7);
  return outlined release of ScrollTransitionModifier<A1>(&v24);
}

_QWORD *View.scrollTransition<A>(topLeading:bottomTrailing:axis:transition:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[3];
  uint64_t v15;
  _OWORD v16[3];
  uint64_t v17;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v11;
  v16[2] = *(_OWORD *)(a1 + 32);
  v17 = v9;
  v12 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v12;
  v14[2] = *(_OWORD *)(a2 + 32);
  v15 = v10;
  return View.scrollTransition<A>(topLeading:bottomTrailing:axis:transition:)((uint64_t *)v16, (uint64_t *)v14, a3 & 1, a4, a5, a6, a7, a8, a9);
}

_QWORD *View.scrollTransition<A>(topLeading:bottomTrailing:axis:transition:)(uint64_t *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD v29[8];
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v14 = a1[4];
  v13 = a1[5];
  v15 = a1[6];
  v16 = *a2;
  v17 = a2[1];
  v18 = a2[2];
  v19 = a2[3];
  v25 = a2[4];
  v23 = a2[6];
  v24 = a2[5];
  *(_QWORD *)&v31 = a4;
  *((_QWORD *)&v31 + 1) = a5;
  *(_QWORD *)&v32 = v9;
  *((_QWORD *)&v32 + 1) = v10;
  *(_QWORD *)&v33 = v11;
  *((_QWORD *)&v33 + 1) = v12;
  *(_QWORD *)&v34 = v14;
  *((_QWORD *)&v34 + 1) = v13;
  *(_QWORD *)&v35 = v15;
  *((_QWORD *)&v35 + 1) = v16;
  *(_QWORD *)&v36 = v17;
  *((_QWORD *)&v36 + 1) = v18;
  *(_QWORD *)&v37 = v19;
  *((_QWORD *)&v37 + 1) = v25;
  *(_QWORD *)&v38 = v24;
  *((_QWORD *)&v38 + 1) = v23;
  v39 = a3;
  v29[6] = v37;
  v29[7] = v38;
  v30 = a3;
  v29[2] = v33;
  v29[3] = v34;
  v29[4] = v35;
  v29[5] = v36;
  v29[0] = v31;
  v29[1] = v32;
  swift_retain();
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v10, v11, v12, v14, v13);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v17, v18, v19, v25, v24);
  v21 = type metadata accessor for ScrollTransitionModifier(0, a7, a9, v20);
  MEMORY[0x18D75B4AC](v29, a6, v21, a8);
  return outlined release of ScrollTransitionModifier<A1>(&v31);
}

uint64_t static ScrollTransitionConfiguration.animated(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x3FE0000000000000;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  return swift_retain();
}

uint64_t static ScrollTransitionConfiguration.Threshold.visible(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t result;

  result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *a1 = result;
  return result;
}

double one-time initialization function for animated()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = static Animation.default.getter();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = 0x3FE0000000000000;
  static ScrollTransitionConfiguration.animated = v1;
  unk_1EDE21EC0 = v0;
  result = 0.0;
  xmmword_1EDE21EC8 = 0u;
  *(_OWORD *)&qword_1EDE21ED8 = 0u;
  qword_1EDE21EE8 = 0;
  return result;
}

uint64_t static ScrollTransitionConfiguration.animated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (one-time initialization token for animated != -1)
    swift_once();
  v2 = unk_1EDE21EC0;
  v3 = xmmword_1EDE21EC8;
  v4 = qword_1EDE21ED8;
  v5 = unk_1EDE21EE0;
  v6 = qword_1EDE21EE8;
  *(_QWORD *)a1 = static ScrollTransitionConfiguration.animated;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain();
  return outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, *((uint64_t *)&v3 + 1), v4, v5);
}

__n128 static ScrollTransitionConfiguration.interactive(timingCurve:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;

  v8 = *a1;
  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = a1[2].n128_u8[0];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0x3FF0000000000000;
  *(_QWORD *)a2 = v6;
  result = v8;
  *(__n128 *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5 | 0x4000000000000000;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

__n128 one-time initialization function for interactive()
{
  uint64_t v0;
  __n128 result;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  static UnitCurve.easeInOut.getter();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0x3FF0000000000000;
  static ScrollTransitionConfiguration.interactive = v0;
  result = v2;
  *(__n128 *)algn_1EDE21EF8 = v2;
  qword_1EDE21F08 = v3;
  qword_1EDE21F10 = v4;
  qword_1EDE21F18 = v5 | 0x4000000000000000;
  qword_1EDE21F20 = 0;
  return result;
}

uint64_t outlined copy of ScrollTransitionConfiguration.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if ((a5 >> 62) <= 1)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for ScrollTransitionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollTransitionModifier);
}

uint64_t outlined consume of ScrollTransitionConfiguration.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if ((a5 >> 62) <= 1)
    return swift_release();
  return result;
}

uint64_t sub_1872FCAA0()
{
  return swift_deallocObject();
}

uint64_t one-time initialization function for identity()
{
  if (one-time initialization token for visible != -1)
    swift_once();
  static ScrollTransitionConfiguration.identity = static ScrollTransitionConfiguration.Threshold.visible;
  unk_1EDE21F30 = 0u;
  unk_1EDE21F40 = 0u;
  unk_1EDE21F50 = xmmword_187BF9FB0;
  return swift_retain();
}

{
  uint64_t result;
  uint64_t v1;
  int v2;
  __int16 v3;
  char v4;

  result = static ContentTransition.identity.getter();
  static Text.Transition.identity = v1;
  word_1EDE34854 = v3;
  dword_1EDE34850 = v2;
  byte_1EDE34856 = v4;
  return result;
}

uint64_t static ScrollTransitionConfiguration.identity.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = unk_1EDE21F30;
  v3 = qword_1EDE21F38;
  v4 = unk_1EDE21F40;
  v5 = qword_1EDE21F48;
  v6 = unk_1EDE21F50;
  v7 = qword_1EDE21F58;
  *a1 = static ScrollTransitionConfiguration.identity;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  swift_retain();
  return outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
}

uint64_t ScrollTransitionConfiguration.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v2;
  v4 = v2[5];
  if (!(v4 >> 62))
  {
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = a1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_QWORD *)(a2 + 48) = 0;
    goto LABEL_5;
  }
  v6 = v2[1];
  v5 = v2[2];
  v8 = v2[3];
  v7 = v2[4];
  if (v4 >> 62 == 1)
  {
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 40) = v4 & 1 | 0x4000000000000000;
    *(_QWORD *)(a2 + 48) = a1;
LABEL_5:
    swift_retain();
    return swift_retain();
  }
  v10 = v2[6];
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = v10;
  swift_retain();
  return outlined copy of ScrollTransitionConfiguration.Mode(v6, v5, v8, v7, v4);
}

uint64_t ScrollTransitionConfiguration.threshold(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = v2[1];
  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v8 = v2[5];
  v7 = v2[6];
  *a2 = *a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v8;
  a2[6] = v7;
  swift_retain();
  return outlined copy of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v8);
}

uint64_t one-time initialization function for visible()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x3FF0000000000000;
  static ScrollTransitionConfiguration.Threshold.visible = result;
  return result;
}

uint64_t static ScrollTransitionConfiguration.Threshold.visible.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ScrollTransitionConfiguration.Threshold.visible.getter(&one-time initialization token for visible, &static ScrollTransitionConfiguration.Threshold.visible, a1);
}

uint64_t one-time initialization function for hidden()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  static ScrollTransitionConfiguration.Threshold.hidden = result;
  return result;
}

uint64_t static ScrollTransitionConfiguration.Threshold.hidden.getter@<X0>(_QWORD *a1@<X8>)
{
  return static ScrollTransitionConfiguration.Threshold.visible.getter(one-time initialization token for hidden, &static ScrollTransitionConfiguration.Threshold.hidden, a1);
}

uint64_t static ScrollTransitionConfiguration.Threshold.visible.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_retain();
}

void static ScrollTransitionConfiguration.Threshold.centered.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xC000000000000000;
}

uint64_t ScrollTransitionConfiguration.Threshold.interpolated(towards:amount:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  v7 = *v3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  *(double *)(v8 + 32) = a3;
  *a2 = v8 | 0x8000000000000000;
  swift_retain();
  return swift_retain();
}

uint64_t sub_1872FCE58()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t ScrollTransitionConfiguration.Threshold.inset(by:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  v6 = swift_allocObject();
  *(double *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v5;
  *a1 = v6 | 0x4000000000000000;
  return swift_retain();
}

uint64_t sub_1872FCEE0()
{
  swift_release();
  return swift_deallocObject();
}

void ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t static ScrollTransitionModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int OffsetAttribute2;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v49;
  int v50;
  int v51;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _BYTE v67[16];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[16];
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[16];
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[16];
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[16];
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  int v110;
  unint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  unint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v49 = *a1;
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 32);
  v56 = *(_DWORD *)(a2 + 24);
  v57 = *(_DWORD *)(a2 + 36);
  v10 = *(_QWORD *)(a2 + 40);
  v58 = *(_QWORD *)(a2 + 48);
  v63 = *(_DWORD *)(a2 + 56);
  v64 = *(_DWORD *)(a2 + 8);
  v60 = *(_QWORD *)(a2 + 60);
  v61 = *(_DWORD *)(a2 + 72);
  v62 = *(_DWORD *)(a2 + 68);
  v53 = *(_DWORD *)(a2 + 80);
  v54 = *(_DWORD *)(a2 + 76);
  type metadata accessor for ScrollTransitionModifier(255, a5, a6, a4);
  type metadata accessor for _GraphValue();
  v45 = _GraphValue.value.getter();
  v43 = _ViewInputs.position.getter();
  v59 = v6;
  v55 = v10;
  v41 = _ViewInputs.size.getter();
  v38 = _ViewInputs.transform.getter();
  v108 = v6;
  v111 = v7;
  v109 = v64;
  *(_QWORD *)&v112 = __PAIR64__(v8, v56);
  *((_QWORD *)&v112 + 1) = __PAIR64__(v57, v9);
  v113 = v10;
  v114 = v58;
  v115 = v63;
  v116 = v60;
  v117 = v62;
  v118 = v61;
  v119 = __PAIR64__(v53, v54);
  v11 = _ViewInputs.environment.getter();
  v47 = *MEMORY[0x1E0CFED28];
  v12 = *MEMORY[0x1E0CFED28];
  LOBYTE(v108) = 1;
  HIDWORD(v108) = v45;
  v109 = v43;
  v110 = v41;
  v111 = __PAIR64__(v11, v38);
  *(_QWORD *)&v112 = v12;
  v81 = type metadata accessor for ScrollTransitionModifier.StageProgress(0, a5, a6, v13);
  v42 = v81;
  v46 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.StageProgress, v81);
  v82 = v46;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<ScrollTransitionProgress>, (uint64_t)&unk_1E1AE6798, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v44 = v14;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v108, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_16, (uint64_t)v80, v81, MEMORY[0x1E0DEDCE8], v14, MEMORY[0x1E0DEDD18], v15);
  v108 = v6;
  v111 = v7;
  v109 = v64;
  *(_QWORD *)&v112 = __PAIR64__(v8, v56);
  *((_QWORD *)&v112 + 1) = __PAIR64__(v57, v9);
  v113 = v10;
  v114 = v58;
  v115 = v63;
  v116 = v60;
  v117 = v62;
  v118 = v61;
  v119 = __PAIR64__(v53, v54);
  LODWORD(v96) = v49;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  closure #1 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(1, a5, a6, v16);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v96 = v6;
  v99 = v7;
  v97 = v64;
  *(_QWORD *)&v100 = __PAIR64__(v8, v56);
  *((_QWORD *)&v100 + 1) = __PAIR64__(v57, v9);
  v101 = v10;
  v102 = v58;
  v103 = v63;
  v104 = v60;
  v105 = v62;
  v106 = v61;
  v107 = __PAIR64__(v53, v54);
  v96 = __PAIR64__(_ViewInputs.transaction.getter(), OffsetAttribute2);
  v78 = type metadata accessor for ScrollTransitionModifier.ConfigurationTransaction(0, a5, a6, v17);
  v36 = v78;
  v40 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.ConfigurationTransaction, v78);
  v79 = v40;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<Transaction>, MEMORY[0x1E0CE13D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v37 = v18;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13, (uint64_t)v77, v78, MEMORY[0x1E0DEDCE8], v18, MEMORY[0x1E0DEDD18], v19);
  _ViewInputs.transaction.setter();
  _GraphValue.init(_:)();
  v96 = v108;
  v97 = v109;
  v99 = v111;
  v100 = v112;
  v101 = v113;
  static Animatable._makeAnimatable(value:inputs:)();
  LODWORD(v96) = v49;
  v35 = _GraphValue.value.getter();
  v96 = v6;
  v99 = v7;
  v97 = v64;
  *(_QWORD *)&v100 = __PAIR64__(v8, v56);
  *((_QWORD *)&v100 + 1) = __PAIR64__(v57, v9);
  v101 = v10;
  v102 = v58;
  v103 = v63;
  v104 = v60;
  v105 = v62;
  v106 = v61;
  v107 = __PAIR64__(v53, v54);
  v34 = _ViewInputs.position.getter();
  v96 = v6;
  v99 = v7;
  v97 = v64;
  *(_QWORD *)&v100 = __PAIR64__(v8, v56);
  *((_QWORD *)&v100 + 1) = __PAIR64__(v57, v9);
  v101 = v10;
  v102 = v58;
  v103 = v63;
  v104 = v60;
  v105 = v62;
  v106 = v61;
  v107 = __PAIR64__(v53, v54);
  v33 = _ViewInputs.size.getter();
  v96 = v6;
  v99 = v7;
  v97 = v64;
  *(_QWORD *)&v100 = __PAIR64__(v8, v56);
  *((_QWORD *)&v100 + 1) = __PAIR64__(v57, v9);
  v101 = v10;
  v102 = v58;
  v103 = v63;
  v104 = v60;
  v105 = v62;
  v106 = v61;
  v107 = __PAIR64__(v53, v54);
  v32 = _ViewInputs.transform.getter();
  v96 = v6;
  v99 = v7;
  v97 = v64;
  *(_QWORD *)&v100 = __PAIR64__(v8, v56);
  *((_QWORD *)&v100 + 1) = __PAIR64__(v57, v9);
  v101 = v10;
  v102 = v58;
  v103 = v63;
  v104 = v60;
  v105 = v62;
  v106 = v61;
  v107 = __PAIR64__(v53, v54);
  v20 = _ViewInputs.environment.getter();
  LOBYTE(v96) = 0;
  HIDWORD(v96) = v35;
  v97 = v34;
  v98 = v33;
  v99 = __PAIR64__(v20, v32);
  *(_QWORD *)&v100 = v47;
  v75 = v42;
  v76 = v46;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v74, v42, MEMORY[0x1E0DEDCE8], v44, MEMORY[0x1E0DEDD18], v21);
  v96 = v6;
  v99 = v7;
  v97 = v64;
  *(_QWORD *)&v100 = __PAIR64__(v8, v56);
  *((_QWORD *)&v100 + 1) = __PAIR64__(v57, v9);
  v101 = v10;
  v102 = v58;
  v103 = v63;
  v104 = v60;
  v105 = v62;
  v106 = v61;
  v107 = __PAIR64__(v53, v54);
  LODWORD(v83) = v49;
  v22 = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  closure #2 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(1, a5, a6, v23);
  LODWORD(v6) = AGGraphCreateOffsetAttribute2();
  v83 = v22;
  v86 = v7;
  v84 = v64;
  *(_QWORD *)&v87 = __PAIR64__(v8, v56);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v57, v9);
  v88 = v55;
  v89 = v58;
  v90 = v63;
  v91 = v60;
  v92 = v62;
  v93 = v61;
  v94 = v54;
  v95 = v53;
  v83 = __PAIR64__(_ViewInputs.transaction.getter(), v6);
  v72 = v36;
  v73 = v40;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v83, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v71, v36, MEMORY[0x1E0DEDCE8], v37, MEMORY[0x1E0DEDD18], v24);
  _ViewInputs.transaction.setter();
  _GraphValue.init(_:)();
  v83 = v96;
  v84 = v97;
  v86 = v99;
  v87 = v100;
  v88 = v101;
  static Animatable._makeAnimatable(value:inputs:)();
  LODWORD(v83) = v65;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTransitionProgress>, (uint64_t)&unk_1E1AE6798, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  LODWORD(v44) = _GraphValue.value.getter();
  LODWORD(v83) = v66;
  LODWORD(v42) = _GraphValue.value.getter();
  LODWORD(v83) = v49;
  v51 = _GraphValue.value.getter();
  v83 = v59;
  v86 = v7;
  v84 = v64;
  *(_QWORD *)&v87 = __PAIR64__(v8, v56);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v57, v9);
  v88 = v55;
  v89 = v58;
  v90 = v63;
  v91 = v60;
  v92 = v62;
  v93 = v61;
  v94 = v54;
  v95 = v53;
  v50 = _ViewInputs.position.getter();
  v83 = v59;
  v86 = v7;
  v84 = v64;
  *(_QWORD *)&v87 = __PAIR64__(v8, v56);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v57, v9);
  v88 = v55;
  v89 = v58;
  v90 = v63;
  v91 = v60;
  v92 = v62;
  v93 = v61;
  v94 = v54;
  v95 = v53;
  LODWORD(v40) = _ViewInputs.size.getter();
  v83 = v59;
  v86 = v7;
  v84 = v64;
  *(_QWORD *)&v87 = __PAIR64__(v8, v56);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v57, v9);
  v88 = v55;
  v89 = v58;
  v90 = v63;
  v91 = v60;
  v92 = v62;
  v93 = v61;
  v94 = v54;
  v95 = v53;
  LODWORD(v37) = _ViewInputs.transform.getter();
  v83 = v59;
  v86 = v7;
  v84 = v64;
  *(_QWORD *)&v87 = __PAIR64__(v8, v56);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v57, v9);
  v88 = v55;
  v89 = v58;
  v90 = v63;
  v91 = v60;
  v92 = v62;
  v93 = v61;
  v94 = v54;
  v95 = v53;
  v25 = _ViewInputs.environment.getter();
  v83 = __PAIR64__(v42, v44);
  v84 = v51;
  v85 = v50;
  v86 = __PAIR64__(v37, v40);
  *(_QWORD *)&v87 = __PAIR64__(v47, v25);
  v27 = type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier(0, a5, a6, v26);
  v68 = v27;
  v69 = type metadata accessor for ScrollTransitionModifier.EffectRule(0, a5, a6, v28);
  v70 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.EffectRule, v69);
  v29 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v83, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v67, v69, MEMORY[0x1E0DEDCE8], v29, MEMORY[0x1E0DEDD18], v30);
  _GraphValue.init(_:)();
  v83 = v59;
  v86 = v7;
  v84 = v64;
  *(_QWORD *)&v87 = __PAIR64__(v8, v56);
  *((_QWORD *)&v87 + 1) = __PAIR64__(v57, v9);
  v88 = v55;
  v89 = v58;
  v90 = v63;
  v91 = v60;
  v92 = v62;
  v93 = v61;
  v94 = v54;
  v95 = v53;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.EffectApplicationModifier, v27);
  static ViewModifier._makeView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v4 = a1 + 72;
  v8[2] = type metadata accessor for ScrollTransitionModifier(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v8, (uint64_t)&type metadata for ScrollTransitionConfiguration, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t closure #2 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v4 = a1 + 16;
  v8[2] = type metadata accessor for ScrollTransitionModifier(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_9, (uint64_t)v8, (uint64_t)&type metadata for ScrollTransitionConfiguration, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t static ScrollTransitionModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for ScrollTransitionModifier(0, a5, a6, a4);
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollTransitionModifier<A>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ScrollTransitionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollTransitionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ScrollTransitionModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ScrollTransitionModifier<A>(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2);
}

uint64_t ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v32 = a1;
  v33 = a2;
  v34 = a5;
  v11 = type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier(255, a3, a4, a3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.EffectApplicationModifier, v11);
  v12 = type metadata accessor for _ViewModifier_Content();
  v13 = type metadata accessor for PlaceholderContentView();
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5480], v13);
  v41 = v13;
  v42 = a3;
  v43 = v14;
  v44 = a4;
  v15 = MEMORY[0x18D75FF88](255, &v41, MEMORY[0x1E0CE6E08], 0);
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v12);
  v41 = v13;
  v42 = a3;
  v43 = v14;
  v44 = a4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v41 = v12;
  v42 = v15;
  v43 = v16;
  v44 = OpaqueTypeConformance2;
  v18 = MEMORY[0x18D75FF88](0, &v41, MEMORY[0x1E0CE6DD8], 0);
  v31 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v31 - v24;
  v35 = a3;
  v36 = a4;
  v37 = a6;
  v38 = a7;
  v39 = v32;
  v40 = v33;
  v26 = swift_checkMetadataState();
  v27 = swift_checkMetadataState();
  View.animation<A>(_:body:)();
  v41 = v26;
  v42 = v27;
  v43 = v16;
  v44 = OpaqueTypeConformance2;
  v28 = swift_getOpaqueTypeConformance2();
  static ViewBuilder.buildExpression<A>(_:)(v21, v18, v28);
  v29 = *(void (**)(char *, uint64_t))(v31 + 8);
  v29(v21, v18);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v25, v18, v34);
  return ((uint64_t (*)(char *, uint64_t))v29)(v25, v18);
}

uint64_t closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v29 = a1;
  v30 = a5;
  v12 = type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier(255, a3, a4, a3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.EffectApplicationModifier, v12);
  type metadata accessor for _ViewModifier_Content();
  v13 = type metadata accessor for PlaceholderContentView();
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5480], v13);
  v31 = v13;
  v32 = a3;
  v33 = v14;
  v34 = a4;
  v15 = MEMORY[0x18D75FF88](0, &v31, MEMORY[0x1E0CE6E08], 0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v29 - v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a3;
  *(_QWORD *)(v24 + 24) = a4;
  *(double *)(v24 + 32) = a6;
  *(double *)(v24 + 40) = a7;
  *(_QWORD *)(v24 + 48) = v29;
  *(_QWORD *)(v24 + 56) = a2;
  swift_retain();
  v25 = swift_checkMetadataState();
  View.visualEffect<A>(_:)();
  swift_release();
  v31 = v25;
  v32 = a3;
  v33 = v14;
  v34 = a4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  static ViewBuilder.buildExpression<A>(_:)(v19, v15, OpaqueTypeConformance2);
  v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  v27(v19, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v23, v15, v30);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v15);
}

uint64_t ScrollTransitionModifier.EffectApplicationModifier.effect(for:)@<X0>(uint64_t (*a1)(double)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_BYTE *, uint64_t, uint64_t);
  void (*v30)(_BYTE *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  void (*v34)(uint64_t, uint64_t, double);
  void (*v35)(uint64_t, uint64_t);
  void (*v36)(_BYTE *, _QWORD);
  void (*v37)(char *, uint64_t);
  void (*v38)(_BYTE *, _QWORD);
  void (*v39)(_BYTE *, _QWORD);
  char *v40;
  void (*v41)(_BYTE *, _QWORD);
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, double);
  uint64_t v48;
  char *v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  _BYTE v54[32];

  v51 = a4;
  v10 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(void (**)(uint64_t, uint64_t, double))(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v44 - v13;
  v48 = *(_QWORD *)(a2 - 8);
  v15 = v48;
  MEMORY[0x1E0C80A78](v16, v17);
  v53 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v44 - v21;
  v49 = (char *)&v44 - v21;
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v52 = (char *)&v44 - v26;
  v27 = a1(v25);
  v28 = ((uint64_t (*)(uint64_t, uint64_t))a1)(v27, 1);
  ((void (*)(uint64_t, uint64_t))a1)(v28, 2);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v51, v22, a2);
  v50 = *(void (**)(uint64_t, uint64_t))(v10 + 24);
  v50(a2, v10);
  v29 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 40);
  v30 = (void (*)(_BYTE *, _QWORD))v29(v54, a2, v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v32 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v45 = (void (*)(char *, uint64_t))*((_QWORD *)v47 + 1);
  v45(v14, AssociatedTypeWitness);
  v30(v54, 0);
  v33 = (void (*)(_BYTE *, _QWORD))v29(v54, a2, v10);
  v34 = *(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16);
  v46 = AssociatedConformanceWitness;
  v47 = v34;
  v34(AssociatedTypeWitness, AssociatedConformanceWitness, a5);
  v33(v54, 0);
  v35 = v50;
  v50(a2, v10);
  v36 = (void (*)(_BYTE *, _QWORD))v29(v54, a2, v10);
  v44 = v32;
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v37 = v45;
  v45(v14, AssociatedTypeWitness);
  v36(v54, 0);
  v35(a2, v10);
  v38 = (void (*)(_BYTE *, _QWORD))v29(v54, a2, v10);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v37(v14, AssociatedTypeWitness);
  v38(v54, 0);
  v39 = (void (*)(_BYTE *, _QWORD))v29(v54, a2, v10);
  v47(AssociatedTypeWitness, v46, a6);
  v39(v54, 0);
  v40 = v53;
  v50(a2, v10);
  v41 = (void (*)(_BYTE *, _QWORD))v29(v54, a2, v10);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v37(v14, AssociatedTypeWitness);
  v41(v54, 0);
  v42 = *(void (**)(char *, uint64_t))(v48 + 8);
  v42(v40, a2);
  v42(v49, a2);
  return ((uint64_t (*)(char *, uint64_t))v42)(v52, a2);
}

_QWORD *ScrollTransitionModifier.EffectRule.container.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t Value;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[8];
  char v18;

  type metadata accessor for ScrollTransitionModifier(0, a2, a3, a1);
  Value = AGGraphGetValue();
  v17[0] = *(_OWORD *)Value;
  v6 = *(_OWORD *)(Value + 64);
  v8 = *(_OWORD *)(Value + 16);
  v7 = *(_OWORD *)(Value + 32);
  v17[3] = *(_OWORD *)(Value + 48);
  v17[4] = v6;
  v17[1] = v8;
  v17[2] = v7;
  v10 = *(_OWORD *)(Value + 96);
  v9 = *(_OWORD *)(Value + 112);
  v11 = *(_OWORD *)(Value + 80);
  v18 = *(_BYTE *)(Value + 128);
  v17[6] = v10;
  v17[7] = v9;
  v17[5] = v11;
  v12 = *(_OWORD *)(Value + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(Value + 96);
  *(_OWORD *)(a4 + 112) = v12;
  *(_BYTE *)(a4 + 128) = *(_BYTE *)(Value + 128);
  v13 = *(_OWORD *)(Value + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(Value + 32);
  *(_OWORD *)(a4 + 48) = v13;
  v14 = *(_OWORD *)(Value + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(Value + 64);
  *(_OWORD *)(a4 + 80) = v14;
  v15 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a4 = *(_OWORD *)Value;
  *(_OWORD *)(a4 + 16) = v15;
  return outlined retain of ScrollTransitionModifier<A>(v17);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollTransitionModifier<A>.EffectApplicationModifier@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return ScrollTransitionModifier.EffectApplicationModifier.body(content:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, *(double *)v2, *(double *)(v2 + 8));
}

uint64_t ScrollTransitionModifier.EffectRule.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[18];

  v18[17] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)AGGraphGetValue();
  v7 = *(_QWORD *)AGGraphGetValue();
  ScrollTransitionModifier.EffectRule.container.getter(v3, v4, v5, (uint64_t)v18);
  v9 = v18[0];
  v8 = v18[1];
  swift_retain();
  outlined release of ScrollTransitionModifier<A1>(v18);
  v14[0] = v6;
  v14[1] = v7;
  v14[2] = v9;
  v14[3] = v8;
  v16 = a1;
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.EffectRule, a1);
  v11 = type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier(0, v4, v5, v10);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v15, v11, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v12);
  return swift_release();
}

uint64_t ScrollTransitionModifier.ConfigurationTransaction.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  v4 = Value[2];
  v5 = Value[3];
  v6 = Value[4];
  v7 = Value[5];
  v8 = Value[6];
  *a1 = *Value;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  swift_retain();
  return outlined copy of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v7);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ScrollTransitionModifier<A>.EffectRule@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollTransitionModifier<A>.EffectRule(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.EffectRule, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t ScrollTransitionModifier.ConfigurationTransaction.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)AGGraphGetValue();
  ScrollTransitionModifier.ConfigurationTransaction.configuration.getter(v9);
  v0 = v9[1];
  v1 = v9[2];
  v2 = v9[3];
  v3 = v9[4];
  v4 = v10;
  v5 = v11;
  v6 = v10 >> 62;
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v0, v1, v2, v3, v4);
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(v0, v1, v2, v3, v4);
  if (!(_DWORD)v6 || ((_DWORD)v6 == 1 ? (v7 = v5 == 0) : (v7 = 1), !v7))
    Transaction.animation.setter();
  return v12;
}

_QWORD *ScrollTransitionModifier.StageProgress.container.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t Value;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[8];
  char v18;

  type metadata accessor for ScrollTransitionModifier(0, a2, a3, a1);
  Value = AGGraphGetValue();
  v17[0] = *(_OWORD *)Value;
  v6 = *(_OWORD *)(Value + 64);
  v8 = *(_OWORD *)(Value + 16);
  v7 = *(_OWORD *)(Value + 32);
  v17[3] = *(_OWORD *)(Value + 48);
  v17[4] = v6;
  v17[1] = v8;
  v17[2] = v7;
  v10 = *(_OWORD *)(Value + 96);
  v9 = *(_OWORD *)(Value + 112);
  v11 = *(_OWORD *)(Value + 80);
  v18 = *(_BYTE *)(Value + 128);
  v17[6] = v10;
  v17[7] = v9;
  v17[5] = v11;
  v12 = *(_OWORD *)(Value + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(Value + 96);
  *(_OWORD *)(a4 + 112) = v12;
  *(_BYTE *)(a4 + 128) = *(_BYTE *)(Value + 128);
  v13 = *(_OWORD *)(Value + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(Value + 32);
  *(_OWORD *)(a4 + 48) = v13;
  v14 = *(_OWORD *)(Value + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(Value + 64);
  *(_OWORD *)(a4 + 80) = v14;
  v15 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a4 = *(_OWORD *)Value;
  *(_OWORD *)(a4 + 16) = v15;
  return outlined retain of ScrollTransitionModifier<A>(v17);
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollTransitionModifier<A>.ConfigurationTransaction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ScrollTransitionModifier.ConfigurationTransaction.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollTransitionModifier<A>.ConfigurationTransaction(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.ConfigurationTransaction, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t ScrollTransitionModifier.StageProgress.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (*(_DWORD *)(v1 + 28) + 1);
  *(_DWORD *)(v1 + 28) = v3;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
    __break(1u);
  v4 = *(unsigned int *)(v1 + 12);
  v5 = *(unsigned int *)(v1 + 16);
  v6 = *(unsigned int *)(v1 + 20);
  v7 = *(unsigned int *)(v1 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned int *)(v1 + 8);
  v11 = *(_BYTE *)v1;
  v12 = v10 | (v4 << 32);
  v13 = v5 | (v6 << 32);
  v14 = v7 | (v3 << 32);
  LOBYTE(v42) = *MEMORY[0x1E0CFED28] == (_DWORD)v7;
  GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
  v27 = v43;
  v28 = v42;
  v26 = v44;
  v25 = v45;
  v32 = v9;
  v30 = v12;
  v31 = v11;
  v29 = v13;
  ScrollTransitionModifier.StageProgress.container.getter(v14, v9, v8, (uint64_t)&v33);
  if ((v11 & 1) != 0)
  {
    v16 = *((_QWORD *)&v38 + 1);
    v15 = v38;
    v18 = *((_QWORD *)&v39 + 1);
    v17 = v39;
    v20 = *((_QWORD *)&v40 + 1);
    v19 = v40;
    v21 = *((_QWORD *)&v37 + 1);
    v42 = v33;
    v43 = v34;
    v44 = v35;
    v45 = v36;
    v46 = v37;
    v47 = v38;
    v48 = v39;
    v49 = v40;
    v50 = v41;
    swift_retain();
  }
  else
  {
    v15 = *((_QWORD *)&v34 + 1);
    v21 = v34;
    v17 = *((_QWORD *)&v35 + 1);
    v16 = v35;
    v19 = *((_QWORD *)&v36 + 1);
    v18 = v36;
    v42 = v33;
    v43 = v34;
    v44 = v35;
    v45 = v36;
    v24 = v37;
    v46 = v37;
    v47 = v38;
    v50 = v41;
    v48 = v39;
    v49 = v40;
    swift_retain();
    v20 = v24;
  }
  outlined copy of ScrollTransitionConfiguration.Mode(v15, v16, v17, v18, v19);
  outlined release of ScrollTransitionModifier<A1>(&v42);
  *(_QWORD *)&v42 = v21;
  *((_QWORD *)&v42 + 1) = v15;
  *(_QWORD *)&v43 = v16;
  *((_QWORD *)&v43 + 1) = v17;
  *(_QWORD *)&v44 = v18;
  *((_QWORD *)&v44 + 1) = v19;
  *(_QWORD *)&v45 = v20;
  v33 = v28;
  v34 = v27;
  v35 = v26;
  LODWORD(v36) = v25;
  ScrollTransitionModifier.StageProgress.progress(for:geometryProxy:)((uint64_t *)&v42, (uint64_t)&v33, v31, v30, v29, v14, v32, v8);
  *(_QWORD *)&v42 = v22;
  AGGraphSetOutputValue();
  swift_release();
  return outlined consume of ScrollTransitionConfiguration.Mode(v15, v16, v17, v18, v19);
}

void ScrollTransitionModifier.StageProgress.progress(for:geometryProxy:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  char v11;
  int v12;
  uint64_t *Value;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30[4];
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned __int8 v41;
  _OWORD v42[8];
  unsigned __int8 v43;

  v24 = a1[1];
  v25 = *a1;
  v22 = a1[3];
  v23 = a1[2];
  v21 = a1[4];
  v29 = a1[5];
  v26 = *(_OWORD *)a2;
  v27 = *(_OWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 40);
  v28 = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(a2 + 44);
  v10 = *(_DWORD *)(a2 + 48);
  v11 = a3 & 1;
  ScrollTransitionModifier.StageProgress.container.getter(a6, a7, a8, (uint64_t)&v33);
  v12 = v41;
  v42[0] = v33;
  v42[1] = v34;
  v42[2] = v35;
  v42[3] = v36;
  v42[4] = v37;
  v42[5] = v38;
  v42[6] = v39;
  v42[7] = v40;
  v43 = v41;
  outlined release of ScrollTransitionModifier<A1>(v42);
  if (v12 == 2)
  {
    Value = (uint64_t *)AGGraphGetValue();
    v14 = v9;
    v15 = v8;
    v16 = v10;
    v17 = *Value;
    v18 = Value[1];
    swift_retain();
    swift_retain();
    *(_QWORD *)&v33 = v17;
    *((_QWORD *)&v33 + 1) = v18;
    v19 = EnvironmentValues.nearestScrollableAxes.getter();
    v10 = v16;
    v8 = v15;
    swift_release();
    v9 = v14;
    swift_release();
    v20 = v19 != 1;
  }
  else
  {
    v20 = v12 & 1;
  }
  if (v29 >> 62)
  {
    if (v29 >> 62 == 1)
    {
      v32 = v25;
      v30[0] = v24;
      v30[1] = v23;
      v30[2] = v22;
      v30[3] = v21;
      v31 = v29 & 1;
      v33 = v26;
      v34 = v27;
      *(_QWORD *)&v35 = v28;
      *((_QWORD *)&v35 + 1) = __PAIR64__(v9, v8);
      LODWORD(v36) = v10;
      ScrollTransitionModifier.StageProgress.interactiveProgress(threshold:axis:timingCurve:geometryProxy:)(&v32, v20, v30, &v33, v11);
    }
  }
  else
  {
    v30[0] = v25;
    v33 = v26;
    v34 = v27;
    *(_QWORD *)&v35 = v28;
    *((_QWORD *)&v35 + 1) = __PAIR64__(v9, v8);
    LODWORD(v36) = v10;
    ScrollTransitionModifier.StageProgress.animatedProgress(threshold:axis:geometryProxy:)(v30, v20, &v33);
  }
}

void ScrollTransitionModifier.StageProgress.animatedProgress(threshold:axis:geometryProxy:)(uint64_t *a1, char a2, __int128 *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  _BYTE v7[32];
  __int128 *v8;
  __int128 v9;
  __int128 *Value;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  _BYTE v18[40];

  v3 = a2 & 1;
  v4 = *a1;
  v5 = *((_DWORD *)a3 + 12);
  v6 = a3[1];
  v14 = *a3;
  v15 = v6;
  v16 = a3[2];
  v17 = v5;
  static CoordinateSpaceProtocol<>.scrollView(axis:)();
  GeometryProxy.bounds(of:)();
  outlined destroy of NamedCoordinateSpace((uint64_t)&v12);
  outlined init with take of CGRect?((uint64_t)v18, (uint64_t)&v14);
  if ((v16 & 1) == 0)
  {
    *(_OWORD *)v7 = v15;
    *(_OWORD *)&v7[16] = v14;
    if (v3)
    {
      CGRectGetHeight(*(CGRect *)&v7[16]);
      Value = (__int128 *)AGGraphGetValue();
      v11 = Value[1];
      v12 = *Value;
      v13 = v11;
      ViewSize.height.getter();
    }
    else
    {
      CGRectGetWidth(*(CGRect *)&v7[16]);
      v8 = (__int128 *)AGGraphGetValue();
      v9 = v8[1];
      v12 = *v8;
      v13 = v9;
      ViewSize.width.getter();
    }
    ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(v4);
  }
}

double ScrollTransitionModifier.StageProgress.interactiveProgress(threshold:axis:timingCurve:geometryProxy:)(uint64_t *a1, char a2, uint64_t *a3, __int128 *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  _BYTE v18[32];
  double Height;
  __int128 *v20;
  __int128 v21;
  double v22;
  double v23;
  __int128 *Value;
  __int128 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  _BYTE v41[48];

  v6 = *a1;
  v8 = *a3;
  v7 = a3[1];
  v9 = a2 & 1;
  v11 = a3[2];
  v10 = a3[3];
  v12 = *((_BYTE *)a3 + 32);
  v13 = *((_DWORD *)a4 + 12);
  v14 = a4[1];
  v37 = *a4;
  v38 = v14;
  v39 = a4[2];
  v40 = v13;
  static CoordinateSpaceProtocol<>.scrollView(axis:)();
  GeometryProxy.bounds(of:)();
  outlined destroy of NamedCoordinateSpace((uint64_t)&v34);
  outlined init with take of CGRect?((uint64_t)v41, (uint64_t)&v37);
  v15 = 0.0;
  if ((v39 & 1) == 0)
  {
    v16 = *((double *)&v37 + 1);
    v17 = *(double *)&v37;
    *(_OWORD *)v18 = v38;
    *(_OWORD *)&v18[16] = v37;
    if (v9)
    {
      Height = CGRectGetHeight(*(CGRect *)&v18[16]);
      Value = (__int128 *)AGGraphGetValue();
      v25 = Value[1];
      v34 = *Value;
      v35 = v25;
      ViewSize.height.getter();
      v23 = v26;
    }
    else
    {
      Height = CGRectGetWidth(*(CGRect *)&v18[16]);
      v20 = (__int128 *)AGGraphGetValue();
      v21 = v20[1];
      v34 = *v20;
      v35 = v21;
      ViewSize.width.getter();
      v23 = v22;
      v16 = v17;
    }
    ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(v6);
    v27 = v23 * 0.5 - Height * 0.5;
    v29 = v28 + v27;
    v30 = v27 - v28;
    if ((a5 & 1) != 0)
      v31 = v30;
    else
      v31 = v23;
    if ((a5 & 1) != 0)
      v29 = -Height;
    if (v29 < v31)
    {
      v32 = 0.0;
      if (v16 >= v29)
      {
        v32 = 1.0;
        if (v16 < v31)
          v32 = (v16 - v29) / (v31 - v29);
      }
      *(_QWORD *)&v34 = v8;
      *((_QWORD *)&v34 + 1) = v7;
      *(_QWORD *)&v35 = v11;
      *((_QWORD *)&v35 + 1) = v10;
      v36 = v12;
      if ((a5 & 1) == 0)
        v32 = 1.0 - v32;
      return UnitCurve.value(at:)(v32);
    }
  }
  return v15;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollTransitionModifier<A>.StageProgress(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.StageProgress, a1);
  return static AsyncAttribute.flags.getter();
}

double protocol witness for Animatable.animatableData.setter in conformance ScrollTransitionProgress(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress;
}

double protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)a1;
  return result;
}

BOOL ScrollTransitionPhase.isIdentity.getter(char a1)
{
  return a1 == 1;
}

BOOL static ScrollTransitionPhase.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

double ScrollTransitionPhase.value.getter(char a1)
{
  return dbl_187C22610[a1];
}

void ScrollTransitionPhase.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int ScrollTransitionPhase.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ScrollTransitionPhase and conformance ScrollTransitionPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollTransitionPhase and conformance ScrollTransitionPhase;
  if (!lazy protocol witness table cache variable for type ScrollTransitionPhase and conformance ScrollTransitionPhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionPhase, &type metadata for ScrollTransitionPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTransitionPhase and conformance ScrollTransitionPhase);
  }
  return result;
}

uint64_t destroy for ScrollTransitionConfiguration(uint64_t a1)
{
  swift_release();
  return outlined consume of ScrollTransitionConfiguration.Mode(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

_QWORD *initializeWithCopy for ScrollTransitionConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  v8 = a2[6];
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v7);
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return a1;
}

_QWORD *assignWithCopy for ScrollTransitionConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v9 = a2[5];
  v8 = a2[6];
  outlined copy of ScrollTransitionConfiguration.Mode(v4, v5, v6, v7, v9);
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  v14 = a1[5];
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v9;
  a1[6] = v8;
  outlined consume of ScrollTransitionConfiguration.Mode(v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ScrollTransitionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;

  swift_release();
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v4;
  outlined consume of ScrollTransitionConfiguration.Mode(v5, v6, v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionConfiguration(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ScrollTransitionConfiguration(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_QWORD *)(a1 + 40) = 2 * -a2;
      *(_QWORD *)(a1 + 48) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTransitionConfiguration()
{
  return &type metadata for ScrollTransitionConfiguration;
}

ValueMetadata *type metadata accessor for ScrollTransitionConfiguration.Threshold()
{
  return &type metadata for ScrollTransitionConfiguration.Threshold;
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1872FF948 + 4 * byte_187C220D9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1872FF97C + 4 * byte_187C220D4[v4]))();
}

uint64_t sub_1872FF97C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872FF984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1872FF98CLL);
  return result;
}

uint64_t sub_1872FF998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1872FF9A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1872FF9A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1872FF9AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollTransitionPhase()
{
  return &type metadata for ScrollTransitionPhase;
}

uint64_t sub_1872FF9C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ScrollTransitionModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ScrollTransitionModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

_QWORD *initializeBufferWithCopyOfBuffer for ScrollTransitionConfiguration.Threshold.Storage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ScrollTransitionConfiguration.Threshold.Storage()
{
  return swift_release();
}

_QWORD *assignWithCopy for ScrollTransitionConfiguration.Threshold(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for ScrollTransitionConfiguration.Threshold.Storage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionConfiguration.Threshold(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionConfiguration.Threshold(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for ScrollTransitionConfiguration.Threshold.Storage(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if ((_DWORD)v1 == 3)
    return (*a1 >> 3) + 3;
  else
    return v1;
}

unint64_t *destructiveInjectEnumTag for ScrollTransitionConfiguration.Threshold.Storage(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 3)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 3);
    v3 = 0xC000000000000000;
  }
  *result = v2 | v3;
  return result;
}

void *type metadata accessor for ScrollTransitionConfiguration.Threshold.Storage()
{
  return &unk_1E1AFAA68;
}

uint64_t destroy for ScrollTransitionConfiguration.Mode(uint64_t a1)
{
  return outlined consume of ScrollTransitionConfiguration.Mode(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t *initializeWithCopy for ScrollTransitionConfiguration.Mode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  outlined copy of ScrollTransitionConfiguration.Mode(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for ScrollTransitionConfiguration.Mode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  outlined copy of ScrollTransitionConfiguration.Mode(*a2, v4, v5, v6, v7);
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  v13 = a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  outlined consume of ScrollTransitionConfiguration.Mode(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for ScrollTransitionConfiguration.Mode(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v8;
  *((_OWORD *)a1 + 2) = a2[2];
  outlined consume of ScrollTransitionConfiguration.Mode(v3, v5, v4, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionConfiguration.Mode(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ScrollTransitionConfiguration.Mode(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 2 * -a2;
      *(_QWORD *)(a1 + 40) = 0;
      return result;
    }
    *(_BYTE *)(a1 + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for ScrollTransitionConfiguration.Mode(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveProjectEnumData for ScrollTransitionConfiguration.Mode(uint64_t result)
{
  *(_QWORD *)(result + 32) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *destructiveInjectEnumTag for ScrollTransitionConfiguration.Mode(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[4] = result[4] & 1 | (a2 << 62);
  }
  else
  {
    *result = (a2 - 2);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    *((_OWORD *)result + 2) = xmmword_187BF9FB0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTransitionConfiguration.Mode()
{
  return &type metadata for ScrollTransitionConfiguration.Mode;
}

uint64_t destroy for ScrollTransitionModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  swift_release();
  return outlined consume of ScrollTransitionConfiguration.Mode(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
}

uint64_t initializeWithCopy for ScrollTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v5, v6, v7, v8, v9);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  v16 = *(_QWORD *)(a2 + 120);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v16;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for ScrollTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  outlined copy of ScrollTransitionConfiguration.Mode(v5, v6, v7, v8, v9);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  outlined consume of ScrollTransitionConfiguration.Mode(v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a2 + 120);
  outlined copy of ScrollTransitionConfiguration.Mode(v16, v17, v18, v19, v20);
  v22 = *(_QWORD *)(a1 + 80);
  v23 = *(_QWORD *)(a1 + 88);
  v24 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 104);
  v26 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v19;
  *(_QWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 120) = v21;
  outlined consume of ScrollTransitionConfiguration.Mode(v22, v23, v24, v25, v26);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ScrollTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  outlined consume of ScrollTransitionConfiguration.Mode(v4, v5, v6, v7, v8);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v15;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  outlined consume of ScrollTransitionConfiguration.Mode(v10, v11, v12, v13, v14);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionModifier(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 129))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollTransitionModifier<A>()
{
  return &protocol witness table for ScrollTransitionModifier<A>;
}

uint64_t type metadata accessor for ScrollTransitionModifier.StageProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollTransitionModifier.StageProgress);
}

uint64_t type metadata accessor for ScrollTransitionModifier.ConfigurationTransaction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollTransitionModifier.ConfigurationTransaction);
}

uint64_t type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollTransitionModifier.EffectApplicationModifier);
}

uint64_t type metadata accessor for ScrollTransitionModifier.EffectRule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollTransitionModifier.EffectRule);
}

uint64_t initializeWithCopy for ScrollTransitionModifier.EffectApplicationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ScrollTransitionModifier.EffectApplicationModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ScrollTransitionModifier.EffectApplicationModifier(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

void *type metadata accessor for ScrollTransitionProgress()
{
  return &unk_1E1AE6798;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionModifier.StageProgress(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[32])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionModifier.StageProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void base witness table accessor for _AttributeBody in ScrollTransitionModifier<A>.StageProgress()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ScrollTransitionModifier<A>.ConfigurationTransaction()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ScrollTransitionModifier<A>.EffectRule()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollTransitionModifier<A>.EffectApplicationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ScrollTransitionProgress()
{
  return MEMORY[0x1E0CE80F0];
}

_QWORD *outlined release of ScrollTransitionModifier<A1>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[12];
  v11 = a1[11];
  v12 = a1[10];
  v9 = a1[14];
  v10 = a1[13];
  swift_release();
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(v12, v11, v7, v10, v9);
  return a1;
}

_QWORD *outlined retain of ScrollTransitionModifier<A>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v11 = a1[11];
  v12 = a1[10];
  v9 = a1[13];
  v10 = a1[12];
  v8 = a1[14];
  swift_retain();
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v12, v11, v10, v9, v8);
  return a1;
}

uint64_t partial apply for closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_187300598()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return ScrollTransitionModifier.EffectApplicationModifier.effect(for:)(*(uint64_t (**)(double))(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionModifier.Stage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187300634 + 4 * byte_187C220E3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187300668 + 4 * byte_187C220DE[v4]))();
}

uint64_t sub_187300668(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187300670(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187300678);
  return result;
}

uint64_t sub_187300684(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18730068CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187300690(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187300698(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for ScrollTransitionModifier.Stage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScrollTransitionModifier.Stage);
}

uint64_t sub_1873006B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *a1;
  v4 = a1[1];
  v6 = type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier(255, *a1, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollTransitionModifier<A>.EffectApplicationModifier, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  v8 = type metadata accessor for PlaceholderContentView();
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5480], v8);
  v14 = v8;
  v15 = v5;
  v16 = v9;
  v17 = v4;
  v10 = MEMORY[0x18D75FF88](255, &v14, MEMORY[0x1E0CE6E08], 0);
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v14 = v8;
  v15 = v5;
  v16 = v9;
  v17 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v14 = v7;
  v15 = v10;
  v16 = v11;
  v17 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for Equatable in ScrollTransitionModifier<A>.Stage()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d4UI12f34ItemGroupV11descriptionSSvgSSAA0C5G54Ocfu_33_9399ad856152282ea5b6572c43dac5b6AFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _BYTE __dst[264];
  _BYTE __src[264];
  char v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    do
    {
      outlined init with copy of TabEntry(v4, (uint64_t)__src);
      if ((v23 & 1) != 0)
      {
        v5 = memcpy(__dst, __src, sizeof(__dst));
        strcpy((char *)v20, "TabItemGroup ");
        HIWORD(v20[1]) = -4864;
        v6._countAndFlagsBits = TabItemGroup.description.getter(v5);
        String.append(_:)(v6);
        swift_bridgeObjectRelease();
        v7 = v20[0];
        v8 = v20[1];
        outlined destroy of TabItemGroup((uint64_t)__dst);
      }
      else
      {
        *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
        *(_OWORD *)&__dst[80] = *(_OWORD *)&__src[80];
        *(_QWORD *)&__dst[96] = *(_QWORD *)&__src[96];
        *(_OWORD *)__dst = *(_OWORD *)__src;
        *(_OWORD *)&__dst[16] = *(_OWORD *)&__src[16];
        *(_OWORD *)&__dst[32] = *(_OWORD *)&__src[32];
        *(_OWORD *)&__dst[48] = *(_OWORD *)&__src[48];
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease();
        strcpy((char *)v20, "TabItem ");
        BYTE1(v20[1]) = 0;
        WORD1(v20[1]) = 0;
        HIDWORD(v20[1]) = -402653184;
        v9._countAndFlagsBits = TabItem.platformIdentifier.getter();
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        v10._countAndFlagsBits = 0x3D6E656464696820;
        v10._object = (void *)0xE800000000000000;
        String.append(_:)(v10);
        v11 = TabEntry.hidden.getter();
        v12 = (v11 & 1) == 0;
        if ((v11 & 1) != 0)
          v13 = 1702195828;
        else
          v13 = 0x65736C6166;
        if (v12)
          v14 = 0xE500000000000000;
        else
          v14 = 0xE400000000000000;
        v15 = v14;
        String.append(_:)(*(Swift::String *)&v13);
        swift_bridgeObjectRelease();
        v7 = v20[0];
        v8 = v20[1];
        outlined destroy of TabItem((uint64_t)__dst);
      }
      v2 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v24;
      }
      v17 = *(_QWORD *)(v2 + 16);
      v16 = *(_QWORD *)(v2 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        v2 = v24;
      }
      *(_QWORD *)(v2 + 16) = v17 + 1;
      v18 = v2 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v7;
      *(_QWORD *)(v18 + 40) = v8;
      v4 += 272;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t TabItemGroup.init(childEntries:actions:transientIdentifier:header:compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _OWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v53;
  int64_t v55;
  uint64_t v59;
  _OWORD v60[6];
  uint64_t v61;
  _OWORD v62[6];
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD __dst[17];
  _BYTE __src[264];
  char v73;
  _QWORD v74[36];

  v7 = a5;
  v8 = a1;
  v9 = a7;
  *(_OWORD *)(a7 + 48) = 0u;
  v10 = (_OWORD *)(a7 + 48);
  v10[11] = 0u;
  v10[12] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v59 = (uint64_t)v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  if (!v11)
  {
LABEL_45:
    v21 = (char *)(v59 + 104);
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(v9 + 16) = a2;
    outlined init with copy of TabItem?(v7, (uint64_t)v74);
    if (v74[3])
    {
      *(_QWORD *)&v64 = v74[11];
      v44 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v44 != -1)
        goto LABEL_65;
      goto LABEL_47;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for TabItem?);
    v48 = a6;
    goto LABEL_50;
  }
  v53 = a2;
  v55 = v9;
  v7 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TabEntry(v7, (uint64_t)v74);
    outlined init with copy of TabEntry((uint64_t)v74, (uint64_t)__src);
    if ((v73 & 1) == 0)
    {
      __dst[4] = *(_OWORD *)&__src[64];
      __dst[5] = *(_OWORD *)&__src[80];
      *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
      __dst[0] = *(_OWORD *)__src;
      __dst[1] = *(_OWORD *)&__src[16];
      __dst[2] = *(_OWORD *)&__src[32];
      __dst[3] = *(_OWORD *)&__src[48];
      outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)&v64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
      v31 = *((_QWORD *)v12 + 2);
      v30 = *((_QWORD *)v12 + 3);
      if (v31 >= v30 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v12);
      *((_QWORD *)v12 + 2) = v31 + 1;
      v32 = &v12[104 * v31];
      v33 = v64;
      v34 = v66;
      *((_OWORD *)v32 + 3) = v65;
      *((_OWORD *)v32 + 4) = v34;
      *((_OWORD *)v32 + 2) = v33;
      v35 = v67;
      v36 = v68;
      v37 = v69;
      *((_QWORD *)v32 + 16) = v70;
      *((_OWORD *)v32 + 6) = v36;
      *((_OWORD *)v32 + 7) = v37;
      *((_OWORD *)v32 + 5) = v35;
      outlined destroy of TabItem((uint64_t)__dst);
      goto LABEL_5;
    }
    memcpy(__dst, __src, 0x108uLL);
    outlined init with copy of TabItem?((uint64_t)&__dst[3], (uint64_t)&v64);
    if (*((_QWORD *)&v65 + 1))
    {
      v62[4] = v68;
      v62[5] = v69;
      v63 = v70;
      v62[0] = v64;
      v62[1] = v65;
      v62[2] = v66;
      v62[3] = v67;
      outlined init with copy of TabItem((uint64_t)v62, (uint64_t)v60);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
      v14 = *((_QWORD *)v12 + 2);
      v13 = *((_QWORD *)v12 + 3);
      if (v14 >= v13 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
      *((_QWORD *)v12 + 2) = v14 + 1;
      v15 = &v12[104 * v14];
      v16 = v60[0];
      v17 = v60[2];
      *((_OWORD *)v15 + 3) = v60[1];
      *((_OWORD *)v15 + 4) = v17;
      *((_OWORD *)v15 + 2) = v16;
      v18 = v60[3];
      v19 = v60[4];
      v20 = v60[5];
      *((_QWORD *)v15 + 16) = v61;
      *((_OWORD *)v15 + 6) = v19;
      *((_OWORD *)v15 + 7) = v20;
      *((_OWORD *)v15 + 5) = v18;
      outlined destroy of TabItem((uint64_t)v62);
    }
    v21 = *(char **)&__dst[0];
    v22 = *(_QWORD *)&__dst[1];
    v23 = *(_QWORD *)(*(_QWORD *)&__dst[1] + 16);
    v9 = *(_QWORD *)(*(_QWORD *)&__dst[0] + 16);
    v24 = v9 + v23;
    if (__OFADD__(v9, v23))
      goto LABEL_58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || v24 > *((_QWORD *)v21 + 3) >> 1)
    {
      if (v9 <= v24)
        v26 = v9 + v23;
      else
        v26 = v9;
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v26, 1, v21);
    }
    if (*(_QWORD *)(v22 + 16))
    {
      if ((*((_QWORD *)v21 + 3) >> 1) - *((_QWORD *)v21 + 2) < v23)
        goto LABEL_61;
      swift_arrayInitWithCopy();
      if (v23)
      {
        v27 = *((_QWORD *)v21 + 2);
        v28 = __OFADD__(v27, v23);
        v29 = v27 + v23;
        if (v28)
          goto LABEL_63;
        *((_QWORD *)v21 + 2) = v29;
      }
    }
    else if (v23)
    {
      goto LABEL_59;
    }
    swift_bridgeObjectRelease();
    v38 = *((_QWORD *)v21 + 2);
    v9 = *((_QWORD *)v12 + 2);
    v39 = v9 + v38;
    if (__OFADD__(v9, v38))
      goto LABEL_60;
    v40 = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)v40 && v39 <= *((_QWORD *)v12 + 3) >> 1)
    {
      if (*((_QWORD *)v21 + 2))
        goto LABEL_40;
    }
    else
    {
      if (v9 <= v39)
        v41 = v9 + v38;
      else
        v41 = v9;
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40, v41, 1, v12);
      if (*((_QWORD *)v21 + 2))
      {
LABEL_40:
        if ((*((_QWORD *)v12 + 3) >> 1) - *((_QWORD *)v12 + 2) < v38)
          goto LABEL_62;
        swift_arrayInitWithCopy();
        if (v38)
        {
          v42 = *((_QWORD *)v12 + 2);
          v28 = __OFADD__(v42, v38);
          v43 = v42 + v38;
          if (v28)
            goto LABEL_64;
          *((_QWORD *)v12 + 2) = v43;
        }
        goto LABEL_4;
      }
    }
    if (v38)
      break;
LABEL_4:
    swift_bridgeObjectRelease();
    outlined destroy of TabItemGroup((uint64_t)__dst);
LABEL_5:
    outlined destroy of TabEntry((uint64_t)v74);
    v7 += 272;
    if (!--v11)
    {
      v8 = a1;
      swift_bridgeObjectRelease();
      v7 = a5;
      v9 = v55;
      a2 = v53;
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once();
LABEL_47:
  LOWORD(__dst[0]) = static TabOptions.TraitKey.defaultValue;
  *(_OWORD *)((char *)__dst + 8) = *(_OWORD *)&qword_1EDF00118;
  WORD4(__dst[1]) = word_1EDF00128;
  BYTE10(__dst[1]) = byte_1EDF0012A;
  *(_QWORD *)&__dst[2] = qword_1EDF00130;
  WORD4(__dst[2]) = word_1EDF00138;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v45 = *(_QWORD *)&__src[8];
  v46 = *(_QWORD *)&__src[16];
  v47 = __src[24];
  outlined copy of TabCustomizationID?(*(uint64_t *)&__src[8], *(uint64_t *)&__src[16], __src[24]);
  outlined consume of TabCustomizationID?(v45, v46, v47);
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v74);
  v48 = a6;
  if (v47 != 255)
  {
    swift_bridgeObjectRelease();
    v49 = v47 & 1;
    goto LABEL_51;
  }
LABEL_50:
  v49 = 1;
  v45 = a3;
  v46 = a4;
LABEL_51:
  *(_QWORD *)(v9 + 24) = v45;
  *(_QWORD *)(v9 + 32) = v46;
  *(_BYTE *)(v9 + 40) = v49;
  outlined assign with copy of TabItem?(v7, v59);
  outlined assign with copy of TabItem?(v48, (uint64_t)v21);
  if (!*(_QWORD *)(*(_QWORD *)v9 + 16))
  {
LABEL_55:
    v50 = AGMakeUniqueID();
    goto LABEL_56;
  }
  *(_QWORD *)__src = *(_QWORD *)(*(_QWORD *)v9 + 120);
  *(_QWORD *)&__dst[0] = MEMORY[0x1E0DEE9D8];
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (!*(_QWORD *)(v74[0] + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v50 = *(_QWORD *)(v74[0] + 32);
  swift_bridgeObjectRelease();
LABEL_56:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v48, (uint64_t (*)(_QWORD))type metadata accessor for TabItem?);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, (uint64_t (*)(_QWORD))type metadata accessor for TabItem?);
  *(_QWORD *)(v9 + 256) = v50;
  return result;
}

uint64_t TabItemGroup.allChildEntries.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v9[104];
  _QWORD v10[33];
  char v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = v2 + 32;
    v4 = v12;
    do
    {
      outlined init with copy of TabItem(v5, (uint64_t)v9);
      outlined init with copy of TabItem((uint64_t)v9, (uint64_t)v10);
      v11 = 0;
      outlined destroy of TabItem((uint64_t)v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v4 = v12;
      }
      v7 = *(_QWORD *)(v4 + 16);
      v6 = *(_QWORD *)(v4 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        v4 = v12;
      }
      *(_QWORD *)(v4 + 16) = v7 + 1;
      outlined init with take of TabEntry(v10, (void *)(v4 + 272 * v7 + 32));
      v5 += 104;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v10[0] = v1;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  return v10[0];
}

BOOL TabItemGroup.sidebarReorderable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _UNKNOWN **v4;
  void *v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  _UNKNOWN **v11;
  __int128 v12;
  int v13;
  unsigned int v14;
  int v16;
  __int16 v17;
  __int128 v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int128 v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t v36;
  _OWORD __dst[17];
  _BYTE __src[264];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[6];
  uint64_t v48;

  outlined init with copy of TabItem?(v0 + 48, (uint64_t)&v40);
  if (!*((_QWORD *)&v41 + 1))
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v40, (uint64_t (*)(_QWORD))type metadata accessor for TabItem?);
    return 0;
  }
  v47[4] = v44;
  v47[5] = v45;
  v48 = v46;
  v47[0] = v40;
  v47[1] = v41;
  v47[2] = v42;
  v47[3] = v43;
  TabItem.resolvedSidebarCustomizationBehavior.getter((char *)&v40);
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
LABEL_22:
    outlined destroy of TabItem((uint64_t)v47);
    return 0;
  }
  v16 = v40;
  v3 = v1 + 32;
  swift_bridgeObjectRetain();
  v4 = &protocol witness table for TabOptions.TraitKey;
  while (1)
  {
    outlined init with copy of TabEntry(v3, (uint64_t)&v40);
    outlined init with copy of TabEntry((uint64_t)&v40, (uint64_t)__src);
    if ((v39 & 1) == 0)
      break;
    v5 = memcpy(__dst, __src, 0x108uLL);
    v6 = TabItemGroup.sidebarReorderable.getter(v5);
    outlined destroy of TabItemGroup((uint64_t)__dst);
    outlined destroy of TabEntry((uint64_t)&v40);
    if ((v6 & 1) != 0)
      goto LABEL_24;
LABEL_5:
    v3 += 272;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  __dst[4] = *(_OWORD *)&__src[64];
  __dst[5] = *(_OWORD *)&__src[80];
  *(_QWORD *)&__dst[6] = *(_QWORD *)&__src[96];
  __dst[0] = *(_OWORD *)__src;
  __dst[1] = *(_OWORD *)&__src[16];
  __dst[2] = *(_OWORD *)&__src[32];
  __dst[3] = *(_OWORD *)&__src[48];
  v23 = *(_QWORD *)&__src[88];
  v7 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v17 = static TabOptions.TraitKey.defaultValue;
  v18 = *(_OWORD *)&qword_1EDF00118;
  v19 = word_1EDF00128;
  v20 = byte_1EDF0012A;
  v21 = qword_1EDF00130;
  v22 = word_1EDF00138;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  v8 = v35;
  outlined consume of TabCustomizationID?(v31, v32, v33);
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)v30);
  if (v8)
  {
    v29 = v36;
    LOWORD(v23) = static TabOptions.TraitKey.defaultValue;
    v24 = *(_OWORD *)&qword_1EDF00118;
    v25 = word_1EDF00128;
    v26 = byte_1EDF0012A;
    v27 = qword_1EDF00130;
    v28 = word_1EDF00138;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v9 = HIBYTE(v19);
    outlined consume of TabCustomizationID?(v18, *((uint64_t *)&v18 + 1), v19);
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)v30);
    outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)&v17);
    if (v9)
    {
      v10 = TabItem.alwaysRequiresCustomizationID.getter();
      outlined destroy of TabItem((uint64_t)&v17);
      outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)v30);
      if ((v10 & 1) == 0)
        goto LABEL_17;
      goto LABEL_15;
    }
  }
  else
  {
    outlined destroy of TabItem((uint64_t)v30);
    outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)&v17);
  }
  outlined destroy of TabItem((uint64_t)&v17);
  outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)v30);
LABEL_15:
  v29 = v36;
  LOWORD(v23) = static TabOptions.TraitKey.defaultValue;
  v24 = *(_OWORD *)&qword_1EDF00118;
  v25 = word_1EDF00128;
  v26 = byte_1EDF0012A;
  v27 = qword_1EDF00130;
  v28 = word_1EDF00138;
  v11 = v4;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v12 = v18;
  v13 = v19;
  outlined copy of TabCustomizationID?(v18, *((uint64_t *)&v18 + 1), v19);
  outlined consume of TabCustomizationID?(v12, *((uint64_t *)&v12 + 1), v13);
  swift_bridgeObjectRelease();
  if (v13 == 255)
  {
    outlined destroy of TabItem((uint64_t)v30);
    outlined destroy of TabItem((uint64_t)__dst);
    outlined destroy of TabEntry((uint64_t)&v40);
    v4 = v11;
    goto LABEL_5;
  }
  outlined consume of TabCustomizationID?(v12, *((uint64_t *)&v12 + 1), v13);
  v4 = v11;
LABEL_17:
  outlined destroy of TabItem((uint64_t)v30);
  v23 = *((_QWORD *)&__dst[5] + 1);
  v17 = static TabOptions.TraitKey.defaultValue;
  v18 = *(_OWORD *)&qword_1EDF00118;
  v19 = word_1EDF00128;
  v20 = byte_1EDF0012A;
  v21 = qword_1EDF00130;
  v22 = word_1EDF00138;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v14 = v34;
  outlined consume of TabCustomizationID?(v31, v32, v33);
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)__dst);
  outlined destroy of TabEntry((uint64_t)&v40);
  if (v14 > 1)
    goto LABEL_5;
LABEL_24:
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v47);
  return v16 != 2;
}

uint64_t TabItemGroup.hidden.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  _BYTE v8[24];
  uint64_t v9;

  outlined init with copy of TabItem?(v0 + 48, (uint64_t)v8);
  if (v9)
  {
    v1 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v1 != -1)
      swift_once();
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v2 = v4;
    outlined consume of TabCustomizationID?(v5, v6, v7);
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)v8);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for TabItem?);
    return 0;
  }
  return v2;
}

void static TabItemGroup.HostView._layoutOptions(_:)(_QWORD *a1@<X8>)
{
  *a1 = 5;
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance TabItemGroup.HostView()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F20]), sel_initWithNibName_bundle_, 0, 0);
  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(v1, v2);
  return v2;
}

void protocol witness for UIViewControllerRepresentable.updateUIViewController(_:context:) in conformance TabItemGroup.HostView(id a1)
{
  void **v1;

  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(*v1, a1);
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance TabItemGroup.HostView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for TabItemGroup.Coordinator();
  result = swift_allocObject();
  *a1 = result;
  return result;
}

void TabItemGroup.HostCache.removeOldestKey()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)v1[2];
  if (!v6[2])
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  v8 = v6[4];
  v7 = v6[5];
  swift_bridgeObjectRetain();
  static Log.tabView.getter();
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Logger?);
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v22 = v8;
      v14 = (uint8_t *)v13;
      v15 = swift_slowAlloc();
      v24 = v15;
      *(_DWORD *)v14 = 136315138;
      v21[1] = v14 + 4;
      swift_bridgeObjectRetain();
      v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v7, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_186E48000, v11, v12, "Removing child VC '%s'", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v15, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v9);
  }
  if (!*(_QWORD *)(v1[3] + 16))
    goto LABEL_14;
  v16 = v1[1];
  if (v16)
  {
    v17 = v1[2];
    swift_retain();
    specialized closure #1 in OrderedSet._bucket(for:)((_QWORD *)(v16 + 16), v16 + 32, v17, 0);
    v19 = v18;
    swift_release();
  }
  else
  {
    v19 = 0;
  }
  specialized OrderedSet._removeExistingMember(at:in:)(0, v19);
  v20 = (void *)specialized ContiguousArray.remove(at:)(0);
  swift_bridgeObjectRelease();

}

uint64_t type metadata accessor for TabItemGroup.Coordinator()
{
  return objc_opt_self();
}

uint64_t destroy for TabItemGroup(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = outlined consume of TabCustomizationID.Base();
  if (*(_QWORD *)(a1 + 72))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    swift_release();
    swift_bridgeObjectRelease();

    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 176))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TabItemGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TabCustomizationID.Base();
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  v8 = (_OWORD *)(a1 + 48);
  v9 = (_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 72);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = v10;
    *(_QWORD *)(a1 + 80) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    v13 = *(void **)(a2 + 128);
    v12 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v13;
    *(_QWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v16 = *(_OWORD *)(a2 + 64);
    *v8 = *v9;
    *(_OWORD *)(a1 + 64) = v16;
    v17 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v17;
  }
  v18 = (_OWORD *)(a1 + 152);
  v19 = (_OWORD *)(a2 + 152);
  v20 = *(_QWORD *)(a2 + 176);
  if (v20)
  {
    v21 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = v20;
    *(_QWORD *)(a1 + 184) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v18, v19);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    v23 = *(void **)(a2 + 232);
    v22 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v23;
    *(_QWORD *)(a1 + 240) = v22;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    swift_retain();
    swift_bridgeObjectRetain();
    v24 = v23;
    swift_bridgeObjectRetain();
  }
  else
  {
    v25 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v25;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v26 = *(_OWORD *)(a2 + 168);
    *v18 = *v19;
    *(_OWORD *)(a1 + 168) = v26;
    v27 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v27;
  }
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  return a1;
}

uint64_t assignWithCopy for TabItemGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  outlined copy of TabCustomizationID.Base();
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of TabCustomizationID.Base();
  v7 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v9)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v10 = *(void **)(a1 + 128);
      v11 = *(void **)(a2 + 128);
      *(_QWORD *)(a1 + 128) = v11;
      v12 = v11;

      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    }
    else
    {
      outlined destroy of TabItem(a1 + 48);
      v16 = *(_OWORD *)(a2 + 64);
      v15 = *(_OWORD *)(a2 + 80);
      *v7 = *v8;
      *(_OWORD *)(a1 + 64) = v16;
      *(_OWORD *)(a1 + 80) = v15;
      v18 = *(_OWORD *)(a2 + 112);
      v17 = *(_OWORD *)(a2 + 128);
      v19 = *(_OWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v18;
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 96) = v19;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 48, a2 + 48);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v13 = *(void **)(a2 + 128);
    *(_QWORD *)(a1 + 128) = v13;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *v8;
    v21 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v21;
    *v7 = v20;
    v22 = *(_OWORD *)(a2 + 96);
    v23 = *(_OWORD *)(a2 + 112);
    v24 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v23;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 96) = v22;
  }
  v25 = (_OWORD *)(a1 + 152);
  v26 = (_OWORD *)(a2 + 152);
  v27 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176))
  {
    if (v27)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 152), (uint64_t *)(a2 + 152));
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      v28 = *(void **)(a1 + 232);
      v29 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v29;
      v30 = v29;

      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    }
    else
    {
      outlined destroy of TabItem(a1 + 152);
      v34 = *(_OWORD *)(a2 + 168);
      v33 = *(_OWORD *)(a2 + 184);
      *v25 = *v26;
      *(_OWORD *)(a1 + 168) = v34;
      *(_OWORD *)(a1 + 184) = v33;
      v36 = *(_OWORD *)(a2 + 216);
      v35 = *(_OWORD *)(a2 + 232);
      v37 = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 216) = v36;
      *(_OWORD *)(a1 + 232) = v35;
      *(_OWORD *)(a1 + 200) = v37;
    }
  }
  else if (v27)
  {
    *(_QWORD *)(a1 + 176) = v27;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1 + 152, a2 + 152);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v31 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v31;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    swift_retain();
    swift_bridgeObjectRetain();
    v32 = v31;
    swift_bridgeObjectRetain();
  }
  else
  {
    v38 = *v26;
    v39 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v39;
    *v25 = v38;
    v40 = *(_OWORD *)(a2 + 200);
    v41 = *(_OWORD *)(a2 + 216);
    v42 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 216) = v41;
    *(_OWORD *)(a1 + 232) = v42;
    *(_OWORD *)(a1 + 200) = v40;
  }
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  return a1;
}

void *__swift_memcpy264_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for TabItemGroup(uint64_t a1, uint64_t a2)
{
  char v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of TabCustomizationID.Base();
  v5 = (_OWORD *)(a1 + 48);
  v6 = (_OWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 72))
  {
    if (*(_QWORD *)(a2 + 72))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      v7 = *(_OWORD *)(a2 + 64);
      *v5 = *v6;
      *(_OWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_release();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      v8 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      goto LABEL_6;
    }
    outlined destroy of TabItem(a1 + 48);
  }
  v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v10 = *(_OWORD *)(a2 + 64);
  *v5 = *v6;
  *(_OWORD *)(a1 + 64) = v10;
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
LABEL_6:
  v12 = (_OWORD *)(a1 + 152);
  v13 = (_OWORD *)(a2 + 152);
  if (!*(_QWORD *)(a1 + 176))
  {
LABEL_10:
    v16 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v16;
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    v17 = *(_OWORD *)(a2 + 168);
    *v12 = *v13;
    *(_OWORD *)(a1 + 168) = v17;
    v18 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v18;
    goto LABEL_11;
  }
  if (!*(_QWORD *)(a2 + 176))
  {
    outlined destroy of TabItem(a1 + 152);
    goto LABEL_10;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 152);
  v14 = *(_OWORD *)(a2 + 168);
  *v12 = *v13;
  *(_OWORD *)(a1 + 168) = v14;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_release();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v15 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
LABEL_11:
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabItemGroup(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 264))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabItemGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 264) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 264) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabItemGroup()
{
  return &type metadata for TabItemGroup;
}

uint64_t destroy for TabItemGroup.HostCache()
{
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for TabItemGroup.HostCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for TabItemGroup.HostCache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TabItemGroup.HostCache(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TabItemGroup.HostCache()
{
  return &type metadata for TabItemGroup.HostCache;
}

uint64_t TabItemGroup.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  char v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v33[13];
  uint64_t v34;
  unint64_t v35;

  v33[0] = 0;
  v33[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(122);
  v34 = 0;
  v35 = 0xE000000000000000;
  v1._countAndFlagsBits = 2122857;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  v2 = v0[3];
  v3 = (void *)v0[4];
  outlined copy of TabCustomizationID.Base();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  outlined consume of TabCustomizationID.Base();
  v5._object = (void *)0xEF20746E756F4379;
  v5._countAndFlagsBits = 0x72746E456261740ALL;
  String.append(_:)(v5);
  v33[0] = *(_QWORD *)(v0[1] + 16);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x657449626174202CLL;
  v7._object = (void *)0xEF20746E756F436DLL;
  String.append(_:)(v7);
  v33[0] = *(_QWORD *)(*v0 + 16);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0xEF20746E756F4373;
  v9._countAndFlagsBits = 0x6E6F69746361202CLL;
  String.append(_:)(v9);
  v33[0] = *(_QWORD *)(v0[2] + 16);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x696863206C6C610ALL;
  v11._object = (void *)0xEE00206E6572646CLL;
  String.append(_:)(v11);
  v12 = TabItemGroup.allChildEntries.getter();
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d4UI12f34ItemGroupV11descriptionSSvgSSAA0C5G54Ocfu_33_9399ad856152282ea5b6572c43dac5b6AFSSTf3nnnpk_nTf1cn_n(v12);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = MEMORY[0x18D75CF7C](v13, MEMORY[0x1E0DEA968]);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x646165487361680ALL;
  v15._object = (void *)0xEB000000003D7265;
  String.append(_:)(v15);
  outlined init with copy of TabItem?((uint64_t)(v0 + 6), (uint64_t)v33);
  v16 = v33[3];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for TabItem?);
  if (v16)
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if (v16)
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x8000000187BDC560;
  v20._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v20);
  v21 = TabItemGroup.sidebarReorderable.getter();
  v22 = !v21;
  if (v21)
    v23 = 1702195828;
  else
    v23 = 0x65736C6166;
  if (v22)
    v24 = 0xE500000000000000;
  else
    v24 = 0xE400000000000000;
  v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x3D6E656464696820;
  v26._object = (void *)0xE800000000000000;
  String.append(_:)(v26);
  v27 = TabItemGroup.hidden.getter();
  v28 = (v27 & 1) == 0;
  if ((v27 & 1) != 0)
    v29 = 1702195828;
  else
    v29 = 0x65736C6166;
  if (v28)
    v30 = 0xE500000000000000;
  else
    v30 = 0xE400000000000000;
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t outlined init with copy of TabItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TabItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TabItem?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TabItem?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TabItem?);
  }
}

uint64_t outlined init with copy of TabItem(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for StyleApplicator.EnumeratedView(a2, a1);
  return a2;
}

uint64_t outlined copy of TabCustomizationID?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined copy of TabCustomizationID.Base();
  return result;
}

ValueMetadata *type metadata accessor for TabItemGroup.HostView()
{
  return &type metadata for TabItemGroup.HostView;
}

void specialized closure #1 in OrderedSet._bucket(for:)(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;

  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(a3 + 16) <= a4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._finalize()();
  if (__OFSUB__(1 << *a1, 1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v6 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_13:
    __break(1u);
    return;
  }
  while (1)
  {
    v7 = _HashTable.BucketIterator.currentValue.getter();
    if ((v8 & 1) == 0 && v7 == a4)
      break;
    _HashTable.BucketIterator.advance()();
  }
}

void specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(void *a1, id a2)
{
  id v4;
  unint64_t v5;
  id v6;
  void *v7;
  char v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;

  v4 = objc_msgSend(a2, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_3:
      if ((v5 & 0xC000000000000001) != 0)
      {
        v6 = (id)MEMORY[0x18D75E3BC](0, v5);
      }
      else
      {
        if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_23;
        }
        v6 = *(id *)(v5 + 32);
      }
      v7 = v6;
      swift_bridgeObjectRelease();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      v23 = v7;
      v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) != 0)
      {
LABEL_19:

        return;
      }
      v23 = v23;
      objc_msgSend(v23, sel_willMoveToParentViewController_, 0);
      v9 = objc_msgSend(v23, sel_view);
      if (v9)
      {
        v10 = v9;
        objc_msgSend(v9, sel_removeFromSuperview);

        objc_msgSend(v23, sel_removeFromParentViewController);
        goto LABEL_11;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
  else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v23 = 0;
LABEL_11:
  v12 = objc_msgSend(a2, sel_childViewControllers);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v14)
    goto LABEL_19;
  objc_msgSend(a2, sel_addChildViewController_, a1);
  v15 = objc_msgSend(a2, sel_view);
  if (!v15)
    goto LABEL_24;
  v16 = v15;
  v17 = objc_msgSend(a1, sel_view);
  if (!v17)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v18 = v17;
  objc_msgSend(v16, sel_addSubview_, v17);

  v19 = objc_msgSend(a1, sel_view);
  if (!v19)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v20 = v19;
  v21 = objc_msgSend(a2, sel_view);
  if (v21)
  {
    v22 = v21;
    UIView.constrainToView(_:exceptEdges:identifier:)(v21, 0, 0x476D657449626174, (void *)0xEC00000070756F72);

    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_didMoveToParentViewController_, a2);
    goto LABEL_19;
  }
LABEL_27:
  __break(1u);
}

uint64_t outlined assign with copy of TabItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TabItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t ViewModifier.requiring<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = v4;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v10 == 1)
  {
    swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x1E0C80A78](v9, v10);
    v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v13)
    {
      v17 = 0;
      if (v13 < 4)
        goto LABEL_9;
      if ((unint64_t)&v16[-v14] < 0x20)
        goto LABEL_9;
      v17 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = (__int128 *)(v14 + 16);
      v19 = v16 + 16;
      v20 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *v18;
        *(v19 - 1) = *(v18 - 1);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != v13)
      {
LABEL_9:
        v22 = v13 - v17;
        v23 = 8 * v17;
        v24 = &v16[8 * v17];
        v25 = (uint64_t *)(v14 + v23);
        do
        {
          v26 = *v25++;
          *(_QWORD *)v24 = v26;
          v24 += 8;
          --v22;
        }
        while (v22);
      }
    }
    swift_getTupleTypeMetadata();
  }
  v27 = type metadata accessor for StyleContextAcceptsPredicate();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, v5, a3);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v27);
  return StaticIf<>.init<>(_:then:)((uint64_t)v12, a3, a4);
}

uint64_t View.representablePreferredFocusableView<A>(_:resolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  outlined copy of AppIntentExecutor?(a2);
  v12 = type metadata accessor for RepresentablePreferredFocusableViewModifier(0, a5, v10, v11);
  MEMORY[0x18D75B4AC](v14, a4, v12, a6);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
}

uint64_t type metadata accessor for RepresentablePreferredFocusableViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepresentablePreferredFocusableViewModifier);
}

uint64_t sub_1873030C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for RepresentablePreferredFocusableViewModifier(255, *(_QWORD *)(a1 + 8), a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for RepresentablePreferredFocusableViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

_UNKNOWN **base witness table accessor for ViewModifier in RepresentablePreferredFocusableViewModifier<A>()
{
  return &protocol witness table for RepresentablePreferredFocusableViewModifier<A>;
}

uint64_t static RepresentablePreferredFocusableViewModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  uint64_t KeyPath;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  type metadata accessor for RepresentablePreferredFocusableViewModifier(255, a3, a3, a4);
  type metadata accessor for _GraphValue();
  v18 = a3;
  v12 = _GraphValue.value.getter();
  KeyPath = swift_getKeyPath();
  type metadata accessor for UIView?();
  swift_getFunctionTypeMetadata1();
  v15 = type metadata accessor for Optional();
  v16 = type metadata accessor for Focus();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v16);
  v5 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v12, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v14, v16, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  swift_release();
  swift_release();
  v12 = v11;
  v9 = type metadata accessor for RepresentablePreferredFocusableViewInput(0, a3, v7, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for RepresentablePreferredFocusableViewInput<A>, v9);
  return specialized _GraphInputs.subscript.setter((uint64_t)&v12);
}

uint64_t key path getter for RepresentablePreferredFocusableViewModifier.resolver : <A>RepresentablePreferredFocusableViewModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)@<X0>(_QWORD *@<X0>, uint64_t *@<X8>);

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = *(_QWORD *)(a3 + a2 - 8);
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v7;
    v8[3] = v5;
    v8[4] = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@owned UIView?);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a4 = v9;
  a4[1] = v8;
  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t key path setter for RepresentablePreferredFocusableViewModifier.resolver : <A>RepresentablePreferredFocusableViewModifier<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = *(_QWORD *)(a4 + a3 - 8);
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = v7;
    v8[3] = v5;
    v8[4] = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out UIView?);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = *a2;
  outlined copy of AppIntentExecutor?(v5);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  *a2 = (uint64_t)v9;
  a2[1] = (uint64_t)v8;
  return result;
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static RepresentablePreferredFocusableViewModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for RepresentablePreferredFocusableViewModifier<A>, a5);
  return static ViewInputsModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for RepresentablePreferredFocusableViewModifier<A>, a5);
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RepresentablePreferredFocusableViewModifier<A>, a4);
  return MEMORY[0x18D7596B8](a1, a2, a3, a4, v8);
}

uint64_t static RepresentablePreferredFocusableViewInput.defaultValue.getter()
{
  return *MEMORY[0x1E0CFED28];
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance RepresentablePreferredFocusableViewInput<A>@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = static RepresentablePreferredFocusableViewInput.defaultValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance RepresentablePreferredFocusableViewInput<A>()
{
  uint64_t v0;

  type metadata accessor for UIView?();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  v0 = type metadata accessor for OptionalAttribute();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CFEC60], v0);
  return static PropertyKey<>.valuesEqual(_:_:)();
}

uint64_t sub_18730360C()
{
  return 8;
}

_QWORD *sub_187303618(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for RepresentablePreferredFocusableViewInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepresentablePreferredFocusableViewInput);
}

uint64_t sub_187303630()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out UIView?)(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 24);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@owned UIView?)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 24))(*a1);
  *a2 = result;
  return result;
}

void base witness table accessor for PropertyKey in RepresentablePreferredFocusableViewInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for GraphInput in RepresentablePreferredFocusableViewInput<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t static ToolbarItemPlacement.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for automatic, (uint64_t)&static ToolbarItemPlacement.automatic, a1);
}

double one-time initialization function for automatic()
{
  double result;

  qword_1EDE09890 = 0;
  result = 0.0;
  static ToolbarItemPlacement.automatic = 0u;
  unk_1EDE09880 = 0u;
  byte_1EDE09898 = 2;
  return result;
}

double one-time initialization function for principal()
{
  double result;

  static ToolbarItemPlacement.principal = 1;
  result = 0.0;
  unk_1EDE22318 = 0u;
  unk_1EDE22328 = 0u;
  byte_1EDE22338 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.principal.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for principal, (uint64_t)&static ToolbarItemPlacement.principal, a1);
}

double one-time initialization function for navigation()
{
  double result;

  static ToolbarItemPlacement.navigation = 2;
  result = 0.0;
  unk_1EDE22348 = 0u;
  unk_1EDE22358 = 0u;
  byte_1EDE22368 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.navigation.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(one-time initialization token for navigation, (uint64_t)&static ToolbarItemPlacement.navigation, a1);
}

void one-time initialization function for primaryAction()
{
  static ToolbarItemPlacement.primaryAction = 0;
  byte_1EDE22398 = 0;
}

uint64_t static ToolbarItemPlacement.primaryAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for primaryAction, (uint64_t)&static ToolbarItemPlacement.primaryAction, a1);
}

void static ToolbarItemPlacement.primaryAction(initialVisibility:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

double one-time initialization function for secondaryAction()
{
  double result;

  static ToolbarItemPlacement.secondaryAction = 3;
  result = 0.0;
  unk_1EDE223A8 = 0u;
  unk_1EDE223B8 = 0u;
  byte_1EDE223C8 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.secondaryAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for secondaryAction, (uint64_t)&static ToolbarItemPlacement.secondaryAction, a1);
}

double one-time initialization function for status()
{
  double result;

  static ToolbarItemPlacement.status = 4;
  result = 0.0;
  unk_1EDDD2348 = 0u;
  unk_1EDDD2358 = 0u;
  byte_1EDDD2368 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.status.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for status, (uint64_t)&static ToolbarItemPlacement.status, a1);
}

double one-time initialization function for confirmationAction()
{
  double result;

  static ToolbarItemPlacement.confirmationAction = 5;
  result = 0.0;
  unk_1EDDD2318 = 0u;
  unk_1EDDD2328 = 0u;
  byte_1EDDD2338 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.confirmationAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for confirmationAction, (uint64_t)&static ToolbarItemPlacement.confirmationAction, a1);
}

double one-time initialization function for cancellationAction()
{
  double result;

  static ToolbarItemPlacement.cancellationAction = 6;
  result = 0.0;
  unk_1EDE223D8 = 0u;
  unk_1EDE223E8 = 0u;
  byte_1EDE223F8 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.cancellationAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for cancellationAction, (uint64_t)&static ToolbarItemPlacement.cancellationAction, a1);
}

double one-time initialization function for destructiveAction()
{
  double result;

  static ToolbarItemPlacement.destructiveAction = 7;
  result = 0.0;
  unk_1EDE22408 = 0u;
  unk_1EDE22418 = 0u;
  byte_1EDE22428 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.destructiveAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for destructiveAction, (uint64_t)&static ToolbarItemPlacement.destructiveAction, a1);
}

double one-time initialization function for keyboard()
{
  double result;

  static ToolbarItemPlacement.keyboard = 8;
  result = 0.0;
  unk_1EDE22438 = 0u;
  unk_1EDE22448 = 0u;
  byte_1EDE22458 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.keyboard.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for keyboard, (uint64_t)&static ToolbarItemPlacement.keyboard, a1);
}

uint64_t static ToolbarItemPlacement.navigationBarLeading.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarLeading, (uint64_t)&static ToolbarItemPlacement.navigationBarLeading, a1);
}

uint64_t static ToolbarItemPlacement.topBarLeading.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarLeading, (uint64_t)&static ToolbarItemPlacement.navigationBarLeading, a1);
}

uint64_t static ToolbarItemPlacement.navigationBarTrailing.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarTrailing, (uint64_t)&static ToolbarItemPlacement.navigationBarTrailing, a1);
}

uint64_t static ToolbarItemPlacement.topBarTrailing.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarTrailing, (uint64_t)&static ToolbarItemPlacement.navigationBarTrailing, a1);
}

void static ToolbarItemPlacement.accessoryBar<A>(id:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ToolbarItemPlacement.init<A>(id:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

double one-time initialization function for navigationBarLeading()
{
  double result;

  static ToolbarItemPlacement.navigationBarLeading = 9;
  result = 0.0;
  unk_1EDE01288 = 0u;
  unk_1EDE01298 = 0u;
  byte_1EDE012A8 = 2;
  return result;
}

double one-time initialization function for navigationBarTrailing()
{
  double result;

  static ToolbarItemPlacement.navigationBarTrailing = 10;
  result = 0.0;
  unk_1EDE06F28 = 0u;
  unk_1EDE06F38 = 0u;
  byte_1EDE06F48 = 2;
  return result;
}

double one-time initialization function for largeNavigationTitleAccessory()
{
  double result;

  static ToolbarItemPlacement.largeNavigationTitleAccessory = 12;
  result = 0.0;
  unk_1EDDF8B30 = 0u;
  unk_1EDDF8B40 = 0u;
  byte_1EDDF8B50 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.largeNavigationTitleAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for largeNavigationTitleAccessory, (uint64_t)&static ToolbarItemPlacement.largeNavigationTitleAccessory, a1);
}

double one-time initialization function for bottomBar()
{
  double result;

  static ToolbarItemPlacement.bottomBar = 11;
  result = 0.0;
  unk_1EDDD2378 = 0u;
  unk_1EDDD2388 = 0u;
  byte_1EDDD2398 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.bottomBar.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(one-time initialization token for bottomBar, (uint64_t)&static ToolbarItemPlacement.bottomBar, a1);
}

void static ToolbarItemPlacement._bottomBar.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

double one-time initialization function for tabSidebar()
{
  double result;

  static ToolbarItemPlacement.tabSidebar = 15;
  result = 0.0;
  unk_1EDE22468 = 0u;
  unk_1EDE22478 = 0u;
  byte_1EDE22488 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.tabSidebar.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for tabSidebar, (uint64_t)&static ToolbarItemPlacement.tabSidebar, a1);
}

uint64_t static ToolbarItemPlacement.automatic.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  return outlined init with copy of ToolbarItemPlacement(a2, a3);
}

uint64_t destroy for ToolbarItemPlacement(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40) == 1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for ToolbarItemPlacement(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  if (*(_BYTE *)(a2 + 40) == 1)
  {
    v3 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  return a1;
}

uint64_t assignWithCopy for ToolbarItemPlacement(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1);
    if (*((_BYTE *)a2 + 40) == 1)
    {
      v4 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      v5 = *a2;
      v6 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  return a1;
}

_OWORD *assignWithTake for ToolbarItemPlacement(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)a1);
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarItemPlacement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarItemPlacement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t destroy for ToolbarItemPlacement.Role(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for ToolbarItemPlacement.Role(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *a2;
      v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

double one-time initialization function for _navigationBarTrailing()
{
  double result;

  static ToolbarItemPlacement._navigationBarTrailing = 21;
  result = 0.0;
  unk_1EDEFFFF0 = 0u;
  unk_1EDF00000 = 0u;
  byte_1EDF00010 = 2;
  return result;
}

double one-time initialization function for _navigationBarLeading()
{
  double result;

  static ToolbarItemPlacement._navigationBarLeading = 22;
  result = 0.0;
  *(_OWORD *)algn_1EDF00020 = 0u;
  *(_OWORD *)&algn_1EDF00020[16] = 0u;
  byte_1EDF00040 = 2;
  return result;
}

double one-time initialization function for search()
{
  double result;

  static ToolbarItemPlacement.search = 23;
  result = 0.0;
  unk_1EDEFFC10 = 0u;
  unk_1EDEFFC20 = 0u;
  byte_1EDEFFC30 = 2;
  return result;
}

void ToolbarItemPlacement.Role.hash(into:)()
{
  uint64_t v0;
  unsigned __int8 v1;
  Swift::UInt v2;
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;

  outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v6);
  v1 = v6;
  if (v9)
  {
    if (v9 == 1)
    {
      v4[0] = v6;
      v4[1] = v7;
      v5 = v8;
      Hasher._combine(_:)(0xEuLL);
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v4);
      return;
    }
    if (*((_QWORD *)&v7 + 1) | v8 | (unint64_t)v6 | (unint64_t)v7 | *((_QWORD *)&v6 + 1))
    {
      v3 = *((_QWORD *)&v7 + 1) | v8 | v7 | *((_QWORD *)&v6 + 1);
      if ((_QWORD)v6 != 1 || v3)
      {
        if ((_QWORD)v6 != 2 || v3)
        {
          if ((_QWORD)v6 != 3 || v3)
          {
            if ((_QWORD)v6 != 4 || v3)
            {
              if ((_QWORD)v6 != 5 || v3)
              {
                if ((_QWORD)v6 != 6 || v3)
                {
                  if ((_QWORD)v6 != 7 || v3)
                  {
                    if ((_QWORD)v6 != 8 || v3)
                    {
                      if ((_QWORD)v6 != 9 || v3)
                      {
                        if ((_QWORD)v6 != 10 || v3)
                        {
                          if ((_QWORD)v6 != 11 || v3)
                          {
                            if ((_QWORD)v6 != 12 || v3)
                            {
                              if ((_QWORD)v6 != 13 || v3)
                              {
                                if ((_QWORD)v6 != 14 || v3)
                                {
                                  if ((_QWORD)v6 != 15 || v3)
                                  {
                                    if ((_QWORD)v6 != 16 || v3)
                                    {
                                      if ((_QWORD)v6 != 17 || v3)
                                      {
                                        if ((_QWORD)v6 != 18 || v3)
                                        {
                                          if ((_QWORD)v6 != 19 || v3)
                                          {
                                            if ((_QWORD)v6 != 20 || v3)
                                            {
                                              if ((_QWORD)v6 != 21 || v3)
                                              {
                                                if ((_QWORD)v6 != 22 || v3)
                                                {
                                                  if ((_QWORD)v6 != 23 || v3)
                                                    v2 = 26;
                                                  else
                                                    v2 = 25;
                                                }
                                                else
                                                {
                                                  v2 = 24;
                                                }
                                              }
                                              else
                                              {
                                                v2 = 23;
                                              }
                                            }
                                            else
                                            {
                                              v2 = 22;
                                            }
                                          }
                                          else
                                          {
                                            v2 = 21;
                                          }
                                        }
                                        else
                                        {
                                          v2 = 20;
                                        }
                                      }
                                      else
                                      {
                                        v2 = 19;
                                      }
                                    }
                                    else
                                    {
                                      v2 = 18;
                                    }
                                  }
                                  else
                                  {
                                    v2 = 17;
                                  }
                                }
                                else
                                {
                                  v2 = 16;
                                }
                              }
                              else
                              {
                                v2 = 15;
                              }
                            }
                            else
                            {
                              v2 = 13;
                            }
                          }
                          else
                          {
                            v2 = 12;
                          }
                        }
                        else
                        {
                          v2 = 11;
                        }
                      }
                      else
                      {
                        v2 = 10;
                      }
                    }
                    else
                    {
                      v2 = 9;
                    }
                  }
                  else
                  {
                    v2 = 8;
                  }
                }
                else
                {
                  v2 = 7;
                }
              }
              else
              {
                v2 = 6;
              }
            }
            else
            {
              v2 = 5;
            }
          }
          else
          {
            v2 = 4;
          }
        }
        else
        {
          v2 = 2;
        }
      }
      else
      {
        v2 = 1;
      }
    }
    else
    {
      v2 = 0;
    }
  }
  else
  {
    Hasher._combine(_:)(3uLL);
    v2 = v1;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolbarItemPlacement.Role()
{
  Hasher.init(_seed:)();
  ToolbarItemPlacement.Role.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarItemPlacement.Role()
{
  Hasher.init(_seed:)();
  ToolbarItemPlacement.Role.hash(into:)();
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.toolbarItemPlacement.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarItemPlacement.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ToolbarItemPlacement.Role(a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ToolbarItemPlacementKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&static ToolbarItemPlacementKey.defaultValue, a1);
}

uint64_t specialized static ToolbarItemPlacement.Role.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  int8x16_t v5;
  int8x16_t v6;
  _OWORD v8[2];
  uint64_t v9;
  _BYTE v10[48];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE v17[40];
  char v18;

  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)&v11);
  outlined init with copy of ToolbarItemPlacement.Role(a2, (uint64_t)v17);
  if (!v16)
  {
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v11, (uint64_t)v10);
    if (!v18)
    {
      v3 = v10[0] == v17[0];
      goto LABEL_7;
    }
    goto LABEL_132;
  }
  if (v16 != 1)
  {
    if (!(v14 | v15 | v11 | v13 | v12))
    {
      if (v18 != 2)
        goto LABEL_132;
      v5 = vorrq_s8(*(int8x16_t *)&v17[8], *(int8x16_t *)&v17[24]);
      if (*(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | *(_QWORD *)v17)
        goto LABEL_132;
      goto LABEL_131;
    }
    v4 = v14 | v15 | v13 | v12;
    if (v11 != 1 || v4)
    {
      if (v11 != 2 || v4)
      {
        if (v11 != 3 || v4)
        {
          if (v11 != 4 || v4)
          {
            if (v11 != 5 || v4)
            {
              if (v11 != 6 || v4)
              {
                if (v11 != 7 || v4)
                {
                  if (v11 != 8 || v4)
                  {
                    if (v11 != 9 || v4)
                    {
                      if (v11 != 10 || v4)
                      {
                        if (v11 != 11 || v4)
                        {
                          if (v11 != 12 || v4)
                          {
                            if (v11 != 13 || v4)
                            {
                              if (v11 != 14 || v4)
                              {
                                if (v11 != 15 || v4)
                                {
                                  if (v11 != 16 || v4)
                                  {
                                    if (v11 != 17 || v4)
                                    {
                                      if (v11 != 18 || v4)
                                      {
                                        if (v11 != 19 || v4)
                                        {
                                          if (v11 != 20 || v4)
                                          {
                                            if (v11 != 21 || v4)
                                            {
                                              if (v11 != 22 || v4)
                                              {
                                                if (v11 != 23 || v4)
                                                {
                                                  if (v18 != 2 || *(_QWORD *)v17 != 24)
                                                    goto LABEL_132;
                                                }
                                                else if (v18 != 2 || *(_QWORD *)v17 != 23)
                                                {
                                                  goto LABEL_132;
                                                }
                                              }
                                              else if (v18 != 2 || *(_QWORD *)v17 != 22)
                                              {
                                                goto LABEL_132;
                                              }
                                            }
                                            else if (v18 != 2 || *(_QWORD *)v17 != 21)
                                            {
                                              goto LABEL_132;
                                            }
                                          }
                                          else if (v18 != 2 || *(_QWORD *)v17 != 20)
                                          {
                                            goto LABEL_132;
                                          }
                                        }
                                        else if (v18 != 2 || *(_QWORD *)v17 != 19)
                                        {
                                          goto LABEL_132;
                                        }
                                      }
                                      else if (v18 != 2 || *(_QWORD *)v17 != 18)
                                      {
                                        goto LABEL_132;
                                      }
                                    }
                                    else if (v18 != 2 || *(_QWORD *)v17 != 17)
                                    {
                                      goto LABEL_132;
                                    }
                                  }
                                  else if (v18 != 2 || *(_QWORD *)v17 != 16)
                                  {
                                    goto LABEL_132;
                                  }
                                }
                                else if (v18 != 2 || *(_QWORD *)v17 != 15)
                                {
                                  goto LABEL_132;
                                }
                              }
                              else if (v18 != 2 || *(_QWORD *)v17 != 14)
                              {
                                goto LABEL_132;
                              }
                            }
                            else if (v18 != 2 || *(_QWORD *)v17 != 13)
                            {
                              goto LABEL_132;
                            }
                          }
                          else if (v18 != 2 || *(_QWORD *)v17 != 12)
                          {
                            goto LABEL_132;
                          }
                        }
                        else if (v18 != 2 || *(_QWORD *)v17 != 11)
                        {
                          goto LABEL_132;
                        }
                      }
                      else if (v18 != 2 || *(_QWORD *)v17 != 10)
                      {
                        goto LABEL_132;
                      }
                    }
                    else if (v18 != 2 || *(_QWORD *)v17 != 9)
                    {
                      goto LABEL_132;
                    }
                  }
                  else if (v18 != 2 || *(_QWORD *)v17 != 8)
                  {
                    goto LABEL_132;
                  }
                }
                else if (v18 != 2 || *(_QWORD *)v17 != 7)
                {
                  goto LABEL_132;
                }
              }
              else if (v18 != 2 || *(_QWORD *)v17 != 6)
              {
                goto LABEL_132;
              }
            }
            else if (v18 != 2 || *(_QWORD *)v17 != 5)
            {
              goto LABEL_132;
            }
          }
          else if (v18 != 2 || *(_QWORD *)v17 != 4)
          {
            goto LABEL_132;
          }
        }
        else if (v18 != 2 || *(_QWORD *)v17 != 3)
        {
          goto LABEL_132;
        }
      }
      else if (v18 != 2 || *(_QWORD *)v17 != 2)
      {
        goto LABEL_132;
      }
    }
    else if (v18 != 2 || *(_QWORD *)v17 != 1)
    {
      goto LABEL_132;
    }
    v6 = vorrq_s8(*(int8x16_t *)&v17[8], *(int8x16_t *)&v17[24]);
    if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))
    {
LABEL_131:
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v11);
      v3 = 1;
      return v3 & 1;
    }
LABEL_132:
    outlined destroy of (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)((uint64_t)&v11);
    v3 = 0;
    return v3 & 1;
  }
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v11, (uint64_t)v10);
  if (v18 != 1)
  {
    outlined destroy of AnyHashable((uint64_t)v10);
    goto LABEL_132;
  }
  v8[0] = *(_OWORD *)v17;
  v8[1] = *(_OWORD *)&v17[16];
  v9 = *(_QWORD *)&v17[32];
  v3 = MEMORY[0x18D75E284](v10, v8);
  outlined destroy of AnyHashable((uint64_t)v8);
  outlined destroy of AnyHashable((uint64_t)v10);
LABEL_7:
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v11);
  return v3 & 1;
}

uint64_t outlined destroy of (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role));
  }
}

void type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>);
  }
}

ValueMetadata *type metadata accessor for ToolbarItemPlacementKey()
{
  return &type metadata for ToolbarItemPlacementKey;
}

void static ToolbarItemPlacement.tabBarTrailing.getter()
{
  static ToolbarItemPlacement._bottomBar.getter();
}

void static ToolbarItemPlacement.tabBarLeading.getter()
{
  static ToolbarItemPlacement._bottomBar.getter();
}

void static ToolbarItemPlacement.bottomOrnament.getter()
{
  static ToolbarItemPlacement._bottomBar.getter();
}

void static ToolbarItemPlacement.backDeployable_accessoryBar<A>(id:)()
{
  static ToolbarItemPlacement.accessoryBar<A>(id:)();
}

uint64_t View.navigationBarItems<A, B>(leading:trailing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v14 = MEMORY[0x1E0DEE9C0] + 8;
  type metadata accessor for ToolbarItem(255, MEMORY[0x1E0DEE9C0] + 8, a4, a7);
  type metadata accessor for ToolbarItem(255, v14, a5, a8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v18 = type metadata accessor for TupleToolbarContent(255, TupleTypeMetadata2, v16, v17);
  type metadata accessor for ToolbarModifier(255, v14, v18, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v19 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v19, v20);
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = a1;
  v32 = a2;
  View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.navigationBarItems<A, B>(leading:trailing:), (uint64_t)v24, a3, v18, a6, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v33[0] = a6;
  v33[1] = &protocol witness table for ToolbarModifier<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v33);
  return _UnaryViewAdaptor.init(_:)();
}

uint64_t closure #1 in View.navigationBarItems<A, B>(leading:trailing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[3];

  v46 = a2;
  v41 = a1;
  v49 = a6;
  v43 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v45 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0DEE9C0] + 8;
  v47 = v10;
  v48 = v11;
  v13 = type metadata accessor for ToolbarItem(0, MEMORY[0x1E0DEE9C0] + 8, v12, v11);
  v44 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - v19;
  v21 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a5;
  v26 = type metadata accessor for ToolbarItem(0, v9, a3, a5);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v40 - v33;
  if (one-time initialization token for _navigationBarLeading != -1)
    swift_once();
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement._navigationBarLeading, (uint64_t)v50);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v25, v41, a3);
  ToolbarItem<>.init(placement:content:)(v50, (uint64_t)v25, a3, v42, v30);
  static ViewBuilder.buildExpression<A>(_:)(v30, v26, &protocol witness table for ToolbarItem<A, B>);
  v35 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
  v35(v30, v26);
  if (one-time initialization token for _navigationBarTrailing != -1)
    swift_once();
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement._navigationBarTrailing, (uint64_t)v50);
  v36 = (uint64_t)v45;
  v37 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v45, v46, v47);
  ToolbarItem<>.init(placement:content:)(v50, v36, v37, v48, v16);
  static ViewBuilder.buildExpression<A>(_:)(v16, v13, &protocol witness table for ToolbarItem<A, B>);
  v38 = *(void (**)(char *, uint64_t))(v44 + 8);
  v38(v16, v13);
  static ToolbarContentBuilder.buildBlock<A, B>(_:_:)((uint64_t)v34, (uint64_t)v20, v26, v13, v49);
  v38(v20, v13);
  return v35(v34, v26);
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A, B>(leading:trailing:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in View.navigationBarItems<A, B>(leading:trailing:)(v1[8], v1[9], v1[3], v1[4], v1[6], a1);
}

uint64_t View.navigationBarItems<A>(leading:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.navigationBarItems<A>(leading:)(a1, a2, a3, a4, a5, (void (*)(double))partial apply for closure #1 in View.navigationBarItems<A>(leading:));
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A>(leading:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.navigationBarItems<A>(leading:)(&one-time initialization token for _navigationBarLeading, (uint64_t)&static ToolbarItemPlacement._navigationBarLeading, (uint64_t)one-time initialization function for _navigationBarLeading, a1);
}

uint64_t View.navigationBarItems<A>(trailing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.navigationBarItems<A>(leading:)(a1, a2, a3, a4, a5, (void (*)(double))partial apply for closure #1 in View.navigationBarItems<A>(trailing:));
}

uint64_t View.navigationBarItems<A>(leading:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(double))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v11 = MEMORY[0x1E0DEE9C0] + 8;
  v12 = type metadata accessor for ToolbarItem(255, MEMORY[0x1E0DEE9C0] + 8, a3, a5);
  v15 = type metadata accessor for TupleToolbarContent(255, v12, v13, v14);
  type metadata accessor for ToolbarModifier(255, v11, v15, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v16 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v16, v17);
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a1;
  View.toolbar<A>(content:)(a6, (uint64_t)v20, a2, v15, a4, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v26[0] = a4;
  v26[1] = &protocol witness table for ToolbarModifier<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v26);
  return _UnaryViewAdaptor.init(_:)();
}

uint64_t closure #1 in View.navigationBarItems<A>(leading:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(char *, uint64_t);
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[3];

  v28[1] = a7;
  v29 = a1;
  v30 = a8;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ToolbarItem(0, MEMORY[0x1E0DEE9C0] + 8, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v28 - v24;
  if (*a5 != -1)
    swift_once();
  outlined init with copy of ToolbarItemPlacement(a6, (uint64_t)v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v29, a3);
  ToolbarItem<>.init(placement:content:)(v31, (uint64_t)v14, a3, a4, v21);
  static ViewBuilder.buildExpression<A>(_:)(v21, v17, &protocol witness table for ToolbarItem<A, B>);
  v26 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  v26(v21, v17);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v25, v17, &protocol witness table for ToolbarItem<A, B>);
  return v26(v25, v17);
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A>(trailing:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.navigationBarItems<A>(leading:)(&one-time initialization token for _navigationBarTrailing, (uint64_t)&static ToolbarItemPlacement._navigationBarTrailing, (uint64_t)one-time initialization function for _navigationBarTrailing, a1);
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A>(leading:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return closure #1 in View.navigationBarItems<A>(leading:)(v4[6], v4[2], v4[3], v4[5], a1, a2, a3, a4);
}

uint64_t sub_187305328(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[5];
  v4 = MEMORY[0x1E0DEE9C0] + 8;
  type metadata accessor for ToolbarItem(255, MEMORY[0x1E0DEE9C0] + 8, a1[1], a1[4]);
  type metadata accessor for ToolbarItem(255, v4, v1, v3);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for TupleToolbarContent(255, TupleTypeMetadata2, v6, v7);
  type metadata accessor for ToolbarModifier(255, v4, v8, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v9 = type metadata accessor for ModifiedContent();
  v12[0] = v2;
  v12[1] = &protocol witness table for ToolbarModifier<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v12);
  v10 = type metadata accessor for _UnaryViewAdaptor();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v10);
}

uint64_t sub_187305424(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v1 = a1[2];
  v2 = MEMORY[0x1E0DEE9C0] + 8;
  v3 = type metadata accessor for ToolbarItem(255, MEMORY[0x1E0DEE9C0] + 8, a1[1], a1[3]);
  v6 = type metadata accessor for TupleToolbarContent(255, v3, v4, v5);
  type metadata accessor for ToolbarModifier(255, v2, v6, (uint64_t)&protocol witness table for TupleToolbarContent<A>);
  v7 = type metadata accessor for ModifiedContent();
  v10[0] = v1;
  v10[1] = &protocol witness table for ToolbarModifier<A, B>;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v10);
  v8 = type metadata accessor for _UnaryViewAdaptor();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v8);
}

uint64_t type metadata accessor for TooltipResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TooltipResponder;
  if (!type metadata singleton initialization cache for TooltipResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TooltipResponder()
{
  return swift_initClassMetadata2();
}

double static TooltipModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, __int128 *a2@<X1>, void (*a3)(__int128 *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  double result;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = a2[3];
  v6 = a2[1];
  v40 = a2[2];
  v41 = v5;
  v7 = a2[3];
  v42 = a2[4];
  v8 = a2[1];
  v38 = *a2;
  v39 = v8;
  v34 = v40;
  v35 = v7;
  v36 = a2[4];
  v9 = *a1;
  v43 = *((_DWORD *)a2 + 20);
  v37 = *((_DWORD *)a2 + 20);
  v32 = v38;
  v33 = v6;
  a3(&v27);
  LODWORD(v32) = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<TooltipModifier>, (uint64_t)&type metadata for TooltipModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v10 = _GraphValue.value.getter();
  v34 = v40;
  v35 = v41;
  v36 = v42;
  v37 = v43;
  v32 = v38;
  v33 = v39;
  *(_QWORD *)&v32 = __PAIR64__(_ViewInputs.environment.getter(), v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText();
  v11 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs((uint64_t)&v38);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  v12 = outlined release of _ViewInputs((uint64_t)&v38);
  if ((v32 & 4) != 0)
  {
    MEMORY[0x1E0C80A78](v12, v13);
    v28 = v41;
    v29 = DWORD2(v41);
    *(_QWORD *)&v32 = v41;
    DWORD2(v32) = DWORD2(v41);
    MEMORY[0x1E0C80A78](v14, v15);
    outlined retain of [Text.Modifier]((uint64_t)&v28);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  v30 = v41;
  v31 = DWORD2(v41);
  *(_QWORD *)&v32 = v41;
  DWORD2(v32) = DWORD2(v41);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    *(_QWORD *)&v32 = v30;
    DWORD2(v32) = v31;
    v16 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if ((v16 & 1) != 0)
    {
      *(_QWORD *)&v32 = v30;
      DWORD2(v32) = v31;
      MEMORY[0x1E0C80A78](v16, v17);
      outlined retain of [Text.Modifier]((uint64_t)&v30);
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
      type metadata accessor for TooltipResponder();
      v18 = swift_allocObject();
      *(_DWORD *)(v18 + 208) = *MEMORY[0x1E0CFED28];
      *(_QWORD *)(v18 + 216) = 0;
      *(_QWORD *)(v18 + 224) = 0;
      outlined retain of _ViewInputs((uint64_t)&v38);
      swift_retain();
      static CGSize.invalidValue.getter();
      *(_QWORD *)(v18 + 232) = v19;
      *(_QWORD *)(v18 + 240) = v20;
      ViewTransform.init()();
      swift_release();
      v34 = v40;
      v35 = v41;
      v36 = v42;
      v37 = v43;
      v32 = v38;
      v33 = v39;
      v21 = DefaultLayoutViewResponder.init(inputs:)();
      v32 = v27;
      v22 = _ViewOutputs.viewResponders()();
      v34 = v40;
      v35 = v41;
      v36 = v42;
      v37 = v43;
      v32 = v38;
      v33 = v39;
      v23 = _ViewInputs.animatedPosition()();
      v34 = v40;
      v35 = v41;
      v36 = v42;
      v37 = v43;
      v32 = v38;
      v33 = v39;
      v24 = _ViewInputs.animatedSize()();
      v34 = v40;
      v35 = v41;
      v36 = v42;
      v37 = v43;
      v32 = v38;
      v33 = v39;
      v25 = _ViewInputs.transform.getter();
      *(_QWORD *)&v32 = v21;
      *((_QWORD *)&v32 + 1) = __PAIR64__(v11, v22);
      *(_QWORD *)&v33 = __PAIR64__(v24, v23);
      DWORD2(v33) = v25;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      lazy protocol witness table accessor for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater();
      Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      LOBYTE(v32) = 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *a4 = v27;
  result = *((double *)&v27 + 1);
  a4[1] = *((_QWORD *)&v27 + 1);
  return result;
}

uint64_t implicit closure #1 in static TooltipModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t TooltipResponder.__allocating_init(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 208) = *MEMORY[0x1E0CFED28];
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(_QWORD *)(v0 + 232) = v1;
  *(_QWORD *)(v0 + 240) = v2;
  ViewTransform.init()();
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t TooltipModifier.ResolveText.value.getter()
{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  Value = AGGraphGetValue();
  v1 = *(_QWORD *)Value;
  v2 = *(_QWORD *)(Value + 8);
  v3 = *(_BYTE *)(Value + 16);
  AGGraphGetValue();
  outlined copy of Text.Storage(v1, v2, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v4 = Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v1, v2, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for Rule.value.getter in conformance TooltipModifier.ResolveText@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TooltipModifier.ResolveText.value.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #1 in TooltipModifier.TransformPlatformItems.value.getter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t i;
  uint64_t v5;
  unint64_t v6;
  uint64_t *Value;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    v3 = (_QWORD *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v1 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    for (i = 0; i != v2; ++i)
    {
      if (i >= v1[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      v5 = type metadata accessor for PlatformItemList.Item();
      v6 = (unint64_t)v1
         + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * i;
      Value = (uint64_t *)AGGraphGetValue();
      v9 = *Value;
      v8 = Value[1];
      *(_QWORD *)(v6 + 584) = v9;
      *(_QWORD *)(v6 + 592) = v8;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
    }
    *v3 = v1;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TooltipModifier.TransformPlatformItems@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int *v1;
  int v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in TooltipModifier.TransformPlatformItems.value.getter;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t TooltipModifier.TooltipResponderUpdater.updateValue()()
{
  _DWORD *v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t *Value;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;

  v1 = *(_QWORD *)v0;
  *(_DWORD *)(*(_QWORD *)v0 + 208) = v0[3];
  AGGraphGetValue();
  v3 = v2;
  AGGraphGetValue();
  v5 = v4;
  Value = (uint64_t *)AGGraphGetValue();
  v8 = *Value;
  v9 = Value[1];
  v10 = Value[2];
  v11 = Value[3];
  v12 = Value[4];
  if ((v3 & 1) != 0
    || (v5 & 1) != 0
    || (v7 & 1) != 0
    || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    v13 = swift_retain();
    *(double *)(v1 + 216) = MEMORY[0x18D755E9C](v13);
    *(_QWORD *)(v1 + 224) = v14;
    *(double *)(v1 + 232) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v1 + 240) = v15;
    *(_QWORD *)(v1 + 248) = v8;
    *(_QWORD *)(v1 + 256) = v9;
    *(_QWORD *)(v1 + 264) = v10;
    *(_QWORD *)(v1 + 272) = v11;
    *(_QWORD *)(v1 + 280) = v12;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_retain();
  }
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v16 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v18 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void protocol witness for ViewModifier.body(content:) in conformance TooltipModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t closure #1 in TooltipResponder.text.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *Value;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  AGGraphClearUpdate();
  if (*(_DWORD *)(a1 + 208) == *MEMORY[0x1E0CFED28])
    goto LABEL_6;
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v7 = *Value & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
LABEL_6:
    v6 = 0;
    v5 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  result = AGGraphSetUpdate();
  *a2 = v6;
  a2[1] = v5;
  return result;
}

double TooltipResponder.globalFrame.getter()
{
  uint64_t v0;
  __int128 v1;
  unint64_t v2;
  unint64_t v3;
  _OWORD v5[2];
  uint64_t v6;
  char v7;
  double v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v11 = *(_QWORD *)(v0 + 248);
  v1 = *(_OWORD *)(v0 + 272);
  v12 = *(_OWORD *)(v0 + 256);
  v13 = v1;
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  swift_retain();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v3, v2));
  v8 = 0.0;
  v9 = 0;
  v10 = *(_OWORD *)(v0 + 232);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v7 = 2;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v5);
  swift_release();
  return v8;
}

Swift::Void __swiftcall TooltipResponder.extendPrintTree(string:)(Swift::String *string)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.dispatchImmediately<A>(_:)();
  if (v7)
    v1 = v6;
  else
    v1 = 7104878;
  if (v7)
    v2 = v7;
  else
    v2 = 0xE300000000000000;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x207069746C6F6F74;
  v5._object = (void *)0xE900000000000028;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
}

uint64_t TooltipResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 208) = *MEMORY[0x1E0CFED28];
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(_QWORD *)(v0 + 232) = v1;
  *(_QWORD *)(v0 + 240) = v2;
  ViewTransform.init()();
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t TooltipResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t TooltipResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TooltipResponder()
{
  return type metadata accessor for TooltipResponder();
}

uint64_t partial apply for closure #1 in TooltipResponder.text.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TooltipResponder.text.getter(v1, a1);
}

ValueMetadata *type metadata accessor for HasTooltipKey()
{
  return &type metadata for HasTooltipKey;
}

uint64_t destroy for TooltipModifier(uint64_t a1)
{
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TooltipModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TooltipModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TooltipModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TooltipModifier()
{
  return &type metadata for TooltipModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in TooltipModifier()
{
  return &protocol witness table for TooltipModifier;
}

unint64_t lazy protocol witness table accessor for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText;
  if (!lazy protocol witness table cache variable for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TooltipModifier.ResolveText, &unk_1E1ABD960);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater;
  if (!lazy protocol witness table cache variable for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TooltipModifier.TooltipResponderUpdater, &unk_1E1ABD8D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static TooltipModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static TooltipModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems;
  if (!lazy protocol witness table cache variable for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TooltipModifier.TransformPlatformItems, &unk_1E1ABD9E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems);
  }
  return result;
}

uint64_t sub_1873066F4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TooltipModifier.TransformPlatformItems.value.getter(uint64_t result)
{
  return closure #1 in TooltipModifier.TransformPlatformItems.value.getter(result);
}

uint64_t sub_18730670C()
{
  swift_release();
  return swift_deallocObject();
}

void *type metadata accessor for TooltipModifier.TransformPlatformItems()
{
  return &unk_1E1ABD9E0;
}

uint64_t initializeWithCopy for TooltipModifier.TooltipResponderUpdater(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TooltipModifier.TooltipResponderUpdater(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for TooltipModifier.TooltipResponderUpdater(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TooltipModifier.TooltipResponderUpdater(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TooltipModifier.TooltipResponderUpdater(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for TooltipModifier.TooltipResponderUpdater()
{
  return &unk_1E1ABD8D0;
}

void *type metadata accessor for TooltipModifier.ResolveText()
{
  return &unk_1E1ABD960;
}

uint64_t sub_1873068E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187306908()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18730692C()
{
  swift_release();
  return swift_deallocObject();
}

void __swiftcall PullDownMenuBarExtraStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PullDownMenuBarExtraStyle._makeMenuBarExtra(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static MenuBarExtraStyle<>.menu.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for PullDownMenuBarExtraStyle()
{
  return &type metadata for PullDownMenuBarExtraStyle;
}

uint64_t LayoutSubview.containerValues.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *v1;
  result = LayoutProxy.traits.getter();
  v4 = v6;
  if (!v6)
  {
    result = ViewTraitCollection.init()();
    v4 = v5;
  }
  *a1 = v4;
  return result;
}

void static _SystemShapeStyle.primaryFill.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static _SystemShapeStyle._makeView<A>(view:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for _SystemShapeStyle()
{
  return &type metadata for _SystemShapeStyle;
}

void static _SystemShapeStyle.secondaryFill.getter()
{
  static _SystemShapeStyle.primaryFill.getter();
}

void static _SystemShapeStyle.tertiaryFill.getter()
{
  static _SystemShapeStyle.primaryFill.getter();
}

void static _SystemShapeStyle.quaternaryFill.getter()
{
  static _SystemShapeStyle.primaryFill.getter();
}

uint64_t TableRow.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static TableRow._tableRowCount(inputs:)()
{
  return 1;
}

uint64_t static TableRow._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  _BYTE v18[16];
  uint64_t List;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 136);
  v7 = *(_DWORD *)(a2 + 144);
  v8 = *(_DWORD *)(a2 + 148);
  PreferencesOutputs.init()();
  type metadata accessor for TableRow(255, a3, a4, v9);
  type metadata accessor for _GraphValue();
  LODWORD(v14) = _GraphValue.value.getter();
  HIDWORD(v14) = v8;
  List = type metadata accessor for TableRow.MakeList(0, a3, a4, v10);
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>.MakeList, List);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v14, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v18, List, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  v14 = v6;
  v15 = v7;
  v17 = v16;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TableRow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRow);
}

uint64_t static TableRow._containsOutlineSymbol(inputs:)()
{
  return 0;
}

uint64_t TableRow.MakeList.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    result = 0;
  }
  else
  {
    AGGraphGetValue();
    result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t TableRow.MakeList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Value;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TableRow(0, v11, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v26 - v17;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, Value, v14);
  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v20(v10, v18, a2);
  TableRow.MakeList.traits.getter(a1, &v27);
  v21 = v27;
  v23 = type metadata accessor for TableRow.Generator(0, a2, a3, v22);
  a4[3] = v23;
  a4[4] = (uint64_t)&protocol witness table for TableRow<A>.Generator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  result = ((uint64_t (*)(uint64_t *, char *, uint64_t))v20)(boxed_opaque_existential_1, v10, a2);
  *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v23 + 36)) = v21;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRow<A>.MakeList@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return TableRow.MakeList.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t TableRow.Generator.visitRows<A>(applying:from:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, char *, _OWORD *, uint64_t *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t result;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  char v29;

  v6 = v5;
  v24[0] = a4;
  v24[1] = a1;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)v24 - v15;
  v17 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)v24 - v15, v6, v10, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, v10);
  v29 = 1;
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v18 = *(_QWORD *)(v6 + *(int *)(a3 + 36));
  if (v18)
  {
    v26 = *(_QWORD *)(v6 + *(int *)(a3 + 36));
    v19 = v18;
  }
  else
  {
    ViewTraitCollection.init()();
    v19 = v26;
  }
  v25 = v19;
  v20 = *(uint64_t (**)(char *, char *, _OWORD *, uint64_t *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(a5 + 8);
  v21 = *(_QWORD *)(a3 + 24);
  swift_bridgeObjectRetain();
  v22 = v20(v16, &v29, v27, &v25, v10, MEMORY[0x1E0CE7C38], v21, MEMORY[0x1E0CE7C28], v24[0], a5);
  swift_bridgeObjectRelease();
  outlined destroy of TableRowList?((uint64_t)v27);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  if (__OFADD__(*a2, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a2;
    return v22 & 1;
  }
  return result;
}

uint64_t TableRow.Generator.rowIDs.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[48];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v2);
  v4 = &v7[-v3];
  dispatch thunk of RawRepresentable.rawValue.getter();
  swift_getAssociatedConformanceWitness();
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
  v7[40] = 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
  outlined init with take of TableRowID((uint64_t)v7, v5 + 32);
  type metadata accessor for WrappedTableRowIDs<[TableRowID]>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v5;
  return result;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance TableRow<A>.Generator(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TableRow.Generator.visitRows<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance TableRow<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static TableRow._makeRows(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t type metadata accessor for TableRow.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRow.MakeList);
}

uint64_t instantiation function for generic protocol witness table for TableRow<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TableRow(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18730718C + 4 * byte_187C22D18[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TableRow(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void base witness table accessor for _AttributeBody in TableRow<A>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t type metadata accessor for TableRow.Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableRow.Generator);
}

uint64_t type metadata completion function for TableRow.Generator()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableRow.Generator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TableRow.Generator(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableRow.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TableRow.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TableRow.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRow.Generator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1873076BC + 4 * byte_187C22D26[v10]))();
  }
}

void storeEnumTagSinglePayload for TableRow.Generator(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_18730783C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1873078C0);
}

void sub_187307844(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18730784CLL);
  JUMPOUT(0x1873078C0);
}

void sub_187307894()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1873078C0);
}

void sub_18730789C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1873078C0);
}

uint64_t sub_1873078A4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x1873078B0);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x1873078C0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void type metadata accessor for WrappedTableRowIDs<[TableRowID]>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for WrappedTableRowIDs<[TableRowID]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TableRowID], (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type [TableRowID] and conformance [A]();
    v6 = type metadata accessor for WrappedTableRowIDs(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for WrappedTableRowIDs<[TableRowID]>);
  }
}

unint64_t lazy protocol witness table accessor for type [TableRowID] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [TableRowID] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TableRowID] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [TableRowID], (uint64_t)&type metadata for TableRowID, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TableRowID] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of TableRowList?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static TypeSelectEquivalentKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.typeSelectEquivalent(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t _TypeSelectEquivalentTableRowModifier.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Text?(v2, v3, v4, v5);
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance _TypeSelectEquivalentTableRowModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Text?(v2, v3, v4, v5);
}

unint64_t lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier;
  if (!lazy protocol witness table cache variable for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TypeSelectEquivalentTableRowModifier, &type metadata for _TypeSelectEquivalentTableRowModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier);
  }
  return result;
}

uint64_t TableRowContent.typeSelectEquivalent(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  _QWORD v13[4];

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = Text.init(_:tableName:bundle:comment:)();
  v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  v10 = v9 & 1;
  v13[2] = v9 & 1;
  v13[3] = v11;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  Scene.modifier<A>(_:)((uint64_t)v13, a5, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  return Scene.modifier<A>(_:)((uint64_t)v7, a5, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v14[4];

  v6 = a2;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = Text.init(_:tableName:bundle:comment:)();
    v6 = v8;
    v10 = v9;
    v12 = v11 & 1;
  }
  else
  {
    v7 = 0;
    v12 = 0;
    v10 = 0;
  }
  v14[0] = v7;
  v14[1] = v6;
  v14[2] = v12;
  v14[3] = v10;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  Scene.modifier<A>(_:)((uint64_t)v14, a5, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  return outlined consume of Text?(v7, v6, v12, v10);
}

uint64_t TableRowContent.typeSelectEquivalent<A>(_:)(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  _QWORD v13[4];

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v6 = Text.init<A>(_:)();
  v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  v10 = v9 & 1;
  v13[2] = v9 & 1;
  v13[3] = v11;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  Scene.modifier<A>(_:)((uint64_t)v13, a2, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall TypeSelectHost.updateRootView()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((double (*)())MEMORY[0x1E0C80A78])();
  v6 = (char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, (uint64_t)v0 + *(_QWORD *)(v1 + 136), v2, v4);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

Swift::Void __swiftcall TypeSelectHost.updateEnvironment()()
{
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release();
  swift_release();
}

uint64_t *TypeSelectHost.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 136));
  swift_release();
  swift_release();
  return v0;
}

uint64_t TypeSelectHost.__deallocating_deinit()
{
  TypeSelectHost.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance TypeSelectHost<A>()
{
  return swift_retain();
}

double protocol witness for ViewRendererHost.currentTimestamp.getter in conformance TypeSelectHost<A>@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  swift_beginAccess();
  result = *(double *)(v1 + 32);
  *a1 = result;
  return result;
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance TypeSelectHost<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance TypeSelectHost<A>())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.getter in conformance TypeSelectHost<A>@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 24);
  return result;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance TypeSelectHost<A>(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_WORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance TypeSelectHost<A>())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.getter in conformance TypeSelectHost<A>@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 26);
  return result;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance TypeSelectHost<A>(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 26) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance TypeSelectHost<A>())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.getter in conformance TypeSelectHost<A>()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.setter in conformance TypeSelectHost<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance TypeSelectHost<A>())()
{
  swift_beginAccess();
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:) in conformance TypeSelectHost<A>(uint64_t a1)
{
  return TypeSelectHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(a1, 0);
}

uint64_t protocol witness for ViewGraphDelegate.modifyViewInputs(_:) in conformance TypeSelectHost<A>(uint64_t a1)
{
  return specialized TypeSelectHost.modifyViewInputs(_:)(a1);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance TypeSelectHost<A>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TypeSelectHost<A>, *v0);
  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance TypeSelectHost<A>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TypeSelectHost<A>, *v0);
  return ViewGraphDelegate.updateGraph<A>(body:)();
}

void protocol witness for GraphDelegate.graphDidChange() in conformance TypeSelectHost<A>()
{
  _QWORD *v0;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TypeSelectHost<A>, *v0);
  ViewRendererHost.graphDidChange()();
}

uint64_t View.typeSelectEquivalent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = a2;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v3 = Text.init(_:tableName:bundle:comment:)();
    v2 = v4;
    v6 = v5;
    v8 = v7 & 1;
  }
  else
  {
    v3 = 0;
    v8 = 0;
    v6 = 0;
  }
  View._trait<A>(_:_:)();
  return outlined consume of Text?(v3, v2, v8, v6);
}

uint64_t View.typeSelectEquivalent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.typeSelectEquivalent<A>(_:), (uint64_t)v11, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE6CF8], v5, (uint64_t)&v12);
  v6 = v12;
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v16 = v12;
  v17 = v13;
  v18 = v14;
  v19 = v15;
  View._trait<A>(_:_:)();
  return outlined consume of Text?(v6, v7, v8, v9);
}

uint64_t TableRowContent.typeSelectEquivalent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:), (uint64_t)v12, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE6CF8], v6, (uint64_t)&v13);
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v16;
  v17[0] = v13;
  v17[1] = v14;
  v17[2] = v15;
  v17[3] = v16;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  Scene.modifier<A>(_:)((uint64_t)v17, a2, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  return outlined consume of Text?(v7, v8, v9, v10);
}

uint64_t closure #1 in View.typeSelectEquivalent<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = Text.init<A>(_:)();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in View.typeSelectEquivalent<A>(_:)(a1, a2);
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _TypeSelectEquivalentTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TypeSelectEquivalentKey()
{
  return &type metadata for TypeSelectEquivalentKey;
}

uint64_t destroy for _TypeSelectEquivalentTableRowModifier(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for _TypeSelectEquivalentTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for _TypeSelectEquivalentTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  return a1;
}

uint64_t assignWithTake for _TypeSelectEquivalentTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Text(a1);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _TypeSelectEquivalentTableRowModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _TypeSelectEquivalentTableRowModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _TypeSelectEquivalentTableRowModifier()
{
  return &type metadata for _TypeSelectEquivalentTableRowModifier;
}

uint64_t type metadata completion function for TypeSelectHost()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for TypeSelectHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TypeSelectHost);
}

uint64_t sub_187308ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<TypeSelectEquivalentKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _TraitWritingModifier<TypeSelectEquivalentKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<TypeSelectEquivalentKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TypeSelectEquivalentKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<TypeSelectEquivalentKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187308BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _TraitWritingModifier<TypeSelectEquivalentKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

_UNKNOWN **sub_187308C1C()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t sub_187308C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

uint64_t sub_187308C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

void base witness table accessor for GraphDelegate in TypeSelectHost<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for ViewGraphDelegate in TypeSelectHost<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized TypeSelectHost.modifyViewInputs(_:)(uint64_t a1)
{
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  *(_DWORD *)(a1 + 36) |= 1u;
  lazy protocol witness table accessor for type AnyListStyleContext and conformance AnyListStyleContext();
  return _GraphInputs.pushStyleContext<A>(_:)();
}

ValueMetadata *type metadata accessor for PhoneIdiomGroupBoxStyle()
{
  return &type metadata for PhoneIdiomGroupBoxStyle;
}

uint64_t associated type witness table accessor for GroupBoxStyle.Body : View in PhoneIdiomGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PhoneIdiomGroupBoxStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  char v15;
  char v16;
  _QWORD v23[5];
  char v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 v32;
  __int16 v33;
  char v34;

  type metadata accessor for <<opaque return type of View.spacing(_:)>>.0(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static HorizontalAlignment.center.getter();
  v13 = static Font.headline.getter();
  KeyPath = swift_getKeyPath();
  a2 &= 1u;
  outlined copy of Environment<Bool>.Content(a1, a2);
  v15 = specialized Environment.wrappedValue.getter(a1, a2);
  outlined consume of Environment<Bool>.Content(a1, a2);
  if ((v15 & 1) != 0)
    v16 = 0;
  else
    v16 = static Edge.Set.all.getter();
  v23[3] = v12;
  v23[4] = 0;
  v24 = 1;
  v25 = 768;
  v26 = KeyPath;
  v27 = v13;
  v28 = v16;
  v29 = 0u;
  v30 = 0u;
  v31 = 1;
  __asm { FMOV            V0.2D, #8.0 }
  v32 = _Q0;
  v33 = 1;
  v34 = 1;
  Spacing.init()();
  v23[1] = v23[2];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>();
  View.spacing(_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v11, v7);
}

uint64_t protocol witness for GroupBoxStyle.makeBody(configuration:) in conformance PhoneIdiomGroupBoxStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return PhoneIdiomGroupBoxStyle.makeBody(configuration:)(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

void type metadata accessor for <<opaque return type of View.spacing(_:)>>.0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>();
    v5[0] = v2;
    v5[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>();
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE6FB8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0);
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0)
  {
    type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>(255);
    v5[0] = v2;
    v5[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>, (uint64_t)&protocol conformance descriptor for AccessibilityAdaptiveStack<A>);
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE6FB8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E0CE5078], MEMORY[0x1E0CE5068], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>();
    type metadata accessor for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>);
  }
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>);
  }
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>);
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, MEMORY[0x1E0CE35A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t))type metadata accessor for Font?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for Font?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Font?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Font?);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    v0 = type metadata accessor for _InsettableBackgroundShapeModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle> and conformance _InsettableBackgroundShapeModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>, MEMORY[0x1E0CE6778]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, MEMORY[0x1E0CE74B8]);
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187309510@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187309538()
{
  swift_retain();
  return EnvironmentValues.font.setter();
}

uint64_t sub_187309560()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>();
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for AccessibilityTraitsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityTraitsModifier);
}

uint64_t type metadata accessor for AccessibilityTraitsModifier.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityTraitsModifier.ChildModifier);
}

uint64_t type metadata accessor for AccessibilityLabelModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLabelModifier);
}

uint64_t destroy for AccessibilityStepperModifier(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {

  }
  if (*(_QWORD *)(a1 + 40))
    swift_release();
  if (*(_QWORD *)(a1 + 56))
    swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityStepperModifier(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(void **)(a2 + 8);
    v6 = *(void **)(a2 + 16);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    v7 = *(void **)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    v8 = v4;
    v9 = v5;
    v10 = v6;
    v11 = v7;
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  v13 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  v15 = *(_QWORD *)(a2 + 56);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v17;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityStepperModifier(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a1)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      v6 = v5;

      v7 = *(void **)(a1 + 8);
      v8 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      v9 = v8;

      v10 = *(void **)(a1 + 16);
      v11 = *(void **)(a2 + 16);
      *(_QWORD *)(a1 + 16) = v11;
      v12 = v11;

      v13 = *(void **)(a1 + 24);
      v14 = *(void **)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v14;
      v15 = v14;

    }
    else
    {
      outlined destroy of AccessibilityStepperValue(a1);
      v23 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v23;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    v16 = *(void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v16;
    v17 = *(void **)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v17;
    v18 = *(void **)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v18;
    v19 = v5;
    v20 = v16;
    v21 = v17;
    v22 = v18;
  }
  else
  {
    v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
  }
  v25 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v26 = *(_QWORD *)(a2 + 40);
  if (v25)
  {
    if (v26)
    {
      v27 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v26;
      *(_QWORD *)(a1 + 48) = v27;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v26)
  {
    v28 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v26;
    *(_QWORD *)(a1 + 48) = v28;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_15:
  v29 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v29)
    {
      v31 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v29;
      *(_QWORD *)(a1 + 64) = v31;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_22;
  }
  if (!v29)
  {
    swift_release();
    goto LABEL_21;
  }
  v30 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v29;
  *(_QWORD *)(a1 + 64) = v30;
  swift_retain();
  swift_release();
LABEL_22:
  v32 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v32;
  swift_retain();
  swift_release();
  v33 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v33;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of AccessibilityStepperValue(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE5DD0] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for AccessibilityStepperModifier(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;

      v5 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

      v6 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

      v7 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

      goto LABEL_6;
    }
    outlined destroy of AccessibilityStepperValue(a1);
  }
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
LABEL_6:
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  if (v10)
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v11;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v9)
  {
    v12 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v12;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_13:
  v13 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v13)
    {
      v15 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v15;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_20;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  swift_release();
LABEL_20:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityStepperModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityStepperModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityStepperModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityStepperModifier);
}

uint64_t type metadata accessor for AccessibilityNavigationLinkButtonModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityNavigationLinkButtonModifier);
}

uint64_t destroy for AccessibilityDefaultAction(uint64_t a1)
{
  uint64_t result;
  void *v3;

  result = swift_release();
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityDefaultAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 40);
  swift_retain();
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_BYTE *)(a2 + 32);
    outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = v8;
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    v11 = v5;
    swift_retain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityDefaultAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = (_OWORD *)(a1 + 16);
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_BYTE *)(a2 + 32);
      outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
      v11 = *(_QWORD *)(a1 + 16);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_BYTE *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v9;
      *(_BYTE *)(a1 + 32) = v10;
      outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v13);
      v14 = *(void **)(a2 + 40);
      v15 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v14;
      v16 = v14;

      v17 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v17;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 16);
      v26 = *(_OWORD *)(a2 + 32);
      v25 = *(_OWORD *)(a2 + 48);
      *v5 = *v6;
      *(_OWORD *)(a1 + 32) = v26;
      *(_OWORD *)(a1 + 48) = v25;
    }
  }
  else if (v7)
  {
    v18 = *(_QWORD *)(a2 + 16);
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(_BYTE *)(a2 + 32);
    outlined copy of Environment<AppIntentExecutor?>.Content(v18, v19, v20);
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v19;
    *(_BYTE *)(a1 + 32) = v20;
    v21 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v21;
    v22 = *(_QWORD *)(a2 + 48);
    v23 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v22;
    *(_QWORD *)(a1 + 56) = v23;
    v24 = v21;
    swift_retain();
  }
  else
  {
    v27 = *v6;
    v28 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v28;
    *v5 = v27;
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityDefaultAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(void **)(a1 + 40);
  if (!v4)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 40);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 16);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 40) = v5;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityDefaultAction()
{
  return &type metadata for AccessibilityDefaultAction;
}

uint64_t type metadata completion function for AccessibilityDefaultActionRepresentableStyle()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityDefaultActionRepresentableStyle(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  id v19;
  __int128 v20;
  __int128 v21;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *a2;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 64) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    *a1 = v7;
    a1 = (_QWORD *)(v7 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = v7;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)(v12 + 24);
    swift_retain();
    if (v13 < 0xFFFFFFFF)
    {
      v20 = *(_OWORD *)v12;
      v21 = *(_OWORD *)(v12 + 32);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
      *(_OWORD *)(v11 + 32) = v21;
      *(_OWORD *)v11 = v20;
    }
    else
    {
      v14 = *(_QWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      v16 = *(_BYTE *)(v12 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v12, v15, v16);
      *(_QWORD *)v11 = v14;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v16;
      v17 = *(void **)(v12 + 24);
      *(_QWORD *)(v11 + 24) = v17;
      v18 = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v11 + 40) = v18;
      v19 = v17;
      swift_retain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v11 + v6 + 48) & ~v6, (v12 + v6 + 48) & ~v6, v4);
  }
  return a1;
}

uint64_t destroy for AccessibilityDefaultActionRepresentableStyle(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  swift_release();
  v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));

    swift_release();
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for AccessibilityDefaultActionRepresentableStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 24);
  swift_retain();
  if (v8 < 0xFFFFFFFF)
  {
    v15 = *(_OWORD *)v7;
    v16 = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(v6 + 32) = v16;
    *(_OWORD *)v6 = v15;
  }
  else
  {
    v9 = *(_QWORD *)v7;
    v10 = *(_QWORD *)(v7 + 8);
    v11 = *(_BYTE *)(v7 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, v10, v11);
    *(_QWORD *)v6 = v9;
    *(_QWORD *)(v6 + 8) = v10;
    *(_BYTE *)(v6 + 16) = v11;
    v12 = *(void **)(v7 + 24);
    *(_QWORD *)(v6 + 24) = v12;
    v13 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v6 + 40) = v13;
    v14 = v12;
    swift_retain();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))((v6 + *(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (v7 + *(unsigned __int8 *)(v17 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

_QWORD *assignWithCopy for AccessibilityDefaultActionRepresentableStyle(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v20 = *(_QWORD *)v8;
      v21 = *(_QWORD *)(v8 + 8);
      v22 = *(_BYTE *)(v8 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v21, v22);
      *(_QWORD *)v7 = v20;
      *(_QWORD *)(v7 + 8) = v21;
      *(_BYTE *)(v7 + 16) = v22;
      v23 = *(void **)(v8 + 24);
      *(_QWORD *)(v7 + 24) = v23;
      v24 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v7 + 40) = v24;
      v25 = v23;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    v26 = *(_OWORD *)v8;
    v27 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v27;
    *(_OWORD *)v7 = v26;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));

    swift_release();
    goto LABEL_7;
  }
  v10 = *(_QWORD *)v8;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_BYTE *)(v8 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v8, v11, v12);
  v13 = *(_QWORD *)v7;
  v14 = *(_QWORD *)(v7 + 8);
  v15 = *(_BYTE *)(v7 + 16);
  *(_QWORD *)v7 = v10;
  *(_QWORD *)(v7 + 8) = v11;
  *(_BYTE *)(v7 + 16) = v12;
  outlined consume of Environment<AppIntentExecutor?>.Content(v13, v14, v15);
  v16 = *(void **)(v8 + 24);
  v17 = *(void **)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v16;
  v18 = v16;

  v19 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v19;
  swift_retain();
  swift_release();
LABEL_8:
  v28 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v28 + 24))((v7 + *(unsigned __int8 *)(v28 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80), (v8 + *(unsigned __int8 *)(v28 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  return a1;
}

_OWORD *initializeWithTake for AccessibilityDefaultActionRepresentableStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (__int128 *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = *v5;
  v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  *v4 = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_OWORD *assignWithTake for AccessibilityDefaultActionRepresentableStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v5 = (unint64_t)a2 + 23;
  *a1 = *a2;
  swift_release();
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v6 + 24) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));

    swift_release();
LABEL_5:
    v13 = *(_OWORD *)v7;
    v14 = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(v6 + 32) = v14;
    *(_OWORD *)v6 = v13;
    goto LABEL_6;
  }
  v8 = *(_BYTE *)(v7 + 16);
  v9 = *(_QWORD *)v6;
  v10 = *(_QWORD *)(v6 + 8);
  v11 = *(_BYTE *)(v6 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_BYTE *)(v6 + 16) = v8;
  outlined consume of Environment<AppIntentExecutor?>.Content(v9, v10, v11);
  v12 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);

  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v7 + 32);
  swift_release();
LABEL_6:
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((v6 + *(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (v7 + *(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityDefaultActionRepresentableStyle(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 64) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 48) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18730A4E0 + 4 * byte_187C231A0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityDefaultActionRepresentableStyle(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for AccessibilityDefaultActionRepresentableStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityDefaultActionRepresentableStyle);
}

uint64_t type metadata completion function for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AccessibilityLinkModifier(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for AccessibilityLinkModifier.Configuration);
}

unint64_t initializeBufferWithCopyOfBuffer for AccessibilityLinkModifier(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for AccessibilityLinkModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_DWORD *)(*(_QWORD *)(v6 - 8) + 80);
  if ((v7 & 0x20000) != 0)
  {
    v26 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v26 + ((v7 + 16) & ~(unint64_t)v7);
    swift_retain();
  }
  else
  {
    v8 = v6;
    v9 = *(_QWORD *)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_BYTE *)(a2 + 34);
    v14 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v10, v11, v12, v14, v13);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v12;
    *(_WORD *)(a1 + 32) = v14;
    *(_BYTE *)(a1 + 34) = v13;
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_QWORD *)(a2 + 56);
    v18 = *(_QWORD *)(a2 + 64);
    v19 = *(_BYTE *)(a2 + 74);
    v20 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v16;
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 64) = v18;
    *(_WORD *)(a1 + 72) = v20;
    *(_BYTE *)(a1 + 74) = v19;
    v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v22 = a1 + v21;
    v23 = a2 + v21;
    v24 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = type metadata accessor for LinkDestination.Configuration();
    *(_BYTE *)(v22 + *(int *)(v25 + 20)) = *(_BYTE *)(v23 + *(int *)(v25 + 20));
    *(_BYTE *)(a1 + *(int *)(v8 + 36)) = *(_BYTE *)(a2 + *(int *)(v8 + 36));
  }
  return a1;
}

uint64_t type metadata accessor for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLinkModifier.Configuration);
}

uint64_t initializeWithCopy for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 34);
  v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v7, v8, v9, v11, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_WORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 34) = v10;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_BYTE *)(a2 + 74);
  v17 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v15;
  *(_WORD *)(a1 + 72) = v17;
  *(_BYTE *)(a1 + 74) = v16;
  v18 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v19 + *(int *)(v22 + 20)) = *(_BYTE *)(v20 + *(int *)(v22 + 20));
  v24 = type metadata accessor for AccessibilityLinkModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v23);
  *(_BYTE *)(a1 + *(int *)(v24 + 36)) = *(_BYTE *)(a2 + *(int *)(v24 + 36));
  return a1;
}

uint64_t assignWithCopy for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 34);
  v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v7, v8, v9, v11, v10);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v17 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 34) = v10;
  outlined consume of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  v22 = *(_BYTE *)(a2 + 74);
  v23 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v23, v22);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(a1 + 64);
  v28 = *(_BYTE *)(a1 + 74);
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  v29 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v23;
  *(_BYTE *)(a1 + 74) = v22;
  outlined consume of Environment<OpenURLAction>.Content(v24, v25, v26, v27, v29, v28);
  v30 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  v34 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v31 + *(int *)(v34 + 20)) = *(_BYTE *)(v32 + *(int *)(v34 + 20));
  v36 = type metadata accessor for AccessibilityLinkModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v35);
  *(_BYTE *)(a1 + *(int *)(v36 + 36)) = *(_BYTE *)(a2 + *(int *)(v36 + 36));
  return a1;
}

uint64_t initializeWithTake for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  v7 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v8 + *(int *)(v11 + 20)) = *(_BYTE *)(v9 + *(int *)(v11 + 20));
  v13 = type metadata accessor for AccessibilityLinkModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v12);
  *(_BYTE *)(a1 + *(int *)(v13 + 36)) = *(_BYTE *)(a2 + *(int *)(v13 + 36));
  return a1;
}

uint64_t assignWithTake for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int16 v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_WORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 34);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 34);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 34) = v7;
  outlined consume of Environment<OpenURLAction>.Content(v8, v9, v10, v11, v14, v12);
  v15 = *(_WORD *)(a2 + 72);
  v16 = *(_BYTE *)(a2 + 74);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v22 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 74) = v16;
  outlined consume of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v22, v21);
  v23 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v24 + *(int *)(v27 + 20)) = *(_BYTE *)(v25 + *(int *)(v27 + 20));
  v29 = type metadata accessor for AccessibilityLinkModifier.Configuration(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v28);
  *(_BYTE *)(a1 + *(int *)(v29 + 36)) = *(_BYTE *)(a2 + *(int *)(v29 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLinkModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18730ACFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityLinkModifier.Configuration);
}

uint64_t storeEnumTagSinglePayload for AccessibilityLinkModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18730AD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityLinkModifier.Configuration);
}

uint64_t type metadata accessor for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLinkModifier);
}

uint64_t type metadata completion function for AccessibilityLinkModifier.Configuration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LinkDestination();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AccessibilityLinkModifier.Configuration(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_BYTE *)(a2 + 34);
    v12 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v8, v9, v10, v12, v11);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_WORD *)(a1 + 32) = v12;
    *(_BYTE *)(a1 + 34) = v11;
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 56);
    v16 = *(_QWORD *)(a2 + 64);
    v17 = *(_BYTE *)(a2 + 74);
    v18 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = v16;
    *(_WORD *)(a1 + 72) = v18;
    *(_BYTE *)(a1 + 74) = v17;
    v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = type metadata accessor for LinkDestination.Configuration();
    *(_BYTE *)(v20 + *(int *)(v23 + 20)) = *(_BYTE *)(v21 + *(int *)(v23 + 20));
    *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  }
  return a1;
}

uint64_t destroy for AccessibilityLinkModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32), *(_BYTE *)(a1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_WORD *)(a1 + 72), *(_BYTE *)(a1 + 74));
  v2 = a1 + *(int *)(type metadata accessor for LinkDestination() + 24);
  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 34);
  v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v7, v8, v9, v11, v10);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_WORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 34) = v10;
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_BYTE *)(a2 + 74);
  v17 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v15;
  *(_WORD *)(a1 + 72) = v17;
  *(_BYTE *)(a1 + 74) = v16;
  v18 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v19 + *(int *)(v22 + 20)) = *(_BYTE *)(v20 + *(int *)(v22 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithCopy for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_BYTE *)(a2 + 34);
  v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v7, v8, v9, v11, v10);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 34);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v17 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 34) = v10;
  outlined consume of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  v22 = *(_BYTE *)(a2 + 74);
  v23 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v23, v22);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(a1 + 64);
  v28 = *(_BYTE *)(a1 + 74);
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  v29 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v23;
  *(_BYTE *)(a1 + 74) = v22;
  outlined consume of Environment<OpenURLAction>.Content(v24, v25, v26, v27, v29, v28);
  v30 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v31 = a1 + v30;
  v32 = a2 + v30;
  v33 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  v34 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v31 + *(int *)(v34 + 20)) = *(_BYTE *)(v32 + *(int *)(v34 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t initializeWithTake for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  v7 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v8 + *(int *)(v11 + 20)) = *(_BYTE *)(v9 + *(int *)(v11 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithTake for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int16 v14;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_WORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 34);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 34);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 34) = v7;
  outlined consume of Environment<OpenURLAction>.Content(v8, v9, v10, v11, v14, v12);
  v15 = *(_WORD *)(a2 + 72);
  v16 = *(_BYTE *)(a2 + 74);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v22 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v15;
  *(_BYTE *)(a1 + 74) = v16;
  outlined consume of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v22, v21);
  v23 = *(int *)(type metadata accessor for LinkDestination() + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = type metadata accessor for LinkDestination.Configuration();
  *(_BYTE *)(v24 + *(int *)(v27 + 20)) = *(_BYTE *)(v25 + *(int *)(v27 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLinkModifier.Configuration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18730B34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for LinkDestination();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccessibilityLinkModifier.Configuration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18730B3E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for LinkDestination();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for AccessibilityLabelModifier.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityLabelModifier.ChildModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLabelModifier<A>.ChildModifier()
{
  return &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
}

uint64_t View.accessibilityCombinedElement(options:ignoredTraits:)@<X0>(char a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v20 = a4;
  v7 = type metadata accessor for ModifiedContent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v19 - v14;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = a1;
  v22 = v16;
  View._accessibilityElement(children:)(&v22, a2, a3);
  swift_release();
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v7, (uint64_t)v15);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v21 = 64;
  ModifiedContent<>.accessibilityAddVisibility(_:)(&v21, v7, v20);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v7);
}

uint64_t AccessibilityDefaultAction.accessibilityActions.getter()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[48];
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  __int128 v19;

  outlined init with take of AppIntentAction?((uint64_t)(v0 + 1), (uint64_t)v15);
  outlined init with take of AppIntentAction?((uint64_t)v15, (uint64_t)v16);
  v1 = v18;
  if (v18)
  {
    v2 = v16[0];
    v3 = v16[1];
    v4 = v17;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    *(_QWORD *)(v5 + 56) = v6;
    *(_QWORD *)(v5 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v7 = swift_allocObject();
    *(_QWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_QWORD *)(v7 + 48) = v2;
    *(_QWORD *)(v7 + 56) = v3;
    *(_BYTE *)(v7 + 64) = v4;
    *(_QWORD *)(v7 + 72) = v1;
    *(_OWORD *)(v7 + 80) = v19;
    *(_QWORD *)(v7 + 96) = 0;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)(v7 + 112) = 0;
    *(_QWORD *)(v7 + 120) = 2;
    *(_OWORD *)(v7 + 128) = 0u;
    *(_OWORD *)(v7 + 144) = 0u;
    *(_OWORD *)(v7 + 153) = 0u;
    *(_BYTE *)(v5 + 72) = 1;
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_187BF9830;
    v8 = (_OWORD *)swift_allocObject();
    v9 = v0[1];
    v8[1] = *v0;
    v8[2] = v9;
    v10 = v0[3];
    v8[3] = v0[2];
    v8[4] = v10;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = partial apply for specialized closure #1 in ModifiedContent<>.accessibilityAction<A>(_:label:image:_:);
    *(_QWORD *)(v11 + 24) = v8;
    LODWORD(v8) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
    *(_QWORD *)(v5 + 56) = v12;
    *(_QWORD *)(v5 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v13 = swift_allocObject();
    *(_QWORD *)(v5 + 32) = v13;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 72) = 2;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_QWORD *)(v13 + 112) = 0;
    *(_QWORD *)(v13 + 120) = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
    *(_QWORD *)(v13 + 128) = v11;
    *(_DWORD *)(v13 + 136) = (_DWORD)v8;
    *(_BYTE *)(v5 + 72) = 0;
    swift_retain();
  }
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v15);
  return v5;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityDefaultAction@<X0>(_QWORD *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = v1[1];
  v9 = *v1;
  v10 = v3;
  v4 = v1[3];
  v11 = v1[2];
  v12 = v4;
  v5 = AccessibilityDefaultAction.accessibilityActions.getter();
  specialized View.accessibility<A>(_:_:isEnabled:)(v5, 1, v8);
  result = swift_bridgeObjectRelease();
  v7 = v8[1];
  *a1 = v8[0];
  a1[1] = v7;
  return result;
}

uint64_t AccessibilityDefaultActionRepresentableStyle.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];

  v62 = a3;
  v60 = *(_QWORD *)(a2 - 8);
  v61 = *(_QWORD *)(v60 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v59 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 16);
  v57 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v7, v5);
  v56 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityDefaultActionRepresentableStyle<A>, v8);
  v58 = type metadata accessor for _ViewModifier_Content();
  v47 = type metadata accessor for ModifiedContent();
  v10 = type metadata accessor for ModifiedContent();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
  v14 = type metadata accessor for ModifiedContent();
  v53 = *(_QWORD *)(a2 + 24);
  v72[0] = v53;
  v72[1] = &protocol witness table for DetachedGeometryModifier;
  v15 = MEMORY[0x1E0CE2E70];
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v72);
  v17 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  v71[0] = v16;
  v71[1] = v17;
  v70[0] = MEMORY[0x18D75FFDC](v15, v11, v71);
  v70[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v69[0] = MEMORY[0x18D75FFDC](v15, v12, v70);
  v69[1] = &protocol witness table for _HiddenModifier;
  v18 = MEMORY[0x18D75FFDC](v15, v13, v69);
  v19 = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  v68[0] = v18;
  v68[1] = v19;
  MEMORY[0x18D75FFDC](v15, v14, v68);
  v48 = type metadata accessor for _BackgroundModifier();
  v50 = type metadata accessor for ModifiedContent();
  v51 = type metadata accessor for ModifiedContent();
  v52 = type metadata accessor for ModifiedContent();
  v20 = type metadata accessor for ModifiedContent();
  v54 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v46 = (uint64_t)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v49 = (char *)&v46 - v26;
  v27 = v55;
  v28 = v57;
  v29 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v57 + 16))(v56, v55 + *(int *)(a2 + 40), v6, v25);
  v30 = v60;
  v31 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v27, a2);
  v32 = v30;
  v33 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v34 = swift_allocObject();
  v35 = v53;
  *(_QWORD *)(v34 + 16) = v6;
  *(_QWORD *)(v34 + 24) = v35;
  (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v34 + v33, v31, a2);
  v36 = v58;
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v58);
  v38 = v46;
  View.accessibilityAttachment<A>(content:_:)(v29, (uint64_t)partial apply for closure #1 in AccessibilityDefaultActionRepresentableStyle.body(content:), v34, v36, v6, v37, v35, v46);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v6);
  v67[0] = v37;
  v67[1] = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  v39 = MEMORY[0x1E0CE2E70];
  v40 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v47, v67);
  v41 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4B88], v48);
  v66[0] = v40;
  v66[1] = v41;
  v65[0] = MEMORY[0x18D75FFDC](v39, v50, v66);
  v65[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v64[0] = MEMORY[0x18D75FFDC](v39, v51, v65);
  v64[1] = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  v63[0] = MEMORY[0x18D75FFDC](v39, v52, v64);
  v63[1] = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  v42 = MEMORY[0x18D75FFDC](v39, v20, v63);
  v43 = (uint64_t)v49;
  static ViewBuilder.buildExpression<A>(_:)(v38, v20, v42);
  v44 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v44(v38, v20);
  static ViewBuilder.buildBlock<A>(_:)(v43, v20, v62);
  return ((uint64_t (*)(uint64_t, uint64_t))v44)(v43, v20);
}

