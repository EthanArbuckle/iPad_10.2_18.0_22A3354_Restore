uint64_t _GraphInputs.suppressTrailingInset.getter()
{
  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0
    && ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
     || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0))
  {
    return static SemanticFeature.isEnabled.getter() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t implicit closure #1 in static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for View.body.getter in conformance UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  int v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t Value;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v25[4];
  int v26;
  uint64_t v27;
  _OWORD v28[4];
  uint64_t v29;

  v3 = a2;
  v4 = a1;
  v27 = a3;
  v5 = HIDWORD(a1);
  v26 = a2 & 1;
  v6 = a2 & 0x100;
  v7 = a2 & 0x10000;
  v8 = a2 & 0x1000000;
  type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AGGraphGetValue();
  v17 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v17, (uint64_t)v16);
  swift_bridgeObjectRelease();
  type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(0);
  Value = AGGraphGetValue();
  v28[0] = *(_OWORD *)Value;
  v21 = *(_OWORD *)(Value + 32);
  v20 = *(_OWORD *)(Value + 48);
  v22 = *(_OWORD *)(Value + 16);
  v29 = *(_QWORD *)(Value + 64);
  v28[2] = v21;
  v28[3] = v20;
  v28[1] = v22;
  if ((v3 & 1) != 0)
  {
    if (v6)
    {
      if (v7)
        v23 = 56;
      else
        v23 = 24;
      if (!v8)
        goto LABEL_21;
    }
    else
    {
      if (v7)
        v23 = 40;
      else
        v23 = 8;
      if (!v8)
        goto LABEL_21;
    }
LABEL_20:
    v23 |= 0x40uLL;
    goto LABEL_21;
  }
  if (!v6)
  {
    v23 = v7 >> 11;
    if (!v8)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (v7)
    v23 = 48;
  else
    v23 = 16;
  if (v8)
    goto LABEL_20;
LABEL_21:
  MEMORY[0x1E0C80A78](Value, v19);
  *(_QWORD *)&v25[-32] = v16;
  *(_DWORD *)&v25[-24] = v4;
  *(_DWORD *)&v25[-20] = v5;
  v25[-16] = v26;
  v25[-15] = BYTE1(v6);
  v25[-14] = BYTE2(v7);
  v25[-13] = HIBYTE(v8);
  outlined retain of UIKitButtonConfiguration(v28, (void (*)(_QWORD, _QWORD))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  specialized UIKitButtonAdaptor.init(configuration:options:content:)((uint64_t)v28, v23, (void (*)(uint64_t))partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter, (uint64_t)v12);
  specialized View.accessibility(platformItem:)((uint64_t)v16, v27);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
}

uint64_t closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *Value;
  char v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE *v12;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v3 = type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(0);
  Value = (char *)AGGraphGetValue();
  v5 = *Value;
  v6 = Value[1];
  v7 = &Value[*(int *)(v3 + 20)];
  v8 = type metadata accessor for PlatformItemContent(0);
  v9 = a2 + *(int *)(v8 + 24);
  v10 = type metadata accessor for UIButton.Configuration();
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v7, v10);
  v12 = (_BYTE *)(a2 + *(int *)(v8 + 20));
  *v12 = v5;
  v12[1] = v6;
  return result;
}

void specialized View.accessibility(platformItem:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 528);
  if (v6)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v6 = Dictionary.init(minimumCapacity:)();
  }
  v42 = v6;
  v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  v8 = v32;
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_7;
  v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  if (v32)
  {
    v10 = v32[2];
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_9:
      v38 = v6;
      static AccessibilityAttachment.properties(_:)();
      v26 = v32;
      v27 = v33;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
      v28 = swift_allocObject();
      *(_QWORD *)(v28 + 16) = v26;
      *(_QWORD *)(v28 + 24) = v27;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, a2, (uint64_t (*)(_QWORD))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>);
      swift_bridgeObjectRelease();
      type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
      v30 = (uint64_t *)(a2 + *(int *)(v29 + 36));
      *v30 = v28;
      v30[1] = 0;
      return;
    }
LABEL_7:
    v11 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_187BF9830;
      v36 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
      v32 = v11;
      v31 = v11;
      AccessibilityText.init(_:)();
      v13 = v3;
      v14 = (void *)v38;
      v15 = v39;
      v16 = v40;
      v32 = (_QWORD *)v38;
      v33 = v39;
      v34 = v40;
      v35 = v41;
      v17 = AccessibilityText.text.getter();
      v19 = v18;
      v21 = v20;
      v23 = v22;
      v24 = v14;
      v3 = v13;
      outlined consume of AccessibilityText.Storage(v24, v15, v16);
      *(_QWORD *)(v12 + 32) = v17;
      *(_QWORD *)(v12 + 40) = v19;
      *(_BYTE *)(v12 + 48) = v21 & 1;
      *(_QWORD *)(v12 + 56) = v23;
      type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
      v36 = v25;
      v37 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
      v32 = (_QWORD *)v12;
      LOBYTE(v33) = 2;
      specialized Dictionary.subscript.setter((uint64_t)&v32, MEMORY[0x1E0CE5888]);

      v6 = v42;
    }
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(v1 + 9))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(_BYTE *)(v1 + 10))
    v4 = 0x10000;
  else
    v4 = 0;
  if (*(_BYTE *)(v1 + 11))
    v5 = 0x1000000;
  else
    v5 = 0;
  return UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter(*(_QWORD *)v1, v3 | v4 | v5, a1);
}

uint64_t closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  PlatformItemList.mergedContentItem.getter(a2, (uint64_t)v8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_187BF9830;
  result = outlined init with take of TableCellFormula((uint64_t)v8, v10 + v9, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  *a1 = v10;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)AGGraphGetValue();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter;
  *(_QWORD *)(v4 + 24) = v3;
  *a1 = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
  a1[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for StyleModifier.style.setter in conformance UIKitSystemButtonConfigurationModifier(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UIButton.Configuration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

void protocol witness for ViewModifier.body(content:) in conformance UIKitSystemButtonConfigurationModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t UIKitButtonAdaptor.resolvedOptions.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + *(int *)(v8 + 88));
  v10 = *(_QWORD *)(v2 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  v11 = (*(uint64_t (**)(void))(v10 + 8))();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a1);
  if ((v11 & 1) == 0)
  {
    v12 = *((_QWORD *)v7 + 1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<AnyButtonStyleType.Unknown>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown, (uint64_t)&type metadata for AnyButtonStyleType.Unknown, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
    if (((*(uint64_t (**)(void))(v12 + 8))() & 1) == 0 || (v9 & 2) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
  if ((v9 & 2) == 0)
LABEL_6:
    v9 |= 2uLL;
LABEL_7:
  v13 = *(_QWORD *)(v3 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  if (((*(unsigned int (**)(void))(v13 + 8))() & ((v9 & 4) == 0)) != 0)
    return v9 | 4;
  else
    return v9;
}

id UIKitButtonAdaptor.makeCoordinator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = objc_allocWithZone((Class)type metadata accessor for Coordinator());
  outlined copy of AppIntentExecutor?(v1);
  v4 = specialized Coordinator.init(action:)(v1, v2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  return v4;
}

id UIKitButtonAdaptor.makeUIView(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  void *v22;
  uint64_t v23;
  char v24;
  id v25;
  uint64_t v26;
  double v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  double v35;
  double v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t aBlock;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t (*v54)();
  _QWORD *v55;

  v3 = v2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UIButton.Configuration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v46 = (char *)&v46 - v8;
  v9 = type metadata accessor for UIButton.Configuration.Indicator();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UIButton.Configuration();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(a1 + 40);
  v19 = UIKitButtonAdaptor.resolvedOptions.getter(a2, v18);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(uint64_t (**)(void))(v20 + 24);
  v48 = *(_QWORD *)(a2 + 16);
  v49 = v20;
  v22 = (void *)v21();
  v23 = *(_QWORD *)(v2 + 16);
  v24 = *(_BYTE *)(v3 + 24);
  v25 = v22;
  outlined copy of Environment<Bool>.Content(v23, v24);
  specialized Environment.wrappedValue.getter(v23, v24, &aBlock);
  outlined consume of Environment<Bool>.Content(v23, v24);
  objc_msgSend(v25, sel_setPreferredMenuElementOrder_, qword_187BFF6C8[(char)aBlock]);

  if ((v19 & 8) != 0)
  {
    UIKitButtonAdaptor.resolvedConfiguration.getter(a2, (uint64_t)v17);
    UIKitButtonAdaptor.resolvedIndicator.getter(a2, v26, (uint64_t)v12);
    UIButton.Configuration.indicator.setter();
    UIButton.Configuration.titleLineBreakMode.setter();
    LODWORD(v27) = 1132068864;
    objc_msgSend(v25, sel_setContentCompressionResistancePriority_forAxis_, 0, v27);
    v28 = v46;
    if ((v19 & 0x20) != 0)
    {
      v29 = *(_QWORD *)(v3 + 32);
      v30 = *(unsigned __int8 *)(v3 + 40);
      v31 = v25;
      outlined copy of Environment<Color?>.Content(v29, v30);
      v32 = specialized Environment.wrappedValue.getter(v29, v30);
      outlined consume of Environment<Color?>.Content(v29, v30);
      if (!v32)
        v32 = static Color.secondary.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      v33 = UIColor.init(_:)(v32);
      objc_msgSend(v31, sel_setTintColor_, v33);

      UIButton.Configuration.titleLineBreakMode.setter();
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v28, v17, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, v13);
    v34 = v25;
    UIButton.configuration.setter();

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    LODWORD(v35) = 1144750080;
    objc_msgSend(v25, sel_setContentHuggingPriority_forAxis_, 0, v35);
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    LODWORD(v36) = 1144750080;
    objc_msgSend(v25, sel_setContentHuggingPriority_forAxis_, 1, v36);
  }
  objc_msgSend(v25, sel_addTarget_action_forControlEvents_, v47, sel_primaryActionTriggered_, 0x2000);
  v37 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v38 = (_QWORD *)swift_allocObject();
  v39 = v49;
  v38[2] = v48;
  v38[3] = v39;
  v38[4] = v37;
  v54 = partial apply for closure #1 in UIKitButtonAdaptor.makeUIView(context:);
  v55 = v38;
  v40 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v51 = 1107296256;
  v52 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
  v53 = &block_descriptor_95;
  v41 = _Block_copy(&aBlock);
  swift_release();
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = v41;
  v54 = partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool);
  v55 = (_QWORD *)v42;
  aBlock = v40;
  v51 = 1107296256;
  v52 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
  v53 = &block_descriptor_101;
  v43 = _Block_copy(&aBlock);
  v44 = v25;
  _Block_copy(v41);
  swift_release();
  objc_msgSend(v44, sel_setAccessibilitySwiftUIDefaultActionStoredBlock_, v43);
  _Block_release(v43);

  _Block_release(v41);
  return v44;
}

uint64_t UIKitButtonAdaptor.resolvedConfiguration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  char v17;
  void (*v18)(_BYTE *, uint64_t);
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t (*v23)(_BYTE *, _QWORD);
  uint64_t v24;
  _BYTE v25[32];

  v5 = type metadata accessor for UIButton.Configuration();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v25[-v12];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  if (swift_dynamicCastMetatype())
  {
    static UIButton.Configuration.plain()();
  }
  else
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
    if (!swift_dynamicCastMetatype())
    {
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
      if (swift_dynamicCastMetatype())
      {
        static UIButton.Configuration.bordered()();
        goto LABEL_9;
      }
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle, (uint64_t)&type metadata for BorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
      if (swift_dynamicCastMetatype())
      {
        static UIButton.Configuration.borderedProminent()();
        goto LABEL_9;
      }
    }
    static UIButton.Configuration.borderless()();
  }
LABEL_9:
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(a2, v13, v5);
  result = UIKitButtonAdaptor.resolvedOptions.getter(a1, v14);
  if ((result & 0x10) != 0)
  {
    v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
    v16(v13, a2, v5);
    static UIButton.Configuration.borderless()();
    v17 = static UIButton.Configuration.== infix(_:_:)();
    v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v18(v9, v5);
    v18(v13, v5);
    if ((v17 & 1) != 0
      || (v16(v13, a2, v5),
          static UIButton.Configuration.plain()(),
          v19 = static UIButton.Configuration.== infix(_:_:)(),
          v18(v9, v5),
          result = ((uint64_t (*)(_BYTE *, uint64_t))v18)(v13, v5),
          (v19 & 1) != 0))
    {
      v20 = *(_QWORD *)(v2 + 96);
      v21 = *(_BYTE *)(v2 + 104);
      outlined copy of Environment<Bool>.Content(v20, v21);
      v22 = specialized Environment.wrappedValue.getter(v20, v21);
      result = outlined consume of Environment<Bool>.Content(v20, v21);
      if ((v22 & 1) == 0)
      {
        v23 = (uint64_t (*)(_BYTE *, _QWORD))UIButton.Configuration.contentInsets.modify();
        *(_QWORD *)(v24 + 24) = 0;
        return v23(v25, 0);
      }
    }
  }
  return result;
}

uint64_t UIKitButtonAdaptor.resolvedIndicator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned int *v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(v3 + 142))
  {
    if (*(_BYTE *)(v3 + 142) == 1)
      v5 = (unsigned int *)MEMORY[0x1E0DC3208];
    else
      v5 = (unsigned int *)MEMORY[0x1E0DC3200];
    v10 = *v5;
    v7 = type metadata accessor for UIButton.Configuration.Indicator();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104);
    v11 = a3;
    v12 = v10;
  }
  else
  {
    v6 = UIKitButtonAdaptor.resolvedOptions.getter(a1, a2);
    v7 = type metadata accessor for UIButton.Configuration.Indicator();
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104);
    if ((v6 & 0x40) != 0)
      v9 = (unsigned int *)MEMORY[0x1E0DC3208];
    else
      v9 = (unsigned int *)MEMORY[0x1E0DC3210];
    v12 = *v9;
    v11 = a3;
  }
  return v8(v11, v12, v7);
}

uint64_t closure #1 in UIKitButtonAdaptor.makeUIView(context:)(uint64_t a1)
{
  NSString *v2;
  Class v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  void *v8;

  v2 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v3 = NSClassFromString(v2);

  if (!v3)
    return (uint64_t)v3;
  v4 = a1 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x18D760234](a1 + 16);
  if (!v5)
    return 0;
  v6 = (void *)v5;
  swift_beginAccess();
  result = MEMORY[0x18D760234](v4);
  if (result)
  {
    v8 = (void *)result;
    v3 = (Class)objc_msgSend(v6, sel__accessibilityShowContextMenuForElement_targetPointValue_, result, 0);

    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

id UIKitButtonAdaptor.updateUIView(_:context:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, _UNKNOWN **);
  char *v41;
  void (*v42)(char *, uint64_t, char *);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (**v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  _BYTE *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  id v76;
  Swift::String v77;
  void *v78;
  void *v79;
  uint64_t v80;
  unsigned __int8 v81;
  void *v82;
  uint64_t Attribute;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t (*v90)();
  Swift::OpaquePointer v91;
  _QWORD v92[2];
  _QWORD *v93;
  char *v94;
  char *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[2];
  uint64_t v106[3];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char *v112;
  UIImage_optional v113;

  v4 = v3;
  v93 = a1;
  v98 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v95 = (char *)v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = v6;
  MEMORY[0x1E0C80A78](v7, v8);
  v94 = (char *)v92 - v9;
  v11 = *(_QWORD *)v10;
  v12 = *(_QWORD *)(v10 + 8);
  v14 = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 24);
  v15 = *(unsigned __int8 *)(v10 + 32);
  v16 = *(char **)(v10 + 40);
  v100 = UIKitButtonAdaptor.resolvedOptions.getter(v17, v10);
  v18 = *(_QWORD *)(v3 + 112);
  v19 = *(_QWORD *)(v3 + 120);
  v20 = (uint64_t *)&v16[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action];
  v21 = *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action];
  *v20 = v18;
  v20[1] = v19;
  outlined copy of AppIntentExecutor?(v18);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
  v107 = v11;
  v108 = v12;
  v109 = v14;
  v110 = v13;
  v103 = v13;
  v22 = (char *)a3;
  v96 = v15;
  v111 = v15;
  v112 = v16;
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonAdaptor<A>, a3);
  v25 = type metadata accessor for UIViewRepresentableContext(0, a3, v23, v24);
  UIViewRepresentableContext.environment.getter(v25, v26, v106);
  v101 = v25;
  v102 = v11;
  v97 = v12;
  v104 = v14;
  if (v106[1])
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  v27 = v98;
  v28 = v94;
  swift_release_n();
  if (!v108)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v29 = v109;
  v30 = v110;
  if ((v107 != 13 || v108 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_12;
  swift_bridgeObjectRelease();
  if (v29)
  {
LABEL_13:
    v31 = v93;
    goto LABEL_14;
  }
  v31 = v93;
  if (!v30)
  {
    v32 = 1;
    goto LABEL_21;
  }
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a3 + 24) + 16))(&v107, *(_QWORD *)(a3 + 16));
  if ((v107 & 0x100) != 0)
  {
    v32 = 0;
  }
  else
  {
    v33 = 3;
    if (v107 != 1)
      v33 = 0;
    if (v107 == 4)
      v32 = 2;
    else
      v32 = v33;
  }
LABEL_21:
  objc_msgSend(v31, sel_setRole_, v32);
  v34 = *(_QWORD *)(v4 + 132);
  v35 = *(_BYTE *)(v4 + 140);
  v36 = &v16[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute];
  swift_beginAccess();
  *(_QWORD *)v36 = v34;
  v36[8] = v35;
  v37 = *(_QWORD *)(v4 + 48);
  LOBYTE(v34) = *(_BYTE *)(v4 + 56);
  outlined copy of Environment<Bool>.Content(v37, v34);
  v38 = specialized Environment.wrappedValue.getter(v37, v34);
  outlined consume of Environment<Bool>.Content(v37, v34);
  v16[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuControlGroupSize] = v38;
  v39 = *(_QWORD *)(v4 + 64);
  LOBYTE(v34) = *(_BYTE *)(v4 + 72);
  outlined copy of Environment<Bool>.Content(v39, v34);
  specialized Environment.wrappedValue.getter(v39, v34, &v107);
  outlined consume of Environment<Bool>.Content(v39, v34);
  *(_QWORD *)&v16[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_effectiveLabelStyle] = v107;
  v40 = *(void (**)(char *, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *v31) + 0x60);
  v41 = v16;
  v40(v16, &protocol witness table for Coordinator);
  v42 = *(void (**)(char *, uint64_t, char *))(v27 + 16);
  v42(v28, v4, v22);
  v43 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v44 = swift_allocObject();
  v45 = *((_QWORD *)v22 + 2);
  v98 = *((_QWORD *)v22 + 3);
  v46 = v98;
  v99 = v45;
  *(_QWORD *)(v44 + 16) = v45;
  *(_QWORD *)(v44 + 24) = v46;
  (*(void (**)(unint64_t, char *, char *))(v27 + 32))(v44 + v43, v28, v22);
  v94 = v41;
  v47 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v41[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged];
  v48 = *(_QWORD *)&v41[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged];
  *v47 = partial apply for closure #1 in UIKitButtonAdaptor.updateUIView(_:context:);
  v47[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v44;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v48);
  LOBYTE(v44) = *(_BYTE *)(v4 + 140);
  v49 = v95;
  v42(v95, v4, v22);
  if ((v44 & 1) != 0)
  {
    (*(void (**)(char *, char *))(v27 + 8))(v49, v22);
LABEL_25:
    v51 = v102;
    if ((objc_msgSend(v31, sel_showsMenuAsPrimaryAction) & 1) == 0)
      goto LABEL_28;
    v52 = 0;
    goto LABEL_27;
  }
  v50 = *((_QWORD *)v49 + 14);
  outlined copy of AppIntentExecutor?(v50);
  (*(void (**)(char *, char *))(v27 + 8))(v49, v22);
  if (v50)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v50);
    goto LABEL_25;
  }
  v81 = objc_msgSend(v31, sel_showsMenuAsPrimaryAction);
  v51 = v102;
  if ((v81 & 1) == 0)
  {
    v52 = 1;
LABEL_27:
    objc_msgSend(v31, sel_setShowsMenuAsPrimaryAction_, v52);
  }
LABEL_28:
  v95 = v22;
  v53 = v4 + *((int *)v22 + 21);
  v54 = v97;
  v107 = v51;
  v108 = v97;
  v109 = v104;
  v110 = v103;
  v55 = v96;
  v111 = v96;
  v56 = v94;
  v112 = v94;
  v57 = specialized ReferenceFileDocumentConfiguration.document.getter();
  v58 = v98;
  v59 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 32);
  swift_retain();
  v92[1] = v53;
  v59(v31, v57, v100, v99, v58);
  swift_release();
  v60 = *(_QWORD *)(v4 + 16);
  v93 = (_QWORD *)v4;
  v61 = *(_BYTE *)(v4 + 24);
  v62 = v31;
  outlined copy of Environment<Bool>.Content(v60, v61);
  specialized Environment.wrappedValue.getter(v60, v61, &v107);
  outlined consume of Environment<Bool>.Content(v60, v61);
  objc_msgSend(v31, sel_setPreferredMenuElementOrder_, qword_187BFF6C8[(char)v107]);
  v107 = v102;
  v108 = v54;
  v109 = v104;
  v110 = v103;
  v111 = v55;
  v112 = v56;
  UIViewRepresentableContext.environment.getter(v101, v63, v105);
  if (v105[1])
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    v64 = v31;
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    v65 = (uint64_t)v95;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    v65 = (uint64_t)v95;
    v64 = v62;
  }
  v66 = v93;
  swift_release_n();
  v67 = (unsigned __int16)v107 | (BYTE2(v107) << 16);
  if ((v107 & 0xFF00) != 0x200)
  {
    v68 = (_BYTE *)swift_allocObject();
    v68[16] = v67;
    v68[17] = BYTE1(v67) & 1;
    v68[18] = BYTE2(v67) & 1;
  }
  UIButton.pointerStyleProvider.setter();
  v69 = v66[10];
  v70 = *((_BYTE *)v66 + 88);
  outlined copy of Environment<Bool>.Content(v69, v70);
  specialized Environment.wrappedValue.getter(v69, v70, &v107);
  outlined consume of Environment<Bool>.Content(v69, v70);
  objc_msgSend(v64, sel_setSpringLoaded_, v107 == 1);
  if ((*((_BYTE *)v66 + 140) & 1) == 0)
  {
    if ((v100 & 1) != 0)
    {
      v73 = (*(uint64_t (**)(void *, uint64_t))(v98 + 56))(v64, v99);
      v74 = (uint64_t *)&v56[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle];
      *v74 = v73;
      v74[1] = v75;
    }
    else
    {
      v72 = &v56[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle];
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v72 + 1) = 0;
    }
    swift_bridgeObjectRelease();
    v76 = objc_msgSend(v64, sel_menu);

    if (!v76)
    {
      if ((UIKitButtonAdaptor.resolvedOptions.getter(v65, v71) & 0x80) != 0)
      {
        v82 = Coordinator.makeMenu()();
        objc_msgSend(v64, sel_setMenu_, v82);
        if (v82)
        {
          if ((v66[19] & 1) != 0
            || (Attribute = AGWeakAttributeGetAttribute(), (_DWORD)Attribute == *MEMORY[0x1E0CFED28]))
          {

          }
          else
          {
            MEMORY[0x1E0C80A78](Attribute, v84);
            v85 = v98;
            v92[-4] = v99;
            v92[-3] = v85;
            MEMORY[0x1E0C80A78](v86, v87);
            v90 = partial apply for closure #3 in UIKitButtonAdaptor.updateUIView(_:context:);
            v91._rawValue = v88;
            AGGraphMutateAttribute();

          }
        }
      }
      else
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
        v77._countAndFlagsBits = 0;
        v77._object = (void *)0xE000000000000000;
        v113.value.super.isa = 0;
        v113.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(MEMORY[0x1E0DEE9D8], v77, (Swift::String_optional)0, v113, 0, 0xFFFFFFFFFFFFFFFFLL, MEMORY[0x1E0DEE9D8], v91);
        v79 = v78;
        objc_msgSend(v64, sel_setMenu_, v78);

      }
      objc_msgSend(v64, sel_setChangesSelectionAsPrimaryAction_, ((unint64_t)UIKitButtonAdaptor.resolvedOptions.getter(v65, v80) >> 7) & 1);
      objc_msgSend(v64, sel_addTarget_action_forControlEvents_, v56, sel_menuActionTriggered_, 0x4000);
    }
  }
  return objc_msgSend(v64, sel_setSelected_, ((unint64_t)UIKitButtonAdaptor.resolvedOptions.getter(v65, v71) >> 8) & 1);
}

uint64_t closure #1 in UIKitButtonAdaptor.updateUIView(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t (**v10)(uint64_t);

  v8 = type metadata accessor for UIKitButtonAdaptor(0, a3, a4, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 64))(a1, a3, a4);
  v10 = (uint64_t (**)(uint64_t))(a2 + *(int *)(v8 + 92));
  if (*v10)
    return (*v10)(a1 & 1);
  return result;
}

uint64_t closure #2 in UIKitButtonAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  unsigned int *v34;
  uint64_t v35;
  _BYTE v37[4];
  int v38;
  uint64_t v39;

  v4 = a4;
  v38 = a4;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for UIPointerShape?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC1BA0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v37[-v8];
  v39 = type metadata accessor for UIPointerEffect();
  v10 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v11);
  v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for UIPointerShape();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = &v37[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  objc_msgSend(a1, sel_bounds, v17);
  ToolbarButtonHoverShape.adjustedRect(in:)(v4 & 0x1FF, v20, v21, v22, v23);
  *v19 = v24;
  v19[1] = v25;
  v19[2] = v26;
  v19[3] = v27;
  v19[4] = 0x4020000000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v19, *MEMORY[0x1E0DC1B88], v14);
  v28 = (void *)UIPointerEffect.preview.getter();
  v29 = objc_msgSend(v28, sel_view);

  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B78]), sel_init);
  v31 = (void *)UIPointerEffect.preview.getter();
  v32 = objc_msgSend(v31, sel_target);

  v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_parameters_target_, v29, v30, v32);
  *v13 = v33;
  v34 = (unsigned int *)MEMORY[0x1E0DC1E70];
  if ((v38 & 0x10100) != 0)
    v34 = (unsigned int *)MEMORY[0x1E0DC1E30];
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, *v34, v39);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPointerStyle);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v15 + 16))(v9, v19, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
  v35 = UIPointerStyle.init(effect:shape:)();
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v19, v14);
  return v35;
}

void *Coordinator.makeMenu()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  ValueMetadata *v6;
  uint64_t v7;
  UIMenuIdentifier_optional v8;
  void *v9;
  UIMenuElementSize v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  UIMenu *v17;
  void *v18;
  UIMenuElementSize v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  UIMenu *v26;
  int v27;
  Swift::OpaquePointer v29;
  UIMenuIdentifier_optional v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  UIImage_optional v34;
  UIImage_optional v35;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute;
  v3 = swift_beginAccess();
  v5 = 0;
  if ((*(_BYTE *)(v2 + 8) & 1) == 0)
  {
    MEMORY[0x1E0C80A78](v3, v4);
    static Update.ensure<A>(_:)();
    if (*(_QWORD *)(v32 + 16))
    {
      v6 = *(ValueMetadata **)(v1
                             + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_effectiveLabelStyle);
      if (v6)
      {
        if (v6 == &type metadata for TitleAndIconLabelStyle)
          v7 = 16;
        else
          v7 = 16 * (v6 == &type metadata for IconOnlyLabelStyle);
      }
      else
      {
        v7 = 0;
      }
      static Semantics.v6.getter();
      if ((isLinkedOnOrAfter(_:)() & 1) != 0)
        v8.value = (UIMenuIdentifier)v7;
      else
        v8.value = 0;
      v9 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle + 8);
      v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle);
      if (v9)
      {
        v30.value = v8.value;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
        v10 = MEMORY[0x1E0DEE9D8];
        v33[0] = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        specialized Dictionary.init(dictionaryLiteral:)(v10);
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v11 = type metadata accessor for MenuVisitor.MenuStackGroup();
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
        v13 = (v12 + 32) & ~v12;
        v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
        if (one-time initialization token for empty != -1)
          swift_once();
        v15 = __swift_project_value_buffer(v11, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15, v14 + v13, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
        MenuVisitor.visit(_:uniqueNames:)(v32, v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16._countAndFlagsBits = v31;
        v16._object = v9;
        v34.value.super.isa = 0;
        v34.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v17, v16, (Swift::String_optional)0, v34, v30, 0xFFFFFFFFFFFFFFFFLL, v10, v29);
      }
      else
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
        v19 = MEMORY[0x1E0DEE9D8];
        v33[0] = MEMORY[0x1E0DEE9D8];
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v20 = type metadata accessor for MenuVisitor.MenuStackGroup();
        v21 = *(unsigned __int8 *)(*(_QWORD *)(v20 - 8) + 80);
        v22 = (v21 + 32) & ~v21;
        v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_187BF9830;
        if (one-time initialization token for empty != -1)
          swift_once();
        v24 = __swift_project_value_buffer(v20, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, v23 + v22, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
        MenuVisitor.visit(_:uniqueNames:)(v32, v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v25._countAndFlagsBits = 0;
        v25._object = (void *)0xE000000000000000;
        v35.value.super.isa = 0;
        v35.is_nil = 0;
        UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v26, v25, (Swift::String_optional)(unint64_t)v31, v35, v8, 0xFFFFFFFFFFFFFFFFLL, v19, v29);
      }
      v5 = v18;
      v27 = *(unsigned __int8 *)(v1
                               + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuControlGroupSize);
      if (v27 != 2)
        objc_msgSend(v18, sel_setPreferredElementSize_, (v27 & 1) == 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v5;
}

uint64_t UIKitButtonAdaptor._identifiedViewTree(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 48))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t static UIKitButtonAdaptor._modifyBridgedViewInputs(_:)()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityNodesKey> and conformance _AnyPreferenceKey<A>();
  return PreferenceKeys.add(_:)();
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitButtonAdaptor<A>@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = UIKitButtonAdaptor.makeCoordinator()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance UIKitButtonAdaptor<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized UIKitButtonAdaptor.sizeThatFits(_:uiView:context:)(a1, a2 & 1, a3, a4 & 1, a5, a7);
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance UIKitButtonAdaptor<A>()
{
  return static UIKitButtonAdaptor._modifyBridgedViewInputs(_:)();
}

uint64_t Coordinator.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged));
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 8);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_F1E9485F33A623EEFA647AA5EC4AE09411Coordinator_configuration + 24);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  return swift_release();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of _VariadicView_Children(v0 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children);
  return swift_bridgeObjectRelease();
}

{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;

  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration + 64);
  v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUIP33_8AA246B2E0E916EFA5AD706DCC8A0FE811Coordinator_configuration
                          + 72);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return outlined consume of Environment<Color?>.Content(v1, v2);
}

id Coordinator.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_sheetBridgeToken];
  if (v2)
  {
    v3 = (void *)objc_opt_self();
    swift_unknownObjectRetain();
    v4 = objc_msgSend(v3, sel_defaultCenter);
    objc_msgSend(v4, sel_removeObserver_, v2);
    swift_unknownObjectRelease();

  }
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_inspectorBridgeToken];
  if (v5)
  {
    v6 = (void *)objc_opt_self();
    swift_unknownObjectRetain();
    v7 = objc_msgSend(v6, sel_defaultCenter);
    objc_msgSend(v7, sel_removeObserver_, v5);
    swift_unknownObjectRelease();

  }
  v9.receiver = v0;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_dealloc);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

{
  return NSSwiftAttributedString.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for Coordinator);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t Coordinator.setupNotifications(_:)()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  void (*v16)(uint64_t);
  uint64_t v17;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for willDismiss != -1)
    swift_once();
  v2 = static SheetBridgeNotifications.willDismiss;
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = partial apply for closure #1 in Coordinator.setupNotifications(_:);
  v17 = v3;
  v4 = MEMORY[0x1E0C809B0];
  v12 = MEMORY[0x1E0C809B0];
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v15 = &block_descriptor_0;
  v5 = _Block_copy(&v12);
  swift_release();
  v6 = objc_msgSend(v1, sel_addObserverForName_object_queue_usingBlock_, v2, 0, 0, v5);
  _Block_release(v5);
  if (one-time initialization token for willPresent != -1)
    swift_once();
  v7 = static SheetInspectorBridgeNotifications.willPresent;
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v16 = partial apply for closure #1 in Coordinator.setupNotifications(_:);
  v17 = v8;
  v12 = v4;
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v15 = &block_descriptor_57;
  v9 = _Block_copy(&v12);
  swift_release();
  v10 = objc_msgSend(v1, sel_addObserverForName_object_queue_usingBlock_, v7, 0, 0, v9);

  _Block_release(v9);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_sheetBridgeToken) = v6;
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_inspectorBridgeToken) = v10;
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in Coordinator.makeMenu()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  if (AGGraphGetWeakValue())
    result = swift_bridgeObjectRetain();
  else
    result = MEMORY[0x1E0DEE9D8];
  *a1 = result;
  return result;
}

uint64_t Coordinator.menuWillShow(interaction:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int Attribute;
  int v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute;
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 8) & 1) != 0)
    return swift_endAccess();
  Attribute = AGWeakAttributeGetAttribute();
  v4 = *MEMORY[0x1E0CFED28];
  result = swift_endAccess();
  if (Attribute != v4)
  {
    MEMORY[0x18D75B908](result);
    v5 = v0 + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector;
    if ((*(_BYTE *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector
                   + 4) & 1) != 0)
    {
      v6 = (id)AGGraphGetAttributeSubgraph();
      AGGraphClearUpdate();
      v7 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      v8 = AGCreateWeakAttribute();
      swift_unknownObjectWeakInit();
      v18 = v8;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction();
      v9 = Attribute.init<A>(body:value:flags:update:)();
      outlined destroy of UpdateContextMenuInteraction((uint64_t)v17);
      *(_DWORD *)v5 = v9;
      *(_BYTE *)(v5 + 4) = 0;
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
    }
    else
    {
      static AGAttributeFlags.transactional.getter();
      AGGraphGetFlags();
      v10 = AGGraphSetFlags();
      MEMORY[0x1E0C80A78](v10, v11);
      MEMORY[0x1E0C80A78](v12, v13);
      AGGraphMutateAttribute();
    }
    v14 = *(_QWORD *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged);
    if (v14)
    {
      v15 = *(_QWORD *)(v0
                      + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged
                      + 8);
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v14;
      *(_QWORD *)(v16 + 24) = v15;
      swift_retain_n();
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
    }
    return static Update.end()();
  }
  return result;
}

void closure #1 in Coordinator.setupNotifications(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x18D760234](v2);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_contextMenuInteraction);

    objc_msgSend(v5, sel_dismissMenu);
  }
}

uint64_t type metadata accessor for Coordinator()
{
  return objc_opt_self();
}

{
  return objc_opt_self();
}

{
  return objc_opt_self();
}

{
  return objc_opt_self();
}

{
  return objc_opt_self();
}

uint64_t type metadata accessor for UIKitIconPreferringButton()
{
  return objc_opt_self();
}

uint64_t UIKitButtonBase.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI15UIKitButtonBase_delegate + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

id UIKitButtonBase.contextMenuInteraction(_:willEndFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  v7 = MEMORY[0x18D760234](&v3[OBJC_IVAR____TtC7SwiftUI15UIKitButtonBase_delegate]);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)(v7
                   + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged);
    if (v9)
    {
      v10 = *(_QWORD *)(v7
                      + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged
                      + 8);
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v9;
      *(_QWORD *)(v11 + 24) = v10;
      swift_retain_n();
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
    }
    if ((*(_BYTE *)(v8
                   + OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector
                   + 4) & 1) == 0)
    {
      static AGAttributeFlags.transactional.getter();
      AGGraphGetFlags();
      AGGraphSetFlags();
    }
    swift_unknownObjectRelease();
  }
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for UIKitButtonBase();
  return objc_msgSendSuper2(&v13, sel_contextMenuInteraction_willEndForConfiguration_animator_, a1, a2, a3);
}

id UIKitButtonBase.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitButtonBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitButtonBase()
{
  return objc_opt_self();
}

void UIKitButtonContentHost.__allocating_init(rootView:)()
{
  specialized UIKitButtonContentHost.__allocating_init(rootView:)();
}

uint64_t sub_186FC9248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 2448) - 8) + 8))(v1);
  return a1;
}

void @objc UIKitButtonContentHost.init(coder:)()
{
  specialized UIKitButtonContentHost.init(coder:)();
}

uint64_t sub_186FC92A4(uint64_t a1)
{
  void *v1;
  id v3;

  v3 = v1;
  return a1;
}

void UIKitButtonContentHost.modifyViewInputs(_:)(uint64_t a1)
{
  _UIHostingView.modifyViewInputs(_:)(a1);
}

uint64_t sub_186FC92D8()
{
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  return PropertyList.subscript.setter();
}

id UIKitButtonContentHost.hitTest(_:with:)(void *a1, double a2, double a3)
{
  void *v3;
  uint64_t ObjectType;
  objc_class *v8;
  objc_super v10;

  ObjectType = swift_getObjectType();
  if (!a1)
    return 0;
  v8 = (objc_class *)ObjectType;
  if (objc_msgSend(a1, sel_type) != (id)11)
    return 0;
  v10.receiver = v3;
  v10.super_class = v8;
  return objc_msgSendSuper2(&v10, sel_hitTest_withEvent_, a1, a2, a3);
}

id @objc UIKitButtonContentHost.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;

  v9 = a5;
  v10 = a1;
  v11 = UIKitButtonContentHost.hitTest(_:with:)(a5, a2, a3);

  return v11;
}

uint64_t type metadata accessor for UIKitButtonContentHost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitButtonContentHost);
}

uint64_t type metadata completion function for ViewBasedUIButton()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for UIKitButtonAdaptorContent.role.getter in conformance PlatformItemContent@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *v3;
  char v4;

  v3 = (char *)(v2 + *(int *)(result + 20));
  v4 = *v3;
  LOBYTE(v3) = v3[1];
  *a2 = v4;
  a2[1] = (_BYTE)v3;
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.makeUIButton(options:) in conformance PlatformItemContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = type metadata accessor for UIButton.Configuration();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIKitIconPreferringButton();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + *(int *)(a2 + 24), v4);
  return UIButton.init(configuration:primaryAction:)();
}

uint64_t protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance PlatformItemContent()
{
  return 0;
}

double protocol witness for UIKitButtonAdaptorContent._identifiedViewTree(in:) in conformance PlatformItemContent@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 160) = 2;
  return result;
}

void ViewContent.makeUIButton(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  type metadata accessor for ViewBasedUIButton(0, v6, v7, a4);
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_buttonWithType_, *(_QWORD *)(v4 + *(int *)(a2 + 40)));
  v10 = objc_allocWithZone((Class)type metadata accessor for UIKitButtonContentHost(0, v6, v7, v9));
  specialized UIKitButtonContentHost.init(rootView:)();
}

char *sub_186FC9604(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  _QWORD *v12;

  lazy protocol witness table accessor for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options();
  if ((OptionSet<>.contains(_:)() & 1) != 0)
  {
    v5 = *(_QWORD *)((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x68));
    swift_beginAccess();
    v6 = *(unsigned __int8 *)(v5 + 361);
    *(_BYTE *)(v5 + 361) = v6 | 2;
    if ((v6 | 2) != v6)
    {
      swift_retain();
      GraphHost.uninstantiate(immediately:)(0);
      swift_release();
    }
  }
  swift_retain();
  static _ProposedSize.unspecified.getter();
  v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v2;
  v8[3] = v3;
  v8[4] = v7;
  swift_beginAccess();
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer, MEMORY[0x1E0CE4E30], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE60A8]);
  ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
  swift_endAccess();
  swift_release();
  swift_release();
  v9 = *(void **)&v1[direct field offset for ViewBasedUIButton.contentHost];
  *(_QWORD *)&v1[direct field offset for ViewBasedUIButton.contentHost] = a1;
  v10 = a1;

  v11 = objc_msgSend(v1, sel__effectiveContentView);
  objc_msgSend(v11, sel_addSubview_, v10);
  v12 = v10;
  objc_msgSend(v11, sel_bounds);
  objc_msgSend(v12, sel_setFrame_);

  objc_msgSend(v12, sel_setAutoresizingMask_, 18);
  return v1;
}

void closure #1 in ViewContent.makeUIButton(options:)(double *a1, double *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;

  if (*a1 != *a2 || a1[1] != a2[1])
  {
    v4 = a3 + 16;
    swift_beginAccess();
    v5 = (void *)MEMORY[0x18D760234](v4);
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, sel_invalidateIntrinsicContentSize);

    }
  }
}

void ViewContent.updateUIButton(_:transaction:options:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  void *v17;
  id v18;
  _QWORD v19[4];

  v5 = v4;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v5, v13, v10);
  if (objc_msgSend(a1, sel_buttonType) == *(id *)&v12[*(int *)(a4 + 40)])
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
    v19[0] = a3;
    v19[3] = 1;
    lazy protocol witness table accessor for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options();
    if ((OptionSet<>.contains(_:)() & 1) != 0)
    {
      v14 = *(_QWORD **)&a1[direct field offset for ViewBasedUIButton.contentHost];
      if (v14)
      {
        v15 = *(_QWORD *)((char *)v14 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v14) + 0x68));
        swift_beginAccess();
        v16 = *(unsigned __int8 *)(v15 + 361);
        *(_BYTE *)(v15 + 361) = v16 | 2;
        if ((v16 | 2) != v16)
        {
          swift_retain();
          GraphHost.uninstantiate(immediately:)(0);
          swift_release();
        }
      }
    }
    v17 = *(void **)&a1[direct field offset for ViewBasedUIButton.contentHost];
    if (v17)
    {
      v18 = v17;
      _UIHostingView.setRootView(_:transaction:)(v5);

    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t ViewContent._identifiedViewTree(in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v5;
  uint64_t v6;
  id v7;
  int8x16_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int8x16_t v14[10];
  char v15;
  _BYTE v16[168];

  v5 = *(void **)(result + direct field offset for ViewBasedUIButton.contentHost);
  if (v5)
  {
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
    v7 = v5;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    ViewRendererHost.preferenceValue<A>(_:)();
    outlined init with copy of _IdentifiedViewTree((uint64_t)v16, (uint64_t)v14);
    if (v15 == 2
      && (v8 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v14[2], v14[6]), vorrq_s8(v14[4], v14[8])), vorrq_s8(vorrq_s8(v14[3], v14[7]), vorrq_s8(v14[5], v14[9]))), vorrq_s8(v14[0], v14[1])), !*(_QWORD *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))))
    {

      outlined destroy of _IdentifiedViewTree((uint64_t)v14);
      v9 = (char *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      outlined destroy of _IdentifiedViewTree((uint64_t)v14);
      outlined init with copy of _IdentifiedViewTree((uint64_t)v16, (uint64_t)v14);
      v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v11 = *((_QWORD *)v9 + 2);
      v10 = *((_QWORD *)v9 + 3);
      if (v11 >= v10 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v11 + 1;
      outlined init with take of _IdentifiedViewTree((__int128 *)v14[0].i8, (uint64_t)&v9[168 * v11 + 32]);

    }
    v12 = *((_QWORD *)v9 + 2);
    result = outlined destroy of _IdentifiedViewTree((uint64_t)v16);
    if (v12)
    {
      v13 = 1;
      *(_QWORD *)a4 = v9;
    }
    else
    {
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(a4 + 152) = 0;
      *(_OWORD *)(a4 + 136) = 0u;
      *(_OWORD *)(a4 + 120) = 0u;
      *(_OWORD *)(a4 + 104) = 0u;
      *(_OWORD *)(a4 + 88) = 0u;
      *(_OWORD *)(a4 + 72) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 24) = 0u;
      v13 = 2;
      *(_OWORD *)(a4 + 8) = 0u;
      *(_QWORD *)a4 = 0;
    }
  }
  else
  {
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    v13 = 2;
  }
  *(_BYTE *)(a4 + 160) = v13;
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.role.getter in conformance ViewContent<A>@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *v3;
  char v4;

  v3 = (char *)(v2 + *(int *)(result + 36));
  v4 = *v3;
  LOBYTE(v3) = v3[1];
  *a2 = v4;
  a2[1] = (_BYTE)v3;
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance ViewContent<A>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return specialized ViewContent.sizeThatFits(_:uiButton:)(a1, a2, a3, a4);
}

uint64_t ButtonStyleContent.resolvedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char v12;
  char v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t KeyPath;
  char *v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t IsVisionEnabled;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v26 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = type metadata accessor for ResolvedButtonStyleBody(0, v5, v6, a2);
  v25 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v24 - v9;
  v11 = (char *)(v3 + *(int *)(a1 + 52));
  v12 = *v11;
  v13 = v11[1];
  v14 = (char *)(v3 + *(int *)(a1 + 64));
  v15 = *v14;
  v16 = *((_QWORD *)v14 + 1);
  LOBYTE(v27) = v15;
  v28 = v16;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.wrappedValue.getter();
  LOBYTE(v27) = v12;
  BYTE1(v27) = v13;
  BYTE2(v27) = v29;
  ButtonStyle.resolvedBody(configuration:)((uint64_t)&v27, v5, v6, (uint64_t)v10);
  KeyPath = swift_getKeyPath();
  v18 = (char *)(v3 + *(int *)(a1 + 68));
  v19 = *v18;
  v20 = *((_QWORD *)v18 + 1);
  LOBYTE(v27) = v19;
  v28 = v20;
  State.wrappedValue.getter();
  if (v29)
    v21 = 1;
  else
    v21 = 2;
  v27 = KeyPath;
  LOBYTE(v28) = v21;
  IsVisionEnabled = type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  MEMORY[0x18D75B4AC](&v27, v7, IsVisionEnabled, &protocol witness table for ResolvedButtonStyleBody<A>);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v7);
}

void ButtonStyleContent.base.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _BYTE *v20;
  _QWORD v21[2];

  v5 = (char *)(v2 + *(int *)(a1 + 52));
  v6 = *v5;
  v7 = v5[1];
  v8 = v2 + *(int *)(a1 + 60);
  v9 = *(_QWORD *)v8;
  v10 = *(_BYTE *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v8, v10);
  v11 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool>.Content(v9, v10);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  type metadata accessor for ResolvedButtonStyleBody(255, v12, v14, v15);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v16 = type metadata accessor for ModifiedContent();
  v21[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v21[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v21);
  v19 = (int *)type metadata accessor for ViewContent(0, v16, v17, v18);
  v20 = (_BYTE *)(a2 + v19[9]);
  *v20 = v6;
  v20[1] = v7;
  *(_QWORD *)(a2 + v19[10]) = 0;
  *(_BYTE *)(a2 + v19[11]) = v11 & 1;
  closure #1 in ButtonStyleContent.base.getter(v2, v12, v13, v14);
}

void closure #1 in ButtonStyleContent.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ResolvedButtonStyleBody(255, a2, a4, a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  MEMORY[0x1E0C80A78](v6, v7);
  type metadata accessor for ButtonStyleContent();
}

uint64_t sub_186FCA064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t IsVisionEnabled;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  ButtonStyleContent.resolvedBody.getter(a1, a4, v6);
  IsVisionEnabled = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v9 - 128) = &protocol witness table for ResolvedButtonStyleBody<A>;
  *(_QWORD *)(v9 - 120) = IsVisionEnabled;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v9 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v6, v5, v11);
  v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v6, v5);
  static ViewBuilder.buildBlock<A>(_:)(v7, v5, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)(v7, v5);
}

void ButtonStyleContent.makeUIButton(options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  type metadata accessor for ResolvedButtonStyleBody(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v5 = type metadata accessor for ModifiedContent();
  v12[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v12[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v12);
  v8 = type metadata accessor for ViewContent(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  ButtonStyleContent.base.getter(a2, (uint64_t)v12 - v10 + 32);
}

void sub_186FCA1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  ViewContent.makeUIButton(options:)(v4, v5, a3, a4);
}

uint64_t sub_186FCA1D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v8 = (char *)(v1 + *(int *)(v2 + 64));
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  *(_BYTE *)(v6 - 120) = v9;
  *(_QWORD *)(v6 - 112) = v10;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  v11 = *(_QWORD *)(v6 - 96);
  v12 = *(_BYTE *)(v6 - 88);
  v13 = a1 + direct field offset for ViewBasedUIButton.isPressed;
  v14 = *(_QWORD *)(a1 + direct field offset for ViewBasedUIButton.isPressed);
  v15 = *(_QWORD *)(a1 + direct field offset for ViewBasedUIButton.isPressed + 8);
  *(_QWORD *)v13 = *(_QWORD *)(v6 - 104);
  *(_QWORD *)(v13 + 8) = v11;
  *(_BYTE *)(v13 + 16) = v12;
  outlined consume of Binding<NavigationSplitViewColumn>?(v14, v15);
  return a1;
}

void ButtonStyleContent.updateUIButton(_:transaction:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  type metadata accessor for ResolvedButtonStyleBody(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 32), a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v5 = type metadata accessor for ModifiedContent();
  v11[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v11[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v11);
  v8 = type metadata accessor for ViewContent(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  ButtonStyleContent.base.getter(a4, (uint64_t)v11 - v10);
}

uint64_t sub_186FCA33C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  ViewContent.updateUIButton(_:transaction:options:)(v2, v1, v0, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
}

void ButtonStyleContent.sizeThatFits(_:uiButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  type metadata accessor for ResolvedButtonStyleBody(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 32), a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v5 = type metadata accessor for ModifiedContent();
  v12[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v12[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v12);
  v8 = type metadata accessor for ViewContent(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  ButtonStyleContent.base.getter(a3, (uint64_t)v12 - v10 + 16);
}

uint64_t sub_186FCA458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 - 128) = v9;
  *(_BYTE *)(v12 - 120) = v10;
  *(_QWORD *)(v12 - 112) = v11;
  *(_BYTE *)(v12 - 104) = v5;
  v13 = specialized ViewContent.sizeThatFits(_:uiButton:)(v12 - 128, v4, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v6);
  return v13;
}

void ButtonStyleContent._identifiedViewTree(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  type metadata accessor for ResolvedButtonStyleBody(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v5 = type metadata accessor for ModifiedContent();
  v11[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v11[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v11);
  v8 = type metadata accessor for ViewContent(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  ButtonStyleContent.base.getter(a2, (uint64_t)v11 - v10);
}

uint64_t sub_186FCA580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  ViewContent._identifiedViewTree(in:)(v4, v6, a4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v6);
}

void ButtonStyleContent.menuTitle(uiButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  type metadata accessor for ResolvedButtonStyleBody(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v5 = type metadata accessor for ModifiedContent();
  v11[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v11[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v11);
  v8 = type metadata accessor for ViewContent(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  ButtonStyleContent.base.getter(a2, (uint64_t)v11 - v10);
}

uint64_t sub_186FCA67C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = specialized ViewContent.menuTitle(uiButton:)(v0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return v4;
}

void ButtonStyleContent.updateMenuPresentationState(isPresented:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  type metadata accessor for ResolvedButtonStyleBody(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 32), a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v5 = type metadata accessor for ModifiedContent();
  v12[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v12[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v12);
  v8 = type metadata accessor for ViewContent(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  ButtonStyleContent.base.getter(a2, (uint64_t)v12 - v10);
}

uint64_t sub_186FCA778()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  v8 = *(_QWORD *)(v1 + *(int *)(v2 + 68) + 8);
  *(_BYTE *)(v6 - 65) = v0;
  if (v8)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for UIKitButtonAdaptorContent.role.getter in conformance ButtonStyleContent<A, B>@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char *v3;
  char v4;

  v3 = (char *)(v2 + *(int *)(result + 52));
  v4 = *v3;
  LOBYTE(v3) = v3[1];
  *a2 = v4;
  a2[1] = (_BYTE)v3;
  return result;
}

void protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance ButtonStyleContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ButtonStyleContent.sizeThatFits(_:uiButton:)(a1, a2, a3, a4);
}

uint64_t @objc ViewBasedUIButton.isHighlighted.getter(void *a1)
{
  id v1;
  unsigned __int8 v2;

  v1 = a1;
  v2 = ViewBasedUIButton.isHighlighted.getter();

  return v2 & 1;
}

id ViewBasedUIButton.isHighlighted.getter()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_isHighlighted);
}

void @objc ViewBasedUIButton.isHighlighted.setter(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  ViewBasedUIButton.isHighlighted.setter(a3);

}

void ViewBasedUIButton.isHighlighted.setter(char a1)
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v3, sel_setHighlighted_, a1 & 1);
  ViewBasedUIButton.isHighlighted.didset();
}

void ViewBasedUIButton.isHighlighted.didset()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  objc_class *ObjectType;
  uint64_t v8;
  objc_super v9;

  v1 = &v0[direct field offset for ViewBasedUIButton.isPressed];
  v2 = *(_QWORD *)&v0[direct field offset for ViewBasedUIButton.isPressed + 8];
  if (v2)
  {
    v3 = v0;
    v4 = *(_QWORD *)v1;
    v5 = v1[16] & 1;
    swift_retain();
    swift_retain();
    v9.receiver = v3;
    v9.super_class = (Class)swift_getObjectType();
    objc_msgSendSuper2(&v9, sel_isHighlighted);
    v6 = static Animation.coreAnimationDefault(duration:)();
    ObjectType = (objc_class *)swift_getObjectType();
    v9.receiver = v3;
    v9.super_class = ObjectType;
    LOBYTE(v3) = objc_msgSendSuper2(&v9, sel_isHighlighted);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v4;
    *(_QWORD *)(v8 + 32) = v2;
    *(_BYTE *)(v8 + 40) = v5;
    *(_BYTE *)(v8 + 41) = (_BYTE)v3;
    swift_retain();
    swift_retain();
    swift_retain();
    onNextMainRunLoop(do:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in closure #1 in ViewBasedUIButton.isHighlighted.didset()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

double @objc ViewBasedUIButton.intrinsicContentSize.getter(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  ViewBasedUIButton.intrinsicContentSize.getter();
  v3 = v2;

  return v3;
}

id ViewBasedUIButton.intrinsicContentSize.getter()
{
  char *v0;
  void *v1;
  objc_super v3;

  v1 = *(void **)&v0[direct field offset for ViewBasedUIButton.contentHost];
  if (v1)
    return objc_msgSend(v1, sel_intrinsicContentSize);
  v3.receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v3, sel_intrinsicContentSize);
}

id ViewBasedUIButton._baselineOffsets(at:)(double a1, double a2)
{
  char *v2;
  void *v5;
  objc_super v7;

  v5 = *(void **)&v2[direct field offset for ViewBasedUIButton.contentHost];
  if (v5)
    return objc_msgSend(v5, sel__baselineOffsetsAtSize_, a1, a2);
  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v7, sel__baselineOffsetsAtSize_, a1, a2);
}

double @objc ViewBasedUIButton._baselineOffsets(at:)(void *a1, double a2, double a3)
{
  id v5;
  double v6;
  double v7;

  v5 = a1;
  ViewBasedUIButton._baselineOffsets(at:)(a2, a3);
  v7 = v6;

  return v7;
}

uint64_t @objc ViewBasedUIButton.isAccessibilityElement.getter()
{
  return 0;
}

Class @objc ViewBasedUIButton.automationElements.getter(void *a1)
{
  id v1;
  uint64_t v2;
  NSArray v3;

  v1 = a1;
  v2 = ViewBasedUIButton.automationElements.getter();

  if (v2)
  {
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.isa = 0;
  }
  return v3.super.isa;
}

uint64_t ViewBasedUIButton.automationElements.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(v0 + direct field offset for ViewBasedUIButton.contentHost);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_automationElements);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

void ViewBasedUIButton.didUpdateFocus(in:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  objc_class *ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = *v2;
  v7 = *MEMORY[0x1E0DEEDD8];
  v12.receiver = v2;
  v12.super_class = ObjectType;
  objc_msgSendSuper2(&v12, sel_didUpdateFocusInContext_withAnimationCoordinator_, a1, a2);
  v9 = *(void **)((char *)v2 + direct field offset for ViewBasedUIButton.contentHost);
  if (v9)
  {
    v10 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v7 & v6) + 0x70), *(_QWORD *)((v7 & v6) + 0x78), v8);
    v11 = v9;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v10);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
}

void @objc ViewBasedUIButton.didUpdateFocus(in:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  ViewBasedUIButton.didUpdateFocus(in:with:)((uint64_t)v6, (uint64_t)v7);

}

id ViewBasedUIButton.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_class *ObjectType;
  char *v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v4[direct field offset for ViewBasedUIButton.contentHost] = 0;
  v10 = &v4[direct field offset for ViewBasedUIButton.isPressed];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a1, a2, a3, a4);
}

id @objc ViewBasedUIButton.init(frame:)(double a1, double a2, double a3, double a4)
{
  return ViewBasedUIButton.init(frame:)(a1, a2, a3, a4);
}

id ViewBasedUIButton.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[direct field offset for ViewBasedUIButton.contentHost] = 0;
  v4 = &v1[direct field offset for ViewBasedUIButton.isPressed];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

id @objc ViewBasedUIButton.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return ViewBasedUIButton.init(coder:)(a3);
}

uint64_t ViewBasedUIButton.__ivar_destroyer()
{
  uint64_t v0;

  return outlined consume of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(v0 + direct field offset for ViewBasedUIButton.isPressed), *(_QWORD *)(v0 + direct field offset for ViewBasedUIButton.isPressed + 8));
}

uint64_t @objc ViewBasedUIButton.__ivar_destroyer(uint64_t a1)
{

  return outlined consume of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(a1 + direct field offset for ViewBasedUIButton.isPressed), *(_QWORD *)(a1 + direct field offset for ViewBasedUIButton.isPressed + 8));
}

uint64_t type metadata accessor for ViewBasedUIButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewBasedUIButton);
}

ValueMetadata *type metadata accessor for BridgedPopUpButtonPreferenceKey()
{
  return &type metadata for BridgedPopUpButtonPreferenceKey;
}

uint64_t getEnumTagSinglePayload for UIKitButtonStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186FCB058 + 4 * byte_187BFE7A0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for UIKitButtonStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for UIKitButtonStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitButtonStyleModifier);
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitSystemButtonConfigurationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for UIButton.Configuration();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    LOBYTE(v6) = v10[8];
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v10, v6);
    *(_QWORD *)v9 = v11;
    v9[8] = v6;
  }
  return a1;
}

uint64_t destroy for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_BYTE *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  LOBYTE(a2) = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v9, a2);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = a2;
  return a1;
}

uint64_t assignWithCopy for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  LOBYTE(a2) = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v9, a2);
  v11 = *(_QWORD *)v8;
  v12 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = a2;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t initializeWithTake for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  LOBYTE(v9) = *((_BYTE *)v9 + 8);
  v11 = *(_QWORD *)v8;
  v12 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = (_BYTE)v9;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186FCB540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UIButton.Configuration();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186FCB5C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UIButton.Configuration();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for UIKitSystemButtonConfigurationModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSystemButtonConfigurationModifier);
}

uint64_t type metadata completion function for UIKitSystemButtonConfigurationModifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UIButton.Configuration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for UIKitMenuButton()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for UIKitMenuButton(_OWORD *a1, unint64_t *a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  if ((v10 | v7) > 7
    || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || ((v11 + ((v8 + v10 + ((v7 + 18) & ~v7)) & ~v10) + 9) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v14 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)));
  }
  else
  {
    v15 = ~v7;
    v27 = ~v10;
    v28 = *(_QWORD *)(a3 + 24);
    if (*a2 < 0xFFFFFFFF)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v16 = a2[1];
      *(_QWORD *)v4 = *a2;
      *((_QWORD *)v4 + 1) = v16;
      swift_retain();
    }
    *((_BYTE *)v4 + 16) = *((_BYTE *)a2 + 16);
    *((_BYTE *)v4 + 17) = *((_BYTE *)a2 + 17);
    v17 = (uint64_t)a2 + v7;
    v18 = ((unint64_t)v4 + v7 + 18) & v15;
    v19 = (v17 + 18) & v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v18, v19, v5);
    v20 = (v18 + v8 + v10) & v27;
    v21 = (v19 + v8 + v10) & v27;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v20, v21, v28);
    v22 = (_BYTE *)(v20 + v11);
    *v22 = *(_BYTE *)(v21 + v11);
    v22[1] = *(_BYTE *)(v21 + v11 + 1);
    v23 = (v20 + v11 + 9) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v21 + v11 + 9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v24 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
      return v4;
    }
    v25 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *(_QWORD *)(v23 + 8) = v25;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for UIKitMenuButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  if (*a1 >= 0xFFFFFFFFuLL)
    swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  result = (*(uint64_t (**)(unint64_t))(v7 + 8))(v8);
  if (*(_QWORD *)((*(_QWORD *)(v7 + 64) + v8 + 9) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain();
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 18 + a1) & ~v8;
  v10 = (v8 + 18 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v15, v16);
  v17 = *(_QWORD *)(v12 + 64);
  v18 = (_BYTE *)(v15 + v17);
  v19 = v16 + v17;
  *v18 = *(_BYTE *)(v16 + v17);
  v18[1] = *(_BYTE *)(v16 + v17 + 1);
  v20 = (v15 + v17 + 9) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v19 + 9) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v21 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v22 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = v22;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v8;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 18 + a1) & ~v10;
  v12 = (v10 + 18 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v13 + v15;
  v17 = (v16 + v11) & ~v15;
  v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v17, v18);
  v19 = *(_QWORD *)(v14 + 64);
  v20 = (_BYTE *)(v17 + v19);
  v21 = (_BYTE *)(v18 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  v22 = (_QWORD *)((unint64_t)(v20 + 9) & 0xFFFFFFFFFFFFFFF8);
  v23 = (unint64_t *)((unint64_t)(v21 + 9) & 0xFFFFFFFFFFFFFFF8);
  v24 = *v23;
  if (*v22 < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      v26 = v23[1];
      *v22 = v24;
      v22[1] = v26;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    return a1;
  }
  if (v24 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v25 = v23[1];
  *v22 = v24;
  v22[1] = v25;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 18 + a1) & ~v7;
  v9 = (v7 + 18 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v10 + v12;
  v14 = (v13 + v8) & ~v12;
  v15 = (v13 + v9) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v14, v15);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = (_BYTE *)(v14 + v16);
  v18 = v15 + v16;
  *v17 = *(_BYTE *)(v15 + v16);
  v17[1] = *(_BYTE *)(v15 + v16 + 1);
  v19 = (v14 + v16 + 9) & 0xFFFFFFFFFFFFFFF8;
  v20 = (uint64_t *)((v18 + 9) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  if ((unint64_t)*v20 < 0xFFFFFFFF)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    v22 = v20[1];
    *(_QWORD *)v19 = v21;
    *(_QWORD *)(v19 + 8) = v22;
  }
  return a1;
}

uint64_t assignWithTake for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v8;
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 18 + a1) & ~v10;
  v12 = (v10 + 18 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v13 + v15;
  v17 = (v16 + v11) & ~v15;
  v18 = (v16 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v17, v18);
  v19 = *(_QWORD *)(v14 + 64);
  v20 = (_BYTE *)(v17 + v19);
  v21 = (_BYTE *)(v18 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  v22 = (_QWORD *)((unint64_t)(v20 + 9) & 0xFFFFFFFFFFFFFFF8);
  v23 = (unint64_t *)((unint64_t)(v21 + 9) & 0xFFFFFFFFFFFFFFF8);
  v24 = *v23;
  if (*v22 < 0xFFFFFFFFuLL)
  {
    if (v24 >= 0xFFFFFFFF)
    {
      v26 = v23[1];
      *v22 = v24;
      v22[1] = v26;
      return a1;
    }
LABEL_14:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    return a1;
  }
  if (v24 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v25 = v23[1];
  *v22 = v24;
  v22[1] = v25;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitMenuButton(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a2)
  {
    if (v6 > 0x7FFFFFFE)
    {
      v16 = ((unint64_t)a1 + v8 + 18) & ~v8;
      if (v4 == v7)
        return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v16, *(unsigned int *)(v3 + 84));
      else
        return (*(uint64_t (**)(uint64_t))(v5 + 48))((v16 + v9 + v10) & ~v10);
    }
    else
    {
      v15 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
  }
  else
  {
    if (((((*(_QWORD *)(v5 + 64) + ((v9 + v10 + ((v8 + 18) & ~v8)) & ~v10) + 9) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186FCC030 + 4 * byte_187BFE7AE[v13]))();
  }
}

void storeEnumTagSinglePayload for UIKitMenuButton(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = v7;
  if (v8 >= a3)
  {
    v11 = 0u;
    if (a2 <= v8)
      goto LABEL_20;
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v5 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + ((*(unsigned __int8 *)(v5 + 80) + 18) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v6 + 80))
         + 9) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v8)
LABEL_20:
      __asm { BR              X6 }
  }
  if (((*(_DWORD *)(v6 + 64)
       + ((*(_DWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(unsigned __int8 *)(v5 + 80) + 18) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v6 + 80))
       + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v8 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64)+ ((*(_QWORD *)(v5 + 64)+ *(unsigned __int8 *)(v6 + 80)+ ((*(unsigned __int8 *)(v5 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 9) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_186FCC228()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186FCC2A4);
}

void sub_186FCC230(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FCC238);
  JUMPOUT(0x186FCC2A4);
}

void sub_186FCC278()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FCC2A4);
}

void sub_186FCC280()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FCC2A4);
}

void sub_186FCC288(uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;

  *(_WORD *)((char *)v5 + v6) = 0;
  if (a2)
  {
    if (v4 > 0x7FFFFFFE)
    {
      if (v2 == v3)
        JUMPOUT(0x186FCC2CCLL);
      JUMPOUT(0x186FCC2B8);
    }
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x186FCC294);
    *v5 = a2;
  }
  JUMPOUT(0x186FCC2A4);
}

void type metadata accessor for UIKitMenuButton()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for View in UIKitMenuButton<A, B>()
{
  return &protocol witness table for UIKitMenuButton<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in UIKitSystemButtonConfigurationModifier()
{
  return &protocol witness table for UIKitSystemButtonConfigurationModifier;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in UIKitSystemButtonConfigurationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for UIKitSystemButtonConfigurationModifier(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, type metadata accessor for UIKitSystemButtonConfigurationModifier, (uint64_t)&protocol conformance descriptor for UIKitSystemButtonConfigurationModifier);
  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, type metadata accessor for UIKitSystemButtonConfigurationModifier, (uint64_t)&protocol conformance descriptor for UIKitSystemButtonConfigurationModifier);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in UIKitButtonStyleModifier<A>()
{
  return &protocol witness table for UIKitButtonStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in UIKitButtonStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for UIKitButtonStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t specialized static UseUIButtonConfigurationPredicate.evaluate(inputs:)()
{
  char v0;

  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    _GraphInputs.interfaceIdiom.getter();
    v0 = AnyInterfaceIdiom.accepts<A>(_:)() ^ 1;
  }
  else
  {
    _GraphInputs.interfaceIdiom.getter();
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0)
    {
      v0 = 1;
    }
    else
    {
      _GraphInputs.interfaceIdiom.getter();
      v0 = AnyInterfaceIdiom.accepts<A>(_:)();
    }
  }
  return v0 & 1;
}

uint64_t outlined init with take of BridgedPopUpButtonProvider()
{
  return swift_unknownObjectWeakTakeInit();
}

unint64_t lazy protocol witness table accessor for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider;
  if (!lazy protocol witness table cache variable for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedPopUpButtonProvider, &type metadata for BridgedPopUpButtonProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BridgedPopUpButtonProvider and conformance BridgedPopUpButtonProvider);
  }
  return result;
}

uint64_t type metadata accessor for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitButton);
}

void type metadata accessor for UIKitMenuButton.Child()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldProvideBridgedPopUpButton, &type metadata for ShouldProvideBridgedPopUpButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldProvideBridgedPopUpButton, &type metadata for ShouldProvideBridgedPopUpButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldProvideBridgedPopUpButton, &type metadata for ShouldProvideBridgedPopUpButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldProvideBridgedPopUpButton, &type metadata for ShouldProvideBridgedPopUpButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton;
  if (!lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldProvideBridgedPopUpButton, &type metadata for ShouldProvideBridgedPopUpButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton);
  }
  return result;
}

uint64_t sub_186FCC614()
{
  return 32;
}

__n128 sub_186FCC620(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void type metadata accessor for (())?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (())?, (uint64_t (*)(uint64_t))type metadata accessor for (), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void partial apply for implicit closure #2 in static UIKitMenuButton._makeView(view:inputs:)()
{
  implicit closure #2 in static UIKitMenuButton._makeView(view:inputs:)();
}

void type metadata accessor for UIKitMenuButton.TransformItemList()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_186FCC6DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitButtonStyleModifier.ResolvedBody);
}

uint64_t type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent);
}

uint64_t partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UIKitSystemButtonConfigurationModifier.viewContent(configuration:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void type metadata accessor for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>)
  {
    type metadata accessor for ViewContent<HStack<UIKitButtonConfiguration.Label>>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ViewContent<HStack<UIKitButtonConfiguration.Label>> and conformance ViewContent<A>, (uint64_t (*)(uint64_t))type metadata accessor for ViewContent<HStack<UIKitButtonConfiguration.Label>>, (uint64_t)&protocol conformance descriptor for ViewContent<A>);
    v6 = type metadata accessor for UIKitButtonAdaptor(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>);
  }
}

void type metadata accessor for ViewContent<HStack<UIKitButtonConfiguration.Label>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ViewContent<HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
    v6 = type metadata accessor for ViewContent(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ViewContent<HStack<UIKitButtonConfiguration.Label>>);
  }
}

unint64_t lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

uint64_t type metadata accessor for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewContent);
}

uint64_t type metadata accessor for UIKitButtonAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitButtonAdaptor);
}

unint64_t lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown;
  if (!lazy protocol witness table cache variable for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyButtonStyleType.Unknown, &type metadata for AnyButtonStyleType.Unknown);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown);
  }
  return result;
}

uint64_t sub_186FCC90C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues._accessibilityShowButtonShapes.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_186FCC948()
{
  return EnvironmentValues._accessibilityShowButtonShapes.setter();
}

void type metadata accessor for WeakAttribute<PlatformItemList>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakAttribute<PlatformItemList>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for WeakAttribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC40]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakAttribute<PlatformItemList>?);
  }
}

uint64_t outlined init with take of WeakAttribute<WeakBox<UIButton>?>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for WeakAttribute<WeakBox<UIButton>?>?, (uint64_t (*)(uint64_t))type metadata accessor for WeakAttribute<WeakBox<UIButton>?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakAttribute<WeakBox<UIButton>?>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WeakAttribute<WeakBox<UIButton>?>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<UIButton>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC40]);
}

_QWORD *outlined retain of UIKitButtonConfiguration(_QWORD *a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1[7];
  v6 = a1[8];
  a2(a1[1], a1[2]);
  a3(v5, v6);
  return a1;
}

uint64_t sub_186FCCA9C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ViewBasedUIButton.isHighlighted.didset()
{
  return withAnimation<A>(_:_:)();
}

uint64_t partial apply for closure #1 in closure #1 in ViewBasedUIButton.isHighlighted.didset()
{
  return closure #1 in closure #1 in ViewBasedUIButton.isHighlighted.didset();
}

unint64_t lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListFlagsInput, &type metadata for PlatformItemListFlagsInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListFlagsInput, &type metadata for PlatformItemListFlagsInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput);
  }
  return result;
}

id specialized Coordinator.init(action:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  objc_class *ObjectType;
  uint64_t *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = (uint64_t *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_action];
  *v6 = 0;
  v6[1] = 0;
  v7 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuAttribute];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuTitle];
  *v8 = 0;
  v8[1] = 0;
  v9 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_onMenuPresentationChanged];
  *v9 = 0;
  v9[1] = 0;
  v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuControlGroupSize] = 2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_effectiveLabelStyle] = 0;
  v10 = &v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_menuChangeDetector];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_sheetBridgeToken] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_64A26C7A8406856A733B1A7B593971F711Coordinator_inspectorBridgeToken] = 0;
  v11 = *v6;
  *v6 = a1;
  v6[1] = a2;
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
  v13.receiver = v2;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

void specialized UIKitButtonContentHost.init(rootView:)()
{
  specialized _UIHostingView.init(rootView:)();
}

id sub_186FCCCA8(void *a1)
{
  id v1;

  v1 = a1;
  _UIHostingView.safeAreaRegions.setter(0);

  return v1;
}

void specialized UIKitButtonContentHost.__allocating_init(rootView:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  specialized UIKitButtonContentHost.init(rootView:)();
}

uint64_t specialized PlatformItemContent.updateUIButton(_:transaction:options:)()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  uint64_t v17;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UIButton.Configuration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v17 - v7;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v17 - v11;
  UIButton.configuration.getter();
  v13 = type metadata accessor for UIButton.Configuration();
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48);
  if (v14(v12, 1, v13))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v12, (uint64_t)v4);
    UIButton.configuration.setter();
    outlined destroy of UIButton.Configuration?((uint64_t)v12);
  }
  else
  {
    if (*v0)
    {
      v15 = objc_msgSend(*v0, sel_string);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    UIButton.Configuration.title.setter();
    UIButton.configuration.setter();
  }
  UIButton.configuration.getter();
  if (v14(v8, 1, v13))
  {
    outlined init with copy of UIButton.Configuration?((uint64_t)v8, (uint64_t)v4);
    UIButton.configuration.setter();
    return outlined destroy of UIButton.Configuration?((uint64_t)v8);
  }
  else
  {
    PlatformItemList.Item.image.getter();
    UIButton.Configuration.image.setter();
    return UIButton.configuration.setter();
  }
}

uint64_t specialized ViewContent.menuTitle(uiButton:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v26;

  v2 = *a1;
  v3 = *MEMORY[0x1E0DEEDD8];
  v4 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (void **)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v26 - v11;
  v13 = *(void **)((char *)a1 + direct field offset for ViewBasedUIButton.contentHost);
  if (v13)
  {
    v14 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v3 & v2) + 0x70), *(_QWORD *)((v3 & v2) + 0x78), v10);
    v15 = v13;
    v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v14);
    v17 = ViewRendererHost.platformItemList.getter(v14, v16);
    PlatformItemList.mergedContentItem.getter(v17, (uint64_t)v12);
    swift_bridgeObjectRelease();
    v18 = (void *)*((_QWORD *)v12 + 72);
    if (v18)
    {
      v19 = objc_msgSend(v18, sel_string);
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v21;

      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      if (v22)
      {
LABEL_9:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        return v20;
      }
      v23 = *v7;
      if (*v7)
      {
LABEL_5:
        v24 = objc_msgSend(v23, sel_string);
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        goto LABEL_9;
      }
    }
    else
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v23 = *v7;
      if (*v7)
        goto LABEL_5;
    }
    v20 = 0;
    goto LABEL_9;
  }
  return 0;
}

uint64_t specialized PlatformItemContent.menuTitle(uiButton:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;

  v1 = type metadata accessor for PlatformItemList.Item();
  v3 = MEMORY[0x1E0C80A78](v1, v2);
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (void **)((char *)&v15 - v5);
  v7 = *(void **)(v0 + 576);
  if (!v7)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)&v15 - v5, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v12 = *v6;
    if (*v6)
      goto LABEL_4;
    goto LABEL_6;
  }
  v8 = objc_msgSend(v7, sel_string, v3);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  if (!v11)
  {
    v12 = *v6;
    if (*v6)
    {
LABEL_4:
      v13 = objc_msgSend(v12, sel_string);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      goto LABEL_7;
    }
LABEL_6:
    v9 = 0;
  }
LABEL_7:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  return v9;
}

uint64_t specialized ViewContent.sizeThatFits(_:uiButton:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)((char *)a2 + direct field offset for ViewBasedUIButton.contentHost);
  if (!v4)
    return 0;
  v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0x70), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a2) + 0x78), a4);
  v6 = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
  ViewRendererHost.sizeThatFits(_:)();
  v8 = v7;

  return v8;
}

uint64_t specialized UIKitButtonAdaptor.sizeThatFits(_:uiView:context:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  LOBYTE(v13) = a2 & 1;
  _ProposedSize.init(_:)();
  v9 = v13;
  v10 = v14;
  v11 = v15;
  v12 = v16;
  return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(a6 + 24) + 40))(&v9, a5, *(_QWORD *)(a6 + 16));
}

void specialized UIKitButtonContentHost.init(coder:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in Coordinator.menuWillDismiss()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

unint64_t lazy protocol witness table accessor for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UpdateContextMenuInteraction, &type metadata for UpdateContextMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction);
  }
  return result;
}

uint64_t outlined destroy of UpdateContextMenuInteraction(uint64_t a1)
{
  destroy for UIKitScenePresentationModeLocation();
  return a1;
}

uint64_t partial apply for closure #3 in Coordinator.menuWillShow(interaction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_186FCD424()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in Coordinator.setupNotifications(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Coordinator.setupNotifications(_:)(a1, v1);
}

uint64_t partial apply for closure #1 in Coordinator.makeMenu()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in Coordinator.makeMenu()(a1);
}

uint64_t type metadata completion function for UIKitButton()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitButton(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 72) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v11 = a2[1];
    if (v11)
    {
      v12 = a2[2];
      *(_QWORD *)(v4 + 8) = v11;
      *(_QWORD *)(v4 + 16) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    }
    v13 = a2[7];
    *(_WORD *)(v4 + 24) = *((_WORD *)a2 + 12);
    *(_QWORD *)(v4 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(_BYTE *)(v4 + 36) = *((_BYTE *)a2 + 36);
    *(_WORD *)(v4 + 37) = *(_WORD *)((char *)a2 + 37);
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_WORD *)(v4 + 48) = *((_WORD *)a2 + 24);
    if (v13)
    {
      v14 = a2[8];
      *(_QWORD *)(v4 + 56) = v13;
      *(_QWORD *)(v4 + 64) = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    }
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))((v4 + v7 + 72) & ~v7, ((unint64_t)a2 + v7 + 72) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for UIKitButton(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8))
    swift_release();
  if (*(_QWORD *)(a1 + 56))
    swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(unsigned __int8 *)(v10 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t assignWithCopy for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v8 = (_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v9;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10;
    swift_retain();
    goto LABEL_8;
  }
  *v6 = *v8;
LABEL_8:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v11 = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v11;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  v12 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v13 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v13)
    {
      v15 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v15;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain();
  swift_release();
LABEL_15:
  v16 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))((*(unsigned __int8 *)(v16 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t initializeWithTake for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithTake for UIKitButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v8 = (_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v9;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10;
    goto LABEL_8;
  }
  *v6 = *v8;
LABEL_8:
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  if (!v12)
  {
    if (v11)
    {
      v14 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = v14;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  swift_release();
LABEL_15:
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(unsigned __int8 *)(v15 + 80) + 72 + a1) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 72 + a2) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButton(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 72) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 72) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      v16 = v15 - 1;
      if (v16 < 0)
        v16 = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186FCDB3C + 4 * byte_187BFE7BD[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for UIKitButton(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for BridgedPopUpButtonProvider()
{
  return &type metadata for BridgedPopUpButtonProvider;
}

uint64_t type metadata completion function for UIKitButtonStyleModifier.ResolvedBody()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitButtonStyleModifier.ResolvedBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_WORD *)v10 = *(_WORD *)v11;
    v12 = *(_QWORD *)(v11 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v10 + 8) = v12;
      *(_QWORD *)(v10 + 16) = v13;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
    }
    *(_BYTE *)(v10 + 24) = *(_BYTE *)(v11 + 24);
    *(_BYTE *)(v10 + 25) = *(_BYTE *)(v11 + 25);
    v14 = *(_QWORD *)(v11 + 28);
    *(_BYTE *)(v10 + 36) = *(_BYTE *)(v11 + 36);
    *(_QWORD *)(v10 + 28) = v14;
    *(_BYTE *)(v10 + 37) = *(_BYTE *)(v11 + 37);
    *(_BYTE *)(v10 + 38) = *(_BYTE *)(v11 + 38);
    v15 = *(_QWORD *)(v11 + 40);
    *(_BYTE *)(v10 + 48) = *(_BYTE *)(v11 + 48);
    *(_QWORD *)(v10 + 40) = v15;
    *(_BYTE *)(v10 + 49) = *(_BYTE *)(v11 + 49);
    v16 = *(_QWORD *)(v11 + 56);
    if (v16)
    {
      v17 = *(_QWORD *)(v11 + 64);
      *(_QWORD *)(v10 + 56) = v16;
      *(_QWORD *)(v10 + 64) = v17;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    }
    v18 = (v10 + 79) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v11 + 79) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v19, v21);
    *(_QWORD *)v18 = v20;
    *(_BYTE *)(v18 + 8) = v21;
  }
  return v4;
}

uint64_t destroy for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 8))
    swift_release();
  if (*(_QWORD *)(v4 + 56))
    swift_release();
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 79) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 79) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t initializeWithCopy for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_WORD *)v7 = *(_WORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v7 + 16) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  }
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_BYTE *)(v7 + 25) = *(_BYTE *)(v8 + 25);
  v11 = *(_QWORD *)(v8 + 28);
  *(_BYTE *)(v7 + 36) = *(_BYTE *)(v8 + 36);
  *(_QWORD *)(v7 + 28) = v11;
  *(_BYTE *)(v7 + 37) = *(_BYTE *)(v8 + 37);
  *(_BYTE *)(v7 + 38) = *(_BYTE *)(v8 + 38);
  v12 = *(_QWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_QWORD *)(v7 + 40) = v12;
  *(_BYTE *)(v7 + 49) = *(_BYTE *)(v8 + 49);
  v13 = *(_QWORD *)(v8 + 56);
  if (v13)
  {
    v14 = *(_QWORD *)(v8 + 64);
    *(_QWORD *)(v7 + 56) = v13;
    *(_QWORD *)(v7 + 64) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  }
  v15 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v16, v18);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v18;
  return a1;
}

uint64_t assignWithCopy for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_WORD *)v7 = *(_WORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  if (*(_QWORD *)(v7 + 8))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 16) = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v7 + 16) = v11;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
LABEL_8:
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_BYTE *)(v7 + 25) = *(_BYTE *)(v8 + 25);
  v12 = *(_QWORD *)(v8 + 28);
  *(_BYTE *)(v7 + 36) = *(_BYTE *)(v8 + 36);
  *(_QWORD *)(v7 + 28) = v12;
  *(_BYTE *)(v7 + 37) = *(_BYTE *)(v8 + 37);
  *(_BYTE *)(v7 + 38) = *(_BYTE *)(v8 + 38);
  v13 = *(_QWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_QWORD *)(v7 + 40) = v13;
  *(_BYTE *)(v7 + 49) = *(_BYTE *)(v8 + 49);
  v14 = *(_QWORD *)(v8 + 56);
  if (!*(_QWORD *)(v7 + 56))
  {
    if (v14)
    {
      v16 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v7 + 56) = v14;
      *(_QWORD *)(v7 + 64) = v16;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    goto LABEL_15;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 56) = v14;
  *(_QWORD *)(v7 + 64) = v15;
  swift_retain();
  swift_release();
LABEL_15:
  v17 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v20);
  v21 = *(_QWORD *)v17;
  v22 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  return a1;
}

uint64_t initializeWithTake for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v7 = *(_OWORD *)v8;
  v10 = *(_OWORD *)(v8 + 32);
  v9 = *(_OWORD *)(v8 + 48);
  v11 = *(_OWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 32) = v10;
  *(_OWORD *)(v7 + 48) = v9;
  *(_OWORD *)(v7 + 16) = v11;
  v12 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  return a1;
}

uint64_t assignWithTake for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_WORD *)v7 = *(_WORD *)v8;
  v9 = *(_QWORD *)(v8 + 8);
  if (*(_QWORD *)(v7 + 8))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 16) = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v7 + 16) = v11;
    goto LABEL_8;
  }
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
LABEL_8:
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_BYTE *)(v7 + 25) = *(_BYTE *)(v8 + 25);
  v12 = *(_QWORD *)(v8 + 28);
  *(_BYTE *)(v7 + 36) = *(_BYTE *)(v8 + 36);
  *(_QWORD *)(v7 + 28) = v12;
  *(_BYTE *)(v7 + 37) = *(_BYTE *)(v8 + 37);
  *(_BYTE *)(v7 + 38) = *(_BYTE *)(v8 + 38);
  v13 = *(_QWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_QWORD *)(v7 + 40) = v13;
  *(_BYTE *)(v7 + 49) = *(_BYTE *)(v8 + 49);
  v14 = *(_QWORD *)(v8 + 56);
  if (!*(_QWORD *)(v7 + 56))
  {
    if (v14)
    {
      v16 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v7 + 56) = v14;
      *(_QWORD *)(v7 + 64) = v16;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    goto LABEL_15;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v7 + 56) = v14;
  *(_QWORD *)(v7 + 64) = v15;
  swift_release();
LABEL_15:
  v17 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = *(_BYTE *)(v18 + 8);
  v20 = *(_QWORD *)v17;
  v21 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v18;
  outlined consume of Environment<Bool>.Content(v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButtonStyleModifier.ResolvedBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      v15 = v14 - 1;
      if (v15 < 0)
        v15 = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((((v7 + 7) & 0xFFFFFFF8) + 79) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186FCE5A8 + 4 * byte_187BFE7CB[v12]))();
  }
}

void storeEnumTagSinglePayload for UIKitButtonStyleModifier.ResolvedBody(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_186FCE76C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186FCE800);
}

void sub_186FCE774(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FCE77CLL);
  JUMPOUT(0x186FCE800);
}

void sub_186FCE7C4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FCE800);
}

void sub_186FCE7CC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FCE800);
}

uint64_t sub_186FCE7D4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x186FCE7E0);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2;
LABEL_6:
    JUMPOUT(0x186FCE800);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

ValueMetadata *type metadata accessor for UIKitButtonConfiguration.Label()
{
  return &type metadata for UIKitButtonConfiguration.Label;
}

uint64_t type metadata completion function for ViewContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_WORD *)((char *)v4 + v6) = *(_WORD *)((char *)a2 + v6);
    v10 = ((unint64_t)v4 + v6 + 9) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 9) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  }
  return v4;
}

uint64_t initializeWithCopy for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_WORD *)(v6 + a1);
  v8 = (_WORD *)(v6 + a2);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  return a1;
}

uint64_t assignWithCopy for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_WORD *)(v6 + a1);
  v8 = (_WORD *)(v6 + a2);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  return a1;
}

uint64_t initializeWithTake for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_WORD *)(v6 + a1);
  v8 = (_WORD *)(v6 + a2);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  return a1;
}

uint64_t assignWithTake for ViewContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = (_WORD *)(v6 + a1);
  v8 = (_WORD *)(v6 + a2);
  *v7 = *v8;
  v9 = ((unint64_t)v7 + 9) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((unint64_t)v8 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 >= 0xFE)
      return (*(uint64_t (**)(void))(v4 + 48))();
    v14 = *(unsigned __int8 *)(((a1 + v7 + 9) & 0xFFFFFFFFFFFFF8) + 8);
    if (v14 >= 2)
      return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v8 = ((v7 + 9) & 0xFFFFFFF8) + 9;
  v9 = (a2 - v6 + 255) >> (8 * v8);
  if (v8 < 4)
    v10 = v9 + 1;
  else
    v10 = 2;
  if (v10 >= 0x10000)
    v11 = 4;
  else
    v11 = 2;
  if (v10 < 0x100)
    v11 = 1;
  if (v10 >= 2)
    v12 = v11;
  else
    v12 = 0;
  return ((uint64_t (*)(void))((char *)&loc_186FCEB94 + 4 * byte_187BFE7DA[v12]))();
}

void storeEnumTagSinglePayload for ViewContent(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 9) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_186FCED48()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_186FCED50(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FCED58);
}

void sub_186FCED98()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_186FCEDA0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_186FCEDA8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
LABEL_2:
    JUMPOUT(0x186FCEDB0);
  if (a3 < 0xFE)
  {
    *(_BYTE *)(((v6 + v5 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata completion function for UIKitButtonAdaptor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitButtonAdaptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((((v8 + ((v7 + 153) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v12 = ~v7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v13 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)v14;
    v16 = *(_BYTE *)(v14 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v14, v16);
    *(_QWORD *)v13 = v15;
    *(_BYTE *)(v13 + 8) = v16;
    v17 = ((unint64_t)v4 + 39) & 0xFFFFFFFFFFFFFFF8;
    v18 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    outlined copy of Environment<Color?>.Content(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    v21 = ((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFFFF8;
    v22 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v22, v24);
    *(_QWORD *)v21 = v23;
    *(_BYTE *)(v21 + 8) = v24;
    v25 = ((unint64_t)v4 + 71) & 0xFFFFFFFFFFFFFFF8;
    v26 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)v26;
    v28 = *(_BYTE *)(v26 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v26, v28);
    *(_QWORD *)v25 = v27;
    *(_BYTE *)(v25 + 8) = v28;
    v29 = ((unint64_t)v4 + 87) & 0xFFFFFFFFFFFFFFF8;
    v30 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
    v31 = *(_QWORD *)v30;
    v32 = *(_BYTE *)(v30 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v30, v32);
    *(_QWORD *)v29 = v31;
    *(_BYTE *)(v29 + 8) = v32;
    v33 = ((unint64_t)v4 + 103) & 0xFFFFFFFFFFFFFFF8;
    v34 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
    v35 = *(_QWORD *)v34;
    v36 = *(_BYTE *)(v34 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v34, v36);
    *(_QWORD *)v33 = v35;
    *(_BYTE *)(v33 + 8) = v36;
    v37 = ((unint64_t)v4 + 119) & 0xFFFFFFFFFFFFFFF8;
    v38 = ((unint64_t)a2 + 119) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v38 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    else
    {
      v39 = *(_QWORD *)(v38 + 8);
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *(_QWORD *)(v37 + 8) = v39;
      swift_retain();
    }
    *(_BYTE *)(v37 + 16) = *(_BYTE *)(v38 + 16);
    v40 = *(_QWORD *)(v38 + 20);
    *(_BYTE *)(v37 + 28) = *(_BYTE *)(v38 + 28);
    *(_QWORD *)(v37 + 20) = v40;
    *(_BYTE *)(v37 + 29) = *(_BYTE *)(v38 + 29);
    *(_BYTE *)(v37 + 30) = *(_BYTE *)(v38 + 30);
    v41 = (v37 + 34) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v38 + 34) & 0xFFFFFFFFFFFFFFF8;
    v43 = *(_QWORD *)v42;
    *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
    *(_QWORD *)v41 = v43;
    v44 = (v41 + v7 + 9) & v12;
    v45 = (v42 + v7 + 9) & v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v44, v45, v5);
    v46 = (_QWORD *)((v8 + v44) & 0xFFFFFFFFFFFFF8);
    v47 = (_QWORD *)((v8 + v45) & 0xFFFFFFFFFFFFF8);
    *v46 = *v47;
    v48 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    v49 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v49 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v48 = *(_OWORD *)v49;
      return v4;
    }
    v50 = *(_QWORD *)(v49 + 8);
    *(_QWORD *)v48 = *(_QWORD *)v49;
    *(_QWORD *)(v48 + 8) = v50;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for UIKitButtonAdaptor(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)((a1 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Color?>.Content(*(_QWORD *)((a1 + 39) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(((a1 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((a1 + 55) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((a1 + 55) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((a1 + 71) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((a1 + 71) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((a1 + 87) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((a1 + 87) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((a1 + 103) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((a1 + 103) & 0xFFFFFFFFFFFFFFF8) + 8));
  v4 = (_QWORD *)((a1 + 119) & 0xFFFFFFFFFFFFFFF8);
  if (*v4 >= 0xFFFFFFFFuLL)
    swift_release();
  v5 = ((unint64_t)v4 + 34) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v7);
  if (*(_QWORD *)((((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
    return swift_release();
  return result;
}

_OWORD *initializeWithCopy for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  *a1 = *a2;
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)v7;
  v9 = *(_BYTE *)(v7 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v7, v9);
  *(_QWORD *)v6 = v8;
  *(_BYTE *)(v6 + 8) = v9;
  v10 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  v13 = *(_BYTE *)(v11 + 8);
  outlined copy of Environment<Color?>.Content(*(_QWORD *)v11, v13);
  *(_QWORD *)v10 = v12;
  *(_BYTE *)(v10 + 8) = v13;
  v14 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v17);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v17;
  v18 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  v21 = *(_BYTE *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v19, v21);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v21;
  v22 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  v25 = *(_BYTE *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  *(_BYTE *)(v22 + 8) = v25;
  v26 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v27, v29);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v29;
  v30 = ((unint64_t)a1 + 119) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)a2 + 119) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v31 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    v32 = *(_QWORD *)(v31 + 8);
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_QWORD *)(v30 + 8) = v32;
    swift_retain();
  }
  *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
  v33 = *(_QWORD *)(v31 + 20);
  *(_BYTE *)(v30 + 28) = *(_BYTE *)(v31 + 28);
  *(_QWORD *)(v30 + 20) = v33;
  *(_BYTE *)(v30 + 29) = *(_BYTE *)(v31 + 29);
  *(_BYTE *)(v30 + 30) = *(_BYTE *)(v31 + 30);
  v34 = (v30 + 34) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v31 + 34) & 0xFFFFFFFFFFFFFFF8;
  v36 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v34 = v36;
  v37 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v38 = *(unsigned __int8 *)(v37 + 80);
  v39 = (v38 + 9 + v34) & ~v38;
  v40 = (v38 + 9 + v35) & ~v38;
  (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v39, v40);
  v41 = *(_QWORD *)(v37 + 64) + 7;
  v42 = (_QWORD *)((v41 + v39) & 0xFFFFFFFFFFFFFFF8);
  v43 = (_QWORD *)((v41 + v40) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v43;
  v44 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v45 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v44 = *(_OWORD *)v45;
  }
  else
  {
    v46 = *(_QWORD *)(v45 + 8);
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = v46;
    swift_retain();
  }
  return a1;
}

_OWORD *assignWithCopy for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v6 = (unint64_t)a2 + 119;
  *a1 = *a2;
  v7 = (unint64_t)a1 + 119;
  v8 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v9, v11);
  v12 = *(_QWORD *)v8;
  v13 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  v17 = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Color?>.Content(*(_QWORD *)v15, v17);
  v18 = *(_QWORD *)v14;
  v19 = *(unsigned __int8 *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v17;
  outlined consume of Environment<Color?>.Content(v18, v19);
  v20 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_BYTE *)(v21 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v21, v23);
  v24 = *(_QWORD *)v20;
  v25 = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v23;
  outlined consume of Environment<Bool>.Content(v24, v25);
  v26 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v27, v29);
  v30 = *(_QWORD *)v26;
  v31 = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v29;
  outlined consume of Environment<Bool>.Content(v30, v31);
  v32 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  v35 = *(_BYTE *)(v33 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v33, v35);
  v36 = *(_QWORD *)v32;
  v37 = *(_BYTE *)(v32 + 8);
  *(_QWORD *)v32 = v34;
  *(_BYTE *)(v32 + 8) = v35;
  outlined consume of Environment<Bool>.Content(v36, v37);
  v38 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  LOBYTE(v34) = *(_BYTE *)(v39 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v39, v34);
  v41 = *(_QWORD *)v38;
  v42 = *(_BYTE *)(v38 + 8);
  *(_QWORD *)v38 = v40;
  *(_BYTE *)(v38 + 8) = v34;
  outlined consume of Environment<Bool>.Content(v41, v42);
  v43 = v7 & 0xFFFFFFFFFFFFFFF8;
  v44 = v6 & 0xFFFFFFFFFFFFFFF8;
  v45 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if (*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL)
  {
    if (v45 >= 0xFFFFFFFF)
    {
      v47 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)v43 = v45;
      *(_QWORD *)(v43 + 8) = v47;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v45 >= 0xFFFFFFFF)
    {
      v46 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)v43 = v45;
      *(_QWORD *)(v43 + 8) = v46;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v43 = *(_OWORD *)v44;
LABEL_8:
  *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
  v48 = *(_QWORD *)(v44 + 20);
  *(_BYTE *)(v43 + 28) = *(_BYTE *)(v44 + 28);
  *(_QWORD *)(v43 + 20) = v48;
  *(_BYTE *)(v43 + 29) = *(_BYTE *)(v44 + 29);
  *(_BYTE *)(v43 + 30) = *(_BYTE *)(v44 + 30);
  v49 = (v43 + 34) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v44 + 34) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_QWORD *)v49 = v51;
  v52 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v53 = *(unsigned __int8 *)(v52 + 80);
  v54 = (v53 + 9 + v49) & ~v53;
  v55 = (v53 + 9 + v50) & ~v53;
  (*(void (**)(uint64_t, uint64_t))(v52 + 24))(v54, v55);
  v56 = *(_QWORD *)(v52 + 64) + 7;
  v57 = (_QWORD *)((v56 + v54) & 0xFFFFFFFFFFFFFFF8);
  v58 = (_QWORD *)((v56 + v55) & 0xFFFFFFFFFFFFFFF8);
  *v57 = *v58;
  v59 = (_QWORD *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
  v60 = (unint64_t *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  v61 = *v60;
  if (*v59 < 0xFFFFFFFFuLL)
  {
    if (v61 >= 0xFFFFFFFF)
    {
      v63 = v60[1];
      *v59 = v61;
      v59[1] = v63;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)v59 = *(_OWORD *)v60;
    return a1;
  }
  if (v61 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v62 = v60[1];
  *v59 = v61;
  v59[1] = v62;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = v12;
  v13 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = v15;
  v16 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = v18;
  v19 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  v22 = ((unint64_t)a1 + 119) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)a2 + 119) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v23 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  else
  {
    v24 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *(_QWORD *)(v22 + 8) = v24;
  }
  *(_BYTE *)(v22 + 16) = *(_BYTE *)(v23 + 16);
  v25 = *(_QWORD *)(v23 + 20);
  *(_BYTE *)(v22 + 28) = *(_BYTE *)(v23 + 28);
  *(_QWORD *)(v22 + 20) = v25;
  *(_BYTE *)(v22 + 29) = *(_BYTE *)(v23 + 29);
  *(_BYTE *)(v22 + 30) = *(_BYTE *)(v23 + 30);
  v26 = (v22 + 34) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v23 + 34) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = v28;
  v29 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = (v30 + 9 + v26) & ~v30;
  v32 = (v30 + 9 + v27) & ~v30;
  (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v31, v32);
  v33 = *(_QWORD *)(v29 + 64) + 7;
  v34 = (_QWORD *)((v33 + v31) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)((v33 + v32) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  v37 = (uint64_t *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  v38 = *v37;
  if ((unint64_t)*v37 < 0xFFFFFFFF)
  {
    *(_OWORD *)v36 = *(_OWORD *)v37;
  }
  else
  {
    v39 = v37[1];
    *(_QWORD *)v36 = v38;
    *(_QWORD *)(v36 + 8) = v39;
  }
  return a1;
}

_OWORD *assignWithTake for UIKitButtonAdaptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v6 = (unint64_t)a2 + 119;
  *a1 = *a2;
  v7 = (unint64_t)a1 + 119;
  v8 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)v9;
  LOBYTE(v9) = *(_BYTE *)(v9 + 8);
  v11 = *(_QWORD *)v8;
  v12 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v9;
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  LOBYTE(v14) = *(_BYTE *)(v14 + 8);
  v16 = *(_QWORD *)v13;
  v17 = *(unsigned __int8 *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v14;
  outlined consume of Environment<Color?>.Content(v16, v17);
  v18 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = *(_BYTE *)(v19 + 8);
  v21 = *(_QWORD *)v18;
  v22 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = ((unint64_t)a1 + 71) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)a2 + 71) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)v24;
  LOBYTE(v24) = *(_BYTE *)(v24 + 8);
  v26 = *(_QWORD *)v23;
  v27 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v23 = v25;
  *(_BYTE *)(v23 + 8) = v24;
  outlined consume of Environment<Bool>.Content(v26, v27);
  v28 = ((unint64_t)a1 + 87) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)a2 + 87) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)v29;
  LOBYTE(v29) = *(_BYTE *)(v29 + 8);
  v31 = *(_QWORD *)v28;
  v32 = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = v29;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = ((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((unint64_t)a2 + 103) & 0xFFFFFFFFFFFFFFF8;
  v35 = *(_QWORD *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  v36 = *(_QWORD *)v33;
  v37 = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v33 = v35;
  *(_BYTE *)(v33 + 8) = v34;
  outlined consume of Environment<Bool>.Content(v36, v37);
  v38 = v7 & 0xFFFFFFFFFFFFFFF8;
  v39 = v6 & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  if (*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFuLL)
  {
    if (v40 >= 0xFFFFFFFF)
    {
      v42 = *(_QWORD *)(v39 + 8);
      *(_QWORD *)v38 = v40;
      *(_QWORD *)(v38 + 8) = v42;
      goto LABEL_8;
    }
  }
  else
  {
    if (v40 >= 0xFFFFFFFF)
    {
      v41 = *(_QWORD *)(v39 + 8);
      *(_QWORD *)v38 = v40;
      *(_QWORD *)(v38 + 8) = v41;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)v38 = *(_OWORD *)v39;
LABEL_8:
  *(_BYTE *)(v38 + 16) = *(_BYTE *)(v39 + 16);
  v43 = *(_QWORD *)(v39 + 20);
  *(_BYTE *)(v38 + 28) = *(_BYTE *)(v39 + 28);
  *(_QWORD *)(v38 + 20) = v43;
  *(_BYTE *)(v38 + 29) = *(_BYTE *)(v39 + 29);
  *(_BYTE *)(v38 + 30) = *(_BYTE *)(v39 + 30);
  v44 = (v38 + 34) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v39 + 34) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(_QWORD *)v45;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  *(_QWORD *)v44 = v46;
  v47 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v48 = *(unsigned __int8 *)(v47 + 80);
  v49 = (v48 + 9 + v44) & ~v48;
  v50 = (v48 + 9 + v45) & ~v48;
  (*(void (**)(uint64_t, uint64_t))(v47 + 40))(v49, v50);
  v51 = *(_QWORD *)(v47 + 64) + 7;
  v52 = (_QWORD *)((v51 + v49) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)((v51 + v50) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = (_QWORD *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
  v55 = (unint64_t *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
  v56 = *v55;
  if (*v54 < 0xFFFFFFFFuLL)
  {
    if (v56 >= 0xFFFFFFFF)
    {
      v58 = v55[1];
      *v54 = v56;
      v54[1] = v58;
      return a1;
    }
LABEL_14:
    *(_OWORD *)v54 = *(_OWORD *)v55;
    return a1;
  }
  if (v56 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  v57 = v55[1];
  *v54 = v56;
  v54[1] = v57;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButtonAdaptor(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)a1 + 103) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 50) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 9) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 153) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186FCFCF0 + 4 * byte_187BFE7E9[v10]))();
  }
}

void storeEnumTagSinglePayload for UIKitButtonAdaptor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 153) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 153) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 153) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_186FCFE90()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186FCFF0CLL);
}

void sub_186FCFE98(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FCFEA0);
  JUMPOUT(0x186FCFF0CLL);
}

void sub_186FCFEB0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FCFF0CLL);
}

void sub_186FCFEB8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FCFF0CLL);
}

void sub_186FCFEC0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x186FCFF08);
      JUMPOUT(0x186FCFF00);
    }
    JUMPOUT(0x186FCFECCLL);
  }
  JUMPOUT(0x186FCFF0CLL);
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[1];
    if (v7)
    {
      v8 = a2[2];
      *(_QWORD *)(v4 + 8) = v7;
      *(_QWORD *)(v4 + 16) = v8;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    }
    v10 = a2[7];
    *(_WORD *)(v4 + 24) = *((_WORD *)a2 + 12);
    *(_QWORD *)(v4 + 28) = *(uint64_t *)((char *)a2 + 28);
    *(_BYTE *)(v4 + 36) = *((_BYTE *)a2 + 36);
    *(_WORD *)(v4 + 37) = *(_WORD *)((char *)a2 + 37);
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_WORD *)(v4 + 48) = *((_WORD *)a2 + 24);
    if (v10)
    {
      v11 = a2[8];
      *(_QWORD *)(v4 + 56) = v10;
      *(_QWORD *)(v4 + 64) = v11;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for UIButton.Configuration();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return v4;
}

uint64_t destroy for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8))
    swift_release();
  if (*(_QWORD *)(a1 + 56))
    swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UIButton.Configuration();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v8 = (_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v9;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10;
    swift_retain();
    goto LABEL_8;
  }
  *v6 = *v8;
LABEL_8:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v11 = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v11;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  v12 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v13 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v13)
    {
      v15 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v15;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain();
  swift_release();
LABEL_15:
  v16 = *(int *)(a3 + 20);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

uint64_t initializeWithTake for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = (_OWORD *)(a1 + 8);
  v8 = (_OWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v7)
    {
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v9;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10;
    goto LABEL_8;
  }
  *v6 = *v8;
LABEL_8:
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  if (!v12)
  {
    if (v11)
    {
      v14 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = v14;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_15;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  swift_release();
LABEL_15:
  v15 = *(int *)(a3 + 20);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186FD0498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for UIButton.Configuration();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186FD052C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = type metadata accessor for UIButton.Configuration();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UIButton.Configuration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitButtonConfiguration()
{
  return &type metadata for UIKitButtonConfiguration;
}

void sub_186FD063C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2[0] = &protocol witness table for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent;
    v2[1] = &protocol witness table for UIKitButtonAdaptor<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent, UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent(255);
    type metadata accessor for UIKitButtonAdaptor<ViewContent<HStack<UIKitButtonConfiguration.Label>>>(255);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

_UNKNOWN **base witness table accessor for View in UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  return &protocol witness table for UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent;
}

_UNKNOWN **base witness table accessor for View in UIKitButtonConfiguration.Label()
{
  return &protocol witness table for UIKitButtonConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for UIKitButtonConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label;
  if (!lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonConfiguration.Label, &type metadata for UIKitButtonConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label;
  if (!lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonConfiguration.Label, &type metadata for UIKitButtonConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in UIKitButtonStyleModifier<A>.ResolvedBody()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in UIKitMenuButton<A, B>.TransformItemList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in UIKitButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in UIKitMenuButton<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in UIKitButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in UIKitButton.body.getter(v1[4], v1[2], v1[3], a1);
}

unint64_t lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody;
  if (!lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedUIKitButtonBody, &type metadata for ResolvedUIKitButtonBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody;
  if (!lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedUIKitButtonBody, &type metadata for ResolvedUIKitButtonBody);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody);
  }
  return result;
}

uint64_t sub_186FD08E0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitMenuButton.TransformItemList.value.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in UIKitMenuButton.TransformItemList.value.getter(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_DWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

double _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 175) = 0;
  return result;
}

void outlined consume of PlatformItemList.Item.SystemItem?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void outlined consume of PlatformItemList.Item.SystemItem(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 62 == 2)
  {
    outlined consume of AnyShareConfiguration.Storage((uint64_t)a1, a2, a3, a4, a5);
    outlined consume of Text?(a6, a7, a8, a9);
    outlined consume of Text?(a10, a11, a12, a13);
  }
  else if (a5 >> 62 == 1)
  {

  }
}

void outlined consume of AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 2:
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
      break;
    case 1:
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
      break;
    case 0:
      swift_bridgeObjectRelease();
      break;
  }
}

void type metadata accessor for ButtonStyleContent()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
    lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleConfiguration.Label, &type metadata for ButtonStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleConfiguration.Label, &type metadata for ButtonStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  }
  return result;
}

void partial apply for closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter()
{
  uint64_t *v0;

  closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(v0[4], v0[2], v0[3]);
}

uint64_t sub_186FD0BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8, v5);
  v9 = v8 + *(int *)(v6 + 36);
  if (*(_QWORD *)(v9 + 8))
    swift_release();
  if (*(_QWORD *)(v9 + 56))
    swift_release();
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + *(int *)(v6 + 40)), *(_BYTE *)(v8 + *(int *)(v6 + 40) + 8));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in UIKitButtonStyleModifier.ResolvedBody.body.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for UIKitButtonStyleModifier.ResolvedBody(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return UIKitButtonStyleModifier.ResolvedBody.transform(itemList:)(a1, v6);
}

uint64_t outlined init with copy of _IdentifiedViewTree(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _IdentifiedViewTree(a2, a1);
  return a2;
}

uint64_t outlined destroy of _IdentifiedViewTree(uint64_t a1)
{
  destroy for _IdentifiedViewTree(a1);
  return a1;
}

uint64_t outlined init with take of _IdentifiedViewTree(__int128 *a1, uint64_t a2)
{
  __swift_memcpy161_8(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIKitButtonAdaptorContent_Options, &unk_1E1B04DE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIKitButtonAdaptorContent_Options, &unk_1E1B04DE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIKitButtonAdaptorContent_Options, &unk_1E1B04DE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIKitButtonAdaptorContent_Options, &unk_1E1B04DE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options;
  if (!lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIKitButtonAdaptorContent_Options, &unk_1E1B04DE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIKitButtonAdaptorContent_Options and conformance _UIKitButtonAdaptorContent_Options);
  }
  return result;
}

uint64_t sub_186FD0D98()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ViewContent.makeUIButton(options:)(double *a1, double *a2)
{
  uint64_t v2;

  closure #1 in ViewContent.makeUIButton(options:)(a1, a2, *(_QWORD *)(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer;
  if (!lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4E28], MEMORY[0x1E0CE4E30]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<AccessibilityNodesKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityNodesKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityNodesKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityNodesKey>, (uint64_t)&type metadata for AccessibilityNodesKey, (uint64_t)&protocol witness table for AccessibilityNodesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityNodesKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_186FD0EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for UIKitButtonAdaptor(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + 16), *(_BYTE *)(v8 + 24));
  outlined consume of Environment<Color?>.Content(*(_QWORD *)(v8 + 32), *(unsigned __int8 *)(v8 + 40));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + 48), *(_BYTE *)(v8 + 56));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + 64), *(_BYTE *)(v8 + 72));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + 80), *(_BYTE *)(v8 + 88));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v8 + 96), *(_BYTE *)(v8 + 104));
  if (*(_QWORD *)(v8 + 112))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v6 + 84), v5);
  if (*(_QWORD *)(v8 + *(int *)(v6 + 92)))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitButtonAdaptor.updateUIView(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UIKitButtonAdaptor(0, v6, v7, a4) - 8) + 80);
  return closure #1 in UIKitButtonAdaptor.updateUIView(_:context:)(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t partial apply for closure #3 in UIKitButtonAdaptor.updateUIView(_:context:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_186FD100C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitButtonAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;

  if (v3[18])
    v4 = 0x10000;
  else
    v4 = 0;
  if (v3[17])
    v5 = 256;
  else
    v5 = 0;
  return closure #2 in UIKitButtonAdaptor.updateUIView(_:context:)(a1, a2, a3, v5 | v3[16] | v4);
}

uint64_t partial apply for closure #1 in UIKitButtonAdaptor.makeUIView(context:)()
{
  uint64_t v0;

  return closure #1 in UIKitButtonAdaptor.makeUIView(context:)(*(_QWORD *)(v0 + 32));
}

uint64_t sub_186FD1058()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool)()
{
  uint64_t v0;

  return thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_186FD1084@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = static VerticalAlignment.center.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void type metadata accessor for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<UIKitButtonConfiguration, HStack<UIKitButtonConfiguration.Label>>);
  }
}

uint64_t type metadata accessor for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>;
  if (!lazy cache variable for type metadata for PlatformItemListGenerator<LabelPlatformItemListFlags, HStack<UIKitButtonConfiguration.Label>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
    type metadata accessor for PlatformItemListGenerator();
  }
  return result;
}

void type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(a1, (unint64_t *)&lazy cache variable for type metadata for UIKitButtonAdaptor<PlatformItemContent>, type metadata accessor for PlatformItemContent, (uint64_t)&protocol witness table for PlatformItemContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitButtonAdaptor);
}

void type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t type metadata accessor for PlatformItemContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlatformItemContent);
}

unint64_t lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor;
  if (!lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor, &unk_1E1B08498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor and conformance UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitButtonAdaptor<PlatformItemContent>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for UIKitButtonAdaptor<A>;
    v2[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)()
{
  return implicit closure #1 in static UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent._makeView(view:inputs:)();
}

unint64_t lazy protocol witness table accessor for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform;
  if (!lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitSystemButtonConfigurationModifier.PlatformItemTransform, &unk_1E1B08528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier.PlatformItemTransform and conformance UIKitSystemButtonConfigurationModifier.PlatformItemTransform);
  }
  return result;
}

uint64_t sub_186FD1370()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter(*(_QWORD *)(v1 + 16), a1);
}

void outlined consume of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

void *type metadata accessor for UIKitSystemButtonConfigurationModifier.PlatformItemTransform()
{
  return &unk_1E1B08528;
}

uint64_t getEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor()
{
  return &unk_1E1B08498;
}

char *initializeBufferWithCopyOfBuffer for PlatformItemContent(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v7;
  char *v8;
  char *v9;
  char **v10;
  char **v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char *v77;
  _BYTE *v78;
  uint64_t v79;
  void (*v80)(char *, _BYTE *, uint64_t);
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  unsigned int (*v95)(_BYTE *, uint64_t, uint64_t);
  uint64_t v96;
  char *v97;
  int *v98;
  char *__dsta;
  char *__dst;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
    return a1;
  }
  v8 = a2[1];
  v7 = a2[2];
  *((_QWORD *)a1 + 1) = v8;
  *((_QWORD *)a1 + 2) = v7;
  *((_QWORD *)a1 + 3) = a2[3];
  a1[32] = *((_BYTE *)a2 + 32);
  v9 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v9;
  a1[56] = *((_BYTE *)a2 + 56);
  v10 = (char **)(a1 + 64);
  v11 = a2 + 8;
  v12 = (unint64_t)a2[23];
  v13 = v5;
  v14 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 >> 1 != 4294967294)
  {
    v24 = *((unsigned __int8 *)a2 + 72);
    if (v24 == 255)
    {
      *v10 = *v11;
      a1[72] = *((_BYTE *)v11 + 8);
    }
    else
    {
      v25 = a2[8];
      outlined copy of GraphicsImage.Contents(v25, *((_BYTE *)a2 + 72));
      *((_QWORD *)a1 + 8) = v25;
      a1[72] = v24;
      v12 = (unint64_t)a2[23];
    }
    *((_QWORD *)a1 + 10) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((_BYTE *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((_BYTE *)a2 + 124);
    v26 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v26;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    a1[162] = *((_BYTE *)a2 + 162);
    a1[163] = *((_BYTE *)a2 + 163);
    if (v12 >> 1 == 0xFFFFFFFF)
    {
      v27 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v27;
    }
    else
    {
      v28 = (uint64_t)a2[21];
      v29 = (uint64_t)a2[22];
      v30 = a2[24];
      outlined copy of AccessibilityImageLabel(v28, v29, v12);
      *((_QWORD *)a1 + 21) = v28;
      *((_QWORD *)a1 + 22) = v29;
      *((_QWORD *)a1 + 23) = v12;
      *((_QWORD *)a1 + 24) = v30;
    }
    v31 = a2[26];
    *((_QWORD *)a1 + 25) = a2[25];
    *((_QWORD *)a1 + 26) = v31;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((_BYTE *)a2 + 224);
    v32 = a2[29];
    *((_QWORD *)a1 + 29) = v32;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    a1[242] = *((_BYTE *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v33 = v32;
    v20 = a2[32];
    if (v20)
      goto LABEL_4;
LABEL_15:
    v34 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  v15 = *((_OWORD *)v11 + 9);
  *((_OWORD *)a1 + 12) = *((_OWORD *)v11 + 8);
  *((_OWORD *)a1 + 13) = v15;
  *((_OWORD *)a1 + 14) = *((_OWORD *)v11 + 10);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)v11 + 175);
  v16 = *((_OWORD *)v11 + 5);
  *((_OWORD *)a1 + 8) = *((_OWORD *)v11 + 4);
  *((_OWORD *)a1 + 9) = v16;
  v17 = *((_OWORD *)v11 + 7);
  *((_OWORD *)a1 + 10) = *((_OWORD *)v11 + 6);
  *((_OWORD *)a1 + 11) = v17;
  v18 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)a1 + 5) = v18;
  v19 = *((_OWORD *)v11 + 3);
  *((_OWORD *)a1 + 6) = *((_OWORD *)v11 + 2);
  *((_OWORD *)a1 + 7) = v19;
  v20 = a2[32];
  if (!v20)
    goto LABEL_15;
LABEL_4:
  *((_QWORD *)a1 + 31) = a2[31];
  *((_QWORD *)a1 + 32) = v20;
  v21 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v21 >= 2)
    v22 = v21;
  *((_QWORD *)a1 + 33) = v21;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((_BYTE *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  v23 = a2[36];
  *((_QWORD *)a1 + 35) = a2[35];
  *((_QWORD *)a1 + 36) = v23;
  swift_retain();
  swift_retain();
LABEL_16:
  v35 = (unint64_t)a2[41];
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    v36 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v36;
    *((_QWORD *)a1 + 49) = a2[49];
    v37 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v37;
    v38 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v38;
  }
  else
  {
    v39 = a2[37];
    v40 = (uint64_t)a2[38];
    v41 = (uint64_t)a2[39];
    v42 = (uint64_t)a2[40];
    v43 = (uint64_t)a2[42];
    v44 = (uint64_t)a2[43];
    v45 = a2[44];
    v91 = (uint64_t)a2[45];
    v92 = (uint64_t)a2[46];
    v94 = (uint64_t)a2[47];
    v97 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v35, v43, v44, (char)v45, v91, v92, v94, (char)v97, (uint64_t)__dsta);
    *((_QWORD *)a1 + 37) = v39;
    *((_QWORD *)a1 + 38) = v40;
    *((_QWORD *)a1 + 39) = v41;
    *((_QWORD *)a1 + 40) = v42;
    *((_QWORD *)a1 + 41) = v35;
    *((_QWORD *)a1 + 42) = v43;
    *((_QWORD *)a1 + 43) = v44;
    *((_QWORD *)a1 + 44) = v45;
    *((_QWORD *)a1 + 45) = v91;
    *((_QWORD *)a1 + 46) = v92;
    *((_QWORD *)a1 + 47) = v94;
    *((_QWORD *)a1 + 48) = v97;
    *((_QWORD *)a1 + 49) = __dsta;
  }
  v46 = a2[51];
  if (v46 != (char *)1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    a1[404] = *((_BYTE *)a2 + 404);
    if (v46)
    {
      v49 = a2[52];
      *((_QWORD *)a1 + 51) = v46;
      *((_QWORD *)a1 + 52) = v49;
      swift_retain();
      v50 = a2[53];
      if (v50)
        goto LABEL_23;
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      v50 = a2[53];
      if (v50)
      {
LABEL_23:
        v51 = a2[54];
        *((_QWORD *)a1 + 53) = v50;
        *((_QWORD *)a1 + 54) = v51;
        swift_retain();
        v52 = a2[55];
        if (v52)
        {
LABEL_24:
          v53 = a2[56];
          *((_QWORD *)a1 + 55) = v52;
          *((_QWORD *)a1 + 56) = v53;
          swift_retain();
LABEL_28:
          *((_QWORD *)a1 + 57) = a2[57];
          a1[464] = *((_BYTE *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    v52 = a2[55];
    if (v52)
      goto LABEL_24;
    goto LABEL_27;
  }
  v47 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v47;
  a1[464] = *((_BYTE *)a2 + 464);
  v48 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v48;
LABEL_29:
  v54 = a2[60];
  *((_QWORD *)a1 + 59) = a2[59];
  *((_QWORD *)a1 + 60) = v54;
  *((_QWORD *)a1 + 61) = a2[61];
  a1[496] = *((_BYTE *)a2 + 496);
  v55 = a2[63];
  swift_bridgeObjectRetain();
  if (v55)
  {
    v56 = a2[64];
    *((_QWORD *)a1 + 63) = v55;
    *((_QWORD *)a1 + 64) = v56;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  v57 = a2[66];
  if (v57)
  {
    *((_QWORD *)a1 + 66) = v57;
    *((_QWORD *)a1 + 67) = a2[67];
    *((_QWORD *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((_QWORD *)a1 + 68) = a2[68];
  }
  v58 = a2[69];
  if (v58 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((_QWORD *)a1 + 71) = a2[71];
  }
  else
  {
    *((_QWORD *)a1 + 69) = v58;
    v59 = a2[70];
    swift_retain();
    if (v59)
    {
      v60 = a2[71];
      *((_QWORD *)a1 + 70) = v59;
      *((_QWORD *)a1 + 71) = v60;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  v61 = a2[72];
  *((_QWORD *)a1 + 72) = v61;
  *((_QWORD *)a1 + 73) = a2[73];
  *((_QWORD *)a1 + 74) = a2[74];
  *((_QWORD *)a1 + 75) = a2[75];
  *((_QWORD *)a1 + 76) = a2[76];
  *((_QWORD *)a1 + 77) = a2[77];
  *((_QWORD *)a1 + 78) = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((_BYTE *)a2 + 634);
  v62 = type metadata accessor for PlatformItemList.Item();
  v63 = *(int *)(v62 + 112);
  v98 = (int *)v62;
  __dst = &a1[v63];
  v64 = (char *)a2 + v63;
  v65 = type metadata accessor for CommandOperation();
  v66 = *(_QWORD *)(v65 - 8);
  v95 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48);
  v67 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v95(v64, 1, v65))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    v93 = v64;
    v96 = v66;
    *__dst = *v64;
    v69 = *(int *)(v65 + 20);
    v70 = v65;
    v71 = &__dst[v69];
    v72 = &v64[v69];
    v73 = *(_QWORD *)&v64[v69];
    v74 = *((_QWORD *)v72 + 1);
    v75 = v72[16];
    outlined copy of Text.Storage(v73, v74, v75);
    *(_QWORD *)v71 = v73;
    *((_QWORD *)v71 + 1) = v74;
    v71[16] = v75;
    *((_QWORD *)v71 + 3) = *((_QWORD *)v72 + 3);
    v76 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v77 = &v71[v76];
    v78 = &v72[v76];
    v79 = type metadata accessor for UUID();
    v80 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
    swift_bridgeObjectRetain();
    v80(v77, v78, v79);
    v81 = *(int *)(v70 + 24);
    v82 = &__dst[v81];
    v83 = &v93[v81];
    if (*v83)
    {
      v84 = v83[1];
      *(_QWORD *)v82 = *v83;
      *((_QWORD *)v82 + 1) = v84;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v82 = *(_OWORD *)v83;
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(__dst, 0, 1, v70);
  }
  a1[v98[29]] = *((_BYTE *)a2 + v98[29]);
  a1[v98[30]] = *((_BYTE *)a2 + v98[30]);
  a1[v98[31]] = *((_BYTE *)a2 + v98[31]);
  a1[v98[32]] = *((_BYTE *)a2 + v98[32]);
  *(_QWORD *)&a1[v98[33]] = *(char **)((char *)a2 + v98[33]);
  v85 = *(int *)(a3 + 24);
  *(_WORD *)&a1[*(int *)(a3 + 20)] = *(_WORD *)((char *)a2 + *(int *)(a3 + 20));
  v86 = &a1[v85];
  v87 = (uint64_t)a2 + v85;
  v88 = type metadata accessor for UIButton.Configuration();
  v89 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 16);
  swift_retain();
  v89(v86, v87, v88);
  return a1;
}

id outlined copy of PlatformItemList.Item.SystemItem(id result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 62 == 2)
  {
    outlined copy of AnyShareConfiguration.Storage((uint64_t)result, a2, a3, a4, a5);
    outlined copy of Text?(a6, a7, a8, a9);
    return (id)outlined copy of Text?(a10, a11, a12, a13);
  }
  else if (a5 >> 62 == 1)
  {
    return result;
  }
  return result;
}

void outlined copy of AnyShareConfiguration.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 2:
      swift_bridgeObjectRetain();
      outlined copy of AppIntentExecutor?(a2);
      break;
    case 1:
      swift_retain();
      outlined copy of AppIntentExecutor?(a3);
      break;
    case 0:
      swift_bridgeObjectRetain();
      break;
  }
}

uint64_t destroy for PlatformItemContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = *(_QWORD *)(a1 + 184);
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
      v4 = *(_QWORD *)(a1 + 184);
      v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v4);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    v7 = *(void **)(a1 + 264);
    if ((unint64_t)v7 >= 2)

    swift_release();
    swift_release();
  }
  v8 = *(_QWORD *)(a1 + 328);
  if (v8 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v8, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
  v9 = *(_QWORD *)(a1 + 408);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_20;
    swift_release();
  }
  if (*(_QWORD *)(a1 + 424))
    swift_release();
  if (*(_QWORD *)(a1 + 440))
    swift_release();
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 504))
    swift_release();
  if (*(_QWORD *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
  v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
    v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    if (*(_QWORD *)(v10 + *(int *)(v11 + 24)))
      swift_release();
  }
  swift_release();
  v15 = a1 + *(int *)(a2 + 24);
  v16 = type metadata accessor for UIButton.Configuration();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  int v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  void (*v79)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  unsigned int (*v94)(_BYTE *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  int *v97;
  void *__dsta;
  _BYTE *__dst;

  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = a1 + 64;
  v10 = a2 + 64;
  v11 = *(_QWORD *)(a2 + 184);
  v12 = v5;
  v13 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v11 >> 1 != 4294967294)
  {
    v23 = *(unsigned __int8 *)(a2 + 72);
    if (v23 == 255)
    {
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
    }
    else
    {
      v24 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v24, *(_BYTE *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v24;
      *(_BYTE *)(a1 + 72) = v23;
      v11 = *(_QWORD *)(a2 + 184);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v25;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    if (v11 >> 1 == 0xFFFFFFFF)
    {
      v26 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v26;
    }
    else
    {
      v27 = *(_QWORD *)(a2 + 168);
      v28 = *(_QWORD *)(a2 + 176);
      v29 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v27, v28, v11);
      *(_QWORD *)(a1 + 168) = v27;
      *(_QWORD *)(a1 + 176) = v28;
      *(_QWORD *)(a1 + 184) = v11;
      *(_QWORD *)(a1 + 192) = v29;
    }
    v30 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v30;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    v31 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v31;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v32 = v31;
    v19 = *(_QWORD *)(a2 + 256);
    if (v19)
      goto LABEL_3;
LABEL_13:
    v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  v14 = *(_OWORD *)(v10 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 144) = v14;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
  *(_DWORD *)(v9 + 175) = *(_DWORD *)(v10 + 175);
  v15 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v15;
  v16 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v16;
  v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  v18 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v18;
  v19 = *(_QWORD *)(a2 + 256);
  if (!v19)
    goto LABEL_13;
LABEL_3:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v19;
  v20 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v20 >= 2)
    v21 = v20;
  *(_QWORD *)(a1 + 264) = v20;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  v22 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v22;
  swift_retain();
  swift_retain();
LABEL_14:
  v34 = *(_QWORD *)(a2 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
    v35 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v35;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v36 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v36;
    v37 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v37;
  }
  else
  {
    v38 = *(void **)(a2 + 296);
    v39 = *(_QWORD *)(a2 + 304);
    v40 = *(_QWORD *)(a2 + 312);
    v41 = *(_QWORD *)(a2 + 320);
    v42 = *(_QWORD *)(a2 + 336);
    v43 = *(_QWORD *)(a2 + 344);
    v44 = *(_QWORD *)(a2 + 352);
    v90 = *(_QWORD *)(a2 + 360);
    v91 = *(_QWORD *)(a2 + 368);
    v93 = *(_QWORD *)(a2 + 376);
    v96 = *(_QWORD *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v38, v39, v40, v41, v34, v42, v43, v44, v90, v91, v93, v96, (uint64_t)__dsta);
    *(_QWORD *)(a1 + 296) = v38;
    *(_QWORD *)(a1 + 304) = v39;
    *(_QWORD *)(a1 + 312) = v40;
    *(_QWORD *)(a1 + 320) = v41;
    *(_QWORD *)(a1 + 328) = v34;
    *(_QWORD *)(a1 + 336) = v42;
    *(_QWORD *)(a1 + 344) = v43;
    *(_QWORD *)(a1 + 352) = v44;
    *(_QWORD *)(a1 + 360) = v90;
    *(_QWORD *)(a1 + 368) = v91;
    *(_QWORD *)(a1 + 376) = v93;
    *(_QWORD *)(a1 + 384) = v96;
    *(_QWORD *)(a1 + 392) = __dsta;
  }
  v45 = *(_QWORD *)(a2 + 408);
  if (v45 == 1)
  {
    v46 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v46;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
    v47 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v47;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v45)
  {
    v48 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v45;
    *(_QWORD *)(a1 + 416) = v48;
    swift_retain();
    v49 = *(_QWORD *)(a2 + 424);
    if (v49)
      goto LABEL_21;
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    v51 = *(_QWORD *)(a2 + 440);
    if (v51)
      goto LABEL_22;
LABEL_25:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  v49 = *(_QWORD *)(a2 + 424);
  if (!v49)
    goto LABEL_24;
LABEL_21:
  v50 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v49;
  *(_QWORD *)(a1 + 432) = v50;
  swift_retain();
  v51 = *(_QWORD *)(a2 + 440);
  if (!v51)
    goto LABEL_25;
LABEL_22:
  v52 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v51;
  *(_QWORD *)(a1 + 448) = v52;
  swift_retain();
LABEL_26:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_27:
  v53 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v53;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v54 = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v54)
  {
    v55 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v54;
    *(_QWORD *)(a1 + 512) = v55;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v56 = *(_QWORD *)(a2 + 528);
  if (v56)
  {
    *(_QWORD *)(a1 + 528) = v56;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  }
  v57 = *(_QWORD *)(a2 + 552);
  if (v57 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  }
  else
  {
    *(_QWORD *)(a1 + 552) = v57;
    v58 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (v58)
    {
      v59 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v58;
      *(_QWORD *)(a1 + 568) = v59;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  v60 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v60;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v61 = type metadata accessor for PlatformItemList.Item();
  v62 = *(int *)(v61 + 112);
  v97 = (int *)v61;
  __dst = (_BYTE *)(a1 + v62);
  v63 = (_BYTE *)(a2 + v62);
  v64 = type metadata accessor for CommandOperation();
  v65 = *(_QWORD *)(v64 - 8);
  v94 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48);
  v66 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v94(v63, 1, v64))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    v92 = v63;
    v95 = v65;
    *__dst = *v63;
    v68 = *(int *)(v64 + 20);
    v69 = v64;
    v70 = &__dst[v68];
    v71 = &v63[v68];
    v72 = *(_QWORD *)&v63[v68];
    v73 = *((_QWORD *)v71 + 1);
    v74 = v71[16];
    outlined copy of Text.Storage(v72, v73, v74);
    *(_QWORD *)v70 = v72;
    *((_QWORD *)v70 + 1) = v73;
    v70[16] = v74;
    *((_QWORD *)v70 + 3) = *((_QWORD *)v71 + 3);
    v75 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v76 = &v70[v75];
    v77 = &v71[v75];
    v78 = type metadata accessor for UUID();
    v79 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
    swift_bridgeObjectRetain();
    v79(v76, v77, v78);
    v80 = *(int *)(v69 + 24);
    v81 = &__dst[v80];
    v82 = &v92[v80];
    if (*v82)
    {
      v83 = v82[1];
      *v81 = *v82;
      v81[1] = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v81 = *(_OWORD *)v82;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v95 + 56))(__dst, 0, 1, v69);
  }
  *(_BYTE *)(a1 + v97[29]) = *(_BYTE *)(a2 + v97[29]);
  *(_BYTE *)(a1 + v97[30]) = *(_BYTE *)(a2 + v97[30]);
  *(_BYTE *)(a1 + v97[31]) = *(_BYTE *)(a2 + v97[31]);
  *(_BYTE *)(a1 + v97[32]) = *(_BYTE *)(a2 + v97[32]);
  *(_QWORD *)(a1 + v97[33]) = *(_QWORD *)(a2 + v97[33]);
  v84 = *(int *)(a3 + 24);
  *(_WORD *)(a1 + *(int *)(a3 + 20)) = *(_WORD *)(a2 + *(int *)(a3 + 20));
  v85 = a1 + v84;
  v86 = a2 + v84;
  v87 = type metadata accessor for UIButton.Configuration();
  v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 16);
  swift_retain();
  v88(v85, v86, v87);
  return a1;
}

uint64_t assignWithCopy for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _OWORD *v13;
  id *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  id v35;
  int v36;
  id v37;
  void *v38;
  char v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  id v51;
  id v52;
  char v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *v74;
  void *v75;
  id v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  id v90;
  int v91;
  __int128 *v92;
  __int128 *v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _OWORD *v131;
  _OWORD *v132;
  _OWORD *v133;
  uint64_t v134;
  _OWORD *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD *v159;
  _OWORD *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 *v164;
  __int128 *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  void *v174;
  id v175;
  int *v176;
  uint64_t v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t (*v182)(_BYTE *, uint64_t, uint64_t);
  int v183;
  uint64_t (*v184)(uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  void (*v197)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _BYTE *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  _BYTE *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;

  v6 = a2 + 278;
  v7 = *(void **)a1;
  v8 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = v8;

  v10 = *(void **)(a1 + 8);
  v11 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  v12 = v11;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v13 = (_OWORD *)(a1 + 64);
  v14 = (id *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v15 == 0x1FFFFFFFCLL)
    {
      v16 = *(_OWORD *)v14;
      v17 = *(_OWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v18;
      *v13 = v16;
      *(_OWORD *)(a1 + 80) = v17;
      v19 = *(_OWORD *)(a2 + 128);
      v20 = *(_OWORD *)(a2 + 144);
      v21 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 144) = v20;
      v22 = *(_OWORD *)(a2 + 192);
      v23 = *(_OWORD *)(a2 + 208);
      v24 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v23;
      *(_OWORD *)(a1 + 224) = v24;
      *(_OWORD *)(a1 + 192) = v22;
    }
    else
    {
      v34 = *(unsigned __int8 *)(a2 + 72);
      if (v34 == 255)
      {
        v40 = *v14;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v13 = v40;
      }
      else
      {
        v35 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v35;
        *(_BYTE *)(a1 + 72) = v34;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v41 = *(_OWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v41;
      v42 = *(_OWORD *)(a2 + 128);
      v43 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v42;
      *(_OWORD *)(a1 + 144) = v43;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      v44 = *(_QWORD *)(a2 + 184);
      if (v44 >> 1 == 0xFFFFFFFF)
      {
        v45 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v45;
      }
      else
      {
        v46 = *(_QWORD *)(a2 + 168);
        v47 = *(_QWORD *)(a2 + 176);
        v48 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v46, v47, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v46;
        *(_QWORD *)(a1 + 176) = v47;
        *(_QWORD *)(a1 + 184) = v44;
        *(_QWORD *)(a1 + 192) = v48;
      }
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v49 = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v49;
      v50 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v50;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v51 = v50;
    }
  }
  else if (v15 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    v25 = *(_OWORD *)(a2 + 112);
    v27 = *(_OWORD *)v14;
    v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v25;
    *v13 = v27;
    *(_OWORD *)(a1 + 80) = v26;
    v28 = *(_OWORD *)(a2 + 176);
    v30 = *(_OWORD *)(a2 + 128);
    v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v28;
    *(_OWORD *)(a1 + 128) = v30;
    *(_OWORD *)(a1 + 144) = v29;
    v32 = *(_OWORD *)(a2 + 208);
    v31 = *(_OWORD *)(a2 + 224);
    v33 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v32;
    *(_OWORD *)(a1 + 224) = v31;
    *(_OWORD *)(a1 + 192) = v33;
  }
  else
  {
    v36 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v36 == 255)
      {
        v54 = *v14;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v13 = v54;
      }
      else
      {
        v52 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v52;
        *(_BYTE *)(a1 + 72) = v36;
      }
    }
    else if (v36 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      v53 = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v13 = *v14;
      *(_BYTE *)(a1 + 72) = v53;
    }
    else
    {
      v37 = *v14;
      outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
      v38 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v37;
      v39 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v36;
      outlined consume of GraphicsImage.Contents(v38, v39);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    v55 = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v55;
    v56 = *(_OWORD *)(a2 + 128);
    v57 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v56;
    *(_OWORD *)(a1 + 144) = v57;
    *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    v58 = (_OWORD *)(a1 + 168);
    v59 = (_OWORD *)(a2 + 168);
    v60 = *(_QWORD *)(a2 + 184);
    v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v61 == 0x1FFFFFFFELL)
      {
        v62 = *(_OWORD *)(a2 + 184);
        *v58 = *v59;
        *(_OWORD *)(a1 + 184) = v62;
      }
      else
      {
        v64 = *(_QWORD *)(a2 + 168);
        v65 = *(_QWORD *)(a2 + 176);
        v66 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v64, v65, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v64;
        *(_QWORD *)(a1 + 176) = v65;
        *(_QWORD *)(a1 + 184) = v60;
        *(_QWORD *)(a1 + 192) = v66;
      }
    }
    else if (v61 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      v63 = *(_OWORD *)(a2 + 184);
      *v58 = *v59;
      *(_OWORD *)(a1 + 184) = v63;
    }
    else
    {
      v67 = *(_QWORD *)(a2 + 168);
      v68 = *(_QWORD *)(a2 + 176);
      v69 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v67, v68, *(_QWORD *)(a2 + 184));
      v70 = *(_QWORD *)(a1 + 168);
      v71 = *(_QWORD *)(a1 + 176);
      v72 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 168) = v67;
      *(_QWORD *)(a1 + 176) = v68;
      *(_QWORD *)(a1 + 184) = v60;
      *(_QWORD *)(a1 + 192) = v69;
      outlined consume of AccessibilityImageLabel(v70, v71, v72);
    }
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
    v73 = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = v73;
    v74 = *(void **)(a1 + 232);
    v75 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v75;
    v76 = v75;

    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  }
  v77 = (_OWORD *)(a1 + 248);
  v78 = (_OWORD *)(a2 + 248);
  v79 = *(_QWORD *)(a2 + 256);
  if (*(_QWORD *)(a1 + 256))
  {
    if (!v79)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      v87 = *(_OWORD *)(a2 + 264);
      v86 = *(_OWORD *)(a2 + 280);
      *v77 = *v78;
      *(_OWORD *)(a1 + 264) = v87;
      *(_OWORD *)(a1 + 280) = v86;
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v80 = *(void **)(a1 + 264);
    v81 = *(void **)(a2 + 264);
    if ((unint64_t)v80 >= 2)
    {
      if ((unint64_t)v81 >= 2)
      {
        *(_QWORD *)(a1 + 264) = v81;
        v90 = v81;

        goto LABEL_43;
      }

      v81 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v81 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v81;
      v82 = v81;
LABEL_43:
      v91 = *(_DWORD *)(a2 + 272);
      *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v91;
      *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
      *(_BYTE *)(a1 + 278) = *(_BYTE *)v6;
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 264) = v81;
    goto LABEL_43;
  }
  if (v79)
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v83 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v83 >= 2)
      v84 = v83;
    *(_QWORD *)(a1 + 264) = v83;
    v85 = *(_DWORD *)(a2 + 272);
    *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v85;
    *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
    *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    v88 = *v78;
    v89 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v89;
    *v77 = v88;
  }
LABEL_44:
  v92 = (__int128 *)(a1 + 296);
  v93 = (__int128 *)(a2 + 296);
  v94 = *(_QWORD *)(a2 + 328);
  v95 = v94 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(_QWORD *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v95 == 0x3FFFFFFFCLL)
    {
      v96 = *v93;
      v97 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v97;
      *v92 = v96;
      v98 = *(_OWORD *)(a2 + 344);
      v99 = *(_OWORD *)(a2 + 360);
      v100 = *(_OWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v99;
      *(_OWORD *)(a1 + 376) = v100;
      *(_OWORD *)(a1 + 344) = v98;
    }
    else
    {
      v106 = *(void **)(a2 + 296);
      v107 = *(_QWORD *)(a2 + 304);
      v108 = *(_QWORD *)(a2 + 312);
      v109 = *(_QWORD *)(a2 + 320);
      v237 = v6;
      v241 = a3;
      v110 = *(_QWORD *)(a2 + 336);
      v111 = *(_QWORD *)(a2 + 344);
      v112 = *(_QWORD *)(a2 + 352);
      v226 = *(_QWORD *)(a2 + 360);
      v228 = *(_QWORD *)(a2 + 368);
      v230 = *(_QWORD *)(a2 + 376);
      v232 = *(_QWORD *)(a2 + 384);
      v234 = *(_QWORD *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v106, v107, v108, v109, v94, v110, v111, v112, v226, v228, v230, v232, v234);
      *(_QWORD *)(a1 + 296) = v106;
      *(_QWORD *)(a1 + 304) = v107;
      *(_QWORD *)(a1 + 312) = v108;
      *(_QWORD *)(a1 + 320) = v109;
      *(_QWORD *)(a1 + 328) = v94;
      *(_QWORD *)(a1 + 336) = v110;
      *(_QWORD *)(a1 + 344) = v111;
      *(_QWORD *)(a1 + 352) = v112;
      v6 = v237;
      a3 = v241;
      *(_QWORD *)(a1 + 360) = v226;
      *(_QWORD *)(a1 + 368) = v228;
      *(_QWORD *)(a1 + 376) = v230;
      *(_QWORD *)(a1 + 384) = v232;
      *(_QWORD *)(a1 + 392) = v234;
    }
  }
  else if (v95 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    v102 = *(_OWORD *)(a2 + 312);
    v101 = *(_OWORD *)(a2 + 328);
    *v92 = *v93;
    *(_OWORD *)(a1 + 312) = v102;
    *(_OWORD *)(a1 + 328) = v101;
    v104 = *(_OWORD *)(a2 + 360);
    v103 = *(_OWORD *)(a2 + 376);
    v105 = *(_OWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v104;
    *(_OWORD *)(a1 + 376) = v103;
    *(_OWORD *)(a1 + 344) = v105;
  }
  else
  {
    v113 = *(void **)(a2 + 296);
    v114 = *(_QWORD *)(a2 + 304);
    v238 = v6;
    v242 = a3;
    v115 = *(_QWORD *)(a2 + 312);
    v116 = *(_QWORD *)(a2 + 320);
    v117 = *(_QWORD *)(a2 + 336);
    v118 = *(_QWORD *)(a2 + 344);
    v119 = *(_QWORD *)(a2 + 352);
    v227 = *(_QWORD *)(a2 + 360);
    v229 = *(_QWORD *)(a2 + 368);
    v231 = *(_QWORD *)(a2 + 376);
    v233 = *(_QWORD *)(a2 + 384);
    v235 = *(_QWORD *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v113, v114, v115, v116, v94, v117, v118, v119, v227, v229, v231, v233, v235);
    v120 = *(void **)(a1 + 296);
    v121 = *(_QWORD *)(a1 + 304);
    v122 = *(_QWORD *)(a1 + 312);
    v123 = *(_QWORD *)(a1 + 320);
    v124 = *(_QWORD *)(a1 + 328);
    v125 = *(_QWORD *)(a1 + 336);
    v126 = *(_QWORD *)(a1 + 344);
    v127 = *(_QWORD *)(a1 + 352);
    v128 = *(_OWORD *)(a1 + 360);
    v129 = *(_OWORD *)(a1 + 376);
    v130 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 296) = v113;
    *(_QWORD *)(a1 + 304) = v114;
    *(_QWORD *)(a1 + 312) = v115;
    *(_QWORD *)(a1 + 320) = v116;
    *(_QWORD *)(a1 + 328) = v94;
    *(_QWORD *)(a1 + 336) = v117;
    v6 = v238;
    a3 = v242;
    *(_QWORD *)(a1 + 344) = v118;
    *(_QWORD *)(a1 + 352) = v119;
    *(_QWORD *)(a1 + 360) = v227;
    *(_QWORD *)(a1 + 368) = v229;
    *(_QWORD *)(a1 + 376) = v231;
    *(_QWORD *)(a1 + 384) = v233;
    *(_QWORD *)(a1 + 392) = v235;
    outlined consume of PlatformItemList.Item.SystemItem(v120, v121, v122, v123, v124, v125, v126, v127, v128, *((uint64_t *)&v128 + 1), v129, SBYTE8(v129), v130);
  }
  v131 = (_OWORD *)(a1 + 400);
  v132 = (_OWORD *)(v6 + 122);
  v133 = (_OWORD *)(a1 + 408);
  v134 = *(_QWORD *)(a1 + 408);
  v135 = (_OWORD *)(a2 + 408);
  v136 = *(_QWORD *)(a2 + 408);
  if (v134 != 1)
  {
    if (v136 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      *v131 = *v132;
      v141 = *(_OWORD *)(v6 + 154);
      v140 = *(_OWORD *)(v6 + 170);
      v142 = *(_OWORD *)(v6 + 138);
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
      *(_OWORD *)(a1 + 432) = v141;
      *(_OWORD *)(a1 + 448) = v140;
      *(_OWORD *)(a1 + 416) = v142;
      goto LABEL_85;
    }
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(v6 + 122);
    *(_BYTE *)(a1 + 401) = *(_BYTE *)(v6 + 123);
    *(_BYTE *)(a1 + 402) = *(_BYTE *)(v6 + 124);
    *(_BYTE *)(a1 + 403) = *(_BYTE *)(v6 + 125);
    *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
    v148 = *(_QWORD *)(a2 + 408);
    if (v134)
    {
      if (v148)
      {
        v149 = *(_QWORD *)(a2 + 416);
        *(_QWORD *)(a1 + 408) = v148;
        *(_QWORD *)(a1 + 416) = v149;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v148)
    {
      v150 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v148;
      *(_QWORD *)(a1 + 416) = v150;
      swift_retain();
      goto LABEL_70;
    }
    *v133 = *v135;
LABEL_70:
    v151 = *(_QWORD *)(a2 + 424);
    if (*(_QWORD *)(a1 + 424))
    {
      if (v151)
      {
        v152 = *(_QWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 424) = v151;
        *(_QWORD *)(a1 + 432) = v152;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v151)
    {
      v153 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v151;
      *(_QWORD *)(a1 + 432) = v153;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    v147 = *(_QWORD *)(a2 + 440);
    if (*(_QWORD *)(a1 + 440))
    {
      if (v147)
      {
        v154 = *(_QWORD *)(a2 + 448);
        *(_QWORD *)(a1 + 440) = v147;
        *(_QWORD *)(a1 + 448) = v154;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v147)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v136 == 1)
  {
    *v131 = *v132;
    v137 = *(_OWORD *)(v6 + 138);
    v138 = *(_OWORD *)(v6 + 154);
    v139 = *(_OWORD *)(v6 + 170);
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
    *(_OWORD *)(a1 + 432) = v138;
    *(_OWORD *)(a1 + 448) = v139;
    *(_OWORD *)(a1 + 416) = v137;
    goto LABEL_85;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(a2 + 403);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  v143 = *(_QWORD *)(a2 + 408);
  if (v143)
  {
    v144 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v143;
    *(_QWORD *)(a1 + 416) = v144;
    swift_retain();
    v145 = *(_QWORD *)(a2 + 424);
    if (v145)
      goto LABEL_58;
  }
  else
  {
    *v133 = *v135;
    v145 = *(_QWORD *)(a2 + 424);
    if (v145)
    {
LABEL_58:
      v146 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v145;
      *(_QWORD *)(a1 + 432) = v146;
      swift_retain();
      v147 = *(_QWORD *)(a2 + 440);
      if (!v147)
        goto LABEL_65;
LABEL_81:
      v155 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v147;
      *(_QWORD *)(a1 + 448) = v155;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  v147 = *(_QWORD *)(a2 + 440);
  if (v147)
    goto LABEL_81;
LABEL_65:
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_85:
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v156 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v156)
    {
      v157 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v156;
      *(_QWORD *)(a1 + 512) = v157;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v156)
  {
    v158 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v156;
    *(_QWORD *)(a1 + 512) = v158;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v159 = (_OWORD *)(a1 + 528);
  v160 = (_OWORD *)(a2 + 528);
  v161 = *(_QWORD *)(a2 + 528);
  if (*(_QWORD *)(a1 + 528))
  {
    if (v161)
    {
      *(_QWORD *)(a1 + 528) = v161;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      v162 = *(_QWORD *)(a2 + 544);
      *v159 = *v160;
      *(_QWORD *)(a1 + 544) = v162;
    }
  }
  else if (v161)
  {
    *(_QWORD *)(a1 + 528) = v161;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v163 = *v160;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *v159 = v163;
  }
  v164 = (__int128 *)(a1 + 552);
  v165 = (__int128 *)(a2 + 552);
  v166 = *(_QWORD *)(a2 + 552);
  if (*(_QWORD *)(a1 + 552) == 1)
  {
    if (v166 == 1)
    {
      v167 = *v165;
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      *v164 = v167;
      goto LABEL_115;
    }
    *(_QWORD *)(a1 + 552) = v166;
    v169 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (!v169)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      goto LABEL_115;
    }
    v170 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v169;
    goto LABEL_112;
  }
  if (v166 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    v168 = *(_QWORD *)(a2 + 568);
    *v164 = *v165;
    *(_QWORD *)(a1 + 568) = v168;
    goto LABEL_115;
  }
  *(_QWORD *)(a1 + 552) = v166;
  swift_retain();
  swift_release();
  v171 = *(_QWORD *)(a2 + 560);
  if (*(_QWORD *)(a1 + 560))
  {
    if (v171)
    {
      v172 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v171;
      *(_QWORD *)(a1 + 568) = v172;
      swift_retain();
      swift_release();
      goto LABEL_115;
    }
    swift_release();
  }
  else if (v171)
  {
    v170 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v171;
LABEL_112:
    *(_QWORD *)(a1 + 568) = v170;
    swift_retain();
    goto LABEL_115;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_115:
  v173 = *(void **)(a1 + 576);
  v174 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v174;
  v175 = v174;

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_BYTE *)(a1 + 633) = *(_BYTE *)(a2 + 633);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v176 = (int *)type metadata accessor for PlatformItemList.Item();
  v177 = v176[28];
  v178 = (_BYTE *)(a1 + v177);
  v179 = (_BYTE *)(a2 + v177);
  v180 = type metadata accessor for CommandOperation();
  v181 = *(_QWORD *)(v180 - 8);
  v182 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v181 + 48);
  LODWORD(v173) = v182(v178, 1, v180);
  v183 = v182(v179, 1, v180);
  if (!(_DWORD)v173)
  {
    if (!v183)
    {
      v240 = v179;
      v244 = a3;
      *v178 = *v179;
      v202 = *(int *)(v180 + 20);
      v203 = &v178[v202];
      v204 = &v179[v202];
      v205 = *(_QWORD *)v204;
      v206 = *((_QWORD *)v204 + 1);
      v207 = v204[16];
      outlined copy of Text.Storage(*(_QWORD *)v204, v206, v207);
      v208 = *(_QWORD *)v203;
      v209 = *((_QWORD *)v203 + 1);
      v210 = v203[16];
      *(_QWORD *)v203 = v205;
      *((_QWORD *)v203 + 1) = v206;
      v203[16] = v207;
      outlined consume of Text.Storage(v208, v209, v210);
      *((_QWORD *)v203 + 3) = *((_QWORD *)v204 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v211 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v212 = &v203[v211];
      v213 = &v204[v211];
      v214 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v214 - 8) + 24))(v212, v213, v214);
      v215 = *(int *)(v180 + 24);
      v216 = &v178[v215];
      v217 = &v240[v215];
      v218 = *(_QWORD *)&v240[v215];
      if (*v216)
      {
        a3 = v244;
        if (v218)
        {
          v219 = *((_QWORD *)v217 + 1);
          *v216 = v218;
          v216[1] = v219;
          swift_retain();
          swift_release();
          goto LABEL_128;
        }
        swift_release();
      }
      else
      {
        a3 = v244;
        if (v218)
        {
          v225 = *((_QWORD *)v217 + 1);
          *v216 = v218;
          v216[1] = v225;
          swift_retain();
          goto LABEL_128;
        }
      }
      *(_OWORD *)v216 = *(_OWORD *)v217;
      goto LABEL_128;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v178, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v184 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_120;
  }
  if (v183)
  {
    v184 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_120:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v184);
    memcpy(v178, v179, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_128;
  }
  v239 = v179;
  v243 = a3;
  *v178 = *v179;
  v186 = *(int *)(v180 + 20);
  v187 = v179;
  v188 = &v178[v186];
  v236 = v178;
  v189 = &v187[v186];
  v190 = *(_QWORD *)&v187[v186];
  v191 = *(_QWORD *)&v187[v186 + 8];
  v192 = v187[v186 + 16];
  outlined copy of Text.Storage(v190, v191, v192);
  *(_QWORD *)v188 = v190;
  *((_QWORD *)v188 + 1) = v191;
  v188[16] = v192;
  *((_QWORD *)v188 + 3) = *((_QWORD *)v189 + 3);
  v193 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v194 = &v188[v193];
  v195 = &v189[v193];
  v196 = type metadata accessor for UUID();
  v197 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v196 - 8) + 16);
  swift_bridgeObjectRetain();
  v197(v194, v195, v196);
  v198 = *(int *)(v180 + 24);
  v199 = &v236[v198];
  v200 = &v239[v198];
  if (*v200)
  {
    v201 = v200[1];
    *v199 = *v200;
    v199[1] = v201;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v199 = *(_OWORD *)v200;
  }
  a3 = v243;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v181 + 56))(v236, 0, 1, v180);
LABEL_128:
  *(_BYTE *)(a1 + v176[29]) = *(_BYTE *)(a2 + v176[29]);
  *(_BYTE *)(a1 + v176[30]) = *(_BYTE *)(a2 + v176[30]);
  *(_BYTE *)(a1 + v176[31]) = *(_BYTE *)(a2 + v176[31]);
  *(_BYTE *)(a1 + v176[32]) = *(_BYTE *)(a2 + v176[32]);
  *(_QWORD *)(a1 + v176[33]) = *(_QWORD *)(a2 + v176[33]);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + *(int *)(a3 + 20)) = *(_WORD *)(a2 + *(int *)(a3 + 20));
  v220 = *(int *)(a3 + 24);
  v221 = a1 + v220;
  v222 = a2 + v220;
  v223 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v223 - 8) + 24))(v221, v222, v223);
  return a1;
}

uint64_t outlined destroy of Image.NamedResolved(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE7260] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.SystemItem(uint64_t a1)
{
  destroy for PlatformItemList.Item.SystemItem(a1);
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.SelectionBehavior(uint64_t a1)
{
  destroy for PlatformItemList.Item.SelectionBehavior(a1);
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.Accessibility(uint64_t a1)
{
  destroy for SystemSegmentedControl();
  return a1;
}

uint64_t outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t a1)
{
  destroy for PlatformItemList.Item.SecondaryNavigationBehavior(a1);
  return a1;
}

uint64_t initializeWithTake for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  v14 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v14;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v15 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v15;
  v16 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v16;
  v17 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v17;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v18 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v18;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  v19 = *(_QWORD *)(a2 + 504);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v19;
    *(_QWORD *)(a1 + 512) = v20;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v21 = (int *)type metadata accessor for PlatformItemList.Item();
  v22 = v21[28];
  v23 = (_BYTE *)(a1 + v22);
  v24 = (_BYTE *)(a2 + v22);
  v25 = type metadata accessor for CommandOperation();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v28 = *(int *)(v25 + 20);
    v29 = &v23[v28];
    v30 = &v24[v28];
    v31 = *(_OWORD *)&v24[v28 + 16];
    *v29 = *(_OWORD *)&v24[v28];
    v29[1] = v31;
    v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v33 = (char *)v29 + v32;
    v34 = &v30[v32];
    v35 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    v36 = *(int *)(v25 + 24);
    v37 = &v23[v36];
    v38 = (uint64_t *)&v24[v36];
    v39 = *v38;
    if (*v38)
    {
      v40 = v38[1];
      *v37 = v39;
      v37[1] = v40;
    }
    else
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  *(_BYTE *)(a1 + v21[29]) = *(_BYTE *)(a2 + v21[29]);
  *(_BYTE *)(a1 + v21[30]) = *(_BYTE *)(a2 + v21[30]);
  *(_BYTE *)(a1 + v21[31]) = *(_BYTE *)(a2 + v21[31]);
  *(_BYTE *)(a1 + v21[32]) = *(_BYTE *)(a2 + v21[32]);
  *(_QWORD *)(a1 + v21[33]) = *(_QWORD *)(a2 + v21[33]);
  v41 = *(int *)(a3 + 24);
  *(_WORD *)(a1 + *(int *)(a3 + 20)) = *(_WORD *)(a2 + *(int *)(a3 + 20));
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v42, v43, v44);
  return a1;
}

uint64_t assignWithTake for PlatformItemContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  void *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  __int128 v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  int *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(_BYTE *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  _BYTE *v86;
  __int128 v87;
  uint64_t v88;
  char *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;

  v6 = a2 + 278;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = (_OWORD *)(a1 + 64);
  v12 = (_OWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    v13 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v13;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    v15 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v15;
    v16 = *(_OWORD *)(a2 + 80);
    *v11 = *v12;
    *(_OWORD *)(a1 + 80) = v16;
    v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_16;
  }
  v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 != 255)
  {
    v19 = *(unsigned __int8 *)(a2 + 72);
    if (v19 != 255)
    {
      v20 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)v12;
      *(_BYTE *)(a1 + 72) = v19;
      outlined consume of GraphicsImage.Contents(v20, v18);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  v21 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v21;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v22 = *(_QWORD *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v22 >> 1 != 0xFFFFFFFF)
  {
    v23 = *(_QWORD *)(a2 + 184);
    if (v23 >> 1 != 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)(a2 + 192);
      v26 = *(_QWORD *)(a1 + 168);
      v27 = *(_QWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = v23;
      *(_QWORD *)(a1 + 192) = v25;
      outlined consume of AccessibilityImageLabel(v26, v27, v22);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_15:
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  v28 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
LABEL_16:
  if (!*(_QWORD *)(a1 + 256))
  {
LABEL_21:
    v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  v29 = *(_QWORD *)(a2 + 256);
  if (!v29)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  v30 = *(void **)(a1 + 264);
  v31 = *(_QWORD *)(a2 + 264);
  if ((unint64_t)v30 >= 2)
  {
    if (v31 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v31;

    }
    else
    {

      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 264) = v31;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(_BYTE *)(a1 + 278) = *(_BYTE *)v6;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_release();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_release();
LABEL_26:
  v33 = (_OWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a1 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    v36 = *(_OWORD *)(v6 + 98);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v6 + 82);
    *(_OWORD *)(a1 + 376) = v36;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(v6 + 114);
    v37 = *(_OWORD *)(v6 + 34);
    *v33 = *(_OWORD *)(v6 + 18);
    *(_OWORD *)(a1 + 312) = v37;
    v38 = *(_OWORD *)(v6 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v6 + 50);
    *(_OWORD *)(a1 + 344) = v38;
    goto LABEL_31;
  }
  v35 = *(_QWORD *)(a2 + 328);
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  v39 = *(void **)(a1 + 296);
  v40 = *(_QWORD *)(a1 + 304);
  v41 = *(_QWORD *)(a1 + 312);
  v42 = *(_QWORD *)(a1 + 320);
  v43 = *(_QWORD *)(a1 + 336);
  v44 = *(_QWORD *)(a1 + 344);
  v45 = *(_QWORD *)(a1 + 352);
  v46 = *(_OWORD *)(a1 + 360);
  v47 = *(_OWORD *)(a1 + 376);
  v48 = *(_QWORD *)(a1 + 392);
  v49 = *(_OWORD *)(v6 + 34);
  *v33 = *(_OWORD *)(v6 + 18);
  *(_OWORD *)(a1 + 312) = v49;
  *(_QWORD *)(a1 + 328) = v35;
  v50 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v50;
  v51 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v51;
  outlined consume of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v34, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, SBYTE8(v47), v48);
LABEL_31:
  v52 = *(_QWORD *)(a1 + 408);
  if (v52 == 1)
  {
LABEL_34:
    v54 = *(_OWORD *)(v6 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v6 + 154);
    *(_OWORD *)(a1 + 448) = v54;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
    v55 = *(_OWORD *)(v6 + 138);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 122);
    *(_OWORD *)(a1 + 416) = v55;
    goto LABEL_57;
  }
  v53 = *(_QWORD *)(a2 + 408);
  if (v53 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(v6 + 122);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(v6 + 123);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(v6 + 124);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(v6 + 125);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v52)
  {
    if (v53)
    {
      v56 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v53;
      *(_QWORD *)(a1 + 416) = v56;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v53)
  {
    v57 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v53;
    *(_QWORD *)(a1 + 416) = v57;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  v58 = *(_QWORD *)(a2 + 424);
  if (*(_QWORD *)(a1 + 424))
  {
    if (v58)
    {
      v59 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v58;
      *(_QWORD *)(a1 + 432) = v59;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v58)
  {
    v60 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = v58;
    *(_QWORD *)(a1 + 432) = v60;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  v61 = *(_QWORD *)(a2 + 440);
  if (!*(_QWORD *)(a1 + 440))
  {
    if (v61)
    {
      v63 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v61;
      *(_QWORD *)(a1 + 448) = v63;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v61)
  {
    swift_release();
    goto LABEL_55;
  }
  v62 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v61;
  *(_QWORD *)(a1 + 448) = v62;
  swift_release();
LABEL_56:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_57:
  v64 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v64;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v65 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v65)
    {
      v66 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v65;
      *(_QWORD *)(a1 + 512) = v66;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v65)
  {
    v67 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v65;
    *(_QWORD *)(a1 + 512) = v67;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  if (*(_QWORD *)(a1 + 528))
  {
    v68 = *(_QWORD *)(a2 + 528);
    if (v68)
    {
      *(_QWORD *)(a1 + 528) = v68;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
LABEL_69:
  if (*(_QWORD *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    goto LABEL_73;
  }
  v69 = *(_QWORD *)(a2 + 552);
  if (v69 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(_QWORD *)(a1 + 552) = v69;
  swift_release();
  v82 = *(_QWORD *)(a2 + 560);
  if (*(_QWORD *)(a1 + 560))
  {
    if (v82)
    {
      v83 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v82;
      *(_QWORD *)(a1 + 568) = v83;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v82)
  {
    v112 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v82;
    *(_QWORD *)(a1 + 568) = v112;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_73:
  v70 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v71 = (int *)type metadata accessor for PlatformItemList.Item();
  v72 = v71[28];
  v73 = (_BYTE *)(a1 + v72);
  v74 = (_BYTE *)(a2 + v72);
  v75 = type metadata accessor for CommandOperation();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v76 + 48);
  v78 = v77(v73, 1, v75);
  v79 = v77(v74, 1, v75);
  if (!v78)
  {
    if (!v79)
    {
      *v73 = *v74;
      v97 = *(int *)(v75 + 20);
      v98 = &v73[v97];
      v99 = &v74[v97];
      LOBYTE(v97) = v74[v97 + 16];
      v100 = *(_QWORD *)v98;
      v101 = *((_QWORD *)v98 + 1);
      v102 = v98[16];
      *(_OWORD *)v98 = *(_OWORD *)v99;
      v98[16] = v97;
      outlined consume of Text.Storage(v100, v101, v102);
      *((_QWORD *)v98 + 3) = *((_QWORD *)v99 + 3);
      swift_bridgeObjectRelease();
      v103 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v104 = &v98[v103];
      v105 = &v99[v103];
      v106 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v106 - 8) + 40))(v104, v105, v106);
      v107 = *(int *)(v75 + 24);
      v108 = &v73[v107];
      v109 = (uint64_t *)&v74[v107];
      v110 = *v109;
      if (*v108)
      {
        if (v110)
        {
          v111 = v109[1];
          *v108 = v110;
          v108[1] = v111;
          swift_release();
          goto LABEL_91;
        }
        swift_release();
      }
      else if (v110)
      {
        v118 = v109[1];
        *v108 = v110;
        v108[1] = v118;
        goto LABEL_91;
      }
      *(_OWORD *)v108 = *(_OWORD *)v109;
      goto LABEL_91;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v80 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_78;
  }
  if (v79)
  {
    v80 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_78:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v80);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_91;
  }
  *v73 = *v74;
  v84 = *(int *)(v75 + 20);
  v85 = &v73[v84];
  v86 = &v74[v84];
  v87 = *(_OWORD *)&v74[v84 + 16];
  *v85 = *(_OWORD *)&v74[v84];
  v85[1] = v87;
  v88 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v89 = (char *)v85 + v88;
  v90 = &v86[v88];
  v91 = type metadata accessor for UUID();
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v91 - 8) + 32))(v89, v90, v91);
  v92 = *(int *)(v75 + 24);
  v93 = &v73[v92];
  v94 = (uint64_t *)&v74[v92];
  v95 = *v94;
  if (*v94)
  {
    v96 = v94[1];
    *v93 = v95;
    v93[1] = v96;
  }
  else
  {
    *(_OWORD *)v93 = *(_OWORD *)v94;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
LABEL_91:
  *(_BYTE *)(a1 + v71[29]) = *(_BYTE *)(a2 + v71[29]);
  *(_BYTE *)(a1 + v71[30]) = *(_BYTE *)(a2 + v71[30]);
  *(_BYTE *)(a1 + v71[31]) = *(_BYTE *)(a2 + v71[31]);
  *(_BYTE *)(a1 + v71[32]) = *(_BYTE *)(a2 + v71[32]);
  *(_QWORD *)(a1 + v71[33]) = *(_QWORD *)(a2 + v71[33]);
  swift_release();
  v113 = *(int *)(a3 + 24);
  *(_WORD *)(a1 + *(int *)(a3 + 20)) = *(_WORD *)(a2 + *(int *)(a3 + 20));
  v114 = a1 + v113;
  v115 = a2 + v113;
  v116 = type metadata accessor for UIButton.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 40))(v114, v115, v116);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_186FD4578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for PlatformItemList.Item();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for UIButton.Configuration();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PlatformItemContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_186FD45F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for PlatformItemList.Item();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for UIButton.Configuration();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for PlatformItemContent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UIButton.Configuration();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for UIKitButtonConfiguration(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 8))
    result = swift_release();
  if (*(_QWORD *)(v1 + 56))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for UIKitButtonConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  return a1;
}

uint64_t assignWithCopy for UIKitButtonConfiguration(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v9 = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v9;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  v11 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = v13;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIKitButtonConfiguration(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  if (!v10)
  {
    if (v9)
    {
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v9;
      *(_QWORD *)(a1 + 64) = v12;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitButtonConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitButtonConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedUIKitButtonBody()
{
  return &type metadata for ResolvedUIKitButtonBody;
}

uint64_t type metadata completion function for ButtonStyleContent()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ButtonStyleContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = v9 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((((v10 + ((v9 + v7 + 2) & ~v9) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    *(_WORD *)((char *)v4 + v7) = *(_WORD *)((char *)a2 + v7);
    v15 = (char *)a2 + v7 + v9;
    v16 = ((unint64_t)v4 + v7 + v9 + 2) & ~v9;
    v17 = (unint64_t)(v15 + 2) & ~v9;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v16, v17, v5);
    v18 = v16 + v10;
    v19 = v17 + v10;
    v20 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    LOBYTE(v16) = *(_BYTE *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v21, v16);
    *(_QWORD *)v20 = v22;
    *(_BYTE *)(v20 + 8) = v16;
    v23 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
    v25 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    v26 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v25 = *(_BYTE *)v26;
    *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ButtonStyleContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (a1 + v5 + *(unsigned __int8 *)(v6 + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v7 + *(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v7 + *(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_WORD *)(v7 + a1);
  v9 = (_WORD *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 2) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = v12 + v14;
  v16 = v13 + v14;
  v17 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  LOBYTE(v13) = *(_BYTE *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v13);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v13;
  v20 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  v22 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_WORD *)(v7 + a1);
  v9 = (_WORD *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 2) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = v12 + v14;
  v16 = v13 + v14;
  v17 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  LOBYTE(v13) = *(_BYTE *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v13);
  v20 = *(_QWORD *)v17;
  v21 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v13;
  outlined consume of Environment<Bool>.Content(v20, v21);
  v22 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  swift_retain();
  swift_release();
  v24 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  _OWORD *v20;
  _OWORD *v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_WORD *)(v7 + a1);
  v9 = (_WORD *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 2) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = v12 + v14;
  v16 = v13 + v14;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  v20 = (_OWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_OWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  *(_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ButtonStyleContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (_WORD *)(v7 + a1);
  v9 = (_WORD *)(v7 + a2);
  *v8 = *v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v8 + v11 + 2) & ~v11;
  v13 = ((unint64_t)v9 + v11 + 2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = v12 + v14;
  v16 = v13 + v14;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  LOBYTE(v18) = *(_BYTE *)(v18 + 8);
  v20 = *(_QWORD *)v17;
  v21 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v18;
  outlined consume of Environment<Bool>.Content(v20, v21);
  v22 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  swift_release();
  v24 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonStyleContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  int v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFE)
    v9 = 2147483646;
  if (!a2)
    return 0;
  v10 = *(_QWORD *)(v5 + 64);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = *(_QWORD *)(v7 + 64) + 23;
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (a1 + v10 + v11 + 2) & ~v11;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)(((v12 + v17) & 0xFFFFFFFFFFFFF8) + 8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        v19 = v18 - 1;
        if (v19 < 0)
          v19 = -1;
        return (v19 + 1);
      }
    }
  }
  else
  {
    if (((((((v12 + ((v10 + v11 + 2) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186FD52A0 + 4 * byte_187BFE804[v15]))();
  }
}

void storeEnumTagSinglePayload for ButtonStyleContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v7 = 2147483646;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64) + 23 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8 + 2) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X4 }
  }
  if (((((*(_DWORD *)(v6 + 64) + 23 + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8 + 2) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + 23 + ((*(_QWORD *)(v5 + 64) + v8 + 2) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_186FD5484()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186FD5528);
}

void sub_186FD548C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FD5494);
  JUMPOUT(0x186FD5528);
}

void sub_186FD54E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FD5528);
}

void sub_186FD54E8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FD5528);
}

uint64_t sub_186FD54F0(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)(v13 + v14) = 0;
  if (!a2)
    JUMPOUT(0x186FD5528);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v13;
  }
  else
  {
    v4 = (v13 + v12 + v11 + 2) & v7;
    if (a3 != v9)
      JUMPOUT(0x186FD54FCLL);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void *type metadata accessor for _UIKitButtonAdaptorContent_Options()
{
  return &unk_1E1B04DE8;
}

void sub_186FD5550()
{
  lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_186FD5584()
{
  uint64_t v0;
  _QWORD v2[10];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
  v2[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

void sub_186FD55D0()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
  lazy protocol witness table accessor for type HStack<UIKitButtonConfiguration.Label> and conformance HStack<A>();
  type metadata accessor for ButtonStyleContent();
}

uint64_t sub_186FD562C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[12];

  v2 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContent<A, B>, a1);
  type metadata accessor for UIKitButtonAdaptor(255, a1, v2, v3);
  type metadata accessor for StaticSourceWriter<ButtonStyleConfiguration.Label, HStack<UIKitButtonConfiguration.Label>>();
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<ActionPlatformItemListFlags>, (uint64_t)&type metadata for ActionPlatformItemListFlags, (uint64_t)&protocol witness table for ActionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  v5 = type metadata accessor for ModifiedContent();
  v9[0] = &protocol witness table for UIKitButtonAdaptor<A>;
  v9[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v6 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v9);
  v8[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  return MEMORY[0x18D75FFDC](v6, v5, v8);
}

uint64_t associated type witness table accessor for ButtonStyleContentResolvedBodyProvider.ResolvedBody : View in ButtonStyleContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedUIKitButtonBody()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKitSystemButtonConfigurationModifier and conformance UIKitSystemButtonConfigurationModifier, type metadata accessor for UIKitSystemButtonConfigurationModifier, (uint64_t)&protocol conformance descriptor for UIKitSystemButtonConfigurationModifier);
}

unint64_t instantiation function for generic protocol witness table for ResolvedUIKitButtonBody(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedUIKitButtonBody and conformance ResolvedUIKitButtonBody();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedUIKitButtonBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsVisionEnabled;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    IsVisionEnabled = type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsVisionEnabled, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t outlined init with copy of UIButton.Configuration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UIButton.Configuration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIButton.Configuration?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UIButton.Configuration?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC3228], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_186FD5A84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[2];

  type metadata accessor for ResolvedButtonStyleBody(255, *a1, a1[2], a4);
  type metadata accessor for StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier>();
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = &protocol witness table for ResolvedButtonStyleBody<A>;
  v6[1] = lazy protocol witness table accessor for type StaticIf<IsVisionEnabledPredicate, _EnvironmentKeyWritingModifier<Bool?>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
}

ValueMetadata *type metadata accessor for InsetListLabelStyle()
{
  return &type metadata for InsetListLabelStyle;
}

ValueMetadata *type metadata accessor for SidebarLabelStyle()
{
  return &type metadata for SidebarLabelStyle;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in InsetListLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  KeyPath = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  v3 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v3;
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = result;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = KeyPath;
  *(_WORD *)(a1 + 88) = 0;
  return result;
}

uint64_t InsetListLabelStyle.StyleView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 v20;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v1, v4);
  v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if ((v5 & 1) != 0)
  {
    KeyPath = swift_getKeyPath();
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    ScaledMetric.init(wrappedValue:)();
    v7 = v15;
    v8 = v16;
    v9 = v17;
    v10 = v18;
    v11 = v19;
    v12 = v20;
    v13 = swift_getKeyPath();
    result = swift_getKeyPath();
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    result = 0;
    KeyPath = 0;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = result;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = KeyPath;
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = (v5 & 1) == 0;
  return result;
}

BOOL protocol witness for static View._viewListCount(inputs:) in conformance InsetListLabelStyle.StyleView()
{
  uint64_t v0;
  char v1;

  type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  lazy protocol witness table accessor for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>();
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  return (v1 & 1) == 0 && v0 == 1;
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance InsetListLabelStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in SidebarLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarRow_iOS.iconShapeStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  v16 = *(_QWORD *)(v0 + 48);
  v15 = *(unsigned __int8 *)(v0 + 56);
  v17 = *(_BYTE *)(v0 + 57);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_BYTE *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(unsigned __int8 *)(v0 + 88);
  v9 = *(unsigned __int8 *)(v0 + 89);
  outlined copy of Environment<Bool>.Content(v5, v6);
  specialized Environment.wrappedValue.getter(v5, v6, &v18);
  outlined consume of Environment<Bool>.Content(v5, v6);
  v21 = v18;
  static BackgroundProminence.increased.getter();
  v19 = v20;
  if ((static BackgroundProminence.== infix(_:_:)() & 1) != 0)
  {
    LODWORD(v18) = 0;
    return AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    outlined copy of Environment<Bool>.Content(v1, v2);
    outlined copy of Environment<Bool>.Content(v3, v4);
    outlined copy of Environment<CGFloat?>.Content(v16, v15, v17);
    outlined copy of Environment<Bool>.Content(v5, v6);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8), (uint64_t)&v18);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    outlined consume of Environment<Bool>.Content(v1, v2);
    outlined consume of Environment<Bool>.Content(v3, v4);
    outlined consume of Environment<CGFloat?>.Content(v16, v15, v17);
    outlined consume of Environment<Bool>.Content(v5, v6);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    v11 = v18;
    if (v18 == 1)
      return AnyShapeStyle.init<A>(_:)();
    v13 = static Color.secondary.getter();
    if (v11)
    {
      v14 = v11;
    }
    else
    {
      swift_retain();
      v14 = v13;
    }
    swift_retain();
    swift_release();
    v18 = v14;
    v10 = AnyShapeStyle.init<A>(_:)();
    outlined consume of Transaction?(v11);
  }
  return v10;
}

uint64_t closure #1 in SidebarRow_iOS.body.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _BYTE v10[32];

  *(_OWORD *)&v10[16] = a1[2];
  v4 = SidebarRow_iOS.iconShapeStyle.getter();
  KeyPath = swift_getKeyPath();
  v9 = *a1;
  *(_OWORD *)v10 = a1[1];
  *(_OWORD *)&v10[9] = *(__int128 *)((char *)a1 + 25);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE18B8]);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  result = _FrameLayout.init(width:height:alignment:)();
  v7 = *(_OWORD *)&v10[16];
  if (one-time initialization token for listRowSeparatorLeading != -1)
  {
    result = swift_once();
    v7 = *(_OWORD *)&v10[16];
  }
  v8 = static HorizontalAlignment.listRowSeparatorLeading;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_BYTE *)(a2 + 16) = 2;
  *(_QWORD *)(a2 + 24) = v9;
  *(_BYTE *)(a2 + 32) = BYTE8(v9);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)v10;
  *(_BYTE *)(a2 + 48) = v10[8];
  *(_OWORD *)(a2 + 56) = v7;
  *(_QWORD *)(a2 + 72) = v8;
  *(_QWORD *)(a2 + 80) = closure #1 in closure #1 in closure #1 in SidebarRow_iOS.body.getter;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in SidebarRow_iOS.body.getter()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.leading.getter();
  return MEMORY[0x18D757CA8](v0);
}

__n128 protocol witness for View.body.getter in conformance SidebarRow_iOS@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  uint64_t TextLine;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __n128 result;
  __int128 v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  __n128 v31;
  __int128 v32[3];
  __int128 v33;
  _OWORD v34[2];

  v3 = v1[3];
  v32[2] = v1[2];
  v33 = v3;
  v34[0] = v1[4];
  *(_OWORD *)((char *)v34 + 10) = *(__int128 *)((char *)v1 + 74);
  v4 = v1[1];
  v32[0] = *v1;
  v32[1] = v4;
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  v6 = v33;
  v7 = BYTE8(v33);
  v8 = BYTE9(v33);
  outlined retain of SidebarRow_iOS((uint64_t)v32);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  v9 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  v11 = v10;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  outlined release of SidebarRow_iOS((uint64_t)v32);
  if ((v11 & 1) != 0)
    v12 = 0x4024000000000000;
  else
    v12 = v9;
  closure #1 in SidebarRow_iOS.body.getter(v32, (uint64_t)v23);
  v13 = v23[0];
  v14 = v23[1];
  v15 = v24;
  v16 = v25;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  v20 = v30;
  result = v31;
  v22 = v29;
  *(_QWORD *)a1 = TextLine;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v14;
  *(_BYTE *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 56) = v17;
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 72) = v19;
  *(_OWORD *)(a1 + 80) = v22;
  *(_QWORD *)(a1 + 96) = v20;
  *(__n128 *)(a1 + 104) = result;
  return result;
}

uint64_t outlined copy of Environment<ListItemTint?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined copy of Transaction?(result);
  else
    return swift_retain();
}

uint64_t destroy for SidebarRow_iOS(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_BYTE *)(a1 + 57));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
  return outlined consume of Environment<ListItemTint?>.Content(*(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 88), *(_BYTE *)(a1 + 89));
}

uint64_t outlined consume of Environment<ListItemTint?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return outlined consume of Transaction?(result);
  else
    return swift_release();
}

uint64_t initializeWithCopy for SidebarRow_iOS(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 57);
  v10 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 57) = v9;
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_BYTE *)(a2 + 89);
  v15 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<ListItemTint?>.Content(v13, v15, v14);
  *(_QWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 88) = v15;
  *(_BYTE *)(a1 + 89) = v14;
  return a1;
}

uint64_t assignWithCopy for SidebarRow_iOS(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_BYTE *)(a2 + 57);
  v14 = *(_BYTE *)(a2 + 56);
  outlined copy of Environment<CGFloat?>.Content(v12, v14, v13);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_BYTE *)(a1 + 57);
  *(_QWORD *)(a1 + 48) = v12;
  v17 = *(unsigned __int8 *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 57) = v13;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = *(_QWORD *)(a2 + 64);
  v19 = *(_BYTE *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v18, v19);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v18;
  *(_BYTE *)(a1 + 72) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  v22 = *(_QWORD *)(a2 + 80);
  v23 = *(_BYTE *)(a2 + 89);
  v24 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<ListItemTint?>.Content(v22, v24, v23);
  v25 = *(_QWORD *)(a1 + 80);
  v26 = *(_BYTE *)(a1 + 89);
  *(_QWORD *)(a1 + 80) = v22;
  v27 = *(unsigned __int8 *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = v24;
  *(_BYTE *)(a1 + 89) = v23;
  outlined consume of Environment<ListItemTint?>.Content(v25, v27, v26);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SidebarRow_iOS(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v11 = *((_BYTE *)a2 + 56);
  v12 = *((_BYTE *)a2 + 57);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_BYTE *)(a1 + 57);
  *(_QWORD *)(a1 + 48) = a2[6];
  v15 = *(unsigned __int8 *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 57) = v12;
  outlined consume of Environment<CGFloat?>.Content(v13, v15, v14);
  v16 = *((_BYTE *)a2 + 72);
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  v19 = *((_BYTE *)a2 + 88);
  v20 = *((_BYTE *)a2 + 89);
  v21 = *(_QWORD *)(a1 + 80);
  v22 = *(_BYTE *)(a1 + 89);
  *(_QWORD *)(a1 + 80) = a2[10];
  v23 = *(unsigned __int8 *)(a1 + 88);
  *(_BYTE *)(a1 + 88) = v19;
  *(_BYTE *)(a1 + 89) = v20;
  outlined consume of Environment<ListItemTint?>.Content(v21, v23, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarRow_iOS(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 90))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarRow_iOS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 90) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for SidebarRow_iOS()
{
  return &unk_1E1AB9478;
}

void *type metadata accessor for InsetListLabelStyle.StyleView()
{
  return &unk_1E1ACE458;
}

unint64_t lazy protocol witness table accessor for type SidebarRow_iOS and conformance SidebarRow_iOS()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarRow_iOS and conformance SidebarRow_iOS;
  if (!lazy protocol witness table cache variable for type SidebarRow_iOS and conformance SidebarRow_iOS)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarRow_iOS, &unk_1E1AB9478);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarRow_iOS and conformance SidebarRow_iOS);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView;
  if (!lazy protocol witness table cache variable for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetListLabelStyle.StyleView, &unk_1E1ACE458);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListLabelStyle.StyleView and conformance InsetListLabelStyle.StyleView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in InsetListLabelStyle.StyleView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SidebarRow_iOS()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of SidebarRow_iOS(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 57);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v12 = *(_BYTE *)(a1 + 89);
  v9 = *(unsigned __int8 *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined copy of Environment<Bool>.Content(v6, v7);
  outlined copy of Environment<ListItemTint?>.Content(v8, v10, v12);
  return a1;
}

uint64_t outlined release of SidebarRow_iOS(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(a1 + 57);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v12 = *(_BYTE *)(a1 + 89);
  v9 = *(unsigned __int8 *)(a1 + 56);
  v10 = *(unsigned __int8 *)(a1 + 88);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<CGFloat?>.Content(v4, v9, v5);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined consume of Environment<ListItemTint?>.Content(v8, v10, v12);
  return a1;
}

uint64_t type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>;
  if (!lazy cache variable for type metadata for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>)
    type metadata accessor for Label();
  return result;
}

unint64_t lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListLabelStyle and conformance ListLabelStyle;
  if (!lazy protocol witness table cache variable for type ListLabelStyle and conformance ListLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListLabelStyle, &type metadata for ListLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListLabelStyle and conformance ListLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

uint64_t sub_186FD6B6C()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>)
  {
    type metadata accessor for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)>);
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>();
    type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>)
  {
    type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>);
  }
}

void type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E0CE4EC0], MEMORY[0x1E0CE4EB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _DefaultForegroundStyleModifier<AnyShapeStyle>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E0CE4EC0], MEMORY[0x1E0CE4EB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
  }
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, LabelStyleConfiguration.Title>)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _AlignmentWritingModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title, (uint64_t)&type metadata for _AlignmentWritingModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, MEMORY[0x1E0CE6010]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E0CE4EC0], MEMORY[0x1E0CE4EB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    v0 = type metadata accessor for InvertedViewInputPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type SidebarRow_iOS and conformance SidebarRow_iOS();
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>();
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SidebarRow_iOS, ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>>);
  }
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>)
  {
    type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, LabelStyleWritingModifier<ListLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void specialized UIDevice.screenSize.getter()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v0, sel_bounds);

  v1 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  objc_msgSend(v1, sel_orientation);

}

uint64_t EnvironmentValues.isInExpandedSplitView.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.isInExpandedSplitView : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInExpandedSplitView.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isInExpandedSplitView : EnvironmentValues()
{
  return EnvironmentValues.isInExpandedSplitView.setter();
}

SwiftUI::ColumnNavigationViewStyle __swiftcall ColumnNavigationViewStyle.init()()
{
  _BYTE *v0;
  SwiftUI::ColumnNavigationViewStyle result;

  *v0 = 1;
  return result;
}

void ColumnNavigationViewStyle._body(configuration:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ColumnNavigationView.BodyContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(_QWORD);
  _BYTE *v7;
  void (*v8)(uint64_t);
  unint64_t v9;
  _BYTE __src[345];
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[25];
  _OWORD v20[6];
  char v21;
  _OWORD v22[6];
  char v23;
  _OWORD __dst[22];

  v3 = v1 + 8;
  v4 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = _VariadicView_Children.endIndex.getter();
  if (v4 < 0 || result < v4)
    goto LABEL_17;
  switch(v4)
  {
    case 2:
      _VariadicView_Children.subscript.getter();
      outlined init with copy of _VariadicView_Children.Element((uint64_t)__dst, (uint64_t)__src);
      __src[96] = 2;
      outlined destroy of _VariadicView_Children.Element((uint64_t)__dst);
      _VariadicView_Children.subscript.getter();
      outlined init with copy of _VariadicView_Children.Element((uint64_t)__dst, (uint64_t)&v12);
      LOBYTE(v18) = 1;
      outlined destroy of _VariadicView_Children.Element((uint64_t)__dst);
      BYTE1(__dst[6]) = 1;
      __dst[4] = *(_OWORD *)&__src[64];
      __dst[5] = *(_OWORD *)&__src[80];
      LOBYTE(__dst[6]) = __src[96];
      __dst[0] = *(_OWORD *)__src;
      __dst[1] = *(_OWORD *)&__src[16];
      __dst[2] = *(_OWORD *)&__src[32];
      __dst[3] = *(_OWORD *)&__src[48];
      *(_OWORD *)((char *)&__dst[7] + 8) = v13;
      *(_OWORD *)((char *)&__dst[8] + 8) = v14;
      *(_OWORD *)((char *)&__dst[6] + 8) = v12;
      BYTE8(__dst[12]) = v18;
      *(_OWORD *)((char *)&__dst[11] + 8) = v17;
      *(_OWORD *)((char *)&__dst[10] + 8) = v16;
      *(_OWORD *)((char *)&__dst[9] + 8) = v15;
      v6 = (uint64_t (*)(_QWORD))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>);
      v11 = 0;
      v8 = type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__src, a1, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
      *(_BYTE *)(a1 + 346) = 1;
LABEL_14:
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__src, (uint64_t (*)(_QWORD))v8);
      v7 = __dst;
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, v6);
    case 1:
      _VariadicView_Children.subscript.getter();
      outlined init with copy of _VariadicView_Children.Element((uint64_t)__dst, (uint64_t)__src);
      __src[96] = 2;
      outlined destroy of _VariadicView_Children.Element((uint64_t)__dst);
      BYTE1(__dst[6]) = 1;
      __dst[4] = *(_OWORD *)&__src[64];
      __dst[5] = *(_OWORD *)&__src[80];
      LOBYTE(__dst[6]) = __src[96];
      __dst[0] = *(_OWORD *)__src;
      __dst[1] = *(_OWORD *)&__src[16];
      __dst[2] = *(_OWORD *)&__src[32];
      __dst[3] = *(_OWORD *)&__src[48];
      v6 = (uint64_t (*)(_QWORD))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>);
      __src[98] = 1;
      v8 = type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__src, a1, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>);
      *(_BYTE *)(a1 + 346) = 0;
      goto LABEL_14;
    case 0:
      __src[0] = 1;
      __src[98] = 0;
      v6 = (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__src, a1, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>);
      *(_BYTE *)(a1 + 346) = 0;
      v7 = __src;
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, v6);
  }
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _VariadicView_Children.Element((uint64_t)__src, (uint64_t)v22);
  v23 = 1;
  outlined destroy of _VariadicView_Children.Element((uint64_t)__src);
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _VariadicView_Children.Element((uint64_t)__src, (uint64_t)v20);
  v21 = 2;
  outlined destroy of _VariadicView_Children.Element((uint64_t)__src);
  *(_OWORD *)__src = (unint64_t)static VerticalAlignment.center.getter();
  __src[16] = 0;
  result = _VariadicView_Children.endIndex.getter();
  if (result < 2)
    goto LABEL_18;
  v9 = result;
  result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (result >= v9)
  {
    outlined init with copy of _VariadicView_Children(v3, (uint64_t)&__dst[1]);
    *(_QWORD *)&__dst[0] = 2;
    *((_QWORD *)&__dst[0] + 1) = v9;
    type metadata accessor for Slice<_VariadicView_Children>();
    lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element();
    ForEach<>.init(_:content:)();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__src, (uint64_t)&v12, (uint64_t (*)(_QWORD))type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>);
    v19[24] = 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>);
    memset(&__src[104], 0, 97);
    *(_OWORD *)&__src[64] = v22[4];
    *(_OWORD *)&__src[80] = v22[5];
    __src[96] = v23;
    *(_OWORD *)__src = v22[0];
    *(_OWORD *)&__src[16] = v22[1];
    *(_OWORD *)&__src[32] = v22[2];
    *(_OWORD *)&__src[48] = v22[3];
    *(_OWORD *)&__src[329] = *(_OWORD *)&v19[9];
    *(_OWORD *)&__src[304] = v18;
    *(_OWORD *)&__src[320] = *(_OWORD *)v19;
    *(_OWORD *)&__src[240] = v14;
    *(_OWORD *)&__src[256] = v15;
    *(_OWORD *)&__src[272] = v16;
    *(_OWORD *)&__src[288] = v17;
    *(_OWORD *)&__src[208] = v12;
    *(_OWORD *)&__src[224] = v13;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&__src[104], (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?);
    *(_OWORD *)&__src[152] = v20[3];
    *(_OWORD *)&__src[168] = v20[4];
    *(_OWORD *)&__src[184] = v20[5];
    __src[200] = v21;
    *(_OWORD *)&__src[104] = v20[0];
    *(_OWORD *)&__src[120] = v20[1];
    *(_OWORD *)&__src[136] = v20[2];
    memcpy(__dst, __src, 0x159uLL);
    v6 = (uint64_t (*)(_QWORD))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__dst, (uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>);
    v11 = 1;
    v8 = type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)__src, a1, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
    *(_BYTE *)(a1 + 346) = 1;
    goto LABEL_14;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in ColumnNavigationView.BodyContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _VariadicView_Children.Element(a1, a2);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance ColumnNavigationView()
{
  lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView();
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance ColumnNavigationView@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char *v2;
  char v4;
  uint64_t result;

  v4 = *v2;
  result = outlined init with copy of _VariadicView_Children(a1, (uint64_t)(a2 + 8));
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance ColumnNavigationView()
{
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    return 512;
  else
    return 0;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ExpandedSplitViewKey@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for defaultValue != -1)
    result = swift_once();
  *a1 = static ExpandedSplitViewKey.defaultValue;
  return result;
}

uint64_t (*EnvironmentValues.isInExpandedSplitView.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.isInExpandedSplitView.modify;
}

uint64_t EnvironmentValues.isInExpandedSplitView.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

double EnvironmentValues.disclosureGroupIndicatorTrailingPadding.getter()
{
  uint64_t *v0;
  uint64_t v1;
  double result;
  uint64_t v3;
  char v4;

  v1 = v0[1];
  v3 = *v0;
  EnvironmentValues.horizontalSizeClass.getter();
  if (v4 == 2 || (result = 0.0, (v4 & 1) != 0))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v1)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    result = 8.0;
    if ((_BYTE)v3)
      return 4.0;
  }
  return result;
}

uint64_t View.prefersExpandedSidebars(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_186FD7DEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isInExpandedSplitView.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_186FD7E28()
{
  return EnvironmentValues.isInExpandedSplitView.setter();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in ColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in ColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ColumnNavigationViewStyle()
{
  return &type metadata for ColumnNavigationViewStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>();
    v2[0] = lazy protocol witness table accessor for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>();
    v2[1] = lazy protocol witness table accessor for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>, _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>>)
  {
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _VariadicView.Tree();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView();
    v3[1] = &protocol witness table for _NavigationViewStyleConfiguration.Content;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView;
  if (!lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnNavigationView, &type metadata for ColumnNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView;
  if (!lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnNavigationView, &type metadata for ColumnNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationView and conformance ColumnNavigationView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<ColumnNavigationView, _NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView();
    v3[1] = &protocol witness table for _NavigationViewStyleConfiguration.Content;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<DoubleColumnNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView;
  if (!lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DoubleColumnNavigationView, &type metadata for DoubleColumnNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView;
  if (!lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DoubleColumnNavigationView, &type metadata for DoubleColumnNavigationView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView);
  }
  return result;
}

uint64_t sub_186FD8174()
{
  return MEMORY[0x1E0CE7C28];
}

uint64_t sub_186FD8180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t storeEnumTagSinglePayload for ColumnNavigationViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186FD824C + 4 * byte_187BFF885[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186FD8280 + 4 * byte_187BFF880[v4]))();
}

uint64_t sub_186FD8280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FD8288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186FD8290);
  return result;
}

uint64_t sub_186FD829C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186FD82A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186FD82A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FD82B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ColumnNavigationView()
{
  return &type metadata for ColumnNavigationView;
}

ValueMetadata *type metadata accessor for ExpandedSplitViewKey()
{
  return &type metadata for ExpandedSplitViewKey;
}

unint64_t instantiation function for generic protocol witness table for ColumnNavigationView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ColumnNavigationView and conformance ColumnNavigationView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in ColumnNavigationView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ColumnNavigationView.BodyContent(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ColumnNavigationView.BodyContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  v5 = *(void **)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ColumnNavigationView.BodyContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v4 = *(void **)(a2 + 48);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ColumnNavigationView.BodyContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;

  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ColumnNavigationView.BodyContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColumnNavigationView.BodyContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColumnNavigationView.BodyContent()
{
  return &type metadata for ColumnNavigationView.BodyContent;
}

unint64_t lazy protocol witness table accessor for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent;
  if (!lazy protocol witness table cache variable for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnNavigationView.BodyContent, &type metadata for ColumnNavigationView.BodyContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationView.BodyContent and conformance ColumnNavigationView.BodyContent);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ColumnNavigationView.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0CE55D8] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of _VariadicView_Children.Element(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE55D8] - 8) + 8))();
  return a1;
}

void type metadata accessor for Slice<_VariadicView_Children>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Slice<_VariadicView_Children>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v0 = type metadata accessor for Slice();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<_VariadicView_Children>);
  }
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5618], MEMORY[0x1E0CE5600]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5610], MEMORY[0x1E0CE5600]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5608], MEMORY[0x1E0CE5600]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children and conformance _VariadicView_Children);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>)
  {
    type metadata accessor for Slice<_VariadicView_Children>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<_VariadicView_Children> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE55E0], MEMORY[0x1E0CE55D8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element);
  }
  return result;
}

void type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>)
  {
    type metadata accessor for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>();
    lazy protocol witness table accessor for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>);
  }
}

void type metadata accessor for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>)
  {
    type metadata accessor for Slice<_VariadicView_Children>();
    lazy protocol witness table accessor for type Slice<_VariadicView_Children> and conformance <> Slice<A>();
    v0 = type metadata accessor for ForEach();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>);
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>();
    v2 = MEMORY[0x1E0CE55C8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E0CE55D8], (uint64_t)&type metadata for NavigationColumnModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>?);
  }
}

uint64_t type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>;
  if (!lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E0CE55D8], (uint64_t)&type metadata for NavigationColumnModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for MulticolumnSplitView();
  }
  return result;
}

void type metadata accessor for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>)
  {
    type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E0CE55D8], (uint64_t)&type metadata for NavigationColumnModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
    v4[0] = MEMORY[0x1E0CE55C8];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationColumnModifier and conformance NavigationColumnModifier;
  if (!lazy protocol witness table cache variable for type NavigationColumnModifier and conformance NavigationColumnModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationColumnModifier, &type metadata for NavigationColumnModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationColumnModifier and conformance NavigationColumnModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, MEMORY[0x1E0CE73D0]);
    v3[1] = lazy protocol witness table accessor for type NavigationColumnModifier and conformance NavigationColumnModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(a1, &lazy cache variable for type metadata for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>, (void (*)(uint64_t))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, (void (*)(uint64_t))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>);
}

uint64_t type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>;
  if (!lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E0CE55D8], (uint64_t)&type metadata for NavigationColumnModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for MulticolumnSplitView();
  }
  return result;
}

uint64_t type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>;
  if (!lazy cache variable for type metadata for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, MEMORY[0x1E0CE55D8], (uint64_t)&type metadata for NavigationColumnModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    type metadata accessor for MulticolumnSplitView();
  }
  return result;
}

void type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(a1, &lazy cache variable for type metadata for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, (void (*)(uint64_t))type metadata accessor for MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, (void (*)(uint64_t))type metadata accessor for MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>);
}

uint64_t type metadata accessor for MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>;
  if (!lazy cache variable for type metadata for MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E0CE7C38], MEMORY[0x1E0CE7C28], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE40F0]);
    lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    type metadata accessor for MulticolumnSplitView();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>>, type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>(&lazy protocol witness table cache variable for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>);
    v3[1] = lazy protocol witness table accessor for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>(&lazy protocol witness table cache variable for type _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>> and conformance <> _ConditionalContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>>, _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, ModifiedContent<HStack<ForEach<Slice<_VariadicView_Children>, AnyHashable, _VariadicView_Children.Element>>, NavigationColumnModifier>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = type metadata accessor for _ConditionalContent();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t lazy protocol witness table accessor for type _ConditionalContent<MulticolumnSplitView<_UnaryViewAdaptor<EmptyView>, Never, _UnaryViewAdaptor<EmptyView>>, MulticolumnSplitView<ModifiedContent<_VariadicView_Children.Element, NavigationColumnModifier>, Never, _UnaryViewAdaptor<EmptyView>>> and conformance <> _ConditionalContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for MulticolumnSplitView<A, B, C>;
    v5[1] = &protocol witness table for MulticolumnSplitView<A, B, C>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for ContextMenuResponder()
{
  return type metadata completion function for ContextMenuResponder();
}

{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in ContextMenuModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  _QWORD v25[2];

  v9 = type metadata accessor for ContextMenuModifier(255, a2, a3, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifier<A>, v9);
  v10 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuModifierCore(255, a2, a3, v11);
  v12 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v13 = type metadata accessor for ModifiedContent();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)v24 - v17;
  v25[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v10, v16);
  v25[1] = &protocol witness table for ContextMenuModifierCore<A>;
  v19 = MEMORY[0x1E0CE2E70];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v25);
  v21 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v24[0] = v20;
  v24[1] = v21;
  v22 = MEMORY[0x18D75FFDC](v19, v13, v24);
  static ViewBuilder.buildExpression<A>(_:)(a1, v13, v22);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v18, v13, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t closure #2 in ContextMenuModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t);
  unint64_t v31;
  char v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  double v66[2];

  v58 = a1;
  v60 = a5;
  v8 = type metadata accessor for ContextMenuModifier(0, a3, a4, a4);
  v61 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v50 - v11;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifier<A>, v8, v10);
  v13 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuModifierCore(255, a3, a4, v14);
  v52 = v13;
  v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v51 = v15;
  v53 = type metadata accessor for ModifiedContent();
  v16 = type metadata accessor for ModifiedContent();
  v55 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v50 - v18;
  type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>();
  v20 = type metadata accessor for ModifiedContent();
  v57 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v54 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v56 = (char *)&v50 - v25;
  v26 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
    goto LABEL_9;
  v27 = *(_QWORD *)(a2 + 8);
  v28 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v27, v28);
  v29 = specialized Environment.wrappedValue.getter(v27, v28);
  outlined consume of Environment<Bool>.Content(v27, v28);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v59 = (int *)a2;
  v30(v12, a2, v8);
  if (v26 != v29)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v8);
    goto LABEL_6;
  }
  v31 = *((_QWORD *)v12 + 1);
  v32 = v12[16];
  outlined copy of Environment<Bool>.Content(v31, v32);
  v33 = specialized Environment.wrappedValue.getter(v31, v32);
  outlined consume of Environment<Bool>.Content(v31, v32);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v12, v8);
  v34 = 0.0;
  if ((v33 & 0x100000000) != 0)
LABEL_6:
    v34 = 1.0;
  v66[0] = v34;
  v65[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v52);
  v65[1] = &protocol witness table for ContextMenuModifierCore<A>;
  v35 = MEMORY[0x1E0CE2E70];
  v36 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v51, v65);
  v37 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v64[0] = v36;
  v64[1] = v37;
  v38 = v35;
  v39 = v53;
  v40 = MEMORY[0x18D75FFDC](v38, v53, v64);
  MEMORY[0x18D75B4AC](v66, v39, MEMORY[0x1E0CE5148], v40);
  v41 = *v59;
  if (*v59)
  {
    v63[0] = v40;
    v63[1] = MEMORY[0x1E0CE5138];
    v42 = MEMORY[0x1E0CE2E70];
    v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v63);
    v44 = v54;
    View.liftPreviewMarker(kind:viewIdentity:)(1, v41, v16, v43);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v19, v16);
    v45 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    v62[0] = v43;
    v62[1] = v45;
    v46 = MEMORY[0x18D75FFDC](v42, v20, v62);
    v47 = (uint64_t)v56;
    static ViewBuilder.buildExpression<A>(_:)(v44, v20, v46);
    v48 = *(void (**)(char *, uint64_t))(v57 + 8);
    v48(v44, v20);
    static ViewBuilder.buildBlock<A>(_:)(v47, v20, v60);
    return ((uint64_t (*)(uint64_t, uint64_t))v48)(v47, v20);
  }
LABEL_9:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ContextMenuModifier<A>()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for ContextMenuModifierCore(255, a2, a3, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #2 in implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(1, a2, a3, v6);
  return AGGraphCreateOffsetAttribute2();
}

uint64_t implicit closure #4 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v10 = type metadata accessor for ContextMenuModifierCore.AttachMenuPlatformItemList(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifierCore<A>.AttachMenuPlatformItemList, v10);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t (*ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(unint64_t a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  int v5;
  unint64_t v6;
  uint64_t v7;

  v5 = a1;
  v6 = HIDWORD(a1);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 32) = v5;
  *(_DWORD *)(v7 + 36) = v6;
  return partial apply for closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter;
}

uint64_t closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v45 - v10;
  v12 = type metadata accessor for PlatformItemList.Item();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v47 = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v45 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v45 - v22;
  v48 = a1;
  v24 = *a1;
  PlatformItemList.mergedContentItem.getter(v24, (uint64_t)&v45 - v22);
  v25 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v23 + 77) = v25;
  if ((a2 & 0x100000000) != 0)
  {
    v26 = *(_QWORD *)(v24 + 16);
    if (v26)
    {
      v27 = v24 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v28 = *(_QWORD *)(v13 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of PlatformItemList.Item(v27, (uint64_t)v19);
        if (*((_QWORD *)v19 + 51) != 1)
          break;
        outlined destroy of PlatformItemList.Item((uint64_t)v19);
        v27 += v28;
        if (!--v26)
          goto LABEL_9;
      }
      outlined init with take of PlatformItemList.Item((uint64_t)v19, (uint64_t)v11);
      v29 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_9:
      v29 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v29, 1, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of PlatformItemList.Item?((uint64_t)v11, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
    {
      outlined destroy of PlatformItemList.Item?((uint64_t)v7);
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v45 = 0;
      v46 = 0;
      v36 = 1;
    }
    else
    {
      v30 = *((_QWORD *)v7 + 50);
      v37 = *((_QWORD *)v7 + 51);
      v31 = *((_QWORD *)v7 + 52);
      v32 = *((_QWORD *)v7 + 53);
      v33 = *((_QWORD *)v7 + 54);
      v34 = *((_QWORD *)v7 + 55);
      v35 = *((_QWORD *)v7 + 56);
      v45 = *((_QWORD *)v7 + 57);
      v46 = v7[464];
      LOBYTE(v44) = v46;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v30, v37, v31, v32, v33, v34, v35, v45, v44, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      v38 = (uint64_t)v7;
      v36 = v37;
      outlined destroy of PlatformItemList.Item(v38);
    }
    LOBYTE(v44) = v23[464];
    outlined consume of PlatformItemList.Item.SelectionBehavior?(*((_QWORD *)v23 + 50), *((_QWORD *)v23 + 51), *((_QWORD *)v23 + 52), *((_QWORD *)v23 + 53), *((_QWORD *)v23 + 54), *((_QWORD *)v23 + 55), *((_QWORD *)v23 + 56), *((_QWORD *)v23 + 57), v44, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    *((_QWORD *)v23 + 50) = v30;
    *((_QWORD *)v23 + 51) = v36;
    *((_QWORD *)v23 + 52) = v31;
    *((_QWORD *)v23 + 53) = v32;
    *((_QWORD *)v23 + 54) = v33;
    *((_QWORD *)v23 + 55) = v34;
    v39 = v45;
    *((_QWORD *)v23 + 56) = v35;
    *((_QWORD *)v23 + 57) = v39;
    v23[464] = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v40 = v47;
  outlined init with copy of PlatformItemList.Item((uint64_t)v23, v47);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v41 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item(v40, v42 + v41);
  *v48 = v42;
  return outlined destroy of PlatformItemList.Item((uint64_t)v23);
}

uint64_t protocol witness for Rule.value.getter in conformance ContextMenuModifierCore<A>.AttachMenuPlatformItemList@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  unint64_t *v2;
  uint64_t (*v4)(uint64_t *);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuModifierCore<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifierCore<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasContextMenuInteractionKey()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasContextMenuInteractionKey()
{
  lazy protocol witness table accessor for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey();
  return PropertyList.subscript.setter();
}

uint64_t ContextMenuResponderFilter.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Value;
  char v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t result;
  uint64_t v16;

  v1 = v0;
  AGGraphGetValue();
  v3 = v2;
  AGGraphGetValue();
  if (((v3 | v4) & 1) != 0
    || (type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]), !AGGraphGetOutputValue()))
  {
    v5 = *(_QWORD *)(v1 + 32);
    *(double *)(v5 + 216) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v5 + 224) = v6;
    *(double *)(v5 + 232) = MEMORY[0x18D755E9C]();
    *(_QWORD *)(v5 + 240) = v7;
  }
  v8 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)(v8 + 296) = *(_DWORD *)AGGraphGetValue();
  *(_QWORD *)(v8 + 248) = AGCreateWeakAttribute();
  *(_BYTE *)(v8 + 256) = *(_BYTE *)AGGraphGetValue();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  Value = AGGraphGetValue();
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    Value = swift_bridgeObjectRelease();
  }
  v11 = MEMORY[0x18D755E9C](Value);
  v13 = v12;
  AGGraphGetValue();
  *(double *)(v8 + 272) = v11 - MEMORY[0x18D755E9C]();
  *(double *)(v8 + 280) = v13 - v14;
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v16 + 32) = v8;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ContextMenuResponder.startTrackingUpdates(interaction:)(UIContextMenuInteraction interaction)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[16];
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v14 = *MEMORY[0x1E0C80C00];
  MEMORY[0x18D75B908]();
  if ((*(_BYTE *)(v1 + 316) & 1) != 0)
  {
    if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E0CFED28])
    {
      v3 = (id)AGGraphGetAttributeSubgraph();
      AGGraphClearUpdate();
      v4 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      AGGraphClearUpdate();
      AGWeakAttributeGetAttribute();
      v5 = AGCreateWeakAttribute();
      swift_unknownObjectWeakInit();
      v13 = v5;
      UpdateContextMenuInteraction.updateValue()();
      outlined init with copy of UpdateContextMenuInteraction((uint64_t)v12, (uint64_t)v11);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UpdateContextMenuInteraction and conformance UpdateContextMenuInteraction();
      v6 = Attribute.init<A>(body:value:flags:update:)();
      outlined destroy of UpdateContextMenuInteraction((uint64_t)v11);
      outlined destroy of UpdateContextMenuInteraction((uint64_t)v12);
      AGGraphSetUpdate();
      *(_DWORD *)(v2 + 312) = v6;
      *(_BYTE *)(v2 + 316) = 0;
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
    }
  }
  else
  {
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    v7 = AGGraphSetFlags();
    MEMORY[0x1E0C80A78](v7, v8);
    MEMORY[0x1E0C80A78](v9, v10);
    AGGraphMutateAttribute();
  }
  static Update.end()();
}

uint64_t ContextMenuResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContextMenuResponder()
{
  return type metadata accessor for ContextMenuResponder(0);
}

uint64_t type metadata accessor for ContextMenuResponderBase(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ContextMenuResponderBase);
}

uint64_t type metadata completion function for ContextMenuResponderBase()
{
  return type metadata completion function for ContextMenuResponder();
}

void ContextMenuResponderBase.contentShapeKind.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t closure #1 in ContextMenuResponderBase.items.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AGGraphGetWeakValue();
  if (result)
    result = swift_bridgeObjectRetain();
  *a1 = result;
  return result;
}

uint64_t ContextMenuResponderBase.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContextMenuResponderBase()
{
  return type metadata accessor for ContextMenuResponderBase(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextMenuModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 33) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = (unint64_t)a2 + 27;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v11 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    v12 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
    v13 = *(_QWORD *)v12;
    v14 = *(_BYTE *)(v12 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v12, v14);
    *(_QWORD *)v11 = v13;
    *(_BYTE *)(v11 + 8) = v14;
    v15 = ((unint64_t)v3 + 27) & 0xFFFFFFFFFFFFFFF8;
    v16 = v10 & 0xFFFFFFFFFFFFFFF8;
    v17 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
    LOBYTE(v13) = *(_BYTE *)(v16 + 8);
    outlined copy of Environment<Bool>.Content(v17, v13);
    *(_QWORD *)v15 = v17;
    *(_BYTE *)(v15 + 8) = v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v15 + v6 + 9) & ~v6, (v16 + v6 + 9) & ~v6, v4);
  }
  return v3;
}

_DWORD *initializeWithTake for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v4 = v6;
  v7 = ((unint64_t)a1 + 27) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 27) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 32))((*(unsigned __int8 *)(v10 + 80) + 9 + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

_DWORD *assignWithTake for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v5 = (unint64_t)a2 + 27;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 27;
  v7 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  LOBYTE(v8) = *(_BYTE *)(v8 + 8);
  v10 = *(_QWORD *)v7;
  v11 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  v5 &= 0xFFFFFFFFFFFFFFF8;
  v12 = *(_BYTE *)(v5 + 8);
  v13 = *(_QWORD *)v6;
  v14 = *(_BYTE *)(v6 + 8);
  *(_QWORD *)v6 = *(_QWORD *)v5;
  *(_BYTE *)(v6 + 8) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(unsigned __int8 *)(v15 + 80) + 9 + v6) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 9 + v5) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 33) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 27) & 0xFFFFFFFFFFFFFFF8) + v7 + 9) & ~v7);
      v15 = *(unsigned __int8 *)(((a1 + 11) & 0xFFFFFFFFFFFFF8) + 8);
      if (v15 > 1)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186FDA4C8 + 4 * byte_187BFF9D0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for ContextMenuModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void base witness table accessor for ViewModifier in ContextMenuModifier<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActiveContextMenu()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt8 v2;

  v1 = *(_DWORD *)v0;
  v2 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ActiveContextMenu()
{
  uint64_t v0;
  Swift::UInt8 v1;

  v1 = *(_BYTE *)(v0 + 4);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActiveContextMenu()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt8 v2;

  v1 = *(_DWORD *)v0;
  v2 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ActiveContextMenu(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 4) ^ *(unsigned __int8 *)(a1 + 4) ^ 1) & 1;
  else
    return 0;
}

unint64_t lazy protocol witness table accessor for type ActiveContextMenu and conformance ActiveContextMenu()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActiveContextMenu and conformance ActiveContextMenu;
  if (!lazy protocol witness table cache variable for type ActiveContextMenu and conformance ActiveContextMenu)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActiveContextMenu, &type metadata for ActiveContextMenu);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActiveContextMenu and conformance ActiveContextMenu);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesContextMenuInteraction, &type metadata for ProvidesContextMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesContextMenuInteraction, &type metadata for ProvidesContextMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesContextMenuInteraction, &type metadata for ProvidesContextMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesContextMenuInteraction, &type metadata for ProvidesContextMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ProvidesContextMenuInteraction, &type metadata for ProvidesContextMenuInteraction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

void type metadata accessor for InvertedViewInputPredicate<IsSharingPickerHost>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InvertedViewInputPredicate<IsSharingPickerHost>)
  {
    lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost();
    v0 = type metadata accessor for InvertedViewInputPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InvertedViewInputPredicate<IsSharingPickerHost>);
  }
}

unint64_t lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSharingPickerHost, &type metadata for IsSharingPickerHost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSharingPickerHost, &type metadata for IsSharingPickerHost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSharingPickerHost, &type metadata for IsSharingPickerHost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSharingPickerHost, &type metadata for IsSharingPickerHost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsSharingPickerHost, &type metadata for IsSharingPickerHost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ActiveContextMenuKey(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
}

uint64_t sub_186FDA9C0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isPresentingContextMenu.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_186FDA9FC()
{
  return EnvironmentValues.isPresentingContextMenu.setter();
}

uint64_t partial apply for closure #1 in ContextMenuModifier.body(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in ContextMenuModifier.body(content:)(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t partial apply for closure #2 in ContextMenuModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in ContextMenuModifier.body(content:)(v1[4], v1[5], v1[2], v1[3], a1);
}

void type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveContextMenuKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveContextMenuKey>);
  }
}

uint64_t outlined init with copy of UpdateContextMenuInteraction(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for EnvironmentValues.SafeAreaTransitionStateKey.Value(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for ActiveContextMenuKey()
{
  return &type metadata for ActiveContextMenuKey;
}

ValueMetadata *type metadata accessor for MenuOrderPreferenceKey()
{
  return &type metadata for MenuOrderPreferenceKey;
}

ValueMetadata *type metadata accessor for HasContextMenuKey()
{
  return &type metadata for HasContextMenuKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextMenuModifierCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7 & 0xFC | 3;
  v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5 > 0x18)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v13 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  }
  return v4;
}

uint64_t assignWithCopy for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 + 4);
  return a1;
}

uint64_t initializeWithTake for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 + 4);
  return a1;
}

uint64_t assignWithTake for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)v7 = *(_DWORD *)v8;
  *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuModifierCore(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFD)
    {
      v14 = *(unsigned __int8 *)(((a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL) + 4);
      if (v14 >= 3)
        return v14 - 2;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 3) & 0xFFFFFFFC) + 5;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186FDAD7C + 4 * byte_187BFF9DE[v12]))();
  }
}

void storeEnumTagSinglePayload for ContextMenuModifierCore(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 5;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_186FDAF24()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_186FDAF2C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FDAF34);
}

void sub_186FDAF70()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_186FDAF78()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_186FDAF80(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
LABEL_2:
    JUMPOUT(0x186FDAF88);
  if (a3 < 0xFD)
  {
    *(_BYTE *)(((v6 + v5 + 3) & 0xFFFFFFFFFFFFFCLL) + 4) = a2 + 2;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void sub_186FDAFA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for ContextMenuModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuModifier<A>, v6);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuModifierCore(255, v4, v5, v7);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  type metadata accessor for StaticIf();
}

uint64_t sub_186FDB0A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[16];

  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v7 = type metadata accessor for ModifiedContent();
  v16[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v16[1] = &protocol witness table for ContextMenuModifierCore<A>;
  v8 = MEMORY[0x1E0CE2E70];
  v15[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v16);
  v15[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v9 = MEMORY[0x18D75FFDC](v8, v5, v15);
  v14[0] = v9;
  v14[1] = MEMORY[0x1E0CE5138];
  v13[0] = MEMORY[0x18D75FFDC](v8, v4, v14);
  v13[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v12[0] = v9;
  v12[1] = MEMORY[0x18D75FFDC](v8, v2, v13);
  v11[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v12);
  v11[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v8, v7, v11);
}

_UNKNOWN **base witness table accessor for ViewModifier in ContextMenuModifierCore<A>()
{
  return &protocol witness table for ContextMenuModifierCore<A>;
}

uint64_t partial apply for implicit closure #4 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return implicit closure #4 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(v4[4], v4[2], v4[3], a4);
}

uint64_t partial apply for implicit closure #2 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)()
{
  return _ViewInputs.intern<A>(_:id:)();
}

uint64_t partial apply for implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(*(unsigned int *)(v4 + 32), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for ContextMenuModifierCore.AttachMenuPlatformItemList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextMenuModifierCore.AttachMenuPlatformItemList);
}

unint64_t lazy protocol witness table accessor for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasContextMenuInteractionKey, &unk_1E1AF6BA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasContextMenuInteractionKey, &unk_1E1AF6BA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasContextMenuInteractionKey, &unk_1E1AF6BA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasContextMenuInteractionKey, &unk_1E1AF6BA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasContextMenuInteractionKey, &unk_1E1AF6BA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

void *type metadata accessor for HasContextMenuInteractionKey()
{
  return &unk_1E1AF6BA8;
}

uint64_t destroy for ContextMenuResponderFilter()
{
  return swift_release();
}

uint64_t assignWithCopy for ContextMenuResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContextMenuResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuResponderFilter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContextMenuResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ContextMenuResponderFilter()
{
  return &unk_1E1AEDCF0;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasContextMenuInteractionKey()
{
  return &protocol witness table for HasContextMenuInteractionKey;
}

void base witness table accessor for _AttributeBody in ContextMenuModifierCore<A>.AttachMenuPlatformItemList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_186FDB580()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_186FDB5A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in ContextMenuModifierCore.AttachMenuPlatformItemList.value.getter(a1, *(_QWORD *)(v1 + 32));
}

uint64_t outlined init with take of PlatformItemList.Item?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlatformItemList.Item?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _TestApp.runBenchmarks(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (**v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v26;
  char **v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a1;
  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0(0, a2);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(0, v8);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v9, v13);
  v14 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  _TestApp.RootView.init()();
  v28 = v30;
  v20 = v31;
  v19 = v32;
  static _TestApp.rootViewIdentifier.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(&v18[*(int *)(v10 + 52)], v7, v3);
  *(_OWORD *)v18 = v28;
  *((_QWORD *)v18 + 2) = v20;
  *((_QWORD *)v18 + 3) = v19;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v29;
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v18, (uint64_t)v14);
  v22 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject();
  outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v14, v24 + v22);
  v25 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + v23);
  *v25 = partial apply for closure #1 in _TestApp.runBenchmarks(_:);
  v25[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21;
  v26 = static TestingSceneDelegate.connectCallback;
  static TestingSceneDelegate.connectCallback = partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:);
  qword_1EDF00438 = v24;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v26);
  type metadata accessor for TestingAppDelegate();
  v27 = (char **)MEMORY[0x18D75E2B4]();
  closure #1 in KitRendererCommon(_:)(v27);
}

void type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (!lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0)
  {
    v2 = MEMORY[0x18D75FF88](0, a2, MEMORY[0x1E0CE7A50], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of static _TestApp.rootViewIdentifier>>.0);
  }
}

void type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (!lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>)
  {
    type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0(255, a2);
    lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    swift_getOpaqueTypeConformance2();
    v2 = type metadata accessor for TestIDView();
    if (!v3)
      atomic_store(v2, (unint64_t *)&lazy cache variable for type metadata for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>);
  }
}

uint64_t closure #1 in _TestApp.runBenchmarks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  v17 = (void *)static OS_dispatch_queue.main.getter();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = a5;
  v18[3] = a1;
  v18[4] = a2;
  aBlock[4] = partial apply for closure #1 in closure #1 in _TestApp.runBenchmarks(_:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_1;
  v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v9, MEMORY[0x1E0DEF510]);
  type metadata accessor for [DispatchWorkItemFlags]();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18D75D930](0, v16, v12, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v21);
}

uint64_t sub_186FDBB3C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _TestApp.runBenchmarks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in _TestApp.runBenchmarks(_:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(0, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void _TestApp.performBenchmarks(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType;
  __CFRunLoop *v7;
  const void *v8;
  __CFRunLoop *v9;
  _QWORD *v10;
  void *v11;
  __int128 v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  void (*v15)();
  _QWORD *v16;
  __int128 v17;

  swift_unknownObjectRetain();
  static _TestApp.host.setter();
  ObjectType = swift_getObjectType();
  static _TestApp.defaultEnvironment.getter();
  v17 = v12;
  (*(void (**)(__int128 *, uint64_t, uint64_t))(a3 + 64))(&v17, ObjectType, a3);
  v7 = CFRunLoopGetCurrent();
  v8 = (const void *)*MEMORY[0x1E0C9B270];
  if (*MEMORY[0x1E0C9B270])
  {
    v9 = v7;
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a1;
    v10[3] = a2;
    v10[4] = a3;
    v15 = partial apply for closure #1 in _TestApp.performBenchmarks(_:with:);
    v16 = v10;
    *(_QWORD *)&v12 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v12 + 1) = 1107296256;
    v13 = thunk for @escaping @callee_guaranteed () -> ();
    v14 = &block_descriptor_16;
    v11 = _Block_copy(&v12);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    CFRunLoopPerformBlock(v9, v8, v11);
    _Block_release(v11);

  }
  else
  {
    __break(1u);
  }
}

void closure #1 in _TestApp.performBenchmarks(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String_optional v24;
  uint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = *(_QWORD *)(a3 + 8);
    v6 = a1 + 32;
    swift_bridgeObjectRetain();
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      outlined init with copy of TableColumnList(v6, (uint64_t)v28);
      v11 = v29;
      v10 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 8) + 8))(v11);
      v12 = v29;
      v13 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(a2, v5, v12, v13);
      outlined init with copy of TableColumnList((uint64_t)v28, (uint64_t)v26);
      *((_QWORD *)&v27 + 1) = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v16 = v7[2];
      v15 = v7[3];
      if (v16 >= v15 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v7);
      v7[2] = v16 + 1;
      v17 = &v7[6 * v16];
      v18 = v26[0];
      v19 = v27;
      v17[3] = v26[1];
      v17[4] = v19;
      v17[2] = v18;
      if ((enableProfiler.getter() & 1) != 0)
      {
        swift_getObjectType();
        if (swift_conformsToProtocol2())
          v20 = a2;
        else
          v20 = 0;
        if (v20)
        {
          __swift_project_boxed_opaque_existential_1(v28, v29);
          swift_getDynamicType();
          swift_unknownObjectRetain();
          v21 = _typeName(_:qualified:)();
          v23 = v22;
          swift_getObjectType();
          v24.value._countAndFlagsBits = v21;
          v24.value._object = v23;
          ViewRendererHost.archiveJSON(name:)(v24);
          swift_bridgeObjectRelease();
          ViewRendererHost.resetProfile()();
          swift_unknownObjectRelease();
        }
      }
      v9 = v29;
      v8 = v30;
      __swift_project_boxed_opaque_existential_1(v28, v29);
      (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 16))(v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      v6 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v25 = swift_bridgeObjectRetain();
  log(_:)((Swift::OpaquePointer)v25);
  swift_bridgeObjectRelease();
  exit(0);
}

void _TestApp.runPerformanceTests(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  void *v25;
  char **v26;
  _OWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0(0, a2);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(0, v9);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v10, v14);
  v15 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v27 - v18;
  static TestingAppDelegate.performanceTests = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  _TestApp.RootView.init()();
  v27[0] = v27[2];
  v20 = v28;
  v21 = v29;
  static _TestApp.rootViewIdentifier.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v19[*(int *)(v11 + 52)], v8, v4);
  *(_OWORD *)v19 = v27[0];
  *((_QWORD *)v19 + 2) = v20;
  *((_QWORD *)v19 + 3) = v21;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  outlined init with copy of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v19, (uint64_t)v15);
  v22 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v23 = swift_allocObject();
  outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>((uint64_t)v15, v23 + v22);
  v24 = (uint64_t (**)())(v23 + ((v13 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v24 = closure #1 in _TestApp.runPerformanceTests(_:);
  v24[1] = 0;
  v25 = static TestingSceneDelegate.connectCallback;
  static TestingSceneDelegate.connectCallback = partial apply for specialized closure #1 in runTestingApp<A, B>(rootView:comparisonView:didLaunch:);
  qword_1EDF00438 = v23;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v25);
  type metadata accessor for TestingAppDelegate();
  v26 = (char **)MEMORY[0x18D75E2B4]();
  closure #1 in KitRendererCommon(_:)(v26);
}

uint64_t closure #1 in _TestApp.runPerformanceTests(_:)()
{
  swift_unknownObjectRetain();
  return static _TestApp.host.setter();
}

uint64_t outlined init with take of TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(0, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_2Tm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>(0, a2);
  v4 = v3;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v6 = v2 + ((v5 + 16) & ~v5);
  swift_release();
  swift_release();
  v7 = v6 + *(int *)(v4 + 52);
  type metadata accessor for <<opaque return type of static _TestApp.rootViewIdentifier>>.0(0, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

void partial apply for closure #1 in closure #1 in _TestApp.runBenchmarks(_:)()
{
  uint64_t *v0;

  _TestApp.performBenchmarks(_:with:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_9Tm()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in _TestApp.performBenchmarks(_:with:)()
{
  uint64_t *v0;

  closure #1 in _TestApp.performBenchmarks(_:with:)(v0[2], v0[3], v0[4]);
}

uint64_t destroy for _SceneInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _SceneInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _SceneInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy60_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _SceneInputs(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SceneInputs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 60))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _SceneInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 60) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SceneInputs()
{
  return &type metadata for _SceneInputs;
}

uint64_t _SceneInputs.append<A, B>(_:to:)()
{
  return _GraphInputs.append<A, B>(_:to:)();
}

uint64_t _SceneInputs.popLast<A, B>(_:)()
{
  return _GraphInputs.popLast<A, B>(_:)();
}

uint64_t type metadata completion function for ResolvedContentUnavailableView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for ResolvedContentUnavailableView(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 + 64) + v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v7 + 64) + v11;
  v13 = v8 | v6 | v11;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || ((v12 + ((v9 + ((v6 + 16) & ~v6)) & ~v8)) & (unint64_t)~v11) + *(_QWORD *)(v10 + 64) > 0x18)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v13 & 0xF8 ^ 0x1F8) & (v13 + 16));
    swift_retain();
  }
  else
  {
    v23 = a3[3];
    v24 = ~v8;
    v25 = ~v11;
    v26 = a3[4];
    v17 = *(_QWORD *)a2;
    v18 = *(_BYTE *)(a2 + 8);
    v22 = a3[2];
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v18);
    *(_QWORD *)a1 = v17;
    *(_BYTE *)(a1 + 8) = v18;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    v19 = (a2 + v6 + 16) & ~v6;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))((a1 + v6 + 16) & ~v6, v19, v22);
    v20 = (((a1 + v6 + 16) & ~v6) + v9) & v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v20, (v19 + v9) & v24, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))((v20 + v12) & v25, (((v19 + v9) & v24) + v12) & v25, v26);
  }
  return a1;
}

uint64_t destroy for ResolvedContentUnavailableView(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = *(_QWORD *)(a2[2] - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a2[3] - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v8);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v8
                                                                                       + *(_QWORD *)(v7 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

uint64_t initializeWithCopy for ResolvedContentUnavailableView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v8 = *(_QWORD *)(a3[2] - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 16 + a1) & ~v9;
  v11 = (v9 + 16 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(a3[3] - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 16))((*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (*(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v18 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t assignWithCopy for ResolvedContentUnavailableView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v10 = *(_QWORD *)(a3[2] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 16 + a1) & ~v11;
  v13 = (v11 + 16 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = *(_QWORD *)(a3[3] - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = (v17 + v12) & ~v16;
  v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v18, v19);
  v20 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 24))((*(_QWORD *)(v15 + 64) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(_QWORD *)(v15 + 64) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

_OWORD *initializeWithTake for ResolvedContentUnavailableView(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3[3] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 + v11;
  v13 = (v12 + v7) & ~v11;
  v14 = (v12 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  v15 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 32))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t assignWithTake for ResolvedContentUnavailableView(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  v10 = *(_QWORD *)(a3[2] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 16 + a1) & ~v11;
  v13 = ((unint64_t)a2 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = *(_QWORD *)(a3[3] - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = (v17 + v12) & ~v16;
  v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v18, v19);
  v20 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 40))((*(_QWORD *)(v15 + 64) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(_QWORD *)(v15 + 64) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedContentUnavailableView(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = *(_DWORD *)(v7 + 84);
  v12 = a3[4];
  v13 = *(_QWORD *)(v12 - 8);
  if (v11 <= *(_DWORD *)(v13 + 84))
    v14 = *(_DWORD *)(v13 + 84);
  else
    v14 = v11;
  if (v14 <= 0xFE)
    v15 = 254;
  else
    v15 = v14;
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = *(_QWORD *)(v7 + 64);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = *(unsigned __int8 *)(v13 + 80);
  v20 = *(_QWORD *)(v9 + 64) + v19;
  v21 = a2 - v15;
  if (a2 <= v15)
    goto LABEL_30;
  v22 = ((v20 + ((v17 + v18 + ((v16 + 16) & ~v16)) & ~v18)) & ~v19) + *(_QWORD *)(v13 + 64);
  v23 = 8 * v22;
  if (v22 <= 3)
  {
    v26 = ((v21 + ~(-1 << v23)) >> v23) + 1;
    if (HIWORD(v26))
    {
      v24 = *(_DWORD *)(a1 + v22);
      if (!v24)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v26 > 0xFF)
    {
      v24 = *(unsigned __int16 *)(a1 + v22);
      if (!*(_WORD *)(a1 + v22))
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v26 < 2)
    {
LABEL_30:
      if (v14 > 0xFE)
      {
        v30 = (a1 + v16 + 16) & ~v16;
        if (v8 == v15)
        {
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v30, *(unsigned int *)(v7 + 84), v6);
        }
        else
        {
          v31 = (v30 + v17 + v18) & ~v18;
          if ((_DWORD)v10 == v15)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v31, v10, v5);
          else
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13 + 48))((v20 + v31) & ~v19, *(unsigned int *)(v13 + 84), v12);
        }
      }
      else
      {
        v29 = *(unsigned __int8 *)(a1 + 8);
        if (v29 > 1)
          return (v29 ^ 0xFF) + 1;
        else
          return 0;
      }
    }
  }
  v24 = *(unsigned __int8 *)(a1 + v22);
  if (!*(_BYTE *)(a1 + v22))
    goto LABEL_30;
LABEL_21:
  v27 = (v24 - 1) << v23;
  if (v22 > 3)
    v27 = 0;
  if ((_DWORD)v22)
  {
    if (v22 <= 3)
      v28 = ((v20 + ((v17 + v18 + ((v16 + 16) & ~(_DWORD)v16)) & ~(_DWORD)v18)) & ~(_DWORD)v19) + *(_DWORD *)(v13 + 64);
    else
      v28 = 4;
    __asm { BR              X11 }
  }
  return v15 + v27 + 1;
}

void storeEnumTagSinglePayload for ResolvedContentUnavailableView(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (v7 <= *(_DWORD *)(v8 + 84))
    v9 = *(_DWORD *)(v8 + 84);
  else
    v9 = v7;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = ((*(_QWORD *)(v6 + 64)
        + *(unsigned __int8 *)(v8 + 80)
        + ((*(_QWORD *)(v5 + 64)
          + *(unsigned __int8 *)(v6 + 80)
          + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 > v10)
  {
    if (v11 <= 3)
    {
      v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else
      {
        v12 = v14 > 1;
        if (v14 >= 0x100)
          v12 = 2;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X24 }
}

void type metadata accessor for ResolvedContentUnavailableView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedContentUnavailableView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

void ResolvedContentUnavailableView.body.getter()
{
  uint64_t (*v0)(void);

  v0 = MEMORY[0x1E0CE5A58];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v0);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_186FDD384()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  swift_getTupleTypeMetadata2();
  v3 = type metadata accessor for TupleView();
  v4 = MEMORY[0x1E0CE7EB8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v3);
  type metadata accessor for VStack();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38], v1);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v5 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](v4, v5);
  v6 = type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v6);
  v11 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v2 - 136) = v10;
  *(_QWORD *)(v2 - 128) = v11;
  v12 = MEMORY[0x1E0CE2E70];
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v2 - 136);
  v14 = MEMORY[0x1E0CE35E0];
  v15 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>, MEMORY[0x1E0CE35E0]);
  *(_QWORD *)(v2 - 152) = v13;
  *(_QWORD *)(v2 - 144) = v15;
  v16 = MEMORY[0x18D75FFDC](v12, v8, v2 - 152);
  v17 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>, v14);
  *(_QWORD *)(v2 - 168) = v16;
  *(_QWORD *)(v2 - 160) = v17;
  v18 = MEMORY[0x18D75FFDC](v12, v9, v2 - 168);
  type metadata accessor for ScrollView(255, v9, v18, v19);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v20 = type metadata accessor for TupleView();
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v20);
  v23 = type metadata accessor for ViewThatFits(255, v20, v21, v22);
  v24 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  *(_QWORD *)(v2 - 120) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v2 - 112) = v9;
  *(_QWORD *)(v2 - 104) = v23;
  *(_QWORD *)(v2 - 96) = v24;
  type metadata accessor for StaticIf();
}

void sub_186FDD5E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = v2[3];
  v9 = v2[4];
  v11 = v2[1];
  v2[18] = v10;
  v2[19] = v11;
  v12 = v4[5];
  v13 = v4[6];
  v2[20] = v6;
  v2[21] = v12;
  v14 = v4[7];
  v2[22] = v13;
  v2[23] = v14;
  v2[24] = v9;
  v2[8] = v10;
  v2[9] = v11;
  v2[10] = v6;
  v2[11] = v12;
  v2[12] = v13;
  v2[13] = v14;
  v2[14] = v9;
  StaticIf<>.init<A>(idiom:then:else:)(v15, (void (*)(void))partial apply for closure #1 in ResolvedContentUnavailableView.body.getter, (uint64_t)(v2 + 16), (uint64_t)partial apply for closure #2 in ResolvedContentUnavailableView.body.getter, (uint64_t)(v2 + 6), v3, v5, MEMORY[0x1E0CE4ED8]);
}

uint64_t sub_186FDD6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);

  *(_QWORD *)(v7 - 184) = v2;
  *(_QWORD *)(v7 - 176) = v4;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v7 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v1, v3, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v1, v3);
  static ViewBuilder.buildBlock<A>(_:)(v5, v3, *(_QWORD *)(v0 + 40));
  return v9(v5, v3);
}

void ResolvedContentUnavailableView.resolvedBody(iconHidden:)()
{
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_186FDD960()
{
  uint64_t *v0;
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[96];

  swift_getTupleTypeMetadata2();
  v4 = type metadata accessor for TupleView();
  v5 = MEMORY[0x1E0CE7EB8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v4);
  type metadata accessor for VStack();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38], v1);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v6 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](v5, v6);
  v7 = type metadata accessor for VStack();
  v0[1] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v57[-v9];
  v11 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  v12 = type metadata accessor for ModifiedContent();
  v0[3] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v57[-v14];
  v0[2] = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>();
  v16 = type metadata accessor for ModifiedContent();
  v17 = *(_QWORD *)(v16 - 8);
  v0[5] = v16;
  v0[6] = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  *v0 = (uint64_t)&v57[-v19];
  v20 = v0[7];
  v0[14] = v0[8];
  v0[15] = v20;
  v0[16] = v0[4];
  *(_OWORD *)(v0 + 17) = *(_OWORD *)(v2 + 40);
  v21 = *(_QWORD *)(v2 + 56);
  v22 = v0[9];
  v0[19] = v21;
  v0[20] = v22;
  *((_BYTE *)v0 + 168) = *((_DWORD *)v0 + 21);
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  ResolvedContentUnavailableView.marginModifier.getter(v3 - 208);
  v23 = *(_BYTE *)(v3 - 168);
  *((_BYTE *)v0 + 208) = *(_BYTE *)(v3 - 208);
  *(_OWORD *)(v0 + 27) = *(_OWORD *)(v0 + 41);
  *(_OWORD *)(v0 + 29) = *(_OWORD *)(v0 + 43);
  *((_BYTE *)v0 + 248) = v23;
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v7);
  MEMORY[0x18D75B4AC](v0 + 26, v7, v11, v24);
  (*(void (**)(_BYTE *, uint64_t))(v0[1] + 8))(v10, v7);
  ResolvedContentUnavailableView.macFrameModifier.getter((_OWORD *)(v3 - 208));
  v25 = *(_BYTE *)(v3 - 200);
  v26 = *(_QWORD *)(v3 - 192);
  v27 = *(_BYTE *)(v3 - 184);
  v28 = *(_QWORD *)(v3 - 176);
  v29 = *(_BYTE *)(v3 - 168);
  v30 = *(_QWORD *)(v3 - 160);
  v31 = *(_BYTE *)(v3 - 152);
  v32 = *(_QWORD *)(v3 - 144);
  v33 = *(_BYTE *)(v3 - 136);
  v34 = *(_QWORD *)(v3 - 128);
  v35 = *(_BYTE *)(v3 - 120);
  v0[26] = *(_QWORD *)(v3 - 208);
  *((_BYTE *)v0 + 216) = v25;
  v0[28] = v26;
  *((_BYTE *)v0 + 232) = v27;
  v0[30] = v28;
  *((_BYTE *)v0 + 248) = v29;
  v0[32] = v30;
  *((_BYTE *)v0 + 264) = v31;
  v0[34] = v32;
  *((_BYTE *)v0 + 280) = v33;
  v0[36] = v34;
  *((_BYTE *)v0 + 296) = v35;
  *((_OWORD *)v0 + 19) = *(_OWORD *)(v3 - 112);
  v36 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  v0[24] = v24;
  v0[25] = v36;
  v37 = MEMORY[0x1E0CE2E70];
  v38 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v0 + 24);
  v39 = *v0;
  MEMORY[0x18D75B4AC](v0 + 26, v12, v0[2], v38);
  (*(void (**)(_BYTE *, uint64_t))(v0[3] + 8))(v15, v12);
  ResolvedContentUnavailableView.flexibleFrameModifier.getter((_OWORD *)(v3 - 208));
  v40 = *(_BYTE *)(v3 - 200);
  v41 = *(_QWORD *)(v3 - 192);
  v42 = *(_BYTE *)(v3 - 184);
  v43 = *(_QWORD *)(v3 - 176);
  v44 = *(_BYTE *)(v3 - 168);
  v45 = *(_QWORD *)(v3 - 160);
  v46 = *(_BYTE *)(v3 - 152);
  v47 = *(_QWORD *)(v3 - 144);
  v48 = *(_BYTE *)(v3 - 136);
  v49 = *(_QWORD *)(v3 - 128);
  v50 = *(_BYTE *)(v3 - 120);
  v0[26] = *(_QWORD *)(v3 - 208);
  *((_BYTE *)v0 + 216) = v40;
  v0[28] = v41;
  *((_BYTE *)v0 + 232) = v42;
  v0[30] = v43;
  *((_BYTE *)v0 + 248) = v44;
  v0[32] = v45;
  *((_BYTE *)v0 + 264) = v46;
  v0[34] = v47;
  *((_BYTE *)v0 + 280) = v48;
  v0[36] = v49;
  *((_BYTE *)v0 + 296) = v50;
  *((_OWORD *)v0 + 19) = *(_OWORD *)(v3 - 112);
  v51 = type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  v52 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>, MEMORY[0x1E0CE35E0]);
  v0[22] = v38;
  v0[23] = v52;
  v53 = v37;
  v54 = v0[5];
  v55 = MEMORY[0x18D75FFDC](v53, v54, v0 + 22);
  MEMORY[0x18D75B4AC](v0 + 26, v54, v51, v55);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[6] + 8))(v39, v54);
}

void closure #2 in ResolvedContentUnavailableView.body.getter()
{
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_186FDDFE8()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t);
  _BYTE v37[96];

  swift_getTupleTypeMetadata2();
  v4 = type metadata accessor for TupleView();
  v5 = MEMORY[0x1E0CE7EB8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v4);
  type metadata accessor for VStack();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38], v0);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v6 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](v5, v6);
  v7 = type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v7);
  v12 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v3 - 136) = v11;
  *(_QWORD *)(v3 - 128) = v12;
  v13 = MEMORY[0x1E0CE2E70];
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v3 - 136);
  v15 = MEMORY[0x1E0CE35E0];
  v16 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>, MEMORY[0x1E0CE35E0]);
  *(_QWORD *)(v3 - 152) = v14;
  *(_QWORD *)(v3 - 144) = v16;
  v17 = MEMORY[0x18D75FFDC](v13, v9, v3 - 152);
  v18 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>, v15);
  *(_QWORD *)(v3 - 168) = v17;
  *(_QWORD *)(v3 - 160) = v18;
  v19 = MEMORY[0x18D75FFDC](v13, v10, v3 - 168);
  type metadata accessor for ScrollView(255, v10, v19, v20);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v21 = type metadata accessor for TupleView();
  v22 = MEMORY[0x18D75FFDC](v5, v21);
  v24 = type metadata accessor for ViewThatFits(0, v21, v22, v23);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = &v37[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = &v37[-v31];
  *(_QWORD *)(v3 - 224) = v2;
  *(_QWORD *)(v3 - 216) = v1;
  v33 = *(_QWORD *)(v3 - 272);
  *(_QWORD *)(v3 - 208) = *(_QWORD *)(v3 - 288);
  *(_QWORD *)(v3 - 200) = v33;
  v34 = *(_QWORD *)(v3 - 256);
  *(_QWORD *)(v3 - 192) = *(_QWORD *)(v3 - 264);
  *(_QWORD *)(v3 - 184) = v34;
  *(_QWORD *)(v3 - 176) = *(_QWORD *)(v3 - 280);
  ViewThatFits.init(in:content:)();
  static ViewBuilder.buildExpression<A>(_:)(v28, v24, &protocol witness table for ViewThatFits<A>);
  v35 = *(void (**)(_BYTE *, uint64_t))(v25 + 8);
  v35(v28, v24);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v32, v24, *(_QWORD *)(v3 - 248));
  return ((uint64_t (*)(_BYTE *, uint64_t))v35)(v32, v24);
}

void closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter()
{
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_186FDE574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(_QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for TupleView();
  v14 = MEMORY[0x1E0CE7EB8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v13);
  type metadata accessor for VStack();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38], v9);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v15 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](v14, v15);
  v16 = type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  v17 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>();
  v18 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  v19 = type metadata accessor for ModifiedContent();
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v16);
  v21 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v12 - 104) = v20;
  *(_QWORD *)(v12 - 96) = v21;
  v22 = MEMORY[0x1E0CE2E70];
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v12 - 104);
  v24 = MEMORY[0x1E0CE35E0];
  v25 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>, MEMORY[0x1E0CE35E0]);
  *(_QWORD *)(v12 - 120) = v23;
  *(_QWORD *)(v12 - 112) = v25;
  v26 = MEMORY[0x18D75FFDC](v22, v18, v12 - 120);
  v27 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>, v24);
  *(_QWORD *)(v12 - 136) = v26;
  *(_QWORD *)(v12 - 128) = v27;
  v28 = MEMORY[0x18D75FFDC](v22, v19, v12 - 136);
  *(_QWORD *)(v12 - 320) = v28;
  v30 = type metadata accessor for ScrollView(0, v19, v28, v29);
  *(_QWORD *)(v12 - 384) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(v12 - 416) = v30;
  MEMORY[0x1E0C80A78](v30, v30);
  *(_QWORD *)(v12 - 424) = (char *)&a9 - v31;
  v32 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 392) = v32;
  *(_QWORD *)(v12 - 376) = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  *(_QWORD *)(v12 - 432) = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  *(_QWORD *)(v12 - 400) = (char *)&a9 - v37;
  *(_QWORD *)(v12 - 312) = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v38, v39);
  MEMORY[0x1E0C80A78](v40, v41);
  *(_QWORD *)(v12 - 440) = (char *)&a9 - v42;
  v43 = *(_QWORD *)(v12 - 360);
  *(_QWORD *)(v12 - 184) = v11;
  *(_QWORD *)(v12 - 176) = v43;
  v44 = *(_QWORD *)(v12 - 352);
  *(_QWORD *)(v12 - 168) = v10;
  *(_QWORD *)(v12 - 160) = v44;
  v45 = *(_QWORD *)(v12 - 336);
  *(_QWORD *)(v12 - 152) = *(_QWORD *)(v12 - 344);
  *(_QWORD *)(v12 - 144) = v45;
  type metadata accessor for ResolvedContentUnavailableView();
}

void sub_186FDE8B0()
{
  ResolvedContentUnavailableView.resolvedBody(iconHidden:)();
}

uint64_t sub_186FDE8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  static ViewBuilder.buildExpression<A>(_:)(v3, v2, *(_QWORD *)(v9 - 320));
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 312) + 8);
  *(_QWORD *)(v9 - 408) = v10;
  v10(v3, v2);
  *(_QWORD *)(v9 - 288) = v8;
  *(_QWORD *)(v9 - 280) = v7;
  *(_QWORD *)(v9 - 272) = v6;
  *(_QWORD *)(v9 - 264) = v5;
  *(_QWORD *)(v9 - 256) = v4;
  *(_QWORD *)(v9 - 248) = v0;
  *(_QWORD *)(v9 - 240) = v1;
  v11 = *(_QWORD *)(v9 - 424);
  v12 = *(_QWORD *)(v9 - 320);
  ScrollView.init(_:content:)(2, (uint64_t (*)(uint64_t))partial apply for closure #1 in closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter, v9 - 304, v2, v12, v11);
  *(_BYTE *)(v9 - 184) = 2;
  v13 = *(_QWORD *)(v9 - 416);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollView<A>, v13);
  v15 = *(_QWORD *)(v9 - 432);
  View.scrollBounceBehavior(_:axes:)((_BYTE *)(v9 - 184), 2, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 384) + 8))(v11, v13);
  *(_QWORD *)(v9 - 200) = v14;
  *(_QWORD *)(v9 - 192) = &protocol witness table for TransformScrollBounceBehavior;
  v16 = *(_QWORD *)(v9 - 392);
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v16, v9 - 200);
  v18 = *(_QWORD *)(v9 - 400);
  static ViewBuilder.buildExpression<A>(_:)(v15, v16, v17);
  v19 = *(_QWORD *)(v9 - 376);
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v20(v15, v16);
  v21 = *(_QWORD *)(v9 - 440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 312) + 16))(v3, v21, v2);
  *(_QWORD *)(v9 - 184) = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v15, v18, v16);
  *(_QWORD *)(v9 - 176) = v15;
  *(_QWORD *)(v9 - 216) = v2;
  *(_QWORD *)(v9 - 208) = v16;
  *(_QWORD *)(v9 - 232) = v12;
  *(_QWORD *)(v9 - 224) = v17;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t *)(v9 - 184), 2uLL, v9 - 216);
  v20(v18, v16);
  v22 = *(void (**)(uint64_t, uint64_t))(v9 - 408);
  v22(v21, v2);
  v20(v15, v16);
  return ((uint64_t (*)(uint64_t, uint64_t))v22)(v3, v2);
}

void closure #1 in ResolvedContentUnavailableView.body.getter()
{
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_186FDED00()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_getTupleTypeMetadata2();
  v3 = type metadata accessor for TupleView();
  v4 = MEMORY[0x1E0CE7EB8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v3);
  type metadata accessor for VStack();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38], v0);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v5 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](v4, v5);
  type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = *(_QWORD *)(v2 - 248);
  *(_QWORD *)(v2 - 136) = *(_QWORD *)(v2 - 240);
  *(_QWORD *)(v2 - 128) = v10;
  v11 = *(_QWORD *)(v2 - 232);
  *(_QWORD *)(v2 - 120) = v1;
  *(_QWORD *)(v2 - 112) = v11;
  v12 = *(_QWORD *)(v2 - 216);
  *(_QWORD *)(v2 - 104) = *(_QWORD *)(v2 - 224);
  *(_QWORD *)(v2 - 96) = v12;
  type metadata accessor for ResolvedContentUnavailableView();
}

void sub_186FDEEA8()
{
  ResolvedContentUnavailableView.resolvedBody(iconHidden:)();
}

uint64_t sub_186FDEEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);

  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v4);
  v10 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v8 - 152) = v9;
  *(_QWORD *)(v8 - 144) = v10;
  v11 = MEMORY[0x1E0CE2E70];
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v8 - 152);
  v13 = MEMORY[0x1E0CE35E0];
  v14 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, v2, MEMORY[0x1E0CE35E0]);
  *(_QWORD *)(v8 - 168) = v12;
  *(_QWORD *)(v8 - 160) = v14;
  v15 = MEMORY[0x18D75FFDC](v11, v3, v8 - 168);
  v16 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>, v13);
  *(_QWORD *)(v8 - 184) = v15;
  *(_QWORD *)(v8 - 176) = v16;
  v17 = MEMORY[0x18D75FFDC](v11, v0, v8 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v1, v0, v17);
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v18(v1, v0);
  static ViewBuilder.buildBlock<A>(_:)(v7, v0, *(_QWORD *)(v8 - 192));
  return v18(v7, v0);
}

void closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_186FDF178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(_QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  swift_getTupleTypeMetadata2();
  v13 = type metadata accessor for TupleView();
  *(_QWORD *)(v12 - 408) = v13;
  *(_QWORD *)(v12 - 416) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v13);
  v14 = type metadata accessor for VStack();
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v12 - 448) = v14;
  *(_QWORD *)(v12 - 392) = v15;
  MEMORY[0x1E0C80A78](v14, v16);
  *(_QWORD *)(v12 - 432) = (char *)&a9 - v17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38], v9);
  v18 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 400) = v18;
  *(_QWORD *)(v12 - 384) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v12 - 456) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)(v12 - 424) = (char *)&a9 - v23;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  v24 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 504) = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  *(_QWORD *)(v12 - 528) = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  v26 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 496) = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v28 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 488) = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v30 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 480) = v30;
  *(_QWORD *)(v12 - 464) = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  *(_QWORD *)(v12 - 520) = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  *(_QWORD *)(v12 - 368) = (char *)&a9 - v35;
  *(_QWORD *)(v12 - 512) = v10;
  v36 = *(_QWORD *)(v12 - 352);
  *(_QWORD *)(v12 - 136) = v10;
  *(_QWORD *)(v12 - 128) = v36;
  v37 = *(_QWORD *)(v12 - 360);
  *(_QWORD *)(v12 - 120) = v11;
  *(_QWORD *)(v12 - 112) = v37;
  v38 = *(_QWORD *)(v12 - 344);
  *(_QWORD *)(v12 - 104) = *(_QWORD *)(v12 - 328);
  *(_QWORD *)(v12 - 96) = v38;
  type metadata accessor for ResolvedContentUnavailableView();
}

uint64_t sub_186FDF480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  *(_QWORD *)(v8 - 136) = swift_getKeyPath();
  *(_BYTE *)(v8 - 128) = 0;
  *(_DWORD *)(v8 - 124) = 1;
  *(_BYTE *)(v8 - 120) = *(_DWORD *)(v8 - 440);
  lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle();
  View.labelStyle<A>(_:)(v8 - 136, v1, (uint64_t)&unk_1E1AF6348, v4);
  swift_release();
  v9 = lazy protocol witness table accessor for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>();
  *(_QWORD *)(v8 - 152) = v4;
  *(_QWORD *)(v8 - 144) = v9;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v8 - 152);
  MEMORY[0x18D75B4AC](v11, v3, *(_QWORD *)(v8 - 528), v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 504) + 8))(v0, v3);
  static Font.title2.getter();
  v12 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v8 - 168) = v11;
  *(_QWORD *)(v8 - 160) = v12;
  v13 = MEMORY[0x18D75FFDC](v10, v5, v8 - 168);
  View.font(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 496) + 8))(v7, v5);
  v14 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  *(_QWORD *)(v8 - 184) = v13;
  *(_QWORD *)(v8 - 176) = v14;
  v15 = MEMORY[0x18D75FFDC](v10, v2, v8 - 184);
  v16 = *(_QWORD *)(v8 - 520);
  View.multilineTextAlignment(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 488) + 8))(v6, v2);
  v17 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098]);
  *(_QWORD *)(v8 - 200) = v15;
  *(_QWORD *)(v8 - 192) = v17;
  v18 = v10;
  v19 = *(_QWORD *)(v8 - 480);
  v20 = MEMORY[0x18D75FFDC](v10, v19, v8 - 200);
  *(_QWORD *)(v8 - 440) = v20;
  static ViewBuilder.buildExpression<A>(_:)(v16, v19, v20);
  v21 = *(_QWORD *)(v8 - 464);
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v22(v16, v19);
  *(_QWORD *)(v8 - 304) = *(_QWORD *)(v8 - 512);
  *(_QWORD *)(v8 - 296) = *(_QWORD *)(v8 - 352);
  *(_QWORD *)(v8 - 288) = *(_QWORD *)(v8 - 472);
  *(_QWORD *)(v8 - 280) = *(_QWORD *)(v8 - 360);
  *(_QWORD *)(v8 - 272) = *(_QWORD *)(v8 - 328);
  *(_QWORD *)(v8 - 264) = *(_QWORD *)(v8 - 344);
  *(_QWORD *)(v8 - 256) = *(_QWORD *)(v8 - 336);
  static HorizontalAlignment.center.getter();
  v23 = *(_QWORD *)(v8 - 432);
  VStack.init(alignment:spacing:content:)();
  *(_BYTE *)(v8 - 136) = 1;
  v24 = *(_QWORD *)(v8 - 448);
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v24);
  v26 = *(_QWORD *)(v8 - 456);
  View.controlSize(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 392) + 8))(v23, v24);
  v27 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38]);
  *(_QWORD *)(v8 - 216) = v25;
  *(_QWORD *)(v8 - 208) = v27;
  v28 = *(_QWORD *)(v8 - 400);
  v29 = MEMORY[0x18D75FFDC](v18, v28, v8 - 216);
  v30 = *(_QWORD *)(v8 - 424);
  static ViewBuilder.buildExpression<A>(_:)(v26, v28, v29);
  v31 = *(_QWORD *)(v8 - 384);
  v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v32(v26, v28);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  v34 = *(_QWORD *)(v8 - 368);
  v33(v16, v34, v19);
  *(_QWORD *)(v8 - 136) = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v26, v30, v28);
  *(_QWORD *)(v8 - 128) = v26;
  *(_QWORD *)(v8 - 232) = v19;
  *(_QWORD *)(v8 - 224) = v28;
  *(_QWORD *)(v8 - 248) = *(_QWORD *)(v8 - 440);
  *(_QWORD *)(v8 - 240) = v29;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t *)(v8 - 136), 2uLL, v8 - 232);
  v32(v30, v28);
  v22(v34, v19);
  v32(v26, v28);
  return ((uint64_t (*)(uint64_t, uint64_t))v22)(v16, v19);
}

void closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_186FDF9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v11 - 328) = a1;
  *(_QWORD *)(v11 - 288) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 320) = (char *)&a9 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v11 - 312) = (char *)&a9 - v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 392) = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  v18 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 384) = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v20 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v11 - 368) = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  MEMORY[0x1E0C80A78](v22, v23);
  *(_QWORD *)(v11 - 400) = (char *)&a9 - v24;
  *(_QWORD *)(v11 - 136) = *(_QWORD *)(v11 - 352);
  *(_QWORD *)(v11 - 128) = v10;
  v25 = *(_QWORD *)(v11 - 344);
  *(_QWORD *)(v11 - 120) = *(_QWORD *)(v11 - 376);
  *(_QWORD *)(v11 - 112) = v25;
  *(_QWORD *)(v11 - 104) = *(_QWORD *)(v11 - 336);
  *(_QWORD *)(v11 - 96) = v9;
  type metadata accessor for ResolvedContentUnavailableView();
}

void sub_186FDFBC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);

  *(_QWORD *)(v8 - 344) = a1;
  static Font.subheadline.getter();
  View.font(_:)();
  swift_release();
  static Color.secondary.getter();
  v9 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  *(_QWORD *)(v8 - 152) = v2;
  *(_QWORD *)(v8 - 144) = v9;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v8 - 152);
  View.defaultForegroundColor(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 392) + 8))(v4, v3);
  v12 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  *(_QWORD *)(v8 - 168) = v11;
  *(_QWORD *)(v8 - 160) = v12;
  v13 = MEMORY[0x18D75FFDC](v10, v6, v8 - 168);
  View.multilineTextAlignment(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 384) + 8))(v5, v6);
  v14 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098]);
  *(_QWORD *)(v8 - 184) = v13;
  *(_QWORD *)(v8 - 176) = v14;
  v15 = MEMORY[0x18D75FFDC](v10, v7, v8 - 184);
  *(_QWORD *)(v8 - 352) = v15;
  static ViewBuilder.buildExpression<A>(_:)(v1, v7, v15);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 368) + 8);
  *(_QWORD *)(v8 - 336) = v16;
  v16(v1, v7);
  ResolvedContentUnavailableView.resolvedActions.getter();
}

uint64_t sub_186FDFD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);

  v7 = lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  v8 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>, (uint64_t)&protocol witness table for ButtonStyleModifier<A>);
  *(_QWORD *)(v6 - 200) = *(_QWORD *)(v6 - 360);
  *(_QWORD *)(v6 - 192) = v8;
  v9 = MEMORY[0x18D75FFDC](v1, *(_QWORD *)(v6 - 296), v6 - 200);
  *(_QWORD *)(v6 - 216) = v7;
  *(_QWORD *)(v6 - 208) = v9;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], *(_QWORD *)(v6 - 304), v6 - 216);
  *(_QWORD *)(v6 - 232) = v10;
  *(_QWORD *)(v6 - 224) = v10;
  v11 = *(_QWORD *)(v6 - 328);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v11, v6 - 232);
  v13 = *(_QWORD *)(v6 - 312);
  static ViewBuilder.buildExpression<A>(_:)(v4, v11, v12);
  v14 = *(_QWORD *)(v6 - 288);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v4, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v5);
  *(_QWORD *)(v6 - 136) = v0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v4, v13, v11);
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 248) = v5;
  *(_QWORD *)(v6 - 240) = v11;
  *(_QWORD *)(v6 - 264) = *(_QWORD *)(v6 - 352);
  *(_QWORD *)(v6 - 256) = v12;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t *)(v6 - 136), 2uLL, v6 - 248);
  v15(v13, v11);
  v16 = *(void (**)(uint64_t, uint64_t))(v6 - 336);
  v16(v2, v5);
  v15(v4, v11);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v0, v5);
}

void ResolvedContentUnavailableView.resolvedActions.getter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_186FDFFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v13 - 336) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v13 - 344) = *(_QWORD *)(v9 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&a9 - v19;
  v21 = v10[7];
  MEMORY[0x18D75B4AC](v18);
  v22 = v10[2];
  v23 = v10[3];
  *(_QWORD *)(v13 - 224) = v22;
  *(_QWORD *)(v13 - 216) = v23;
  v24 = v10[5];
  v25 = v10[6];
  *(_QWORD *)(v13 - 208) = v11;
  *(_QWORD *)(v13 - 200) = v24;
  *(_QWORD *)(v13 - 192) = v25;
  *(_QWORD *)(v13 - 184) = v21;
  *(_QWORD *)(v13 - 176) = v20;
  *(_QWORD *)(v13 - 304) = v22;
  *(_QWORD *)(v13 - 296) = v23;
  *(_QWORD *)(v13 - 288) = v11;
  *(_QWORD *)(v13 - 280) = v24;
  *(_QWORD *)(v13 - 272) = v25;
  *(_QWORD *)(v13 - 264) = v21;
  *(_QWORD *)(v13 - 256) = v20;
  v26 = lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  v27 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>, (uint64_t)&protocol witness table for ButtonStyleModifier<A>);
  *(_QWORD *)(v13 - 136) = v21;
  *(_QWORD *)(v13 - 128) = v27;
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v13 - 352), v13 - 136);
  *(_QWORD *)(v13 - 152) = v26;
  *(_QWORD *)(v13 - 144) = v28;
  v29 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v12, v13 - 152);
  StaticIf<>.init<A>(idiom:then:else:)(v29, (void (*)(void))partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter, v13 - 240, (uint64_t)partial apply for closure #2 in ResolvedContentUnavailableView.resolvedActions.getter, v13 - 320, v12, v12, MEMORY[0x1E0CE3EE0]);
}

uint64_t sub_186FE0168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 168) = v0;
  *(_QWORD *)(v6 - 160) = v0;
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v2, v6 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v4, v2, v7);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 336) + 8);
  v8(v4, v2);
  static ViewBuilder.buildBlock<A>(_:)(v3, v2, *(_QWORD *)(v6 - 328));
  v8(v3, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 344) + 8))(v5, v1);
}

uint64_t ResolvedContentUnavailableView.marginModifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t result;
  unsigned __int8 v14;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v1, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v14);
  if (v14 > 6u)
  {
    EdgeInsets.init(_all:)();
    v5 = v9;
    v6 = v10;
    v7 = v11;
    v8 = v12;
    outlined consume of Environment<Bool>.Content(v3, v4);
  }
  else
  {
    outlined consume of Environment<Bool>.Content(v3, v4);
    v5 = 16.0;
    v6 = 0x4040000000000000;
    v7 = 16.0;
    v8 = 0x4040000000000000;
  }
  result = static Edge.Set.all.getter();
  *(_BYTE *)a1 = result;
  *(double *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(double *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

__n128 ResolvedContentUnavailableView.macFrameModifier.getter@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  *a1 = v3;
  a1[1] = v4;
  result = v6;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

__n128 ResolvedContentUnavailableView.flexibleFrameModifier.getter@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  *a1 = v3;
  a1[1] = v4;
  result = v6;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t (*implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;

  v12 = *a1;
  v13 = *((_QWORD *)a1 + 1);
  v14 = a1[16];
  v15 = *((_DWORD *)a1 + 5);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a4;
  *(_QWORD *)(v16 + 40) = a5;
  *(_QWORD *)(v16 + 48) = a6;
  *(_QWORD *)(v16 + 56) = a7;
  *(_BYTE *)(v16 + 64) = v12;
  *(_QWORD *)(v16 + 72) = v13;
  *(_BYTE *)(v16 + 80) = v14;
  *(_DWORD *)(v16 + 84) = v15;
  outlined copy of Environment<Bool>.Content(v13, v14);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter;
}

uint64_t Layout.callAsFunction<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  _QWORD v20[10];

  v20[0] = a6;
  v20[1] = a7;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _LayoutRoot();
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v7, a3, v18);
  _LayoutRoot.init(_:)();
  v20[4] = a3;
  v20[5] = a4;
  v20[6] = a5;
  v20[7] = v20[0];
  v20[8] = a1;
  v20[9] = a2;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14B8], v16);
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t (*a10)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _BYTE *);
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  _BYTE v54[8];
  uint64_t v55;
  char v56;
  int v57;

  v38 = a7;
  v43 = a9;
  v40 = a1;
  v41 = a11;
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  v39 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  v17 = type metadata accessor for _VariadicView.Tree();
  v42 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v36 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v37 = (char *)&v36 - v22;
  KeyPath = swift_getKeyPath();
  v54[0] = a8;
  v55 = KeyPath;
  v56 = 0;
  v57 = 1;
  v24 = a2;
  v25 = a2;
  v26 = v38;
  v27 = (void (*)(uint64_t, _BYTE *))a10(v54, v25, a3, a4, a5, a6, v38);
  swift_release();
  v45 = v24;
  v46 = a3;
  v47 = a4;
  v48 = a5;
  v49 = a6;
  v50 = v26;
  v51 = v40;
  v28 = v36;
  v27(v41, v44);
  swift_release();
  v29 = lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  v30 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>, (uint64_t)&protocol witness table for ButtonStyleModifier<A>);
  v53[0] = v26;
  v53[1] = v30;
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v39, v53);
  v52[0] = v29;
  v52[1] = v31;
  v32 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v17, v52);
  v33 = (uint64_t)v37;
  static ViewBuilder.buildExpression<A>(_:)(v28, v17, v32);
  v34 = *(void (**)(char *, uint64_t))(v42 + 8);
  v34(v28, v17);
  static ViewBuilder.buildBlock<A>(_:)(v33, v17, v43);
  return ((uint64_t (*)(uint64_t, uint64_t))v34)(v33, v17);
}

uint64_t (*implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;

  v12 = *a1;
  v13 = *((_QWORD *)a1 + 1);
  v14 = a1[16];
  v15 = *((_DWORD *)a1 + 5);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a4;
  *(_QWORD *)(v16 + 40) = a5;
  *(_QWORD *)(v16 + 48) = a6;
  *(_QWORD *)(v16 + 56) = a7;
  *(_BYTE *)(v16 + 64) = v12;
  *(_QWORD *)(v16 + 72) = v13;
  *(_BYTE *)(v16 + 80) = v14;
  *(_DWORD *)(v16 + 84) = v15;
  outlined copy of Environment<Bool>.Content(v13, v14);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter;
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  char v19;
  int v20;

  v17 = a3 & 1;
  v18 = a4;
  v19 = a5 & 1;
  v20 = HIDWORD(a5);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  v12 = type metadata accessor for ModifiedContent();
  v13 = lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout();
  v16[0] = a9;
  v16[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>, (uint64_t)&protocol witness table for ButtonStyleModifier<A>);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v16);
  return Layout.callAsFunction<A>(_:)(a1, a2, (uint64_t)&unk_1E1AB50C8, v12, v13, v14, a6);
}

uint64_t closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v14 - v9;
  v11 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>, (uint64_t)&protocol witness table for ButtonStyleModifier<A>);
  v14[0] = a2;
  v14[1] = v11;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v14);
  static ViewBuilder.buildExpression<A>(_:)(a1, v6, v12);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, v6, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void ResolvedContentUnavailableView.init(label:description:actions:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 1;
  type metadata accessor for ResolvedContentUnavailableView();
}

uint64_t sub_186FE0B64(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v7 + a1[17], v6, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v7 + a1[18], v5, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v7 + a1[19], v4, v1);
}

unint64_t lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle;
  if (!lazy protocol witness table cache variable for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContentUnavailableLabelStyle, &unk_1E1AF6348);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout;
  if (!lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActionsLayout, &unk_1E1AB50C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout;
  if (!lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ActionsLayout, &unk_1E1AB50C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionsLayout and conformance ActionsLayout);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleModifier<FlexibleBorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle, (uint64_t)&unk_1E1AF2EC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleModifier);
    lazy protocol witness table accessor for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle;
  if (!lazy protocol witness table cache variable for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FlexibleBorderedButtonStyle, &unk_1E1AF2EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleBorderedButtonStyle and conformance FlexibleBorderedButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate;
  if (!lazy protocol witness table cache variable for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CUVFlexibleButtonPredicate, &unk_1E1AED8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUVFlexibleButtonPredicate and conformance CUVFlexibleButtonPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14B8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE14C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate;
  if (!lazy protocol witness table cache variable for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CUVFlexibleFramePredicate, &unk_1E1AE8C80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUVFlexibleFramePredicate and conformance CUVFlexibleFramePredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
    v2[0] = MEMORY[0x1E0CE1E88];
    v2[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void partial apply for closure #1 in ResolvedContentUnavailableView.body.getter()
{
  partial apply for closure #1 in ResolvedContentUnavailableView.body.getter();
}

{
  closure #1 in ResolvedContentUnavailableView.body.getter();
}

uint64_t partial apply for closure #2 in ResolvedContentUnavailableView.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in ResolvedContentUnavailableView.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter);
}

void partial apply for closure #1 in closure #1 in closure #2 in ResolvedContentUnavailableView.body.getter()
{
  partial apply for closure #1 in ResolvedContentUnavailableView.body.getter();
}

void partial apply for closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)()
{
  closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)();
}

uint64_t closure #1 in ContentUnavailableLabelStyle.makeBody(configuration:)@<X0>(unint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  if ((a2 & 1) != 0)
  {
    v4 = 0;
    v5 = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = HIDWORD(a1);
    LOBYTE(v8) = 2;
    static Font.custom(_:size:relativeTo:)();
    View.symbolFont(_:)();
    swift_release();
    v5 = *((_QWORD *)&v8 + 1);
    v4 = v8;
  }
  static Font.Weight.bold.getter();
  View.fontWeight(_:)();
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 40) = v9;
  outlined copy of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v4);
  return outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v4);
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance ContentUnavailableLabelStyle@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  int v12;
  __n128 v13;
  uint64_t v14;

  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  v5 = *(unsigned int *)(v1 + 12);
  v6 = static HorizontalAlignment.center.getter();
  LOBYTE(v11) = v3;
  closure #1 in ContentUnavailableLabelStyle.makeBody(configuration:)(v3 | (unint64_t)(v5 << 32), v4, (uint64_t)&v11);
  v7 = v12;
  v8 = v14;
  result = v13;
  v10 = v11;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 0x402E000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 40) = v7;
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = v8;
  return result;
}

__n128 protocol witness for ViewModifier.body(content:) in conformance WidgetLabelModifier@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;
  unint64_t v3;
  unint64_t v4;
  __n128 v5;
  unint64_t v6;

  static Font.headline.getter();
  swift_getKeyPath();
  static Font.Weight.semibold.getter();
  type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  result = v5;
  a1->n128_u64[0] = v3;
  a1->n128_u64[1] = v4;
  a1[1] = v5;
  a1[2].n128_u64[0] = v6;
  return result;
}

__n128 FlexibleBorderedButtonStyle.makeBody(configuration:)@<Q0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  __n128 *v15;
  unsigned __int8 v16;
  unint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unsigned __int8 v22;
  unint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  unsigned __int8 v26;
  __n128 result;
  __int128 v28;
  unint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  unsigned __int8 v38;
  __n128 v39;

  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = *a1;
  v9 = a1[1];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)a1, (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for PrimitiveButtonStyleConfiguration);
  *a2 = v8;
  a2[1] = v9;
  type metadata accessor for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>(0);
  v13 = v12;
  v14 = (uint64_t (**)())&a2[*(int *)(v12 + 36)];
  *v14 = partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:);
  v14[1] = (uint64_t (*)())v11;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v15 = (__n128 *)&a2[*(int *)(v13 + 40)];
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v28, 0.0, 1, 0.0, 1);
  v16 = BYTE8(v28);
  v17 = v29;
  v18 = v30;
  v19 = v31;
  v20 = v32;
  v21 = v33;
  v22 = v34;
  v23 = v35;
  v24 = v36;
  v25 = v37;
  v26 = v38;
  result = v39;
  v15->n128_u64[0] = v28;
  v15->n128_u8[8] = v16;
  v15[1].n128_u64[0] = v17;
  v15[1].n128_u8[8] = v18;
  v15[2].n128_u64[0] = v19;
  v15[2].n128_u8[8] = v20;
  v15[3].n128_u64[0] = v21;
  v15[3].n128_u8[8] = v22;
  v15[4].n128_u64[0] = v23;
  v15[4].n128_u8[8] = v24;
  v15[5].n128_u64[0] = v25;
  v15[5].n128_u8[8] = v26;
  v15[6] = result;
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  void (*v21)(uint64_t);
  void (*v22)(void *);
  uint64_t v23;
  _BYTE v24[16];

  v2 = type metadata accessor for LinkDestination();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for ButtonAction();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + *(int *)(v10 + 24), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
      LinkDestination.open()();
      return outlined destroy of LinkDestination((uint64_t)v5);
    }
    else
    {
      v17 = *(_QWORD *)v9;
      v18 = *((_QWORD *)v9 + 1);
      v19 = v9[16];
      v20 = (void *)*((_QWORD *)v9 + 3);
      v21 = (void (*)(uint64_t))*((_QWORD *)v9 + 4);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v18, v19);
      v22 = (void (*)(void *))specialized Environment.wrappedValue.getter(v17, v18, v19);
      v23 = outlined consume of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
      if (v22)
      {
        v22(v20);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v22);
      }
      else
      {
        v21(v23);
      }
      outlined consume of Environment<AppIntentExecutor?>.Content(v17, v18, v19);

      return swift_release();
    }
  }
  else
  {
    v14 = *(_QWORD *)v9;
    v13 = *((_QWORD *)v9 + 1);
    v15 = type metadata accessor for MainActor();
    MEMORY[0x1E0C80A78](v15, v16);
    *(_QWORD *)&v24[-16] = v14;
    *(_QWORD *)&v24[-8] = v13;
    specialized static MainActor.assumeIsolated<A>(_:file:line:)((void (*)(void))partial apply for closure #1 in ButtonAction.callAsFunction(), (uint64_t)&v24[-32]);
    return swift_release();
  }
}

uint64_t ActionsLayout.sizeThatFits(proposal:subviews:cache:)()
{
  char *v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  ActionsLayout.maxSize(subviews:proposal:)();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v5 = result;
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v2, v3);
  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg5085_s7SwiftUI13ActionsLayout33_A3388C042543B1D2E497C2B474EB4854LLV7spacing8subviewsSay12d9Graphics7F28VGAA0D8SubviewsV_tFAISiXEfU_0I2UI06LayoutZ0VAM0K6Layout01_mnopqrsT0LLVTf1cn_nTf4ngd_n(0, v5);
  outlined consume of Environment<Bool>.Content(v2, v3);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    if (v7 == 1)
    {
      v8 = 0;
      v9 = 0.0;
LABEL_9:
      v12 = v7 - v8;
      v13 = (double *)(v6 + 8 * v8 + 32);
      do
      {
        v14 = *v13++;
        v9 = v9 + v14;
        --v12;
      }
      while (v12);
      goto LABEL_11;
    }
    v8 = v7 & 0x7FFFFFFFFFFFFFFELL;
    v10 = (double *)(v6 + 40);
    v9 = 0.0;
    v11 = v7 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v9 = v9 + *(v10 - 1) + *v10;
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
    if (v7 != v8)
      goto LABEL_9;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v15 = LayoutSubviews.endIndex.getter();
    result = LayoutSubviews.endIndex.getter();
    if ((result & 0x8000000000000000) == 0)
    {
      v16 = LayoutSubviews.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if ((v15 & 0x8000000000000000) == 0 && v16 >= v15)
        return result;
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  v17 = LayoutSubviews.endIndex.getter();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return result;
  }
  v18 = LayoutSubviews.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v17 < 0 || v18 < v17)
    goto LABEL_24;
  return result;
}

uint64_t ActionsLayout.maxSize(subviews:proposal:)()
{
  int64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  uint64_t v17;

  v0 = LayoutSubviews.endIndex.getter();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  result = LayoutSubviews.endIndex.getter();
  if (v0 < 0 || result < v0)
    goto LABEL_20;
  v2 = MEMORY[0x1E0DEE9D8];
  if (v0)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v0, 0);
    v3 = 0;
    v2 = v17;
    while (1)
    {
      LayoutSubviews.subscript.getter();
      static ProposedViewSize.unspecified.getter();
      LayoutSubview.sizeThatFits(_:)();
      v5 = v4;
      v7 = v6;
      LayoutSubview.sizeThatFits(_:)();
      if (v8 < v5)
        v5 = v8;
      if (v7 <= v9)
        v7 = v9;
      v11 = *(_QWORD *)(v17 + 16);
      v10 = *(_QWORD *)(v17 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      *(_QWORD *)(v17 + 16) = v11 + 1;
      v12 = v17 + 16 * v11;
      *(double *)(v12 + 32) = v5;
      *(double *)(v12 + 40) = v7;
      result = LayoutSubviews.endIndex.getter();
      if (v3 >= result)
        break;
      if (v0 == ++v3)
        goto LABEL_14;
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_14:
  v13 = *(_QWORD *)(v2 + 16);
  if (v13)
  {
    v14 = (float64x2_t *)(v2 + 32);
    v15 = 0uLL;
    do
    {
      v16 = *v14++;
      v15 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v16, v15), (int8x16_t)v16, (int8x16_t)v15);
      --v13;
    }
    while (v13);
  }
  return swift_bridgeObjectRelease();
}

uint64_t ActionsLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  unsigned __int8 *v4;
  int v9;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  double MinY;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double MinX;
  uint64_t v28;
  uint64_t v29;
  double v30;
  CGRect v31;
  CGRect v32;

  v9 = *v4;
  v10 = *((_QWORD *)v4 + 1);
  v11 = v4[16];
  ActionsLayout.maxSize(subviews:proposal:)();
  v13 = v12;
  v15 = v14;
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v17 = result;
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v10, v11);
  v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg5085_s7SwiftUI13ActionsLayout33_A3388C042543B1D2E497C2B474EB4854LLV7spacing8subviewsSay12d9Graphics7F28VGAA0D8SubviewsV_tFAISiXEfU_0I2UI06LayoutZ0VAM0K6Layout01_mnopqrsT0LLVTf1cn_nTf4ngd_n(0, v17);
  outlined consume of Environment<Bool>.Content(v10, v11);
  swift_bridgeObjectRelease();
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  if (v9)
  {
    MinY = CGRectGetMinY(*(CGRect *)&v19);
    result = LayoutSubviews.endIndex.getter();
    if ((result & 0x8000000000000000) == 0)
    {
      v24 = result;
      if (result)
      {
        if ((unint64_t)(result - 1) < *(_QWORD *)(v18 + 16))
        {
          v25 = 0;
          v26 = v15 * 0.5 + MinY;
          do
          {
            LayoutSubviews.subscript.getter();
            v31.origin.x = a1;
            v31.origin.y = a2;
            v31.size.width = a3;
            v31.size.height = a4;
            CGRectGetMidX(v31);
            static UnitPoint.center.getter();
            LayoutSubview.place(at:anchor:proposal:)();
            v26 = v26 + v15 + *(double *)(v18 + 8 * v25++ + 32);
          }
          while (v24 != v25);
          return swift_bridgeObjectRelease();
        }
        goto LABEL_18;
      }
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  MinX = CGRectGetMinX(*(CGRect *)&v19);
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v28 = result;
  if (!result)
    return swift_bridgeObjectRelease();
  if ((unint64_t)(result - 1) < *(_QWORD *)(v18 + 16))
  {
    v29 = 0;
    v30 = v13 * 0.5 + MinX;
    do
    {
      LayoutSubviews.subscript.getter();
      v32.origin.x = a1;
      v32.origin.y = a2;
      v32.size.width = a3;
      v32.size.height = a4;
      CGRectGetMidY(v32);
      static UnitPoint.center.getter();
      LayoutSubview.place(at:anchor:proposal:)();
      v30 = v30 + v13 + *(double *)(v18 + 8 * v29++ + 32);
    }
    while (v28 != v29);
    return swift_bridgeObjectRelease();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ActionsLayout()
{
  return ActionsLayout.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ActionsLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return ActionsLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E0CE7410]);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E0CE7418]);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance ActionsLayout())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ContentUnavailableLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
    v2[0] = lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetLabelModifier and conformance WidgetLabelModifier;
  if (!lazy protocol witness table cache variable for type WidgetLabelModifier and conformance WidgetLabelModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetLabelModifier, &unk_1E1AD1350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetLabelModifier and conformance WidgetLabelModifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:)()
{
  return partial apply for closure #2 in ResolvedContentUnavailableView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedBody(iconHidden:));
}

uint64_t partial apply for closure #2 in ResolvedContentUnavailableView.body.getter(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3;
    v7[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter, (uint64_t)partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter, a1);
}

uint64_t partial apply for closure #2 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(1, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter, (uint64_t)partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter, a1);
}

uint64_t partial apply for closure #1 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(char a1@<W0>, uint64_t (*a2)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(v4[8], v4[2], v4[3], v4[4], v4[5], v4[6], v4[7], a1, a4, a2, a3);
}

uint64_t closure #1 in Layout.callAsFunction<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

uint64_t partial apply for closure #1 in Layout.callAsFunction<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Layout.callAsFunction<A>(_:)(v1[6], v1[7], v1[3], v1[5], a1);
}

uint64_t partial apply for closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 56), a1);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ResolvedContentUnavailableView.resolvedActions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return implicit closure #2 in implicit closure #1 in closure #1 in ResolvedContentUnavailableView.resolvedActions.getter(a1, a2, *(_BYTE *)(v3 + 64), *(_QWORD *)(v3 + 72), *(unsigned __int8 *)(v3 + 80) | ((unint64_t)*(unsigned int *)(v3 + 84) << 32), a3, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
}

void *type metadata accessor for CUVFlexibleFramePredicate()
{
  return &unk_1E1AE8C80;
}

void *type metadata accessor for FlexibleBorderedButtonStyle()
{
  return &unk_1E1AF2EC0;
}

void *type metadata accessor for CUVFlexibleButtonPredicate()
{
  return &unk_1E1AED8C8;
}

uint64_t initializeBufferWithCopyOfBuffer for ActionsLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithCopy for ActionsLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for ActionsLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionsLayout(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionsLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for ActionsLayout()
{
  return &unk_1E1AB50C8;
}

void *type metadata accessor for WidgetLabelModifier()
{
  return &unk_1E1AD1350;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentUnavailableLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for ContentUnavailableLabelStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ContentUnavailableLabelStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentUnavailableLabelStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableLabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for ContentUnavailableLabelStyle()
{
  return &unk_1E1AF6348;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentUnavailableViewSpecs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for ContentUnavailableViewSpecs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for ContentUnavailableViewSpecs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentUnavailableViewSpecs(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentUnavailableViewSpecs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for ContentUnavailableViewSpecs()
{
  return &unk_1E1AF2958;
}

void sub_186FE29D8()
{
  uint64_t (*v0)(void);

  v0 = MEMORY[0x1E0CE5A58];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ContentUnavailableLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContentUnavailableLabelStyle and conformance ContentUnavailableLabelStyle, (uint64_t)&unk_1E1AF6348, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v0);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _LayoutRoot<ActionsLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout, (uint64_t)&unk_1E1AB50C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE14A0]);
  type metadata accessor for StaticIf<CUVFlexibleButtonPredicate, ButtonStyleModifier<FlexibleBorderedButtonStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _LayoutRoot<ActionsLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  type metadata accessor for StaticIf();
}

void sub_186FE2C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20)
{
  uint64_t (*v20)(_QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  swift_getTupleTypeMetadata2();
  v21 = type metadata accessor for TupleView();
  v22 = MEMORY[0x1E0CE7EB8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v21);
  type metadata accessor for VStack();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>, MEMORY[0x1E0CE0F38], v20);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v23 = type metadata accessor for TupleView();
  MEMORY[0x18D75FFDC](v22, v23);
  v24 = type metadata accessor for VStack();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, WidgetLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout>);
  v25 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>();
  v26 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>();
  v27 = type metadata accessor for ModifiedContent();
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v24);
  v29 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, EmptyModifier, _PaddingLayout> and conformance <> StaticIf<A, B, C>();
  a15 = v28;
  a16 = v29;
  v30 = MEMORY[0x1E0CE2E70];
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v25, &a15);
  v32 = MEMORY[0x1E0CE35E0];
  v33 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier>, MEMORY[0x1E0CE35E0]);
  a13 = v31;
  a14 = v33;
  v34 = MEMORY[0x18D75FFDC](v30, v26, &a13);
  v35 = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<CUVFlexibleFramePredicate, _FlexFrameLayout, EmptyModifier>, v32);
  a11 = v34;
  a12 = v35;
  v36 = MEMORY[0x18D75FFDC](v30, v27, &a11);
  type metadata accessor for ScrollView(255, v27, v36, v37);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  v38 = type metadata accessor for TupleView();
  v39 = MEMORY[0x18D75FFDC](v22, v38);
  v41 = type metadata accessor for ViewThatFits(255, v38, v39, v40);
  v42 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  a18 = v27;
  a19 = v41;
  a20 = v42;
  type metadata accessor for StaticIf();
}

uint64_t sub_186FE2E6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[24];

  v3[0] = v1;
  v3[1] = &protocol witness table for ViewThatFits<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v3);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in WidgetLabelModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in FlexibleBorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ActionsLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ActionsLayout and conformance ActionsLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in ContentUnavailableLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized static CUVFlexibleFramePredicate.evaluate(inputs:)()
{
  char v0;

  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0)
  {
    v0 = 1;
  }
  else
  {
    _GraphInputs.interfaceIdiom.getter();
    v0 = AnyInterfaceIdiom.accepts<A>(_:)();
  }
  return v0 & 1;
}

uint64_t specialized static CUVFlexibleButtonPredicate.evaluate(inputs:)()
{
  uint64_t (*v0)(void);
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v6;

  lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  v0 = *(uint64_t (**)(void))(v6 + 8);
  if ((v0() & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<BorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle, (uint64_t)&type metadata for BorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
    v1 = v0();
  }
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for ButtonStyleTypeBox<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleTypeBox);
  v2 = v0();
  _GraphInputs.interfaceIdiom.getter();
  v3 = AnyInterfaceIdiom.accepts<A>(_:)();
  v4 = v1 | v2;
  if ((v3 & 1) == 0)
    v4 = v1;
  return v4 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg5085_s7SwiftUI13ActionsLayout33_A3388C042543B1D2E497C2B474EB4854LLV7spacing8subviewsSay12d9Graphics7F28VGAA0D8SubviewsV_tFAISiXEfU_0I2UI06LayoutZ0VAM0K6Layout01_mnopqrsT0LLVTf1cn_nTf4ngd_n(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v5 = result;
  v11 = MEMORY[0x1E0DEE9D8];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (a2 >= v5 && (v2 & 0x8000000000000000) == 0)
  {
    v3 = v11;
    while (a2 != v5)
    {
      swift_bridgeObjectRetain();
      v6 = LayoutSubviews.endIndex.getter();
      result = LayoutSubviews.endIndex.getter();
      if (result < 0)
        goto LABEL_18;
      v7 = LayoutSubviews.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v6 < 0 || v7 < v6)
        goto LABEL_19;
      if (v5 >= v6 - 1)
        v8 = 0.0;
      else
        v8 = 15.0;
      v10 = *(_QWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 24);
      if (v10 >= v9 >> 1)
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
      *(_QWORD *)(v11 + 16) = v10 + 1;
      *(double *)(v11 + 8 * v10 + 32) = v8;
      if (a2 == ++v5)
        return v3;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_186FE33F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + *(int *)(v1 + 24) + ((v2 + 16) & ~v2);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
      v5 = v3 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

uint64_t outlined consume of Environment<OpenURLAction>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if ((a6 & 1) != 0)
    return outlined consume of OpenURLAction.Handler(a1, a2, a3, a4, a5 & 1);
  else
    return swift_release();
}

uint64_t outlined consume of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_release();
  if ((a5 & 1) != 0)
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8) + 80);
  return implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:)(v0 + ((v1 + 16) & ~v1));
}

void type metadata accessor for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, MEMORY[0x1E0CE35F0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
    v2[1] = MEMORY[0x1E0CE35E0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of LinkDestination(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LinkDestination();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in ButtonAction.callAsFunction()()
{
  uint64_t v0;

  return closure #1 in ButtonAction.callAsFunction()(*(uint64_t (**)(void))(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput;
  if (!lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EffectiveButtonStyleInput, &type metadata for EffectiveButtonStyleInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput;
  if (!lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EffectiveButtonStyleInput, &type metadata for EffectiveButtonStyleInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier, (uint64_t)&unk_1E1AD1350, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetLabelModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLabelModifier and conformance WidgetLabelModifier, (uint64_t)&unk_1E1AD1350, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetLabelModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_186FE38B0()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>, MEMORY[0x1E0CE74B8]);
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<HierarchicalShapeStyle>, MEMORY[0x1E0CE5418], MEMORY[0x1E0CE5408], MEMORY[0x1E0CE5D58]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>);
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>);
  }
}

uint64_t sub_186FE3B48()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FlexFrameLayout>>, (uint64_t)&protocol conformance descriptor for Button<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<[AnyFontModifier]> and conformance _EnvironmentKeyTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>, MEMORY[0x1E0CE66D8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<WidgetLabelModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>);
  }
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnabledTechnologiesKey(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.accessibilityEnabledTechnologies.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledTechnologiesKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledTechnologiesKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.accessibilityEnabledTechnologies : EnvironmentValues@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result;
  __int16 v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.accessibilityEnabledTechnologies.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.accessibilityEnabledTechnologies.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.accessibilityEnabledTechnologies.modify;
}

uint64_t EnvironmentValues.accessibilityEnabledTechnologies.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_WORD *)a1 + 5) = *((_WORD *)a1 + 4);
  type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL EnvironmentValues.isEnabled(for:)(char a1)
{
  uint64_t v1;
  int v3;
  unsigned __int16 v5;

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = 1 << (a1 & 0xF);
  if ((a1 & 0xF0) != 0)
    v3 = 0;
  return (v3 & (v5 ^ 0xFFFF)) == 0;
}

uint64_t EnvironmentValues.setIsEnabled(_:for:)(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = a1 & 1;
  result = EnvironmentValues.isEnabled(for:)(a2);
  if ((result & 1) != v4)
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    if (v3)
    {
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

BOOL EnvironmentValues.accessibilityFullKeyboardAccessEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(2);
}

BOOL EnvironmentValues.accessibilityVoiceControlEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(3);
}

BOOL EnvironmentValues.accessibilityHoverTextEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(4);
}

BOOL EnvironmentValues.accessibilityAssistiveAccessEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(5);
}

uint64_t sub_186FE44C0()
{
  return EnvironmentValues.accessibilityEnabledTechnologies.setter();
}

BOOL sub_186FE44F4@<W0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm_0(0, a1);
}

uint64_t sub_186FE44FC(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 0);
}

BOOL sub_186FE4524@<W0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm_0(1, a1);
}

uint64_t sub_186FE452C(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 1);
}

BOOL sub_186FE4554@<W0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm_0(2, a1);
}

uint64_t sub_186FE455C(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 2);
}

BOOL sub_186FE4584@<W0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm_0(3, a1);
}

uint64_t sub_186FE458C(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 3);
}

BOOL sub_186FE45B4@<W0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm_0(4, a1);
}

uint64_t sub_186FE45BC(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 4);
}

BOOL sub_186FE45E4@<W0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm_0(5, a1);
}

BOOL keypath_get_1Tm_0@<W0>(char a1@<W3>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = EnvironmentValues.isEnabled(for:)(a1);
  *a2 = result;
  return result;
}

uint64_t sub_186FE462C(char *a1)
{
  return EnvironmentValues.setIsEnabled(_:for:)(*a1, 5);
}

ValueMetadata *type metadata accessor for EnabledTechnologiesKey()
{
  return &type metadata for EnabledTechnologiesKey;
}

void View.indentationLevel(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t key path setter for EnvironmentValues.isToggleOn : EnvironmentValues()
{
  return EnvironmentValues.isToggleOn.setter();
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>(255);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TextInputSuggestionsContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v4);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TabSectionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMod, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButton, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platfo, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContaine, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBut, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle, (uint64_t)&type metadata for SidebarSectionActionButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarSectionActionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle;
  if (!lazy protocol witness table cache variable for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarSectionActionButtonStyle, &type metadata for SidebarSectionActionButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContex, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContext, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>);
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E0CE5968], MEMORY[0x1E0CE5958], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

uint64_t sub_186FE4AEC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isToggleOn.getter();
  *a1 = result;
  return result;
}

uint64_t sub_186FE4B24()
{
  return EnvironmentValues.isToggleOn.setter();
}

uint64_t outlined init with copy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t View.automaticButtonStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a4;
  v30 = a5;
  v31 = a1;
  v32 = a6;
  v33 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WrappedButtonStyle(255, v10, v12, v11);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v13);
  v16 = type metadata accessor for ButtonStyleModifier(0, v13, v14, v15);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v30 - v19;
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v16, v18);
  v22 = type metadata accessor for AutomaticStyleOverrideModifier(0, (uint64_t)&type metadata for PlatformFallbackButtonStyle, v16, v21);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v30 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v31, a3, v25);
  ButtonStyleModifier.init<A>(style:)((uint64_t)v9, a3, v30, v28, (uint64_t)v20);
  StaticIf<>.init<>(_:then:)((uint64_t)v20, v16, (uint64_t)v27);
  MEMORY[0x18D75B4AC](v27, v33, v22, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v22);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a4;
  v26 = a5;
  v27 = a1;
  v28 = a6;
  v29 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ButtonStyleModifier(0, v10, v12, v11);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v26 - v16;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v13, v15);
  v19 = type metadata accessor for AutomaticStyleOverrideModifier(0, (uint64_t)&type metadata for PlatformFallbackButtonStyle, v13, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v26 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v27, a3, v22);
  FormatInputToString.init(format:)((uint64_t)v9, a3, (uint64_t)v17);
  StaticIf<>.init<>(_:then:)((uint64_t)v17, v13, (uint64_t)v24);
  MEMORY[0x18D75B4AC](v24, v29, v19, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v19);
}

uint64_t sub_186FE4EEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintColor : EnvironmentValues()
{
  swift_retain();
  return EnvironmentValues.tintColor.setter();
}

uint64_t sub_186FE4F4C()
{
  swift_retain();
  return EnvironmentValues.tintColor.setter();
}

uint64_t key path getter for EnvironmentValues.displayMenuAsPalette : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.displayMenuAsPalette.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.displayMenuAsPalette : EnvironmentValues()
{
  return EnvironmentValues.displayMenuAsPalette.setter();
}

uint64_t key path getter for EnvironmentValues.menuActionDismissBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, (uint64_t)&type metadata for MenuActionDismissBehaviorKey, (uint64_t)&protocol witness table for MenuActionDismissBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, (uint64_t)&type metadata for MenuActionDismissBehaviorKey, (uint64_t)&protocol witness table for MenuActionDismissBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuActionDismissBehavior : EnvironmentValues()
{
  return EnvironmentValues.menuActionDismissBehavior.setter();
}

uint64_t key path getter for EnvironmentValues.triggerSubmission : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.triggerSubmission.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.triggerSubmission : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t key path getter for EnvironmentValues.paletteSelectionEffect : EnvironmentValues@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result;
  __int16 v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>, (uint64_t)&type metadata for PaletteSelectionEffectKey, (uint64_t)&protocol witness table for PaletteSelectionEffectKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>, (uint64_t)&type metadata for PaletteSelectionEffectKey, (uint64_t)&protocol witness table for PaletteSelectionEffectKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.paletteSelectionEffect : EnvironmentValues()
{
  return EnvironmentValues.paletteSelectionEffect.setter();
}

uint64_t key path getter for EnvironmentValues.dismissSearchAccessory : EnvironmentValues(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.dismissSearchAccessory.getter(a1, a2);
}

uint64_t sub_186FE5324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE3BB0], a3);
}

uint64_t key path setter for EnvironmentValues.accessibilityShowButtonShapes : EnvironmentValues()
{
  return EnvironmentValues.accessibilityShowButtonShapes.setter();
}

uint64_t sub_186FE5354()
{
  return EnvironmentValues.accessibilityShowButtonShapes.setter();
}

uint64_t sub_186FE5378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.displayMenuAsPalette.getter, a3);
}

uint64_t sub_186FE5384()
{
  return EnvironmentValues.displayMenuAsPalette.setter();
}

uint64_t sub_186FE53AC()
{
  return EnvironmentValues.paletteSelectionEffect.setter();
}

uint64_t sub_186FE53E4()
{
  return EnvironmentValues.menuActionDismissBehavior.setter();
}

uint64_t key path getter for EnvironmentValues.toolbarItemPlacement : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.toolbarItemPlacement : EnvironmentValues(uint64_t a1)
{
  _BYTE v2[48];

  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v2);
  return EnvironmentValues.toolbarItemPlacement.setter((uint64_t)v2);
}

uint64_t sub_186FE5560(uint64_t a1)
{
  _BYTE v2[48];

  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v2);
  return EnvironmentValues.toolbarItemPlacement.setter((uint64_t)v2);
}

uint64_t sub_186FE5594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE3C98], a3);
}

uint64_t sub_186FE55A0()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_186FE55C4(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues.dismissSearchAccessory.getter(a1, a2);
}

void type metadata accessor for Environment<DismissSearchAccessoryAction>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content)
  {
    type metadata accessor for DismissSearchAccessoryAction(255);
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content);
  }
}

uint64_t sub_186FE5648@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.triggerSubmission.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for DefaultButtonStyle()
{
  return &type metadata for DefaultButtonStyle;
}

uint64_t sub_186FE5694()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifie, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContex, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleCon, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContex()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, Stati)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformFallbackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformFallbackButtonStyle and conformance PlatformFallbackButtonStyle, (uint64_t)&type metadata for PlatformFallbackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, Stati);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleCon()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<St;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<St)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredi();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<St);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredi()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAccept;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAccept)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleConte(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleCo();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ButtonStyleContainerModifier<AccessibilityButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<AccessibilityButtonStyle> and conformance ButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAccept);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleCo()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuS;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuS)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveBu(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Primitiv();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuS);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Primitiv()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Pr;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Pr)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContain(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonSty, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Platf, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Pl, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarSectionActionStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Pr);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<Pl()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModif;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModif)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButto(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListBu();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ToolbarButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModif);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListBu()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItem;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItem)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyMo(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, Empt();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItem);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, Empt()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, (uint64_t)&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TextInputSuggestionsContext>, PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarSectionActionButtonStyle and conformance SidebarSectionActionButtonStyle, (uint64_t)&type metadata for SidebarSectionActionButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SidebarSectionActionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t sub_186FE5C54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v4 = a1[2];
  v5 = type metadata accessor for WrappedButtonStyle(255, a1[1], a1[3], a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v5);
  v8 = type metadata accessor for ButtonStyleModifier(255, v5, v6, v7);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v8);
  type metadata accessor for AutomaticStyleOverrideModifier(255, (uint64_t)&type metadata for PlatformFallbackButtonStyle, v8, v9);
  v10 = type metadata accessor for ModifiedContent();
  v12[0] = v4;
  v12[1] = &protocol witness table for AutomaticStyleOverrideModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v12);
}

uint64_t sub_186FE5D0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = a1[2];
  v5 = type metadata accessor for ButtonStyleModifier(255, a1[1], a1[3], a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v5);
  type metadata accessor for AutomaticStyleOverrideModifier(255, (uint64_t)&type metadata for PlatformFallbackButtonStyle, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v4;
  v9[1] = &protocol witness table for AutomaticStyleOverrideModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E0CE5058], MEMORY[0x1E0CE5048], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5A68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v8;

  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v6;

  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined init with copy of ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ToolbarItemPlacement.Role(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>, (uint64_t)&type metadata for MenuActionDismissBehaviorKey, (uint64_t)&protocol witness table for MenuActionDismissBehaviorKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>, (uint64_t)&type metadata for PaletteSelectionEffectKey, (uint64_t)&protocol witness table for PaletteSelectionEffectKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_186FE600C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<ConditionallyBorderedStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

void static WheelPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for WheelPicker(0, a3, a4, a4);
  type metadata accessor for _PickerValue();
}

uint64_t sub_186FE60CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for WheelPickerStyle.Body(0, v2, v1, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelPickerStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelPicker<A>, v0);
  return static View._makeView(view:inputs:)();
}

uint64_t type metadata accessor for WheelPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WheelPicker);
}

uint64_t type metadata accessor for WheelPickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WheelPickerStyle.Body);
}

void static WheelPickerStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for WheelPicker(0, a3, a4, a4);
  type metadata accessor for _PickerValue();
}

uint64_t sub_186FE6268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v4 = type metadata accessor for WheelPickerStyle.Body(0, v2, v1, v3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelPickerStyle.Body<A>, v4);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelPicker<A>, v0);
  return static View._makeViewList(view:inputs:)();
}

void WheelPickerStyle.Body.base.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_186FE6380(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void WheelPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PickerStyleConfiguration(0, a2, a3, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _PickerValue();
}

void sub_186FE6444(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  WheelPickerStyle.Body.base.getter();
}

uint64_t sub_186FE6480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v5(v2, v3, v1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v0, v2, v1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance WheelPickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for WheelPicker(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

void protocol witness for Rule.value.getter in conformance WheelPickerStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  WheelPickerStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

ValueMetadata *type metadata accessor for WheelPickerStyle()
{
  return &type metadata for WheelPickerStyle;
}

uint64_t type metadata completion function for WheelPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for PickerStyleConfiguration(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WheelPicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
    v18 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WheelPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for WheelPicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  v13 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v14 = ((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for WheelPicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

_QWORD *initializeWithTake for WheelPicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v8 + 8) & ~v8, ((unint64_t)v6 + v8 + 8) & ~v8);
  v9 = ((v8 + 16) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = ((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  return a1;
}

_QWORD *assignWithTake for WheelPicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v9 + 8) & ~v9, (v9 + 8 + v6) & ~v9);
  v10 = ((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WheelPicker(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    v14 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v14 + v7 + 8) & ~v7);
    }
    else
    {
      v15 = *v14;
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  else
  {
    v8 = ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_186FE6AFC + 4 * byte_187C005D0[v12]))();
  }
}

void storeEnumTagSinglePayload for WheelPicker(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_186FE6CC4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x186FE6D34);
}

void sub_186FE6CCC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x186FE6CD4);
  JUMPOUT(0x186FE6D34);
}

void sub_186FE6CEC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FE6D34);
}

void sub_186FE6CF4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x186FE6D34);
}

void sub_186FE6CFC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x186FE6D30);
      JUMPOUT(0x186FE6D2CLL);
    }
    JUMPOUT(0x186FE6D08);
  }
  JUMPOUT(0x186FE6D34);
}

uint64_t associated type witness table accessor for View.Body : View in WheelPicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void WheelPicker.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[3];

  v30 = a3;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v27 = v4;
  v28 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v26 = v5;
  v8 = type metadata accessor for PickerStyleConfiguration.Content(255, v5, v6, v7);
  v31 = v8;
  v32 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v9 = MEMORY[0x18D75FF88](255, &v31, MEMORY[0x1E0CE6F30], 0);
  v22[2] = v6;
  v11 = type metadata accessor for PickerStyleConfiguration.Label(255, v5, v6, v10);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for WheelPicker_Phone<DataSource>, (uint64_t (*)(void))lazy protocol witness table accessor for type DataSource and conformance DataSource, (uint64_t)&unk_1E1AAD160, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WheelPicker_Phone);
  v14 = type metadata accessor for LabeledContent(255, v11, v12, v13);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v15 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
  v16 = type metadata accessor for ModifiedContent();
  v31 = v8;
  v32 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v24 = OpaqueTypeConformance2;
  v18 = lazy protocol witness table accessor for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>();
  v37[0] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v37[1] = v18;
  v36[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v14, v37);
  v36[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v19 = MEMORY[0x1E0CE2E70];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v36);
  v21 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v35[0] = v20;
  v35[1] = v21;
  v25 = v16;
  v23 = MEMORY[0x18D75FFDC](v19, v16, v35);
  v31 = v9;
  v32 = (_UNKNOWN **)v16;
  v33 = OpaqueTypeConformance2;
  v34 = v23;
  type metadata accessor for GroupElementsOfContent();
}

void sub_186FE6F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(v12 - 240) = a1;
  v13 = type metadata accessor for Group();
  *(_QWORD *)(v12 - 232) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v12 - 280) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v12 - 272) = (char *)&a9 - v18;
  v19 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v12 - 296) = v10;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&a9 - v26;
  v28 = *(_QWORD *)(v12 - 224);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v28);
  swift_checkMetadataState();
  View.verticalStackOrientation()();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v27, v9);
  v29 = v11;
  v31 = *(_QWORD *)(v12 - 216);
  v30 = *(_QWORD *)(v12 - 208);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v30, *(_QWORD *)(v12 - 192), v31);
  v32 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v33 = swift_allocObject();
  v34 = *(_QWORD *)(v12 - 288);
  *(_QWORD *)(v33 + 16) = v28;
  *(_QWORD *)(v33 + 24) = v34;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))(v33 + v32, v30, v31);
  Group.init<A, B>(subviews:transform:)();
}

uint64_t sub_186FE7114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  *(_QWORD *)(v5 - 176) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, *(_QWORD *)(v5 - 240));
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v4, v5 - 176);
  v7 = *(_QWORD *)(v5 - 272);
  static ViewBuilder.buildExpression<A>(_:)(v1, v4, v6);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 232) + 8);
  v8(v1, v4);
  static ViewBuilder.buildBlock<A>(_:)(v7, v4, *(_QWORD *)(v5 - 184));
  return v8(v7, v4);
}

uint64_t closure #1 in WheelPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_BYTE *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[12];
  char v43;
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[11];
  _BYTE v48[96];

  v39 = a2;
  v41 = a5;
  v40 = type metadata accessor for Binding();
  v8 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v9);
  v11 = (char *)&v38 - v10;
  type metadata accessor for PickerStyleConfiguration(0, a3, a4, v12);
  PickerStyleConfiguration.$selection.getter();
  v13 = _VariadicView_Children.tagIndex<A>(_:)();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v40);
  v42[8] = a1;
  v42[9] = v13;
  v42[10] = v15;
  v42[11] = v17;
  v43 = v19 & 1;
  v42[2] = a3;
  v42[3] = a4;
  v42[4] = v39;
  v21 = type metadata accessor for PickerStyleConfiguration.Label(0, a3, a4, v20);
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for WheelPicker_Phone<DataSource>, (uint64_t (*)(void))lazy protocol witness table accessor for type DataSource and conformance DataSource, (uint64_t)&unk_1E1AAD160, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WheelPicker_Phone);
  v23 = v22;
  v24 = lazy protocol witness table accessor for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>();
  LabeledContent<>.init(content:label:)((uint64_t (*)(void))partial apply for closure #1 in closure #1 in WheelPicker.body.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #1 in WheelPicker.body.getter, (uint64_t)v42, v21, v23, (uint64_t)v47);
  v26 = type metadata accessor for LabeledContent(0, v21, v23, v25);
  v46[0] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v46[1] = v24;
  v27 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v26, v46);
  v28 = lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  View.input<A>(_:)((uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v26, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, v27, v28);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v47, v26);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v29 = type metadata accessor for ModifiedContent();
  v45[0] = v27;
  v45[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v30 = MEMORY[0x1E0CE2E70];
  v31 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, v45);
  v32 = type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
  MEMORY[0x18D75B4AC](v47, v32, v29, v32, v31);
  swift_release();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v48, v29);
  type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
  v33 = type metadata accessor for ModifiedContent();
  v34 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v44[0] = v31;
  v44[1] = v34;
  v35 = MEMORY[0x18D75FFDC](v30, v33, v44);
  static ViewBuilder.buildExpression<A>(_:)(v47, v33, v35);
  v36 = *(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 8);
  v36(v47, v33);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v48, v33, v41);
  return v36(v48, v33);
}

double closure #1 in closure #1 in WheelPicker.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  double result;
  uint64_t v18;
  __int128 v19;
  _OWORD v20[3];
  uint64_t v21;

  outlined init with copy of SubviewsCollection(a1, (uint64_t)v20);
  type metadata accessor for MainActor();
  swift_retain();
  swift_retain();
  v11 = static MainActor.shared.getter();
  v12 = swift_allocObject();
  v13 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v13;
  *(_QWORD *)(v12 + 32) = a2;
  *(_QWORD *)(v12 + 40) = a3;
  *(_QWORD *)(v12 + 48) = a4;
  *(_BYTE *)(v12 + 56) = a5 & 1;
  swift_retain();
  swift_retain();
  v14 = static MainActor.shared.getter();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v15 + 40) = a3;
  *(_QWORD *)(v15 + 48) = a4;
  *(_BYTE *)(v15 + 56) = a5 & 1;
  type metadata accessor for [Int](0, &lazy cache variable for type metadata for [Int], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
  Binding.init(get:set:)();
  v16 = v20[1];
  *(_OWORD *)a6 = v20[0];
  *(_OWORD *)(a6 + 16) = v16;
  *(_OWORD *)(a6 + 32) = v20[2];
  *(_QWORD *)(a6 + 48) = v21;
  *(_QWORD *)(a6 + 56) = v18;
  result = *(double *)&v19;
  *(_OWORD *)(a6 + 64) = v19;
  return result;
}

_QWORD *closure #1 in closure #1 in closure #1 in WheelPicker.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  type metadata accessor for [Int](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_187BF9830;
  type metadata accessor for Binding<Int?>();
  result = MEMORY[0x18D75B9C8](&v5);
  if (v6)
    v4 = 0;
  else
    v4 = v5;
  *(_QWORD *)(v2 + 32) = v4;
  *a1 = v2;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in WheelPicker.body.getter()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in closure #1 in WheelPicker.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1);
  v7 = type metadata accessor for PickerStyleConfiguration.Label(0, a1, a2, v6);
  v8 = static ViewBuilder.buildExpression<A>(_:)(v7, v7, &protocol witness table for PickerStyleConfiguration<A>.Label);
  return static ViewBuilder.buildBlock<A>(_:)(v8, v7, a3);
}

void base witness table accessor for _AttributeBody in WheelPickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t lazy protocol witness table accessor for type DataSource and conformance DataSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataSource and conformance DataSource;
  if (!lazy protocol witness table cache variable for type DataSource and conformance DataSource)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DataSource, &unk_1E1AAD160);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataSource and conformance DataSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityCombinedLabeledContent, &type metadata for AccessibilityCombinedLabeledContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityCombinedLabeledContent, &type metadata for AccessibilityCombinedLabeledContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityCombinedLabeledContent, &type metadata for AccessibilityCombinedLabeledContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityCombinedLabeledContent, &type metadata for AccessibilityCombinedLabeledContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityCombinedLabeledContent, &type metadata for AccessibilityCombinedLabeledContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>)
    type metadata accessor for StaticIf();
  return result;
}

unint64_t lazy protocol witness table accessor for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>;
  if (!lazy protocol witness table cache variable for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for WheelPicker_Phone<DataSource>, (uint64_t (*)(void))lazy protocol witness table accessor for type DataSource and conformance DataSource, (uint64_t)&unk_1E1AAD160, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WheelPicker_Phone);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelPicker_Phone<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier;
  if (!lazy protocol witness table cache variable for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WheelPickerLabelsHiddenModifier, &unk_1E1B002B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier);
  }
  return result;
}

uint64_t protocol witness for CustomWheelPickerDataSource.rows(in:) in conformance DataSource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized DataSource.rows(in:)();
  *a1 = result;
  return result;
}

uint64_t sub_186FE7A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WheelPicker(0, v5, v6, a4) - 8) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  swift_release();
  v9 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v8 + *(int *)(v9 + 32), v5);
  type metadata accessor for PickerStyleConfiguration(0, v5, v6, v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WheelPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WheelPicker(0, v6, v7, a2) - 8) + 80);
  return closure #1 in WheelPicker.body.getter(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

double partial apply for closure #1 in closure #1 in WheelPicker.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in closure #1 in WheelPicker.body.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), a1);
}

uint64_t partial apply for closure #2 in closure #1 in WheelPicker.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in closure #1 in WheelPicker.body.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *partial apply for closure #1 in closure #1 in closure #1 in WheelPicker.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in closure #1 in WheelPicker.body.getter(a1);
}

uint64_t objectdestroy_2Tm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in WheelPicker.body.getter()
{
  return closure #2 in closure #1 in closure #1 in WheelPicker.body.getter();
}

void type metadata accessor for Binding<Int?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<Int?>)
  {
    type metadata accessor for [Int](255, (unint64_t *)&lazy cache variable for type metadata for Int?, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Int?>);
  }
}

void *type metadata accessor for WheelPickerLabelsHiddenModifier()
{
  return &unk_1E1B002B8;
}

uint64_t destroy for DataSource(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DataSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(void **)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for DataSource(uint64_t *a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = (void *)a2[5];
  v5 = (void *)a1[5];
  a1[5] = (uint64_t)v4;
  v6 = v4;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DataSource(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DataSource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DataSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for DataSource()
{
  return &unk_1E1AAD160;
}

void sub_186FE7DF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _UNKNOWN **v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for PickerStyleConfiguration.Content(255, *a1, v5, a4);
  v21 = v6;
  v22 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v7 = MEMORY[0x18D75FF88](255, &v21, MEMORY[0x1E0CE6F30], 0);
  v9 = type metadata accessor for PickerStyleConfiguration.Label(255, v4, v5, v8);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for WheelPicker_Phone<DataSource>, (uint64_t (*)(void))lazy protocol witness table accessor for type DataSource and conformance DataSource, (uint64_t)&unk_1E1AAD160, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WheelPicker_Phone);
  v12 = type metadata accessor for LabeledContent(255, v9, v10, v11);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityCombinedLabeledContent>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent, (uint64_t)&type metadata for AccessibilityCombinedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v13 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier>();
  v14 = type metadata accessor for ModifiedContent();
  v21 = v6;
  v22 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v16 = lazy protocol witness table accessor for type WheelPicker_Phone<DataSource> and conformance WheelPicker_Phone<A>();
  v27[0] = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v27[1] = v16;
  v26[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v12, v27);
  v26[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v17 = MEMORY[0x1E0CE2E70];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v26);
  v19 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, WheelPickerLabelsHiddenModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v25[0] = v18;
  v25[1] = v19;
  v20 = MEMORY[0x18D75FFDC](v17, v14, v25);
  v21 = v7;
  v22 = (_UNKNOWN **)v14;
  v23 = OpaqueTypeConformance2;
  v24 = v20;
  type metadata accessor for GroupElementsOfContent();
}

uint64_t sub_186FE7F88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = type metadata accessor for Group();
  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v4);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in WheelPickerLabelsHiddenModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for CustomWheelPickerDataSource.Rows : Collection in DataSource()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type [WheelPickerRow<AnyHashable, Subview>] and conformance [A], (uint64_t (*)(uint64_t))type metadata accessor for [WheelPickerRow<AnyHashable, Subview>], MEMORY[0x1E0DEAF50]);
}

uint64_t type metadata accessor for WheelPickerRow<AnyHashable, Subview>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for WheelPickerRow<AnyHashable, Subview>;
  if (!lazy cache variable for type metadata for WheelPickerRow<AnyHashable, Subview>)
    type metadata accessor for WheelPickerRow();
  return result;
}

uint64_t associated type witness table accessor for CustomWheelPickerDataSource.Rows.Sequence.Element : CustomWheelPickerRow in DataSource()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type WheelPickerRow<AnyHashable, Subview> and conformance WheelPickerRow<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for WheelPickerRow<AnyHashable, Subview>, (uint64_t)&protocol conformance descriptor for WheelPickerRow<A, B>);
}

uint64_t specialized DataSource.rows(in:)()
{
  uint64_t v0;
  int64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  _QWORD v15[5];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[40];
  _OWORD v20[5];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];
  _BYTE v31[25];
  uint64_t v32;
  _BYTE v33[72];

  outlined init with copy of SubviewsCollection(v0, (uint64_t)v33);
  v1 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    result = _VariadicView_Children.endIndex.getter();
    if (v1 < 0 || result < v1)
      goto LABEL_15;
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v1)
    {
LABEL_12:
      outlined destroy of LazySequence<SubviewsCollection>((uint64_t)v33);
      return v3;
    }
    v32 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = 0;
    v3 = v32;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      v20[3] = v25;
      v20[4] = v26;
      v21 = v27;
      v20[0] = v22;
      v20[1] = v23;
      v20[2] = v24;
      _ViewList_View.viewID.getter();
      outlined init with copy of Subview.ID((uint64_t)v19, (uint64_t)v15);
      lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
      AnyHashable.init<A>(_:)();
      outlined destroy of Subview.ID((uint64_t)v19);
      outlined init with copy of Subview((uint64_t)v20, (uint64_t)v30 + 8);
      v15[0] = *((_QWORD *)&v21 + 1);
      ViewTraitCollection.value<A>(for:defaultValue:)();
      v28 = v16;
      v29 = v17;
      *(_QWORD *)&v30[0] = v18;
      v31[24] = (v14 & 1) == 0;
      outlined destroy of Subview((uint64_t)v20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v32;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1);
        v3 = v32;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = (_OWORD *)(v3 + 144 * v6);
      v7[2] = v28;
      v8 = v29;
      v9 = v30[0];
      v10 = v30[2];
      v7[5] = v30[1];
      v7[6] = v10;
      v7[3] = v8;
      v7[4] = v9;
      v11 = v30[3];
      v12 = v30[4];
      v13 = *(_OWORD *)v31;
      *(_OWORD *)((char *)v7 + 153) = *(_OWORD *)&v31[9];
      v7[8] = v12;
      v7[9] = v13;
      v7[7] = v11;
      result = _VariadicView_Children.endIndex.getter();
      if (v4 >= result)
        break;
      if (v1 == ++v4)
        goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Subview.ID(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ZoomPresentationTransitionStyle(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID;
  if (!lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Subview.ID, &type metadata for Subview.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID;
  if (!lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Subview.ID, &type metadata for Subview.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview.ID and conformance Subview.ID);
  }
  return result;
}

uint64_t outlined destroy of Subview.ID(uint64_t a1)
{
  destroy for AccessibilityRelationshipScope.Key();
  return a1;
}

uint64_t outlined init with copy of Subview(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Subview(a2, a1);
  return a2;
}

uint64_t outlined destroy of Subview(uint64_t a1)
{
  destroy for StyleApplicator.EnumeratedView(a1);
  return a1;
}

uint64_t outlined destroy of LazySequence<SubviewsCollection>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for LazySequence<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC310]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WheelPickerLabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier, (uint64_t)&unk_1E1B002B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WheelPickerLabelsHiddenModifier>, LabelsHiddenModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WheelPickerLabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WheelPickerLabelsHiddenModifier and conformance WheelPickerLabelsHiddenModifier, (uint64_t)&unk_1E1B002B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<WheelPickerLabelsHiddenModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelsHiddenModifier and conformance LabelsHiddenModifier;
  if (!lazy protocol witness table cache variable for type LabelsHiddenModifier and conformance LabelsHiddenModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelsHiddenModifier, &type metadata for LabelsHiddenModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestionsModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      v16 = v15 >= 2;
      v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16)
        return (v17 + 1);
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186FE87A0 + 4 * byte_187C00770[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for TextInputSuggestionsModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for TextInputSuggestionsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextInputSuggestionsModifier);
}

uint64_t initializeBufferWithCopyOfBuffer for OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for OnChangeOfSuggestionsModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnChangeOfSuggestionsModifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnChangeOfSuggestionsModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnChangeOfSuggestionsModifier()
{
  return &type metadata for OnChangeOfSuggestionsModifier;
}

uint64_t type metadata completion function for TextInputSuggestionsModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestions(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 1) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)&a1[v9];
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9])
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
      v15 = *a1;
      if (v15 >= 2)
        return v15 - 1;
      else
        return 0;
    }
  }
  v11 = a1[v9];
  if (!a1[v9])
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_186FE8CE0 + 4 * byte_187C0077E[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for TextInputSuggestions(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for TextInputSuggestions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextInputSuggestions);
}

_UNKNOWN **base witness table accessor for ViewModifier in OnChangeOfSuggestionsModifier()
{
  return &protocol witness table for OnChangeOfSuggestionsModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TextInputSuggestionsModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for View.body.getter in conformance EnvironmentValues.TextInputSuggestions()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void TextInputSuggestionsModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextInputSuggestionsModifier<A>);
  type metadata accessor for _ViewModifier_Content();
  v3 = type metadata accessor for Optional();
  lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions();
  v4 = *(_QWORD *)(a2 + 24);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v3, &v4);
  type metadata accessor for StaticSourceWriter();
}

void sub_186FE90A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;

  v4 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for ViewInputFlagModifier<HasTextInputSuggestions>(255);
  v6 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v3 - 232) = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v3 - 192) = v0;
  *(_QWORD *)(v3 - 184) = v2;
  *(_QWORD *)(v3 - 176) = *(_QWORD *)(v3 - 224);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1, v10);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for EnvironmentValues.TextInputSuggestions, (uint64_t)partial apply for closure #1 in TextInputSuggestionsModifier.body(content:));
}

uint64_t sub_186FE91A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t HasTextInputSuggestions;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);

  *(_QWORD *)(v6 - 144) = v0;
  *(_QWORD *)(v6 - 136) = &protocol witness table for StaticSourceWriter<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v6 - 144);
  HasTextInputSuggestions = lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions();
  View.input<A>(_:)((uint64_t)&type metadata for HasTextInputSuggestions, v2, (uint64_t)&type metadata for HasTextInputSuggestions, v8, HasTextInputSuggestions);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 240) + 8))(v5, v2);
  *(_QWORD *)(v6 - 160) = v8;
  *(_QWORD *)(v6 - 152) = &protocol witness table for ViewInputFlagModifier<A>;
  v10 = MEMORY[0x18D75FFDC](v7, v1, v6 - 160);
  static ViewBuilder.buildExpression<A>(_:)(v4, v1, v10);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 232) + 8);
  v11(v4, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, *(_QWORD *)(v6 - 216));
  return v11(v3, v1);
}

uint64_t closure #1 in TextInputSuggestionsModifier.body(content:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - v19;
  if (*a1 == 1)
  {
    v21 = type metadata accessor for TextInputSuggestionsModifier(0, a2, a3, v18);
    static ViewBuilder.buildExpression<A>(_:)(&a1[*(int *)(v21 + 36)], a2, a3);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, (uint64_t)v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v15, v22, 1, a2);
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v15, (uint64_t)v20);
  v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v11);
  v26 = a3;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v11, &v26);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v20, v11, a4);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v11);
}

uint64_t associated type witness table accessor for View.Body : View in TextInputSuggestions<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasTextInputSuggestions()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasTextInputSuggestions()
{
  lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions();
  return PropertyList.subscript.setter();
}

void TextInputSuggestions.body.getter()
{
  type metadata accessor for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>(255);
  type metadata accessor for MappedViews();
}

void sub_186FE956C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 - 336) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v5, v6);
  *(_QWORD *)(v4 - 120) = MEMORY[0x1E0DEDCE8];
  *(_QWORD *)(v4 - 112) = v2;
  *(_QWORD *)(v4 - 104) = MEMORY[0x1E0DEDCF8];
  *(_QWORD *)(v4 - 96) = v3;
  type metadata accessor for List();
}

void sub_186FE95E4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>();
  *(_QWORD *)(v2 - 296) = a1;
  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ListStyleWriter<InsetListStyle>, (uint64_t)&type metadata for InsetListStyle, (uint64_t)&protocol witness table for InsetListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  *(_QWORD *)(v2 - 288) = v4;
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TextInputSuggestionsContext>, MEMORY[0x1E0CE6230], MEMORY[0x1E0CE6220], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  *(_QWORD *)(v2 - 304) = v5;
  v6 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v2 - 320) = v10;
  *(_QWORD *)(v2 - 328) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  if (*v1 == 1)
    TextInputSuggestions.listContent.getter();
  TextInputSuggestions.platformItemContent.getter();
}

void sub_186FE984C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  static ViewBuilder.buildExpression<A>(_:)(v3, v1, &protocol witness table for MappedViews<A, B>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 336) + 8);
  v5(v3, v1);
  static ViewBuilder.buildBlock<A>(_:)(v0, v1, v3);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, *(_QWORD *)(v4 - 296));
  v7 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>();
  *(_QWORD *)(v4 - 136) = v6;
  *(_QWORD *)(v4 - 128) = v7;
  v8 = MEMORY[0x1E0CE2E70];
  *(_QWORD *)(v4 - 152) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v4 - 288), v4 - 136);
  *(_QWORD *)(v4 - 144) = &protocol witness table for ListStyleWriter<A>;
  v9 = MEMORY[0x18D75FFDC](v8, *(_QWORD *)(v4 - 304), v4 - 152);
  v10 = lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v4 - 168) = v9;
  *(_QWORD *)(v4 - 160) = v10;
  MEMORY[0x18D75FFDC](v8, v2, v4 - 168);
  static ViewBuilder.buildEither<A, B>(second:)(v3, v2, v1);
  v5(v3, v1);
  v5(v0, v1);
  JUMPOUT(0x186FE9944);
}

void TextInputSuggestions.listContent.getter()
{
  type metadata accessor for List();
}

void sub_186FE9A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v9 - 200) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>();
  v10 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 176) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ListStyleWriter<InsetListStyle>, (uint64_t)&type metadata for InsetListStyle, (uint64_t)&protocol witness table for InsetListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 184) = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v9 - 216) = (char *)&a9 - v14;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TextInputSuggestionsContext>, MEMORY[0x1E0CE6230], MEMORY[0x1E0CE6220], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v15 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v9 - 192) = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v9 - 208) = (char *)&a9 - v19;
  TextInputSuggestions.baseList.getter();
}

uint64_t sub_186FE9C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);

  swift_getKeyPath();
  *(_QWORD *)(v7 - 112) = 0;
  *(_QWORD *)(v7 - 104) = 0;
  *(_BYTE *)(v7 - 96) = 0;
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, v4);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 200) + 8))(v0, v4);
  *(_QWORD *)(v7 - 112) = 70;
  v9 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>();
  *(_QWORD *)(v7 - 128) = v8;
  *(_QWORD *)(v7 - 120) = v9;
  v10 = MEMORY[0x1E0CE2E70];
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7 - 128);
  v12 = *(_QWORD *)(v7 - 216);
  View.listStyle<A>(_:)(v7 - 112, v2, (uint64_t)&type metadata for InsetListStyle, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 176) + 8))(v5, v2);
  *(_QWORD *)(v7 - 144) = v11;
  *(_QWORD *)(v7 - 136) = &protocol witness table for ListStyleWriter<A>;
  v13 = MEMORY[0x18D75FFDC](v10, v3, v7 - 144);
  View.styleContext<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 184) + 8))(v12, v3);
  v14 = lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>();
  *(_QWORD *)(v7 - 160) = v13;
  *(_QWORD *)(v7 - 152) = v14;
  v15 = MEMORY[0x18D75FFDC](v10, v1, v7 - 160);
  v16 = *(_QWORD *)(v7 - 208);
  static ViewBuilder.buildExpression<A>(_:)(v6, v1, v15);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 8);
  v17(v6, v1);
  static ViewBuilder.buildBlock<A>(_:)(v16, v1, *(_QWORD *)(v7 - 168));
  return v17(v16, v1);
}

void TextInputSuggestions.platformItemContent.getter()
{
  type metadata accessor for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>(255);
  type metadata accessor for MappedViews();
}

void sub_186FE9E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  View.map<A>(_:)((uint64_t)closure #1 in TextInputSuggestions.platformItemContent.getter, 0, v9, v10, v11, v12, (uint64_t)v14);
}

uint64_t sub_186FE9E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  static ViewBuilder.buildExpression<A>(_:)(v2, v1, &protocol witness table for MappedViews<A, B>);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  v5(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, *(_QWORD *)(v4 - 120));
  return v5(v3, v1);
}

void TextInputSuggestions.baseList.getter()
{
  type metadata accessor for List();
}

void sub_186FE9F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x1E0C80A78](v6, v7);
  *(_QWORD *)(v5 - 128) = v3;
  *(_QWORD *)(v5 - 120) = v4;
  *(_QWORD *)(v5 - 112) = v2;
  List<>.init(content:)();
}

uint64_t sub_186FE9FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2, v1, v5);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v3, v1, v0);
  return v6(v3, v1);
}

uint64_t closure #1 in TextInputSuggestions.baseList.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TextInputSuggestions(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 36), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

void closure #1 in TextInputSuggestions.platformItemContent.getter(void (**a1)(uint64_t a1)@<X8>)
{
  *a1 = closure #1 in View.forcePlatformItem();
  a1[1] = 0;
}

uint64_t static OnChangeOfSuggestionsModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  unint64_t v16;
  char v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  char v31;
  _BYTE v32[12];
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned __int128 v37;
  int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  unsigned __int128 v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(a2 + 16);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = *(_DWORD *)(a2 + 8);
  v25 = *(_DWORD *)(a2 + 32);
  v26 = *(_DWORD *)(a2 + 28);
  v24 = *(_DWORD *)(a2 + 36);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_DWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_BYTE *)(a2 + 80);
  v41 = *(_QWORD *)a2;
  v23 = v41;
  v42 = v28;
  v43 = v4;
  v44 = v27;
  v45 = v26;
  v46 = v25;
  v47 = v24;
  v48 = v5;
  v49 = *(_OWORD *)(a2 + 48);
  v50 = v6;
  v51 = v7;
  v52 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStyleContext<A>(_:)();
  v9 = v41;
  v20 = *((_QWORD *)&v49 + 1);
  v21 = v49;
  v10 = v51;
  v18 = v52;
  v19 = v50;
  v29 = v41;
  v30 = v28;
  *(_QWORD *)v32 = v4;
  *(_DWORD *)&v32[8] = v27;
  v33 = v26;
  v34 = v25;
  v35 = v24;
  v36 = v5;
  v37 = v49;
  v38 = v50;
  v39 = v51;
  v40 = v52;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v11 = swift_bridgeObjectRetain();
  a3(v11, &v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v29) = v3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnChangeOfSuggestionsModifier>, (uint64_t)&type metadata for OnChangeOfSuggestionsModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v12 = _GraphValue.value.getter();
  v29 = v9;
  v30 = v28;
  *(_QWORD *)v32 = v4;
  *(_DWORD *)&v32[8] = v27;
  v33 = v26;
  v34 = v25;
  v35 = v24;
  v36 = v5;
  v37 = __PAIR128__(v20, v21);
  v38 = v19;
  v39 = v10;
  v40 = v18;
  v13 = _ViewListOutputs.makeAttribute(inputs:)();
  v29 = v23;
  v30 = v28;
  *(_QWORD *)v32 = v4;
  *(_DWORD *)&v32[8] = v27;
  v33 = v26;
  v34 = v25;
  v35 = v24;
  v36 = v5;
  LODWORD(v4) = _GraphInputs.phase.getter();
  UpdateCycleDetector.init()();
  v14 = v30;
  v15 = v31;
  v16 = v29;
  v29 = __PAIR64__(v13, v12);
  v30 = v4;
  v31 = 2;
  *(_DWORD *)v32 = 0;
  *(_QWORD *)&v32[4] = v16;
  v33 = v14;
  LOBYTE(v34) = v15;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BOOL4 v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != *(_DWORD *)(v0 + 16))
  {
    *(_DWORD *)(v0 + 16) = v2;
    *(_QWORD *)(v0 + 24) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 32) = 0;
  }
  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v16);
  v4 = v17;
  v5 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  v19 = 2;
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 8))(&v19, v4, v5);
  v7 = v6 == 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  v8 = *(unsigned __int8 *)(v1 + 12);
  if (v8 == 2 || (v15 = v6 == 0, (result = AGGraphGetOutputValue()) == 0) || ((v8 ^ v15) & 1) != 0)
  {
    result = UpdateCycleDetector.dispatch(label:isDebug:)();
    if ((result & 1) != 0)
    {
      AGGraphClearUpdate();
      v10 = AGGraphGetValue();
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v13 = *(_BYTE *)(v10 + 16);
      swift_retain();
      swift_retain();
      AGGraphSetUpdate();
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v11;
      *(_QWORD *)(v14 + 24) = v12;
      *(_BYTE *)(v14 + 32) = v13;
      *(_BYTE *)(v14 + 33) = v7;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      result = swift_release();
    }
  }
  *(_BYTE *)(v1 + 12) = v7;
  return result;
}

unint64_t implicit closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()()
{
  return 0xD000000000000011;
}

_QWORD *closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v8 = a1;
  v9 = a2;
  v10 = a3;
  type metadata accessor for Binding<Bool?>();
  result = MEMORY[0x18D75B9C8](&v7);
  if (v7 == 2 || (v7 & 1) == (a4 & 1))
    return (_QWORD *)dispatch thunk of AnyLocation.set(_:transaction:)();
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance OnChangeOfSuggestionsModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding;
  if (!lazy protocol witness table cache variable for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnChangeOfSuggestionsModifier.UpdateBinding, &unk_1E1AFA340);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnChangeOfSuggestionsModifier.UpdateBinding and conformance OnChangeOfSuggestionsModifier.UpdateBinding);
  }
  return result;
}

uint64_t sub_186FEA734()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()()
{
  uint64_t v0;

  return closure #2 in OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_BYTE *)(v0 + 33));
}

void type metadata accessor for Binding<Bool?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<Bool?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool?>);
  }
}

void type metadata accessor for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for MergePlatformItemsView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>);
  }
}

void type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>();
    v2 = v1;
    v3[0] = &protocol witness table for MappedViewElement.Placeholder;
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE63D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<EditMode>?>)
  {
    type metadata accessor for Binding<EditMode>?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<EditMode>?>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TextInputSuggestionsContext>, MEMORY[0x1E0CE6230], MEMORY[0x1E0CE6220], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in TextInputSuggestions.baseList.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in TextInputSuggestions.baseList.getter(v1[4], v1[2], v1[3], a1);
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.TextInputSuggestions, &type metadata for EnvironmentValues.TextInputSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.TextInputSuggestions, &type metadata for EnvironmentValues.TextInputSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<HasTextInputSuggestions>(uint64_t a1)
{
  unint64_t HasTextInputSuggestions;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HasTextInputSuggestions>)
  {
    HasTextInputSuggestions = lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for HasTextInputSuggestions, HasTextInputSuggestions, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasTextInputSuggestions>);
  }
}

unint64_t lazy protocol witness table accessor for type HasTextInputSuggestions and conformance HasTextInputSuggestions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasTextInputSuggestions, &type metadata for HasTextInputSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasTextInputSuggestions, &type metadata for HasTextInputSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasTextInputSuggestions, &type metadata for HasTextInputSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasTextInputSuggestions, &type metadata for HasTextInputSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions;
  if (!lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HasTextInputSuggestions, &type metadata for HasTextInputSuggestions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasTextInputSuggestions and conformance HasTextInputSuggestions);
  }
  return result;
}

uint64_t partial apply for closure #1 in TextInputSuggestionsModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TextInputSuggestionsModifier.body(content:)(*(_BYTE **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

__n128 __swift_memcpy33_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for OnChangeOfSuggestionsModifier.UpdateBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OnChangeOfSuggestionsModifier.UpdateBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for OnChangeOfSuggestionsModifier.UpdateBinding()
{
  return &unk_1E1AFA340;
}

ValueMetadata *type metadata accessor for HasTextInputSuggestions()
{
  return &type metadata for HasTextInputSuggestions;
}

ValueMetadata *type metadata accessor for EnvironmentValues.TextInputSuggestions()
{
  return &type metadata for EnvironmentValues.TextInputSuggestions;
}

void sub_186FEAC6C()
{
  type metadata accessor for List();
}

void sub_186FEACAC()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<EditMode>?>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ListStyleWriter<InsetListStyle>, (uint64_t)&type metadata for InsetListStyle, (uint64_t)&protocol witness table for InsetListStyle, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<TextInputSuggestionsContext>, MEMORY[0x1E0CE6230], MEMORY[0x1E0CE6220], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for MergePlatformItemsView<ModifiedContent<MappedViewElement.Placeholder, _PreferenceTransformModifier<PlatformItemList.Key>>>(255);
  type metadata accessor for MappedViews();
}

uint64_t sub_186FEAD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[14];

  v4 = type metadata accessor for _ConditionalContent();
  v10[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for List<A, B>, v1);
  v10[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<EditMode>?> and conformance _EnvironmentKeyWritingModifier<A>();
  v5 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v10);
  v9[1] = &protocol witness table for ListStyleWriter<A>;
  v8[0] = MEMORY[0x18D75FFDC](v5, v2, v9);
  v8[1] = lazy protocol witness table accessor for type StyleContextWriter<TextInputSuggestionsContext> and conformance StyleContextWriter<A>();
  v7[0] = MEMORY[0x18D75FFDC](v5, v3, v8);
  v7[1] = &protocol witness table for MappedViews<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v4, v7);
}

void sub_186FEAE20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = type metadata accessor for TextInputSuggestionsModifier(255, *a1, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TextInputSuggestionsModifier<A>, v5);
  type metadata accessor for _ViewModifier_Content();
  v7 = v4;
  v6 = type metadata accessor for Optional();
  lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v6, &v7);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_186FEAEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[13];

  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HasTextInputSuggestions>(255);
  v2 = type metadata accessor for ModifiedContent();
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0);
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

_UNKNOWN **base witness table accessor for View in EnvironmentValues.TextInputSuggestions()
{
  return &protocol witness table for EnvironmentValues.TextInputSuggestions;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasTextInputSuggestions()
{
  return &protocol witness table for HasTextInputSuggestions;
}

unint64_t instantiation function for generic protocol witness table for EnvironmentValues.TextInputSuggestions(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for FocusStoreLocation(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = class metadata base offset for FocusStoreLocation;
  v3 = swift_checkMetadataState();
  if (v4 <= 0x3F)
  {
    swift_getTupleTypeMetadata2();
    v5 = type metadata accessor for Optional();
    if (v7 > 0x3F)
    {
      return v5;
    }
    else
    {
      type metadata accessor for FocusStore.Entry(255, v3, *(_QWORD *)(v2 + a1 + 8), v6);
      v3 = type metadata accessor for Optional();
      if (v8 <= 0x3F)
        return swift_initClassMetadata2();
    }
  }
  return v3;
}

uint64_t FocusStore.Entry.responder.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t Strong;
  char v16[8];

  v6 = type metadata accessor for FocusStore.Entry.Target(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = &v16[-v10 - 8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(&v16[-v10 - 8], v4 + *(int *)(a1 + 40), v6, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    return 0;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
    Strong = swift_weakLoadStrong();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
    if (Strong)
    {
      if (swift_conformsToProtocol2())
        v12 = Strong;
      else
        v12 = 0;
      if (!v12)
        swift_release();
    }
    else
    {
      v12 = 0;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)(v11 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  }
  return v12;
}

uint64_t FocusStore.Entry.searchFieldState.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for FocusStore.Entry.Target(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v15 - v10, v3 + *(int *)(a1 + 40), v6, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v11, a3, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    type metadata accessor for Binding<SearchFieldState>(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a3, 0, 1, v12);
  }
  else
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
}

uint64_t FocusStore.Entry.isValid.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  char v12;
  _BYTE v15[8];

  v6 = type metadata accessor for FocusStore.Entry.Target(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = &v15[-v10 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16))(&v15[-v10 - 8], v4 + *(int *)(a1 + 40), v6, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    v12 = 1;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)(v11 + 8), (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
    if (swift_weakLoadStrong())
    {
      v12 = FocusBridge.canAcceptFocus.getter();
      swift_release();
    }
    else
    {
      v12 = 0;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
  }
  return v12 & 1;
}

double FocusStore.Entry.defaultFocusItem.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _BYTE *v11;
  double result;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[15];
  _OWORD v22[3];
  uint64_t v23;
  int v24;
  char v25[8];
  char v26[8];

  v6 = type metadata accessor for FocusStore.Entry.Target(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = &v21[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16))(&v21[-v10], v3 + *(int *)(a1 + 40), v6, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_QWORD *)(a3 + 48) = 1;
    *(_DWORD *)(a3 + 56) = 0;
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v11, v6);
    return result;
  }
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
  outlined init with take of TableCellFormula((uint64_t)(v11 + 8), (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v14 = Strong;
    v15 = swift_conformsToProtocol2();
    if (v15)
      v17 = v14;
    else
      v17 = 0;
    if (v17)
    {
      memset(v22, 0, sizeof(v22));
      v23 = 1;
      v24 = 0;
      MEMORY[0x1E0C80A78](v15, v16);
      *(_QWORD *)&v21[-16] = v22;
      MEMORY[0x1E0C80A78](v18, v19);
      *(_QWORD *)&v21[-16] = partial apply for closure #1 in FocusStore.Entry.defaultFocusItem.getter;
      *(_QWORD *)&v21[-8] = v20;
      swift_retain();
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release_n();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
      outlined init with take of TableCellFormula((uint64_t)v22, a3, (uint64_t (*)(_QWORD))type metadata accessor for FocusItem?);
      return result;
    }
    swift_release();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 48) = 1;
  *(_DWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t closure #1 in FocusStore.Entry.defaultFocusItem.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, uint64_t);
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  _BYTE v23[48];
  uint64_t v24;
  int v25;
  _QWORD v26[8];

  v8 = *a1;
  v9 = swift_conformsToProtocol2();
  if (v9)
    v10 = v9;
  else
    v10 = 0;
  if (v9)
    v11 = a1;
  else
    v11 = 0;
  if (v11)
  {
    v12 = *v11;
    v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 16);
    swift_retain();
    v13(v26, v12, v10);
    swift_release();
LABEL_9:
    outlined assign with take of FocusItem?((uint64_t)v26, a3);
    goto LABEL_10;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v8, a2);
  if (v17)
  {
    v18 = v17;
    swift_getObjectType();
    v19 = swift_conformsToProtocol2();
    if (v19)
      v20 = v19;
    else
      v20 = 0;
    if (v19)
      v21 = v18;
    else
      v21 = 0;
    if (v21)
    {
      ObjectType = swift_getObjectType();
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(ObjectType, v20) & 1) != 0)
      {
        v24 = 0;
        swift_weakInit();
        v25 = 0;
        swift_unknownObjectWeakInit();
        swift_unknownObjectWeakAssign();
        outlined init with take of TableCellFormula((uint64_t)v26, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UIFocusItem>);
        v23[32] = 1;
        v24 = 0;
        swift_weakAssign();
        v23[33] = 0;
        outlined init with take of FocusItem((uint64_t)v23, (uint64_t)v26);
        swift_unknownObjectRelease();
        goto LABEL_9;
      }
    }
    swift_unknownObjectRelease();
  }
LABEL_10:
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a3, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FocusItem?);
  if (v26[6] == 1 && v26[5] == 0)
    v15 = 0;
  else
    v15 = 2;
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FocusItem?);
  *a4 = v15;
  return result;
}

uint64_t FocusStore.Entry.init(value:focusScopes:responder:bridge:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[8];

  v20 = a6;
  v21 = a2;
  v22 = a5;
  v8 = type metadata accessor for FocusStore.Entry.Target(0, a4, a5, a3);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v17, a1, a4, v15);
  type metadata accessor for ViewResponder();
  if (swift_dynamicCastClass())
    swift_retain();
  swift_weakInit();
  swift_weakAssign();
  swift_release();
  outlined init with take of TableCellFormula((uint64_t)v23, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
  swift_weakInit();
  v18 = swift_weakAssign();
  outlined init with take of TableCellFormula(v18, (uint64_t)(v11 + 8), (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  swift_storeEnumTagMultiPayload();
  return FocusStore.Entry.init(value:focusScopes:target:)((uint64_t)v17, v21, (uint64_t)v11, a4, v22, v20);
}

uint64_t FocusStore.Entry.init(value:focusScopes:target:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v12 = type metadata accessor for FocusStore.Entry(0, a4, a5, v11);
  *(_QWORD *)(a6 + *(int *)(v12 + 36)) = a2;
  v13 = a6 + *(int *)(v12 + 40);
  v15 = type metadata accessor for FocusStore.Entry.Target(0, a4, a5, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, a3, v15);
}

uint64_t FocusStore.Entry.init(value:focusScopes:searchFieldState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v12 = type metadata accessor for FocusStore.Entry.Target(0, a4, a5, a4);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v17 - v14;
  outlined init with take of TableCellFormula(a3, (uint64_t)&v17 - v14, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  swift_storeEnumTagMultiPayload();
  return FocusStore.Entry.init(value:focusScopes:target:)(a1, a2, (uint64_t)v15, a4, a5, a6);
}

uint64_t FocusStore.Entry.updateFocus(_:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v38;
  _BYTE v39[64];
  _BYTE v40[8];

  v5 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = v39 - v11 + 8;
  type metadata accessor for Binding<SearchFieldState>(0);
  v14 = v13;
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0) + 8;
  v19 = type metadata accessor for FocusStore.Entry.Target(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v18);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = v39 - v22 + 8;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v24 + 16))((_BYTE *)v39 - v22 + 8, v2 + *(int *)(a2 + 40), v19, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v23, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    MEMORY[0x18D75B9C8](v14);
    v25 = static SearchFocusUpdate.nextSeed++;
    v26 = &v12[*(int *)(v5 + 44)];
    *(_DWORD *)v26 = v25;
    v26[4] = a1 & 1;
    if ((a1 & 1) == 0 || *v12 != 2)
      goto LABEL_15;
    v27 = v12[2];
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v27 == 2)
    {
      v27 = v8[3];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v27 == 2)
      {
        v28 = 0;
LABEL_14:
        *v12 = v28;
        v12[*(int *)(v5 + 40)] = 1;
LABEL_15:
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
        v35 = type metadata accessor for Binding<SearchFieldState>;
        v36 = (uint64_t)v17;
        return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, (uint64_t (*)(_QWORD))v35);
      }
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    }
    v28 = v27 & 1;
    goto LABEL_14;
  }
  outlined init with take of TableCellFormula((uint64_t)(v23 + 8), (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  if ((a1 & 1) != 0)
  {
    FocusStore.Entry.defaultFocusItem.getter(a2, v29, (uint64_t)v39);
    MEMORY[0x1E0C80A78](v30, v31);
    *(&v38 - 2) = (uint64_t)v40;
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI9FocusItemV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, _BYTE *))partial apply for closure #1 in FocusStore.Entry.updateFocus(_:));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for FocusItem?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  }
  else
  {
    if (swift_weakLoadStrong())
    {
      v32 = (void *)FocusBridge.host.getter();
      if (v32)
      {
        v33 = v32;
        v34 = objc_msgSend(v32, sel_firstResponder);
        objc_msgSend(v34, sel_resignFirstResponder);
        swift_release();

      }
      else
      {
        swift_release();
      }
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  }
  v35 = type metadata accessor for WeakBox<ViewResponder>;
  v36 = (uint64_t)v23;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, (uint64_t (*)(_QWORD))v35);
}

uint64_t closure #1 in FocusStore.Entry.updateFocus(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    FocusBridge.moveFocus(to:designatedPlatformResponder:)(a1, 0);
    return swift_release();
  }
  return result;
}

uint64_t static FocusStore.Key.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for FocusStore.Entry(0, a1, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a4, 1, 1, v5);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance FocusStore.Key<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return static FocusStore.Key.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t FocusStoreLocation.id.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t FocusStoreLocation.wasRead.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v0 + 72));
}

uint64_t FocusStoreLocation.wasRead.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v1 + 72)) = result;
  return result;
}

uint64_t (*FocusStoreLocation.wasRead.modify(uint64_t a1))(uint64_t result)
{
  _QWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)v1 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v1 + 72));
  return FocusStoreLocation.wasRead.modify;
}

uint64_t FocusStoreLocation.wasRead.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result
           + *(_QWORD *)(class metadata base offset for FocusStoreLocation + **(_QWORD **)result + 72)) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t FocusStoreLocation.getValue(forReading:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v5 = a1;
  v35 = a3;
  v6 = (uint64_t *)(*v3 + class metadata base offset for FocusStoreLocation);
  v7 = *v6;
  v34 = *(_QWORD *)(*v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v33 = (char *)&v32 - v8;
  v11 = type metadata accessor for FocusStore.Entry(255, v7, *(_QWORD *)(v9 + 8), v10);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v32 - v19;
  type metadata accessor for GraphHost();
  if ((static GraphHost.isUpdating.getter() & 1) != 0 && (v5 & 1) != 0)
    *((_BYTE *)v3 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v3 + 72)) = 1;
  v21 = (char *)v3 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v3 + 56);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  v23 = v22(v20, 1, v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
  if (v23 == 1
    || (v25 = *((_DWORD *)v4 + 4), v25 == -1)
    || ((v26 = *(_DWORD *)((char *)v4 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v4 + 64)),
         v26 != -1)
      ? (v27 = v25 == v26)
      : (v27 = 0),
        !v27))
  {
    FocusStoreLocation.findFocusedEntry()(v24, (uint64_t)v16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v21, v16, v12);
    swift_endAccess();
    *(_DWORD *)((char *)v4 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v4 + 64)) = *((_DWORD *)v4 + 4);
  }
  if (v22(v21, 1, v11))
  {
    v28 = (char *)v4 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v4 + 32);
    v29 = 2;
    v30 = v34;
  }
  else
  {
    v28 = v33;
    v30 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v33, v21, v7);
    v29 = 4;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 8 * v29))(v35, v28, v7);
}

uint64_t FocusStoreLocation.findFocusedEntry()@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v4 = (uint64_t *)(*v2 + class metadata base offset for FocusStoreLocation);
  v5 = *v4;
  v6 = v4[1];
  v7 = type metadata accessor for FocusStore.Entry(255, *v4, v6, a1);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v11.n128_f64[0] = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v19 - v12;
  if (!*(_QWORD *)(v2[4] + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 56))(a2, 1, 1, v7, v11);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
  if ((v14 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 56))(a2, 1, 1, v7, v11);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v13, 1, 1, v7);
  v20 = *(_QWORD *)(v2[3] + 16);
  v16 = type metadata accessor for FocusStore.Key(0, v5, v6, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  *(&v19 - 4) = (uint64_t)v2;
  *(&v19 - 3) = (uint64_t)&v20;
  *(&v19 - 2) = (uint64_t)v13;
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStore.Key<A>, v16);
  PropertyList.forEach<A>(keyType:_:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v13, v8);
}

uint64_t FocusStoreLocation.get()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return FocusStoreLocation.getValue(forReading:)(0, a1, a2);
}

uint64_t closure #1 in FocusStoreLocation.set(_:transaction:)(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t TupleTypeMetadata2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);

  v66 = a3;
  v67 = a2;
  v7 = type metadata accessor for FocusStore.Entry(255, a4, a5, a4);
  v8 = type metadata accessor for Optional();
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v63 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v58 = (char *)&v56 - v13;
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  v14 = *(_QWORD *)(v64 + 64);
  MEMORY[0x1E0C80A78](v15, v16);
  v57 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v59 = (char *)&v56 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v56 = (char *)&v56 - v22;
  v62 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = type metadata accessor for Optional();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v56 - v31;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v34 = (_QWORD *)result;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v32, 1, 1, TupleTypeMetadata2);
    v35 = (char *)v34 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v34 + 48);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v35, v32, v28);
    swift_endAccess();
    v36 = (uint64_t)v67;
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    {
      FocusStoreLocation.getValue(forReading:)(0, v37, (uint64_t)v26);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v26, a4);
      if ((v39 & 1) == 0)
      {
        v40 = (char *)v34 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v34 + 56);
        swift_beginAccess();
        v42 = v60;
        v41 = v61;
        v43 = v58;
        (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v58, v40, v61);
        v45 = v64;
        v44 = v65;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v43, 1, v65) == 1)
        {
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v43, v41);
        }
        v67 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
        v48 = v56;
        v67(v56, v43, v44);
        v53 = v59;
        (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v59, v48, v44);
        v54 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
        v55 = swift_allocObject();
        *(_QWORD *)(v55 + 16) = a4;
        *(_QWORD *)(v55 + 24) = a5;
        v67((char *)(v55 + v54), v53, v44);
        goto LABEL_11;
      }
    }
    else
    {
      v46 = v63;
      FocusStoreLocation.findEntry(with:)(v36, v38, v63);
      v45 = v64;
      v44 = v65;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v46, 1, v65) != 1)
      {
        v67 = (void (*)(char *, char *, uint64_t))a5;
        v47 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
        v48 = v57;
        v47(v57, v46, v44);
        v49 = v59;
        (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v59, v48, v44);
        v50 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
        v51 = swift_allocObject();
        v52 = v67;
        *(_QWORD *)(v51 + 16) = a4;
        *(_QWORD *)(v51 + 24) = v52;
        v47((char *)(v51 + v50), (uint64_t)v49, v44);
LABEL_11:
        static Update.enqueueAction(_:)();
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v48, v44);
      }
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v46, v61);
      FocusStoreLocation.deferUpdate(_:)(v36);
    }
    return swift_release();
  }
  return result;
}

uint64_t FocusStoreLocation.findEntry(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v6 = (uint64_t *)(*v3 + class metadata base offset for FocusStoreLocation);
  v7 = *v6;
  v8 = v6[1];
  v9 = type metadata accessor for FocusStore.Entry(255, *v6, v8, a2);
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v13.n128_f64[0] = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)v21 - v14;
  if (!*(_QWORD *)(v3[4] + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9, v13);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v3);
  if ((v16 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v9 - 8) + 56))(a3, 1, 1, v9, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v15, 1, 1, v9);
  v18 = type metadata accessor for FocusStore.Key(0, v7, v8, v17);
  v21[1] = v21;
  MEMORY[0x1E0C80A78](v18, v19);
  v21[-4] = v7;
  v21[-3] = v8;
  v21[-2] = a1;
  v21[-1] = v15;
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStore.Key<A>, v18);
  PropertyList.forEach<A>(keyType:_:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v15, v10);
}

uint64_t FocusStoreLocation.deferUpdate(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v3 = *(_QWORD *)(*v1 + class metadata base offset for FocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)&v14 - v9;
  v11 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(v3 - 8) + 16))((char *)&v14 - v9, a1, v3, v8);
  *(_DWORD *)&v10[v11] = *(_DWORD *)((char *)v1
                                   + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v1 + 40));
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v10, 0, 1, TupleTypeMetadata2);
  v12 = (char *)v1 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v1 + 48);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v12, v10, v5);
  return swift_endAccess();
}

BOOL FocusStoreLocation.update()(char *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;

  v4 = *v2;
  v5 = (uint64_t *)(*v2 + class metadata base offset for FocusStoreLocation);
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v29 - v16;
  v19 = (char *)v2 + *(_QWORD *)(v18 + 56);
  swift_beginAccess();
  v20 = class metadata base offset for FocusStoreLocation;
  v22 = type metadata accessor for FocusStore.Entry(0, v6, *(_QWORD *)(class metadata base offset for FocusStoreLocation + v4 + 8), v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v19, 1, v22))
  {
    v23 = (char *)v2 + *(_QWORD *)(v20 + *v2 + 32);
    v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v24(v17, v23, v6);
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v24(v13, v19, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v13, v6);
  }
  FocusStoreLocation.getValue(forReading:)(0, v25, (uint64_t)v9);
  v24(a1, v9, v6);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v27 = *(void (**)(char *, uint64_t))(v7 + 8);
  v27(v9, v6);
  v27(v17, v6);
  return (v26 & 1) == 0;
}

Swift::Void __swiftcall FocusStoreLocation.performDeferredUpdate()()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;

  v1 = (uint64_t *)(*v0 + class metadata base offset for FocusStoreLocation);
  v2 = *v1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - v10;
  v29 = v2;
  v12 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v28 - v15;
  v17 = v1[6];
  v30 = v0;
  v18 = (char *)v0 + v17;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v18, v4);
  v19 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  }
  else
  {
    v20 = *(_DWORD *)&v11[*(int *)(TupleTypeMetadata2 + 48)];
    v28 = v12;
    v21 = v11;
    v22 = v29;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v21, v29);
    if (v20 != -1)
    {
      v23 = *(_DWORD *)((char *)v30 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v30 + 40));
      v24 = v20 != v23 || v23 == -1;
      if (!v24 || v20 == 0)
      {
        static Transaction.current.getter();
        specialized FocusStoreLocation.set(_:transaction:)((uint64_t)v16, v26);
        swift_release();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v22);
        return;
      }
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v22);
  }
  v27 = v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v31, 1, 1, TupleTypeMetadata2);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v18, v27, v4);
  swift_endAccess();
}

uint64_t closure #1 in FocusStoreLocation.findFocusedEntry()(uint64_t a1, BOOL *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t Strong;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  BOOL *v56;
  uint64_t (*v57)(char *, char *);
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, char *, uint64_t);
  uint64_t v64;
  int v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, char *);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  BOOL *v73;
  _QWORD *v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  _BYTE v83[24];

  v72 = a5;
  v73 = a2;
  v74 = a4;
  v76 = a3;
  v6 = *a3;
  v75 = (uint64_t *)type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v75, v7);
  v71 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FocusStore.Entry(255, *(_QWORD *)(v6 + class metadata base offset for FocusStoreLocation), *(_QWORD *)(v6 + class metadata base offset for FocusStoreLocation + 8), v19);
  v21 = type metadata accessor for Optional();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v67 - v24;
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)&v67 - v29;
  v31 = a1;
  v33 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v25, v31, v21, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v25, 1, v20) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v70 = v22;
  v77 = v21;
  v35 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v35(v30, v25, v20);
  v42 = v30;
  if ((FocusStore.Entry.isValid.getter(v20, v36, v37, v38) & 1) != 0)
  {
    v69 = v33;
    v43 = FocusStore.Entry.responder.getter(v20, v39, v40, v41);
    if (v43)
    {
      v45 = v43;
      v67 = (void (*)(uint64_t, char *, char *))v35;
      v68 = v30;
      v71 = (char *)v20;
      v46 = v76[3];
      v47 = *(_QWORD *)(v46 + 16);
      v75 = &v80;
      v76 = (_QWORD *)(v46 + 32);
      result = swift_bridgeObjectRetain();
      v48 = 0;
      while (1)
      {
        if (v48 == v47)
        {
          v79 = 0;
          v80 = 0;
          v48 = v47;
          v81 = 1;
        }
        else
        {
          if (v48 >= *(_QWORD *)(v46 + 16))
          {
            __break(1u);
            return result;
          }
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v76[v48], (uint64_t)&v78, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
          v79 = v48;
          outlined init with take of TableCellFormula((uint64_t)&v78, (uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
          v81 = 0;
          ++v48;
        }
        outlined init with take of TableCellFormula((uint64_t)&v79, (uint64_t)&v82, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: WeakBox<ViewResponder>)?);
        if (v83[8] == 1)
        {
          swift_bridgeObjectRelease();
          swift_release();
          v58 = v68;
          v57 = *(uint64_t (**)(char *, char *))(v69 + 8);
          v59 = v71;
          return v57(v58, v59);
        }
        v49 = v82;
        outlined init with take of TableCellFormula((uint64_t)v83, (uint64_t)&v79, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
        Strong = swift_weakLoadStrong();
        if (Strong)
        {
          v51 = Strong;
          swift_release();
          result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v79, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
          v52 = v51 == v45;
          v53 = v77;
          if (v52 && v49 < *v74)
          {
            swift_release();
            swift_bridgeObjectRelease();
            v54 = v72;
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v72, v53);
            v55 = v71;
            v67(v54, v68, v71);
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *))(v69 + 56))(v54, 0, 1, v55);
            v56 = v73;
            *v74 = v49;
            *v56 = v49 == 0;
            return result;
          }
        }
        else
        {
          result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v79, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<ViewResponder>);
        }
      }
    }
    FocusStore.Entry.searchFieldState.getter(v20, v44, (uint64_t)v12);
    v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14);
    v61 = v77;
    v62 = v70;
    if (v60 == 1)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v30, v20);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
    }
    v63 = (void (*)(uint64_t, char *, uint64_t))v35;
    outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    v64 = (uint64_t)v71;
    MEMORY[0x18D75B9C8](v14);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    v65 = *(unsigned __int8 *)(v64 + *((int *)v75 + 10));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v64, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v65 == 1)
    {
      v66 = v72;
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v72, v61);
      v63(v66, v42, v20);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v20);
      *v73 = 1;
      return result;
    }
    v57 = *(uint64_t (**)(char *, char *))(v69 + 8);
  }
  else
  {
    v57 = *(uint64_t (**)(char *, char *))(v33 + 8);
  }
  v58 = v42;
  v59 = (char *)v20;
  return v57(v58, v59);
}

uint64_t closure #1 in FocusStoreLocation.findEntry(with:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[2];

  v26[0] = a4;
  v26[1] = a3;
  v8 = type metadata accessor for FocusStore.Entry(255, a5, a6, a4);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v26 - v12;
  v14 = *(_QWORD *)(v8 - 8);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, v9, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v21 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v21(v19, v13, v8);
  if ((FocusStore.Entry.isValid.getter(v8, v22, v23, v24) & 1) == 0
    || (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v8);
  }
  v25 = (char *)v26[0];
  (*(void (**)(_QWORD, uint64_t))(v10 + 8))(v26[0], v9);
  v21(v25, v19, v8);
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v25, 0, 1, v8);
  *a2 = 1;
  return result;
}

void FocusStoreLocation.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FocusStoreLocation.__ivar_destroyer()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  v2 = *(_QWORD *)(v1 + class metadata base offset for FocusStoreLocation);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(&v0[*(_QWORD *)(class metadata base offset for FocusStoreLocation + *(_QWORD *)v0 + 32)], v2);
  v3 = &v0[*(_QWORD *)(class metadata base offset for FocusStoreLocation + *(_QWORD *)v0 + 48)];
  swift_getTupleTypeMetadata2();
  v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = &v0[*(_QWORD *)(class metadata base offset for FocusStoreLocation + *(_QWORD *)v0 + 56)];
  type metadata accessor for FocusStore.Entry(255, v2, *(_QWORD *)(class metadata base offset for FocusStoreLocation + v1 + 8), v6);
  v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
}

char *FocusStoreLocation.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  v2 = (char *)AnyLocation.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  v3 = *(_QWORD *)(v1 + class metadata base offset for FocusStoreLocation);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(&v2[*(_QWORD *)(class metadata base offset for FocusStoreLocation + *(_QWORD *)v2 + 32)], v3);
  v4 = &v2[*(_QWORD *)(class metadata base offset for FocusStoreLocation + *(_QWORD *)v2 + 48)];
  swift_getTupleTypeMetadata2();
  v5 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = &v2[*(_QWORD *)(class metadata base offset for FocusStoreLocation + *(_QWORD *)v2 + 56)];
  type metadata accessor for FocusStore.Entry(255, v3, *(_QWORD *)(class metadata base offset for FocusStoreLocation + v1 + 8), v7);
  v8 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  return v2;
}

uint64_t FocusStoreLocation.__deallocating_deinit()
{
  FocusStoreLocation.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FocusStoreLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusStoreLocation);
}

uint64_t type metadata accessor for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusStore.Entry);
}

uint64_t assignWithTake for FocusStore(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata completion function for FocusStore.Entry(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = swift_checkMetadataState();
  v4 = v2;
  if (v5 <= 0x3F)
  {
    v4 = type metadata accessor for FocusStore.Entry.Target(319, v2, *(_QWORD *)(a1 + 24), v3);
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for FocusStore.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_DWORD *)(*(_QWORD *)(type metadata accessor for AttributedString() - 8) + 80);
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  v8 = *a2;
  *a1 = *a2;
  v9 = (v7 | v6) & 0xF8 | 7u;
  v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t destroy for FocusStore.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = (v4 + (v7 | 7) + 8) & ~(v7 | 7);
  v9 = *(_DWORD *)(v6 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v10 = ((v7 + 16) & v9) + ((((v7 + 9) & ~v7) + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  if (v10 <= 0x10)
    v10 = 16;
  v11 = *(unsigned __int8 *)(v8 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  if (v11 == 1)
  {
    swift_release();
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((v7 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v9) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v7, v5);
  }
  else
  {
    swift_weakDestroy();
    return swift_weakDestroy();
  }
}

uint64_t initializeWithCopy for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  int v33;
  char v34;
  uint64_t v36;
  uint64_t v37;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v37 = a1;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v36 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v36 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v12 = v10 + 8;
  v13 = v10 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)(((unint64_t)v7 + v12) & v13);
  v15 = (_QWORD *)(((unint64_t)v8 + v12) & v13);
  v16 = v10 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v17 = *(_QWORD *)(v9 + 64);
  if (((v11 + 16) & v16) + ((((v11 + 9) & ~v11) + v17) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10)
    v18 = 16;
  else
    v18 = ((v10 + 16) & v16) + ((((v10 + 9) & ~(unint64_t)v10) + v17) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v19 = *((unsigned __int8 *)v15 + v18);
  swift_bridgeObjectRetain();
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X11 }
  }
  if (v19 == 1)
  {
    *v14 = *v15;
    v21 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = ((unint64_t)v21 + v12) & v16;
    v24 = ((unint64_t)v22 + v12) & v16;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    *(_BYTE *)(v23 | 1) = *(_BYTE *)(v24 | 1);
    *(_BYTE *)(v23 | 2) = *(_BYTE *)(v24 | 2);
    *(_BYTE *)(v23 | 3) = *(_BYTE *)(v24 | 3);
    v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v27 = *(_DWORD *)v26;
    *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
    *(_DWORD *)v25 = v27;
    v28 = (v11 + 5 + v25) & ~v11;
    v29 = (v11 + 5 + v26) & ~v11;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v30(v28, v29, v36);
    *(_BYTE *)(v28 + v17) = *(_BYTE *)(v29 + v17);
    v31 = (v28 + v17) & 0xFFFFFFFFFFFFFFFCLL;
    v32 = (v29 + v17) & 0xFFFFFFFFFFFFFFFCLL;
    v33 = *(_DWORD *)(v32 + 4);
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
    *(_DWORD *)(v31 + 4) = v33;
    v34 = 1;
  }
  else
  {
    swift_weakCopyInit();
    swift_weakCopyInit();
    v34 = 0;
  }
  *((_BYTE *)v14 + v18) = v34;
  return v37;
}

uint64_t assignWithCopy for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, unint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  int v39;
  char v40;
  uint64_t v42;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 + 8;
  v13 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = (_QWORD *)(((unint64_t)v7 + v11 + 8) & v13);
  v15 = (_QWORD *)(((unint64_t)v8 + v11 + 8) & v13);
  if (v14 != v15)
  {
    v16 = v9;
    v17 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
    v18 = *(_QWORD *)(v10 + 64);
    v42 = v18;
    if (((v11 + 16) & v17) + ((v18 + ((v11 + 9) & ~v11)) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10)
      v19 = 16;
    else
      v19 = ((v11 + 16) & v17) + ((v18 + ((v11 + 9) & ~v11)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v20 = *((unsigned __int8 *)v14 + v19);
    if (v20 >= 2)
    {
      if (v19 <= 3)
        v21 = v19;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    v22 = ~v11;
    if (v20 == 1)
    {
      v23 = v9;
      swift_release();
      swift_release();
      v22 = ~v11;
      v16 = v23;
      v17 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))((v11 + ((((v12 + (((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8)) & v17) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v11, v16);
    }
    else
    {
      swift_weakDestroy();
      swift_weakDestroy();
    }
    v24 = *((unsigned __int8 *)v15 + v19);
    if (v24 >= 2)
    {
      if (v19 <= 3)
        v25 = v19;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      *v14 = *v15;
      v26 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
      v27 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v26 = *v27;
      v28 = ((unint64_t)v26 + v12) & v17;
      v29 = ((unint64_t)v27 + v12) & v17;
      *(_BYTE *)v28 = *(_BYTE *)v29;
      *(_BYTE *)(v28 | 1) = *(_BYTE *)(v29 | 1);
      *(_BYTE *)(v28 | 2) = *(_BYTE *)(v29 | 2);
      *(_BYTE *)(v28 | 3) = *(_BYTE *)(v29 | 3);
      v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = (v29 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v32 = *(_DWORD *)v31;
      *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
      *(_DWORD *)v30 = v32;
      v33 = v11 + 5;
      v34 = (v11 + 5 + v30) & v22;
      v35 = (v33 + v31) & v22;
      v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
      swift_retain();
      swift_retain();
      v36(v34, v35, v16);
      *(_BYTE *)(v42 + v34) = *(_BYTE *)(v42 + v35);
      v37 = (v42 + v34) & 0xFFFFFFFFFFFFFFFCLL;
      v38 = (v42 + v35) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = *(_DWORD *)(v38 + 4);
      *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
      *(_DWORD *)(v37 + 4) = v39;
      v40 = 1;
    }
    else
    {
      swift_weakCopyInit();
      swift_weakCopyInit();
      v40 = 0;
    }
    *((_BYTE *)v14 + v19) = v40;
  }
  return a1;
}

uint64_t initializeWithTake for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11;
  v13 = v11 + 8;
  v14 = v11 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v15 = (_QWORD *)(((unint64_t)v7 + v13) & v14);
  v16 = (_QWORD *)(((unint64_t)v8 + v13) & v14);
  v17 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v18 = *(_QWORD *)(v10 + 64);
  if (((v12 + 16) & v17) + ((((v12 + 9) & ~v12) + v18) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10)
    v19 = 16;
  else
    v19 = ((v12 + 16) & v17) + ((((v12 + 9) & ~v12) + v18) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v20 = *((unsigned __int8 *)v16 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X16 }
  }
  if (v20 == 1)
  {
    *v15 = *v16;
    v22 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v23;
    v24 = ((unint64_t)v22 + v13) & v17;
    v25 = ((unint64_t)v23 + v13) & v17;
    *(_BYTE *)v24 = *(_BYTE *)v25;
    *(_BYTE *)(v24 | 1) = *(_BYTE *)(v25 | 1);
    v26 = ~v12;
    *(_BYTE *)(v24 | 2) = *(_BYTE *)(v25 | 2);
    *(_BYTE *)(v24 | 3) = *(_BYTE *)(v25 | 3);
    v27 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v23) = *(_DWORD *)v28;
    *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
    *(_DWORD *)v27 = (_DWORD)v23;
    v29 = v12 + 5;
    v30 = (v29 + v27) & v26;
    v31 = (v29 + v28) & v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(v30, v31, v9);
    *(_BYTE *)(v30 + v18) = *(_BYTE *)(v31 + v18);
    v32 = (v30 + v18) & 0xFFFFFFFFFFFFFFFCLL;
    v33 = (v31 + v18) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = *(_DWORD *)(v33 + 4);
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
    *(_DWORD *)(v32 + 4) = v34;
    v35 = 1;
  }
  else
  {
    swift_weakTakeInit();
    swift_weakTakeInit();
    v35 = 0;
  }
  *((_BYTE *)v15 + v19) = v35;
  return a1;
}

uint64_t assignWithTake for FocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  uint64_t v37;
  uint64_t v38;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  v38 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v38 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 8;
  v12 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v13 = (_QWORD *)(((unint64_t)v7 + v10 + 8) & v12);
  v14 = (_QWORD *)(((unint64_t)v8 + v10 + 8) & v12);
  if (v13 != v14)
  {
    v15 = v10 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
    v16 = *(_QWORD *)(v9 + 64);
    v37 = v16;
    if (((v10 + 16) & v15) + ((v16 + ((v10 + 9) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 9 <= 0x10)
      v17 = 16;
    else
      v17 = ((v10 + 16) & v15) + ((v16 + ((v10 + 9) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v18 = *((unsigned __int8 *)v13 + v17);
    if (v18 >= 2)
    {
      if (v17 <= 3)
        v19 = v17;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)
    {
      swift_release();
      swift_release();
      v20 = ~v10;
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))((v10 + ((((v11 + (((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8)) & v15) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v10, v38);
    }
    else
    {
      v20 = ~v10;
      swift_weakDestroy();
      swift_weakDestroy();
    }
    v21 = *((unsigned __int8 *)v14 + v17);
    if (v21 >= 2)
    {
      if (v17 <= 3)
        v22 = v17;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 1)
    {
      *v13 = *v14;
      v23 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
      v24 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v23 = *v24;
      v25 = ((unint64_t)v23 + v11) & v15;
      v26 = ((unint64_t)v24 + v11) & v15;
      *(_BYTE *)v25 = *(_BYTE *)v26;
      *(_BYTE *)(v25 | 1) = *(_BYTE *)(v26 | 1);
      *(_BYTE *)(v25 | 2) = *(_BYTE *)(v26 | 2);
      *(_BYTE *)(v25 | 3) = *(_BYTE *)(v26 | 3);
      v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v29 = *(_DWORD *)v28;
      *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
      *(_DWORD *)v27 = v29;
      v30 = (v10 + 5 + v27) & v20;
      v31 = (v10 + 5 + v28) & v20;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v30, v31, v38);
      *(_BYTE *)(v37 + v30) = *(_BYTE *)(v37 + v31);
      v32 = (v37 + v30) & 0xFFFFFFFFFFFFFFFCLL;
      v33 = (v37 + v31) & 0xFFFFFFFFFFFFFFFCLL;
      v34 = *(_DWORD *)(v33 + 4);
      *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
      *(_DWORD *)(v32 + 4) = v34;
      v35 = 1;
    }
    else
    {
      swift_weakTakeInit();
      swift_weakTakeInit();
      v35 = 0;
    }
    *((_BYTE *)v13 + v17) = v35;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStore.Entry(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  unint64_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = ((v10 & 0xFC ^ 0x1FCu) & (v10 + 16))
      + ((((v10 + 9) & ~(unint64_t)v10) + *(_QWORD *)(v9 + 64)) & 0xFFFFFFFFFFFFFFFCLL)
      + 9;
  if (v11 <= 0x10)
    v12 = 16;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = *(_QWORD *)(v6 + 64);
  if (a2 <= v8)
    goto LABEL_25;
  v14 = v12
      + ((v10 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & (v10 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
      + 1;
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_25:
      if (v7 >= 0x7FFFFFFF)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v20 = *(_QWORD *)((a1 + v13 + 7) & 0xFFFFFFFFFFFFF8);
      if (v20 >= 0xFFFFFFFF)
        LODWORD(v20) = -1;
      return (v20 + 1);
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_25;
LABEL_18:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X11 }
  }
  return v8 + v19 + 1;
}

void storeEnumTagSinglePayload for FocusStore.Entry(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = ((v10 & 0xFC ^ 0x1FCu) & (v10 + 16))
      + ((((v10 + 9) & ~(unint64_t)v10) + *(_QWORD *)(v9 + 64)) & 0xFFFFFFFFFFFFFFFCLL)
      + 9;
  v12 = 16;
  if (v11 > 0x10)
    v12 = v11;
  v13 = v12
      + ((v10 + ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & (v10 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
      + 1;
  if (a3 <= v8)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v8 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v8 < a2)
  {
    v15 = ~v8 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for FocusStore.Entry.Target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusStore.Entry.Target);
}

void type metadata completion function for FocusStore.Entry.Target()
{
  unint64_t v0;

  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

_QWORD *initializeBufferWithCopyOfBuffer for FocusStore.Entry.Target(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      type metadata accessor for Binding<SearchFieldState>(0);
      v8 = *(int *)(v7 + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      *v9 = *((_BYTE *)a2 + v8);
      v9[1] = *((_BYTE *)a2 + v8 + 1);
      *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
      v9[8] = *((_BYTE *)a2 + v8 + 8);
      *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
      v11 = (int *)type metadata accessor for SearchFieldState();
      v12 = v11[9];
      v13 = &v9[v12];
      v14 = &v10[v12];
      v15 = type metadata accessor for AttributedString();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_retain();
      swift_retain();
      v16(v13, v14, v15);
      v9[v11[10]] = v10[v11[10]];
      v17 = v11[11];
      v18 = &v9[v17];
      v19 = &v10[v17];
      v18[4] = v19[4];
      *(_DWORD *)v18 = *(_DWORD *)v19;
    }
    else
    {
      swift_weakCopyInit();
      swift_weakCopyInit();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FocusStore.Entry.Target(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    swift_release();
    type metadata accessor for Binding<SearchFieldState>(0);
    v3 = a1 + *(int *)(v2 + 32);
    v4 = v3 + *(int *)(type metadata accessor for SearchFieldState() + 36);
    v5 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_weakDestroy();
    return swift_weakDestroy();
  }
}

_QWORD *initializeWithCopy for FocusStore.Entry.Target(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    type metadata accessor for Binding<SearchFieldState>(0);
    v6 = *(int *)(v5 + 32);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *v7 = *((_BYTE *)a2 + v6);
    v7[1] = *((_BYTE *)a2 + v6 + 1);
    *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
    v7[8] = *((_BYTE *)a2 + v6 + 8);
    *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
    v9 = (int *)type metadata accessor for SearchFieldState();
    v10 = v9[9];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for AttributedString();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v11, v12, v13);
    v7[v9[10]] = v8[v9[10]];
    v15 = v9[11];
    v16 = &v7[v15];
    v17 = &v8[v15];
    v16[4] = v17[4];
    *(_DWORD *)v16 = *(_DWORD *)v17;
  }
  else
  {
    swift_weakCopyInit();
    swift_weakCopyInit();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for FocusStore.Entry.Target(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;

  if (a1 != a2)
  {
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      type metadata accessor for Binding<SearchFieldState>(0);
      v6 = *(int *)(v5 + 32);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      *v7 = *((_BYTE *)a2 + v6);
      v7[1] = *((_BYTE *)a2 + v6 + 1);
      v7[2] = *((_BYTE *)a2 + v6 + 2);
      v7[3] = *((_BYTE *)a2 + v6 + 3);
      LODWORD(v6) = *(_DWORD *)((char *)a2 + v6 + 4);
      v7[8] = v8[8];
      *((_DWORD *)v7 + 1) = v6;
      v9 = (int *)type metadata accessor for SearchFieldState();
      v10 = v9[9];
      v11 = &v7[v10];
      v12 = &v8[v10];
      v13 = type metadata accessor for AttributedString();
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      swift_retain();
      swift_retain();
      v14(v11, v12, v13);
      v7[v9[10]] = v8[v9[10]];
      v15 = v9[11];
      v16 = &v7[v15];
      v17 = &v8[v15];
      v18 = v17[4];
      *(_DWORD *)v16 = *(_DWORD *)v17;
      v16[4] = v18;
    }
    else
    {
      swift_weakCopyInit();
      swift_weakCopyInit();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for FocusStore.Entry.Target(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    type metadata accessor for Binding<SearchFieldState>(0);
    v6 = *(int *)(v5 + 32);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *v7 = *((_BYTE *)a2 + v6);
    v7[1] = *((_BYTE *)a2 + v6 + 1);
    *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
    v7[8] = *((_BYTE *)a2 + v6 + 8);
    *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
    v9 = (int *)type metadata accessor for SearchFieldState();
    v10 = v9[9];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    v7[v9[10]] = v8[v9[10]];
    v14 = v9[11];
    v15 = &v7[v14];
    v16 = &v8[v14];
    v15[4] = v16[4];
    *(_DWORD *)v15 = *(_DWORD *)v16;
  }
  else
  {
    swift_weakTakeInit();
    swift_weakTakeInit();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithTake for FocusStore.Entry.Target(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  if (a1 != a2)
  {
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      type metadata accessor for Binding<SearchFieldState>(0);
      v7 = *(int *)(v6 + 32);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      *v8 = *((_BYTE *)a2 + v7);
      v8[1] = *((_BYTE *)a2 + v7 + 1);
      *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
      v8[8] = *((_BYTE *)a2 + v7 + 8);
      *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
      v10 = (int *)type metadata accessor for SearchFieldState();
      v11 = v10[9];
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v8[v10[10]] = v9[v10[10]];
      v15 = v10[11];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v16[4] = v17[4];
      *(_DWORD *)v16 = *(_DWORD *)v17;
    }
    else
    {
      swift_weakTakeInit();
      swift_weakTakeInit();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStore.Entry.Target(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for FocusStore.Entry.Target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t protocol witness for Location.wasRead.getter in conformance FocusStoreLocation<A>()
{
  return FocusStoreLocation.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance FocusStoreLocation<A>(uint64_t a1)
{
  return FocusStoreLocation.wasRead.setter(a1);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance FocusStoreLocation<A>(uint64_t a1))(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_BYTE *)(a1 + 8) = FocusStoreLocation.wasRead.getter() & 1;
  return protocol witness for Location.wasRead.modify in conformance FocusStoreLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance FocusStoreLocation<A>(uint64_t a1)
{
  return FocusStoreLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t protocol witness for Location.get() in conformance FocusStoreLocation<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return FocusStoreLocation.get()(a1, a2);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance FocusStoreLocation<A>(uint64_t a1, uint64_t a2)
{
  return specialized FocusStoreLocation.set(_:transaction:)(a1, a2);
}

BOOL protocol witness for Location.update() in conformance FocusStoreLocation<A>(char *a1, uint64_t a2)
{
  return FocusStoreLocation.update()(a1, a2);
}

void base witness table accessor for Equatable in FocusStoreLocation<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance FocusStoreInputKey(_DWORD *a1@<X8>)
{
  *a1 = *MEMORY[0x1E0CFED28];
}

uint64_t specialized FocusStoreLocation.set(_:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + class metadata base offset for FocusStoreLocation);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v2 + 5, a2);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24 - v11;
  result = swift_weakLoadStrong();
  if (result)
  {
    v14 = swift_allocObject();
    v24 = v4;
    v15 = v14;
    swift_weakInit();
    v16 = (char *)v2 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v2 + 32);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v17(v12, a1, v5);
    v17(v8, (uint64_t)v16, v5);
    v18 = *(unsigned __int8 *)(v6 + 80);
    v19 = (v18 + 40) & ~v18;
    v20 = (v7 + v18 + v19) & ~v18;
    v21 = (char *)swift_allocObject();
    *((_QWORD *)v21 + 2) = v5;
    *((_QWORD *)v21 + 3) = *(_QWORD *)(class metadata base offset for FocusStoreLocation + v24 + 8);
    *((_QWORD *)v21 + 4) = v15;
    v22 = &v21[v19];
    v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v22, v12, v5);
    v23(&v21[v20], v8, v5);
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_186FEF788()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_186FEF7AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusStoreLocation.set(_:transaction:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  return closure #1 in FocusStoreLocation.set(_:transaction:)(v0[4], (void (*)(char *, char *, uint64_t))((char *)v0 + ((v3 + 40) & ~v3)), (uint64_t)v0 + ((*(_QWORD *)(v2 + 64) + v3 + ((v3 + 40) & ~v3)) & ~v3), v1, v0[3]);
}

uint64_t partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)(1, a2, a3, a4);
}

uint64_t objectdestroy_5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = type metadata accessor for FocusStore.Entry(0, v5, v6, a4);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v8 + 32) & ~v8), v5);
  swift_bridgeObjectRelease();
  v9 = v4 + ((v8 + 32) & ~v8) + *(int *)(v7 + 40);
  type metadata accessor for FocusStore.Entry.Target(0, v5, v6, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    swift_release();
    type metadata accessor for Binding<SearchFieldState>(0);
    v12 = *(int *)(v11 + 32);
    v13 = v9 + v12 + *(int *)(type metadata accessor for SearchFieldState() + 36);
    v14 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_weakDestroy();
    swift_weakDestroy();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in FocusStoreLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)(0, a2, a3, a4);
}

uint64_t partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for FocusStore.Entry(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return FocusStore.Entry.updateFocus(_:)(a1, v6);
}

void type metadata accessor for WeakBox<ViewResponder>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for WeakBox<ViewResponder>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

uint64_t partial apply for closure #1 in FocusStore.Entry.updateFocus(_:)(uint64_t a1)
{
  return closure #1 in FocusStore.Entry.updateFocus(_:)(a1);
}

uint64_t partial apply for closure #1 in FocusStore.Entry.defaultFocusItem.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in FocusStore.Entry.defaultFocusItem.getter(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t partial apply for closure #1 in ResponderNode.visitBaseFocusResponders(applying:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ResponderNode.visitBaseFocusResponders(applying:)(a1, *(void (**)(uint64_t, uint64_t))(v2 + 16), a2);
}

void type metadata accessor for WeakBox<UIFocusItem>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIFocusItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIFocusItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

unint64_t type metadata accessor for UIFocusItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIFocusItem;
  if (!lazy cache variable for type metadata for UIFocusItem)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  }
  return result;
}

uint64_t outlined init with take of FocusItem(uint64_t a1, uint64_t a2)
{
  initializeWithTake for FocusItem(a2, a1);
  return a2;
}

uint64_t outlined assign with take of FocusItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FocusStore.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusStore.Key);
}

uint64_t partial apply for closure #1 in FocusStoreLocation.findFocusedEntry()(uint64_t a1, BOOL *a2)
{
  uint64_t v2;

  return closure #1 in FocusStoreLocation.findFocusedEntry()(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void type metadata accessor for (offset: Int, element: WeakBox<ViewResponder>)?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for (offset: Int, element: WeakBox<ViewResponder>)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: WeakBox<ViewResponder>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for (offset: Int, element: WeakBox<ViewResponder>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: WeakBox<ViewResponder>))
  {
    type metadata accessor for WeakBox<ViewResponder>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: WeakBox<ViewResponder>));
  }
}

uint64_t partial apply for closure #1 in FocusStoreLocation.findEntry(with:)(uint64_t a1, _BYTE *a2)
{
  uint64_t *v2;

  return closure #1 in FocusStoreLocation.findEntry(with:)(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t specialized FocusStoreLocation.init(host:resetValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *v2;
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *((_DWORD *)v2 + 4) = 0;
  v2[3] = v5;
  v2[4] = v6;
  swift_weakInit();
  *(_DWORD *)((char *)v2 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v2 + 40)) = 0;
  v7 = (uint64_t)v2 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v2 + 48);
  v8 = *(_QWORD *)(v4 + class metadata base offset for FocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v7, 1, 1, TupleTypeMetadata2);
  v10 = (uint64_t)v2 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v2 + 56);
  v12 = type metadata accessor for FocusStore.Entry(0, v8, *(_QWORD *)(class metadata base offset for FocusStoreLocation + v4 + 8), v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  *(_DWORD *)((char *)v2 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v2 + 64)) = 0;
  *((_BYTE *)v2 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v2 + 72)) = 0;
  swift_weakAssign();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))((uint64_t)v2 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *v2 + 32), a2, v8);
  return AnyLocation.init()();
}

uint64_t specialized FocusStoreLocation.__allocating_init(host:resetValue:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return specialized FocusStoreLocation.init(host:resetValue:)(a1, a2);
}

uint64_t outlined init with copy of FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for FocusStoreList.Item(a2, a1);
  return a2;
}

uint64_t outlined destroy of FocusStoreList.Item(uint64_t a1)
{
  destroy for FocusStoreList.Item(a1);
  return a1;
}

ValueMetadata *type metadata accessor for FocusStoreInputKey()
{
  return &type metadata for FocusStoreInputKey;
}

unint64_t lazy protocol witness table accessor for type FocusStoreInputKey and conformance FocusStoreInputKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey;
  if (!lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStoreInputKey, &type metadata for FocusStoreInputKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey[0];
  if (!lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey[0])
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStoreInputKey, &type metadata for FocusStoreInputKey);
    atomic_store(result, lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey);
  }
  return result;
}

uint64_t NavigationSelectionHost.selectionSeedByStackKey.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, type metadata accessor for NavigationSelectionHost, (uint64_t)&protocol conformance descriptor for NavigationSelectionHost);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in NavigationSelectionHost.selectionSeedByStackKey.setter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t NavigationSelectionHost.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC7SwiftUI23NavigationSelectionHost___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for NavigationSelectionHost()
{
  return type metadata accessor for NavigationSelectionHost(0);
}

uint64_t type metadata accessor for NavigationSelectionHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NavigationSelectionHost);
}

uint64_t type metadata completion function for NavigationSelectionHost()
{
  return type metadata completion function for NavigationSelectionHost();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t NavigationSeedHost.seeds.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NavigationSeedHost and conformance NavigationSeedHost, type metadata accessor for NavigationSeedHost, (uint64_t)&protocol conformance descriptor for NavigationSeedHost);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(_QWORD *)(v0 + 16);
}

uint64_t closure #1 in NavigationSeedHost.seeds.setter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t NavigationSeedHost.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI18NavigationSeedHost___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for NavigationSeedHost()
{
  return type metadata accessor for NavigationSeedHost(0);
}

uint64_t type metadata accessor for NavigationSeedHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NavigationSeedHost);
}

uint64_t type metadata completion function for NavigationSeedHost()
{
  return type metadata completion function for NavigationSelectionHost();
}

double static ListRowInsetsTraitKey.defaultValue.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

double protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ListRowInsetsTraitKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t View.listRowInsets(_:)(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with take of EdgeInsets?(a1, (uint64_t)v2, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEB940]);
  return View._trait<A>(_:_:)();
}

uint64_t sub_186FF01EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListRowInsetsTraitKey>, (uint64_t)&type metadata for ListRowInsetsTraitKey, (uint64_t)&protocol witness table for ListRowInsetsTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListRowInsetsTraitKey>, (uint64_t)&type metadata for ListRowInsetsTraitKey, (uint64_t)&protocol witness table for ListRowInsetsTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListRowInsetsTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey(&one-time initialization token for defaultValue, (__n128 *)&static ListRowInsetsKey.defaultValue, &xmmword_1EDDD2280, a1).n128_u64[0];
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance EdgesOutsettingByRowInsetsModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];
  char v11;
  _BYTE v12[40];

  v3 = *(_OWORD *)(v1 + 16);
  v10[0] = *(_OWORD *)v1;
  v10[1] = v3;
  v11 = *(_BYTE *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 33);
  outlined init with take of EdgeInsets?((uint64_t)v10, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE1158]);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Environment<EdgeInsets>.Content);
  specialized Environment.wrappedValue.getter();
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Environment<EdgeInsets>.Content);
  result = EdgeInsets.negatedInsets.getter();
  *(_BYTE *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

double EnvironmentValues.effectiveListRowInsets.getter()
{
  return EnvironmentValues.listRowInsets.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveListRowInsetsKey>, (uint64_t)&unk_1E1AE96D0, (uint64_t)&protocol witness table for EffectiveListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

double EnvironmentValues.listRowInsets.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  double v10;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v10;
}

uint64_t EnvironmentValues.effectiveListRowInsets.setter()
{
  return EnvironmentValues.listRowInsets.setter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveListRowInsetsKey>, (uint64_t)&unk_1E1AE96D0, (uint64_t)&protocol witness table for EffectiveListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listRowInsets.setter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v4 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

ValueMetadata *type metadata accessor for ListRowInsetsKey()
{
  return &type metadata for ListRowInsetsKey;
}

void *type metadata accessor for EffectiveListRowInsetsKey()
{
  return &unk_1E1AE96D0;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance EffectiveListRowInsetsKey@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey(one-time initialization token for defaultValue, (__n128 *)&static EffectiveListRowInsetsKey.defaultValue, &xmmword_1EDE18808, a1).n128_u64[0];
  return result;
}

__n128 protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey@<Q0>(_QWORD *a1@<X2>, __n128 *a2@<X3>, __n128 *a3@<X4>, __n128 *a4@<X8>)
{
  __n128 result;
  __n128 v8;

  if (*a1 != -1)
    swift_once();
  result = *a2;
  v8 = *a3;
  *a4 = *a2;
  a4[1] = v8;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ListRowInsetsKey()
{
  return static EdgeInsets.== infix(_:_:)();
}

uint64_t destroy for EdgesOutsettingByRowInsetsModifier(uint64_t a1)
{
  return outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for EdgesOutsettingByRowInsetsModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for EdgesOutsettingByRowInsetsModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<EdgeInsets>.Content(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<EdgeInsets>.Content(v9, v10, v11, v12, v13);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t assignWithTake for EdgesOutsettingByRowInsetsModifier(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of Environment<EdgeInsets>.Content(v5, v6, v7, v8, v9);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for EdgesOutsettingByRowInsetsModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EdgesOutsettingByRowInsetsModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EdgesOutsettingByRowInsetsModifier()
{
  return &type metadata for EdgesOutsettingByRowInsetsModifier;
}

unint64_t lazy protocol witness table accessor for type EdgesOutsettingByRowInsetsModifier and conformance EdgesOutsettingByRowInsetsModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EdgesOutsettingByRowInsetsModifier and conformance EdgesOutsettingByRowInsetsModifier;
  if (!lazy protocol witness table cache variable for type EdgesOutsettingByRowInsetsModifier and conformance EdgesOutsettingByRowInsetsModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EdgesOutsettingByRowInsetsModifier, &type metadata for EdgesOutsettingByRowInsetsModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EdgesOutsettingByRowInsetsModifier and conformance EdgesOutsettingByRowInsetsModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout>)
  {
    type metadata accessor for _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>, _PaddingLayout>);
  }
}

void type metadata accessor for _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>)
  {
    lazy protocol witness table accessor for type EdgesOutsettingByRowInsetsModifier and conformance EdgesOutsettingByRowInsetsModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<EdgesOutsettingByRowInsetsModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for MultimodalBadgedViewStyle()
{
  return &type metadata for MultimodalBadgedViewStyle;
}

ValueMetadata *type metadata accessor for MultimodalBadgeInfo()
{
  return &type metadata for MultimodalBadgeInfo;
}

uint64_t protocol witness for BadgedViewStyle.makeBody(configuration:) in conformance MultimodalBadgedViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  KeyPath = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return outlined copy of BadgeLabel?(v3, v4, v5);
}

double BadgedViewStyleView.body.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t ObjCClassFromMetadata;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double result;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[48];
  _BYTE v48[56];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[25];
  _OWORD v60[9];
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[48];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  char v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  __int128 v109;
  char v110;
  uint64_t v111;
  char v112;
  _BYTE v113[168];

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  v42 = *(_BYTE *)(v1 + 48);
  v41 = *(_QWORD *)(v1 + 56);
  v38 = static Alignment.center.getter();
  v39 = v7;
  outlined copy of BadgeLabel?(v2, v3, v4);
  outlined copy of Environment<Bool>.Content(v5, v6);
  v8 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  v45 = v3;
  v46 = v2;
  outlined consume of BadgeLabel?(v2, v3, v4);
  v44 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v8 & 1) == 0 || (v4 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
    _s7SwiftUI15ModifiedContentVyAA6HStackVyAA9TupleViewVyAA6SpacerV_AA6VStackVyAGyAA5Badge33_582D9E508E536DEAC67BC3C87B3CFE52LLV_AItGGtGGAA31AccessibilityAttachmentModifierVGSgWOi0_((uint64_t)&v74);
    v12 = &v74;
  }
  else
  {
    v9 = static VerticalAlignment.center.getter();
    closure #1 in closure #1 in BadgedViewStyleView.body.getter((uint64_t)&v74);
    v37 = *((_QWORD *)&v76 + 1);
    v36 = v77[0];
    LOBYTE(v49) = 0;
    LOBYTE(v63) = BYTE8(v74);
    LOBYTE(v60[0]) = v76;
    v48[0] = v77[0];
    v47[0] = BYTE8(v78);
    v99 = v9;
    v100 = 0;
    v101 = 0;
    v102 = v74;
    v103 = BYTE8(v74);
    v104 = v75;
    v105 = v76;
    v106 = *((_QWORD *)&v76 + 1);
    v107 = v77[0];
    v108 = *(_OWORD *)&v77[8];
    v109 = *(_OWORD *)&v77[24];
    v110 = v77[40];
    v111 = v78;
    v112 = BYTE8(v78);
    specialized View.accessibility<A>(_:_:isEnabled:)(0x400000004uLL, 1, (uint64_t)&v74);
    v10 = *((_QWORD *)&v80 + 1);
    v11 = v81;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v10 + 16, 0x80000, 0x80000);
    swift_endAccess();
    swift_release();
    swift_release();
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v10 + 16, 0x6567646162, 0xE500000000000000, 2);
    swift_endAccess();
    swift_release();
    swift_release();
    outlined consume of Environment<Bool>.Content(v37, v36);
    v92 = v78;
    v93 = v79;
    *(_QWORD *)&v94 = v80;
    v88 = v76;
    v89 = *(_OWORD *)v77;
    v90 = *(_OWORD *)&v77[16];
    v91 = *(_OWORD *)&v77[32];
    v86 = v74;
    v87 = v75;
    *((_QWORD *)&v94 + 1) = v10;
    *(_QWORD *)&v95 = v11;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v86);
    v12 = &v86;
  }
  outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?((uint64_t)v12, (uint64_t)v113);
  outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?((uint64_t)v113, (uint64_t)v60);
  *((_QWORD *)&v61 + 1) = v38;
  v62 = v39;
  v73 = v39;
  v67 = v60[4];
  v68 = v60[5];
  v69 = v60[6];
  v70 = v60[7];
  v63 = v60[0];
  v64 = v60[1];
  v65 = v60[2];
  v66 = v60[3];
  v71 = v60[8];
  v72 = v61;
  LOBYTE(v86) = v42;
  *((_QWORD *)&v86 + 1) = v41;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  v13 = v74;
  v14 = v75;
  outlined copy of BadgeLabel?(v46, v45, v4);
  outlined copy of Environment<Bool>.Content(v5, v6);
  v15 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  if ((v15 & 1) == 0 || v44 == 0x1FFFFFFFELL)
  {
    LOBYTE(v74) = v42;
    *((_QWORD *)&v74 + 1) = v41;
    State.wrappedValue.getter();
    v17 = v45;
    v16 = v46;
    outlined consume of BadgeLabel?(v46, v45, v4);
    v18 = v86;
  }
  else
  {
    v17 = v45;
    v16 = v46;
    outlined consume of BadgeLabel?(v46, v45, v4);
    v18 = 1;
  }
  v43 = v18;
  v57 = v71;
  v58 = v72;
  v53 = v67;
  v54 = v68;
  v55 = v69;
  v56 = v70;
  v49 = v63;
  v50 = v64;
  v51 = v65;
  v52 = v66;
  *(_QWORD *)v59 = v73;
  *(_OWORD *)&v59[8] = v13;
  v59[24] = v14;
  outlined copy of BadgeLabel?(v16, v17, v4);
  outlined copy of Environment<Bool>.Content(v5, v6);
  v19 = v16;
  v20 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  outlined consume of BadgeLabel?(v19, v17, v4);
  if ((v20 & 1) == 0 || v44 == 0x1FFFFFFFELL)
  {
    LocalizedStringKey.init(stringLiteral:)();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    type metadata accessor for SwiftUIClass();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v22 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  }
  v23 = Text.init(_:tableName:bundle:comment:)();
  v25 = v24;
  v27 = v26 & 1;
  v94 = v57;
  v95 = v58;
  v96[0] = *(_OWORD *)v59;
  *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)&v59[9];
  v90 = v53;
  v91 = v54;
  v92 = v55;
  v93 = v56;
  v86 = v49;
  v87 = v50;
  v88 = v51;
  v89 = v52;
  v97 = v43;
  v98 = 0x403B000000000000;
  outlined copy of Text.Storage(v23, v24, v26 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v48, (uint64_t)v47);
  specialized View.accessibility<A>(_:_:isEnabled:)((uint64_t)v47, 1, (uint64_t)&v74);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v47);
  outlined destroy of AccessibilityValueStorage((uint64_t)v48);
  outlined consume of Text.Storage(v23, v25, v27);
  swift_bridgeObjectRelease();
  outlined release of ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>((uint64_t *)&v49);
  v28 = v83;
  a1[10] = v82;
  a1[11] = v28;
  v29 = v85;
  a1[12] = v84;
  a1[13] = v29;
  v30 = v79;
  a1[6] = v78;
  a1[7] = v30;
  v31 = v81;
  a1[8] = v80;
  a1[9] = v31;
  v32 = *(_OWORD *)v77;
  a1[2] = v76;
  a1[3] = v32;
  v33 = *(_OWORD *)&v77[32];
  a1[4] = *(_OWORD *)&v77[16];
  a1[5] = v33;
  result = *(double *)&v74;
  v35 = v75;
  *a1 = v74;
  a1[1] = v35;
  return result;
}

uint64_t closure #1 in closure #1 in BadgedViewStyleView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  double v4;

  v2 = static HorizontalAlignment.center.getter();
  KeyPath = swift_getKeyPath();
  if (one-time initialization token for standardSpacing != -1)
    swift_once();
  v4 = *(double *)&static ClarityUIMetrics.standardSpacing + -3.0;
  outlined copy of Environment<Bool>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = KeyPath;
  *(_BYTE *)(a1 + 48) = 0;
  *(double *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = xmmword_187C00FE0;
  *(_QWORD *)(a1 + 80) = 0x401C000000000000;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  outlined copy of Environment<Bool>.Content(KeyPath, 0);
  return outlined consume of Environment<Bool>.Content(KeyPath, 0);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BadgedViewStyleView()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t Badge.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[7];
  _BYTE v59[7];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  _BYTE v66[7];
  _BYTE v67[7];
  char v68;
  _BYTE v69[7];
  _BYTE v70[7];
  char v71;
  char v72;

  v56 = *(_QWORD *)(v1 + 24);
  v57 = *(_QWORD *)(v1 + 16);
  v55 = *(unsigned __int8 *)(v1 + 48);
  v45 = static VerticalAlignment.center.getter();
  closure #1 in Badge.body.getter((uint64_t)&v60);
  v47 = v61;
  v48 = v60;
  v46 = v62;
  v3 = v63;
  v54 = v64;
  v50 = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v53 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  v51 = v13;
  v52 = v12;
  v15 = v14;
  v17 = v16;
  v72 = 1;
  v71 = v3;
  v68 = 0;
  v65 = 0;
  v49 = static Font.body.getter();
  KeyPath = swift_getKeyPath();
  v43 = static Color.white.getter();
  v42 = swift_getKeyPath();
  static Color.blue.getter();
  v41 = Color.opacity(_:)();
  swift_release();
  v18 = static Edge.Set.all.getter();
  static Material.thin.getter();
  v19 = v60;
  v20 = v61;
  v21 = static Edge.Set.all.getter();
  v22 = static Alignment.center.getter();
  if (one-time initialization token for buttonShadowSpread != -1)
  {
    v33 = v22;
    v34 = v23;
    swift_once();
    v23 = v34;
    v22 = v33;
  }
  v24 = static ClarityUIMetrics.buttonShadowSpread;
  v25 = v72;
  v26 = v71;
  v27 = v68;
  v28 = v65;
  if (one-time initialization token for clarityUIButtonShadowColor != -1)
  {
    v38 = v22;
    v35 = v23;
    swift_once();
    v23 = v35;
    v22 = v38;
  }
  v29 = static Color.clarityUIButtonShadowColor;
  if (one-time initialization token for buttonShadowRadius != -1)
  {
    v36 = v23;
    v39 = v22;
    swift_once();
    v23 = v36;
    v22 = v39;
  }
  v30 = static ClarityUIMetrics.buttonShadowRadius;
  if (one-time initialization token for buttonShadowOffset != -1)
  {
    v37 = v23;
    v40 = v22;
    swift_once();
    v23 = v37;
    v22 = v40;
  }
  *(_QWORD *)a1 = v45;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v25;
  *(_DWORD *)(a1 + 17) = v60;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v60 + 3);
  *(_QWORD *)(a1 + 24) = v48;
  *(_QWORD *)(a1 + 32) = v47;
  *(_QWORD *)(a1 + 40) = v46;
  *(_BYTE *)(a1 + 48) = v26;
  *(_DWORD *)(a1 + 49) = *(_DWORD *)v70;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)&v70[3];
  *(_QWORD *)(a1 + 56) = v54;
  *(_BYTE *)(a1 + 64) = v50;
  v31 = *(_DWORD *)v69;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)&v69[3];
  *(_DWORD *)(a1 + 65) = v31;
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v11;
  *(_BYTE *)(a1 + 104) = v27;
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v67;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v67[3];
  *(_BYTE *)(a1 + 112) = v53;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)&v66[3];
  *(_DWORD *)(a1 + 113) = *(_DWORD *)v66;
  *(_QWORD *)(a1 + 120) = v52;
  *(_QWORD *)(a1 + 128) = v51;
  *(_QWORD *)(a1 + 136) = v15;
  *(_QWORD *)(a1 + 144) = v17;
  *(_BYTE *)(a1 + 152) = v28;
  *(_DWORD *)(a1 + 156) = *(_DWORD *)&v59[3];
  *(_DWORD *)(a1 + 153) = *(_DWORD *)v59;
  *(_QWORD *)(a1 + 160) = KeyPath;
  *(_QWORD *)(a1 + 168) = v49;
  *(_QWORD *)(a1 + 176) = v42;
  *(_QWORD *)(a1 + 184) = v43;
  *(_QWORD *)(a1 + 192) = v41;
  *(_BYTE *)(a1 + 200) = v18;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)&v58[3];
  *(_DWORD *)(a1 + 201) = *(_DWORD *)v58;
  *(_QWORD *)(a1 + 208) = v19;
  *(_DWORD *)(a1 + 216) = v20;
  *(_BYTE *)(a1 + 220) = v21;
  *(_BYTE *)(a1 + 221) = v55;
  *(_WORD *)(a1 + 222) = 256;
  *(_QWORD *)(a1 + 224) = (v24 ^ 0x8000000000000000) & 0xFFFFFFFFFFFFFFFELL | v55;
  *(_QWORD *)(a1 + 232) = v29;
  *(_QWORD *)(a1 + 240) = v30;
  *(_OWORD *)(a1 + 248) = static ClarityUIMetrics.buttonShadowOffset;
  *(_QWORD *)(a1 + 264) = v22;
  *(_QWORD *)(a1 + 272) = v23;
  *(_QWORD *)(a1 + 280) = v57;
  *(_QWORD *)(a1 + 288) = v56;
  return swift_retain();
}

uint64_t closure #1 in Badge.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0x6461622E6C6C6562;
  *(_QWORD *)(v2 + 24) = 0xEF6C6C69662E6567;
  *(_DWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 36) = 1;
  *(_OWORD *)(v2 + 40) = xmmword_187BF9F90;
  *(_OWORD *)(v2 + 56) = xmmword_187C00FF0;
  *(_OWORD *)(v2 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v2 + 88) = 0;
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v5 = Text.init(_:tableName:bundle:comment:)();
  v7 = v6;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v5;
  v9 = v8 & 1;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v8 & 1;
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain();
  outlined copy of Text.Storage(v5, v7, v9);
  swift_bridgeObjectRetain();
  outlined consume of Text.Storage(v5, v7, v9);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Badge()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>(0);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  double result;
  uint64_t v4;
  double v5;

  a1(&v4);
  _ViewInputs.size.getter();
  _ViewInputs.position.getter();
  _ViewInputs.transform.getter();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v4;
  result = v5;
  a2[1] = v5;
  return result;
}

uint64_t implicit closure #1 in static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(a1, a2, a3, a4, a5, a6, (uint64_t (*)(int *, uint64_t *))MEMORY[0x1E0CE1A18]);
}

void protocol witness for ViewModifier.body(content:) in conformance BadgeInfoWriterModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t MultimodalBadgeInfoProvider.updateValue()()
{
  uint64_t v0;
  CGFloat v1;
  double v2;
  CGFloat v3;
  _OWORD *Value;
  __int128 v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  CGFloat v9;
  CGFloat v10;
  _OWORD v11[2];
  char v12;
  uint64_t v13;
  CGRect v14;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = *(_OWORD *)AGGraphGetValue();
  v1 = MEMORY[0x18D755E9C]();
  v3 = v2;
  Value = (_OWORD *)AGGraphGetValue();
  v5 = Value[1];
  v11[0] = *Value;
  v11[1] = v5;
  v9 = MEMORY[0x18D75BE3C]();
  v10 = v6;
  lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace();
  AnyHashable.init<A>(_:)();
  v12 = 0;
  AGGraphGetValue();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v11);
  if ((*(_BYTE *)(v0 + 48) & 1) != 0
    || (v14.origin.x = v1,
        v14.origin.y = v3,
        v14.size.width = v9,
        v14.size.height = v10,
        result = CGRectEqualToRect(*(CGRect *)(v0 + 16), v14),
        (result & 1) == 0))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MultimodalBadgeInfo>, (uint64_t)&type metadata for MultimodalBadgeInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_187BF9830;
    *(CGFloat *)(v8 + 32) = v1;
    *(CGFloat *)(v8 + 40) = v3;
    *(CGFloat *)(v8 + 48) = v9;
    *(CGFloat *)(v8 + 56) = v10;
    *(_QWORD *)&v11[0] = v8;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    AGGraphSetOutputValue();
    result = swift_bridgeObjectRelease();
  }
  *(CGFloat *)(v0 + 16) = v1;
  *(CGFloat *)(v0 + 24) = v3;
  *(CGFloat *)(v0 + 32) = v9;
  *(CGFloat *)(v0 + 40) = v10;
  *(_BYTE *)(v0 + 48) = 0;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance MultimodalBadgeInfoKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static MultimodalBadgeInfoKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalBadgeInfoKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  a2(&v6);
  v4 = v6;
  v6 = v3;
  result = specialized Array.append<A>(contentsOf:)(v4);
  *a1 = v6;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MultimodalBadgeInfo(CGRect *a1, CGRect *a2)
{
  return CGRectEqualToRect(*a1, *a2);
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in MultimodalBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_186FF1F70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.areMultimodalBadgesEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_186FF1FAC()
{
  return EnvironmentValues.areMultimodalBadgesEnabled.setter();
}

uint64_t outlined copy of BadgeLabel?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined copy of BadgeLabel(result, a2, a3);
  return result;
}

uint64_t outlined copy of BadgeLabel(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for MultimodalBadgeInfoKey()
{
  return &type metadata for MultimodalBadgeInfoKey;
}

uint64_t destroy for BadgedViewStyleView(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >> 1 != 0xFFFFFFFF)
    outlined consume of BadgeLabel(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v2);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return swift_release();
}

uint64_t outlined consume of BadgeLabel(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for BadgedViewStyleView(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = a2[2];
  if (v4 >> 1 == 0xFFFFFFFF)
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[3];
    outlined copy of BadgeLabel(*a2, v7, v4);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v8;
  }
  v9 = a2[4];
  v10 = *((_BYTE *)a2 + 40);
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BadgedViewStyleView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v4 = a2[2];
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 16) >> 1 == 0xFFFFFFFFLL)
  {
    if (v5 == 0x1FFFFFFFELL)
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
    else
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = a2[3];
      outlined copy of BadgeLabel(*a2, v9, v4);
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v10;
    }
  }
  else if (v5 == 0x1FFFFFFFELL)
  {
    outlined destroy of BadgeLabel((uint64_t *)a1);
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    v11 = *a2;
    v12 = a2[1];
    v13 = a2[3];
    outlined copy of BadgeLabel(*a2, v12, v4);
    v14 = *(_QWORD *)a1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v13;
    outlined consume of BadgeLabel(v14, v15, v16);
  }
  v17 = a2[4];
  v18 = *((_BYTE *)a2 + 40);
  outlined copy of Environment<Bool>.Content(v17, v18);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v17;
  *(_BYTE *)(a1 + 40) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *outlined destroy of BadgeLabel(uint64_t *a1)
{
  destroy for BadgeLabel(a1);
  return a1;
}

uint64_t assignWithTake for BadgedViewStyleView(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5 >> 1 != 0xFFFFFFFF)
    {
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v7;
      outlined consume of BadgeLabel(v8, v9, v4);
      goto LABEL_6;
    }
    outlined destroy of BadgeLabel((uint64_t *)a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_6:
  v10 = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BadgedViewStyleView(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16) >> 1;
  v4 = -2 - v3;
  if (-2 - (int)v3 < 0)
    v4 = -1;
  if (v3 <= 0x80000000)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BadgedViewStyleView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 2 * ~a2;
      *(_QWORD *)(result + 24) = 0;
    }
  }
  return result;
}

void *type metadata accessor for BadgedViewStyleView()
{
  return &unk_1E1AAC278;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type BadgedViewStyleView and conformance BadgedViewStyleView();
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue, (uint64_t)&type metadata for AccessibilityBadgedViewProvidesOwnValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgedViewStyleView, ViewInputFlagModifier<AccessibilityBadgedViewProvidesOwnValue>>);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBadgedViewProvidesOwnValue, &type metadata for AccessibilityBadgedViewProvidesOwnValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBadgedViewProvidesOwnValue, &type metadata for AccessibilityBadgedViewProvidesOwnValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBadgedViewProvidesOwnValue, &type metadata for AccessibilityBadgedViewProvidesOwnValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBadgedViewProvidesOwnValue, &type metadata for AccessibilityBadgedViewProvidesOwnValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue;
  if (!lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityBadgedViewProvidesOwnValue, &type metadata for AccessibilityBadgedViewProvidesOwnValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BadgedViewStyleView and conformance BadgedViewStyleView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BadgedViewStyleView and conformance BadgedViewStyleView;
  if (!lazy protocol witness table cache variable for type BadgedViewStyleView and conformance BadgedViewStyleView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgedViewStyleView, &unk_1E1AAC278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgedViewStyleView and conformance BadgedViewStyleView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BadgedViewStyleView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static NeedsTopPaddingForGridBadgesModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, unint64_t *a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, unint64_t *)@<X2>, _QWORD *a4@<X8>)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  char v16;
  unint64_t v17;
  uint64_t result;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v25;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  _QWORD v40[2];
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v22 = *a1;
  v32 = *((_DWORD *)a2 + 8);
  v33 = *((_DWORD *)a2 + 7);
  v31 = *((_DWORD *)a2 + 9);
  v29 = a2[6];
  v30 = a2[5];
  v4 = *((_DWORD *)a2 + 15);
  v5 = *((_DWORD *)a2 + 17);
  v27 = *((_DWORD *)a2 + 16);
  v28 = *((_DWORD *)a2 + 14);
  v6 = *((_DWORD *)a2 + 19);
  v38 = *((_DWORD *)a2 + 20);
  v39 = *((_DWORD *)a2 + 18);
  v7 = *a2;
  v35 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  LODWORD(v45) = *((_DWORD *)a2 + 6);
  v36 = v45;
  v37 = v6;
  v10 = v4;
  v34 = v4;
  v11 = v6;
  swift_getKeyPath();
  HIDWORD(v23) = _ViewInputs.mapEnvironment<A>(_:)();
  v12 = swift_release();
  v41 = v7;
  v42 = v8;
  v44 = v9;
  HIDWORD(v45) = v33;
  v46 = v32;
  v47 = v31;
  v48 = v30;
  v49 = v29;
  v50 = v28;
  v51 = v10;
  v52 = v27;
  v53 = v5;
  v54 = v39;
  v55 = v11;
  v56 = v38;
  a3(v40, v12, &v41);
  v25 = v40[0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NeedsTopPaddingForGridBadgesModifier>, (uint64_t)&unk_1E1B064C0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v13 = v40[1];
  LODWORD(v41) = v22;
  LODWORD(v23) = _GraphValue.value.getter();
  v41 = v35;
  v42 = v8;
  v44 = v9;
  v45 = __PAIR64__(v33, v36);
  v46 = v32;
  v47 = v31;
  v48 = v30;
  v49 = v29;
  v50 = v28;
  v51 = v34;
  v52 = v27;
  v53 = v5;
  v54 = v39;
  v55 = v37;
  v56 = v38;
  v21 = _ViewInputs.position.getter();
  v41 = v35;
  v42 = v8;
  v44 = v9;
  v45 = __PAIR64__(v33, v36);
  v46 = v32;
  v47 = v31;
  v48 = v30;
  v49 = v29;
  v50 = v28;
  v51 = v34;
  v52 = v27;
  v53 = v5;
  v54 = v39;
  v55 = v37;
  v56 = v38;
  v20 = _ViewInputs.size.getter();
  v41 = v35;
  v42 = v8;
  v44 = v9;
  v45 = __PAIR64__(v33, v36);
  v46 = v32;
  v47 = v31;
  v48 = v30;
  v49 = v29;
  v50 = v28;
  v51 = v34;
  v52 = v27;
  v53 = v5;
  v54 = v39;
  v55 = v37;
  v56 = v38;
  v19 = _ViewInputs.transform.getter();
  v41 = v35;
  v42 = v8;
  v44 = v9;
  v45 = __PAIR64__(v33, v36);
  v46 = v32;
  v47 = v31;
  v48 = v30;
  v49 = v29;
  v50 = v28;
  v51 = v34;
  v52 = v27;
  v53 = v5;
  v54 = v39;
  v55 = v37;
  v56 = v38;
  v14 = _ViewInputs.viewPhase.getter();
  UpdateCycleDetector.init()();
  v15 = v42;
  v16 = v43;
  v17 = v41;
  v41 = v23;
  v42 = v21;
  v43 = v20;
  v44 = __PAIR64__(v14, v19);
  v45 = v17;
  v46 = v15;
  LOBYTE(v47) = v16;
  LODWORD(v48) = 0;
  BYTE4(v48) = 2;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  result = AGGraphSetFlags();
  *a4 = v25;
  a4[1] = v13;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance NeedsTopPaddingForGridBadgesModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t GridBadgeInfosActionBinding.updateValue()()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  char v11;
  uint64_t result;
  char v13;
  uint64_t Value;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v1 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 == *(_DWORD *)(v0 + 40))
  {
    v2 = *(unsigned __int8 *)(v0 + 44);
  }
  else
  {
    *(_DWORD *)(v0 + 40) = v1;
    *(_QWORD *)(v0 + 28) = 0xFFFFFFFFLL;
    *(_BYTE *)(v0 + 36) = 0;
    v2 = 2;
    *(_BYTE *)(v0 + 44) = 2;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v3 = *(_QWORD *)AGGraphGetValue();
  AGGraphGetValue();
  v4 = swift_bridgeObjectRetain();
  v5 = MEMORY[0x18D755E9C](v4);
  v7 = v6;
  AGGraphGetValue();
  v8 = MEMORY[0x18D75BE3C]();
  v10 = v9;
  AGGraphGetValue();
  swift_retain();
  v11 = GridBadgeInfosActionBinding.needsTopPaddingForBadge(gridBadgeInfos:position:size:transform:)(v3, v5, v7, v8, v10);
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v2 == 2 || (v11 & 1) != (v2 & 1))
  {
    result = UpdateCycleDetector.dispatch(label:isDebug:)();
    if ((result & 1) != 0)
    {
      v13 = v11 & 1;
      *(_BYTE *)(v0 + 44) = v11 & 1;
      AGGraphClearUpdate();
      Value = AGGraphGetValue();
      v15 = *(_QWORD *)Value;
      v16 = *(_QWORD *)(Value + 8);
      v17 = *(_BYTE *)(Value + 16);
      swift_retain();
      swift_retain();
      AGGraphSetUpdate();
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v15;
      *(_QWORD *)(v18 + 24) = v16;
      *(_BYTE *)(v18 + 32) = v17;
      *(_BYTE *)(v18 + 33) = v13;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t GridBadgeInfosActionBinding.needsTopPaddingForBadge(gridBadgeInfos:position:size:transform:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  CGFloat *v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  double MaxY;
  CGPoint origin;
  CGSize size;
  double v15;
  _BYTE v17[32];
  _BYTE v18[48];
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  *(double *)&v17[16] = a4;
  *(double *)&v17[24] = a5;
  *(double *)v17 = a2;
  *(double *)&v17[8] = a3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace();
    swift_bridgeObjectRetain();
    v7 = (CGFloat *)(a1 + 56);
    do
    {
      v9 = *(v7 - 1);
      v8 = *v7;
      v11 = *(v7 - 3);
      v10 = *(v7 - 2);
      v19 = *(CGRect *)v17;
      AnyHashable.init<A>(_:)();
      v18[40] = 0;
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)v18);
      v20.origin.x = v11;
      v20.origin.y = v10;
      v20.size.width = v9;
      v20.size.height = v8;
      MaxY = CGRectGetMaxY(v20);
      origin = v19.origin;
      size = v19.size;
      if (CGRectGetMinY(v19) < MaxY)
      {
        v21.origin.x = v11;
        v21.origin.y = v10;
        v21.size.width = v9;
        v21.size.height = v8;
        v15 = CGRectGetMaxY(v21);
        v22.origin = origin;
        v22.size = size;
        if (v15 <= CGRectGetMaxY(v22))
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      v7 += 4;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t implicit closure #1 in GridBadgeInfosActionBinding.updateValue()()
{
  return 0xD000000000000025;
}

uint64_t closure #2 in GridBadgeInfosActionBinding.updateValue()()
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TopPaddingForBadgeModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(a1, a2, a3, a4, a5, a6, (uint64_t (*)(int *, uint64_t *))MEMORY[0x1E0CE19F8]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgeInfoWriterModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(int *, uint64_t *))
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = *((_DWORD *)a2 + 16);
  v12 = a2[9];
  v13 = *((_BYTE *)a2 + 80);
  v24 = *a1;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = *(_OWORD *)(a2 + 3);
  v19 = v10;
  v20 = *((_OWORD *)a2 + 3);
  v21 = v11;
  v22 = v12;
  v23 = v13;
  return a7(&v24, &v15);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TopPaddingForBadgeModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = EdgeInsets.init(_all:)();
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t outlined consume of BadgeLabel?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined consume of BadgeLabel(result, a2, a3);
  return result;
}

double _s7SwiftUI15ModifiedContentVyAA6HStackVyAA9TupleViewVyAA6SpacerV_AA6VStackVyAGyAA5Badge33_582D9E508E536DEAC67BC3C87B3CFE52LLV_AItGGtGGAA31AccessibilityAttachmentModifierVGSgWOi0_(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t outlined init with take of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?);
  }
}

void type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>)
  {
    type metadata accessor for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>);
  }
}

void type metadata accessor for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>)
  {
    type metadata accessor for (Spacer, VStack<TupleView<(Badge, Spacer)>>)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>);
  }
}

void type metadata accessor for (Spacer, VStack<TupleView<(Badge, Spacer)>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (Spacer, VStack<TupleView<(Badge, Spacer)>>))
  {
    type metadata accessor for VStack<TupleView<(Badge, Spacer)>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacer, VStack<TupleView<(Badge, Spacer)>>));
  }
}

void type metadata accessor for VStack<TupleView<(Badge, Spacer)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(Badge, Spacer)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Badge, Spacer)>, &lazy cache variable for type metadata for (Badge, Spacer));
    lazy protocol witness table accessor for type TupleView<(Badge, Spacer)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(Badge, Spacer)>>);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(Badge, Spacer)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(Badge, Spacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(Badge, Spacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Badge, Spacer)>, &lazy cache variable for type metadata for (Badge, Spacer));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(Badge, Spacer)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t outlined destroy of AccessibilityValueStorage?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *outlined release of ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>(uint64_t *a1)
{
  outlined consume of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined consume of ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t result;

  if (a18)
  {
    outlined consume of Environment<Bool>.Content(a9, a10 & 1);
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>)
  {
    type metadata accessor for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>);
  }
}

void type metadata accessor for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?();
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?();
    v0 = type metadata accessor for _OverlayModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListContext>, MEMORY[0x1E0CE5130], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListContext>, MEMORY[0x1E0CE5130], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for NeedsTopPaddingForGridBadgesModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>();
    v2 = v1;
    v3[0] = &protocol witness table for BadgeViewStyleConfiguration.Content;
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?> and conformance _OverlayModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>, MEMORY[0x1E0CE3620]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier;
  if (!lazy protocol witness table cache variable for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TopPaddingForBadgeModifier, &unk_1E1AF0B48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TopPaddingForBadgeModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[16])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TopPaddingForBadgeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for TopPaddingForBadgeModifier()
{
  return &unk_1E1AF0B48;
}

void *type metadata accessor for NeedsTopPaddingForGridBadgesModifier()
{
  return &unk_1E1B064C0;
}

uint64_t initializeWithCopy for Badge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for Badge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Badge(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Badge(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Badge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for Badge()
{
  return &unk_1E1B0ABD0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgeViewStyleConfiguration.Content, _OverlayModifier<ModifiedContent<HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>, AccessibilityAttachmentModifier>?>>, NeedsTopPaddingForGridBadgesModifier>, StaticIf<StyleContextAcceptsPredicate<MultimodalListContext>, TopPaddingForBadgeModifier, EmptyModifier>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Badge()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for ViewModifier in NeedsTopPaddingForGridBadgesModifier()
{
  return &protocol witness table for NeedsTopPaddingForGridBadgesModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TopPaddingForBadgeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding;
  if (!lazy protocol witness table cache variable for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GridBadgeInfosActionBinding, &unk_1E1AF3020);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridBadgeInfosActionBinding and conformance GridBadgeInfosActionBinding);
  }
  return result;
}

uint64_t sub_186FF3BEC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in GridBadgeInfosActionBinding.updateValue()()
{
  return closure #2 in GridBadgeInfosActionBinding.updateValue()();
}

unint64_t lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace;
  if (!lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStyleGridContentCoordinateSpace, &type metadata for MultimodalListStyleGridContentCoordinateSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace;
  if (!lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStyleGridContentCoordinateSpace, &type metadata for MultimodalListStyleGridContentCoordinateSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>();
    type metadata accessor for _BackgroundModifier<_ShadowView<Capsule._Inset>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E0CE7600], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>();
    type metadata accessor for _BackgroundStyleModifier<Color>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _BackgroundStyleModifier<Color>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(Image, Text)>>);
}

void type metadata accessor for HStack<TupleView<(Image, Text)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(Image, Text)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Image, Text)>, &lazy cache variable for type metadata for (Image, Text));
    lazy protocol witness table accessor for type TupleView<(Image, Text)> and conformance TupleView<A>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(Image, Text)>>);
  }
}

void type metadata accessor for TupleView<(Badge, Spacer)>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for (Badge, Spacer)(255, a3);
    v4 = type metadata accessor for TupleView();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(Image, Text)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(Image, Text)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(Image, Text)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(Image, Text)>, &lazy cache variable for type metadata for (Image, Text));
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(Image, Text)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for _BackgroundStyleModifier<Color>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _BackgroundStyleModifier();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t lazy protocol witness table accessor for type Capsule and conformance Capsule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75F0], MEMORY[0x1E0CE7600]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule and conformance Capsule;
  if (!lazy protocol witness table cache variable for type Capsule and conformance Capsule)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75E8], MEMORY[0x1E0CE7600]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule and conformance Capsule);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<_ShadowView<Capsule._Inset>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<_ShadowView<Capsule._Inset>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ShadowView<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, MEMORY[0x1E0CE75E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShadowView);
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<_ShadowView<Capsule._Inset>>);
  }
}

unint64_t lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset;
  if (!lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE75D0], MEMORY[0x1E0CE75E0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Capsule._Inset and conformance Capsule._Inset);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type _BackgroundModifier<_ShadowView<Capsule._Inset>> and conformance _BackgroundModifier<A>);
    v3[1] = MEMORY[0x1E0CE2310];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ClipEffect<Capsule> and conformance _ClipEffect<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>, &lazy cache variable for type metadata for _BackgroundStyleModifier<Material>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(Image, Text)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(Image, Text)>>, MEMORY[0x1E0CE73D0]);
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<Material> and conformance _BackgroundStyleModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _BackgroundStyleModifier<Color>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D28], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<Capsule> and conformance _ClipEffect<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ClipEffect<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E0CE7600], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE1440]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1450], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<Capsule> and conformance _ClipEffect<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<_ShadowView<Capsule._Inset>> and conformance _BackgroundModifier<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShadowView<Capsule._Inset>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<_ShadowView<Capsule._Inset>>, MEMORY[0x1E0CE4B88]);
}

__n128 __swift_memcpy45_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for GridBadgeInfosActionBinding(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 45))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 36);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GridBadgeInfosActionBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 45) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 45) = 0;
    if (a2)
      *(_BYTE *)(result + 36) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for GridBadgeInfosActionBinding()
{
  return &unk_1E1AF3020;
}

void *type metadata accessor for BadgeInfoWriterModifier()
{
  return &unk_1E1AE0728;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TopPaddingForBadgeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier, (uint64_t)&unk_1E1AF0B48, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TopPaddingForBadgeModifier>, _PaddingLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TopPaddingForBadgeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type TopPaddingForBadgeModifier and conformance TopPaddingForBadgeModifier, (uint64_t)&unk_1E1AF0B48, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TopPaddingForBadgeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for BadgeInfoWriterModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(Image, Text)>>, _PaddingLayout>, _PaddingLayout>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _BackgroundStyleModifier<Color>>, _BackgroundStyleModifier<Material>>, _ClipEffect<Capsule>>, _BackgroundModifier<_ShadowView<Capsule._Inset>>>, _OffsetEffect>, BadgeInfoWriterModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in BadgeInfoWriterModifier()
{
  return &protocol witness table for BadgeInfoWriterModifier;
}

uint64_t partial apply for implicit closure #1 in static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static BadgeInfoWriterModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider;
  if (!lazy protocol witness table cache variable for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalBadgeInfoProvider, &unk_1E1AF3480);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalBadgeInfoProvider and conformance MultimodalBadgeInfoProvider);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MultimodalBadgeInfoProvider(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MultimodalBadgeInfoProvider(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 49) = v3;
  return result;
}

void *type metadata accessor for MultimodalBadgeInfoProvider()
{
  return &unk_1E1AF3480;
}

uint64_t View.dialogColorScheme(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.dialogColorScheme.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.dialogColorScheme : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_186FF4D4C()
{
  return EnvironmentValues.dialogColorScheme.setter();
}

uint64_t EnvironmentValues.dialogColorScheme.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance DialogColorSchemeKey(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DialogColorSchemeKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL8 result;

  v2 = *a1;
  v3 = *a2;
  result = v3 == 2 && v2 == 2;
  if (v2 != 2 && v3 != 2)
    return ((v3 ^ v2) & 1) == 0;
  return result;
}

uint64_t View.dialogIcon(_:)()
{
  return View.dialogIcon(_:)();
}

{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.dialogIcon.getter()
{
  return EnvironmentValues.dialogIcon.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_186FF4EE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.dialogIcon.getter();
  *a1 = result;
  return result;
}

uint64_t sub_186FF4F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

void Scene.dialogIcon(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DialogIconKey(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  BOOL v4;
  char v5;

  v2 = *a1;
  result = (*a1 | *a2) == 0;
  if (v2)
    v4 = *a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    swift_retain();
    v5 = static Image.== infix(_:_:)();
    swift_release();
    return v5 & 1;
  }
  return result;
}

uint64_t View.dialogTint(_:)()
{
  return View.dialogIcon(_:)();
}

uint64_t EnvironmentValues.dialogTintColor.getter()
{
  return EnvironmentValues.dialogIcon.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.dialogIcon.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;

  if (*(_QWORD *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v8;
}

uint64_t sub_186FF5154@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.dialogTintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_186FF518C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t keypath_set_3Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_retain();
  a5(v6);
  return swift_release();
}

uint64_t sub_186FF51D4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme?>, &lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E0CE0F28], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_186FF51F8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image?>, &lazy cache variable for type metadata for Image?, MEMORY[0x1E0CE7298], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v8 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, a2, a3);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = v8;
  v11[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>(a5, a2, a3);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a3);
    v4 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_186FF52FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_186FF5304(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA11ColorSchemeOSgGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ColorScheme?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v5);
    atomic_store(result, a1);
  }
  return result;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DialogTintColorKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  result = (*a1 | *a2) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (v2 == v3)
    {
      return 1;
    }
    else
    {
      swift_retain();
      v6 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      return v6 & 1;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, a2);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v4);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for EnvironmentPropertyKey();
    if (!v4)
      atomic_store(v3, a2);
  }
}

ValueMetadata *type metadata accessor for DialogColorSchemeKey()
{
  return &type metadata for DialogColorSchemeKey;
}

ValueMetadata *type metadata accessor for DialogIconKey()
{
  return &type metadata for DialogIconKey;
}

ValueMetadata *type metadata accessor for DialogTintColorKey()
{
  return &type metadata for DialogTintColorKey;
}

uint64_t static Alert.Button.cancel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v6 = static Text.System.cancel.getter();
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 24) = v8 & 1;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = a2;
  return outlined copy of AppIntentExecutor?(a1);
}

double Alert.init(title:message:dismissButton:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10)
{
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double result;
  __int128 v34;
  int v35;
  uint64_t (*v36)(_QWORD);
  uint64_t v37;
  uint64_t v38;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[5];

  v17 = *((_QWORD *)a10 + 4);
  if (v17)
  {
    v36 = (uint64_t (*)(_QWORD))*((_QWORD *)a10 + 5);
    v18 = *((_QWORD *)a10 + 1);
    v37 = *((_QWORD *)a10 + 2);
    v38 = *((_QWORD *)a10 + 6);
    v19 = *a10;
    v35 = *((_DWORD *)a10 + 6) & 1;
    swift_bridgeObjectRetain();
    v20 = a6;
    v21 = a7;
    v22 = a7;
    v23 = a8;
    outlined copy of Text?(a5, v20, v22, a8);
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    v24 = v17;
  }
  else
  {
    swift_bridgeObjectRetain();
    v25 = a6;
    v21 = a7;
    v26 = a7;
    v23 = a8;
    outlined copy of Text?(a5, v25, v26, a8);
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    v18 = static Text.System.ok.getter();
    v37 = v27;
    v38 = 0;
    v19 = 0;
    LOBYTE(v35) = v28 & 1;
    v36 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  *(_QWORD *)&v42 = a1;
  *((_QWORD *)&v42 + 1) = a2;
  LOBYTE(v43) = a3 & 1;
  *((_QWORD *)&v43 + 1) = a4;
  *(_QWORD *)&v44 = a5;
  *((_QWORD *)&v44 + 1) = a6;
  *(_QWORD *)&v45 = v21;
  *((_QWORD *)&v45 + 1) = v23;
  LOBYTE(v46) = v19;
  *((_QWORD *)&v46 + 1) = v18;
  *(_QWORD *)&v47 = v37;
  BYTE8(v47) = v35;
  *(_QWORD *)&v48 = v24;
  *((_QWORD *)&v48 + 1) = v36;
  *(_QWORD *)&v49[0] = v38;
  memset((char *)v49 + 8, 0, 57);
  outlined copy of Text.Storage(v18, v37, v35);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?((uint64_t)v36);
  outlined retain of Alert((uint64_t)&v42);
  outlined consume of Text?(a5, a6, v21, v23);
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v18, v37, v35);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v36);
  outlined release of Alert((uint64_t)&v42);
  v29 = v49[2];
  *(_OWORD *)(a9 + 128) = v49[1];
  *(_OWORD *)(a9 + 144) = v29;
  *(_OWORD *)(a9 + 160) = v49[3];
  *(_BYTE *)(a9 + 176) = v49[4];
  v30 = v47;
  *(_OWORD *)(a9 + 64) = v46;
  *(_OWORD *)(a9 + 80) = v30;
  v31 = v49[0];
  *(_OWORD *)(a9 + 96) = v48;
  *(_OWORD *)(a9 + 112) = v31;
  v32 = v43;
  *(_OWORD *)a9 = v42;
  *(_OWORD *)(a9 + 16) = v32;
  result = *(double *)&v44;
  v34 = v45;
  *(_OWORD *)(a9 + 32) = v44;
  *(_OWORD *)(a9 + 48) = v34;
  return result;
}

uint64_t static Alert.Button.default(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v8;

  *(_BYTE *)a7 = 0;
  *(_QWORD *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 16) = a2;
  v8 = a3 & 1;
  *(_BYTE *)(a7 + 24) = v8;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();
  return outlined copy of AppIntentExecutor?(a5);
}

__n128 Alert.init(title:message:primaryButton:secondaryButton:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, unsigned __int8 *a11)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 result;
  char v17;

  v11 = *a10;
  v12 = *((_QWORD *)a10 + 4);
  v13 = *a11;
  v14 = a11[24];
  v15 = *((_QWORD *)a11 + 4);
  v17 = a10[24];
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3 & 1;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = v11;
  *(_OWORD *)(a9 + 72) = *(_OWORD *)(a10 + 8);
  *(_BYTE *)(a9 + 88) = v17;
  *(_QWORD *)(a9 + 96) = v12;
  *(_OWORD *)(a9 + 104) = *(_OWORD *)(a10 + 40);
  *(_QWORD *)(a9 + 120) = v13;
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(a11 + 8);
  *(_QWORD *)(a9 + 144) = v14;
  *(_QWORD *)(a9 + 152) = v15;
  result = *(__n128 *)(a11 + 40);
  *(__n128 *)(a9 + 160) = result;
  *(_BYTE *)(a9 + 176) = 0;
  return result;
}

void static Alert.sideBySideButtons(title:message:primaryButton:secondaryButton:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t outlined retain of Alert(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_BYTE *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 160);
  v12 = *(_QWORD *)(a1 + 152);
  outlined copy of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  outlined copy of Text?(v2, v3, v4, v5);
  outlined copy of Text.Storage(v6, v7, v8);
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v10);
  outlined copy of Alert.Button?(v16, v15, v14, v13, v12, v11);
  return a1;
}

uint64_t outlined copy of Alert.Button?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a5)
  {
    outlined copy of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRetain();
    return outlined copy of AppIntentExecutor?(a6);
  }
  return result;
}

uint64_t outlined release of Alert(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_BYTE *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 160);
  v12 = *(_QWORD *)(a1 + 152);
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  outlined consume of Text?(v2, v3, v4, v5);
  outlined consume of Text.Storage(v6, v7, v8);
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  outlined consume of Alert.Button?(v16, v15, v14, v13, v12, v11);
  return a1;
}

uint64_t outlined consume of Alert.Button?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a5)
  {
    outlined consume of Text.Storage(a2, a3, a4 & 1);
    swift_bridgeObjectRelease();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a6);
  }
  return result;
}

uint64_t static Alert.Button.cancel(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v8;

  *(_BYTE *)a7 = 1;
  *(_QWORD *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 16) = a2;
  v8 = a3 & 1;
  *(_BYTE *)(a7 + 24) = v8;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();
  return outlined copy of AppIntentExecutor?(a5);
}

uint64_t static Alert.Button.destructive(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v8;

  *(_BYTE *)a7 = 2;
  *(_QWORD *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 16) = a2;
  v8 = a3 & 1;
  *(_BYTE *)(a7 + 24) = v8;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  outlined copy of Text.Storage(a1, a2, v8);
  swift_bridgeObjectRetain();
  return outlined copy of AppIntentExecutor?(a5);
}

uint64_t protocol witness for AlertActionConvertible.style.getter in conformance Alert.Button()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for AlertActionConvertible.label.getter in conformance Alert.Button()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of Text.Storage(v1, *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for AlertActionConvertible.action.getter in conformance Alert.Button()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t Alert.Presentation.buttons.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Alert.Button>, (uint64_t)&type metadata for Alert.Button, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  if (v4)
  {
    *(_OWORD *)(v7 + 16) = xmmword_187BF9820;
    v8 = *(_BYTE *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 72);
    v10 = *(_QWORD *)(v0 + 80);
    v11 = *(_BYTE *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    *(_BYTE *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v9;
    *(_QWORD *)(v7 + 48) = v10;
    *(_BYTE *)(v7 + 56) = v11;
    *(_QWORD *)(v7 + 64) = v13;
    *(_QWORD *)(v7 + 72) = v12;
    *(_QWORD *)(v7 + 80) = v14;
    *(_BYTE *)(v7 + 88) = v24;
    *(_QWORD *)(v7 + 96) = v1;
    *(_QWORD *)(v7 + 104) = v2;
    *(_BYTE *)(v7 + 112) = v3 & 1;
    *(_QWORD *)(v7 + 120) = v4;
    *(_QWORD *)(v7 + 128) = v5;
    *(_QWORD *)(v7 + 136) = v6;
    outlined copy of Text.Storage(v9, v10, v11);
    swift_bridgeObjectRetain();
    v15 = v12;
  }
  else
  {
    *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
    v16 = *(_BYTE *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v19 = *(_BYTE *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 112);
    *(_BYTE *)(v7 + 32) = v16;
    *(_QWORD *)(v7 + 40) = v17;
    *(_QWORD *)(v7 + 48) = v18;
    *(_BYTE *)(v7 + 56) = v19;
    *(_QWORD *)(v7 + 64) = v20;
    *(_QWORD *)(v7 + 72) = v21;
    *(_QWORD *)(v7 + 80) = v22;
    outlined copy of Text.Storage(v17, v18, v19);
    swift_bridgeObjectRetain();
    v15 = v21;
  }
  outlined copy of AppIntentExecutor?(v15);
  outlined copy of Alert.Button?(v24, v1, v2, v3, v4, v5);
  return v7;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance Alert.Presentation.Key(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  _QWORD v6[35];
  _QWORD __dst[35];

  v4 = outlined init with take of Image.Resolved?(a1, (uint64_t)v6, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
  if (v6[3])
  {
    memcpy(__dst, v6, sizeof(__dst));
  }
  else
  {
    a2(__dst, v4);
    outlined destroy of AccessibilityTableContext?((uint64_t)v6, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
  }
  return outlined init with take of Image.Resolved?((uint64_t)__dst, a1, &lazy cache variable for type metadata for Alert.Presentation?, (uint64_t)&type metadata for Alert.Presentation);
}

uint64_t protocol witness for AlertControllerConvertible.onDismiss.getter in conformance Alert.Presentation()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t protocol witness for AlertControllerConvertible.itemID.getter in conformance Alert.Presentation@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyHashable?(v1 + 208, a1);
}

double protocol witness for AlertControllerConvertible.sourceRect.getter in conformance Alert.Presentation()
{
  uint64_t v0;

  return *(double *)(v0 + 248);
}

uint64_t View.alert<A>(item:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[6];
  _QWORD v52[9];
  _BYTE v53[40];
  _BYTE v54[192];
  _BYTE v55[184];
  _BYTE v56[184];
  _BYTE v57[192];

  v48 = a8;
  v44 = a6;
  v45 = a7;
  v42 = a5;
  v43 = a4;
  v46 = a2;
  v47 = a3;
  v50 = a1;
  v49 = type metadata accessor for Optional();
  v12 = type metadata accessor for Binding();
  v13 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  MEMORY[0x1E0C80A78](v12, v14);
  v41 = (char *)&v38 - v15;
  v16 = *(_QWORD *)(v49 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v38 - v20;
  MEMORY[0x18D75B9C8](v19);
  v52[2] = a4;
  v52[3] = a5;
  v52[4] = a6;
  v52[5] = a7;
  v52[6] = v46;
  v52[7] = v47;
  v22 = v49;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _IncrementalLayoutViewCache.withMutableState<A, B>(type:_:), (uint64_t)v52, MEMORY[0x1E0DEDCE8], (uint64_t)&type metadata for Alert, v23, (uint64_t)v55);
  v46 = *(void (**)(char *, uint64_t))(v16 + 8);
  v47 = 0;
  v46(v21, v22);
  outlined init with take of Image.Resolved?((uint64_t)v55, (uint64_t)v56, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  outlined init with take of Image.Resolved?((uint64_t)v56, (uint64_t)v54, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  v24 = v13;
  v39 = v13;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v26 = v40;
  v27 = v41;
  v25(v41, v50, v40);
  v28 = (*(unsigned __int8 *)(v24 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v29 = (char *)swift_allocObject();
  v30 = v42;
  v31 = v43;
  *((_QWORD *)v29 + 2) = v43;
  *((_QWORD *)v29 + 3) = v30;
  v33 = v44;
  v32 = v45;
  *((_QWORD *)v29 + 4) = v44;
  *((_QWORD *)v29 + 5) = v32;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v29[v28], v27, v26);
  MEMORY[0x18D75B9C8](v26);
  v51[2] = v31;
  v51[3] = v30;
  v51[4] = v33;
  v51[5] = v32;
  v34 = MEMORY[0x1E0DEC198];
  v35 = v49;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in View.actionSheet<A>(item:content:), (uint64_t)v51, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEC198], v36, (uint64_t)v53);
  v46(v21, v35);
  View.presentationCommon(_:onDismiss:id:)((uint64_t)v54, (uint64_t)partial apply for closure #2 in View.actionSheet<A>(item:content:), (uint64_t)v29, (uint64_t)v53, v31, v33);
  swift_release();
  outlined destroy of AccessibilityTableContext?((uint64_t)v53, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v34);
  outlined init with take of Image.Resolved?((uint64_t)v54, (uint64_t)v57, (unint64_t *)&lazy cache variable for type metadata for Alert?, (uint64_t)&type metadata for Alert);
  return outlined release of Alert?((uint64_t)v57, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of Alert?);
}

uint64_t sub_186FF6114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Optional();
  v2 = type metadata accessor for Binding();
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  swift_release();
  swift_release();
  v4 = v0 + ((v3 + 48) & ~v3) + *(int *)(v2 + 32);
  v5 = *(_QWORD *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v1);
  return swift_deallocObject();
}

double _s7SwiftUI5AlertVSgWOi0_(uint64_t a1)
{
  double result;

  *(_BYTE *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_186FF61F0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t destroy for Alert(uint64_t a1)
{
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104))
    result = swift_release();
  if (*(_QWORD *)(a1 + 152))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_BYTE *)(a1 + 144));
    result = swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 160))
      return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_BYTE *)(a2 + 88);
  outlined copy of Text.Storage(v12, v13, v14);
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 88) = v14;
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = v16;
    swift_retain();
    v17 = *(_QWORD *)(a2 + 152);
    if (v17)
      goto LABEL_6;
LABEL_9:
    v23 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v23;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    goto LABEL_11;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 152);
  if (!v17)
    goto LABEL_9;
LABEL_6:
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_BYTE *)(a2 + 144);
  outlined copy of Text.Storage(v18, v19, v20);
  *(_QWORD *)(a1 + 128) = v18;
  *(_QWORD *)(a1 + 136) = v19;
  *(_BYTE *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 152) = v17;
  v21 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  if (v21)
  {
    v22 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v21;
    *(_QWORD *)(a1 + 168) = v22;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
LABEL_11:
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

uint64_t assignWithCopy for Alert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (_OWORD *)(a1 + 32);
  v11 = (_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      v15 = *(_BYTE *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      *(_BYTE *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      v22 = *(_OWORD *)(a2 + 48);
      *v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = *(_QWORD *)(a2 + 40);
    v21 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    *(_BYTE *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    *v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_BYTE *)(a2 + 88);
  outlined copy of Text.Storage(v24, v25, v26);
  v27 = *(_QWORD *)(a1 + 72);
  v28 = *(_QWORD *)(a1 + 80);
  v29 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_BYTE *)(a1 + 88) = v26;
  outlined consume of Text.Storage(v27, v28, v29);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v30)
    {
      v31 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v30;
      *(_QWORD *)(a1 + 112) = v31;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v30)
  {
    v32 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v30;
    *(_QWORD *)(a1 + 112) = v32;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_15:
  v33 = (_OWORD *)(a1 + 120);
  v34 = (__int128 *)(a2 + 120);
  v35 = *(_QWORD *)(a2 + 152);
  if (!*(_QWORD *)(a1 + 152))
  {
    if (!v35)
    {
      v52 = *v34;
      v53 = *(_OWORD *)(a2 + 136);
      v54 = *(_OWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v53;
      *(_OWORD *)(a1 + 152) = v54;
LABEL_30:
      *v33 = v52;
      goto LABEL_32;
    }
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v44 = *(_QWORD *)(a2 + 128);
    v45 = *(_QWORD *)(a2 + 136);
    v46 = *(_BYTE *)(a2 + 144);
    outlined copy of Text.Storage(v44, v45, v46);
    *(_QWORD *)(a1 + 128) = v44;
    *(_QWORD *)(a1 + 136) = v45;
    *(_BYTE *)(a1 + 144) = v46;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v47 = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    if (!v47)
    {
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      goto LABEL_32;
    }
    v48 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v47;
    goto LABEL_26;
  }
  if (!v35)
  {
    outlined destroy of Alert.Button(a1 + 120);
    v50 = *(_OWORD *)(a2 + 136);
    v49 = *(_OWORD *)(a2 + 152);
    v51 = *v34;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v50;
    *(_OWORD *)(a1 + 152) = v49;
    *v33 = v51;
    goto LABEL_32;
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v36 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  v38 = *(_BYTE *)(a2 + 144);
  outlined copy of Text.Storage(v36, v37, v38);
  v39 = *(_QWORD *)(a1 + 128);
  v40 = *(_QWORD *)(a1 + 136);
  v41 = *(_BYTE *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v36;
  *(_QWORD *)(a1 + 136) = v37;
  *(_BYTE *)(a1 + 144) = v38;
  outlined consume of Text.Storage(v39, v40, v41);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = (_OWORD *)(a1 + 160);
  v42 = *(_QWORD *)(a2 + 160);
  if (!*(_QWORD *)(a1 + 160))
  {
    if (!v42)
    {
LABEL_29:
      v52 = *(_OWORD *)(a2 + 160);
      goto LABEL_30;
    }
    v48 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v42;
LABEL_26:
    *(_QWORD *)(a1 + 168) = v48;
    swift_retain();
    goto LABEL_32;
  }
  if (!v42)
  {
    swift_release();
    goto LABEL_29;
  }
  v43 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v42;
  *(_QWORD *)(a1 + 168) = v43;
  swift_retain();
  swift_release();
LABEL_32:
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

uint64_t outlined destroy of Alert.Button(uint64_t a1)
{
  destroy for Alert.Button(a1);
  return a1;
}

__n128 __swift_memcpy177_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for Alert(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v30;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    v8 = *(_QWORD *)(a2 + 56);
    if (v8)
    {
      v9 = *(_BYTE *)(a2 + 48);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_BYTE *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 48) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
LABEL_6:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v14 = *(_BYTE *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v18)
    {
      v19 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v18;
      *(_QWORD *)(a1 + 112) = v19;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v18)
  {
    v20 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v20;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_13:
  if (!*(_QWORD *)(a1 + 152))
  {
LABEL_19:
    v28 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v28;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    goto LABEL_20;
  }
  v21 = *(_QWORD *)(a2 + 152);
  if (!v21)
  {
    outlined destroy of Alert.Button(a1 + 120);
    goto LABEL_19;
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v22 = *(_BYTE *)(a2 + 144);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = *(_QWORD *)(a1 + 136);
  v25 = *(_BYTE *)(a1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = v22;
  outlined consume of Text.Storage(v23, v24, v25);
  *(_QWORD *)(a1 + 152) = v21;
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(a2 + 160);
  if (!*(_QWORD *)(a1 + 160))
  {
    if (v26)
    {
      v30 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v30;
      goto LABEL_20;
    }
LABEL_24:
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    goto LABEL_20;
  }
  if (!v26)
  {
    swift_release();
    goto LABEL_24;
  }
  v27 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v26;
  *(_QWORD *)(a1 + 168) = v27;
  swift_release();
LABEL_20:
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for Alert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 177))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Alert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 177) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for Alert.Button(uint64_t a1)
{
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for Alert.Button(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of Text.Storage(v4, v5, v6);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

uint64_t assignWithCopy for Alert.Button(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  outlined copy of Text.Storage(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v10)
    {
      v12 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v12;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Alert.Button(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v8)
    {
      v10 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v10;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Alert.Button(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Alert.Button(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_186FF6D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AlertTransformModifier<Alert.Presentation.Key>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for AlertTransformModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_186FF6DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AlertTransformModifier<Alert.Presentation.Key>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for AlertTransformModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t destroy for Alert.Presentation(uint64_t a1)
{
  uint64_t result;

  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
    swift_bridgeObjectRelease();
  }
  outlined consume of Text.Storage(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88));
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 104))
    result = swift_release();
  if (*(_QWORD *)(a1 + 152))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_BYTE *)(a1 + 144));
    result = swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 160))
      result = swift_release();
  }
  if (*(_QWORD *)(a1 + 184))
    result = swift_release();
  if (*(_QWORD *)(a1 + 232))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 208);
  return result;
}

uint64_t initializeWithCopy for Alert.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v8, v9, v10);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v9;
    *(_BYTE *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_BYTE *)(a2 + 88);
  outlined copy of Text.Storage(v12, v13, v14);
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_BYTE *)(a1 + 88) = v14;
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = v16;
    swift_retain();
    v17 = *(_QWORD *)(a2 + 152);
    if (v17)
      goto LABEL_6;
  }
  else
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    v17 = *(_QWORD *)(a2 + 152);
    if (v17)
    {
LABEL_6:
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      v18 = *(_QWORD *)(a2 + 128);
      v19 = *(_QWORD *)(a2 + 136);
      v20 = *(_BYTE *)(a2 + 144);
      outlined copy of Text.Storage(v18, v19, v20);
      *(_QWORD *)(a1 + 128) = v18;
      *(_QWORD *)(a1 + 136) = v19;
      *(_BYTE *)(a1 + 144) = v20;
      *(_QWORD *)(a1 + 152) = v17;
      v21 = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      if (v21)
      {
        v22 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 160) = v21;
        *(_QWORD *)(a1 + 168) = v22;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      }
      goto LABEL_11;
    }
  }
  v23 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v23;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
LABEL_11:
  v24 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  if (v24)
  {
    v25 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v24;
    *(_QWORD *)(a1 + 192) = v25;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v26 = (_OWORD *)(a1 + 208);
  v27 = (_OWORD *)(a2 + 208);
  v28 = *(_QWORD *)(a2 + 232);
  if (v28)
  {
    v29 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = v28;
    *(_QWORD *)(a1 + 240) = v29;
    (**(void (***)(_OWORD *, _OWORD *))(v28 - 8))(v26, v27);
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 224);
    *v26 = *v27;
    *(_OWORD *)(a1 + 224) = v30;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  return a1;
}

uint64_t assignWithCopy for Alert.Presentation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = (_OWORD *)(a1 + 32);
  v11 = (_OWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      v15 = *(_BYTE *)(a2 + 48);
      outlined copy of Text.Storage(v13, v14, v15);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_BYTE *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      *(_BYTE *)(a1 + 48) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 32);
      v22 = *(_OWORD *)(a2 + 48);
      *v10 = *v11;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v12)
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = *(_QWORD *)(a2 + 40);
    v21 = *(_BYTE *)(a2 + 48);
    outlined copy of Text.Storage(v19, v20, v21);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    *(_BYTE *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *(_OWORD *)(a2 + 48);
    *v10 = *v11;
    *(_OWORD *)(a1 + 48) = v23;
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_BYTE *)(a2 + 88);
  outlined copy of Text.Storage(v24, v25, v26);
  v27 = *(_QWORD *)(a1 + 72);
  v28 = *(_QWORD *)(a1 + 80);
  v29 = *(_BYTE *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_BYTE *)(a1 + 88) = v26;
  outlined consume of Text.Storage(v27, v28, v29);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v30)
    {
      v31 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v30;
      *(_QWORD *)(a1 + 112) = v31;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v30)
  {
    v32 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v30;
    *(_QWORD *)(a1 + 112) = v32;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_15:
  v33 = (_OWORD *)(a1 + 120);
  v34 = (__int128 *)(a2 + 120);
  v35 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (!v35)
    {
      outlined destroy of Alert.Button(a1 + 120);
      v50 = *(_OWORD *)(a2 + 136);
      v49 = *(_OWORD *)(a2 + 152);
      v51 = *v34;
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v50;
      *(_OWORD *)(a1 + 152) = v49;
      *v33 = v51;
      goto LABEL_32;
    }
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v36 = *(_QWORD *)(a2 + 128);
    v37 = *(_QWORD *)(a2 + 136);
    v38 = *(_BYTE *)(a2 + 144);
    outlined copy of Text.Storage(v36, v37, v38);
    v39 = *(_QWORD *)(a1 + 128);
    v40 = *(_QWORD *)(a1 + 136);
    v41 = *(_BYTE *)(a1 + 144);
    *(_QWORD *)(a1 + 128) = v36;
    *(_QWORD *)(a1 + 136) = v37;
    *(_BYTE *)(a1 + 144) = v38;
    outlined consume of Text.Storage(v39, v40, v41);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v33 = (_OWORD *)(a1 + 160);
    v42 = *(_QWORD *)(a2 + 160);
    if (*(_QWORD *)(a1 + 160))
    {
      if (v42)
      {
        v43 = *(_QWORD *)(a2 + 168);
        *(_QWORD *)(a1 + 160) = v42;
        *(_QWORD *)(a1 + 168) = v43;
        swift_retain();
        swift_release();
        goto LABEL_32;
      }
      swift_release();
      goto LABEL_29;
    }
    if (!v42)
    {
LABEL_29:
      v52 = *(_OWORD *)(a2 + 160);
      goto LABEL_30;
    }
    v48 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v42;
LABEL_26:
    *(_QWORD *)(a1 + 168) = v48;
    swift_retain();
    goto LABEL_32;
  }
  if (!v35)
  {
    v52 = *v34;
    v53 = *(_OWORD *)(a2 + 136);
    v54 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v53;
    *(_OWORD *)(a1 + 152) = v54;
LABEL_30:
    *v33 = v52;
    goto LABEL_32;
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v44 = *(_QWORD *)(a2 + 128);
  v45 = *(_QWORD *)(a2 + 136);
  v46 = *(_BYTE *)(a2 + 144);
  outlined copy of Text.Storage(v44, v45, v46);
  *(_QWORD *)(a1 + 128) = v44;
  *(_QWORD *)(a1 + 136) = v45;
  *(_BYTE *)(a1 + 144) = v46;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v47 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  if (v47)
  {
    v48 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v47;
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_32:
  v55 = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  v56 = *(_QWORD *)(a2 + 184);
  if (v55)
  {
    if (v56)
    {
      v57 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v56;
      *(_QWORD *)(a1 + 192) = v57;
      swift_retain();
      swift_release();
      goto LABEL_39;
    }
    swift_release();
  }
  else if (v56)
  {
    v58 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v56;
    *(_QWORD *)(a1 + 192) = v58;
    swift_retain();
    goto LABEL_39;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
LABEL_39:
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  v59 = (_OWORD *)(a1 + 208);
  v60 = (_OWORD *)(a2 + 208);
  v61 = *(_QWORD *)(a2 + 232);
  if (*(_QWORD *)(a1 + 232))
  {
    if (v61)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 208), (uint64_t *)(a2 + 208));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 208);
      v62 = *(_QWORD *)(a2 + 240);
      v63 = *(_OWORD *)(a2 + 224);
      *v59 = *v60;
      *(_OWORD *)(a1 + 224) = v63;
      *(_QWORD *)(a1 + 240) = v62;
    }
  }
  else if (v61)
  {
    *(_QWORD *)(a1 + 232) = v61;
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    (**(void (***)(uint64_t, uint64_t))(v61 - 8))(a1 + 208, a2 + 208);
  }
  else
  {
    v64 = *v60;
    v65 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *v59 = v64;
    *(_OWORD *)(a1 + 224) = v65;
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  return a1;
}

void *__swift_memcpy280_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for Alert.Presentation(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v33;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 56))
  {
    if (*(_QWORD *)(a2 + 56))
    {
      v8 = *(_BYTE *)(a2 + 48);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_BYTE *)(a1 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 48) = v8;
      outlined consume of Text.Storage(v9, v10, v11);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 32);
  }
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
LABEL_6:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v13 = *(_BYTE *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(_BYTE *)(a1 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = v13;
  outlined consume of Text.Storage(v14, v15, v16);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)(a1 + 104))
  {
    if (v17)
    {
      v18 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v17;
      *(_QWORD *)(a1 + 112) = v18;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v17)
  {
    v19 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = v17;
    *(_QWORD *)(a1 + 112) = v19;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_13:
  if (!*(_QWORD *)(a1 + 152))
  {
LABEL_19:
    v26 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v26;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    goto LABEL_20;
  }
  if (!*(_QWORD *)(a2 + 152))
  {
    outlined destroy of Alert.Button(a1 + 120);
    goto LABEL_19;
  }
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v20 = *(_BYTE *)(a2 + 144);
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(_QWORD *)(a1 + 136);
  v23 = *(_BYTE *)(a1 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = v20;
  outlined consume of Text.Storage(v21, v22, v23);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 160))
  {
    if (v24)
    {
      v25 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v24;
      *(_QWORD *)(a1 + 168) = v25;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v24)
  {
    v33 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v24;
    *(_QWORD *)(a1 + 168) = v33;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
LABEL_20:
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  if (v28)
  {
    if (v27)
    {
      v29 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = v27;
      *(_QWORD *)(a1 + 192) = v29;
      swift_release();
      goto LABEL_27;
    }
    swift_release();
  }
  else if (v27)
  {
    v30 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v27;
    *(_QWORD *)(a1 + 192) = v30;
    goto LABEL_27;
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
LABEL_27:
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  if (*(_QWORD *)(a1 + 232))
  {
    if (*(_QWORD *)(a2 + 232))
      __swift_destroy_boxed_opaque_existential_1(a1 + 208);
    else
      outlined destroy of AnyHashable(a1 + 208);
  }
  v31 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v31;
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)&v31 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v31;
  return a1;
}

uint64_t storeEnumTagSinglePayload for Alert.Button.Style(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_186FF784C + 4 * byte_187C01585[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_186FF7880 + 4 * byte_187C01580[v4]))();
}

uint64_t sub_186FF7880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FF7888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186FF7890);
  return result;
}

uint64_t sub_186FF789C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186FF78A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_186FF78A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FF78B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_OWORD *assignWithTake for AlertTransformModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in AlertTransformModifier<A>()
{
  return &protocol witness table for AlertTransformModifier<A>;
}

unint64_t lazy protocol witness table accessor for type Alert.Button.Style and conformance Alert.Button.Style()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Alert.Button.Style and conformance Alert.Button.Style;
  if (!lazy protocol witness table cache variable for type Alert.Button.Style and conformance Alert.Button.Style)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Alert.Button.Style, &type metadata for Alert.Button.Style);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Alert.Button.Style and conformance Alert.Button.Style);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Action : AlertActionConvertible in Alert.Presentation()
{
  return &protocol witness table for Alert.Button;
}

uint64_t sub_186FF794C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 72))
    {
      outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
      swift_bridgeObjectRelease();
    }
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 104));
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + 120))
      swift_release();
    if (*(_QWORD *)(v0 + 168))
    {
      outlined consume of Text.Storage(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 160));
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v0 + 176))
        swift_release();
    }
  }
  if (*(_QWORD *)(v0 + 200))
    swift_release();
  if (*(_QWORD *)(v0 + 240))
    __swift_destroy_boxed_opaque_existential_1(v0 + 216);
  return swift_deallocObject();
}

uint64_t outlined release of Alert?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 176);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertTransformModifier.Transform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AlertTransformModifier.Transform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 28) = v3;
  return result;
}

uint64_t sub_186FF7ACC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(uint64_t (*a1)(__int128 *, char *), uint64_t a2, char a3)
{
  char v4;
  __int128 v6;
  char v7;

  v4 = a3 & 1;
  ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)();
  v7 = v4;
  return a1(&v6, &v7);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ContentScrollViewPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SafeAreaTransitionStateKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value((uint64_t)&static EnvironmentValues.SafeAreaTransitionStateKey.defaultValue, a1);
}

uint64_t assignWithCopy for ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t initializeWithTake for ContentScrollViewBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ContentScrollViewBox(a1, a2, a3, MEMORY[0x1E0DEEF58]);
}

uint64_t assignWithTake for ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentScrollViewBox(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentScrollViewBox(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 1;
  }
  return result;
}

uint64_t specialized static ScrollViewUtilities.sizeThatFits(in:contentComputer:axes:)(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  if (!a3)
    return 0;
  if (!*a2)
    static LayoutComputer.defaultValue.getter();
  swift_retain();
  if ((Axis.Set.contains(_:)() & 1) == 0)
    _ProposedSize.width.getter();
  if ((Axis.Set.contains(_:)() & 1) == 0)
    _ProposedSize.height.getter();
  _ProposedSize.init(width:height:)();
  LayoutComputer.sizeThatFits(_:)();
  v5 = v4;
  swift_release();
  v6 = _ProposedSize.width.getter();
  if ((v7 & 1) == 0)
  {
    v8 = v6;
    if ((Axis.Set.contains(_:)() & 1) != 0)
      v5 = v8;
  }
  _ProposedSize.height.getter();
  if ((v9 & 1) == 0)
    Axis.Set.contains(_:)();
  return v5;
}

double specialized static ScrollViewUtilities.animationOffset(rect:anchor:bounds:contentSize:)(CGFloat a1, CGFloat a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, uint64_t a10, char a11, double a12, double a13)
{
  CGFloat v20;
  double v23;
  CGFloat v26;
  CGFloat v27;
  double MaxX;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double MaxY;
  double MinY;
  CGFloat v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double result;
  double MinX;
  CGFloat v45;
  CGFloat v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v20 = a6;
  v23 = a3;
  if ((a11 & 1) != 0)
  {
    v48.origin.x = a5;
    v48.origin.y = a6;
    v48.size.width = a7;
    v48.size.height = a8;
    v26 = a1;
    v27 = a2;
    v45 = v23;
    v47 = a4;
    if (!CGRectContainsRect(v48, *(CGRect *)(&v23 - 2)))
    {
      v49.origin.x = a1;
      v49.origin.y = a2;
      v49.size.width = v45;
      v49.size.height = v47;
      MaxX = CGRectGetMaxX(v49);
      v50.origin.x = a5;
      v50.origin.y = v20;
      v50.size.width = a7;
      v50.size.height = a8;
      if (CGRectGetMaxX(v50) <= MaxX)
      {
        v53.origin.x = a1;
        v53.origin.y = a2;
        v53.size.width = v45;
        v53.size.height = v47;
        CGRectGetMaxX(v53);
        v54.origin.x = a5;
        v54.origin.y = v20;
        v54.size.width = a7;
        v54.size.height = a8;
        CGRectGetWidth(v54);
        v30 = v45;
        v31 = v47;
      }
      else
      {
        v51.origin.x = a1;
        v51.origin.y = a2;
        v51.size.width = v45;
        v51.size.height = v47;
        MinX = CGRectGetMinX(v51);
        v52.origin.x = a5;
        v52.origin.y = v20;
        v52.size.width = a7;
        v52.size.height = a8;
        v29 = CGRectGetMinX(v52);
        v30 = v45;
        v31 = v47;
        if (MinX < v29)
        {
          v32 = a1;
          v33 = a2;
          CGRectGetMinX(*(CGRect *)(&v30 - 2));
          v30 = v45;
          v31 = v47;
        }
      }
      v34 = a1;
      v35 = a2;
      MaxY = CGRectGetMaxY(*(CGRect *)(&v30 - 2));
      v55.origin.x = a5;
      v55.origin.y = v20;
      v55.size.width = a7;
      v55.size.height = a8;
      if (CGRectGetMaxY(v55) <= MaxY)
      {
        v59.origin.x = a1;
        v59.origin.y = a2;
        v59.size.width = v45;
        v59.size.height = v47;
        CGRectGetMaxY(v59);
        v60.origin.x = a5;
        v60.origin.y = v20;
        v60.size.width = a7;
        v60.size.height = a8;
        CGRectGetHeight(v60);
      }
      else
      {
        v56.origin.x = a1;
        v56.origin.y = a2;
        v56.size.width = v45;
        v56.size.height = v47;
        MinY = CGRectGetMinY(v56);
        v57.origin.x = a5;
        v57.origin.y = v20;
        v57.size.width = a7;
        v57.size.height = a8;
        if (MinY < CGRectGetMinY(v57))
        {
          v58.origin.x = a1;
          v58.origin.y = a2;
          v58.size.width = v45;
          v58.size.height = v47;
          CGRectGetMinY(v58);
        }
      }
    }
  }
  else
  {
    UnitPoint.in(_:)(*(__C::CGRect *)&a1);
    v20 = a6;
    UnitPoint.in(_:)((CGSize)__PAIR128__(*(unint64_t *)&a8, *(unint64_t *)&a7));
  }
  v61.origin.x = a5;
  v38 = v20;
  v61.origin.y = v20;
  v61.size.width = a7;
  v61.size.height = a8;
  v39 = a12 - CGRectGetWidth(v61);
  if (v39 > 0.0)
    v40 = v39;
  else
    v40 = 0.0;
  v62.origin.x = a5;
  v62.origin.y = v38;
  v62.size.width = a7;
  v62.size.height = a8;
  v41 = a13 - CGRectGetHeight(v62);
  if (v41 > 0.0)
    v42 = v41;
  else
    v42 = 0.0;
  *(_QWORD *)&result = *(_OWORD *)&CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v42, *(unint64_t *)&v40));
  return result;
}

uint64_t specialized static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  CGFloat v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  if (a5 == 0.0 && a6 == 0.0)
    return 0;
  if (a7 == 0.0 && a8 == 0.0)
    return 0;
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for ScrollTarget?();
  static Update.ensure<A>(_:)();
  if ((v22 & 1) != 0)
    return 0;
  ScrollTarget.rect.getter();
  return specialized static ScrollViewUtilities.animationOffset(rect:anchor:bounds:contentSize:)(v15, v16, v17, v18, a3, a4, a5, a6, v19, v20, v21 & 1, a7, a8);
}

uint64_t specialized EnvironmentValues.safeAreaTransitionState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;

  v6 = a2;
  swift_unknownObjectWeakInit();
  outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value((uint64_t)v5, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of weak FallbackResponderProvider?((uint64_t)v5);
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SafeAreaTransitionStateKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)()
{
  uint64_t v0;

  return closure #1 in static ScrollViewUtilities.animationOffset(target:bounds:contentSize:contentInsets:layoutDirection:)(*(uint64_t (**)(__int128 *, char *))(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
}

void type metadata accessor for ScrollTarget?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScrollTarget?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollTarget?);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.SafeAreaTransitionStateKey()
{
  return &type metadata for EnvironmentValues.SafeAreaTransitionStateKey;
}

uint64_t assignWithCopy for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentScrollViewPreferenceKey()
{
  return &type metadata for ContentScrollViewPreferenceKey;
}

ValueMetadata *type metadata accessor for PlatformItemEnabledModifier()
{
  return &type metadata for PlatformItemEnabledModifier;
}

double static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  double v50;

  v4 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  v7 = *((_DWORD *)a2 + 6);
  v8 = *((_DWORD *)a2 + 7);
  v10 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v11 = a2[5];
  v12 = a2[6];
  v14 = *((_DWORD *)a2 + 14);
  v13 = *((_DWORD *)a2 + 15);
  v15 = *((_DWORD *)a2 + 16);
  v16 = *((_DWORD *)a2 + 17);
  v17 = *((_DWORD *)a2 + 18);
  v18 = *((_DWORD *)a2 + 19);
  v19 = *((_DWORD *)a2 + 20);
  v33 = *a2;
  v34 = v5;
  v35 = v6;
  v36 = v7;
  v37 = v8;
  v38 = v10;
  v39 = v9;
  v31 = v11;
  v40 = v11;
  v41 = v12;
  v42 = v14;
  v43 = v13;
  v29 = v15;
  v30 = v13;
  v44 = v15;
  v45 = v16;
  v27 = v17;
  v28 = v16;
  v46 = v17;
  v47 = v18;
  v25 = v19;
  v26 = v18;
  v48 = v19;
  a3(&v49, a1, &v33);
  v33 = v12;
  v34 = v14;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v33 = v4;
    v34 = v5;
    v35 = v6;
    v36 = v7;
    v37 = v8;
    v38 = v10;
    v39 = v9;
    v40 = v31;
    v41 = v12;
    v42 = v14;
    v43 = v30;
    v44 = v29;
    v45 = v28;
    v46 = v27;
    v47 = v26;
    v48 = v25;
    swift_getKeyPath();
    _ViewInputs.mapEnvironment<A>(_:)();
    v20 = swift_release();
    MEMORY[0x1E0C80A78](v20, v21);
    v33 = v12;
    v34 = v14;
    MEMORY[0x1E0C80A78](v22, v23);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)a4 = v49;
  result = v50;
  a4[1] = v50;
  return result;
}

uint64_t implicit closure #1 in static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v4 = type metadata accessor for PlatformItemList.Item();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v16 - v11;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v16 - v11);
  swift_bridgeObjectRelease();
  v12[56] = a2;
  outlined init with copy of PlatformItemList.Item((uint64_t)v12, (uint64_t)v8);
  type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>();
  v13 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v8, v14 + v13);
  result = outlined destroy of PlatformItemList.Item((uint64_t)v12);
  *a1 = v14;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemEnabledModifier.PlatformItemListTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_BYTE *)AGGraphGetValue();
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = v2;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter;
  *(_QWORD *)(result + 24) = v3;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PlatformItemEnabledModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemEnabledModifier()
{
  return &protocol witness table for PlatformItemEnabledModifier;
}

uint64_t partial apply for implicit closure #1 in static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static PlatformItemEnabledModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform;
  if (!lazy protocol witness table cache variable for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemEnabledModifier.PlatformItemListTransform, &type metadata for PlatformItemEnabledModifier.PlatformItemListTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemEnabledModifier.PlatformItemListTransform and conformance PlatformItemEnabledModifier.PlatformItemListTransform);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>)
  {
    type metadata accessor for PlatformItemList.Item();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>);
  }
}

uint64_t sub_186FF8BF8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_186FF8C10()
{
  swift_release();
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for PlatformItemEnabledModifier.PlatformItemListTransform()
{
  return &type metadata for PlatformItemEnabledModifier.PlatformItemListTransform;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1E1AD2858, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.isToggleOn.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultToggleIsOnKey>, (uint64_t)&unk_1E1AD2858, (uint64_t)&protocol witness table for DefaultToggleIsOnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultToggleIsOnKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t ButtonToggleStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t ButtonToggleStyle.makeBody(configuration:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  char *v26;
  uint64_t KeyPath;
  char *v28;
  __int128 v30;
  char v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>(0);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (_WORD *)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v30 - v12;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v35 = a1[2];
  v36 = v18;
  v19 = a1[5];
  v37 = a1[4];
  v38 = v19;
  v20 = a1[1];
  v33 = *a1;
  v34 = v20;
  v21 = (_OWORD *)swift_allocObject();
  v22 = a1[3];
  v21[3] = a1[2];
  v21[4] = v22;
  v23 = a1[5];
  v21[5] = a1[4];
  v21[6] = v23;
  v24 = a1[1];
  v21[1] = *a1;
  v21[2] = v24;
  *v8 = 256;
  v25 = (_QWORD *)((char *)v8 + *(int *)(v5 + 36));
  *v25 = partial apply for toggleState #1 () in ButtonToggleStyle.makeBody(configuration:);
  v25[1] = v21;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v26 = (char *)v8 + *(int *)(v5 + 40);
  *(_QWORD *)v26 = swift_getKeyPath();
  v26[8] = 2;
  KeyPath = swift_getKeyPath();
  v30 = v33;
  v31 = v34;
  outlined retain of ToggleStyleConfiguration(&v33);
  type metadata accessor for Bool?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v32);
  LOBYTE(v5) = v32;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>);
  v28 = &v13[*(int *)(v10 + 36)];
  *(_QWORD *)v28 = KeyPath;
  v28[8] = v5;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>);
  outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>((uint64_t)v13, (uint64_t)v17);
  outlined destroy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>((uint64_t)v13);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>);
}

_QWORD *toggleState #1 () in ButtonToggleStyle.makeBody(configuration:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined retain of ToggleStyleConfiguration(a1);
  type metadata accessor for Bool?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE75A0]);
  v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(a1);
}

uint64_t protocol witness for ToggleStyle.makeBody(configuration:) in conformance ButtonToggleStyle@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return ButtonToggleStyle.makeBody(configuration:)(a1, a2);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsToggleButton()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsToggleButton()
{
  lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DefaultToggleIsOnKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *a1;
  v3 = v2 == 2;
  v4 = *a2;
  if (v4 != 2)
    v3 = 0;
  if (v2 != 2 && v4 != 2)
    v3 = ((v4 & 1) == 0) ^ v2;
  return v3 & 1;
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for FalseViewInputBoolFlagModifier<A>);
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>)
  {
    type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for FalseViewInputBoolFlagModifier<IsToggleButton>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton, (uint64_t)&type metadata for IsToggleButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FalseViewInputBoolFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>);
  }
}

void type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>);
  }
}

unint64_t lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsToggleButton, &type metadata for IsToggleButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsToggleButton, &type metadata for IsToggleButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsToggleButton, &type metadata for IsToggleButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsToggleButton, &type metadata for IsToggleButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsToggleButton, &type metadata for IsToggleButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton;
  if (!lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsToggleButton, &type metadata for IsToggleButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsToggleButton and conformance IsToggleButton);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>();
    v2 = v1;
    v3[0] = &protocol witness table for ToggleStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsToggleButton>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton, (uint64_t)&type metadata for IsToggleButton, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>);
  }
}

uint64_t sub_186FF94C4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));

    swift_release();
  }
  return swift_deallocObject();
}

_QWORD *partial apply for toggleState #1 () in ButtonToggleStyle.makeBody(configuration:)()
{
  uint64_t v0;

  return toggleState #1 () in ButtonToggleStyle.makeBody(configuration:)((_QWORD *)(v0 + 16));
}

_QWORD *outlined retain of ToggleStyleConfiguration(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[8];
  v5 = (void *)a1[9];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  return a1;
}

uint64_t outlined copy of ToggleStyleConfiguration.Effect(uint64_t result, uint64_t a2, char a3, void *a4)
{
  id v5;

  if (a4)
  {
    outlined copy of Environment<AppIntentExecutor?>.Content(result, a2, a3 & 1);
    v5 = a4;
    return swift_retain();
  }
  return result;
}

void type metadata accessor for Bool?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEAFA0]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in ButtonToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for ButtonToggleStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for ButtonToggleStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for ButtonToggleStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *assignWithTake for ButtonToggleStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonToggleStyle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonToggleStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonToggleStyle()
{
  return &type metadata for ButtonToggleStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for ViewInputFlagModifier<A>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, ViewInputFlagModifier<IsToggleButton>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>(255);
    lazy protocol witness table accessor for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>();
    v6 = type metadata accessor for ButtonStyleModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle;
  if (!lazy protocol witness table cache variable for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetBorderedProminentButtonStyle, &type metadata for WidgetBorderedProminentButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>;
  if (!lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetBorderedProminentButtonStyle> and conformance WrappedButtonStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStylePredicate<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>>, type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Bool?>>, FalseViewInputBoolFlagModifier<IsToggleButton>>>, _EnvironmentKeyWritingModifier<Bool?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier>();
    v2[0] = &protocol witness table for ButtonStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetBorderedProminentButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

ValueMetadata *type metadata accessor for IsToggleButton()
{
  return &type metadata for IsToggleButton;
}

void *type metadata accessor for DefaultToggleIsOnKey()
{
  return &unk_1E1AD2858;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsToggleButton()
{
  return &protocol witness table for IsToggleButton;
}

_QWORD *outlined release of ToggleStyleConfiguration(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[8];
  v5 = (void *)a1[9];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  return a1;
}

void outlined consume of ToggleStyleConfiguration.Effect(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  if (a4)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1);
    swift_release();

  }
}

ValueMetadata *type metadata accessor for NavigationStackContext()
{
  return &type metadata for NavigationStackContext;
}

uint64_t View.presentationTransitionStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9[2];
  _OWORD v10[3];

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v9, a3, a5);
  outlined init with copy of _PresentationTransitionOutputs.Content(v9, (uint64_t)&v6);
  if (*((_QWORD *)&v7 + 1))
  {
    *(_OWORD *)((char *)v10 + 8) = v6;
    *(_OWORD *)((char *)&v10[1] + 8) = v7;
    *((_QWORD *)&v10[2] + 1) = v8;
    if (one-time initialization token for _sharedNamespaceID != -1)
      swift_once();
    *(_QWORD *)&v10[0] = static _PresentationTransitionCompatibility._sharedNamespaceID;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined destroy of _PresentationTransitionOutputs((uint64_t)v9);
  View.preference<A>(key:value:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationTransitionOutputs?);
}

uint64_t outlined init with copy of _PresentationTransitionOutputs.Content(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

double AutomaticPresentationTransitionStyle._makePresentationTransition()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double protocol witness for PresentationTransitionStyle._makePresentationTransition() in conformance AutomaticPresentationTransitionStyle@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ZoomPresentationTransitionStyle._makePresentationTransition()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t protocol witness for PresentationTransitionStyle._makePresentationTransition() in conformance ZoomPresentationTransitionStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t one-time initialization function for _sharedNamespaceID()
{
  uint64_t result;

  result = AGMakeUniqueID();
  static _PresentationTransitionCompatibility._sharedNamespaceID = result;
  return result;
}

uint64_t outlined destroy of _PresentationTransitionOutputs(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

void type metadata accessor for _NavigationTransitionOutputs?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _NavigationTransitionOutputs?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NavigationTransitionOutputs?);
  }
}

uint64_t dispatch thunk of PresentationTransitionStyle._makePresentationTransition()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t assignWithCopy for _PresentationTransitionOutputs(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for (sourceID: AnyHashable));
      v5 = *((_QWORD *)a2 + 4);
      v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = v5;
    }
  }
  else if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v7;
    *(_OWORD *)(a1 + 16) = v8;
  }
  return a1;
}

uint64_t type metadata accessor for (sourceID: AnyHashable)()
{
  uint64_t result;

  result = lazy cache variable for type metadata for (sourceID: AnyHashable);
  if (!lazy cache variable for type metadata for (sourceID: AnyHashable))
  {
    result = MEMORY[0x1E0DEC198];
    atomic_store(MEMORY[0x1E0DEC198], (unint64_t *)&lazy cache variable for type metadata for (sourceID: AnyHashable));
  }
  return result;
}

uint64_t assignWithTake for _PresentationTransitionOutputs(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
      __swift_destroy_boxed_opaque_existential_1(a1);
    else
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for (sourceID: AnyHashable));
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PresentationTransitionOutputs(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _PresentationTransitionOutputs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _PresentationTransitionOutputs()
{
  return &type metadata for _PresentationTransitionOutputs;
}

ValueMetadata *type metadata accessor for AutomaticPresentationTransitionStyle()
{
  return &type metadata for AutomaticPresentationTransitionStyle;
}

uint64_t initializeWithCopy for ZoomPresentationTransitionStyle(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for ZoomPresentationTransitionStyle(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t assignWithTake for ZoomPresentationTransitionStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ZoomPresentationTransitionStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ZoomPresentationTransitionStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ZoomPresentationTransitionStyle()
{
  return &type metadata for ZoomPresentationTransitionStyle;
}

uint64_t sub_186FFA5D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _PreferenceWritingModifier<NavigationTransitionKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _PreferenceWritingModifier<NavigationTransitionKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<NavigationTransitionKey>)
  {
    v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<NavigationTransitionKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<NavigationTransitionKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE60F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t assignWithCopy for _PresentationTransitionOutputs.Content(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for _PresentationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PresentationTransitionOutputs.Content(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _PresentationTransitionOutputs.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

double destructiveInjectEnumTag for _PresentationTransitionOutputs.Content(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for _PresentationTransitionOutputs.Content()
{
  return &type metadata for _PresentationTransitionOutputs.Content;
}

uint64_t _Velocity<>.animatableData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(a2 + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t _Velocity<>.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  specialized _Velocity<>.animatableData.setter(a1, a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void (*_Velocity<>.animatableData.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  size_t v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[5] = malloc(v11);
  v7[6] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(v8, a3);
  return _Velocity<>.animatableData.modify;
}

void _Velocity<>.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  v7 = (*a1)[1];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    specialized _Velocity<>.animatableData.setter((uint64_t)v3, v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
  }
  else
  {
    specialized _Velocity<>.animatableData.setter((*a1)[6], v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2)
{
  return _Velocity<>.animatableData.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance <> _Velocity<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _Velocity<>.animatableData.setter(a1, a2, *(_QWORD *)(a3 - 8));
}

void (*protocol witness for Animatable.animatableData.modify in conformance <> _Velocity<A>(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  size_t v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = v3;
  v7[1] = a2;
  v8 = *(_QWORD *)(a3 - 8);
  v7[2] = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[5] = malloc(v11);
  v7[6] = malloc(v11);
  _Velocity<>.animatableData.getter(a2, v8);
  return protocol witness for Animatable.animatableData.modify in conformance <> _Velocity<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance <> _Velocity<A>(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 40), v4, v5);
    specialized _Velocity<>.animatableData.setter((uint64_t)v3, v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
  }
  else
  {
    specialized _Velocity<>.animatableData.setter(*(_QWORD *)(*(_QWORD *)a1 + 48), v8, v7);
    v9 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v9(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t specialized _Velocity<>.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&v13 - v9, a1, v8);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 32))(v10, v5, a3);
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in <> _Velocity<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_186FFACC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a3 + a2 - 8);
  v4 = type metadata accessor for _Velocity();
  return _Velocity<>.animatableData.getter(v4, v3);
}

uint64_t sub_186FFAD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = type metadata accessor for _Velocity();
  return specialized _Velocity<>.animatableData.setter(a1, v6, v5);
}

uint64_t sub_186FFAD5C()
{
  return 24;
}

__n128 sub_186FFAD68(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for WidgetLinkButtonStyle()
{
  return &type metadata for WidgetLinkButtonStyle;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in WidgetLinkButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetLinkButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 2);
  result = swift_getKeyPath();
  *(_BYTE *)a2 = v3;
  *(_QWORD *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for _ContentShapeModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>();
    type metadata accessor for _ContentShapeModifier<Rectangle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>);
  }
}

void type metadata accessor for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>)
  {
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>);
  }
}

void type metadata accessor for _ContentShapeModifier<Rectangle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>)
  {
    v2 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    v4 = type metadata accessor for _ContentShapeModifier(a1, MEMORY[0x1E0CE7E28], v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>();
    v2 = v1;
    v3[0] = &protocol witness table for ButtonStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

id UIHostingKeyboardTrackingElement.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIHostingKeyboardTrackingElement();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall _UIHostingView.keyboardIsChanging(size:)(CGSize size)
{
  _QWORD *v1;
  _QWORD *v2;
  double height;
  double width;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  Swift::UInt32 v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double MaxX;
  CGPoint v19;
  CGSize v20;
  __C::CGRect_optional _;
  CGRect v22;
  CGRect v23;

  v2 = v1;
  height = size.height;
  width = size.width;
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0
    && (_UIHostingView.shouldAddKeyboardToSafeAreaInsets.getter() & 1) != 0)
  {
    v5 = objc_msgSend(v1, sel_window);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, sel_screen);

      if (v7)
      {
        v8 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xE8);
        v9 = *(_DWORD *)((char *)v2 + v8) + 1;
        *(_DWORD *)((char *)v2 + v8) = v9;
        objc_msgSend(v7, sel_bounds);
        v11 = v10;
        v13 = v12;
        v15 = v14;
        v17 = v16;
        objc_msgSend(v7, sel_scale);
        v20.width = width;
        v20.height = height;
        v22.origin.x = v11;
        v22.origin.y = v13;
        v22.size.width = v15;
        v22.size.height = v17;
        MaxX = CGRectGetMaxX(v22);
        v23.origin.x = v11;
        v23.origin.y = v13;
        v23.size.width = v15;
        v23.size.height = v17;
        v19.x = MaxX - width;
        v19.y = CGRectGetMaxY(v23) - height;
        CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)();
        _.value.origin = v19;
        _.value.size = v20;
        _.is_nil = 0;
        if (_UIHostingView.setKeyboardFrame(_:seed:)(&_, v9))
          objc_msgSend(v2, sel_layoutIfNeeded);

      }
    }
  }
}

uint64_t _UIHostingView.shouldAddKeyboardToSafeAreaInsets.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  char v7;

  if ((_UIHostingView.safeAreaRegions.getter() & 2) != 0)
  {
    v1 = objc_msgSend(v0, sel_window);
    if (v1)
    {
      v2 = v1;
      v3 = objc_msgSend(v1, sel_screen);

    }
    else
    {
      v3 = 0;
    }
    v4 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    v5 = v4;
    if (v3)
    {
      if (v4)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScreen);
        v6 = v3;
        v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) == 0)
          return 0;
LABEL_10:
        _UIHostingView.viewController.getter();
      }
      v5 = v3;
    }
    else if (!v4)
    {
      goto LABEL_10;
    }

  }
  return 0;
}

Swift::Bool __swiftcall _UIHostingView.setKeyboardFrame(_:seed:)(__C::CGRect_optional *_, Swift::UInt32 seed)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  char v17;
  Swift::Bool v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];
  _BYTE v24[40];
  CGRect v25;
  CGRect v26;

  v5 = *v2;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *MEMORY[0x1E0DEEDD8];
  outlined init with take of CGRect?((uint64_t)_, (uint64_t)v23);
  if (*(_DWORD *)((char *)v2 + *(_QWORD *)((*v6 & *v2) + 0xE8)) != seed)
    return 0;
  v8 = *(double *)v23;
  v9 = *(double *)&v23[1];
  v10 = *(double *)&v23[2];
  v11 = *(double *)&v23[3];
  v12 = (uint64_t)v2 + *(_QWORD *)((*v6 & *v2) + 0xE0);
  v13 = *(double *)v12;
  v14 = *(double *)(v12 + 8);
  v15 = *(double *)(v12 + 16);
  v16 = *(double *)(v12 + 24);
  v17 = *(_BYTE *)(v12 + 32);
  outlined init with take of CGRect?((uint64_t)_, (uint64_t)v24);
  if ((v24[32] & 1) == 0)
  {
    if ((v17 & 1) == 0)
    {
      v25.origin.x = v8;
      v25.origin.y = v9;
      v25.size.width = v10;
      v25.size.height = v11;
      v26.origin.x = v13;
      v26.origin.y = v14;
      v26.size.width = v15;
      v26.size.height = v16;
      if (CGRectEqualToRect(v25, v26))
        return 0;
    }
LABEL_8:
    v19 = *(_QWORD *)((*v6 & *v2) + 0xB8);
    v18 = 1;
    *((_BYTE *)v2 + v19) = 1;
    outlined init with take of CGRect?((uint64_t)_, v12);
    v21 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v7 & v5) + 0x50), *(_QWORD *)((v7 & v5) + 0x58), v20);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v21);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    return v18;
  }
  if ((v17 & 1) == 0)
    goto LABEL_8;
  return 0;
}

uint64_t type metadata accessor for UIHostingKeyboardTrackingElement()
{
  return objc_opt_self();
}

Swift::Void __swiftcall _UIHostingView.setupKeyboardAvoidanceNotifications()()
{
  uint64_t v0;
  id v1;

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E0DC4FE8], 0);
    objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E0DC4FE0], 0);

  }
}

Swift::Void __swiftcall _UIHostingView.updateKeyboardAvoidance()()
{
  void *v0;
  id v1;

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    v1 = objc_msgSend(v0, sel_window);
    if (v1)
    {

      _UIHostingView.setupKeyboardAvoidance()();
    }
    else
    {
      _UIHostingView.tearDownKeyboardAvoidance()();
    }
  }
}

void _UIHostingView.setupKeyboardAvoidance()()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  void *v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  id v7;
  void *v8;
  objc_super v9;

  v1 = v0;
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    v2 = objc_msgSend(v0, sel_keyboardSceneDelegate);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xF0);
      if (*(_QWORD *)((char *)v1 + v4))
        goto LABEL_5;
      v5 = (objc_class *)type metadata accessor for UIHostingKeyboardTrackingElement();
      v6 = (char *)objc_allocWithZone(v5);
      *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI32UIHostingKeyboardTrackingElement_element + 8] = 0;
      *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = &protocol witness table for _UIHostingView<A>;
      swift_unknownObjectWeakAssign();
      v9.receiver = v6;
      v9.super_class = v5;
      v7 = objc_msgSendSuper2(&v9, sel_init);
      v8 = *(void **)((char *)v1 + v4);
      *(_QWORD *)((char *)v1 + v4) = v7;

      if (*(_QWORD *)((char *)v1 + v4))
      {
LABEL_5:
        objc_msgSend(v3, sel_addTrackingElement_);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

void _UIHostingView.tearDownKeyboardAvoidance()()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;

  v1 = v0;
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    v2 = objc_msgSend(v0, sel_keyboardSceneDelegate);
    if (v2)
    {
      v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0);
      v4 = *(void **)((char *)v0 + v3);
      if (v4)
      {
        v6 = v2;
        v5 = v4;
        objc_msgSend(v6, sel_removeTrackingElement_, v5);

        v2 = *(id *)((char *)v1 + v3);
        *(_QWORD *)((char *)v1 + v3) = 0;
      }

    }
  }
}

Swift::Void __swiftcall _UIHostingView._keyboardWillShow(note:)(NSNotification note)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  id v5;
  uint64_t v6;
  Swift::UInt32 v7;
  _BYTE v8[40];
  uint64_t v9;
  char v10;
  __C::CGRect_optional _;

  v2 = v1;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
    v5 = objc_msgSend(v4, sel_userInterfaceIdiom);

    if (v5 || (NSNotification.keyboardIsLocal.getter() & 1) != 0)
    {
      v6 = *(_QWORD *)((*v3 & *v2) + 0xE8);
      v7 = *(_DWORD *)((char *)v2 + v6) + 1;
      *(_DWORD *)((char *)v2 + v6) = v7;
      if ((_UIHostingView.shouldAddKeyboardToSafeAreaInsets.getter() & 1) != 0)
      {
        NSNotification.keyboardFrame.getter((uint64_t)v8);
        outlined init with take of CGRect?((uint64_t)v8, (uint64_t)&v9);
        if ((v10 & 1) == 0)
          _UIHostingView.viewController.getter();
      }
      memset(&_, 0, 32);
      _.is_nil = 1;
      _UIHostingView.setKeyboardFrame(_:seed:)(&_, v7);
    }
  }
}

id NSNotification.keyboardFrame.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char v9;
  int v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20[2];
  __int128 v21;
  _BYTE v22[40];
  _OWORD v23[2];

  result = objc_msgSend(v1, sel_userInfo);
  v4 = 0;
  if (!result)
    goto LABEL_10;
  v5 = result;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v20[0] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20[1] = v7;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v22), (v9 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)v20);
  }
  else
  {
    *(_OWORD *)v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v22);
  if (!*((_QWORD *)&v21 + 1))
  {
    result = (id)outlined destroy of Any?((uint64_t)v20);
LABEL_10:
    v19 = 1;
    v14 = 0;
    v16 = 0;
    v18 = 0;
    goto LABEL_13;
  }
  outlined init with take of Any(v20, v23);
  outlined init with copy of Any((uint64_t)v23, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSValue);
  v10 = swift_dynamicCast();
  if (v10)
  {
    v11 = v20[0];
    objc_msgSend(v20[0], sel_CGRectValue);
    v4 = v12;
    v14 = v13;
    v16 = v15;
    v18 = v17;

  }
  else
  {
    v14 = 0;
    v16 = 0;
    v18 = 0;
  }
  v19 = v10 ^ 1;
  result = (id)__swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
LABEL_13:
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v18;
  *(_BYTE *)(a1 + 32) = v19;
  return result;
}

void closure #1 in _UIHostingView._keyboardWillShow(note:)(uint64_t a1, Swift::UInt32 a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __C::CGRect_optional _;

  v11 = a1 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x18D760234](v11);
  if (v12)
  {
    v13 = (void *)v12;
    _.value.origin.x = a3;
    _.value.origin.y = a4;
    _.value.size.width = a5;
    _.value.size.height = a6;
    _.is_nil = 0;
    _UIHostingView.setKeyboardFrame(_:seed:)(&_, a2);

  }
}

Swift::Void __swiftcall _UIHostingView._keyboardWillHide(note:)(NSNotification note)
{
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0
    && (_UIHostingView.shouldAddKeyboardToSafeAreaInsets.getter() & 1) != 0)
  {
    _UIHostingView.viewController.getter();
  }
}

unint64_t lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnableKeyboardTrackingElement, &unk_1E1AF9898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

void closure #1 in _UIHostingView._keyboardWillHide(note:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __C::CGRect_optional _;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x18D760234](v3);
  if (v4)
  {
    v5 = (void *)v4;
    memset(&_, 0, 32);
    _.is_nil = 1;
    _UIHostingView.setKeyboardFrame(_:seed:)(&_, a2);

  }
}

id NSNotification.keyboardAnimationDuration.getter()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  _OWORD v10[2];

  result = objc_msgSend(v0, sel_userInfo);
  if (result)
  {
    v2 = result;
    v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)&v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((_QWORD *)&v7 + 1) = v4;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v3 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v6 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v9);
    if (*((_QWORD *)&v8 + 1))
    {
      outlined init with take of Any(&v7, v10);
      outlined init with take of Any(v10, v9);
      if (swift_dynamicCast())
        return (id)v7;
      else
        return 0;
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v7);
      return 0;
    }
  }
  return result;
}

id NSNotification.keyboardAnimationCurve.getter()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  _OWORD v10[2];

  result = objc_msgSend(v0, sel_userInfo);
  if (result)
  {
    v2 = result;
    v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)&v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((_QWORD *)&v7 + 1) = v4;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v3 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v6 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v9);
    if (*((_QWORD *)&v8 + 1))
    {
      outlined init with take of Any(&v7, v10);
      outlined init with take of Any(v10, v9);
      if (swift_dynamicCast())
        return (id)v7;
      else
        return 0;
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v7);
      return 0;
    }
  }
  return result;
}

uint64_t NSNotification.keyboardIsLocal.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  _BYTE v8[40];
  __int128 v9;
  __int128 v10;

  v1 = objc_msgSend(v0, sel_userInfo);
  if (!v1)
  {
    v9 = 0u;
    v10 = 0u;
LABEL_10:
    outlined destroy of Any?((uint64_t)&v9);
    return 0;
  }
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)&v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((_QWORD *)&v9 + 1) = v4;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v3 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)&v9);
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v8);
  if (!*((_QWORD *)&v10 + 1))
    goto LABEL_10;
  result = swift_dynamicCast();
  if ((_DWORD)result)
    return v8[0];
  return result;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableKeyboardTrackingElement()
{
  return 0xD00000000000002FLL;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableKeyboardTrackingElement()
{
  swift_beginAccess();
  return static EnableKeyboardTrackingElement.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableKeyboardTrackingElement(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static EnableKeyboardTrackingElement.cachedValue = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableKeyboardTrackingElement())()
{
  swift_beginAccess();
  return protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableKeyboardTrackingElement;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableKeyboardTrackingElement()
{
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableKeyboardTrackingElement()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableKeyboardTrackingElement()
{
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableKeyboardTrackingElement@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t sub_186FFC648()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_186FFC66C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView._keyboardWillHide(note:)()
{
  uint64_t v0;

  closure #1 in _UIHostingView._keyboardWillHide(note:)(*(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t sub_186FFC6A0()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView._keyboardWillShow(note:)()
{
  uint64_t v0;

  closure #1 in _UIHostingView._keyboardWillShow(note:)(*(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 72), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48), *(CGFloat *)(v0 + 56), *(CGFloat *)(v0 + 64));
}

void *type metadata accessor for EnableKeyboardTrackingElement()
{
  return &unk_1E1AF9898;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableKeyboardTrackingElement()
{
  return &protocol witness table for EnableKeyboardTrackingElement;
}

uint64_t ShadowListDataSource<>.section(forSectionLabelIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentExecutingLocation.get()(v9, (uint64_t)v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, v5, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v10;
}

uint64_t ShadowListDataSource<>.sectionIndexLabel(forSectionAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentExecutingLocation.get()(v9, (uint64_t)v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, v5, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v10;
}

uint64_t protocol witness for CollectionViewListDataSourceBase.style.getter in conformance <> ShadowListDataSource<A>(uint64_t a1, uint64_t a2)
{
  return ShadowListDataSource<>.style.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance <> ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShadowListDataSource<>.section(forSectionLabelIndex:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for CollectionViewListDataSourceBase.sectionIndexLabel(forSectionAt:) in conformance <> ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ShadowListDataSource<>.sectionIndexLabel(forSectionAt:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t instantiation function for generic protocol witness table for <> ShadowListDataSource<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CollectionViewListDataSource(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = (void *)a2[6];
    *(_QWORD *)(v4 + 40) = a2[5];
    *(_QWORD *)(v4 + 48) = v8;
    v9 = a2[8];
    *(_QWORD *)(v4 + 56) = a2[7];
    *(_QWORD *)(v4 + 64) = v9;
    v10 = a3[9];
    v11 = v4 + v10;
    v12 = (uint64_t)a2 + v10;
    *(_BYTE *)(v4 + 72) = *((_BYTE *)a2 + 72);
    v13 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v16 = a3[10];
    v17 = v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = *(uint64_t *)((char *)a2 + v16 + 8);
    if (v19)
    {
      if (v19 == 1)
      {
        v20 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
        *(_OWORD *)(v17 + 48) = v20;
        *(_DWORD *)(v17 + 63) = *(_DWORD *)(v18 + 63);
        v21 = *(_OWORD *)(v18 + 16);
        *(_OWORD *)v17 = *(_OWORD *)v18;
        *(_OWORD *)(v17 + 16) = v21;
LABEL_12:
        v27 = a3[11];
        v28 = a3[12];
        v29 = (_QWORD *)(v4 + v27);
        v30 = (uint64_t *)((char *)a2 + v27);
        v31 = v30[1];
        *v29 = *v30;
        v29[1] = v31;
        *(_BYTE *)(v4 + v28) = *((_BYTE *)a2 + v28);
        v32 = a3[13];
        v33 = a3[14];
        v34 = v4 + v32;
        v35 = (uint64_t)a2 + v32;
        *(_QWORD *)v34 = *(_QWORD *)v35;
        *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
        *(_QWORD *)(v4 + v33) = *(uint64_t *)((char *)a2 + v33);
        swift_retain();
        goto LABEL_13;
      }
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v19;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
    }
    v23 = (_QWORD *)(v17 + 24);
    v24 = (_QWORD *)(v18 + 24);
    v25 = *(_BYTE *)(v18 + 64);
    if ((v25 & 1) != 0)
    {
      *v23 = *v24;
      swift_bridgeObjectRetain();
    }
    else
    {
      v26 = *(_OWORD *)(v18 + 48);
      *(_OWORD *)(v17 + 48) = v26;
      (**(void (***)(_QWORD *, _QWORD *))(v26 - 8))(v23, v24);
    }
    *(_BYTE *)(v17 + 64) = v25;
    *(_WORD *)(v17 + 65) = *(_WORD *)(v18 + 65);
    goto LABEL_12;
  }
  v22 = *a2;
  *(_QWORD *)a1 = *a2;
  v4 = v22 + ((v5 + 16) & ~(unint64_t)v5);
LABEL_13:
  swift_retain();
  return v4;
}

uint64_t outlined destroy of TableHeaderView(uint64_t a1)
{
  destroy for TableHeaderView(a1);
  return a1;
}

_OWORD *initializeWithTake for CollectionViewListDataSource(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = a3[9];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[10];
  v13 = a3[11];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  v16 = *((_OWORD *)v15 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  *((_OWORD *)v14 + 3) = v16;
  *(_DWORD *)(v14 + 63) = *(_DWORD *)(v15 + 63);
  v17 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v17;
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v18 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t sub_186FFCD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_186FFCDF4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.RowIDs, &type metadata for SectionAccumulator.RowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.RowIDs, &type metadata for SectionAccumulator.RowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.RowIDs, &type metadata for SectionAccumulator.RowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionAccumulator.RowIDs, &type metadata for SectionAccumulator.RowIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SectionAccumulator.Item] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SectionAccumulator.Item] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SectionAccumulator.Item] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [SectionAccumulator.Item], (uint64_t)&type metadata for SectionAccumulator.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SectionAccumulator.Item] and conformance [A]);
  }
  return result;
}

uint64_t CollectionViewListDataSource.init(sectionInfo:style:allowsMultipleSelection:minRowHeight:minHeaderHeight:environment:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, double a10@<D0>)
{
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;

  v17 = *a6;
  v18 = a6[1];
  v19 = (int *)type metadata accessor for CollectionViewListDataSource(0, a7, a8, a4);
  v20 = (char *)a9 + v19[10];
  *(_OWORD *)v20 = xmmword_187BF9840;
  *((_OWORD *)v20 + 1) = 0u;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *(_DWORD *)(v20 + 63) = 0;
  v21 = (char *)a9 + v19[13];
  v22 = a1[3];
  a9[2] = a1[2];
  a9[3] = v22;
  *(_OWORD *)((char *)a9 + 57) = *(_OWORD *)((char *)a1 + 57);
  v23 = a1[1];
  *a9 = *a1;
  a9[1] = v23;
  v24 = (char *)a9 + v19[9];
  v25 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a2, v25);
  *((_BYTE *)a9 + v19[12]) = a3;
  *(_QWORD *)v21 = a4;
  v21[8] = a5 & 1;
  *(double *)((char *)a9 + v19[14]) = a10;
  v27 = (_QWORD *)((char *)a9 + v19[11]);
  *v27 = v17;
  v27[1] = v18;
  return result;
}

uint64_t CollectionViewListDataSource.sectionIDs.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::String_optional __swiftcall CollectionViewListDataSource.sectionIndexLabel(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  void *v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String_optional result;

  if (forSectionAt < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v2 + 16) <= (unint64_t)forSectionAt)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = 0;
  v4 = v2 + 184 * forSectionAt;
  v5 = *(_QWORD *)(v4 + 184);
  if (v5 < 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
    {
      v7 = v4 + 32;
      v9 = *(_QWORD *)(v7 + 136);
      v8 = *(_QWORD *)(v7 + 144);
      outlined copy of SectionIndexLabel?(v9, v8, v5);
      outlined copy of Text.Storage(v9, v8, v5 & 1);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      v3 = Text.resolveString(in:with:idiom:)();
      v6 = v10;
      outlined consume of Text.Storage(v9, v8, v5 & 1);
      swift_bridgeObjectRelease();
      outlined consume of SectionIndexLabel?(v9, v8, v5);
      swift_release();
      swift_release();
    }
  }
  forSectionAt = v3;
  v11 = v6;
LABEL_10:
  result.value._object = v11;
  result.value._countAndFlagsBits = forSectionAt;
  return result;
}

Swift::Int __swiftcall CollectionViewListDataSource.section(forSectionLabelIndex:)(Swift::Int forSectionLabelIndex)
{
  uint64_t v1;
  uint64_t v2;

  if (forSectionLabelIndex < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 64);
    if (*(_QWORD *)(v2 + 16) > (unint64_t)forSectionLabelIndex)
      return *(_QWORD *)(v2 + 8 * forSectionLabelIndex + 32);
  }
  __break(1u);
  return forSectionLabelIndex;
}

uint64_t CollectionViewListDataSource.configureFooter(_:transaction:forSectionAt:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, _QWORD, uint64_t, double);
  char v17;
  void (*v18)(char *, uint64_t);
  char v19;
  char v20;
  uint64_t v21;
  id v22;
  id v24;
  unint64_t v25;
  char v26[8];
  id v27;
  uint64_t v28;
  uint64_t v29;

  v24 = a1;
  v25 = a3;
  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void (**)(char *, _QWORD, uint64_t, double))(v11 + 104);
  v16(v15, *MEMORY[0x1E0DC2890], v10, v13);
  v17 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v15, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v4, a4);
  if ((v17 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
    v19 = 0;
  }
  else
  {
    ((void (*)(char *, _QWORD, uint64_t))v16)(v15, *MEMORY[0x1E0DC2880], v10);
    v20 = static UICollectionLayoutListConfiguration.Appearance.== infix(_:_:)();
    v18(v15, v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a4);
    if ((v20 & 1) != 0)
      v19 = 0;
    else
      v19 = 2;
  }
  v21 = *(_QWORD *)(v4 + *(int *)(a4 + 56));
  v26[0] = v19;
  v27 = v24;
  v28 = a2;
  v29 = v21;
  v22 = v24;
  outlined copy of Transaction?(a2);
  specialized ListSectionInfo.visitHeader<A>(index:visitor:)(v25, (uint64_t)v26, (void (*)(_QWORD *))MEMORY[0x1E0CE4138]);

  return outlined consume of Transaction?(a2);
}

unint64_t specialized ListSectionInfo.visitHeader<A>(index:visitor:)(unint64_t result, uint64_t a2, void (*a3)(_QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];
  _BYTE v7[56];
  uint64_t v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(v3 + 56);
  if (*(_QWORD *)(v4 + 16) <= result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = outlined init with copy of SectionAccumulator.Item(v4 + 184 * result + 32, (uint64_t)v7);
  v6[5] = 0;
  if (v8)
  {
    a3(v6);
    specialized ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    return outlined destroy of SectionAccumulator.Item((uint64_t)v7);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t CollectionViewListDataSource.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ListSectionInfo.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t CollectionViewListDataSource.firstIndexPath(viewListID:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD v7[4];

  outlined init with copy of ListSectionInfo(v1, (uint64_t)v7);
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  v3 = ViewList.firstOffset(of:)();
  if ((v4 & 1) != 0)
  {
    v5 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
  else
  {
    ListSectionInfo.indexPath(offset:)(v3, a1);
  }
  return outlined destroy of ListSectionInfo((uint64_t)v7);
}

uint64_t CollectionViewListDataSource.firstCollectionViewIndex(of:)()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  return v1;
}

uint64_t closure #1 in CollectionViewListDataSource.firstCollectionViewIndex(of:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  result = ViewList.firstOffset(of:style:)();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t CollectionViewListDataSource.applyCollectionViewIDs(from:to:)()
{
  uint64_t v0;
  char v1;
  _QWORD v3[4];
  char v4;

  v4 = 0;
  outlined init with copy of TableColumnList(v0, (uint64_t)v3);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  AGWeakAttributeGetAttribute();
  v1 = ViewList.applyIDs(from:listAttribute:to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return v1 & 1;
}

BOOL closure #1 in CollectionViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, void (*a2)(_QWORD *, _BYTE *), uint64_t a3, _BYTE *a4)
{
  _QWORD v7[4];

  _ViewList_ID.canonicalID.getter();
  v7[0] = v7[2];
  v7[1] = v7[3];
  a2(v7, a4);
  swift_release();
  return (*a4 & 1) == 0;
}

uint64_t protocol witness for CollectionViewListDataSourceBase.sectionIndexLabel(forSectionAt:) in conformance CollectionViewListDataSource<A>(Swift::Int *a1)
{
  return CollectionViewListDataSource.sectionIndexLabel(forSectionAt:)(*a1).value._countAndFlagsBits;
}

void protocol witness for ListCoreDataSource.configureGlobalHeader(_:transaction:) in conformance CollectionViewListDataSource<A>(void *a1, uint64_t a2, uint64_t a3)
{
  specialized CollectionViewListDataSource.configureGlobalHeader(_:transaction:)(a1, a3);
}

uint64_t protocol witness for ListCoreDataSource.configureFooter(_:transaction:forSectionAt:) in conformance CollectionViewListDataSource<A>(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  return CollectionViewListDataSource.configureFooter(_:transaction:forSectionAt:)(a1, a2, *a3, a4);
}

uint64_t protocol witness for ListCoreDataSource.firstIndexPath<A>(for:) in conformance CollectionViewListDataSource<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CollectionViewListDataSource.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ListCoreDataSource.firstCollectionViewIndex(of:) in conformance CollectionViewListDataSource<A>()
{
  return CollectionViewListDataSource.firstCollectionViewIndex(of:)();
}

uint64_t outlined copy of SectionIndexLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined copy of SectionIndexLabel(a1, a2, a3);
  return a1;
}

uint64_t outlined copy of SectionIndexLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
    return swift_retain();
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t outlined consume of SectionIndexLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF)
    return outlined consume of SectionIndexLabel(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of SectionIndexLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
    return swift_release();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t specialized ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(_QWORD *a1)
{
  MEMORY[0x18D75B908]();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  AGWeakAttributeGetAttribute();
  swift_bridgeObjectRetain();
  ViewList.applySublists(from:list:transform:to:)();
  swift_bridgeObjectRelease();
  return static Update.end()();
}

{
  MEMORY[0x18D75B908]();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  AGWeakAttributeGetAttribute();
  swift_bridgeObjectRetain();
  ViewList.applySublists(from:list:transform:to:)();
  swift_bridgeObjectRelease();
  return static Update.end()();
}

uint64_t outlined init with copy of SectionAccumulator.Item(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SectionAccumulator.Item(a2, a1);
  return a2;
}

uint64_t outlined destroy of SectionAccumulator.Item(uint64_t a1)
{
  destroy for SectionAccumulator.Item(a1);
  return a1;
}

BOOL partial apply for closure #1 in CollectionViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CollectionViewListDataSource.applyCollectionViewIDs(from:to:)(a1, *(void (**)(_QWORD *, _BYTE *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE **)(v1 + 32));
}

uint64_t partial apply for closure #1 in CollectionViewListDataSource.firstCollectionViewIndex(of:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in CollectionViewListDataSource.firstCollectionViewIndex(of:)(*(_QWORD **)(v1 + 32), a1);
}

unint64_t specialized CollectionViewListDataSource.rowIDs(forSectionAt:)(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 56);
    if (*(_QWORD *)(v2 + 16) > result)
      return *(_QWORD *)(v2 + 184 * result + 128);
  }
  __break(1u);
  return result;
}

void specialized CollectionViewListDataSource.configureGlobalHeader(_:transaction:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for TableGlobalHeader();
  v5 = swift_dynamicCastClass();
  if (v5)
  {
    v6 = (void *)v5;
    v7 = a1;
    objc_msgSend(v6, sel_setAutomaticallyUpdatesContentConfiguration_, 0);
    v8 = v2 + *(int *)(a2 + 40);
    v9 = (uint64_t)v6 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader;
    swift_beginAccess();
    outlined assign with copy of TableHeaderView?(v8, v9);
    swift_endAccess();
    objc_msgSend(v6, sel_setNeedsUpdateConfiguration);

  }
}

uint64_t type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>;
  if (!lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>)
  {
    type metadata accessor for ModifiedContent<_ViewList_View, CollectionViewCellModifier>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for UIHostingConfiguration();
  }
  return result;
}

uint64_t outlined assign with copy of TableHeaderView?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableMutation.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 0x4449656C62617473;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableMutation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ArchivableMutation.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableMutation.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableMutation.CodingKeys()
{
  lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ArchivableMutation.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v3 = v1;
  type metadata accessor for KeyedEncodingContainer<ArchivableMutation.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableMutation.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *((_QWORD *)v3 + 3);
  v13 = *((_QWORD *)v3 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = *v3;
  v15 = *((_QWORD *)v3 + 2);
  v16 = 0;
  lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)&v14 = v11;
    *((_QWORD *)&v14 + 1) = v13;
    v16 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

unint64_t lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableMutation.CodingKeys, &unk_1E1AC8C60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableMutation.CodingKeys, &unk_1E1AC8C60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableMutation.CodingKeys, &unk_1E1AC8C60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableMutation.CodingKeys, &unk_1E1AC8C60);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6280], MEMORY[0x1E0CE6278]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity;
  if (!lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6288], MEMORY[0x1E0CE6278]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t ArchivableMutation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  type metadata accessor for KeyedEncodingContainer<ArchivableMutation.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableMutation.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v16 = 0;
    lazy protocol witness table accessor for type _DisplayList_StableIdentity and conformance _DisplayList_StableIdentity();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v17;
    v12 = v18;
    v16 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v14 = v17;
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 24) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void type metadata accessor for KeyedEncodingContainer<ArchivableMutation.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type ArchivableMutation.CodingKeys and conformance ArchivableMutation.CodingKeys();
    v7 = a3(a1, &unk_1E1AC8C60, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableMutation@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivableMutation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableMutation(_QWORD *a1)
{
  return ArchivableMutation.encode(to:)(a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ArchivableMutationsKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static ArchivableMutationsKey.defaultValue;
  return swift_bridgeObjectRetain();
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ArchivableMutationsKey(uint64_t a1, void (*a2)(_QWORD **__return_ptr))
{
  _QWORD *v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t key path setter for ArchivableMutationHandler.action : ArchivableMutationHandler(uint64_t *a1, uint64_t (**a2)(uint64_t a1, uint64_t a2))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @in_guaranteed Transaction) -> (@out ());
  a2[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return result;
}

uint64_t ArchivableMutationHandler.action.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t ArchivableMutationHandler.action.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ArchivableMutationHandler.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ArchivableMutationHandler.init(action:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t EnvironmentValues.archivableMutationHandler.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

double key path getter for EnvironmentValues.archivableMutationHandler : EnvironmentValues@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.archivableMutationHandler : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1, v2);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t EnvironmentValues.archivableMutationHandler.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
  outlined copy of AppIntentExecutor?(v2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
}

void (*EnvironmentValues.archivableMutationHandler.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.archivableMutationHandler.modify;
}

void EnvironmentValues.archivableMutationHandler.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = (*a1)[4];
  v5 = **a1;
  v6 = (*a1)[1];
  v3[2] = v5;
  v3[3] = v6;
  type metadata accessor for EnvironmentPropertyKey<ArchivableMutationHandler.Key>();
  outlined copy of AppIntentExecutor?(v5);
  if ((a2 & 1) != 0)
  {
    outlined copy of AppIntentExecutor?(v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
    v7 = *v3;
  }
  else
  {
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    v7 = v5;
  }
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  free(v3);
}

uint64_t sub_186FFE960@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @guaranteed Transaction) -> ();
  a2[1] = v5;
  return swift_retain();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t destroy for ArchivableMutation(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for ArchivableMutation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for ArchivableMutation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v3, v4);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t assignWithTake for ArchivableMutation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableMutation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ArchivableMutation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableMutation()
{
  return &type metadata for ArchivableMutation;
}

ValueMetadata *type metadata accessor for ArchivableMutationHandler()
{
  return &type metadata for ArchivableMutationHandler;
}

ValueMetadata *type metadata accessor for ArchivableMutationsKey()
{
  return &type metadata for ArchivableMutationsKey;
}

ValueMetadata *type metadata accessor for ArchivableMutationHandler.Key()
{
  return &type metadata for ArchivableMutationHandler.Key;
}

uint64_t storeEnumTagSinglePayload for ArchivableMutation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_186FFEC90 + 4 * byte_187C021B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_186FFECC4 + 4 * byte_187C021B0[v4]))();
}

uint64_t sub_186FFECC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FFECCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x186FFECD4);
  return result;
}

uint64_t sub_186FFECE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x186FFECE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_186FFECEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_186FFECF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ArchivableMutation.CodingKeys()
{
  return &unk_1E1AC8C60;
}

uint64_t specialized ArchivableMutation.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449656C62617473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_186FFEEC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @in_guaranteed Transaction) -> (@out ())(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t *);
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16);
  v5 = a2;
  return v3(a1, &v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ArchivableMutation, @guaranteed Transaction) -> ()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(a1, *a2);
}

void Table.init(of:selection:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[20];

  v17[3] = a7;
  v17[4] = a6;
  v17[6] = a5;
  v17[7] = a4;
  v17[5] = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17[2] = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 16);
  v17[0] = *(_QWORD *)(v12 + 24);
  v17[1] = v13;
  v17[14] = v14;
  v17[15] = a9;
  v17[8] = v15;
  v17[16] = v15;
  v17[17] = a11;
  v17[18] = v16;
  type metadata accessor for Table();
}

uint64_t sub_186FFEFE0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = (_OWORD *)(v1 + a1[16]);
  *(_OWORD *)((char *)v7 + 41) = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  *v7 = 0u;
  v8 = (uint64_t *)(v1 + a1[17]);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v9 = v1 + a1[18];
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v6 - 168) = v3;
  outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(v3, (uint64_t)v7);
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v8, v8[1]);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (v4)
  {
    v10 = v5;
    *(_QWORD *)(v6 - 160) = v5;
    *(_QWORD *)(v6 - 152) = v4;
    v11 = *(_QWORD *)(v6 - 240);
    *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 232);
    *(_QWORD *)(v6 - 136) = v11;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v2);
    type metadata accessor for TableColumnCustomization(255, v2, AssociatedConformanceWitness, v13);
    type metadata accessor for Binding();
    v15 = type metadata accessor for TableColumnCustomization.ToAnyCustomization(0, v2, AssociatedConformanceWitness, v14);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.ToAnyCustomization, v15);
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v10, v4);
    v16 = *(_QWORD *)(v6 - 128);
    v17 = *(_QWORD *)(v6 - 120);
    v18 = *(_QWORD *)(v6 - 112);
    v4 = *(_QWORD *)(v6 - 104);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
  }
  v19 = outlined consume of Binding<AnyTableColumnCustomization>?(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
  *(_QWORD *)v9 = v16;
  *(_QWORD *)(v9 + 8) = v17;
  *(_QWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 24) = v4;
  v20 = (*(uint64_t (**)(uint64_t))(v6 - 208))(v19);
  v21 = *(_QWORD *)(v6 - 224);
  (*(void (**)(uint64_t))(v6 - 184))(v20);
  outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?(*(_QWORD *)(v6 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 200) + 32))(v1, v21, *(_QWORD *)(v6 - 176));
}

void static Table._makeViewList(view:inputs:)()
{
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for Table();
}

void sub_186FFF2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;

  *(_QWORD *)(v9 + 64) = type metadata accessor for _GraphValue();
  v14 = v10;
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  v15 = _GraphValue.value.getter();
  *(_QWORD *)(v9 + 96) = v10;
  v17 = AnyRowSource.init<A>(_:)(v15, v10, v11, v16);
  v19 = v18;
  v21 = v20;
  v22 = HIDWORD(v20);
  lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput();
  PropertyList.subscript.getter();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v17;
  *(_QWORD *)(v23 + 24) = v19;
  *(_DWORD *)(v23 + 32) = v21;
  *(_DWORD *)(v23 + 36) = v22;
  *(_QWORD *)(v23 + 40) = *(_QWORD *)(v9 + 272);
  *(_QWORD *)(v13 - 200) = v23;
  PropertyList.subscript.setter();
  v24 = *(_QWORD *)(v9 + 120);
  *(_QWORD *)(v9 + 160) = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v9 + 168) = v14;
  v25 = *(_QWORD *)(v9 + 104);
  *(_QWORD *)(v9 + 176) = v12;
  *(_QWORD *)(v9 + 184) = v25;
  *(_QWORD *)(v9 + 192) = v24;
  *(_DWORD *)(v9 + 272) = *(_DWORD *)(v9 + 92);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  v26 = _GraphValue.value.getter();
  *(_QWORD *)(v9 + 72) = v12;
  v28 = AnyColumnSource.init<A>(_:)(v26, v12, v24, v27);
  v30 = v29;
  v32 = v31;
  v33 = HIDWORD(v31);
  lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput();
  v34 = v25;
  PropertyList.subscript.getter();
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v28;
  *(_QWORD *)(v35 + 24) = v30;
  *(_DWORD *)(v35 + 32) = v32;
  *(_DWORD *)(v35 + 36) = v33;
  *(_QWORD *)(v35 + 40) = *(_QWORD *)(v9 + 272);
  *(_QWORD *)(v13 - 200) = v35;
  v36 = *(_QWORD *)(v9 + 112);
  v37 = *(_QWORD *)(v9 + 96);
  PropertyList.subscript.setter();
  v38 = *MEMORY[0x1E0CFED28];
  *(_QWORD *)(v9 + 272) = *(_QWORD *)(v9 + 16);
  *(_DWORD *)(v9 + 280) = *(_DWORD *)(v9 + 48);
  *(_QWORD *)(v9 + 288) = *(_QWORD *)v9;
  *(_DWORD *)(v9 + 296) = *(_DWORD *)(v9 + 40);
  *(_DWORD *)(v9 + 300) = *(_DWORD *)(v9 + 36);
  *(_DWORD *)(v9 + 304) = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 308) = *(_DWORD *)(v9 + 28);
  *(_QWORD *)(v9 + 312) = *(_QWORD *)(v9 + 8);
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v42 = _GraphInputs.selectionStorage<A>(forType:)(AssociatedTypeWitness, AssociatedTypeWitness, AssociatedConformanceWitness, v41);
  v44 = v43;
  v45 = SelectionBasedStorage.$menu.getter(v42);
  if ((v45 & 0x100000000) == 0)
  {
    *(_QWORD *)(v9 + 48) = &a9;
    *(_DWORD *)(v13 - 200) = v45;
    MEMORY[0x1E0C80A78](v45, v46);
    *(_QWORD *)(v9 + 272) = v36;
    *(_QWORD *)(v9 + 280) = v37;
    *(_QWORD *)(v9 + 288) = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v9 + 296) = v34;
    *(_QWORD *)(v9 + 304) = *(_QWORD *)(v9 + 120);
    type metadata accessor for Table.ChildSelectionMenu();
  }
  *(_DWORD *)(v9 + 48) = v38;
  v47 = *(_QWORD *)(v9 + 80);
  v48 = SelectionBasedStorage.$action.getter(v42, v44);
  if ((v48 & 0x100000000) == 0)
  {
    *(_QWORD *)(v9 + 40) = &a9;
    *(_DWORD *)(v13 - 200) = v48;
    MEMORY[0x1E0C80A78](v48, v49);
    v50 = *(_QWORD *)(v9 + 96);
    *(_QWORD *)(v9 + 272) = *(_QWORD *)(v9 + 112);
    *(_QWORD *)(v9 + 280) = v50;
    v51 = *(_QWORD *)(v9 + 104);
    *(_QWORD *)(v9 + 288) = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v9 + 296) = v51;
    *(_QWORD *)(v9 + 304) = *(_QWORD *)(v9 + 120);
    type metadata accessor for Table.ChildSelectionAction();
  }
  *(_QWORD *)(v9 + 80) = v47;
  v52 = SelectionBasedStorage.$isSelectionEnabled.getter(v42, v44);
  v54 = *(_QWORD *)(v9 + 120);
  v55 = *(_QWORD *)(v9 + 72);
  if ((v52 & 0x100000000) == 0)
  {
    *(_DWORD *)(v13 - 200) = v52;
    MEMORY[0x1E0C80A78](v52, v53);
    v56 = *(_QWORD *)(v9 + 96);
    *(_QWORD *)(v9 + 272) = *(_QWORD *)(v9 + 112);
    *(_QWORD *)(v9 + 280) = v56;
    v57 = *(_QWORD *)(v9 + 104);
    *(_QWORD *)(v9 + 288) = v55;
    *(_QWORD *)(v9 + 296) = v57;
    *(_QWORD *)(v9 + 304) = v54;
    type metadata accessor for Table.ChildSelectionEnabled();
  }
  v58 = *(_DWORD *)(v9 + 48);
  if (v58 != v38)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _GraphInputs.SelectionBasedStorageKey<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey);
    *(_DWORD *)(v9 + 272) = v58;
    *(_DWORD *)(v9 + 276) = v38;
    *(_DWORD *)(v9 + 280) = v38;
    *(_DWORD *)(v9 + 284) = v38;
    lazy protocol witness table accessor for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>();
    PropertyList.subscript.setter();
  }
  *(_BYTE *)(v9 + 272) = 1;
  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  PropertyList.subscript.setter();
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>();
  *(_DWORD *)(v9 + 272) = *(_DWORD *)(v9 + 92);
  *(_DWORD *)(v13 - 200) = _GraphValue.value.getter();
  v59 = *(_QWORD *)(v9 + 96);
  *(_QWORD *)(v9 + 272) = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v9 + 280) = v59;
  v60 = *(_QWORD *)(v9 + 104);
  *(_QWORD *)(v9 + 288) = v55;
  *(_QWORD *)(v9 + 296) = v60;
  *(_QWORD *)(v9 + 304) = v54;
  type metadata accessor for Table.Child();
}

uint64_t sub_186FFF8E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Table<A, B, C>.Child, a1);
  _GraphValue.init<A>(_:)();
  v4 = *(_DWORD *)(v3 - 184);
  v5 = *(_QWORD *)(v3 - 176);
  v6 = *(_QWORD *)(v3 - 152);
  v7 = *(_DWORD *)(v3 - 128);
  v8 = *(_QWORD *)(v3 - 120);
  v9 = *(_BYTE *)(v3 - 112);
  *(_QWORD *)(v1 + 272) = *(_QWORD *)(v3 - 192);
  *(_DWORD *)(v1 + 280) = v4;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(v2 + 120);
  *(_QWORD *)(v1 + 288) = v5;
  *(_QWORD *)(v1 + 312) = v6;
  *(_OWORD *)(v1 + 320) = *(_OWORD *)(v3 - 144);
  *(_DWORD *)(v1 + 336) = v7;
  *(_QWORD *)(v1 + 344) = v8;
  *(_BYTE *)(v1 + 352) = v9;
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>();
  static View.makeDebuggableViewList(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void closure #1 in static Table._makeViewList(view:inputs:)()
{
  type metadata accessor for Table();
}

uint64_t sub_186FFFA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 60);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

uint64_t partial apply for closure #1 in static Table._makeViewList(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in static Table._makeViewList(view:inputs:));
}

void type metadata accessor for Table()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type RowSourceInput and conformance RowSourceInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RowSourceInput and conformance RowSourceInput;
  if (!lazy protocol witness table cache variable for type RowSourceInput and conformance RowSourceInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RowSourceInput, &type metadata for RowSourceInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RowSourceInput and conformance RowSourceInput);
  }
  return result;
}

uint64_t sub_186FFFAC8()
{
  swift_release();
  return swift_deallocObject();
}

void closure #2 in static Table._makeViewList(view:inputs:)()
{
  type metadata accessor for Table();
}

uint64_t sub_186FFFB20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

uint64_t partial apply for closure #2 in static Table._makeViewList(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static Table._makeViewList(view:inputs:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in static Table._makeViewList(view:inputs:));
}

uint64_t partial apply for closure #1 in static Table._makeViewList(view:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

unint64_t lazy protocol witness table accessor for type ColumnSourceInput and conformance ColumnSourceInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ColumnSourceInput and conformance ColumnSourceInput;
  if (!lazy protocol witness table cache variable for type ColumnSourceInput and conformance ColumnSourceInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ColumnSourceInput, &type metadata for ColumnSourceInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnSourceInput and conformance ColumnSourceInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>;
  if (!lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _GraphInputs.SelectionBasedStorageKey<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.SelectionBasedStorageKey<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>);
  }
}

void type metadata accessor for Table.Child()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for LazyContainerModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, LazyContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle();
    v3[1] = &protocol witness table for AccessibilityAttachmentModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedTableStyle and conformance ResolvedTableStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTableStyle, &type metadata for ResolvedTableStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTableStyle, &type metadata for ResolvedTableStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTableStyle and conformance ResolvedTableStyle);
  }
  return result;
}

void Table.Child.table.getter()
{
  type metadata accessor for Table();
}

uint64_t sub_186FFFE3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void Table.Child.value.getter()
{
  type metadata accessor for Table();
}

void sub_186FFFED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v9[2] = (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  MEMORY[0x1E0C80A78](v14, v15);
  *v9 = v10;
  Table.Child.table.getter();
}

void sub_186FFFF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?(v3 + *(int *)(v2 + 64), v0 + 160);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  Table.Child.table.getter();
}

void sub_186FFFFA8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (uint64_t *)(v2 + *(int *)(v3 + 68));
  v6 = *v4;
  v5 = v4[1];
  *(_QWORD *)(v0 + 8) = v5;
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v6, v5);
  v1(v2, v3);
  Table.Child.table.getter();
}

uint64_t sub_186FFFFF8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (uint64_t *)(v2 + *(int *)(v4 + 72));
  v7 = v2;
  v8 = *v6;
  v9 = v6[1];
  v10 = v6[2];
  v11 = v6[3];
  outlined copy of Binding<AnyTableColumnCustomization>?(*v6, v9);
  v1(v7, v4);
  outlined init with take of Binding<SelectionManagerBox<AnyHashable>>?(v0 + 160, v0 + 40);
  v12 = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(v0 + 104) = v5;
  *(_QWORD *)(v0 + 112) = v12;
  *(_QWORD *)(v0 + 120) = v3;
  *(_QWORD *)(v0 + 128) = v8;
  *(_QWORD *)(v0 + 136) = v9;
  *(_QWORD *)(v0 + 144) = v10;
  *(_QWORD *)(v0 + 152) = v11;
  static AccessibilityVisibility.containerElement.getter();
  specialized View.accessibility<A>(_:_:isEnabled:)(*(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned int *)(v0 + 36) << 32), 1, v0 + 160);
  outlined destroy of ResolvedTableStyle(v0 + 40);
  outlined init with copy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(v0 + 160, *(_QWORD *)(v0 + 24));
  return outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(v0 + 160, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

uint64_t (*Table.ChildSelectionMenu.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t *Value;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  Value = (uint64_t *)AGGraphGetValue();
  v13 = *Value;
  v12 = Value[1];
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v14[7] = v13;
  v14[8] = v12;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out PlatformItemList);
}

double protocol witness for static Rule.initialValue.getter in conformance Table<A, B, C>.Child@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void protocol witness for Rule.value.getter in conformance Table<A, B, C>.Child()
{
  Table.Child.value.getter();
}

uint64_t (*Table.ChildSelectionMenu.value.getter(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t v12;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a6;
  *(_DWORD *)(v12 + 56) = a1;
  return partial apply for closure #1 in Table.ChildSelectionMenu.value.getter;
}

uint64_t closure #1 in Table.ChildSelectionMenu.value.getter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  int64_t v32;
  void (*v33)(_BYTE *, uint64_t);
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  char v39;
  void (*v40)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(_OWORD *__return_ptr, _OWORD *);
  uint64_t v43;
  _BYTE v44[12];
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t AssociatedConformanceWitness;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;

  v50 = a7;
  v48 = a5;
  v45 = a2;
  v49 = a6;
  v47 = a4;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = type metadata accessor for Optional();
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v44[-v12];
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v44[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = &v44[-v21];
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = &v44[-v25];
  v46 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v60 = Set.init()();
  v27 = *(_QWORD *)(a1 + 56);
  v54 = a1 + 56;
  v28 = 1 << *(_BYTE *)(a1 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v55 = (unint64_t)(v28 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v32 = 0;
LABEL_5:
  if (v30)
  {
LABEL_6:
    v34 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    v35 = v34 | (v32 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v36 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v36 >= v55)
      goto LABEL_24;
    v37 = *(_QWORD *)(v54 + 8 * v36);
    ++v32;
    if (!v37)
    {
      v32 = v36 + 1;
      if (v36 + 1 >= v55)
        goto LABEL_24;
      v37 = *(_QWORD *)(v54 + 8 * v32);
      if (!v37)
      {
        v32 = v36 + 2;
        if (v36 + 2 >= v55)
          goto LABEL_24;
        v37 = *(_QWORD *)(v54 + 8 * v32);
        if (!v37)
          break;
      }
    }
LABEL_20:
    v30 = (v37 - 1) & v37;
    v35 = __clz(__rbit64(v37)) + (v32 << 6);
LABEL_21:
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v35, (uint64_t)v58);
    v56[0] = v58[0];
    v56[1] = v58[1];
    v57 = v59;
    v39 = swift_dynamicCast();
    v40 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    if ((v39 & 1) != 0)
    {
      v40(v13, 0, 1, AssociatedTypeWitness);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v26, v13, AssociatedTypeWitness);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16))(v18, v26, AssociatedTypeWitness);
      type metadata accessor for Set();
      Set.insert(_:)();
      v33 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
      v33(v22, AssociatedTypeWitness);
      result = ((uint64_t (*)(_BYTE *, uint64_t))v33)(v26, AssociatedTypeWitness);
      goto LABEL_5;
    }
    v40(v13, 1, 1, AssociatedTypeWitness);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v52 + 8))(v13, v53);
    if (v30)
      goto LABEL_6;
  }
  v38 = v36 + 3;
  if (v38 >= v55)
  {
LABEL_24:
    swift_release();
    Table.ChildSelectionMenu.base.getter(v45, v46, v47, v48, v49, v50);
    v42 = *(void (**)(_OWORD *__return_ptr, _OWORD *))(v41 + 56);
    *(_QWORD *)&v58[0] = v60;
    v42(v56, v58);
    v43 = *(_QWORD *)&v56[0];
    swift_release();
    swift_bridgeObjectRelease();
    return v43;
  }
  v37 = *(_QWORD *)(v54 + 8 * v38);
  if (v37)
  {
    v32 = v38;
    goto LABEL_20;
  }
  while (1)
  {
    v32 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v32 >= v55)
      goto LABEL_24;
    v37 = *(_QWORD *)(v54 + 8 * v32);
    ++v38;
    if (v37)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t (*Table.ChildSelectionAction.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t *Value;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t);

  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  Value = (uint64_t *)AGGraphGetValue();
  v12 = *Value;
  v13 = Value[1];
  if (*Value)
  {
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = a2;
    v14[3] = a3;
    v14[4] = a4;
    v14[5] = a5;
    v14[6] = a6;
    v14[7] = v12;
    v15 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out ());
    v14[8] = v13;
  }
  else
  {
    v15 = 0;
  }
  outlined copy of AppIntentExecutor?(v12);
  return v15;
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Table.ChildSelectionMenu.value.getter, (uint64_t)partial apply for closure #1 in Table.ChildSelectionMenu.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> (@owned PlatformItemList), a2);
}

uint64_t (*Table.ChildSelectionAction.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t (*result)(uint64_t);
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  _QWORD *v15;

  result = Table.ChildSelectionAction.base.getter(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    v13 = result;
    v14 = v12;
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = a4;
    v15[5] = a5;
    v15[6] = a6;
    v15[7] = v13;
    result = partial apply for closure #1 in Table.ChildSelectionAction.value.getter;
    v15[8] = v14;
  }
  return result;
}

uint64_t closure #1 in Table.ChildSelectionAction.value.getter(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  int64_t v27;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  char v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v36[2];
  void (*v37)(uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;

  v36[1] = a3;
  v37 = a2;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for Optional();
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v36 - v7;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v36 - v16;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v36 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v48 = Set.init()();
  v22 = *(_QWORD *)(a1 + 56);
  v41 = a1 + 56;
  v23 = 1 << *(_BYTE *)(a1 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v42 = (unint64_t)(v23 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v27 = 0;
LABEL_5:
  if (v25)
  {
LABEL_6:
    v29 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    v30 = v29 | (v27 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v31 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v31 >= v42)
      goto LABEL_24;
    v32 = *(_QWORD *)(v41 + 8 * v31);
    ++v27;
    if (!v32)
    {
      v27 = v31 + 1;
      if (v31 + 1 >= v42)
        goto LABEL_24;
      v32 = *(_QWORD *)(v41 + 8 * v27);
      if (!v32)
      {
        v27 = v31 + 2;
        if (v31 + 2 >= v42)
          goto LABEL_24;
        v32 = *(_QWORD *)(v41 + 8 * v27);
        if (!v32)
          break;
      }
    }
LABEL_20:
    v25 = (v32 - 1) & v32;
    v30 = __clz(__rbit64(v32)) + (v27 << 6);
LABEL_21:
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v30, (uint64_t)v46);
    v43 = v46[0];
    v44 = v46[1];
    v45 = v47;
    v34 = swift_dynamicCast();
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    if ((v34 & 1) != 0)
    {
      v35(v8, 0, 1, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v21, v8, AssociatedTypeWitness);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v21, AssociatedTypeWitness);
      type metadata accessor for Set();
      Set.insert(_:)();
      v28 = *(void (**)(char *, uint64_t))(v9 + 8);
      v28(v17, AssociatedTypeWitness);
      result = ((uint64_t (*)(char *, uint64_t))v28)(v21, AssociatedTypeWitness);
      goto LABEL_5;
    }
    v35(v8, 1, 1, AssociatedTypeWitness);
    result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v40);
    if (v25)
      goto LABEL_6;
  }
  v33 = v31 + 3;
  if (v33 >= v42)
  {
LABEL_24:
    swift_release();
    v37(v48);
    return swift_bridgeObjectRelease();
  }
  v32 = *(_QWORD *)(v41 + 8 * v33);
  if (v32)
  {
    v27 = v33;
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v27 >= v42)
      goto LABEL_24;
    v32 = *(_QWORD *)(v41 + 8 * v27);
    ++v33;
    if (v32)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t (*Table.ChildSelectionEnabled.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  uint64_t *Value;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  Value = (uint64_t *)AGGraphGetValue();
  v13 = *Value;
  v12 = Value[1];
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v14[7] = v13;
  v14[8] = v12;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Identifiable.ID) -> (@out Bool);
}

double protocol witness for static Rule.initialValue.getter in conformance Table<A, B, C>.ChildSelectionAction@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_187BFE310;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionAction@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *);

  result = (uint64_t)Table.ChildSelectionAction.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a1[6]);
  if (result)
  {
    v6 = result;
    v7 = v5;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
    *(_QWORD *)(result + 24) = v7;
    v8 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> ();
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
  a2[1] = result;
  return result;
}

uint64_t (*Table.ChildSelectionEnabled.value.getter(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t a1)
{
  uint64_t v12;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  *(_QWORD *)(v12 + 48) = a6;
  *(_DWORD *)(v12 + 56) = a1;
  return partial apply for closure #1 in Table.ChildSelectionEnabled.value.getter;
}

uint64_t closure #1 in Table.ChildSelectionEnabled.value.getter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[4];
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];

  v29 = a5;
  v30 = a7;
  v28 = a2;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = &v27[-v15];
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v27[-v20];
  outlined init with copy of AnyHashable(a1, (uint64_t)v31);
  v22 = swift_dynamicCast();
  v23 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if ((v22 & 1) != 0)
  {
    v23(v16, 0, 1, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v21, v16, AssociatedTypeWitness);
    Table.ChildSelectionEnabled.base.getter(v28, a3, a4, v29, a6, v30);
    (*(void (**)(_QWORD *__return_ptr, _BYTE *))(v24 + 56))(v31, v21);
    v25 = LOBYTE(v31[0]);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
  }
  else
  {
    v23(v16, 1, 1, AssociatedTypeWitness);
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
    return 0;
  }
  return v25;
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionEnabled@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Table.ChildSelectionEnabled.value.getter, (uint64_t)partial apply for closure #1 in Table.ChildSelectionEnabled.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed AnyHashable) -> (@unowned Bool), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance Table<A, B, C>.ChildSelectionMenu@<X0>(_QWORD *a1@<X0>, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  unsigned int *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  a2(*v5, a1[2], a1[3], a1[4], a1[5], a1[6]);
  v10 = v9;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = v10;
  *a5 = a4;
  a5[1] = result;
  return result;
}

void Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[30];

  v23[13] = a8;
  v23[14] = a7;
  v23[10] = a9;
  v23[11] = a10;
  v23[4] = a17;
  v23[15] = *(_QWORD *)(a13 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v23[12] = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[3] = *v18;
  v23[7] = v18[1];
  v23[2] = v18[2];
  v23[24] = a11;
  v23[25] = v19;
  v23[1] = v19;
  v23[17] = v20;
  v23[26] = v20;
  v23[27] = v21;
  v23[0] = v21;
  v23[28] = v22;
  type metadata accessor for Table();
}

uint64_t sub_187001154(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = (_OWORD *)(v8 + a1[16]);
  *(_OWORD *)((char *)v10 + 41) = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  *v10 = 0u;
  v11 = (uint64_t *)(v8 + a1[17]);
  *v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  v12 = a1[18];
  *(_QWORD *)(v9 - 256) = v8;
  v13 = v8 + v12;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)(v9 - 168) = v4;
  outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(v4, (uint64_t)v10);
  *(_QWORD *)(v9 - 176) = v3;
  *(_QWORD *)(v9 - 160) = v3;
  *(_QWORD *)(v9 - 152) = v5;
  *(_QWORD *)(v9 - 192) = v5;
  *(_QWORD *)(v9 - 248) = v2;
  *(_QWORD *)(v9 - 144) = v2;
  type metadata accessor for Array();
  type metadata accessor for Binding();
  v15 = type metadata accessor for ToAnyComparatorArray(0, v7, *(_QWORD *)(v9 - 288), v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToAnyComparatorArray<A>, v15);
  v16 = *(_QWORD *)(v9 - 264);
  Binding.projecting<A>(_:)();
  *(_OWORD *)(v9 - 288) = *(_OWORD *)(v9 - 128);
  v17 = *(_QWORD *)(v9 - 112);
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v11, v11[1]);
  *(_OWORD *)v11 = *(_OWORD *)(v9 - 288);
  v11[2] = v17;
  if (v16)
  {
    v18 = *(_QWORD *)(v9 - 296);
    *(_QWORD *)(v9 - 160) = v18;
    *(_QWORD *)(v9 - 152) = v16;
    *(_QWORD *)(v9 - 144) = *(_QWORD *)(v9 - 304);
    *(_QWORD *)(v9 - 136) = v1;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v6);
    type metadata accessor for TableColumnCustomization(255, v6, AssociatedConformanceWitness, v20);
    type metadata accessor for Binding();
    v22 = type metadata accessor for TableColumnCustomization.ToAnyCustomization(0, v6, AssociatedConformanceWitness, v21);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.ToAnyCustomization, v22);
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v18, v16);
    v23 = *(_QWORD *)(v9 - 128);
    v24 = *(_QWORD *)(v9 - 120);
    v25 = *(_QWORD *)(v9 - 112);
    v26 = *(_QWORD *)(v9 - 104);
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
  }
  v27 = outlined consume of Binding<AnyTableColumnCustomization>?(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
  *(_QWORD *)v13 = v23;
  *(_QWORD *)(v13 + 8) = v24;
  *(_QWORD *)(v13 + 16) = v25;
  *(_QWORD *)(v13 + 24) = v26;
  v28 = *(_QWORD *)(v9 - 256);
  v29 = (*(uint64_t (**)(uint64_t))(v9 - 240))(v27);
  v30 = *(_QWORD *)(v9 - 224);
  (*(void (**)(uint64_t))(v9 - 208))(v29);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?(*(_QWORD *)(v9 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 - 200) + 32))(v28, v30, *(_QWORD *)(v9 - 184));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Table<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Table<A, B, C>, a3);
  return static MultiView._makeView(view:inputs:)();
}

void protocol witness for static View._makeViewList(view:inputs:) in conformance Table<A, B, C>()
{
  static Table._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Table<A, B, C>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Table<A, B, C>);
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance Table<A, B, C>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for Table<A, B, C>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t closure #1 in ToAnyComparatorArray.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  return SwiftUIAnySortComparator.init<A>(_:)((uint64_t)v9, a2, a3, a4);
}

uint64_t protocol witness for Projection.get(base:) in conformance ToAnyComparatorArray<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized ToAnyComparatorArray.get(base:)(*a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToAnyComparatorArray<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return specialized ToAnyComparatorArray.set(base:newValue:)(a1, *a2, *(char **)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void Table.init<A>(sortOrder:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD v14[2];
  _OWORD v15[4];

  memset(v15, 0, 57);
  memset(v14, 0, sizeof(v14));
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(a1, (uint64_t)v15, a1, a2, a3, (uint64_t)v14, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void Table.init<A>(selection:sortOrder:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v27[2];
  _BYTE v28[72];

  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v18 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v18);
  v19 = Binding.projecting<A>(_:)();
  memset(v27, 0, sizeof(v27));
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v19, (uint64_t)v28, a2, a3, a4, (uint64_t)v27, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_187001734()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init<A>(selection:sortOrder:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v27[2];
  _BYTE v28[72];

  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v20 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v19);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v20);
  v21 = Binding.projecting<A>(_:)();
  memset(v27, 0, sizeof(v27));
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v21, (uint64_t)v28, a4, a5, a6, (uint64_t)v27, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_1870018F4()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void Table.init<A>(_:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  _OWORD v25[4];

  memset(v25, 0, 57);
  memset(v24, 0, sizeof(v24));
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = type metadata accessor for TableForEachContent(0, a6, a8, AssociatedConformanceWitness);
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v15);
  Table.init(of:selection:columnCustomization:columns:rows:)(v16, (uint64_t)v25, (uint64_t)v24, a2, a3, (uint64_t)partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v17, a4, v15, a5, v16);
}

uint64_t sub_187001A08()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void Table.init<A>(_:selection:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  _BYTE v31[72];

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v17 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, v15, v16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v17);
  Binding.projecting<A>(_:)();
  memset(v30, 0, sizeof(v30));
  v24 = a5;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a9;
  v29 = a1;
  v18 = type metadata accessor for TableForEachContent(0, a7, a9, AssociatedConformanceWitness);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v18);
  Table.init(of:selection:columnCustomization:columns:rows:)(v19, (uint64_t)v31, (uint64_t)v30, a3, a4, (uint64_t)partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v23, a5, v18, a6, v19);
}

uint64_t sub_187001BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v3, v0);
}

void Table.init<A>(_:selection:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  _BYTE v31[72];

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v17 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, v15, v16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v17);
  Binding.projecting<A>(_:)();
  memset(v30, 0, sizeof(v30));
  v24 = a7;
  v25 = a8;
  v26 = a9;
  v27 = a10;
  v28 = a11;
  v29 = a1;
  v18 = type metadata accessor for TableForEachContent(0, a9, a11, AssociatedConformanceWitness);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v18);
  Table.init(of:selection:columnCustomization:columns:rows:)(v19, (uint64_t)v31, (uint64_t)v30, a5, a6, (uint64_t)partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v23, a7, v18, a8, v19);
}

uint64_t sub_187001D88()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init<A, B>(_:sortOrder:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  _OWORD v33[5];

  memset(v33, 0, 57);
  memset(v32, 0, sizeof(v32));
  v24 = a7;
  v25 = a8;
  v26 = a9;
  v27 = a10;
  v28 = a11;
  v29 = a12;
  v30 = a13;
  v31 = a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = type metadata accessor for TableForEachContent(0, a9, a12, AssociatedConformanceWitness);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v17);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v18, (uint64_t)v33, a2, a3, a4, (uint64_t)v32, a5, a6, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v23, a7, v17, a8, a10, v18, a11, a13);
}

uint64_t sub_187001EC4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init<A, B>(_:selection:sortOrder:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  _BYTE v38[72];

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v19 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, v17, v18);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v19);
  Binding.projecting<A>(_:)();
  memset(v37, 0, sizeof(v37));
  v29 = a8;
  v30 = a9;
  v31 = a10;
  v32 = a11;
  v33 = a12;
  v34 = a13;
  v35 = a14;
  v36 = a1;
  v20 = type metadata accessor for TableForEachContent(0, a10, a13, AssociatedConformanceWitness);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v20);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v21, (uint64_t)v38, a3, a4, a5, (uint64_t)v37, a6, a7, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v28, a8, v20, a9, a11, v21, a12, a14);
}

uint64_t sub_1870020A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

void Table.init<A, B>(_:selection:sortOrder:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  _BYTE v38[72];

  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v20 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, v18, v19);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v20);
  Binding.projecting<A>(_:)();
  memset(v37, 0, sizeof(v37));
  v29 = a10;
  v30 = a11;
  v31 = a12;
  v32 = a13;
  v33 = a14;
  v34 = a15;
  v35 = a16;
  v36 = a1;
  v21 = type metadata accessor for TableForEachContent(0, a12, a15, AssociatedConformanceWitness);
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v21);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v22, (uint64_t)v38, a5, a6, a7, (uint64_t)v37, a8, a9, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v28, a10, v21, a11, a13, v22, a14, a16);
}

uint64_t sub_18700229C()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init(of:columnCustomization:columns:rows:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[4];

  v10 = *a2;
  v11 = a2[3];
  memset(v15, 0, 57);
  v13 = *(_OWORD *)(a2 + 1);
  v14 = v11;
  v12 = v10;
  Table.init(of:selection:columnCustomization:columns:rows:)(a1, (uint64_t)v15, (uint64_t)&v12, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Table.init(of:selection:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[72];

  v13 = *a3;
  v14 = a3[3];
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = *(_OWORD *)(a3 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v18 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v18);
  v19 = Binding.projecting<A>(_:)();
  v25 = v13;
  v26 = v20;
  v27 = v14;
  Table.init(of:selection:columnCustomization:columns:rows:)(v19, (uint64_t)v28, (uint64_t)&v25, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1870024C0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init(of:selection:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[72];

  v20 = *a5;
  v21 = a5[3];
  v25 = a2;
  *(_QWORD *)&v26 = a3;
  *((_QWORD *)&v26 + 1) = a4;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = *(_OWORD *)(a5 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v17 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v17);
  v18 = Binding.projecting<A>(_:)();
  v25 = v20;
  v26 = v19;
  v27 = v21;
  Table.init(of:selection:columnCustomization:columns:rows:)(v18, (uint64_t)v28, (uint64_t)&v25, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_18700267C()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void Table.init<A>(of:sortOrder:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[4];

  v16 = *a5;
  v17 = a5[3];
  memset(v21, 0, 57);
  v18 = v16;
  v19 = *(_OWORD *)(a5 + 1);
  v20 = v17;
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(a1, (uint64_t)v21, a2, a3, a4, (uint64_t)&v18, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[72];

  v18 = *a6;
  v19 = a6[3];
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = *(_OWORD *)(a6 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v23 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v23);
  v24 = Binding.projecting<A>(_:)();
  v31 = v18;
  v32 = v25;
  v33 = v19;
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v24, (uint64_t)v34, a3, a4, a5, (uint64_t)&v31, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_1870028D8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[72];

  v26 = *a8;
  v27 = a8[3];
  v31 = a2;
  *(_QWORD *)&v32 = a3;
  *((_QWORD *)&v32 + 1) = a4;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = *(_OWORD *)(a8 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v23 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v23);
  v24 = Binding.projecting<A>(_:)();
  v31 = v26;
  v32 = v25;
  v33 = v27;
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v24, (uint64_t)v34, a5, a6, a7, (uint64_t)&v31, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

uint64_t sub_187002AE0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void Table.init<A>(_:columnCustomization:columns:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[4];

  v14 = *a2;
  v15 = a2[3];
  memset(v29, 0, 57);
  v25 = a1;
  v26 = v14;
  v27 = *(_OWORD *)(a2 + 1);
  v28 = v15;
  v20 = a5;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  v24 = a9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = type metadata accessor for TableForEachContent(0, a7, a9, AssociatedConformanceWitness);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v17);
  Table.init(of:selection:columnCustomization:columns:rows:)(v18, (uint64_t)v29, (uint64_t)&v26, a3, a4, (uint64_t)partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v19, a5, v17, a6, v18);
}

uint64_t sub_187002C08()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

void Table.init<A>(_:selection:columnCustomization:columns:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[72];

  v22 = *a3;
  v23 = a3[3];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = swift_getAssociatedConformanceWitness();
  v21 = *(_OWORD *)(a3 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v18 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, v16, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v18);
  Binding.projecting<A>(_:)();
  v34 = v22;
  v35 = v21;
  v36 = v23;
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = a9;
  v32 = a10;
  v33 = a1;
  v19 = type metadata accessor for TableForEachContent(0, a8, a10, AssociatedConformanceWitness);
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v19);
  Table.init(of:selection:columnCustomization:columns:rows:)(v20, (uint64_t)v37, (uint64_t)&v34, a4, a5, (uint64_t)partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v27, a6, v19, a7, v20);
}

uint64_t sub_187002DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v3, v0);
}

void Table.init<A>(_:selection:columnCustomization:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[72];

  v22 = *a5;
  v23 = a5[3];
  v34 = a2;
  *(_QWORD *)&v35 = a3;
  *((_QWORD *)&v35 + 1) = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = swift_getAssociatedConformanceWitness();
  v21 = *(_OWORD *)(a5 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v18 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, v16, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v18);
  Binding.projecting<A>(_:)();
  v34 = v22;
  v35 = v21;
  v36 = v23;
  v28 = a8;
  v29 = a9;
  v30 = a10;
  v31 = a11;
  v32 = a12;
  v33 = a1;
  v19 = type metadata accessor for TableForEachContent(0, a10, a12, AssociatedConformanceWitness);
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v19);
  Table.init(of:selection:columnCustomization:columns:rows:)(v20, (uint64_t)v37, (uint64_t)&v34, a6, a7, (uint64_t)partial apply for closure #1 in Table.init<A>(_:columns:), (uint64_t)v27, a8, v19, a9, v20);
}

uint64_t sub_187002FC4()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t closure #1 in Table.init<A>(_:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for TableForEachContent(0, a3, a4, AssociatedConformanceWitness);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a3, v21);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v12, a3);
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v14);
  static TableRowBuilder.buildExpression<A>(_:)(v18, a2, v14, v24);
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  static TableRowBuilder.buildBlock<A>(_:)((uint64_t)v23, v14, a5);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, v14);
}

void Table.init<A, B>(_:sortOrder:columnCustomization:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[5];

  v16 = *a5;
  v17 = a5[3];
  memset(v37, 0, 57);
  v33 = a1;
  v34 = v16;
  v35 = *(_OWORD *)(a5 + 1);
  v36 = v17;
  v26 = a8;
  v27 = a9;
  v28 = a10;
  v29 = a11;
  v30 = a12;
  v31 = a13;
  v32 = a14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = type metadata accessor for TableForEachContent(0, a10, a13, AssociatedConformanceWitness);
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v19);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v20, (uint64_t)v37, a2, a3, a4, (uint64_t)&v34, a6, a7, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v25, a8, v19, a9, a11, v20, a12, a14);
}

uint64_t sub_187003298()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init<A, B>(_:selection:sortOrder:columnCustomization:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[72];

  v25 = *a6;
  v16 = a6[3];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = swift_getAssociatedConformanceWitness();
  v24 = *(_OWORD *)(a6 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v21 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, v19, v20);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v21);
  Binding.projecting<A>(_:)();
  v41 = v25;
  v42 = v24;
  v43 = v16;
  v33 = a9;
  v34 = a10;
  v35 = a11;
  v36 = a12;
  v37 = a13;
  v38 = a14;
  v39 = a15;
  v40 = a1;
  v22 = type metadata accessor for TableForEachContent(0, a11, a14, AssociatedConformanceWitness);
  v23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v22);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v23, (uint64_t)v44, a3, a4, a5, (uint64_t)&v41, a7, a8, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v32, a9, v22, a10, a12, v23, a13, a15);
}

uint64_t sub_18700349C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

void Table.init<A, B>(_:selection:sortOrder:columnCustomization:columns:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[72];

  v26 = *a8;
  v27 = a8[3];
  v41 = a2;
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = swift_getAssociatedConformanceWitness();
  v25 = *(_OWORD *)(a8 + 1);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v22 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, v20, v21);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v22);
  Binding.projecting<A>(_:)();
  v41 = v26;
  v42 = v25;
  v43 = v27;
  v33 = a11;
  v34 = a12;
  v35 = a13;
  v36 = a14;
  v37 = a15;
  v38 = a16;
  v39 = a17;
  v40 = a1;
  v23 = type metadata accessor for TableForEachContent(0, a13, a16, AssociatedConformanceWitness);
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v23);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v24, (uint64_t)v44, a5, a6, a7, (uint64_t)&v41, a9, a10, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:), (uint64_t)v32, a11, v23, a12, a14, v24, a15, a17);
}

uint64_t sub_1870036C8()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t closure #1 in Table.init<A, B>(_:sortOrder:columns:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for TableForEachContent(0, a3, a4, AssociatedConformanceWitness);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v27 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a3, v21);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v12, a3);
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableForEachContent<A>, v14);
  static TableRowBuilder.buildExpression<A>(_:)(v18, a2, v14, v24);
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  static TableRowBuilder.buildBlock<A>(_:)((uint64_t)v23, v14, a5);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, v14);
}

void Table.init<A>(_:children:columnCustomization:columns:)(uint64_t a1, _QWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _OWORD v25[2];
  _OWORD v26[5];

  v12 = (uint64_t *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  v13 = *v12;
  v14 = a3[1];
  v25[0] = *a3;
  v25[1] = v14;
  memset(v26, 0, 57);
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a1;
  v24 = a2;
  v15 = *(_QWORD *)(v12[1] + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = type metadata accessor for TableOutlineGroupContent(0, v15, a8, AssociatedConformanceWitness);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v17);
  Table.init(of:selection:columnCustomization:columns:rows:)(v18, (uint64_t)v26, (uint64_t)v25, a4, a5, (uint64_t)partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:), (uint64_t)v19, v13, v17, a6, v18);
}

uint64_t sub_187003994()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init<A>(_:children:selection:columnCustomization:columns:)(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[72];

  v11 = *a2;
  v22 = *a4;
  v20 = *((_QWORD *)a4 + 3);
  v21 = *((_QWORD *)a4 + 2);
  v12 = *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v17 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, v15, v16);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v17);
  Binding.projecting<A>(_:)();
  v33 = v22;
  v34 = v21;
  v35 = v20;
  v28 = a7;
  v29 = a8;
  v30 = a9;
  v31 = a1;
  v32 = a2;
  v18 = type metadata accessor for TableOutlineGroupContent(0, *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v11 + 8) + 16), a9, AssociatedConformanceWitness);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v18);
  Table.init(of:selection:columnCustomization:columns:rows:)(v19, (uint64_t)v36, (uint64_t)&v33, a5, a6, (uint64_t)partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:), (uint64_t)v27, v12, v18, a7, v19);
}

uint64_t sub_187003B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3, v1);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v2, v0);
}

void Table.init<A>(_:children:selection:columnCustomization:columns:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[72];

  v12 = *a2;
  v23 = *a6;
  v21 = *((_QWORD *)a6 + 3);
  v22 = *((_QWORD *)a6 + 2);
  v13 = *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v18 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, v16, v17);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v18);
  Binding.projecting<A>(_:)();
  v33 = v23;
  v34 = v22;
  v35 = v21;
  v28 = a9;
  v29 = a10;
  v30 = a11;
  v31 = a1;
  v32 = a2;
  v19 = type metadata accessor for TableOutlineGroupContent(0, *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v12 + 8) + 16), a11, AssociatedConformanceWitness);
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v19);
  Table.init(of:selection:columnCustomization:columns:rows:)(v20, (uint64_t)v36, (uint64_t)&v33, a7, a8, (uint64_t)partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:), (uint64_t)v27, v13, v19, a9, v20);
}

uint64_t sub_187003DB8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t closure #1 in Table.init<A>(_:children:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v29 = a1;
  v30 = a4;
  v6 = *(_QWORD *)(*(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8] + 8) + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v27 - v8;
  v11 = *v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for TableOutlineGroupContent(0, v6, a3, AssociatedConformanceWitness);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v27 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v29, v6, v20);
  v23 = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8) + 16);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v17, v9, v23);
  *(_QWORD *)&v17[*(int *)(type metadata accessor for TableOutlineGroupContent(0, v23, v28, AssociatedConformanceWitness)+ 44)] = a2;
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v13);
  static TableRowBuilder.buildExpression<A>(_:)(v17, v11, v13, v24);
  v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  v25(v17, v13);
  static TableRowBuilder.buildBlock<A>(_:)((uint64_t)v22, v13, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v22, v13);
}

void Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _OWORD v33[2];
  _OWORD v34[5];

  v13 = (uint64_t *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  v14 = *v13;
  memset(v34, 0, 57);
  v15 = a6[1];
  v33[0] = *a6;
  v33[1] = v15;
  v26 = a9;
  v27 = a10;
  v28 = a11;
  v29 = a12;
  v30 = a13;
  v31 = a1;
  v32 = a2;
  v16 = *(_QWORD *)(v13[1] + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = type metadata accessor for TableOutlineGroupContent(0, v16, a12, AssociatedConformanceWitness);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v18);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v19, (uint64_t)v34, a3, a4, a5, (uint64_t)v33, a7, a8, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:), (uint64_t)v25, v14, v18, a9, a10, v19, a11, a13);
}

uint64_t sub_187004108()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void Table.init<A, B>(_:children:selection:sortOrder:columnCustomization:columns:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v26;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[72];

  v14 = *a2;
  v24 = *a7;
  v22 = *((_QWORD *)a7 + 3);
  v23 = *((_QWORD *)a7 + 2);
  v26 = *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v19 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, v17, v18);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v19);
  Binding.projecting<A>(_:)();
  v40 = v24;
  v41 = v23;
  v42 = v22;
  v33 = a10;
  v34 = a11;
  v35 = a12;
  v36 = a13;
  v37 = a14;
  v38 = a1;
  v39 = a2;
  v20 = type metadata accessor for TableOutlineGroupContent(0, *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v14 + 8) + 16), a13, AssociatedConformanceWitness);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v20);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v21, (uint64_t)v43, a4, a5, a6, (uint64_t)&v40, a8, a9, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:), (uint64_t)v32, v26, v20, a10, a11, v21, a12, a14);
}

uint64_t sub_187004358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v3, v0);
}

void Table.init<A, B>(_:children:selection:sortOrder:columnCustomization:columns:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[72];

  v17 = *a2;
  v28 = *a9;
  v26 = *((_QWORD *)a9 + 3);
  v27 = *((_QWORD *)a9 + 2);
  v18 = *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8]);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v23 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, v21, v22);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v23);
  Binding.projecting<A>(_:)();
  v41 = v28;
  v42 = v27;
  v43 = v26;
  v34 = a12;
  v35 = a13;
  v36 = a14;
  v37 = a15;
  v38 = a16;
  v39 = a1;
  v40 = a2;
  v24 = type metadata accessor for TableOutlineGroupContent(0, *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v17 + 8) + 16), a15, AssociatedConformanceWitness);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v24);
  Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(v25, (uint64_t)v44, a6, a7, a8, (uint64_t)&v41, a10, a11, (uint64_t)partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:), (uint64_t)v33, v18, v24, a12, a13, v25, a14, a16);
}

uint64_t sub_1870045B4()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v29 = a1;
  v30 = a4;
  v6 = *(_QWORD *)(*(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8] + 8) + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v27 - v8;
  v11 = *v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13 = type metadata accessor for TableOutlineGroupContent(0, v6, a3, AssociatedConformanceWitness);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v27 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v29, v6, v20);
  v23 = *(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEE2A8] + *a2 + 8) + 16);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v17, v9, v23);
  *(_QWORD *)&v17[*(int *)(type metadata accessor for TableOutlineGroupContent(0, v23, v28, AssociatedConformanceWitness)+ 44)] = a2;
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableOutlineGroupContent<A>, v13);
  static TableRowBuilder.buildExpression<A>(_:)(v17, v11, v13, v24);
  v25 = *(void (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  v25(v17, v13);
  static TableRowBuilder.buildBlock<A>(_:)((uint64_t)v22, v13, v30);
  return ((uint64_t (*)(char *, uint64_t))v25)(v22, v13);
}

void Table.init<A>(of:sortOrder:columnCustomization:columns:rows:)()
{
  type metadata accessor for Table();
}

uint64_t sub_187004864(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = (_OWORD *)(v1 + a1[16]);
  *(_OWORD *)((char *)v7 + 41) = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  *v7 = 0u;
  v8 = (uint64_t *)(v1 + a1[17]);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v9 = v1 + a1[18];
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v7);
  *v7 = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  *(_OWORD *)((char *)v7 + 41) = 0u;
  if (v2)
  {
    v10 = *(_QWORD *)(v6 + 72);
    v11 = *(_QWORD *)(v6 + 48);
    type metadata accessor for Array();
    type metadata accessor for Binding();
    v13 = type metadata accessor for ToAnyComparatorArray(0, v11, v10, v12);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToAnyComparatorArray<A>, v13);
    Binding.projecting<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v14 = v31;
    v15 = v32;
    v16 = v33;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v8, v8[1]);
  *v8 = v14;
  v8[1] = v15;
  v8[2] = v16;
  if (v3)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    ((void (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation)();
    type metadata accessor for TableColumnCustomization(255, v28, AssociatedConformanceWitness, v18);
    type metadata accessor for Binding();
    v20 = type metadata accessor for TableColumnCustomization.ToAnyCustomization(0, v28, AssociatedConformanceWitness, v19);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.ToAnyCustomization, v20);
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v5, v3);
    v21 = v31;
    v22 = v32;
    v23 = v33;
    v24 = v34;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  v25 = outlined consume of Binding<AnyTableColumnCustomization>?(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
  *(_QWORD *)v9 = v21;
  *(_QWORD *)(v9 + 8) = v22;
  *(_QWORD *)(v9 + 16) = v23;
  *(_QWORD *)(v9 + 24) = v24;
  v26 = v29(v25);
  v30(v26);
  return outlined consume of Binding<[SwiftUIAnySortComparator]>?(v4, v2);
}

void Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[30];

  v19[9] = a8;
  v19[10] = a7;
  v19[15] = a5;
  v19[16] = a4;
  v19[6] = a10;
  v19[11] = *(_QWORD *)(a13 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v19[7] = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[3] = *v16;
  v19[4] = v16[1];
  v19[2] = v16[2];
  v19[1] = v16[3];
  v19[21] = a11;
  v19[22] = a12;
  v19[14] = v17;
  v19[23] = v17;
  v19[24] = a15;
  v19[25] = v18;
  type metadata accessor for Table();
}

uint64_t sub_187004B78(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _OWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = (_OWORD *)(v3 + a1[16]);
  *(_OWORD *)((char *)v6 + 41) = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  v7 = (uint64_t *)(v3 + a1[17]);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(v5 - 35) = a1;
  v8 = a1[18];
  *(v5 - 28) = v3;
  v9 = v3 + v8;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Optional();
  v13 = type metadata accessor for Binding();
  v15 = type metadata accessor for OptionalToAnySelectionManager(0, AssociatedTypeWitness, v12, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OptionalToAnySelectionManager<A>, v15);
  *(v5 - 27) = v4;
  Binding.projecting<A>(_:)();
  outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)(v5 - 19), (uint64_t)v6);
  v16 = *(v5 - 24);
  *(v5 - 32) = v1;
  if (v16)
  {
    v17 = v5[10];
    v18 = v5[7];
    *(v5 - 40) = AssociatedConformanceWitness;
    v19 = *(v5 - 24);
    *(v5 - 23) = v1;
    *(v5 - 22) = v19;
    *(v5 - 21) = *(v5 - 25);
    type metadata accessor for Array();
    type metadata accessor for Binding();
    v21 = type metadata accessor for ToAnyComparatorArray(0, v18, v17, v20);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToAnyComparatorArray<A>, v21);
    Binding.projecting<A>(_:)();
    swift_bridgeObjectRelease();
    AssociatedConformanceWitness = *(v5 - 40);
    swift_release();
    swift_release();
    v22 = *(v5 - 19);
    v23 = *(v5 - 18);
    v24 = *(v5 - 17);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  v25 = (uint64_t (*)(_QWORD))v5[2];
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v7, v7[1]);
  *v7 = v22;
  v7[1] = v23;
  v7[2] = v24;
  v26 = *(v5 - 36);
  if (v26)
  {
    v27 = *(v5 - 37);
    *(v5 - 23) = v27;
    *(v5 - 22) = v26;
    v28 = v25;
    v29 = *(v5 - 38);
    *(v5 - 40) = v13;
    v30 = *(v5 - 39);
    *(v5 - 21) = v29;
    *(v5 - 20) = v30;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v2);
    type metadata accessor for TableColumnCustomization(255, v2, AssociatedConformanceWitness, v31);
    type metadata accessor for Binding();
    v33 = type metadata accessor for TableColumnCustomization.ToAnyCustomization(0, v2, AssociatedConformanceWitness, v32);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.ToAnyCustomization, v33);
    Binding.projecting<A>(_:)();
    v25 = v28;
    v13 = *(v5 - 40);
    outlined consume of Binding<AnyTableColumnCustomization>?(v27, v26);
    v34 = *(v5 - 19);
    v35 = *(v5 - 18);
    v36 = *(v5 - 17);
    v37 = *(v5 - 16);
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
  }
  v38 = *(v5 - 32);
  v39 = outlined consume of Binding<AnyTableColumnCustomization>?(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
  *(_QWORD *)v9 = v34;
  *(_QWORD *)(v9 + 8) = v35;
  *(_QWORD *)(v9 + 16) = v36;
  *(_QWORD *)(v9 + 24) = v37;
  v40 = *(v5 - 28);
  v41 = v25(v39);
  v42 = *(v5 - 33);
  ((void (*)(uint64_t))*(v5 - 30))(v41);
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(v38, *(v5 - 24));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(*(v5 - 27), v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(v5 - 29) + 32))(v40, v42, *(v5 - 26));
}

void Table.init<A>(of:selection:sortOrder:columnCustomization:columns:rows:)()
{
  type metadata accessor for Table();
}

uint64_t sub_187004F9C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _OWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = (_OWORD *)(v3 + a1[16]);
  *(_OWORD *)((char *)v5 + 41) = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  *v5 = 0u;
  v6 = (uint64_t *)(v3 + a1[17]);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  v7 = v3 + a1[18];
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v12 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, v10, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v12);
  Binding.projecting<A>(_:)();
  outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)&v35, (uint64_t)v5);
  if (v34)
  {
    v13 = v4[12];
    v14 = v4[9];
    type metadata accessor for Array();
    type metadata accessor for Binding();
    v16 = type metadata accessor for ToAnyComparatorArray(0, v14, v13, v15);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToAnyComparatorArray<A>, v16);
    Binding.projecting<A>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v17 = v35;
    v18 = v36;
    v19 = v37;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
  }
  v20 = (uint64_t (*)(uint64_t))v4[4];
  v21 = (void (*)(uint64_t))v4[2];
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(*v6, v6[1]);
  *v6 = v17;
  v6[1] = v18;
  v6[2] = v19;
  if (v33)
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v1);
    type metadata accessor for TableColumnCustomization(255, v1, AssociatedConformanceWitness, v22);
    type metadata accessor for Binding();
    v24 = type metadata accessor for TableColumnCustomization.ToAnyCustomization(0, v1, AssociatedConformanceWitness, v23);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableColumnCustomization<A>.ToAnyCustomization, v24);
    Binding.projecting<A>(_:)();
    outlined consume of Binding<AnyTableColumnCustomization>?(v32, v33);
    v25 = v35;
    v26 = v36;
    v27 = v37;
    v28 = v38;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
  }
  v29 = outlined consume of Binding<AnyTableColumnCustomization>?(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  *(_QWORD *)v7 = v25;
  *(_QWORD *)(v7 + 8) = v26;
  *(_QWORD *)(v7 + 16) = v27;
  *(_QWORD *)(v7 + 24) = v28;
  v30 = v20(v29);
  v21(v30);
  outlined consume of Binding<[SwiftUIAnySortComparator]>?(v2, v34);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void TableOutlineGroupContent.tableRowBody.getter(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1[2];
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v4, v5);
  v8 = (_QWORD *)swift_allocObject();
  v9 = a1[3];
  v10 = a1[4];
  v8[2] = v4;
  v8[3] = v9;
  v8[4] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v13 = type metadata accessor for TableRow(0, AssociatedTypeWitness, v10, v12);
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>, v13);
  OutlineGroup<>.init<A>(_:children:content:)();
}

uint64_t TableForEachContent.tableRowBody.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = v2;
  v6 = a1[2];
  v7 = MEMORY[0x1E0C80A78](a1, v3);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  v11 = (_QWORD *)swift_allocObject();
  v12 = a1[3];
  v13 = a1[4];
  v11[2] = v6;
  v11[3] = v12;
  v11[4] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for TableRow(0, AssociatedTypeWitness, v13, v16);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>, v17);
  return ForEach<>.init<A>(_:content:)((uint64_t)v9, (uint64_t)partial apply for closure #1 in TableForEachContent.tableRowBody.getter, (uint64_t)v11, v6, v15, v17, AssociatedTypeWitness, v12, a2, v18, v13);
}

uint64_t closure #1 in TableOutlineGroupContent.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v25 - v9;
  v12 = type metadata accessor for TableRow(0, AssociatedTypeWitness, a2, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v25 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, AssociatedTypeWitness, v19);
  TableRow.init(_:)((uint64_t)v10, AssociatedTypeWitness, (uint64_t)v16);
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>, v12);
  static TableRowBuilder.buildExpression<A>(_:)(v16, AssociatedTypeWitness, v12, v22);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  static TableRowBuilder.buildBlock<A>(_:)((uint64_t)v21, v12, a3);
  return ((uint64_t (*)(char *, uint64_t))v23)(v21, v12);
}

void Table.init(for:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Table.init(columns:rows:)(a2, a3, a4, a5, a6, a7, a8, a9);
}

void Table.init(for:selection:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a5;
  v23 = a6;
  v20 = a9;
  v21 = a4;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  v14 = type metadata accessor for Binding();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v20 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v20 - v18, a2, v14, v17);
  Table.init(selection:columns:rows:)((uint64_t)v19, a3, v21, v22, v23, a7, a8, v20, a10);
}

uint64_t sub_187005854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void Table.init(for:selection:columns:rows:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v21[2];
  _BYTE v22[72];

  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(AssociatedTypeWitness);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  v15 = type metadata accessor for SetToAnySelectionManager(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SetToAnySelectionManager<A>, v15);
  v16 = Binding.projecting<A>(_:)();
  memset(v21, 0, sizeof(v21));
  Table.init(of:selection:columnCustomization:columns:rows:)(v16, (uint64_t)v22, (uint64_t)v21, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1870059E0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void type metadata accessor for Table.ChildSelectionEnabled()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for Table.ChildSelectionAction()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for Attribute<((_:))?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<((_:))?>)
  {
    type metadata accessor for ((_:))?(255, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<((_:))?>);
  }
}

void type metadata accessor for Table.ChildSelectionMenu()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for (_:)(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Set<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB388]);
    result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getFunctionTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for ((_:))?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = type metadata accessor for (_:)(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t type metadata accessor for TableForEachContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableForEachContent);
}

uint64_t partial apply for closure #1 in Table.init<A>(_:columns:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Table.init<A>(_:columns:)(v1[7], v1[2], v1[4], v1[6], a1);
}

uint64_t partial apply for closure #1 in Table.init<A, B>(_:sortOrder:columns:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in Table.init<A, B>(_:sortOrder:columns:)(v1[9], v1[2], v1[4], v1[7], a1);
}

uint64_t type metadata accessor for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TableOutlineGroupContent);
}

uint64_t partial apply for closure #1 in Table.init<A>(_:children:columnCustomization:columns:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Table.init<A>(_:children:columnCustomization:columns:)(*(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 32), a1);
}

uint64_t partial apply for closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Table.init<A, B>(_:children:sortOrder:columnCustomization:columns:)(*(_QWORD *)(v1 + 56), *(_QWORD **)(v1 + 64), *(_QWORD *)(v1 + 40), a1);
}

uint64_t outlined destroy of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>);
  }
}

uint64_t type metadata accessor for ToAnyComparatorArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToAnyComparatorArray);
}

uint64_t outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_187005EEC()
{
  return swift_deallocObject();
}

uint64_t sub_187005EFC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableForEachContent.tableRowBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in TableOutlineGroupContent.tableRowBody.getter(a1, *(_QWORD *)(v2 + 32), a2);
}

_UNKNOWN **base witness table accessor for View in Table<A, B, C>()
{
  return &protocol witness table for Table<A, B, C>;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableOutlineGroupContent<A>()
{
  return associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableOutlineGroupContent<A>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableForEachContent<A>()
{
  return associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in TableOutlineGroupContent<A>();
}

uint64_t type metadata completion function for Table()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Table(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 *v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((((v10 + (v9 & ~v8) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
    return v4;
  }
  v15 = ~v8;
  (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
  v16 = ((unint64_t)v4 + v9) & v15;
  v17 = ((unint64_t)a2 + v9) & v15;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v16, v17, v5);
  v18 = v16 + v10;
  v19 = v17 + v10;
  v20 = (v16 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v21 + 8) < 0xFFFFFFFFuLL)
  {
    v25 = *(_OWORD *)v21;
    v26 = *(_OWORD *)(v21 + 16);
    v27 = *(_OWORD *)(v21 + 32);
    *(_OWORD *)(v20 + 41) = *(_OWORD *)(v21 + 41);
    *(_OWORD *)(v20 + 16) = v26;
    *(_OWORD *)(v20 + 32) = v27;
    *(_OWORD *)v20 = v25;
  }
  else
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
    v22 = (__int128 *)(v21 + 16);
    v23 = *(unsigned __int8 *)(v21 + 56);
    swift_retain();
    swift_retain();
    if (v23 == 2)
    {
      v28 = *(_QWORD *)(v21 + 40);
      *(_QWORD *)(v20 + 40) = v28;
      *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(v20 + 16, v21 + 16);
      v29 = 2;
LABEL_20:
      *(_BYTE *)(v20 + 56) = v29;
      goto LABEL_21;
    }
    if (v23 == 1)
    {
      v24 = *(_QWORD *)(v21 + 40);
      if (v24)
      {
        *(_QWORD *)(v20 + 40) = v24;
        *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v20 + 16, v21 + 16);
      }
      else
      {
        v30 = *v22;
        v31 = *(_OWORD *)(v21 + 32);
        *(_QWORD *)(v20 + 48) = *(_QWORD *)(v21 + 48);
        *(_OWORD *)(v20 + 16) = v30;
        *(_OWORD *)(v20 + 32) = v31;
      }
      v29 = 1;
      goto LABEL_20;
    }
    *(_QWORD *)(v20 + 16) = *(_QWORD *)v22;
    *(_BYTE *)(v20 + 56) = 0;
    swift_bridgeObjectRetain();
  }
LABEL_21:
  v32 = (v18 + 71) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v19 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v33 + 8) < 0xFFFFFFFFuLL)
  {
    v34 = *(_OWORD *)v33;
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
    *(_OWORD *)v32 = v34;
  }
  else
  {
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
    *(_QWORD *)(v32 + 16) = *(_QWORD *)(v33 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v35 = (v32 + 31) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v33 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v36 + 8) < 0xFFFFFFFFuLL)
  {
    v37 = *(_OWORD *)(v36 + 16);
    *(_OWORD *)v35 = *(_OWORD *)v36;
    *(_OWORD *)(v35 + 16) = v37;
  }
  else
  {
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *(_QWORD *)(v35 + 8) = *(_QWORD *)(v36 + 8);
    *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
    *(_QWORD *)(v35 + 24) = *(_QWORD *)(v36 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Table(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v7);
  v9 = v7 + *(_QWORD *)(v6 + 64);
  v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v10 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_8;
  swift_release();
  swift_release();
  result = v10 + 16;
  v11 = *(unsigned __int8 *)(v10 + 56);
  if (v11 == 2)
  {
LABEL_7:
    result = __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_8;
  }
  if (v11 == 1)
  {
    if (!*(_QWORD *)(v10 + 40))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v10 + 56))
    result = swift_bridgeObjectRelease();
LABEL_8:
  v12 = (v9 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v12 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(((v12 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v17 + 8) < 0xFFFFFFFFuLL)
  {
    v21 = *(_OWORD *)v17;
    v22 = *(_OWORD *)(v17 + 16);
    v23 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 41) = *(_OWORD *)(v17 + 41);
    *(_OWORD *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 32) = v23;
    *(_OWORD *)v16 = v21;
    goto LABEL_12;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  v18 = (_QWORD *)(v17 + 16);
  v19 = *(unsigned __int8 *)(v17 + 56);
  swift_retain();
  swift_retain();
  if (v19 == 2)
  {
    v24 = *(_QWORD *)(v17 + 40);
    *(_QWORD *)(v16 + 40) = v24;
    *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v16 + 16, v17 + 16);
    v25 = 2;
  }
  else
  {
    if (v19 != 1)
    {
      *(_QWORD *)(v16 + 16) = *v18;
      *(_BYTE *)(v16 + 56) = 0;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    v20 = *(_QWORD *)(v17 + 40);
    if (v20)
    {
      *(_QWORD *)(v16 + 40) = v20;
      *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
      (**(void (***)(uint64_t, uint64_t))(v20 - 8))(v16 + 16, v17 + 16);
    }
    else
    {
      v26 = *(_OWORD *)v18;
      v27 = *(_OWORD *)(v17 + 32);
      *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
      *(_OWORD *)(v16 + 16) = v26;
      *(_OWORD *)(v16 + 32) = v27;
    }
    v25 = 1;
  }
  *(_BYTE *)(v16 + 56) = v25;
LABEL_12:
  v28 = (v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v29 + 8) < 0xFFFFFFFFuLL)
  {
    v30 = *(_OWORD *)v29;
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    *(_OWORD *)v28 = v30;
  }
  else
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
    *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  v31 = (v28 + 31) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v32 + 8) < 0xFFFFFFFFuLL)
  {
    v33 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *(_OWORD *)(v31 + 16) = v33;
  }
  else
  {
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    *(_QWORD *)(v31 + 24) = *(_QWORD *)(v32 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  __int128 v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)(v17 + 8);
  if (*(_QWORD *)(v16 + 8) >= 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      swift_retain();
      swift_release();
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      swift_retain();
      swift_release();
      if (v16 == v17)
        goto LABEL_23;
      v19 = v16 + 16;
      v20 = v17 + 16;
      outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(v16 + 16, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
      v21 = *(unsigned __int8 *)(v17 + 56);
      if (v21 != 2)
      {
        if (v21 != 1)
        {
LABEL_6:
          *(_QWORD *)(v16 + 16) = *(_QWORD *)v20;
          *(_BYTE *)(v16 + 56) = 0;
          swift_bridgeObjectRetain();
          goto LABEL_23;
        }
        goto LABEL_10;
      }
      goto LABEL_16;
    }
    swift_release();
    swift_release();
    v24 = *(unsigned __int8 *)(v16 + 56);
    if (v24 == 2)
      goto LABEL_18;
    if (v24 != 1)
    {
      if (!*(_BYTE *)(v16 + 56))
        swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    if (*(_QWORD *)(v16 + 40))
LABEL_18:
      __swift_destroy_boxed_opaque_existential_1(v16 + 16);
LABEL_19:
    v27 = *(_OWORD *)v17;
    v28 = *(_OWORD *)(v17 + 16);
    v29 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 41) = *(_OWORD *)(v17 + 41);
    *(_OWORD *)(v16 + 16) = v28;
    *(_OWORD *)(v16 + 32) = v29;
    *(_OWORD *)v16 = v27;
    goto LABEL_23;
  }
  if (v18 < 0xFFFFFFFF)
    goto LABEL_19;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  v19 = v16 + 16;
  v20 = v17 + 16;
  v22 = *(unsigned __int8 *)(v17 + 56);
  swift_retain();
  swift_retain();
  if (v22 != 2)
  {
    if (v22 != 1)
      goto LABEL_6;
LABEL_10:
    v23 = *(_QWORD *)(v17 + 40);
    if (v23)
    {
      *(_QWORD *)(v16 + 40) = v23;
      *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
      (**(void (***)(unint64_t, unint64_t))(v23 - 8))(v19, v20);
    }
    else
    {
      v30 = *(_OWORD *)v20;
      v31 = *(_OWORD *)(v20 + 16);
      *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
      *(_OWORD *)v19 = v30;
      *(_OWORD *)(v19 + 16) = v31;
    }
    v26 = 1;
    goto LABEL_22;
  }
LABEL_16:
  v25 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v16 + 40) = v25;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v17 + 48);
  (**(void (***)(unint64_t, unint64_t))(v25 - 8))(v19, v20);
  v26 = 2;
LABEL_22:
  *(_BYTE *)(v16 + 56) = v26;
LABEL_23:
  v32 = (_QWORD *)((v14 + 71) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  v34 = v33[1];
  if (v32[1] < 0xFFFFFFFFuLL)
  {
    if (v34 >= 0xFFFFFFFF)
    {
      *v32 = *v33;
      v32[1] = v33[1];
      v32[2] = v33[2];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
  }
  else
  {
    if (v34 >= 0xFFFFFFFF)
    {
      *v32 = *v33;
      swift_retain();
      swift_release();
      v32[1] = v33[1];
      swift_retain();
      swift_release();
      v32[2] = v33[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v35 = *(_OWORD *)v33;
  v32[2] = v33[2];
  *(_OWORD *)v32 = v35;
LABEL_30:
  v36 = (_QWORD *)(((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_QWORD *)(((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8);
  v38 = v37[1];
  if (v36[1] < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      *v36 = *v37;
      v36[1] = v37[1];
      v36[2] = v37[2];
      v36[3] = v37[3];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_36:
    v39 = *((_OWORD *)v37 + 1);
    *(_OWORD *)v36 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = v39;
    return a1;
  }
  if (v38 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  *v36 = *v37;
  swift_retain();
  swift_release();
  v36[1] = v37[1];
  swift_retain();
  swift_release();
  v36[2] = v37[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36[3] = v37[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t initializeWithTake for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (_OWORD *)((v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v17 = (__int128 *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  v19 = v17[1];
  v18 = v17[2];
  v20 = *v17;
  *(_OWORD *)((char *)v16 + 41) = *(__int128 *)((char *)v17 + 41);
  v16[1] = v19;
  v16[2] = v18;
  *v16 = v20;
  v21 = (v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_OWORD *)v22;
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
  *(_OWORD *)v21 = v23;
  v24 = (_OWORD *)((v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_OWORD *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  return a1;
}

uint64_t assignWithTake for Table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v16 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_11;
  if (*(_QWORD *)(v17 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    v20 = *(unsigned __int8 *)(v16 + 56);
    if (v20 == 2)
      goto LABEL_10;
    if (v20 != 1)
    {
      if (!*(_BYTE *)(v16 + 56))
        swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    if (*(_QWORD *)(v16 + 40))
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1(v16 + 16);
LABEL_11:
    v21 = *(_OWORD *)v17;
    v22 = *(_OWORD *)(v17 + 16);
    v23 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 41) = *(_OWORD *)(v17 + 41);
    *(_OWORD *)(v16 + 16) = v22;
    *(_OWORD *)(v16 + 32) = v23;
    *(_OWORD *)v16 = v21;
    goto LABEL_12;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  swift_release();
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release();
  if (v16 != v17)
  {
    outlined destroy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(v16 + 16, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E0DEC198], MEMORY[0x1E0DEC1A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    v18 = *(_OWORD *)(v17 + 41);
    v19 = *(_OWORD *)(v17 + 32);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)(v17 + 16);
    *(_OWORD *)(v16 + 32) = v19;
    *(_OWORD *)(v16 + 41) = v18;
  }
LABEL_12:
  v24 = (_QWORD *)((v14 + 71) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  if (v24[1] >= 0xFFFFFFFFuLL)
  {
    if (v25[1] >= 0xFFFFFFFFuLL)
    {
      *v24 = *v25;
      swift_release();
      v24[1] = v25[1];
      swift_release();
      v24[2] = v25[2];
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v26 = *(_OWORD *)v25;
  v24[2] = v25[2];
  *(_OWORD *)v24 = v26;
LABEL_17:
  v27 = ((unint64_t)v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v27 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_21:
    v29 = *(_OWORD *)(v28 + 16);
    *(_OWORD *)v27 = *(_OWORD *)v28;
    *(_OWORD *)(v27 + 16) = v29;
    return a1;
  }
  if (*(_QWORD *)(v28 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  *(_QWORD *)v27 = *(_QWORD *)v28;
  swift_release();
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  swift_release();
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v27 + 24) = *(_QWORD *)(v28 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Table(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a3 + 32);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFE)
    v9 = 2147483646;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v9 >= a2)
  {
    if (v6 == v9)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    }
    else
    {
      v17 = (v11 + a1) & ~v10;
      if (v8 == v9)
      {
        return (*(uint64_t (**)(uint64_t))(v7 + 48))(v17);
      }
      else
      {
        v18 = *(_QWORD *)(((v12 + v17 + 7) & 0xFFFFFFFFFFFFF8) + 8);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  else
  {
    if (((((((v12 + (v11 & ~v10) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v9 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187006F30 + 4 * byte_187C023B0[v15]))();
  }
}

void storeEnumTagSinglePayload for Table(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE)
    v7 = 2147483646;
  v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    v11 = 0u;
    if (a2 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (((((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0)
      v9 = a3 - v7 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v5 + 64) + v8) & ~v8) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 32);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_187007108()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1870071B8);
}

void sub_187007110(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187007118);
  JUMPOUT(0x1870071B8);
}

void sub_18700715C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870071B8);
}

void sub_187007164()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1870071B8);
}

uint64_t sub_18700716C(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x1870071B8);
  if (v6 == v9)
  {
    v3 = *(uint64_t (**)(uint64_t))(v10 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v9)
      JUMPOUT(0x187007178);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

uint64_t type metadata completion function for TableOutlineGroupContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableOutlineGroupContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TableOutlineGroupContent(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TableOutlineGroupContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableOutlineGroupContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187007540 + 4 * byte_187C023BF[v10]))();
  }
}

void storeEnumTagSinglePayload for TableOutlineGroupContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1870076B8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18700772CLL);
}

void sub_1870076C0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1870076C8);
  JUMPOUT(0x18700772CLL);
}

void sub_187007708()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18700772CLL);
}

void sub_187007710()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18700772CLL);
}

uint64_t sub_187007718(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x18700772CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187007728);
    JUMPOUT(0x187007724);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for TableForEachContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TableForEachContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187007860 + 4 * byte_187C023CE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TableForEachContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void sub_187007A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableRow(255, AssociatedTypeWitness, v1, v3);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
}

uint64_t sub_187007B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v4 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>, v1);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &v4);
}

uint64_t sub_187007B6C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[1] = v1;
  v8[2] = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for TableRow(255, AssociatedTypeWitness, v3, v5);
  v10 = v2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for ForEach();
  v8[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>, v9);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v6, v8);
}

void base witness table accessor for Equatable in ToAnyComparatorArray<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in ToAnyComparatorArray<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in Table<A, B, C>.ChildSelectionMenu()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in Table<A, B, C>.ChildSelectionAction()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in Table<A, B, C>.ChildSelectionEnabled()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in Table<A, B, C>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of Binding<AnyTableColumnCustomization>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvedTableStyle(uint64_t a1)
{
  destroy for TableStyleConfiguration();
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedTableStyle, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for ResolvedTableStyle, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187007E74()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187007E98()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Table.ChildSelectionEnabled.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Table.ChildSelectionEnabled.value.getter(a1, *(_DWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_187007EBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Identifiable.ID) -> (@out Bool)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 56))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t partial apply for closure #1 in Table.ChildSelectionAction.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Table.ChildSelectionAction.value.getter(a1, *(void (**)(uint64_t))(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 56);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<AnyHashable>) -> (@owned PlatformItemList)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_187007FA4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Table.ChildSelectionMenu.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Table.ChildSelectionMenu.value.getter(a1, *(_DWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.Identifiable.ID>) -> (@out PlatformItemList)(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 56);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t specialized ToAnyComparatorArray.get(base:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v7[5] = a1;
  v7[2] = a2;
  v7[3] = a3;
  v3 = type metadata accessor for Array();
  v4 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v3);
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ToAnyComparatorArray.get(base:), (uint64_t)v7, v3, (char *)&type metadata for SwiftUIAnySortComparator, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
}

uint64_t specialized ToAnyComparatorArray.set(base:newValue:)(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[6];

  v12[5] = a2;
  v12[2] = a3;
  v12[3] = a4;
  type metadata accessor for [SwiftUIAnySortComparator]();
  v7 = v6;
  v8 = lazy protocol witness table accessor for type [SwiftUIAnySortComparator] and conformance [A]();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ToAnyComparatorArray.set(base:newValue:), (uint64_t)v12, v7, a3, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t partial apply for closure #1 in ToAnyComparatorArray.set(base:newValue:)(uint64_t a1)
{
  uint64_t v2;

  outlined init with copy of Any(a1, (uint64_t)&v2);
  return swift_dynamicCast();
}

void type metadata accessor for [SwiftUIAnySortComparator]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [SwiftUIAnySortComparator])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SwiftUIAnySortComparator]);
  }
}

unint64_t lazy protocol witness table accessor for type [SwiftUIAnySortComparator] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SwiftUIAnySortComparator] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SwiftUIAnySortComparator] and conformance [A])
  {
    type metadata accessor for [SwiftUIAnySortComparator]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SwiftUIAnySortComparator] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in ToAnyComparatorArray.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ToAnyComparatorArray.get(base:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_187008284()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for WrappingLabelStyle()
{
  return &type metadata for WrappingLabelStyle;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in WrappingLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for LabelStyle.makeBody(configuration:) in conformance WrappingLabelStyle@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  double v7;
  char v8;

  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  result = v7;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(double *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return result;
}

uint64_t initializeWithCopy for WrappingLabelStyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for WrappingLabelStyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for WrappingLabelStyleView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappingLabelStyleView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WrappingLabelStyleView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

void *type metadata accessor for WrappingLabelStyleView()
{
  return &unk_1E1ADEFE8;
}

unint64_t lazy protocol witness table accessor for type WrappingLabelStyleView and conformance WrappingLabelStyleView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WrappingLabelStyleView and conformance WrappingLabelStyleView;
  if (!lazy protocol witness table cache variable for type WrappingLabelStyleView and conformance WrappingLabelStyleView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappingLabelStyleView, &unk_1E1ADEFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappingLabelStyleView and conformance WrappingLabelStyleView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in WrappingLabelStyleView()
{
  return swift_getOpaqueTypeConformance2();
}

double closure #1 in WrappingLabelStyleView.body.getter@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  double result;
  __int128 v6;
  _BYTE v7[32];
  __int128 v8;

  KeyPath = swift_getKeyPath();
  v8 = *a1;
  v6 = *a1;
  *(_OWORD *)v7 = a1[1];
  *(_OWORD *)&v7[9] = *(__int128 *)((char *)a1 + 25);
  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  ScaledMetric.wrappedValue.getter();
  View.bodyHeadOutdent(_:)();
  result = *((double *)&v8 + 1);
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = BYTE8(v6);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)v7;
  *(_BYTE *)(a2 + 40) = v7[8];
  *(_QWORD *)(a2 + 48) = *(_QWORD *)&v7[16];
  *(_QWORD *)(a2 + 56) = *(_QWORD *)&v7[24];
  *(_OWORD *)(a2 + 64) = v8;
  return result;
}

double protocol witness for View.body.getter in conformance WrappingLabelStyleView@<D0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t TextLine;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  double result;
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  _OWORD v24[2];

  v3 = v1[1];
  v23 = *v1;
  v24[0] = v3;
  *(_OWORD *)((char *)v24 + 9) = *(__int128 *)((char *)v1 + 25);
  TextLine = static VerticalAlignment._firstTextLineCenter.getter();
  closure #1 in WrappingLabelStyleView.body.getter(&v23, (uint64_t)&v14);
  v5 = v14;
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v9 = v18;
  v10 = v19;
  v11 = v21;
  result = v22;
  v13 = v20;
  *(_QWORD *)a1 = TextLine;
  *(_QWORD *)(a1 + 8) = 0x4024000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 88) = v11;
  *(double *)(a1 + 96) = result;
  return result;
}

void type metadata accessor for ScaledMetric<CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ScaledMetric<CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v0 = type metadata accessor for ScaledMetric();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>);
  }
}

uint64_t sub_1870087FC()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>, MEMORY[0x1E0CE73D0]);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)> and conformance TupleView<A>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>, MEMORY[0x1E0CE7EB8]);
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>);
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>)
  {
    type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>);
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>();
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>);
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, a3);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t LabelGroup.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

void LabelGroup.body.getter()
{
  lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

void sub_187008B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v4 - 160) = v2;
  *(_QWORD *)(v4 - 152) = v0;
  *(_QWORD *)(v4 - 144) = v1;
  lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
  View.viewAlias<A, B>(_:_:)(v3, (uint64_t)partial apply for closure #1 in LabelGroup.body.getter);
}

uint64_t sub_187008BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 128) = v0;
  *(_QWORD *)(v5 - 120) = &protocol witness table for StaticSourceWriter<A, B>;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5 - 128);
  static ViewBuilder.buildExpression<A>(_:)(v3, v2, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v3, v2);
  static ViewBuilder.buildBlock<A>(_:)(v1, v2, *(_QWORD *)(v5 - 184));
  return v7(v1, v2);
}

unint64_t lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroupStyleConfiguration.Content, &type metadata for LabelGroupStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelGroupStyleConfiguration.Content, &type metadata for LabelGroupStyleConfiguration.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  }
  return result;
}

uint64_t partial apply for closure #1 in LabelGroup.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in __App.ShoeboxAdaptor.body.getter(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedLabelGroupStyle, &type metadata for ResolvedLabelGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedLabelGroupStyle, &type metadata for ResolvedLabelGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in LabelGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for LabelGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187008DC4 + 4 * byte_187C02998[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for LabelGroup(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for LabelGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LabelGroup);
}

void sub_187008FD0()
{
  lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187009004()
{
  uint64_t v0;
  _QWORD v2[10];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
  v2[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

uint64_t associated type witness table accessor for DividerStyle.Body : View in DefaultDividerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DividerStyle.makeBody(configuration:) in conformance DefaultDividerStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.dividerThickness : EnvironmentValues@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1870090C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.dividerThickness : EnvironmentValues()
{
  return EnvironmentValues.dividerThickness.setter();
}

uint64_t sub_187009124()
{
  return EnvironmentValues.dividerThickness.setter();
}

ValueMetadata *type metadata accessor for DefaultDividerStyle()
{
  return &type metadata for DefaultDividerStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>();
    v2[0] = &protocol witness table for Divider;
    v2[1] = &protocol witness table for DividerStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>)
  {
    type metadata accessor for DividerStyleModifier<PlainDividerStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>);
  }
}

void type metadata accessor for DividerStyleModifier<PlainDividerStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for DividerStyleModifier<PlainDividerStyle>)
  {
    v2 = lazy protocol witness table accessor for type PlainDividerStyle and conformance PlainDividerStyle();
    v4 = type metadata accessor for DividerStyleModifier(a1, (uint64_t)&type metadata for PlainDividerStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for DividerStyleModifier<PlainDividerStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type PlainDividerStyle and conformance PlainDividerStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainDividerStyle and conformance PlainDividerStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerStyle and conformance PlainDividerStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainDividerStyle, &type metadata for PlainDividerStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerStyle and conformance PlainDividerStyle);
  }
  return result;
}

uint64_t AnyNavigationPath.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v12 = *(_BYTE *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v14;
  v17 = v9;
  v18 = *(_OWORD *)(a2 + 40);
  v19 = v10;
  v20 = v11;
  v21 = v12;
  v22 = v13;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a7 + 152))(a1, v16, a3, a4, a5, a6, a8, a9);
}

void AnyNavigationPath.init<A>(path:)()
{
  type metadata accessor for AnyNavigationPath.HomogeneousBoxBase();
}

uint64_t sub_187009350()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 192) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 232), v0);
  return v1;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.__allocating_init(path:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 192) - 8) + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 232), a1);
  return v2;
}

uint64_t AnyNavigationPath.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(_QWORD *)v3 = (*(uint64_t (**)(void))(**(_QWORD **)v3 + 104))();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(_QWORD **)v3 + 112))(a1, a2, a3);
}

uint64_t AnyNavigationPath.append<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(_QWORD *)v5 = (*(uint64_t (**)(void))(**(_QWORD **)v5 + 104))();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)v5 + 120))(a1, a2, a3, a4, a5);
}

uint64_t AnyNavigationPath.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 168))(a1, a3, a4) & 1;
}

void AnyNavigationPath.BoxBase.isEmpty.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.count.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.equals(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.copy()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.append<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.removeLast(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.change(from:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.updatePossibilities(for:into:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.view<A>(basedOn:applying:index:apparentPosition:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.contains<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyNavigationPath.BoxBase.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyNavigationPath.BoxBase()
{
  return objc_opt_self();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyNavigationPath.BoxBase(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 96))(*a2) & 1;
}

BOOL AnyNavigationPath.HeterogeneousBoxBase.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  outlined copy of NavigationPath.Representation(v1, v2, v3, v4);
  swift_bridgeObjectRetain();
  if (NavigationPath.Representation.isEmpty.getter())
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v1, v2, v3, v4);
    swift_bridgeObjectRelease();
    return v6 == 0;
  }
  else
  {
    outlined consume of NavigationPath.Representation(v1, v2, v3, v4);
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.count.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  if ((v4 & 1) == 0)
    goto LABEL_10;
  if (v1 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
  swift_bridgeObjectRetain();
  outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
  while (1)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = v6 + v7;
    if (__OFADD__(v6, v7))
    {
      __break(1u);
    }
    else if (!(v3 >> 62))
    {
      v9 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_7:
    outlined consume of NavigationPath.Representation(v1, v2, v3, 1);
    v10 = __OFADD__(v8, v9);
    v11 = v8 + v9;
    if (!v10)
      goto LABEL_12;
    __break(1u);
LABEL_10:
    if (!(v1 >> 62))
    {
      v11 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(v1, v2, v3, 0);
      swift_bridgeObjectRetain();
LABEL_12:
      if (!(v5 >> 62))
        goto LABEL_13;
      goto LABEL_21;
    }
    outlined copy of NavigationPath.Representation(v1, v2, v3, 0);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v1, v2, v3, 0);
    v11 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of NavigationPath.Representation(v1, v2, v3, 0);
    if (!(v5 >> 62))
    {
LABEL_13:
      v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_14;
    }
LABEL_21:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_14:
    outlined consume of NavigationPath.Representation(v1, v2, v3, v4);
    swift_bridgeObjectRelease();
    result = v11 + v12;
    if (!__OFADD__(v11, v12))
      return result;
    __break(1u);
LABEL_17:
    outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
    swift_bridgeObjectRetain();
    outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.equals(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v1 = swift_dynamicCastClass();
  if (v1)
  {
    v2 = v1;
    swift_beginAccess();
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_BYTE *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 56);
    v17 = *(_OWORD *)(v0 + 16);
    v18 = v3;
    v19 = v4;
    v20 = v5;
    v21 = v6;
    swift_beginAccess();
    v7 = *(_QWORD *)(v2 + 32);
    v8 = *(_BYTE *)(v2 + 40);
    v9 = *(_QWORD *)(v2 + 48);
    v10 = *(_QWORD *)(v2 + 56);
    v12 = *(_OWORD *)(v2 + 16);
    v13 = v7;
    v14 = v8;
    v15 = v9;
    v16 = v10;
    LOBYTE(v1) = static NavigationPath.== infix(_:_:)(&v17, &v12);
  }
  return v1 & 1;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.copy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v2;
  *(_QWORD *)(v7 + 32) = v3;
  *(_BYTE *)(v7 + 40) = v4;
  *(_QWORD *)(v7 + 48) = v6;
  *(_QWORD *)(v7 + 56) = v5;
  outlined copy of NavigationPath.Representation(v1, v2, v3, v4);
  swift_bridgeObjectRetain();
  return v7;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  NavigationPath.append<A>(_:)(a1, a2);
  return swift_endAccess();
}

void AnyNavigationPath.HeterogeneousBoxBase.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  NavigationPath.append<A>(_:)(a1, a2);
}

uint64_t sub_187009EE8()
{
  return swift_endAccess();
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.removeLast(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v2 = v1;
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 48);
  v6 = (_QWORD *)(v1 + 48);
  v7 = v8;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16)
      goto LABEL_9;
  }
  else if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  if (*v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 >= a1)
    v10 = a1;
  else
    v10 = v9;
  result = specialized RangeReplaceableCollection<>.removeLast(_:)(v10, v4, v5);
  v12 = __OFSUB__(a1, v10);
  a1 -= v10;
  if (v12)
  {
    __break(1u);
    return result;
  }
LABEL_9:
  if (a1 >= 1)
  {
    v13 = *(_QWORD *)(v2 + 24);
    v14 = *(_QWORD *)(v2 + 32);
    v15 = *(_BYTE *)(v2 + 40);
    *(_QWORD *)&v20 = *(_QWORD *)(v2 + 16);
    *((_QWORD *)&v20 + 1) = v13;
    v21 = v14;
    v22 = v15;
    outlined copy of NavigationPath.Representation(v20, v13, v14, v15);
    NavigationPath.Representation.removeLast(_:)(a1);
    v17 = v20;
    v18 = v21;
    v19 = v22;
    NavigationPath.items.setter((uint64_t)&v17);
  }
  return swift_endAccess();
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.change(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v1 = v0;
  v2 = swift_dynamicCastClass();
  if (!v2)
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *v26 = xmmword_187C02A60;
    return swift_willThrow();
  }
  v3 = v2;
  swift_beginAccess();
  v62 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 32);
  v61 = *(_QWORD *)(v3 + 24);
  v5 = *(_BYTE *)(v3 + 40);
  v6 = *(_QWORD *)(v3 + 48);
  swift_beginAccess();
  result = 2;
  if ((*(_BYTE *)(v1 + 40) & 1) == 0 && (v5 & 1) == 0)
  {
    v59 = v4;
    outlined copy of NavigationPath.Representation(v62, v61, v4, 0);
    v56 = v6 & 0xFFFFFFFFFFFFFF8;
    v55 = v62 & 0xC000000000000001;
    swift_bridgeObjectRetain();
    v8 = 0;
    v60 = v6;
    v57 = v62 >> 62;
    v58 = v6 >> 62;
    while (1)
    {
      v9 = *(_QWORD *)(v1 + 16);
      v10 = *(_QWORD *)(v1 + 24);
      v11 = *(_QWORD *)(v1 + 32);
      v12 = *(unsigned __int8 *)(v1 + 40);
      v13 = *(_QWORD *)(v1 + 48);
      v14 = v9 >> 62;
      if ((v12 & 1) != 0)
        break;
      if (!v14)
      {
        v20 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 0);
        swift_bridgeObjectRetain();
        goto LABEL_16;
      }
      outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v9, v10, v11, 0);
      v20 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v9, v10, v11, 0);
      if (!(v13 >> 62))
      {
LABEL_17:
        v17 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_18;
      }
LABEL_39:
      swift_bridgeObjectRetain();
      v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_18:
      outlined consume of NavigationPath.Representation(v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      v21 = v20 + v17;
      if (__OFADD__(v20, v17))
      {
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
        while (2)
        {
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_45:
          v29 = *(_QWORD *)(v12 + 16);
          v30 = v28 + v29;
          if (__OFADD__(v28, v29))
          {
            __break(1u);
          }
          else
          {
            if (v9 >> 62)
            {
              swift_bridgeObjectRetain();
              v31 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v31 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            outlined consume of NavigationPath.Representation(v13, v12, v9, 1);
            v19 = __OFADD__(v30, v31);
            v32 = v30 + v31;
            if (!v19)
            {
LABEL_53:
              if (!(v10 >> 62))
                goto LABEL_54;
LABEL_113:
              swift_bridgeObjectRetain();
              v33 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_55;
            }
            __break(1u);
LABEL_51:
            if (!v27)
            {
              v32 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
              outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
              swift_bridgeObjectRetain();
              goto LABEL_53;
            }
          }
          outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
          v32 = _CocoaArrayWrapper.endIndex.getter();
          outlined consume of NavigationPath.Representation(v13, v12, v9, 0);
          if (v10 >> 62)
            goto LABEL_113;
LABEL_54:
          v33 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_55:
          outlined consume of NavigationPath.Representation(v13, v12, v9, v17);
          swift_bridgeObjectRelease();
          if (__OFADD__(v32, v33))
            continue;
          break;
        }
        if (v32 + v33 == v8)
        {
          if (v57)
          {
            v12 = v62;
            outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
            swift_bridgeObjectRetain();
            outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
            v9 = _CocoaArrayWrapper.endIndex.getter();
            outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
            if (v58)
              goto LABEL_116;
LABEL_59:
            v13 = *(_QWORD *)(v56 + 16);
          }
          else
          {
            v9 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
            outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
            swift_bridgeObjectRetain();
            if (!v58)
              goto LABEL_59;
LABEL_116:
            swift_bridgeObjectRetain();
            v13 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
          swift_bridgeObjectRelease();
          if (!__OFADD__(v9, v13))
          {
            if (v13 + v9 == v8)
            {
              outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
              swift_bridgeObjectRelease();
              return 1;
            }
            goto LABEL_63;
          }
          __break(1u);
LABEL_118:
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
          swift_bridgeObjectRetain();
          v35 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_66;
        }
LABEL_63:
        v13 = *(_QWORD *)(v1 + 16);
        v12 = *(_QWORD *)(v1 + 24);
        v9 = *(_QWORD *)(v1 + 32);
        LOBYTE(v17) = *(_BYTE *)(v1 + 40);
        v10 = *(_QWORD *)(v1 + 48);
        v34 = v13 >> 62;
        if ((v17 & 1) != 0)
        {
          if (v34)
            goto LABEL_118;
          v35 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
LABEL_66:
          v36 = *(_QWORD *)(v12 + 16);
          v37 = v35 + v36;
          if (!__OFADD__(v35, v36))
          {
            if (v9 >> 62)
            {
              swift_bridgeObjectRetain();
              v38 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v38 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            outlined consume of NavigationPath.Representation(v13, v12, v9, 1);
            v19 = __OFADD__(v37, v38);
            v39 = v37 + v38;
            if (v19)
            {
              __break(1u);
              goto LABEL_72;
            }
LABEL_75:
            if (!(v10 >> 62))
            {
LABEL_76:
              v40 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
              goto LABEL_77;
            }
LABEL_121:
            swift_bridgeObjectRetain();
            v40 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
LABEL_77:
            outlined consume of NavigationPath.Representation(v13, v12, v9, v17);
            swift_bridgeObjectRelease();
            v41 = v39 + v40;
            if (!__OFADD__(v39, v40))
            {
              v43 = v59;
              v42 = v60;
              if (v41 != v8)
              {
                outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
                swift_bridgeObjectRelease();
                v45 = *(_QWORD *)(v1 + 16);
                v43 = *(_QWORD *)(v1 + 24);
                v44 = *(_QWORD *)(v1 + 32);
                LOBYTE(v12) = *(_BYTE *)(v1 + 40);
                v42 = *(_QWORD *)(v1 + 48);
                if ((v12 & 1) == 0)
                  goto LABEL_94;
                if (v45 >> 62)
                  goto LABEL_129;
                v47 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
                outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 1);
                swift_bridgeObjectRetain();
                outlined copy of NavigationPath.Representation(v45, v43, v44, 1);
                goto LABEL_88;
              }
              if (v57)
              {
                swift_bridgeObjectRetain();
                v44 = _CocoaArrayWrapper.endIndex.getter();
                outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
                if (v58)
                  goto LABEL_124;
LABEL_81:
                v45 = *(_QWORD *)(v56 + 16);
              }
              else
              {
                v44 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (!v58)
                  goto LABEL_81;
LABEL_124:
                swift_bridgeObjectRetain();
                v45 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
              swift_bridgeObjectRelease();
              v46 = v44 + v45;
              if (__OFADD__(v44, v45))
              {
                __break(1u);
              }
              else
              {
                result = v46 - v8;
                if (!__OFSUB__(v46, v8))
                  return result;
              }
              __break(1u);
              while (2)
              {
                __break(1u);
LABEL_128:
                __break(1u);
LABEL_129:
                outlined copy of NavigationPath.Representation(v45, v43, v44, 1);
                swift_bridgeObjectRetain();
                outlined copy of NavigationPath.Representation(v45, v43, v44, 1);
                swift_bridgeObjectRetain();
                v47 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
LABEL_88:
                v48 = *(_QWORD *)(v43 + 16);
                v49 = v47 + v48;
                if (__OFADD__(v47, v48))
                {
                  __break(1u);
                }
                else
                {
                  if (v44 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    v50 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v50 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  }
                  outlined consume of NavigationPath.Representation(v45, v43, v44, 1);
                  v19 = __OFADD__(v49, v50);
                  v51 = v49 + v50;
                  if (!v19)
                  {
LABEL_96:
                    if (!(v42 >> 62))
                      goto LABEL_97;
LABEL_132:
                    swift_bridgeObjectRetain();
                    v52 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    goto LABEL_98;
                  }
                  __break(1u);
LABEL_94:
                  if (!(v45 >> 62))
                  {
                    v51 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    outlined copy of NavigationPath.Representation(v45, v43, v44, 0);
                    swift_bridgeObjectRetain();
                    goto LABEL_96;
                  }
                }
                outlined copy of NavigationPath.Representation(v45, v43, v44, 0);
                swift_bridgeObjectRetain();
                outlined copy of NavigationPath.Representation(v45, v43, v44, 0);
                v51 = _CocoaArrayWrapper.endIndex.getter();
                outlined consume of NavigationPath.Representation(v45, v43, v44, 0);
                if (v42 >> 62)
                  goto LABEL_132;
LABEL_97:
                v52 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_98:
                outlined consume of NavigationPath.Representation(v45, v43, v44, v12);
                swift_bridgeObjectRelease();
                v53 = v51 + v52;
                if (__OFADD__(v51, v52))
                  continue;
                break;
              }
              v19 = __OFSUB__(v53, v8);
              v54 = v53 - v8;
              if (!v19)
                return 2 * (v54 != 1);
              goto LABEL_128;
            }
            goto LABEL_109;
          }
          __break(1u);
        }
        else if (!v34)
        {
          v39 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 0);
          swift_bridgeObjectRetain();
          goto LABEL_75;
        }
        outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v13, v12, v9, 0);
        v39 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v13, v12, v9, 0);
        if (!(v10 >> 62))
          goto LABEL_76;
        goto LABEL_121;
      }
      v10 = v59;
      LOBYTE(v17) = v60;
      if (v8 >= v21)
        goto LABEL_42;
      if (v57)
      {
        outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
        v9 = _CocoaArrayWrapper.endIndex.getter();
        outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
        if (!v58)
        {
LABEL_22:
          v13 = *(_QWORD *)(v56 + 16);
          goto LABEL_23;
        }
      }
      else
      {
        v9 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
        swift_bridgeObjectRetain();
        if (!v58)
          goto LABEL_22;
      }
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_23:
      outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
      swift_bridgeObjectRelease();
      if (__OFADD__(v9, v13))
        goto LABEL_103;
      if (v8 >= (uint64_t)(v9 + v13))
      {
LABEL_42:
        v13 = *(_QWORD *)(v1 + 16);
        v12 = *(_QWORD *)(v1 + 24);
        v9 = *(_QWORD *)(v1 + 32);
        LOBYTE(v17) = *(_BYTE *)(v1 + 40);
        v10 = *(_QWORD *)(v1 + 48);
        v27 = v13 >> 62;
        if ((v17 & 1) == 0)
          goto LABEL_51;
        if (v27)
          goto LABEL_110;
        v28 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 1);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v13, v12, v9, 1);
        goto LABEL_45;
      }
      if ((*(_BYTE *)(v1 + 40) & 1) != 0)
      {
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v9 = *(_QWORD *)(v1 + 16);
      if ((v9 & 0xC000000000000001) != 0)
      {
        v24 = *(_QWORD *)(v1 + 24);
        v25 = *(_QWORD *)(v1 + 32);
        v12 = *(_QWORD *)(v1 + 48);
        outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), v24, v25, 0);
        swift_bridgeObjectRetain();
        outlined copy of NavigationPath.Representation(v9, v24, v25, 0);
        v13 = MEMORY[0x18D75E3BC](v8, v9);
        outlined consume of NavigationPath.Representation(v9, v24, v25, 0);
        outlined consume of NavigationPath.Representation(v9, v24, v25, 0);
        swift_bridgeObjectRelease();
        if (v55)
          goto LABEL_36;
      }
      else
      {
        if ((unint64_t)v8 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_104;
        v13 = *(_QWORD *)(v9 + 8 * v8 + 32);
        swift_retain();
        if (v55)
        {
LABEL_36:
          outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v62, v61, v59, 0);
          v22 = MEMORY[0x18D75E3BC](v8, v62);
          outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
          outlined consume of NavigationPath.Representation(v62, v61, v59, 0);
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
      }
      if ((unint64_t)v8 >= *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_105;
      v22 = *(_QWORD *)(v62 + 8 * v8 + 32);
      swift_retain();
LABEL_31:
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 160))(v22);
      swift_release();
      swift_release();
      if ((v23 & 1) == 0)
      {
LABEL_72:
        outlined consume of NavigationPath.Representation(v62, v61, v10, 0);
        swift_bridgeObjectRelease();
        return 2;
      }
      ++v8;
    }
    if (v14)
    {
      outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v9, v10, v11, 1);
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v9, v10, v11, 1);
    }
    v16 = *(_QWORD *)(v10 + 16);
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      goto LABEL_106;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v9, v10, v11, 1);
    v19 = __OFADD__(v17, v18);
    v20 = v17 + v18;
    if (v19)
      goto LABEL_107;
LABEL_16:
    if (!(v13 >> 62))
      goto LABEL_17;
    goto LABEL_39;
  }
  return result;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.updatePossibilities(for:into:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_beginAccess();
  v7 = ResolvedNavigationDestinations.updatePossibilities(for:over:)(a1, a2, a3, v3 + 16);
  swift_endAccess();
  return v7;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v31[4];
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 16);
  v21 = *(_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  swift_beginAccess();
  v14 = *(_QWORD *)(v8 + 16);
  v13 = *(_QWORD *)(v8 + 24);
  v15 = *(_QWORD *)(v8 + 32);
  v16 = *(_BYTE *)(v8 + 40);
  v18 = *(_QWORD *)(v8 + 48);
  v17 = *(_QWORD *)(v8 + 56);
  v35 = v14;
  v36 = v13;
  v37 = v15;
  v38 = v16;
  v39 = v18;
  v40 = v17;
  v31[0] = *(_OWORD *)a2;
  v31[1] = v23;
  v31[2] = v22;
  v31[3] = v21;
  v32 = v10;
  v33 = v11;
  v34 = v12;
  outlined copy of NavigationPath.Representation(v14, v13, v15, v16);
  swift_bridgeObjectRetain();
  v19 = NavigationPath.view<A>(basedOn:applying:index:apparentPosition:)(a1, v31, a3, a4, a5, a6, a7, a8);
  outlined consume of NavigationPath.Representation(v14, v13, v15, v16);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  return NavigationPath.contains<A>(_:)(a1, a2, a3) & 1;
}

unint64_t AnyNavigationPath.HeterogeneousBoxBase.description.getter()
{
  uint64_t v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  outlined copy of NavigationPath.Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000028;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of NavigationPath.Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_bridgeObjectRelease();
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of NavigationPath.Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for AnyNavigationPath.HomogeneousBoxBase()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v2 + *(_QWORD *)(v3 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  LOBYTE(v8) = dispatch thunk of Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8 & 1;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v2 + *(_QWORD *)(v3 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.equals(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  void (*v60)(_BYTE *, _QWORD);
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  void (*v64)(_BYTE *, _QWORD);
  char *v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  char v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t AssociatedTypeWitness;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  void (*v102)(char *);
  void (*v103)(char *, char *, uint64_t);
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  _BYTE v115[32];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(v4 + 192);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 200) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v105 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v97 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v104 = (char *)&v94 - v11;
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v101 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v111 = (char *)&v94 - v18;
  v19 = swift_getAssociatedTypeWitness();
  v100 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v109 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v110 = (char *)&v94 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v106 = (char *)&v94 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v108 = (char *)&v94 - v30;
  v99 = v4;
  v31 = swift_dynamicCastClass();
  if (v31)
  {
    v32 = v31;
    v33 = swift_retain();
    v35 = AnyNavigationPath.HomogeneousBoxBase.count.getter(v33, v34);
    if (v35 == AnyNavigationPath.HomogeneousBoxBase.count.getter(v35, v36))
    {
      v94 = a1;
      v37 = (char *)v2 + *(_QWORD *)(*v2 + 232);
      swift_beginAccess();
      v38 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v39 = v111;
      v38(v111, v37, v5);
      v40 = v108;
      dispatch thunk of Collection.startIndex.getter();
      v41 = *(void (**)(char *, uint64_t))(v12 + 8);
      v41(v39, v5);
      v42 = v32 + *(_QWORD *)(*(_QWORD *)v32 + 232);
      swift_beginAccess();
      v43 = v101;
      v96 = v42;
      v44 = v42;
      v45 = v37;
      v112 = v38;
      v38(v101, (char *)v44, v5);
      v114 = v6;
      dispatch thunk of Collection.startIndex.getter();
      v113 = v41;
      v41(v43, v5);
      v46 = v100;
      v47 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
      v95 = v19;
      v103 = v47;
      v107 = v45;
      while (1)
      {
        v48 = v110;
        v47(v110, v40, v19);
        v49 = v111;
        v112(v111, v45, v5);
        v50 = v109;
        dispatch thunk of Collection.endIndex.getter();
        v113(v49, v5);
        swift_getAssociatedConformanceWitness();
        LOBYTE(v49) = dispatch thunk of static Comparable.< infix(_:_:)();
        v51 = *(void (**)(char *, uint64_t))(v46 + 8);
        v51(v50, v19);
        v51(v48, v19);
        v52 = (char *)v96;
        if ((v49 & 1) == 0)
          break;
        v53 = v51;
        v54 = v110;
        v47(v110, v106, v19);
        v55 = v111;
        v112(v111, v52, v5);
        v56 = v109;
        dispatch thunk of Collection.endIndex.getter();
        v113(v55, v5);
        LOBYTE(v55) = dispatch thunk of static Comparable.< infix(_:_:)();
        v53(v56, v19);
        v57 = v54;
        v51 = v53;
        v45 = v107;
        v51(v57, v19);
        if ((v55 & 1) == 0)
          break;
        v59 = v111;
        v58 = (void (*)(char *, uint64_t, uint64_t))v112;
        v112(v111, v45, v5);
        v60 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v102 = *(void (**)(char *))(v105 + 16);
        v61 = AssociatedTypeWitness;
        v102(v104);
        v60(v115, 0);
        v62 = v113;
        v113(v59, v5);
        v63 = v101;
        v58(v101, (uint64_t)v52, v5);
        v64 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v65 = v97;
        v102(v97);
        v64(v115, 0);
        v62(v63, v5);
        v66 = v104;
        LOBYTE(v63) = dispatch thunk of static Equatable.== infix(_:_:)();
        v67 = *(void (**)(char *, uint64_t))(v105 + 8);
        v67(v65, v61);
        v67(v66, v61);
        if ((v63 & 1) == 0)
        {
          swift_release();
          v90 = v95;
          v51(v106, v95);
          v91 = v108;
          v92 = v90;
          goto LABEL_13;
        }
        v68 = (void (*)(char *, uint64_t, uint64_t))v112;
        v112(v59, v107, v5);
        v70 = v108;
        v69 = v109;
        v19 = v95;
        v103(v109, v108, v95);
        v71 = v52;
        v72 = v110;
        dispatch thunk of Collection.index(after:)();
        v51(v69, v19);
        v113(v59, v5);
        v73 = v70;
        v51(v70, v19);
        v74 = v100;
        v102 = *(void (**)(char *))(v100 + 32);
        ((void (*)(char *, char *, uint64_t))v102)(v73, v72, v19);
        v68(v59, (uint64_t)v71, v5);
        v75 = v106;
        v76 = v103;
        v103(v69, v106, v19);
        dispatch thunk of Collection.index(after:)();
        v77 = v69;
        v46 = v74;
        v51(v77, v19);
        v113(v59, v5);
        v51(v75, v19);
        ((void (*)(char *, char *, uint64_t))v102)(v75, v72, v19);
        v47 = v76;
        v45 = v107;
        v40 = v108;
      }
      v78 = v110;
      v79 = v108;
      v47(v110, v108, v19);
      v80 = v111;
      v112(v111, v45, v5);
      v81 = v51;
      v82 = v109;
      dispatch thunk of Collection.endIndex.getter();
      v113(v80, v5);
      LOBYTE(v80) = dispatch thunk of static Equatable.== infix(_:_:)();
      v83 = v82;
      v51 = v81;
      v81(v83, v19);
      v81(v78, v19);
      if ((v80 & 1) != 0)
      {
        v84 = v110;
        v85 = v106;
        v47(v110, v106, v19);
        v86 = v111;
        v112(v111, v52, v5);
        v87 = v51;
        v88 = v109;
        dispatch thunk of Collection.endIndex.getter();
        v113(v86, v5);
        v89 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v87(v88, v19);
        v87(v84, v19);
        v87(v85, v19);
        v87(v108, v19);
        return v89 & 1;
      }
      swift_release();
      v81(v106, v19);
      v91 = v79;
      v92 = v19;
LABEL_13:
      v51(v91, v92);
    }
    else
    {
      swift_release();
    }
  }
  v89 = 0;
  return v89 & 1;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.copy()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)v2 + *(_QWORD *)(v3 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = swift_allocObject();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 192) - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)v9 + 232), v7);
  return v9;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  result = AnyNavigationPath.HomogeneousBoxBase.asElementType<A>(_:)(a1, a2, (uint64_t)&v9 - v7);
  if (!v2)
  {
    swift_beginAccess();
    dispatch thunk of RangeReplaceableCollection.append(_:)();
    return swift_endAccess();
  }
  return result;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.asElementType<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t DynamicType;
  uint64_t *v22;
  _QWORD v23[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v23 - v10;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v14);
  v17 = swift_dynamicCast();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if ((v17 & 1) != 0)
  {
    v19(v11, 0, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v11, AssociatedTypeWitness);
  }
  else
  {
    v19(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    DynamicType = swift_getDynamicType();
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *v22 = AssociatedTypeWitness;
    v22[1] = DynamicType;
    return swift_willThrow();
  }
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.removeLast(_:)()
{
  swift_beginAccess();
  RangeReplaceableCollection<>.removeLast(_:)();
  return swift_endAccess();
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.change(from:)(void (*a1)(char *, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t AssociatedConformanceWitness;
  char v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  void (*v71)(_BYTE *, _QWORD);
  void (*v72)(char *);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, char *, uint64_t);
  _OWORD *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char *v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t AssociatedTypeWitness;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  void (*v127)(char *, char *, uint64_t);
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  _QWORD *v130;
  void (*v131)(char *, char *, uint64_t);
  char *v132;
  void (*v133)(char *, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  void (*v139)(char *, uint64_t);
  _BYTE v140[32];
  uint64_t v141;

  v139 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 192);
  v5 = *(_QWORD *)(*(_QWORD *)(*v1 + 200) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v129 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v120 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v119 = (char *)&v115 - v10;
  v135 = v5;
  v137 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD **)(v137 - 8);
  MEMORY[0x1E0C80A78](v137, v12);
  v124 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v125 = (char *)&v115 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v115 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v138 = (char *)&v115 - v23;
  v141 = v4;
  v24 = *(_QWORD **)(v4 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v115 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v118 = (char *)&v115 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v132 = (char *)&v115 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v115 - v37;
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v115 - v41;
  MEMORY[0x1E0C80A78](v43, v44);
  v136 = (char *)&v115 - v45;
  v122 = v3;
  v46 = swift_dynamicCastClass();
  if (v46)
  {
    v116 = v28;
    v117 = v2;
    v47 = v46 + *(_QWORD *)(*(_QWORD *)v46 + 232);
    swift_beginAccess();
    v48 = (void (*)(char *, uint64_t, uint64_t))v24[2];
    v49 = v47;
    v50 = v141;
    v48(v42, v49, v141);
    v51 = (void (*)(char *, char *, uint64_t))v24[4];
    v130 = v11;
    v51(v136, v42, v50);
    v52 = (uint64_t)v1 + *(_QWORD *)(*v1 + 232);
    swift_beginAccess();
    v133 = v48;
    v48(v38, v52, v50);
    dispatch thunk of Collection.startIndex.getter();
    v139 = (void (*)(char *, uint64_t))v24[1];
    v139(v38, v50);
    v126 = v20;
    v53 = v52;
    dispatch thunk of Collection.startIndex.getter();
    v54 = (void (*)(char *, char *, uint64_t))v130[2];
    v55 = v125;
    v56 = v38;
    v57 = v124;
    v123 = v38;
    v134 = v53;
    v131 = v54;
    while (1)
    {
      v58 = v137;
      v54(v55, v138, v137);
      v59 = v141;
      v133(v56, v53, v141);
      dispatch thunk of Collection.endIndex.getter();
      v139(v56, v59);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v61 = dispatch thunk of static Comparable.< infix(_:_:)();
      v62 = (void (*)(char *, uint64_t))v130[1];
      v62(v57, v58);
      v62(v55, v58);
      v63 = v132;
      v64 = v133;
      v133(v132, (uint64_t)v136, v59);
      v128 = v62;
      if ((v61 & 1) == 0)
        break;
      v65 = v141;
      dispatch thunk of Collection.endIndex.getter();
      v66 = v126;
      v67 = v137;
      v68 = dispatch thunk of static Comparable.< infix(_:_:)();
      v62(v55, v67);
      v139(v132, v65);
      if ((v68 & 1) == 0)
        goto LABEL_9;
      v56 = v123;
      v69 = v141;
      v70 = v64;
      v64(v123, v134, v141);
      v71 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v72 = *(void (**)(char *))(v129 + 16);
      v73 = v119;
      v74 = AssociatedTypeWitness;
      v72(v119);
      v71(v140, 0);
      v139(v56, v69);
      v75 = dispatch thunk of Collection.subscript.read();
      v76 = v120;
      v72(v120);
      ((void (*)(_BYTE *, _QWORD))v75)(v140, 0);
      LOBYTE(v75) = dispatch thunk of static Equatable.== infix(_:_:)();
      v77 = *(void (**)(char *, uint64_t))(v129 + 8);
      v77(v76, v74);
      v77(v73, v74);
      if ((v75 & 1) == 0)
      {
        v96 = v137;
        v97 = v128;
        v128(v66, v137);
        v97(v138, v96);
        v139(v136, v141);
        return 2;
      }
      v78 = v137;
      v79 = v141;
      v70(v56, v134, v141);
      v57 = v124;
      v80 = v138;
      v131(v124, v138, v78);
      v55 = v125;
      dispatch thunk of Collection.index(after:)();
      v81 = v128;
      v128(v57, v78);
      v139(v56, v79);
      v81(v80, v78);
      v127 = (void (*)(char *, char *, uint64_t))v130[4];
      v127(v80, v55, v78);
      v82 = v131;
      v131(v57, v66, v78);
      dispatch thunk of Collection.index(after:)();
      v81(v57, v78);
      v81(v66, v78);
      v53 = v134;
      v127(v66, v55, v78);
      v54 = v82;
    }
    v139(v63, v141);
LABEL_9:
    v84 = v137;
    v131(v55, v138, v137);
    v85 = v123;
    v86 = v141;
    v64(v123, v134, v141);
    dispatch thunk of Collection.endIndex.getter();
    v139(v85, v86);
    v132 = *(char **)(AssociatedConformanceWitness + 8);
    LOBYTE(v85) = dispatch thunk of static Equatable.== infix(_:_:)();
    v87 = v128;
    v128(v57, v84);
    v87(v55, v84);
    v88 = v118;
    v133(v118, (uint64_t)v136, v86);
    if ((v85 & 1) != 0)
    {
      v89 = v88;
      v90 = v137;
      v131(v55, v126, v137);
      v91 = v141;
      dispatch thunk of Collection.endIndex.getter();
      v92 = dispatch thunk of static Equatable.== infix(_:_:)();
      v87(v57, v90);
      v87(v55, v90);
      v139(v89, v91);
      v93 = v138;
      v94 = v131;
      if ((v92 & 1) != 0)
      {
        v95 = v137;
        v87(v126, v137);
        v87(v93, v95);
        v139(v136, v141);
        return 1;
      }
    }
    else
    {
      v139(v88, v141);
      v93 = v138;
      v94 = v131;
    }
    v98 = v137;
    v94(v55, v93, v137);
    v99 = v123;
    v100 = v134;
    v101 = v141;
    v64(v123, v134, v141);
    dispatch thunk of Collection.endIndex.getter();
    v139(v99, v101);
    v102 = dispatch thunk of static Equatable.== infix(_:_:)();
    v87(v57, v98);
    v87(v55, v98);
    v103 = v87;
    if ((v102 & 1) != 0)
    {
      v104 = v55;
      v105 = v55;
      v106 = v126;
      v107 = v137;
      v131(v104, v126, v137);
      v108 = v136;
      v109 = v141;
      dispatch thunk of Collection.endIndex.getter();
      v28 = (char *)dispatch thunk of RandomAccessCollection.distance(from:to:)();
      v103(v57, v107);
      v103(v105, v107);
      v103(v106, v107);
      v103(v138, v107);
      v139(v108, v109);
    }
    else
    {
      v110 = v141;
      v64(v99, v100, v141);
      v111 = v137;
      v131(v55, v138, v137);
      v112 = v116;
      v64(v116, v100, v110);
      dispatch thunk of Collection.endIndex.getter();
      v113 = v139;
      v139(v112, v110);
      LODWORD(v112) = dispatch thunk of RandomAccessCollection.distance(from:to:)() != 1;
      v103(v57, v111);
      v103(v55, v111);
      v113(v99, v110);
      v103(v126, v111);
      v103(v138, v111);
      v113(v136, v110);
      return 2 * v112;
    }
  }
  else
  {
    lazy protocol witness table accessor for type AnyNavigationPath.Error and conformance AnyNavigationPath.Error();
    swift_allocError();
    *v83 = xmmword_187C02A60;
    swift_willThrow();
  }
  return (uint64_t)v28;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.updatePossibilities(for:into:)(unint64_t a1, uint64_t a2, char a3)
{
  return specialized ResolvedNavigationDestinations.updatePossibilities<A>(for:over:)(a1, a2, a3);
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t *a1, __int128 *a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(char *, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t);
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  void (*v38)(char *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(_OWORD *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *boxed_opaque_existential_1;
  char *v49;
  void (*v50)(char *, uint64_t);
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t AssociatedTypeWitness;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char v77[16];
  _OWORD v78[4];
  uint64_t v79;
  char v80;
  uint64_t v81;

  v9 = v8;
  v72 = a8;
  v71 = a7;
  v70 = a6;
  v64 = a5;
  v69 = a4;
  v68 = a3;
  v73 = a1;
  v11 = *v8;
  v12 = *(_QWORD *)(*v8 + 192);
  v13 = *(_QWORD *)(*(_QWORD *)(*v8 + 200) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v65 = (char *)&v52 - v15;
  v16 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v52 - v23;
  v25 = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(v25 - 8);
  v76 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v53 = (char *)&v52 - v31;
  v60 = a2[1];
  v59 = a2[2];
  v58 = a2[3];
  v57 = *((_QWORD *)a2 + 8);
  v56 = *((unsigned __int8 *)a2 + 72);
  v55 = *((_QWORD *)a2 + 10);
  v63 = v11;
  v32 = (uint64_t)v9 + *(_QWORD *)(v11 + 232);
  swift_beginAccess();
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v74 = v33;
  v33(v24, v32, v12);
  v33(v20, v32, v12);
  v62 = v28;
  v54 = v13;
  dispatch thunk of Collection.startIndex.getter();
  v34 = *(void (**)(char *, uint64_t))(v16 + 8);
  v34(v20, v12);
  v35 = v53;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v64 = *(void (**)(char *, uint64_t))(v75 + 8);
  v52 = *a2;
  v64(v28, v76);
  v34(v24, v12);
  v36 = v34;
  v61 = v34;
  v78[0] = v52;
  v78[1] = v60;
  v78[2] = v59;
  v78[3] = v58;
  v79 = v57;
  v80 = v56;
  v81 = v55;
  v74(v24, v32, v12);
  v37 = v35;
  v38 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
  v39 = v66;
  *(_QWORD *)&v60 = *(_QWORD *)(v66 + 16);
  v40 = (uint64_t)v65;
  v41 = AssociatedTypeWitness;
  ((void (*)(char *))v60)(v65);
  v38(v77, 0);
  v36(v24, v12);
  v72 = ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v40, v70, v68, v69, v41, v71, v72);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
  v74(v24, v32, v12);
  v42 = v76;
  v43 = v62;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v62, v37, v76);
  v44 = (void (*)(_OWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
  v46 = v45;
  v47 = v73;
  v73[3] = v41;
  v47[4] = *(_QWORD *)(v63 + 224);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v47);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v60)(boxed_opaque_existential_1, v46, v41);
  v44(v78, 0);
  v49 = v43;
  v50 = v64;
  v64(v49, v42);
  v61(v24, v12);
  v50(v37, v42);
  return v72;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  _QWORD v31[2];
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  v31[1] = v6;
  v32 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 200) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v31 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v16, v34, a2, v20);
  v24 = swift_dynamicCast();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v24)
  {
    v25(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v12, AssociatedTypeWitness);
    v26 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 232);
    swift_beginAccess();
    v28 = v32;
    v27 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v32, v26, v4);
    v29 = Sequence<>.contains(_:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v4);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, AssociatedTypeWitness);
  }
  else
  {
    v25(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v29 = 0;
  }
  return v29 & 1;
}

unint64_t AnyNavigationPath.HomogeneousBoxBase.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::String v8;
  _QWORD v10[4];
  unint64_t v11;
  unint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 192);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = 0;
  v10[2] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v11 = 0xD000000000000026;
  v12 = 0x8000000187BD5420;
  v7 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 232));
}

uint64_t AnyNavigationPath.HomogeneousBoxBase.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 232));
  return swift_deallocClassInstance();
}

void type metadata accessor for AnyNavigationPath.HomogeneousBoxBase()
{
  JUMPOUT(0x18D75FF28);
}

ValueMetadata *type metadata accessor for AnyNavigationPath()
{
  return &type metadata for AnyNavigationPath;
}

void type metadata accessor for AnyNavigationPath.ToHomogeneous()
{
  JUMPOUT(0x18D75FF28);
}

ValueMetadata *type metadata accessor for AnyNavigationPath.ToHeterogeneous()
{
  return &type metadata for AnyNavigationPath.ToHeterogeneous;
}

uint64_t protocol witness for Projection.get(base:) in conformance AnyNavigationPath.ToHeterogeneous@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = v4;
  *(_QWORD *)(v9 + 32) = v5;
  *(_BYTE *)(v9 + 40) = v6;
  *(_QWORD *)(v9 + 48) = v7;
  *(_QWORD *)(v9 + 56) = v8;
  *a2 = v9;
  outlined copy of NavigationPath.Representation(v3, v4, v5, v6);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance AnyNavigationPath.ToHeterogeneous(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  outlined consume of NavigationPath.Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease();
  if (*(__objc2_class **)v3 != _TtCV7SwiftUI17AnyNavigationPathP33_9DF1331F7AC5F2344ADB74E74311CCBE20HeterogeneousBoxBase)
    v3 = 0;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_BYTE *)(v3 + 40);
  v9 = *(_QWORD *)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  outlined copy of NavigationPath.Representation(v4, v5, v6, v7);
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationPath.ToHeterogeneous, &type metadata for AnyNavigationPath.ToHeterogeneous);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationPath.ToHeterogeneous, &type metadata for AnyNavigationPath.ToHeterogeneous);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyNavigationPath.ToHeterogeneous, &type metadata for AnyNavigationPath.ToHeterogeneous);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous);
  }
  return result;
}

void protocol witness for Projection.get(base:) in conformance AnyNavigationPath.ToHomogeneous<A>(uint64_t a1)
{
  specialized AnyNavigationPath.ToHomogeneous.get(base:)(a1);
}

uint64_t sub_18700D5FC(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void protocol witness for Projection.set(base:newValue:) in conformance AnyNavigationPath.ToHomogeneous<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  specialized AnyNavigationPath.ToHomogeneous.set(base:newValue:)(a1, *a2, *(_QWORD *)(a3 + 16));
}

void base witness table accessor for Equatable in AnyNavigationPath.ToHomogeneous<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyNavigationPath()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

void base witness table accessor for Hashable in AnyNavigationPath.ToHomogeneous<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void specialized AnyNavigationPath.ToHomogeneous.get(base:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  AnyNavigationPath.init<A>(path:)();
}

void specialized AnyNavigationPath.ToHomogeneous.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 8))();
  type metadata accessor for AnyNavigationPath.HomogeneousBoxBase();
}

uint64_t sub_18700D7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = swift_dynamicCastClassUnconditional();
  v4 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 232);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v0);
}

uint64_t getEnumTagSinglePayload for AnyNavigationPath.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 16382);
  v3 = (((*(_QWORD *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(_QWORD *)(a1 + 8) >> 50) & 0xC00 | ((*(_QWORD *)(a1 + 8) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnyNavigationPath.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFD)
  {
    *(_QWORD *)result = a2 - 16382;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for AnyNavigationPath.Error(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1] >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

uint64_t destructiveProjectEnumData for AnyNavigationPath.Error(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *destructiveInjectEnumTag for AnyNavigationPath.Error(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 2)
  {
    v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *result &= 0xFFFFFFFFFFFFFF8uLL;
    result[1] = v2;
  }
  else
  {
    *result = 8 * (a2 - 2);
    result[1] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyNavigationPath.Error()
{
  return &type metadata for AnyNavigationPath.Error;
}

uint64_t DefaultDateProgressLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v16 - v5;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v7, v8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v11 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  type metadata accessor for DefaultDateProgressLabel(0);
  result = Text.init(timerInterval:pauseTime:countsDown:showsHours:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14 & 1;
  *(_QWORD *)(a1 + 24) = v15;
  return result;
}

void type metadata accessor for ClosedRange<Date>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ClosedRange<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
    v0 = type metadata accessor for ClosedRange();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>);
  }
}

uint64_t type metadata accessor for DefaultDateProgressLabel(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DefaultDateProgressLabel);
}

uint64_t protocol witness for View.body.getter in conformance DefaultDateProgressLabel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v16 - v5;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v7, v8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v11 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  result = Text.init(timerInterval:pauseTime:countsDown:showsHours:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14 & 1;
  *(_QWORD *)(a1 + 24) = v15;
  return result;
}

void ProgressView.init(timerInterval:countsDown:label:currentValueLabel:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for ProgressView.Base();
}

void sub_18700DD08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, v5, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  (*(void (**)(uint64_t))(v8 - 152))(v9);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v7, 0, 1, v6);
  (*(void (**)(uint64_t))(v8 - 136))(v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  CustomProgressView.init(interval:countdown:label:currentValueLabel:)();
}

uint64_t sub_18700DDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v0 + 32))(*(_QWORD *)(v4 - 120), v2, v3);
}

void ProgressView.init(interval:countdown:label:currentValueLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  _QWORD v13[2];

  v13[0] = a7;
  v13[1] = a8;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v9, v10);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v13 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  ProgressView.init(timerInterval:countsDown:label:currentValueLabel:)();
}

uint64_t sub_18700DEC8()
{
  uint64_t v0;

  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
}

void ProgressView<>.init(timerInterval:countsDown:label:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DefaultDateProgressLabel?, type metadata accessor for DefaultDateProgressLabel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for DefaultDateProgressLabel(255);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultDateProgressLabel and conformance DefaultDateProgressLabel, type metadata accessor for DefaultDateProgressLabel, (uint64_t)&protocol conformance descriptor for DefaultDateProgressLabel);
  type metadata accessor for ProgressView.Base();
}

void sub_18700E030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 - 152) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, v2, v6);
  (*(void (**)(uint64_t))(v8 - 136))(v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v7, 0, 1, v4);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, v5, v6);
  v10 = swift_checkMetadataState();
  *(_BYTE *)(v5 + *(int *)(v10 + 20)) = *(_DWORD *)(v8 - 124);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
  CustomProgressView.init(interval:countdown:label:currentValueLabel:)();
}

uint64_t sub_18700E108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, v3);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 32))(*(_QWORD *)(v4 - 120), v1, v2);
}

void ProgressView<>.init(interval:countdown:label:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v5 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  ProgressView<>.init(timerInterval:countsDown:label:)();
}

uint64_t sub_18700E200()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, v1);
}

uint64_t ProgressView<>.init(timerInterval:countsDown:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a3;
  type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(0, &lazy cache variable for type metadata for CustomProgressView<EmptyView, DefaultDateProgressLabel>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for CustomProgressView);
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v29 - v8;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DefaultDateProgressLabel?, type metadata accessor for DefaultDateProgressLabel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - v12;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(0, &lazy cache variable for type metadata for ProgressView<EmptyView, DefaultDateProgressLabel>.Base, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView.Base);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v29 - v20;
  v29 = a1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v22 = type metadata accessor for DefaultDateProgressLabel(0);
  v13[*(int *)(v22 + 20)] = a2;
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v13, 0, 1, v22);
  v24 = *(int *)(v6 + 52);
  v25 = (uint64_t)&v9[*(int *)(v6 + 56)];
  v23((char *)v25, 1, 1, v22);
  type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
  v27 = *(int *)(v26 + 48);
  outlined init with take of TableCellFormula((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v9[v27] = a2;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  v9[v24] = 0;
  outlined assign with take of DefaultDateProgressLabel?((uint64_t)v13, v25);
  outlined init with take of CustomProgressView<EmptyView, DefaultDateProgressLabel>((uint64_t)v9, (uint64_t)v21, &lazy cache variable for type metadata for CustomProgressView<EmptyView, DefaultDateProgressLabel>, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for CustomProgressView);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  swift_storeEnumTagMultiPayload();
  return outlined init with take of CustomProgressView<EmptyView, DefaultDateProgressLabel>((uint64_t)v21, v30, &lazy cache variable for type metadata for ProgressView<EmptyView, DefaultDateProgressLabel>.Base, (uint64_t (*)(uint64_t, _QWORD *))type metadata accessor for ProgressView.Base);
}

void type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  if (!*a2)
  {
    v6 = type metadata accessor for DefaultDateProgressLabel(255);
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultDateProgressLabel and conformance DefaultDateProgressLabel, type metadata accessor for DefaultDateProgressLabel, (uint64_t)&protocol conformance descriptor for DefaultDateProgressLabel);
    v10[0] = MEMORY[0x1E0CE7C38];
    v10[1] = v6;
    v10[2] = MEMORY[0x1E0CE7C28];
    v10[3] = v7;
    v8 = a3(a1, v10);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool))
  {
    type metadata accessor for ClosedRange<Date>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool));
  }
}

uint64_t outlined assign with take of DefaultDateProgressLabel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DefaultDateProgressLabel?, type metadata accessor for DefaultDateProgressLabel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CustomProgressView<EmptyView, DefaultDateProgressLabel>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, _QWORD *))
{
  uint64_t v6;

  type metadata accessor for CustomProgressView<EmptyView, DefaultDateProgressLabel>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t ProgressView<>.init(interval:countdown:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  ProgressView<>.init(timerInterval:countsDown:)((uint64_t)v9, a2, a3);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
}

uint64_t associated type witness table accessor for View.Body : View in DefaultDateProgressLabel()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for DefaultDateProgressLabel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8((_QWORD *)((char *)a1 + *(int *)(v9 + 36)), (_QWORD *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultDateProgressLabel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18700E8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  type metadata accessor for ClosedRange<Date>();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DefaultDateProgressLabel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18700E958(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for ClosedRange<Date>();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
}

uint64_t sub_18700E9D4()
{
  return MEMORY[0x1E0CE6C58];
}

ValueMetadata *type metadata accessor for _TimelineProgressViewBaseEmptyState()
{
  return &type metadata for _TimelineProgressViewBaseEmptyState;
}

uint64_t ProgressViewSchedule.entries(from:mode:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t, double);
  uint64_t v81;
  char *v82;
  uint64_t (*v83)();
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(void);
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t result;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  _BYTE *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;

  v117 = a2;
  v103 = type metadata accessor for ProgressViewSchedule(0);
  v122 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103, v2);
  v123 = v3;
  v124 = (uint64_t)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v113 = (uint64_t)&v98 - v6;
  v111 = type metadata accessor for Calendar.RepeatedTimePolicy();
  v109 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111, v7);
  v108 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar.SearchDirection();
  v106 = *(_QWORD *)(v9 - 8);
  v107 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v101 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Calendar.MatchingPolicy();
  v13 = *(_QWORD *)(v12 - 8);
  v120 = v12;
  v121 = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v104 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17, v18);
  v110 = (char *)&v98 - v19;
  v102 = type metadata accessor for Calendar.Component();
  v100 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v20);
  v22 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for TimeZone?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v16);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v98 - v25;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Calendar?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v16);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v98 - v29;
  v31 = type metadata accessor for DateComponents();
  v112 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v119 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Calendar();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v36);
  v38 = (char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for Date();
  v39 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118, v40);
  v105 = (char *)&v98 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v114 = (char *)&v98 - v44;
  v45 = type metadata accessor for PeriodicTimelineSchedule();
  MEMORY[0x1E0C80A78](v45, v46);
  v115 = (char *)&v98 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for PeriodicTimelineSchedule.Entries();
  MEMORY[0x1E0C80A78](v48, v49);
  v116 = (char *)&v98 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for AnimationTimelineSchedule.Entries();
  v53 = MEMORY[0x1E0C80A78](v51, v52);
  v55 = (char *)&v98 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*v117 & 1) != 0)
  {
    v117 = (_BYTE *)v31;
    v98 = v38;
    static Calendar.current.getter();
    v99 = v35;
    v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    v103 = v34;
    v56(v30, 1, 1, v34);
    v57 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v26, 1, 1, v57);
    v58 = v100;
    v59 = v102;
    (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v22, *MEMORY[0x1E0CB1188], v102);
    type metadata accessor for ClosedRange<Date>();
    Calendar.component(_:from:)();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v22, v59);
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    v60 = v104;
    (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v104, *MEMORY[0x1E0CB0F90], v120);
    v61 = *MEMORY[0x1E0CB0FE0];
    v62 = v101;
    v102 = v39;
    v64 = v106;
    v63 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v106 + 104))(v101, v61, v107);
    v66 = v108;
    v65 = v109;
    v67 = v111;
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v108, *MEMORY[0x1E0CB1010], v111);
    v68 = (uint64_t)v110;
    v69 = v98;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
    v70 = *(void (**)(char *, uint64_t))(v64 + 8);
    v71 = v102;
    v70(v62, v63);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v60, v120);
    v72 = v125;
    v73 = v113;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v125, v113, type metadata accessor for ProgressViewSchedule);
    v74 = v118;
    v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v68, 1, v118);
    v76 = v119;
    v77 = v69;
    if (v75 == 1)
    {
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
      v79 = v105;
      v78(v105, v73, v74);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v73, type metadata accessor for ProgressViewSchedule);
      outlined destroy of Date?(v68);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v73, type metadata accessor for ProgressViewSchedule);
      v79 = v105;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v105, v68, v74);
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
    }
    v78(v114, (uint64_t)v79, v74);
    v87 = (uint64_t)v115;
    PeriodicTimelineSchedule.init(from:by:)();
    v127 = 1;
    v88 = (uint64_t)v116;
    PeriodicTimelineSchedule.entries(from:mode:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v87, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE5C78]);
    v89 = MEMORY[0x1E0CE5C58];
    type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>(0, &lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE5C58], &lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, MEMORY[0x1E0CE5C60]);
    v90 = (_QWORD *)swift_allocObject();
    outlined init with take of TableCellFormula(v88, (uint64_t)v90 + *(_QWORD *)(*MEMORY[0x1E0DEC428] + *v90 + 16), (uint64_t (*)(_QWORD))v89);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v79, v74);
    (*(void (**)(char *, _BYTE *))(v112 + 8))(v76, v117);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v77, v103);
  }
  else
  {
    v72 = v125;
    v80 = *(void (**)(char *, uint64_t, uint64_t, double))(v39 + 16);
    if ((*(_BYTE *)(v125 + *(int *)(v103 + 20)) & 1) != 0)
    {
      v80(v114, v125, v118, v53);
      v81 = (uint64_t)v115;
      PeriodicTimelineSchedule.init(from:by:)();
      v126 = 0;
      v82 = v116;
      PeriodicTimelineSchedule.entries(from:mode:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v81, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE5C78]);
      v83 = MEMORY[0x1E0CE5C58];
      type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>(0, &lazy cache variable for type metadata for _SequenceBox<PeriodicTimelineSchedule.Entries>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE5C58], &lazy protocol witness table cache variable for type PeriodicTimelineSchedule.Entries and conformance PeriodicTimelineSchedule.Entries, MEMORY[0x1E0CE5C60]);
      v84 = (_QWORD *)swift_allocObject();
      v85 = (uint64_t)v84 + *(_QWORD *)(*MEMORY[0x1E0DEC428] + *v84 + 16);
      v86 = (uint64_t)v82;
    }
    else
    {
      v80(v55, v125, v118, v53);
      v91 = &v55[*(int *)(v51 + 20)];
      *(_QWORD *)v91 = 0x3F81111111111111;
      v91[8] = 0;
      v83 = type metadata accessor for AnimationTimelineSchedule.Entries;
      type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>(0, &lazy cache variable for type metadata for _SequenceBox<AnimationTimelineSchedule.Entries>, (uint64_t (*)(uint64_t))type metadata accessor for AnimationTimelineSchedule.Entries, &lazy protocol witness table cache variable for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule.Entries);
      v92 = (_QWORD *)swift_allocObject();
      v85 = (uint64_t)v92 + *(_QWORD *)(*MEMORY[0x1E0DEC428] + *v92 + 16);
      v86 = (uint64_t)v55;
    }
    outlined init with take of TableCellFormula(v86, v85, (uint64_t (*)(_QWORD))v83);
  }
  v93 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  v94 = v124;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v72, v124, type metadata accessor for ProgressViewSchedule);
  v95 = (*(unsigned __int8 *)(v122 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
  v96 = swift_allocObject();
  *(_QWORD *)(v96 + 16) = v93;
  outlined init with take of TableCellFormula(v94, v96 + v95, type metadata accessor for ProgressViewSchedule);
  type metadata accessor for _IteratorBox<_ClosureBasedIterator<Date>>();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = partial apply for closure #1 in ProgressViewSchedule.entries(from:mode:);
  *(_QWORD *)(result + 24) = v96;
  return result;
}

uint64_t closure #1 in ProgressViewSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v4 = type metadata accessor for ProgressViewSchedule(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v27 - v10;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v27 - v19;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v20, v11, v12);
    type metadata accessor for ClosedRange<Date>();
    v23 = static Date.> infix(_:_:)();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for ProgressViewSchedule);
    if ((v23 & 1) != 0)
    {
      static Date.now.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
      v24 = dispatch thunk of static Comparable.< infix(_:_:)();
      v25 = *(void (**)(char *, uint64_t))(v13 + 8);
      v25(v16, v12);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for ProgressViewSchedule);
      if ((v24 & 1) == 0)
      {
        static Date.distantFuture.getter();
        v25(v20, v12);
LABEL_8:
        v21 = 0;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, v21, 1, v12);
      }
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for ProgressViewSchedule);
    }
    v22(a2, v20, v12);
    goto LABEL_8;
  }
  outlined destroy of Date?((uint64_t)v11);
  v21 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, v21, 1, v12);
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance ProgressViewSchedule@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = ProgressViewSchedule.entries(from:mode:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _TimelineProgressViewBaseEmptyState.CodingKeys()
{
  lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimelineProgressViewBaseEmptyState.CodingKeys()
{
  lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _TimelineProgressViewBaseEmptyState(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_TimelineProgressViewBaseEmptyState.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys, (uint64_t)&unk_1E1B05D00, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TimelineProgressViewBaseEmptyState.CodingKeys, &unk_1E1B05D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TimelineProgressViewBaseEmptyState.CodingKeys, &unk_1E1B05D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TimelineProgressViewBaseEmptyState.CodingKeys, &unk_1E1B05D00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState.CodingKeys and conformance _TimelineProgressViewBaseEmptyState.CodingKeys);
  }
  return result;
}

void type metadata completion function for TimelineProgressView.ArchivableTimelineProgressView()
{
  type metadata completion function for TimelineProgressView.ArchivableTimelineProgressView();
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for TimelineProgressView.ArchivableTimelineProgressView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v24;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 80);
  v6 = v4 + v5;
  v7 = (v6 & ~(unint64_t)v5) + v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 17;
  v12 = v10 | v5 | 3;
  if (v12 > 7
    || ((*(_DWORD *)(v9 + 80) | v5) & 0x100000) != 0
    || ((v10 + 17 + ((v7 + 5) & 0xFFFFFFFFFFFFFFFCLL)) & ~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v18 = (_QWORD *)(v15 + (((v10 | v5) + 16) & ~v12));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v24 = ~v10;
    v17 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v3 + 16);
    v18 = a1;
    v17(a1, a2, v2);
    v17((_QWORD *)(((unint64_t)a1 + v6) & ~(unint64_t)v5), (_QWORD *)(((unint64_t)a2 + v6) & ~(unint64_t)v5), v2);
    v19 = (char *)a1 + v7;
    *v19 = *((_BYTE *)a2 + v7);
    v19[1] = *((_BYTE *)a2 + v7 + 1);
    v20 = ((unint64_t)a1 + v7 + 5) & 0xFFFFFFFFFFFFFFFCLL;
    v21 = ((unint64_t)a2 + v7 + 5) & 0xFFFFFFFFFFFFFFFCLL;
    v22 = *(_OWORD *)v21;
    *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
    *(_OWORD *)v20 = v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v11 + v20) & v24, (v11 + v21) & v24, v16);
  }
  return v18;
}

uint64_t destroy for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, v2);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = v5 + a1;
  v7 = *(unsigned __int8 *)(v3 + 80);
  v4((v6 + v7) & ~v7, v2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((((v6 + ((v5 + v7) & ~v7) + 5) & 0xFFFFFFFFFFFFFFFCLL)+ *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)+ 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))((*(unsigned __int8 *)(v16 + 80) + 17 + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))((*(unsigned __int8 *)(v16 + 80) + 17 + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))((*(unsigned __int8 *)(v16 + 80) + 17 + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (unint64_t)(v11 + 5) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))((*(unsigned __int8 *)(v16 + 80) + 17 + v12) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 17 + v13) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  unsigned int v23;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v6 <= v9)
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = v6;
  if (v10 <= 0xFE)
    v11 = 254;
  else
    v11 = v10;
  if (!a2)
    return 0;
  v12 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(_QWORD *)(v5 + 64);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = v13 + 17;
  if (a2 <= v11)
    goto LABEL_27;
  v15 = ((v14 + ((v12 + 5) & 0xFFFFFFFFFFFFFFFCLL)) & ~v13) + *(_QWORD *)(v8 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_27:
      if ((_DWORD)v6 == v11)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
      v22 = (unsigned __int8 *)(v12 + a1);
      if (v10 > 0xFE)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))((v14 + ((unint64_t)(v22 + 5) & 0xFFFFFFFFFFFFFFFCLL)) & ~v13, v9, AssociatedTypeWitness);
      v23 = *v22;
      if (v23 >= 2)
        return v23 - 1;
      else
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_27;
LABEL_18:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v21 = v15;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  return v11 + v20 + 1;
}

void storeEnumTagSinglePayload for TimelineProgressView.ArchivableTimelineProgressView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (v7 <= *(_DWORD *)(v8 + 84))
    v9 = *(_DWORD *)(v8 + 84);
  else
    v9 = v7;
  if (v9 <= 0xFE)
    v10 = 254;
  else
    v10 = v9;
  v11 = ((*(unsigned __int8 *)(v8 + 80)
        + 17
        + ((((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(_QWORD *)(v6 + 64)
          + 5) & 0xFFFFFFFFFFFFFFFCLL)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v10)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineProgressView.ArchivableTimelineProgressView);
}

void *type metadata accessor for _TimelineProgressViewBaseEmptyState.CodingKeys()
{
  return &unk_1E1B05D00;
}

uint64_t type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
}

void type metadata completion function for TimelineProgressView.ConditionallyArchivableTimelineProgressView()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for TimelineProgressView.ConditionallyArchivableTimelineProgressView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);
  uint64_t v26;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 80);
  v6 = v5;
  v7 = v4 + v5;
  v8 = ((v4 + v6) & ~v6) + v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 + 9;
  if ((v11 | (unint64_t)v5) > 7
    || ((*(_DWORD *)(v10 + 80) | v5) & 0x100000) != 0
    || ((v11 + 9 + ((v8 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v11) + *(_QWORD *)(v10 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v18 = (_QWORD *)(v15
                   + (((v11 | v5) & 0xF8 ^ 0x1F8) & ((v11 | v5) + 16)));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v26 = ~v11;
    v17 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v3 + 16);
    v18 = a1;
    v17(a1, a2, v2);
    v17((_QWORD *)(((unint64_t)a1 + v7) & ~v6), (_QWORD *)(((unint64_t)a2 + v7) & ~v6), v2);
    v19 = (char *)a1 + v8;
    *v19 = *((_BYTE *)a2 + v8);
    v19[1] = *((_BYTE *)a2 + v8 + 1);
    v20 = ((unint64_t)a1 + v8 + 9) & 0xFFFFFFFFFFFFFFF8;
    v21 = ((unint64_t)a2 + v8 + 9) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
    v22 = (v12 + v20) & v26;
    v23 = (v12 + v21) & v26;
    v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
    swift_retain();
    v24(v22, v23, v16);
  }
  return v18;
}

uint64_t destroy for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, v2);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = v5 + a1;
  v7 = *(unsigned __int8 *)(v3 + 80);
  v4((v6 + v7) & ~v7, v2);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((((v6 + ((v5 + v7) & ~v7) + 9) & 0xFFFFFFFFFFFFFFF8)+ *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)+ 9) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (v16 + 9 + v12) & ~v16;
  v18 = (v16 + 9 + v13) & ~v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_retain();
  v19(v17, v18, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_retain();
  swift_release();
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))((*(unsigned __int8 *)(v15 + 80) + 9 + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))((*(unsigned __int8 *)(v15 + 80) + 9 + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8;
  v13 = (unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_release();
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))((*(unsigned __int8 *)(v15 + 80) + 9 + v12) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(unsigned __int8 *)(v15 + 80) + 9 + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineProgressView.ConditionallyArchivableTimelineProgressView(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v6 <= v9)
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = v6;
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = v10;
  if (!a2)
    return 0;
  v12 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(_QWORD *)(v5 + 64);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = v13 + 9;
  if (a2 <= v11)
    goto LABEL_27;
  v15 = ((v14 + ((v12 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v13) + *(_QWORD *)(v8 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_27:
      if ((_DWORD)v6 == v11)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
      v22 = (unint64_t *)((a1 + v12 + 9) & 0xFFFFFFFFFFFFFFF8);
      if (v10 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)v22 + v14) & ~v13, v9, AssociatedTypeWitness);
      v23 = *v22;
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      if ((v23 + 1) >= 2)
        return v23;
      else
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_27;
LABEL_18:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v21 = v15;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  return v11 + v20 + 1;
}

void storeEnumTagSinglePayload for TimelineProgressView.ConditionallyArchivableTimelineProgressView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (v7 <= *(_DWORD *)(v8 + 84))
    v9 = *(_DWORD *)(v8 + 84);
  else
    v9 = v7;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = ((*(unsigned __int8 *)(v8 + 80)
        + 9
        + ((((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(_QWORD *)(v6 + 64)
          + 9) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v10)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for TimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineProgressView);
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TimelineProgressViewUpdateStyle.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;

  v24 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys, (uint64_t)&unk_1E1AFFEF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimelineProgressViewUpdateStyle.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys, (uint64_t)&unk_1E1AFFED0, v3);
  v20 = *(_QWORD *)(v8 - 8);
  v21 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - v10;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimelineProgressViewUpdateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys, (uint64_t)&unk_1E1AFFE40, v3);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v19 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v24 & 1) != 0)
  {
    v26 = 1;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v23);
  }
  else
  {
    v25 = 0;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimelineProgressViewUpdateStyle.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6365536568546E6FLL;
  else
    return 0x746C7561666564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimelineProgressViewUpdateStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TimelineProgressViewUpdateStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressViewUpdateStyle.CodingKeys()
{
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressViewUpdateStyle.CodingKeys()
{
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys()
{
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys()
{
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys()
{
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys()
{
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance TimelineProgressViewUpdateStyle@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = specialized TimelineProgressViewUpdateStyle.init(from:)(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimelineProgressViewUpdateStyle(_QWORD *a1)
{
  unsigned __int8 *v1;

  return TimelineProgressViewUpdateStyle.encode(to:)(a1, *v1);
}

uint64_t TimelineProgressView.ConditionallyArchivableTimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  v34 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  v29 = *(_QWORD *)(a1 + 16);
  v6 = v29;
  v30 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v29 - v9;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TimelineProgressView.FinalTimelineProgressView(0, v6, v5, v15);
  v31 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v29 - v22;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v24 = *(_BYTE *)(v3 + *(int *)(a1 + 36));
  LOBYTE(v5) = *(_BYTE *)(v3 + *(int *)(a1 + 40));
  v25 = *(_QWORD *)(v3 + *(int *)(a1 + 44));
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v10, v3 + *(int *)(a1 + 52), v33);
  TimelineProgressView.FinalTimelineProgressView.init(interval:updateStyle:countdown:tint:extendedState:)((uint64_t)v14, v24, v5, v25, (uint64_t)v10, v29, v30, (uint64_t)v19);
  v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.FinalTimelineProgressView, v16);
  static ViewBuilder.buildExpression<A>(_:)(v19, v16, v26);
  v27 = *(void (**)(char *, uint64_t))(v31 + 8);
  swift_retain();
  v27(v19, v16);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v23, v16, v34);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v16);
}

uint64_t TimelineProgressView.FinalTimelineProgressView.init(interval:updateStyle:countdown:tint:extendedState:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;

  v14 = a2 & 1;
  outlined init with take of TableCellFormula(a1, a8, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v16 = (int *)type metadata accessor for TimelineProgressView.FinalTimelineProgressView(0, a6, a7, v15);
  *(_BYTE *)(a8 + v16[9]) = v14;
  *(_BYTE *)(a8 + v16[10]) = a3;
  *(_QWORD *)(a8 + v16[11]) = a4;
  v17 = a8 + v16[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v17, a5, AssociatedTypeWitness);
}

uint64_t TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1, v8);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v21[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v14 = type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView(0, v11, v12, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView, v14);
  EnvironmentReader.init(_:)();
  v22 = v30;
  v23 = v31;
  v15 = type metadata accessor for EnvironmentReader();
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE38A8], v15);
  View.fixedSize(horizontal:vertical:)();
  swift_release();
  v22 = v26;
  v23 = v27;
  v24 = v28;
  v25 = v29;
  v17 = type metadata accessor for ModifiedContent();
  v21[0] = v16;
  v21[1] = MEMORY[0x1E0CE35C0];
  v18 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v21);
  static ViewBuilder.buildExpression<A>(_:)(&v22, v17, v18);
  swift_release();
  v26 = v30;
  v27 = v31;
  v28 = v32;
  v29 = v33;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v26, v17, a3);
  return swift_release();
}

uint64_t closure #1 in TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  v31 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v12 = (char *)&v29 - v11;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a3;
  v18 = (int *)type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView(0, a3, a4, v17);
  v19 = *(_QWORD *)(a2 + v18[11]);
  if (v19)
  {
    v33 = *a1;
    dispatch thunk of AnyColorBox.resolve(in:)();
    v22 = v20 | ((unint64_t)v21 << 32);
    v25 = v23 | ((unint64_t)v24 << 32);
  }
  else
  {
    v22 = 0;
    v25 = 0;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v26 = *(_BYTE *)(a2 + v18[9]);
  v27 = *(_BYTE *)(a2 + v18[10]);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v12, a2 + v18[13], v30);
  return TimelineProgressView.ArchivableTimelineProgressView.init(interval:updateStyle:countdown:resolvedTint:extendedState:)((uint64_t)v16, v26, v27, v22, v25, v19 == 0, (uint64_t)v12, v32, v31, a4);
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.init(interval:updateStyle:countdown:resolvedTint:extendedState:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  char v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;

  v17 = a2 & 1;
  outlined init with take of TableCellFormula(a1, a9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v19 = (int *)type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView(0, a8, a10, v18);
  *(_BYTE *)(a9 + v19[9]) = v17;
  *(_BYTE *)(a9 + v19[10]) = a3;
  v20 = a9 + v19[11];
  *(_QWORD *)v20 = a4;
  *(_QWORD *)(v20 + 8) = a5;
  *(_BYTE *)(v20 + 16) = a6 & 1;
  v21 = a9 + v19[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v21, a7, AssociatedTypeWitness);
}

uint64_t TimelineProgressView.ConditionallyArchivableTimelineProgressView.init(interval:updateStyle:countdown:tint:isCircular:extendedState:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;

  v16 = a2 & 1;
  outlined init with take of TableCellFormula(a1, a9, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v18 = (int *)type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView(0, a7, a8, v17);
  *(_BYTE *)(a9 + v18[9]) = v16;
  *(_BYTE *)(a9 + v18[10]) = a3;
  *(_QWORD *)(a9 + v18[11]) = a4;
  *(_BYTE *)(a9 + v18[12]) = a5;
  v19 = a9 + v18[13];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v19, a6, AssociatedTypeWitness);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView, a3);
  return static ConditionallyArchivableView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView, a3);
  return static ConditionallyArchivableView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView);
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v20 = a2;
  v21 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v20 - v10;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  if ((*(_BYTE *)(v3 + *(int *)(a1 + 44) + 16) & 1) == 0)
    v16 = Color.init(_:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v17 = *(_BYTE *)(v3 + *(int *)(a1 + 36));
  v18 = *(_BYTE *)(v3 + *(int *)(a1 + 40));
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + *(int *)(a1 + 48), AssociatedTypeWitness);
  return TimelineProgressView.FinalTimelineProgressView.init(interval:updateStyle:countdown:tint:extendedState:)((uint64_t)v15, v17, v18, v16, (uint64_t)v11, v6, v21, v20);
}

BOOL static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7453657461647075 && a2 == 0xEB00000000656C79
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6465766C6F736572 && a2 == 0xEC000000746E6954
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6465646E65747865 && a2 == 0xED00006574617453)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

Swift::Int TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1870120A8 + 4 * byte_187C02D5C[a1]))(0x6C61767265746E69, 0xE800000000000000);
}

uint64_t sub_1870120A8()
{
  return 0x7453657461647075;
}

uint64_t sub_1870120C8()
{
  return 0x776F64746E756F63;
}

uint64_t sub_1870120E4()
{
  return 0x6465766C6F736572;
}

uint64_t sub_187012104()
{
  return 0x6465646E65747865;
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  char v19;
  uint64_t v20[2];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  char v25;

  v21 = a2;
  v5 = v4;
  v7 = *(_QWORD *)(a2 + 16);
  v20[0] = *(_QWORD *)(a2 + 24);
  v20[1] = v7;
  v8 = type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys(255, v7, v20[0], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys, v8);
  v9 = type metadata accessor for KeyedEncodingContainer();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v20 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v23) = 0;
  type metadata accessor for ClosedRange<Date>();
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E0CB0890], MEMORY[0x1E0DEA4C8]);
  v14 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v16 = v10;
  v17 = v21;
  LOBYTE(v23) = *(_BYTE *)(v5 + *(int *)(v21 + 36));
  v25 = 1;
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v23) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v18 = (__int128 *)(v5 + *(int *)(v17 + 44));
  v19 = *((_BYTE *)v18 + 16);
  v23 = *v18;
  v24 = v19;
  v25 = 3;
  lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v23) = 4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, v9);
}

uint64_t TimelineProgressView.ArchivableTimelineProgressView.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  char v49;

  v35 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v36 = (char *)&v33 - v8;
  type metadata accessor for ClosedRange<Date>();
  v39 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v42 = (uint64_t)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys(255, a2, a3, v12);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys, v13);
  v44 = type metadata accessor for KeyedDecodingContainer();
  v37 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v14);
  v16 = (char *)&v33 - v15;
  v40 = a3;
  v41 = a2;
  v18 = (int *)type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView(0, a2, a3, v17);
  v33 = *((_QWORD *)v18 - 1);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v33 - v20;
  v23 = (char *)&v33 + *(int *)(v22 + 44) - v20;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v24 = a1[3];
  v45 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  v43 = v16;
  v25 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  v26 = (uint64_t)v21;
  v28 = v37;
  v27 = AssociatedTypeWitness;
  LOBYTE(v47) = 0;
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E0CB08C0], MEMORY[0x1E0DEA4F0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of TableCellFormula(v42, v26, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v49 = 1;
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_BYTE *)(v26 + v18[9]) = v47;
  LOBYTE(v47) = 2;
  *(_BYTE *)(v26 + v18[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  v49 = 3;
  lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v29 = v48;
  *(_OWORD *)v23 = v47;
  v23[16] = v29;
  LOBYTE(v47) = 4;
  swift_getAssociatedConformanceWitness();
  v30 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v43, v44);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v26 + v18[12], v30, v27);
  v31 = v33;
  (*(void (**)(uint64_t, uint64_t, int *))(v33 + 16))(v35, v26, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  return (*(uint64_t (**)(uint64_t, int *))(v31 + 8))(v26, v18);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(char *a1, char *a2)
{
  return static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  unsigned __int8 *v0;

  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  unsigned __int8 *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  unsigned __int8 *v0;

  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TimelineProgressView.ArchivableTimelineProgressView.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TimelineProgressView.ArchivableTimelineProgressView.encode(to:)(a1, a2, a3, a4);
}

uint64_t TimelineProgressView.FinalTimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = v3;
  v40 = a3;
  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = type metadata accessor for ProgressViewSchedule(255);
  v9 = *(_QWORD *)(a1 + 16);
  v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProgressViewSchedule and conformance ProgressViewSchedule, type metadata accessor for ProgressViewSchedule, (uint64_t)&protocol conformance descriptor for ProgressViewSchedule);
  v10 = type metadata accessor for TimelineView(0, v8, v9, v38);
  v39 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v36 = (uint64_t)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v37 = (char *)&v34 - v15;
  v35 = v8;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v34 - v22;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, (uint64_t)&v34 - v22, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v23[*(int *)(v8 + 20)] = *(_BYTE *)(v4 + *(int *)(a1 + 36));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v23, (uint64_t)v19, type metadata accessor for ProgressViewSchedule);
  v24 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v24, v4, a1);
  v25 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v26 = swift_allocObject();
  v27 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v26 + 16) = v9;
  *(_QWORD *)(v26 + 24) = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v26 + v25, v24, a1);
  v28 = *(_QWORD *)(v27 + 8);
  v29 = v36;
  TimelineView<>.init(_:content:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter, v26, v35, v9, v38, v28, v36);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, type metadata accessor for ProgressViewSchedule);
  v41 = v28;
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>, v10, &v41);
  v31 = (uint64_t)v37;
  static ViewBuilder.buildExpression<A>(_:)(v29, v10, v30);
  v32 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v32(v29, v10);
  static ViewBuilder.buildBlock<A>(_:)(v31, v10, v40);
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v31, v10);
}

uint64_t closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  void (*v24)(uint64_t, char *, uint64_t, uint64_t, double);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v29 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v28 - v10;
  v28 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v28 - v18;
  v21 = type metadata accessor for TimelineProgressView.FinalTimelineProgressView(0, a2, a3, v20);
  ClosedRange<>.progress(at:countdown:)();
  v23 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1 + *(int *)(v21 + 48), AssociatedTypeWitness);
  v24 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, double))(a3 + 40);
  v25 = swift_retain();
  v24(v25, v11, a2, a3, v23);
  static ViewBuilder.buildExpression<A>(_:)(v15, a2, *(_QWORD *)(a3 + 8));
  v26 = *(void (**)(char *, uint64_t))(v28 + 8);
  v26(v15, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v19, a2, v29);
  return ((uint64_t (*)(char *, uint64_t))v26)(v19, a2);
}

uint64_t TimelineProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v38 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  v32 = *(_QWORD *)(a1 + 16);
  v6 = v32;
  v33 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v34 = (char *)&v31 - v9;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView(0, v6, v5, v14);
  v35 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v31 - v21;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
  v23 = *(_BYTE *)(v3 + *(int *)(a1 + 36));
  LOBYTE(v5) = *(_BYTE *)(v3 + *(int *)(a1 + 40));
  v24 = *(_QWORD *)(v3 + *(int *)(a1 + 44));
  v25 = *(_BYTE *)(v3 + *(int *)(a1 + 48));
  v26 = v3 + *(int *)(a1 + 52);
  v27 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v26, v37);
  TimelineProgressView.ConditionallyArchivableTimelineProgressView.init(interval:updateStyle:countdown:tint:isCircular:extendedState:)((uint64_t)v13, v23, v5, v24, v25, v27, v32, v33, (uint64_t)v18);
  v28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView, v15);
  static ViewBuilder.buildExpression<A>(_:)(v18, v15, v28);
  v29 = *(void (**)(char *, uint64_t))(v35 + 8);
  swift_retain();
  v29(v18, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v22, v15, v38);
  return ((uint64_t (*)(char *, uint64_t))v29)(v22, v15);
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>.ArchivableTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for TimelineProgressView<A>.ArchivableTimelineProgressView(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView);
  a1[2] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView, a2);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView, a2);
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for TimelineProgressViewExtendedBase.init(fractionCompleted:tint:extendedState:) in conformance CircularPercentageGaugeRing@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v7 = swift_getKeyPath();
  if (!a1)
    static Color.primary.getter();
  result = AnyShapeStyle.init<A>(_:)();
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = KeyPath;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

uint64_t protocol witness for TimelineProgressViewExtendedBase.init(fractionCompleted:tint:extendedState:) in conformance LinearUIKitProgressView.Base@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t protocol witness for TimelineProgressViewExtendedBase.init(fractionCompleted:tint:extendedState:) in conformance ResolvedCircularPlaybackProgressView.Base@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (!result)
    result = static Color.white.getter();
  *(double *)a2 = a3;
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t sub_187013228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;

  v5 = type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = v4 + ((v6 + 32) & ~v6);
  v8 = type metadata accessor for Date();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  type metadata accessor for ClosedRange<Date>();
  v9(v7 + *(int *)(v10 + 36), v8);
  swift_release();
  v11 = v7 + *(int *)(v5 + 52);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v11, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter@<X0>(__int128 *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView(0, v6, v7, a2)- 8)+ 80);
  return closure #1 in TimelineProgressView.ConditionallyArchivableTimelineProgressView.archivedBody.getter(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

uint64_t type metadata accessor for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineProgressView.FinalTimelineProgressView);
}

uint64_t type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle, &type metadata for TimelineProgressViewUpdateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle, &type metadata for TimelineProgressViewUpdateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle, &type metadata for TimelineProgressViewUpdateStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle and conformance TimelineProgressViewUpdateStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7120], MEMORY[0x1E0CE7110]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved;
  if (!lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7118], MEMORY[0x1E0CE7110]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.Resolved and conformance Color.Resolved);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    type metadata accessor for ClosedRange<Date>();
    v10 = v9;
    v11 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], a3);
    result = MEMORY[0x18D75FFDC](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TimelineProgressView.ArchivableTimelineProgressView.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187013590 + 4 * byte_187C02D66[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1870135C4 + 4 * byte_187C02D61[v4]))();
}

uint64_t sub_1870135C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870135CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1870135D4);
  return result;
}

uint64_t sub_1870135E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1870135E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1870135EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1870135F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t destroy for DefaultDateProgressLabel(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);

  v2 = type metadata accessor for Date();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v5(a1, v2);
  type metadata accessor for ClosedRange<Date>();
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v3 + 36), v2);
}

uint64_t assignWithCopy for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DefaultDateProgressLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for Date();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressViewSchedule()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187013778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  type metadata accessor for ClosedRange<Date>();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProgressViewSchedule()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1870137FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for ClosedRange<Date>();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
}

uint64_t type metadata accessor for ProgressViewSchedule(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ProgressViewSchedule);
}

void type metadata completion function for DefaultDateProgressLabel()
{
  unint64_t v0;

  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata completion function for TimelineProgressView.FinalTimelineProgressView()
{
  type metadata completion function for TimelineProgressView.ArchivableTimelineProgressView();
}

_QWORD *initializeBufferWithCopyOfBuffer for TimelineProgressView.FinalTimelineProgressView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, uint64_t);
  uint64_t v26;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_DWORD *)(v3 + 80);
  v6 = v5;
  v7 = v4 + v5;
  v8 = ((v4 + v6) & ~v6) + v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 + 8;
  if ((v11 | (unint64_t)v5) > 7
    || ((*(_DWORD *)(v10 + 80) | v5) & 0x100000) != 0
    || ((v11 + 8 + ((v8 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v11) + *(_QWORD *)(v10 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    v18 = (_QWORD *)(v15
                   + (((v11 | v5) & 0xF8 ^ 0x1F8) & ((v11 | v5) + 16)));
    swift_retain();
  }
  else
  {
    v16 = AssociatedTypeWitness;
    v26 = ~v11;
    v17 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v3 + 16);
    v18 = a1;
    v17(a1, a2, v2);
    v17((_QWORD *)(((unint64_t)a1 + v7) & ~v6), (_QWORD *)(((unint64_t)a2 + v7) & ~v6), v2);
    v19 = (char *)a1 + v8;
    *v19 = *((_BYTE *)a2 + v8);
    v19[1] = *((_BYTE *)a2 + v8 + 1);
    v20 = (_QWORD *)(((unint64_t)a1 + v8 + 9) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)a2 + v8 + 9) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = ((unint64_t)v20 + v12) & v26;
    v23 = ((unint64_t)v21 + v12) & v26;
    v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
    swift_retain();
    v24(v22, v23, v16);
  }
  return v18;
}

uint64_t destroy for TimelineProgressView.FinalTimelineProgressView(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v4(a1, v2);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = v5 + a1;
  v7 = *(unsigned __int8 *)(v3 + 80);
  v4((v6 + v7) & ~v7, v2);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((((v6 + ((v5 + v7) & ~v7) + 9) & 0xFFFFFFFFFFFFFFF8)+ *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)+ 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

uint64_t initializeWithCopy for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (_QWORD *)((unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = ((unint64_t)v12 + v16 + 8) & ~v16;
  v18 = ((unint64_t)v13 + v16 + 8) & ~v16;
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_retain();
  v19(v17, v18, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (_QWORD *)((unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_retain();
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 24))(((unint64_t)v12 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (_QWORD *)((unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(((unint64_t)v12 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v6((v7 + v8 + a1) & ~v8, (v7 + v8 + a2) & ~v8, v4);
  v9 = ((v7 + v8) & ~v8) + v7;
  v10 = (_BYTE *)(v9 + a1);
  v11 = (_BYTE *)(v9 + a2);
  *v10 = *v11;
  v10[1] = v11[1];
  v12 = (_QWORD *)((unint64_t)(v10 + 9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((unint64_t)(v11 + 9) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))(((unint64_t)v12 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((unint64_t)v13 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineProgressView.FinalTimelineProgressView(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v6 <= v9)
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = v6;
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = v10;
  if (!a2)
    return 0;
  v12 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(_QWORD *)(v5 + 64);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = v13 + 8;
  if (a2 <= v11)
    goto LABEL_27;
  v15 = ((v14 + ((v12 + 9) & 0xFFFFFFFFFFFFFFF8)) & ~v13) + *(_QWORD *)(v8 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_27:
      if ((_DWORD)v6 == v11)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
      v22 = (unint64_t *)((a1 + v12 + 9) & 0xFFFFFFFFFFFFFFF8);
      if (v10 > 0x7FFFFFFE)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)v22 + v14) & ~v13, v9, AssociatedTypeWitness);
      v23 = *v22;
      if (v23 >= 0xFFFFFFFF)
        LODWORD(v23) = -1;
      if ((v23 + 1) >= 2)
        return v23;
      else
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_27;
LABEL_18:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v21 = v15;
    else
      v21 = 4;
    __asm { BR              X12 }
  }
  return v11 + v20 + 1;
}

void storeEnumTagSinglePayload for TimelineProgressView.FinalTimelineProgressView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (v7 <= *(_DWORD *)(v8 + 84))
    v9 = *(_DWORD *)(v8 + 84);
  else
    v9 = v7;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = ((*(unsigned __int8 *)(v8 + 80)
        + 8
        + ((((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(_QWORD *)(v6 + 64)
          + 9) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 64);
  if (a3 <= v10)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

ValueMetadata *type metadata accessor for TimelineProgressViewUpdateStyle()
{
  return &type metadata for TimelineProgressViewUpdateStyle;
}

uint64_t sub_187014510(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView(255, *a1, a1[1], a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView, v4);
  v5 = type metadata accessor for EnvironmentReader();
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE38A8], v5);
  v8[1] = MEMORY[0x1E0CE35C0];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

void sub_1870145AC(_QWORD *a1)
{
  get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for TimelineProgressView.FinalTimelineProgressView);
}

void sub_1870145C0(_QWORD *a1)
{
  get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
}

void get_witness_table_7SwiftUI32TimelineProgressViewExtendedBaseRzlAA0cdE0V05FinalcdE033_E25B5CE50FE780022155187DDAA79ACALLVyx_GAA0E0HPyHCTm(_QWORD *a1, void (*a2)(uint64_t, _QWORD, _QWORD))
{
  a2(255, *a1, a1[1]);
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in TimelineProgressView<A>.FinalTimelineProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for CustomDebugStringConvertible in TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for CustomStringConvertible in TimelineProgressView<A>.ArchivableTimelineProgressView.CodingKeys()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ProgressViewSchedule()
{
  return lazy protocol witness table accessor for type AnyIterator<Date> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<Date> and conformance AnyIterator<A>, &lazy cache variable for type metadata for AnyIterator<Date>, MEMORY[0x1E0DEC1C0], MEMORY[0x1E0DEC1E0]);
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18701473C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProgressViewSchedule(0) - 8) + 80);
  v2 = (v1 + 24) & ~v1;
  swift_release();
  v3 = v0 + v2;
  v4 = type metadata accessor for Date();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  type metadata accessor for ClosedRange<Date>();
  v5(v3 + *(int *)(v6 + 36), v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ProgressViewSchedule.entries(from:mode:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProgressViewSchedule(0) - 8) + 80);
  return closure #1 in ProgressViewSchedule.entries(from:mode:)(v1 + ((v3 + 24) & ~v3), a1);
}

void type metadata accessor for _IteratorBox<_ClosureBasedIterator<Date>>()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Date>>)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DECEC8];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for _ClosureBasedIterator<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0DECEC8]);
    lazy protocol witness table accessor for type AnyIterator<Date> and conformance AnyIterator<A>(&lazy protocol witness table cache variable for type _ClosureBasedIterator<Date> and conformance _ClosureBasedIterator<A>, &lazy cache variable for type metadata for _ClosureBasedIterator<Date>, v0, MEMORY[0x1E0DECED8]);
    v1 = type metadata accessor for _IteratorBox();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<Date>>);
  }
}

uint64_t lazy protocol witness table accessor for type AnyIterator<Date> and conformance AnyIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _SequenceBox<PeriodicTimelineSchedule.Entries>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    v9 = type metadata accessor for _SequenceBox();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t specialized TimelineProgressViewUpdateStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746C7561666564 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6365536568546E6FLL && a2 == 0xEB00000000646E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *specialized TimelineProgressViewUpdateStyle.init(from:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  char v35;
  char v36;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys, (uint64_t)&unk_1E1AFFEF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v33 = (char *)&v27 - v5;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimelineProgressViewUpdateStyle.DefaultCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys, (uint64_t)&unk_1E1AFFED0, v2);
  v7 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  v32 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimelineProgressViewUpdateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys, (uint64_t)&unk_1E1AFFE40, v2);
  v12 = v11;
  v13 = *(_QWORD **)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v27 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys();
  v17 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
    goto LABEL_7;
  v19 = v32;
  v18 = v33;
  v34 = v13;
  v28 = a1;
  v20 = v16;
  v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v21 + 16) != 1)
  {
    v24 = type metadata accessor for DecodingError();
    swift_allocError();
    v13 = v25;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v13 = &type metadata for TimelineProgressViewUpdateStyle;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v13, *MEMORY[0x1E0DEC450], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v34[1])(v16, v12);
    a1 = v28;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v13;
  }
  v13 = (_QWORD *)*(unsigned __int8 *)(v21 + 32);
  if ((v13 & 1) != 0)
  {
    v36 = 1;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys();
    v22 = v18;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v23 = v34;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v30);
  }
  else
  {
    v35 = 0;
    lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v23 = v34;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v31);
  }
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t))v23[1])(v20, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return v13;
}

uint64_t specialized TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.init(intValue:)()
{
  return 5;
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys, &unk_1E1AFFEF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys, &unk_1E1AFFEF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys, &unk_1E1AFFEF0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys and conformance TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.DefaultCodingKeys, &unk_1E1AFFED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.DefaultCodingKeys, &unk_1E1AFFED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.DefaultCodingKeys, &unk_1E1AFFED0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.DefaultCodingKeys and conformance TimelineProgressViewUpdateStyle.DefaultCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.CodingKeys, &unk_1E1AFFE40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.CodingKeys, &unk_1E1AFFE40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.CodingKeys, &unk_1E1AFFE40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressViewUpdateStyle.CodingKeys, &unk_1E1AFFE40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressViewUpdateStyle.CodingKeys and conformance TimelineProgressViewUpdateStyle.CodingKeys);
  }
  return result;
}

void type metadata accessor for (@thick Any.Type, DecodingError.Context)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context))
  {
    type metadata accessor for @thick Any.Type();
    type metadata accessor for DecodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  }
}

unint64_t type metadata accessor for @thick Any.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for @thick Any.Type;
  if (!lazy cache variable for type metadata for @thick Any.Type)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for @thick Any.Type);
  }
  return result;
}

uint64_t sub_187014F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;

  v5 = type metadata accessor for TimelineProgressView.FinalTimelineProgressView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = v4 + ((v6 + 32) & ~v6);
  v8 = type metadata accessor for Date();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  type metadata accessor for ClosedRange<Date>();
  v9(v7 + *(int *)(v10 + 36), v8);
  swift_release();
  v11 = v7 + *(int *)(v5 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v11, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineProgressView.FinalTimelineProgressView(0, v4, v5, a1)- 8)+ 80);
  return closure #1 in TimelineProgressView.FinalTimelineProgressView.body.getter(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t storeEnumTagSinglePayload for TimelineProgressViewUpdateStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187015108 + 4 * byte_187C02D7E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18701513C + 4 * byte_187C02D79[v4]))();
}

uint64_t sub_18701513C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187015144(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18701514CLL);
  return result;
}

uint64_t sub_187015158(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187015160);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187015164(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18701516C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TimelineProgressViewUpdateStyle.CodingKeys()
{
  return &unk_1E1AFFE40;
}

void *type metadata accessor for TimelineProgressViewUpdateStyle.DefaultCodingKeys()
{
  return &unk_1E1AFFED0;
}

void *type metadata accessor for TimelineProgressViewUpdateStyle.OnTheSecondCodingKeys()
{
  return &unk_1E1AFFEF0;
}

uint64_t sub_1870151A8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for ProgressViewSchedule(255);
  v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ProgressViewSchedule and conformance ProgressViewSchedule, type metadata accessor for ProgressViewSchedule, (uint64_t)&protocol conformance descriptor for ProgressViewSchedule);
  v5 = type metadata accessor for TimelineView(255, v3, v1, v4);
  v7 = *(_QWORD *)(v2 + 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>, v5, &v7);
}

ValueMetadata *type metadata accessor for StageConfigurationAttributes()
{
  return &type metadata for StageConfigurationAttributes;
}

void protocol witness for WindowSceneConfigurationAttributes.sceneListValue(_:) in conformance StageConfigurationAttributes()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t DefaultLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  v4 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance DefaultLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return DefaultLabelStyle.makeBody(configuration:)(a1);
}

uint64_t key path getter for EnvironmentValues.multimodalListIconStyle : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.multimodalListIconStyle : EnvironmentValues()
{
  return EnvironmentValues.multimodalListIconStyle.setter();
}

uint64_t sub_187015674()
{
  return EnvironmentValues.multimodalListIconStyle.setter();
}

uint64_t sub_1870156A8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

double key path getter for EnvironmentValues.fontBodyLeading : EnvironmentValues@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  lazy protocol witness table accessor for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey();
  EnvironmentValues.subscript.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in DefaultLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultLabelStyle()
{
  return &type metadata for DefaultLabelStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleCo()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListS;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListS)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleW();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, La, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<L, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifie, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<FallbackLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type FallbackLabelStyle and conformance FallbackLabelStyle, (uint64_t)&type metadata for FallbackLabelStyle);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListS);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleW()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContex)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<L(255);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<FallbackLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type FallbackLabelStyle and conformance FallbackLabelStyle, (uint64_t)&type metadata for FallbackLabelStyle);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContex);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<L(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWr, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, , (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, (uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<Li, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>,, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>,(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, E, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleC, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleC(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, , type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPre, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPre(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleCo, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarSt, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarSt(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPred, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Lab, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Lab(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarSty, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle, (uint64_t)&type metadata for SidebarLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<InsetListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type InsetListLabelStyle and conformance InsetListLabelStyle, (uint64_t)&type metadata for InsetListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InsetListLabelStyle and conformance InsetListLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InsetListLabelStyle and conformance InsetListLabelStyle;
  if (!lazy protocol witness table cache variable for type InsetListLabelStyle and conformance InsetListLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InsetListLabelStyle, &type metadata for InsetListLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListLabelStyle and conformance InsetListLabelStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<ToolbarItemLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle, (uint64_t)&type metadata for ToolbarItemLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle;
  if (!lazy protocol witness table cache variable for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarItemLabelStyle, &type metadata for ToolbarItemLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SwipeActionsStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SwipeActionsStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle;
  if (!lazy protocol witness table cache variable for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TitleAndIconLabelStyle, &type metadata for TitleAndIconLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<AccessibilityLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle, (uint64_t)&type metadata for AccessibilityLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle;
  if (!lazy protocol witness table cache variable for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityLabelStyle, &type metadata for AccessibilityLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListGridContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListGridLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle, (uint64_t)&type metadata for MultimodalListGridLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListGridContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListGridContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListGridLabelStyle, &type metadata for MultimodalListGridLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListStackContext>);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListStackLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle, (uint64_t)&type metadata for MultimodalListStackLabelStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MultimodalListStackContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<MultimodalListStackContext>);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MultimodalListStackLabelStyle, &type metadata for MultimodalListStackLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, MEMORY[0x1E0CE5968], MEMORY[0x1E0CE5958], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<WrappingLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WrappingLabelStyle and conformance WrappingLabelStyle, (uint64_t)&type metadata for WrappingLabelStyle);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WrappingLabelStyle and conformance WrappingLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WrappingLabelStyle and conformance WrappingLabelStyle;
  if (!lazy protocol witness table cache variable for type WrappingLabelStyle and conformance WrappingLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappingLabelStyle, &type metadata for WrappingLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappingLabelStyle and conformance WrappingLabelStyle);
  }
  return result;
}

void type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for LabelStyleWritingModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type FallbackLabelStyle and conformance FallbackLabelStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FallbackLabelStyle and conformance FallbackLabelStyle;
  if (!lazy protocol witness table cache variable for type FallbackLabelStyle and conformance FallbackLabelStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FallbackLabelStyle, &type metadata for FallbackLabelStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FallbackLabelStyle and conformance FallbackLabelStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifie()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingM, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, , lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabe, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>,, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyMo, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleC, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<Sty, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<Sty()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, Static, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPre, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAccepts, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAccepts()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextA, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarSt, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Toolba, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<Toolba()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Lab, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>, StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>;
  if (!lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>)
  {
    v1 = type metadata accessor for Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Label<A, B>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Label<LabelStyleConfiguration.Title, LabelStyleConfiguration.Icon> and conformance Label<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<PlainListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for LabelStyleWritingModifier<ListLabelStyle>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LabelStyleWritingModifier<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<SidebarLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<SidebarLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarLabelStyle and conformance SidebarLabelStyle, (uint64_t)&type metadata for SidebarLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, LabelStyleWritingModifier<SidebarLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<InsetListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<InsetListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type InsetListLabelStyle and conformance InsetListLabelStyle, (uint64_t)&type metadata for InsetListLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetListStyleContext>, LabelStyleWritingModifier<InsetListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ListLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ListLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListLabelStyle and conformance ListLabelStyle, (uint64_t)&type metadata for ListLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, LabelStyleWritingModifier<ListLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<ToolbarItemLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<ToolbarItemLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarItemLabelStyle and conformance ToolbarItemLabelStyle, (uint64_t)&type metadata for ToolbarItemLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, LabelStyleWritingModifier<ToolbarItemLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SwipeActionsStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle, (uint64_t)&type metadata for TitleAndIconLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityQuickActionStyleContext>, LabelStyleWritingModifier<TitleAndIconLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<AccessibilityLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<AccessibilityLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityLabelStyle and conformance AccessibilityLabelStyle, (uint64_t)&type metadata for AccessibilityLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, LabelStyleWritingModifier<AccessibilityLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalListGridLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListGridLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListGridLabelStyle and conformance MultimodalListGridLabelStyle, (uint64_t)&type metadata for MultimodalListGridLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListGridContext>, LabelStyleWritingModifier<MultimodalListGridLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalListStackLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalListStackLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListStackLabelStyle and conformance MultimodalListStackLabelStyle, (uint64_t)&type metadata for MultimodalListStackLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MultimodalListStackContext>, LabelStyleWritingModifier<MultimodalListStackLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type LabelStyleWritingModifier<FallbackLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<WrappingLabelStyle> and conformance LabelStyleWritingModifier<A>, &lazy cache variable for type metadata for LabelStyleWritingModifier<WrappingLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WrappingLabelStyle and conformance WrappingLabelStyle, (uint64_t)&type metadata for WrappingLabelStyle);
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, LabelStyleWritingModifier<WrappingLabelStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EnvironmentValues.FontBodyLeadingKey, &type metadata for EnvironmentValues.FontBodyLeadingKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for IsInImmersiveContext()
{
  return &type metadata for IsInImmersiveContext;
}

ValueMetadata *type metadata accessor for IsInVolumetricContext()
{
  return &type metadata for IsInVolumetricContext;
}

ValueMetadata *type metadata accessor for AllowPresentationPredicate()
{
  return &type metadata for AllowPresentationPredicate;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext);
}

unint64_t lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInVolumetricContext, &type metadata for IsInVolumetricContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInVolumetricContext, &type metadata for IsInVolumetricContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInVolumetricContext, &type metadata for IsInVolumetricContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInVolumetricContext, &type metadata for IsInVolumetricContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInVolumetricContext, &type metadata for IsInVolumetricContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInVolumetricContext()
{
  return &protocol witness table for IsInVolumetricContext;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInImmersiveContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unsigned __int8 v5;

  a4();
  PropertyList.subscript.getter();
  return v5;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInImmersiveContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsInVolumetricContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInImmersiveContext, &type metadata for IsInImmersiveContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInImmersiveContext, &type metadata for IsInImmersiveContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInImmersiveContext, &type metadata for IsInImmersiveContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInImmersiveContext, &type metadata for IsInImmersiveContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsInImmersiveContext, &type metadata for IsInImmersiveContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsInImmersiveContext()
{
  return &protocol witness table for IsInImmersiveContext;
}

uint64_t specialized static AllowPresentationPredicate.evaluate(inputs:)()
{
  char v1;
  char v2;

  lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v2 & 1) == 0)
  {
    lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if (v1 != 1)
      return 1;
  }
  MEMORY[0x18D75AC90](0xD000000000000041, 0x8000000187BD5550);
  return 0;
}

id EnvironmentValues.supportsMultipleWindows.getter()
{
  id v0;
  id v1;

  if (!static AppGraph.shared)
    return 0;
  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  v1 = objc_msgSend(v0, sel_supportsMultipleScenes);

  return v1;
}

uint64_t one-time initialization function for clarityUIButtonTitle()
{
  uint64_t result;

  result = static Font.system(_:design:weight:)();
  static Font.clarityUIButtonTitle = result;
  return result;
}

uint64_t one-time initialization function for clarityUINavigationTitle(uint64_t a1)
{
  return one-time initialization function for clarityUINavigationTitle(a1, 0, &static Font.clarityUINavigationTitle);
}

uint64_t static Font.clarityUINavigationTitle.getter()
{
  if (one-time initialization token for clarityUINavigationTitle != -1)
    swift_once();
  return swift_retain();
}

uint64_t one-time initialization function for clarityUIGridCellTitle(uint64_t a1)
{
  return one-time initialization function for clarityUINavigationTitle(a1, 9, &static Font.clarityUIGridCellTitle);
}

uint64_t one-time initialization function for clarityUINavigationTitle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  static Font.Weight.semibold.getter();
  result = static Font.system(_:design:weight:)();
  *a3 = result;
  return result;
}

void static AlternatingRowBackgroundBehavior.enabled.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.alternatingRowBackgrounds(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.alternatingRowBackgroundBehavior.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.alternatingRowBackgroundBehavior.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlternatingRowBackgroundBehavior.hash(into:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static AlternatingRowBackgroundBehavior.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlternatingRowBackgroundBehavior.hashValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.alternatingRowBackgroundColors.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.alternatingRowBackgroundColors.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.alternatingRowBackgroundColors.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.alternatingRowBackgroundColors(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.alternatesRowBackgrounds(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior;
  if (!lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlternatingRowBackgroundBehavior, &type metadata for AlternatingRowBackgroundBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior and conformance AlternatingRowBackgroundBehavior);
  }
  return result;
}

void sub_187017814()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_187017838()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_187017848()
{
  swift_retain();
  swift_retain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_18701786C()
{
  swift_bridgeObjectRetain();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for AlternatingRowBackgroundBehavior()
{
  return &type metadata for AlternatingRowBackgroundBehavior;
}

uint64_t sub_187017898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior>, (uint64_t)&type metadata for AlternatingRowBackgroundBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior>, (uint64_t)&type metadata for AlternatingRowBackgroundBehavior, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AlternatingRowBackgroundBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_18701796C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<[Color]?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<[Color]?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[Color]?>)
  {
    type metadata accessor for [Color]?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[Color]?>);
  }
}

void type metadata accessor for [Color]?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [Color]?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [Color], MEMORY[0x1E0CE7170], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Color]?);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<[Color]?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[Color]?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AlternatingRowBackgroundBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187017B1C + 4 * byte_187C03AC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187017B50 + 4 * byte_187C03AC0[v4]))();
}

uint64_t sub_187017B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187017B58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187017B60);
  return result;
}

uint64_t sub_187017B6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187017B74);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187017B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187017B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AlternatingRowBackgroundBehavior.Guts()
{
  return &type metadata for AlternatingRowBackgroundBehavior.Guts;
}

unint64_t lazy protocol witness table accessor for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts;
  if (!lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AlternatingRowBackgroundBehavior.Guts, &type metadata for AlternatingRowBackgroundBehavior.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlternatingRowBackgroundBehavior.Guts and conformance AlternatingRowBackgroundBehavior.Guts);
  }
  return result;
}

void static AlternatingRowBackgroundBehavior.automatic.getter()
{
  static AlternatingRowBackgroundBehavior.enabled.getter();
}

void static AlternatingRowBackgroundBehavior.disabled.getter()
{
  static AlternatingRowBackgroundBehavior.enabled.getter();
}

void static ScrollDecelerationRate.fast.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static ScrollDecelerationRate.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ScrollDecelerationRate.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollDecelerationRate.standard.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void ScrollTargetBehaviorDecelerationContext.defaultDecelerationRate.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t ScrollTargetBehaviorDecelerationContext.axes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ScrollTargetBehaviorDecelerationContext.environment.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t ScrollTargetBehaviorContext.axes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

__n128 ScrollTargetBehaviorContext.originalTarget.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 48);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

__n128 ScrollTargetBehaviorContext.originalTarget.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 32) = result;
  *(_BYTE *)(v1 + 48) = v2;
  return result;
}

__n128 (*ScrollTargetBehaviorContext.originalTarget.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  __int128 v5;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  v4 = *(_BYTE *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((_BYTE *)v3 + 48) = v4;
  return ScrollTargetBehaviorContext.originalTarget.modify;
}

__n128 ScrollTargetBehaviorContext.originalTarget.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v1 = *a1;
  v2 = v1[7];
  v3 = *((_BYTE *)v1 + 48);
  v5 = *((_OWORD *)v1 + 1);
  v4 = *((_OWORD *)v1 + 2);
  *(_OWORD *)v2 = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 16) = v5;
  *(_OWORD *)(v2 + 32) = v4;
  *(_BYTE *)(v2 + 48) = v3;
  free(v1);
  return result;
}

double ScrollTargetBehaviorContext.velocity.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void ScrollTargetBehaviorContext.velocity.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 56) = a1;
  *(double *)(v2 + 64) = a2;
}

__n128 (*ScrollTargetBehaviorContext.velocity.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  return ScrollTargetBehaviorContext.velocity.modify;
}

__n128 ScrollTargetBehaviorContext.velocity.modify(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 56) = *a1;
  return result;
}

double ScrollTargetBehaviorContext.contentSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void ScrollTargetBehaviorContext.contentSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 72) = a1;
  *(double *)(v2 + 80) = a2;
}

__n128 (*ScrollTargetBehaviorContext.contentSize.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 72);
  return ScrollTargetBehaviorContext.contentSize.modify;
}

__n128 ScrollTargetBehaviorContext.contentSize.modify(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 72) = *a1;
  return result;
}

void ScrollTargetBehaviorContext.containerSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 88) = a1;
  *(double *)(v2 + 96) = a2;
}

__n128 (*ScrollTargetBehaviorContext.containerSize.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 88);
  return ScrollTargetBehaviorContext.containerSize.modify;
}

__n128 ScrollTargetBehaviorContext.containerSize.modify(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 88) = *a1;
  return result;
}

uint64_t ScrollTargetBehaviorContext.axes.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 104) = result;
  return result;
}

_BYTE *(*ScrollTargetBehaviorContext.axes.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 104);
  return ScrollTargetBehaviorContext.axes.modify;
}

_BYTE *ScrollTargetBehaviorContext.axes.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 104) = result[8];
  return result;
}

uint64_t ScrollTargetBehaviorContext.subscript.getter()
{
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return swift_release();
}

double ScrollTargetBehaviorContext.viewportSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

void ScrollTargetBehaviorContext.viewportSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 88) = a1;
  *(double *)(v2 + 96) = a2;
}

__n128 (*ScrollTargetBehaviorContext.viewportSize.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 88);
  return ScrollTargetBehaviorContext.containerSize.modify;
}

uint64_t closure #1 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for ScrollBehaviorModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t closure #2 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  _BYTE v19[4];
  int v20;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = a3;
  v27 = *MEMORY[0x1E0C80C00];
  v9 = HIDWORD(a3);
  v19[0] = a2 & 1;
  v20 = HIDWORD(a2);
  v10 = type metadata accessor for ScrollBehaviorModifier.LayoutRoleFilter(0, a4, a5, a4);
  v25 = v10;
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollBehaviorModifier<A>.LayoutRoleFilter, v10);
  v26 = v11;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[ScrollableCollection]>, (uint64_t (*)(uint64_t))type metadata accessor for [ScrollableCollection], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  v13 = v12;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v24, v10, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v14);
  type metadata accessor for ScrollBehaviorModifier.ScrollBehaviorProvider(0, a4, a5, v15);
  *(_DWORD *)(a1 + 4) = v18;
  v19[0] = v7 & 1;
  v20 = v9;
  v22 = v10;
  v23 = v11;
  result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v21, v10, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v16);
  *(_DWORD *)(a1 + 8) = v18;
  return result;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ScrollBehaviorModifier<A>.ScrollBehaviorProvider@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollBehaviorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollBehaviorModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransformScrollDeceleration(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransformScrollDeceleration(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance TransformScrollDeceleration()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TransformScrollDeceleration()
{
  lazy protocol witness table accessor for type TransformScrollDeceleration and conformance TransformScrollDeceleration();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t View.scrollDeceleration(_:axes:)(_BYTE *a1, char a2, uint64_t a3)
{
  _BYTE v4[2];

  v4[0] = *a1;
  v4[1] = a2;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for TransformScrollDeceleration);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollTargetModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollTargetModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ScrollTargetModifier(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTargetModifier>, (uint64_t)&type metadata for ScrollTargetModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphInputs.scrollTargetRole.setter();
  result = _GraphInputs.scrollTargetRemovePreference.setter();
  *(_DWORD *)(a2 + 36) |= 0x800u;
  return result;
}

uint64_t View.scrollTarget(isEnabled:)(char a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v5;

  if ((a1 & 1) != 0)
    v3 = 1;
  else
    v3 = 2;
  v5 = v3;
  return MEMORY[0x18D75B4AC](&v5, a2, &type metadata for ScrollTargetModifier, a3);
}

__n128 sub_187018440@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 48) = v2;
  return result;
}

__n128 sub_18701845C(uint64_t a1, uint64_t a2)
{
  char v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 48) = v2;
  return result;
}

__n128 sub_187018478@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 56);
  *a2 = result;
  return result;
}

__n128 sub_187018484(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 56) = *a1;
  return result;
}

__n128 sub_187018490@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 72);
  *a2 = result;
  return result;
}

__n128 sub_18701849C(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 72) = *a1;
  return result;
}

__n128 sub_1870184A8@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 88);
  *a2 = result;
  return result;
}

__n128 sub_1870184B4(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 88) = *a1;
  return result;
}

uint64_t sub_1870184C0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 104);
  return result;
}

_BYTE *sub_1870184CC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 104) = *result;
  return result;
}

__n128 sub_1870184D8(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 88) = *a1;
  return result;
}

uint64_t dispatch thunk of ScrollTargetBehavior.updateTarget(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static ScrollTargetBehavior._makeInputs(_:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

ValueMetadata *type metadata accessor for ScrollDecelerationRate()
{
  return &type metadata for ScrollDecelerationRate;
}

uint64_t initializeBufferWithCopyOfBuffer for ScrollTargetBehaviorDecelerationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollTargetBehaviorDecelerationContext(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollTargetBehaviorDecelerationContext(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTargetBehaviorDecelerationContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTargetBehaviorDecelerationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTargetBehaviorDecelerationContext()
{
  return &type metadata for ScrollTargetBehaviorDecelerationContext;
}

ValueMetadata *type metadata accessor for _ScrollTargetBehaviorEnvironmentContext()
{
  return &type metadata for _ScrollTargetBehaviorEnvironmentContext;
}

uint64_t destroy for ScrollTargetBehaviorContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  v4 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v4;
  v5 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for ScrollTargetBehaviorContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTargetBehaviorContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTargetBehaviorContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTargetBehaviorContext()
{
  return &type metadata for ScrollTargetBehaviorContext;
}

uint64_t sub_187018A0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for ScrollBehaviorModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ScrollBehaviorModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_187018A6C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for TransformScrollDeceleration, (uint64_t)&protocol witness table for TransformScrollDeceleration);
}

uint64_t sub_187018A80(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm(a1, (uint64_t)&type metadata for ScrollTargetModifier, (uint64_t)&protocol witness table for ScrollTargetModifier);
}

uint64_t storeEnumTagSinglePayload for ScrollDecelerationRate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187018AE0 + 4 * byte_187C03BD5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_187018B14 + 4 * byte_187C03BD0[v4]))();
}

uint64_t sub_187018B14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187018B1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187018B24);
  return result;
}

uint64_t sub_187018B30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187018B38);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_187018B3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187018B44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollDecelerationRate.Role()
{
  return &type metadata for ScrollDecelerationRate.Role;
}

uint64_t assignWithCopy for ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTargetModifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  if (*a1 <= 2u)
    v6 = 2;
  else
    v6 = *a1;
  v7 = v6 - 3;
  if (*a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTargetModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187018CB4 + 4 * byte_187C03BDF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187018CE8 + 4 * byte_187C03BDA[v4]))();
}

uint64_t sub_187018CE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187018CF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187018CF8);
  return result;
}

uint64_t sub_187018D04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187018D0CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187018D10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187018D18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for TransformScrollDeceleration(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 65284 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65284 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65284;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65284;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65284;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformScrollDeceleration(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65284 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65284 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187018E04 + 4 * byte_187C03BE9[v4]))();
  *a1 = a2 - 252;
  return ((uint64_t (*)(void))((char *)sub_187018E38 + 4 * byte_187C03BE4[v4]))();
}

uint64_t sub_187018E38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187018E40(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x187018E48);
  return result;
}

uint64_t sub_187018E54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187018E5CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_187018E60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_187018E68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransformScrollDeceleration()
{
  return &type metadata for TransformScrollDeceleration;
}

uint64_t getEnumTagSinglePayload for ScrollBehaviorModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187018F34 + 4 * byte_187C03BEE[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for ScrollBehaviorModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollBehaviorModifier<A>()
{
  return &protocol witness table for ScrollBehaviorModifier<A>;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TransformScrollDeceleration()
{
  return &protocol witness table for TransformScrollDeceleration;
}

_UNKNOWN **base witness table accessor for ViewModifier in TransformScrollDeceleration()
{
  return &protocol witness table for TransformScrollDeceleration;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollTargetModifier()
{
  return &protocol witness table for ScrollTargetModifier;
}

unint64_t lazy protocol witness table accessor for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role;
  if (!lazy protocol witness table cache variable for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollDecelerationRate.Role, &type metadata for ScrollDecelerationRate.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDecelerationRate.Role and conformance ScrollDecelerationRate.Role);
  }
  return result;
}

BOOL specialized static ResolvedScrollBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  char v7;
  int v8;
  char v9;
  _BOOL8 v10;
  int Attribute;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BYTE v22[64];
  _BYTE v23[64];
  _BYTE v24[56];
  _BYTE v25[56];
  _BYTE v26[48];
  _BYTE v27[48];
  _BYTE v28[72];
  _BYTE v29[72];

  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a2 + 40);
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v29);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v28);
  if (v4 != v5)
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v28);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v29);
    goto LABEL_6;
  }
  v6 = v29[44];
  v7 = v29[45];
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v29);
  v8 = v28[44];
  v9 = v28[45];
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v28);
  if ((v7 & 1) != 0)
  {
    if ((v9 & 1) != 0)
    {
      outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v27);
      outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v26);
      goto LABEL_15;
    }
LABEL_6:
    outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v27);
    outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v26);
    goto LABEL_7;
  }
  if ((v9 & 1) != 0)
    goto LABEL_6;
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v27);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v26);
  if (v6 != v8)
    goto LABEL_7;
LABEL_15:
  Attribute = AGWeakAttributeGetAttribute();
  v13 = *MEMORY[0x1E0CFED28];
  v14 = AGWeakAttributeGetAttribute();
  v15 = v14;
  if (Attribute == v13)
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v27);
    if (v15 == v13)
    {
      outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v25);
      outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v24);
      goto LABEL_20;
    }
LABEL_8:
    outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v25);
    outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v24);
    goto LABEL_9;
  }
  if (v14 == v13)
  {
LABEL_7:
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v27);
    goto LABEL_8;
  }
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v27);
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v25);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v24);
  if (Attribute != v15)
    goto LABEL_9;
LABEL_20:
  v16 = AGWeakAttributeGetAttribute();
  v17 = AGWeakAttributeGetAttribute();
  v18 = v17;
  if (v16 == v13)
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
    if (v18 == v13)
    {
      outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v23);
      outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v22);
      goto LABEL_25;
    }
    goto LABEL_10;
  }
  if (v17 == v13)
  {
LABEL_9:
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
LABEL_10:
    outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v23);
    outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v22);
LABEL_11:
    v10 = 0;
    goto LABEL_12;
  }
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v23);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v22);
  if (v16 != v18)
    goto LABEL_11;
LABEL_25:
  v19 = AGWeakAttributeGetAttribute();
  v20 = AGWeakAttributeGetAttribute();
  v10 = v20 == v13;
  if (v19 != v13)
    v10 = v19 == v20 && v20 != v13;
LABEL_12:
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v23);
  return v10;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ScrollTargetRole.Key> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollTargetRole.Key> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollTargetRole.Key> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ScrollTargetRole.Key>, MEMORY[0x1E0CE33D8], MEMORY[0x1E0CE33D0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ScrollTargetRole.Key> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #2 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(a1, *(unsigned __int8 *)(v1 + 32) | ((unint64_t)*(unsigned int *)(v1 + 36) << 32), *(unsigned __int8 *)(v1 + 40) | ((unint64_t)*(unsigned int *)(v1 + 44) << 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined retain of ScrollTargetBehaviorContext(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ScrollTargetBehaviorContext(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

char *specialized static TransformScrollDeceleration.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  char *result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7[20];
  char v8;

  result = (char *)AGGraphGetValue();
  if (result[1])
  {
    v4 = *result;
    v5 = *(_QWORD *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v5)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v8 = v4;
    outlined init with copy of ScrollEnvironmentProperties(v7, (uint64_t)&v6);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v5)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return (char *)outlined destroy of ScrollEnvironmentProperties((uint64_t)v7);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformScrollDeceleration and conformance TransformScrollDeceleration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransformScrollDeceleration and conformance TransformScrollDeceleration;
  if (!lazy protocol witness table cache variable for type TransformScrollDeceleration and conformance TransformScrollDeceleration)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransformScrollDeceleration, &type metadata for TransformScrollDeceleration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformScrollDeceleration and conformance TransformScrollDeceleration);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollBehaviorModifier.LayoutRoleFilter(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

Swift::Void __swiftcall DismissAction.callAsFunction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Binding<PresentationMode>();
  v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v2, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
}

void type metadata accessor for Binding<PresentationMode>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<PresentationMode>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>);
  }
}

uint64_t EnvironmentValues.dismiss.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.isPresented.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for Binding<PresentationMode>();
  MEMORY[0x18D75B9C8](&v2);
  swift_release();
  swift_release();
  return v2;
}

ValueMetadata *type metadata accessor for DismissAction()
{
  return &type metadata for DismissAction;
}

uint64_t static View.mapKitMakeSelectionEnabled<A>(forType:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[8];
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v11 = *((_DWORD *)a1 + 2);
  v12 = a1[2];
  v13 = a1[5];
  v21 = *a1;
  v22 = v11;
  v23 = v12;
  v24 = *(_OWORD *)(a1 + 3);
  v25 = v13;
  v14 = _GraphInputs.selectionStorage<A>(forType:)(a3, a3, a5, a3);
  v16 = SelectionBasedStorage.$isSelectionEnabled.getter(v14, v15);
  LODWORD(v21) = v16;
  BYTE4(v21) = BYTE4(v16) & 1;
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = a4;
  v20[5] = a5;
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  v17 = type metadata accessor for _GraphValue();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static View.mapKitMakeSelectionEnabled<A>(forType:inputs:), (uint64_t)v20, MEMORY[0x1E0DEDCE8], v17, v18, a6);
}

uint64_t partial apply for closure #1 in static View.mapKitMakeSelectionEnabled<A>(forType:inputs:)()
{
  swift_getFunctionTypeMetadata1();
  return _GraphValue.init(_:)();
}

_BYTE *static BorderlessButtonLabelShapeStyle._apply(to:)(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance BorderlessButtonLabelShapeStyle<A>()
{
  return static ShapeStyle._makeView<A>(view:inputs:)();
}

void protocol witness for ShapeStyle.resolve(in:) in conformance BorderlessButtonLabelShapeStyle<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t BorderlessButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = KeyPath;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance BorderlessButtonStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  v3 = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = KeyPath;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t closure #2 in BorderlessButtonStyleBase.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v22 = a1[1];
  v23 = *a1;
  v4 = a1[4];
  v5 = *((_BYTE *)a1 + 40);
  v20 = *((_BYTE *)a1 + 41);
  v21 = *((_BYTE *)a1 + 24);
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v19 = *((_BYTE *)a1 + 72);
  v24 = *(_WORD *)((char *)a1 + 73);
  v17 = *((_BYTE *)a1 + 16);
  v18 = *((_BYTE *)a1 + 75);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v4, v5);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v9, v10);
  specialized Environment.wrappedValue.getter(v9, v10, &v25);
  outlined consume of Environment<Bool>.Content(v9, v10);
  v16 = v25;
  KeyPath = swift_getKeyPath();
  v12 = swift_getKeyPath();
  v13 = swift_getKeyPath();
  v14 = swift_getKeyPath();
  result = swift_getKeyPath();
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  *(_QWORD *)a3 = v23;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v17;
  *(_BYTE *)(a3 + 24) = v21;
  *(_QWORD *)(a3 + 32) = v4;
  *(_BYTE *)(a3 + 40) = v5;
  *(_BYTE *)(a3 + 41) = v20;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = v7;
  *(_QWORD *)(a3 + 64) = v8;
  *(_BYTE *)(a3 + 72) = v19;
  *(_BYTE *)(a3 + 75) = v18;
  *(_WORD *)(a3 + 73) = v24;
  *(_BYTE *)(a3 + 76) = v16;
  *(_QWORD *)(a3 + 80) = KeyPath;
  *(_BYTE *)(a3 + 88) = v30;
  *(_QWORD *)(a3 + 96) = v12;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 105) = v29;
  *(_QWORD *)(a3 + 112) = v13;
  *(_BYTE *)(a3 + 120) = v28;
  *(_QWORD *)(a3 + 128) = v14;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 153) = v27;
  *(_QWORD *)(a3 + 160) = result;
  *(_BYTE *)(a3 + 168) = v26;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsConditionallyBorderedPredicate()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t ConditionallyBorderedButton.resolvedBorderShape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v4 = *(_BYTE *)(v2 + *(int *)(a1 + 36));
  v5 = v2 + *(int *)(a1 + 44);
  v6 = *(_QWORD *)v5;
  v7 = *(unsigned __int8 *)(v5 + 8);
  v8 = *(unsigned __int8 *)(v5 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)v5, v7, *(_BYTE *)(v5 + 9));
  specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8), (uint64_t)&v15);
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  v9 = v15;
  LOBYTE(v7) = v16;
  result = static EdgeInsets.zero.getter();
  *(_BYTE *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = v14;
  return result;
}

uint64_t ConditionallyBorderedButton.background.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  float v15;
  __int128 v16;
  _BYTE v17[8];
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  ConditionallyBorderedButton.resolvedBorderShape.getter(a1, (uint64_t)v17);
  v5 = v17[0];
  v6 = v18;
  v7 = v19;
  v16 = v20;
  v8 = v21;
  v9 = v22;
  v10 = v2 + *(int *)(a1 + 40);
  v11 = *(_QWORD *)v10;
  v12 = *(_BYTE *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v10, v12);
  v13 = specialized Environment.wrappedValue.getter(v11, v12);
  result = outlined consume of Environment<Bool>.Content(v11, v12);
  v15 = 0.18;
  *(_BYTE *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  if ((v13 & 1) == 0)
    v15 = 0.0;
  *(_BYTE *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v9;
  *(float *)(a2 + 56) = v15;
  *(_WORD *)(a2 + 60) = 256;
  return result;
}

uint64_t ConditionallyBorderedButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD v45[2];
  char v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  __int128 v57;
  int v58;
  char v59;
  char v60;

  v43 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModifiedContent();
  v40 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v37 - v11;
  type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>();
  v13 = type metadata accessor for ModifiedContent();
  v42 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v39 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v41 = (char *)&v37 - v18;
  v19 = (uint64_t *)(v3 + *(int *)(a1 + 48));
  v20 = *((_BYTE *)v19 + 8);
  v21 = v19[4];
  LOBYTE(v18) = *((_BYTE *)v19 + 40);
  v22 = *((_BYTE *)v19 + 41);
  v23 = v19[6];
  v24 = *((_BYTE *)v19 + 56);
  v54 = *v19;
  LOBYTE(v55) = v20;
  *(_OWORD *)v56 = *((_OWORD *)v19 + 1);
  *(_QWORD *)&v56[16] = v21;
  LOBYTE(v57) = v18;
  BYTE1(v57) = v22;
  *((_QWORD *)&v57 + 1) = v23;
  LOBYTE(v58) = v24;
  BorderedButtonSpec.padding.getter();
  v38 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  v25 = v3 + *(int *)(a1 + 40);
  v26 = *(_QWORD *)v25;
  LOBYTE(v6) = *(_BYTE *)(v25 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v25, v6);
  v27 = specialized Environment.wrappedValue.getter(v26, v6);
  outlined consume of Environment<Bool>.Content(v26, v6);
  if (v27 == 2)
    static EdgeInsets.zero.getter();
  v28 = *(_QWORD *)(a1 + 24);
  View.padding(_:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v5);
  ConditionallyBorderedButton.background.getter(a1, (uint64_t)&v54);
  v46 = v54;
  v47 = v55;
  v48 = v56[0];
  v49 = *(_OWORD *)&v56[8];
  v50 = v57;
  v51 = v58;
  v52 = v59;
  v53 = v60;
  static Alignment.center.getter();
  type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>();
  v45[0] = v28;
  v45[1] = MEMORY[0x1E0CE2BC0];
  v29 = MEMORY[0x1E0CE2E70];
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v45);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, MEMORY[0x1E0CE0E50]);
  v31 = v39;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v9);
  v32 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>, MEMORY[0x1E0CE4B88]);
  v44[0] = v30;
  v44[1] = v32;
  v33 = MEMORY[0x18D75FFDC](v29, v13, v44);
  v34 = (uint64_t)v41;
  static ViewBuilder.buildExpression<A>(_:)(v31, v13, v33);
  v35 = *(void (**)(char *, uint64_t))(v42 + 8);
  v35(v31, v13);
  static ViewBuilder.buildBlock<A>(_:)(v34, v13, v43);
  return ((uint64_t (*)(uint64_t, uint64_t))v35)(v34, v13);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OpacityButtonHighlightModifier@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  double v3;
  char v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int8 v8;

  v3 = 1.0;
  if (*(_BYTE *)v1 == 1)
  {
    v4 = *(_BYTE *)(v1 + 16);
    v5 = *(_QWORD *)(v1 + 8);
    outlined copy of Environment<Bool>.Content(v5, v4);
    specialized Environment.wrappedValue.getter(v5, v4, &v8);
    v6 = v8;
    result = outlined consume of Environment<Bool>.Content(v5, v4);
    v3 = 0.2;
    if (v6)
      v3 = 0.4;
  }
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.controlSize : EnvironmentValues(char *a1)
{
  char v2;

  v2 = *a1;
  return MEMORY[0x18D7587F4](&v2);
}

uint64_t key path setter for EnvironmentValues.keyboardShortcut : EnvironmentValues()
{
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE3238], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

uint64_t sub_18701A8A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.controlSize.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18701A8E0(char *a1)
{
  char v2;

  v2 = *a1;
  return MEMORY[0x18D7587F4](&v2);
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in BorderlessButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for BorderlessButtonStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderlessButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BorderlessButtonStyleBase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 25);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BorderlessButtonStyleBase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = -(char)a2;
  }
  return result;
}

uint64_t sub_18701AA60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.colorScheme.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18701AAA0()
{
  return EnvironmentValues.colorScheme.setter();
}

uint64_t sub_18701AAD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.defaultFont.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18701AB0C()
{
  swift_retain();
  return EnvironmentValues.defaultFont.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 3) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v5 + 16) & v6));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 3) & v6, ((unint64_t)a2 + v5 + 3) & v6);
  }
  return v3;
}

uint64_t initializeWithTake for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for BorderlessButtonLabelShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 3 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 3 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t type metadata completion function for ConditionallyBorderedButton()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ConditionallyBorderedButton(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (((v6 & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 57 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
    v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_BYTE *)(v11 + 16);
    outlined copy of Environment<Bool>.Content(v12, v13);
    *(_QWORD *)(v10 + 8) = v12;
    *(_BYTE *)(v10 + 16) = v13;
    v14 = *(_QWORD *)(v11 + 24);
    v15 = *(_BYTE *)(v11 + 33);
    v16 = *(_BYTE *)(v11 + 32);
    outlined copy of Environment<CGFloat?>.Content(v14, v16, v15);
    *(_QWORD *)(v10 + 24) = v14;
    *(_BYTE *)(v10 + 32) = v16;
    *(_BYTE *)(v10 + 33) = v15;
    v17 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v11 + 41) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v20;
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    LOBYTE(v10) = *(_BYTE *)(v18 + 41);
    LOBYTE(v11) = *(_BYTE *)(v18 + 40);
    outlined copy of Environment<KeyboardShortcut?>.Content(v21, v22, v23, v11, v10);
    *(_QWORD *)(v17 + 16) = v21;
    *(_QWORD *)(v17 + 24) = v22;
    *(_QWORD *)(v17 + 32) = v23;
    *(_BYTE *)(v17 + 40) = v11;
    *(_BYTE *)(v17 + 41) = v10;
    v24 = *(_QWORD *)(v18 + 48);
    LOBYTE(v22) = *(_BYTE *)(v18 + 56);
    outlined copy of Environment<Bool>.Content(v24, v22);
    *(_QWORD *)(v17 + 48) = v24;
    *(_BYTE *)(v17 + 56) = v22;
  }
  return v4;
}

uint64_t destroy for ConditionallyBorderedButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (*(_QWORD *)(v3 + 64) + a1) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(v4 + 24), *(unsigned __int8 *)(v4 + 32), *(_BYTE *)(v4 + 33));
  v5 = (v4 + 41) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v5, *(_BYTE *)(v5 + 8));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(unsigned __int8 *)(v5 + 40), *(_BYTE *)(v5 + 41));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(v5 + 48), *(_BYTE *)(v5 + 56));
}

uint64_t initializeWithCopy for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  *(_QWORD *)(v9 + 8) = v11;
  *(_BYTE *)(v9 + 16) = v5;
  v12 = *(_QWORD *)(v10 + 24);
  LOBYTE(v5) = *(_BYTE *)(v10 + 33);
  v13 = *(_BYTE *)(v10 + 32);
  outlined copy of Environment<CGFloat?>.Content(v12, v13, v5);
  *(_QWORD *)(v9 + 24) = v12;
  *(_BYTE *)(v9 + 32) = v13;
  *(_BYTE *)(v9 + 33) = v5;
  v14 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v5) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v5);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v5;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 32);
  LOBYTE(v9) = *(_BYTE *)(v15 + 41);
  LOBYTE(v10) = *(_BYTE *)(v15 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v17, v18, v19, v10, v9);
  *(_QWORD *)(v14 + 16) = v17;
  *(_QWORD *)(v14 + 24) = v18;
  *(_QWORD *)(v14 + 32) = v19;
  *(_BYTE *)(v14 + 40) = v10;
  *(_BYTE *)(v14 + 41) = v9;
  v20 = *(_QWORD *)(v15 + 48);
  LOBYTE(v18) = *(_BYTE *)(v15 + 56);
  outlined copy of Environment<Bool>.Content(v20, v18);
  *(_QWORD *)(v14 + 48) = v20;
  *(_BYTE *)(v14 + 56) = v18;
  return a1;
}

uint64_t assignWithCopy for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(v9 + 8) = v11;
  *(_BYTE *)(v9 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = *(_QWORD *)(v10 + 24);
  LOBYTE(v5) = *(_BYTE *)(v10 + 33);
  v15 = *(_BYTE *)(v10 + 32);
  outlined copy of Environment<CGFloat?>.Content(v14, v15, v5);
  v16 = *(_QWORD *)(v9 + 24);
  v17 = *(_BYTE *)(v9 + 33);
  *(_QWORD *)(v9 + 24) = v14;
  v18 = *(unsigned __int8 *)(v9 + 32);
  *(_BYTE *)(v9 + 32) = v15;
  *(_BYTE *)(v9 + 33) = v5;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  v19 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v5) = *(_BYTE *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v20, v5);
  v22 = *(_QWORD *)v19;
  v23 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v22, v23);
  v24 = *(_QWORD *)(v20 + 16);
  v25 = *(_QWORD *)(v20 + 24);
  v26 = *(_QWORD *)(v20 + 32);
  LOBYTE(v9) = *(_BYTE *)(v20 + 41);
  LOBYTE(v10) = *(_BYTE *)(v20 + 40);
  outlined copy of Environment<KeyboardShortcut?>.Content(v24, v25, v26, v10, v9);
  v27 = *(_QWORD *)(v19 + 16);
  v28 = *(_QWORD *)(v19 + 24);
  v29 = *(_QWORD *)(v19 + 32);
  v30 = *(_BYTE *)(v19 + 41);
  *(_QWORD *)(v19 + 16) = v24;
  *(_QWORD *)(v19 + 24) = v25;
  *(_QWORD *)(v19 + 32) = v26;
  v31 = *(unsigned __int8 *)(v19 + 40);
  *(_BYTE *)(v19 + 40) = v10;
  *(_BYTE *)(v19 + 41) = v9;
  outlined consume of Environment<KeyboardShortcut?>.Content(v27, v28, v29, v31, v30);
  v32 = *(_QWORD *)(v20 + 48);
  LOBYTE(v25) = *(_BYTE *)(v20 + 56);
  outlined copy of Environment<Bool>.Content(v32, v25);
  v33 = *(_QWORD *)(v19 + 48);
  v34 = *(_BYTE *)(v19 + 56);
  *(_QWORD *)(v19 + 48) = v32;
  *(_BYTE *)(v19 + 56) = v25;
  outlined consume of Environment<Bool>.Content(v33, v34);
  return a1;
}

uint64_t initializeWithTake for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 8);
  *(_BYTE *)(v7 + 16) = v9;
  v10 = *(_WORD *)(v8 + 32);
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  *(_WORD *)(v7 + 32) = v10;
  v11 = (_OWORD *)((v7 + 41) & 0xFFFFFFFFFFFFFFF8);
  v12 = (__int128 *)((v8 + 41) & 0xFFFFFFFFFFFFFFF8);
  v14 = v12[1];
  v13 = v12[2];
  v15 = *v12;
  *(_OWORD *)((char *)v11 + 41) = *(__int128 *)((char *)v12 + 41);
  v11[1] = v14;
  v11[2] = v13;
  *v11 = v15;
  return a1;
}

uint64_t assignWithTake for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  *(_BYTE *)v7 = *(_BYTE *)v8;
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v7) = *(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v9 + 16) = v7;
  outlined consume of Environment<Bool>.Content(v11, v12);
  v13 = *(_BYTE *)(v10 + 32);
  v14 = *(_BYTE *)(v10 + 33);
  v15 = *(_QWORD *)(v9 + 24);
  v16 = *(_BYTE *)(v9 + 33);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
  v17 = *(unsigned __int8 *)(v9 + 32);
  *(_BYTE *)(v9 + 32) = v13;
  *(_BYTE *)(v9 + 33) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  v18 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_BYTE *)(v19 + 8);
  v21 = *(_QWORD *)v18;
  v22 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = *(_QWORD *)(v19 + 32);
  v24 = *(_BYTE *)(v19 + 40);
  v25 = *(_BYTE *)(v19 + 41);
  v26 = *(_QWORD *)(v18 + 16);
  v27 = *(_QWORD *)(v18 + 24);
  v28 = *(_QWORD *)(v18 + 32);
  v29 = *(_BYTE *)(v18 + 41);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
  *(_QWORD *)(v18 + 32) = v23;
  v30 = *(unsigned __int8 *)(v18 + 40);
  *(_BYTE *)(v18 + 40) = v24;
  *(_BYTE *)(v18 + 41) = v25;
  outlined consume of Environment<KeyboardShortcut?>.Content(v26, v27, v28, v30, v29);
  v31 = *(_BYTE *)(v19 + 56);
  v32 = *(_QWORD *)(v18 + 48);
  v33 = *(_BYTE *)(v18 + 56);
  *(_QWORD *)(v18 + 48) = *(_QWORD *)(v19 + 48);
  *(_BYTE *)(v18 + 56) = v31;
  outlined consume of Environment<Bool>.Content(v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConditionallyBorderedButton(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(((v7 + a1) & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v14 > 1)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = (((v7 & 0xFFFFFFF8) + 41) & 0xFFFFFFF8) + 57;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18701B488 + 4 * byte_187C041DE[v12]))();
  }
}

void storeEnumTagSinglePayload for ConditionallyBorderedButton(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = (((*(_QWORD *)(v5 + 64) & 0xFFFFFFFFFFFFFFF8) + 41) & 0xFFFFFFFFFFFFFFF8) + 57;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_18701B630()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18701B6A8);
}

void sub_18701B638(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18701B640);
  JUMPOUT(0x18701B6A8);
}

void sub_18701B680()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18701B6A8);
}

void sub_18701B688()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18701B6A8);
}

uint64_t sub_18701B690(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x18701B69CLL);
    *(_BYTE *)(((v5 + v6) & 0xFFFFFFFFFFFFFFF8) + 16) = -(char)a2;
LABEL_6:
    JUMPOUT(0x18701B6A8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for ConditionallyBorderedButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionallyBorderedButton);
}

void *type metadata accessor for IsConditionallyBorderedPredicate()
{
  return &unk_1E1B00F68;
}

uint64_t assignWithCopy for OpacityButtonHighlightModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for OpacityButtonHighlightModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpacityButtonHighlightModifier(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[17])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OpacityButtonHighlightModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<Ti()
{
  unint64_t result;
  uint64_t ShouldRenderAs;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeSt;
  if (!lazy protocol witness table cache variable for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeSt)
  {
    ShouldRenderAs = type metadata accessor for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>();
    v2[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>> and conformance ConditionallyBorderedButton<A>, (uint64_t (*)(uint64_t))type metadata accessor for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, (uint64_t)&protocol conformance descriptor for ConditionallyBorderedButton<A>);
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, ShouldRenderAs, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeSt);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintSh;
  if (!lazy cache variable for type metadata for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintSh)
  {
    type metadata accessor for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>(255);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>);
    lazy protocol witness table accessor for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t ShouldRenderAs;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>);
    v3 = v2;
    ShouldRenderAs = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for ConditionallyBorderedButton(a1, v3, ShouldRenderAs, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E0CE7E28], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>);
  }
}

void type metadata accessor for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&type metadata for OpacityButtonHighlightModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldRenderAsTemplate, &type metadata for ShouldRenderAsTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldRenderAsTemplate, &type metadata for ShouldRenderAsTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldRenderAsTemplate, &type metadata for ShouldRenderAsTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldRenderAsTemplate, &type metadata for ShouldRenderAsTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldRenderAsTemplate, &type metadata for ShouldRenderAsTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShouldRenderAsTemplate, &type metadata for ShouldRenderAsTemplate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, MEMORY[0x1E0CE73D0]);
    v3[1] = &protocol witness table for _ContentShapeModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E0CE2098], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate;
  if (!lazy protocol witness table cache variable for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IsConditionallyBorderedPredicate, &unk_1E1B00F68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OpacityButtonHighlightModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in ConditionallyBorderedButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in BorderlessButtonLabelShapeStyle<A>()
{
  return MEMORY[0x1E0CE83D0];
}

uint64_t sub_18701BEC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>();
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = MEMORY[0x1E0CE2BC0];
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>>, MEMORY[0x1E0CE4B88]);
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = MEMORY[0x1E0CE5138];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OpacityButtonHighlightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier, (uint64_t)&type metadata for OpacityButtonHighlightModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OpacityButtonHighlightModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for _WidgetInputs()
{
  return &type metadata for _WidgetInputs;
}

double ContainerRelativeFrameModifier.MakeLayout.value.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*MEMORY[0x1E0CFED28] != HIDWORD(a1))
  {
    Value = (uint64_t *)AGGraphGetValue();
    v4 = *Value;
    v5 = Value[1];
    v6 = Value[2];
    v7 = Value[3];
    v11 = MEMORY[0x18D75BE3C](Value, v8, v9, v10);
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(0, v11, v12);
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    *(_QWORD *)&v17 = v6;
    *((_QWORD *)&v17 + 1) = v7;
    v13 = MEMORY[0x18D75BE3C]();
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(1, v13, v14);
  }
  AGGraphGetValue();
  _FrameLayout.init(width:height:alignment:)();
  *a2 = v16;
  a2[1] = v17;
  result = *(double *)&v18;
  a2[2] = v18;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance ContainerRelativeFrameModifier.MakeLayout@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

double protocol witness for Rule.value.getter in conformance ContainerRelativeFrameModifier.MakeLayout@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;

  return ContainerRelativeFrameModifier.MakeLayout.value.getter(*v1, a1);
}

void protocol witness for ViewModifier.body(content:) in conformance ContainerRelativeFrameModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View.containerRelativeFrame(_:count:span:spacing:alignment:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v16;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  double (*v21)(double);
  uint64_t v22;

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(double *)(v16 + 32) = a8;
  v18[0] = a1;
  v19 = a4;
  v20 = a5;
  v21 = partial apply for closure #1 in View.containerRelativeFrame(_:count:span:spacing:alignment:);
  v22 = v16;
  MEMORY[0x18D75B4AC](v18, a6, &type metadata for ContainerRelativeFrameModifier, a7);
  return swift_release();
}

uint64_t sub_18701C2D4()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in View.containerRelativeFrame(_:count:span:spacing:alignment:)(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;

  v2 = *(double *)(v1 + 32);
  v3 = (double)*(uint64_t *)(v1 + 16);
  v4 = a1 - (v3 + -1.0) * v2;
  if (v4 <= 0.0)
    v4 = 0.0;
  return v2 * ((double)*(uint64_t *)(v1 + 24) + -1.0) + v4 / v3 * (double)*(uint64_t *)(v1 + 24);
}

uint64_t View.containerRelativeFrame(_:alignment:_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8[0] = a1;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  return MEMORY[0x18D75B4AC](v8, a6, &type metadata for ContainerRelativeFrameModifier, a7);
}

uint64_t sub_18701C364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ContainerRelativeFrameModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t assignWithTake for ContainerRelativeFrameModifier(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = v7;
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v6;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerRelativeFrameModifier()
{
  return &protocol witness table for ContainerRelativeFrameModifier;
}

void type metadata accessor for _GraphValue<ContainerRelativeFrameModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<ContainerRelativeFrameModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ContainerRelativeFrameModifier>);
  }
}

uint64_t partial apply for closure #1 in ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t (*v7)(__n128);

  a3.n128_u64[0] = *(_QWORD *)(v3 + 16);
  result = *(unsigned __int8 *)(v3 + 32);
  v7 = *(uint64_t (**)(__n128))(a1 + 24);
  if (v7)
  {
    if (*(_BYTE *)(v3 + 32))
      a3.n128_u64[0] = *(_QWORD *)(v3 + 24);
    result = v7(a3);
  }
  else if (*(_BYTE *)(v3 + 32))
  {
    a3.n128_u64[0] = *(_QWORD *)(v3 + 24);
  }
  *a2 = a3.n128_u64[0];
  return result;
}

void *type metadata accessor for ContainerRelativeFrameModifier.MakeLayout()
{
  return &unk_1E1AFCA60;
}

uint64_t DynamicTableRowContent.onDelete(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier();
  return Scene.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for OnDeleteTableRowModifier);
}

unint64_t lazy protocol witness table accessor for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier;
  if (!lazy protocol witness table cache variable for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnDeleteTableRowModifier, &type metadata for OnDeleteTableRowModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnDeleteTableRowModifier and conformance OnDeleteTableRowModifier);
  }
  return result;
}

uint64_t OnDeleteTableRowModifier.body.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v1;
  v4 = v1[1];
  if (*v1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t sub_18701C648()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance OnDeleteTableRowModifier@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v1;
  v4 = v1[1];
  if (*v1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())v5;
  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t TableRowContent.deleteDisabled(_:)(char a1, uint64_t a2)
{
  char v4;

  v4 = a1;
  lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier();
  return Scene.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for DeleteDisabledTableRowModifier);
}

unint64_t lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier;
  if (!lazy protocol witness table cache variable for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DeleteDisabledTableRowModifier, &type metadata for DeleteDisabledTableRowModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier);
  }
  return result;
}

void DeleteDisabledTableRowModifier.body.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in OnDeleteTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in DeleteDisabledTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for OnDeleteTableRowModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  if (*a2)
  {
    v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for OnDeleteTableRowModifier(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for OnDeleteTableRowModifier(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OnDeleteTableRowModifier(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OnDeleteTableRowModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnDeleteTableRowModifier()
{
  return &type metadata for OnDeleteTableRowModifier;
}

uint64_t storeEnumTagSinglePayload for DeleteDisabledTableRowModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18701C9C4 + 4 * byte_187C04815[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18701C9F8 + 4 * byte_187C04810[v4]))();
}

uint64_t sub_18701C9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18701CA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18701CA08);
  return result;
}

uint64_t sub_18701CA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18701CA1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18701CA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18701CA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeleteDisabledTableRowModifier()
{
  return &type metadata for DeleteDisabledTableRowModifier;
}

_UNKNOWN **sub_18701CA44()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t sub_18701CA50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type DeleteDisabledTableRowModifier and conformance DeleteDisabledTableRowModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

_UNKNOWN **sub_18701CAA4()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t View.navigationDestinations<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v20 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NavigationDestinationsModifier(0, v11, v12, v11);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v20 - v17;
  a1(v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a4);
  MEMORY[0x18D75B4AC](v18, a3, v13, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t type metadata accessor for NavigationDestinationsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationDestinationsModifier);
}

void View.navigationDestination<A, B>(for:destination:)()
{
  swift_retain();
  type metadata accessor for NavigationDestinationModifier();
}

uint64_t sub_18701CC24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x18D75B4AC](&v4, v2, a1, v1);
  return swift_release();
}

void type metadata accessor for NavigationDestinationModifier()
{
  JUMPOUT(0x18D75FF28);
}

void View.navigationDestination<A, B>(presenting:destination:)()
{
  View.navigationDestination<A, B>(for:destination:)();
}

uint64_t View.navigationDestination<A>(isPresented:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE v24[12];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a7;
  v26 = a8;
  v27 = a5;
  v25 = a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for ViewDestinationNavigationDestinationModifier(0, v16, a9, v15);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = &v24[-v20];
  swift_retain();
  v22 = swift_retain();
  a4(v22);
  ViewDestinationNavigationDestinationModifier.init(isPresented:destination:)(a1, a2, v25, (uint64_t)v14, a6, a9, (uint64_t)v21);
  MEMORY[0x18D75B4AC](v21, v27, v17, v28);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v21, v17);
}

void View.navigationDestination<A, B>(item:destination:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Optional();
  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for ItemBoundNavigationDestinationModifier();
}

void sub_18701CE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;

  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&a9 - v14;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v11, *(_QWORD *)(v12 - 168), v10, v13);
  ItemBoundNavigationDestinationModifier.init(item:destination:)(v11, (uint64_t)v15);
}

uint64_t sub_18701CEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_retain();
  MEMORY[0x18D75B4AC](v2, *(_QWORD *)(v3 - 136), v0, *(_QWORD *)(v3 - 128));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t static NavigationDestinationModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  char v3;
  unint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v15;
  char v17;

  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v17 == 1)
  {
    lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v3 = static SemanticFeature.isEnabled.getter();
    v4 = 0xD000000000000014;
    if ((v3 & 1) != 0)
      v4 = 0;
    v15 = v4;
    if ((v3 & 1) != 0)
      v5 = (void *)0xE000000000000000;
    else
      v5 = (void *)0x8000000187BD57E0;
    _StringGuts.grow(_:)(410);
    v6._object = (void *)0x8000000187BD5800;
    v6._countAndFlagsBits = 0x1000000000000180;
    String.append(_:)(v6);
    swift_getMetatypeMetadata();
    v7._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0xD000000000000015;
    v8._object = (void *)0x8000000187BD5990;
    String.append(_:)(v8);
    v9._countAndFlagsBits = v15;
    v9._object = v5;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
      type metadata accessor for NavigationDestinationModifier();
  }
  else
  {
    _StringGuts.grow(_:)(206);
    v11._countAndFlagsBits = 0xD0000000000000B6;
    v11._object = (void *)0x8000000187BD5700;
    String.append(_:)(v11);
    swift_getMetatypeMetadata();
    v12._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD000000000000016;
    v13._object = (void *)0x8000000187BD57C0;
    String.append(_:)(v13);
    MEMORY[0x18D75AC90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  return a3();
}

void closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for NavigationDestinationModifier();
}

uint64_t sub_18701D650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t FunctionTypeMetadata1;
  uint64_t v7;

  v5[2] = a1;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, FunctionTypeMetadata1, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void implicit closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for NavigationDestinationModifier.PreferenceTransform();
}

uint64_t sub_18701D70C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];
  unsigned int v7;

  v6[2] = a1;
  v6[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationDestinationModifier<A, B>.PreferenceTransform, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void NavigationDestinationModifier.MakeSeededResolver.updateValue()()
{
  swift_getFunctionTypeMetadata1();
  AGGraphGetValue();
  type metadata accessor for NavigationDestinationModifier.SeededResolver();
}

uint64_t sub_18701D854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _QWORD v18[16];

  result = AGGraphGetOutputValue();
  if (result)
  {
    if ((v6 & 1) != 0)
    {
      if (v3)
      {
        *(_QWORD *)(v3 + 16) = v9;
        *(_QWORD *)(v3 + 24) = v4;
        swift_retain_n();
        result = swift_release();
        v14 = *(_DWORD *)(v10 - 148) + 1;
        *(_DWORD *)(v5 + 16) = v14;
LABEL_12:
        *(_QWORD *)(v10 - 120) = v3;
        *(_DWORD *)(v10 - 112) = v14;
        v16 = MEMORY[0x1E0C80A78](result, v13);
        v18[2] = v1;
        v18[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationDestinationModifier<A, B>.MakeSeededResolver, v1, v16);
        swift_retain();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v10 - 120, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v18, a1, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v17);
        swift_release();
        return swift_release();
      }
      __break(1u);
      goto LABEL_14;
    }
    swift_retain();
  }
  else
  {
    type metadata accessor for NavigationDestinationResolver(0, v7, v8, v2);
    v15 = NavigationDestinationResolver.__allocating_init(transform:)(v9, v4);
    swift_retain_n();
    swift_release();
    *(_QWORD *)(v5 + 8) = v15;
    v3 = v15;
  }
  result = AGGraphGetOutputValue();
  if (result && (v6 & 1) == 0)
    return swift_release();
  if (v3)
  {
    v14 = *(_DWORD *)(v10 - 148);
    goto LABEL_12;
  }
LABEL_14:
  __break(1u);
  return result;
}

void NavigationDestinationModifier.PreferenceTransform.seededResolver.getter()
{
  type metadata accessor for NavigationDestinationModifier.SeededResolver();
}

uint64_t sub_18701DA04()
{
  uint64_t result;

  result = AGGraphGetWeakValue();
  if (result)
    return swift_retain();
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance NavigationDestinationModifier<A, B>.MakeSeededResolver(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

void NavigationDestinationModifier.PreferenceTransform.value.getter()
{
  NavigationDestinationModifier.PreferenceTransform.seededResolver.getter();
}

void (*sub_18701DA7C(uint64_t a1, int a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v4;
  *(_QWORD *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v2;
  *(_QWORD *)(v8 + 48) = a1;
  *(_DWORD *)(v8 + 56) = a2;
  return partial apply for closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter;
}

void closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter()
{
  type metadata accessor for NavigationDestinationModifier.SeededResolver();
}

uint64_t sub_18701DB04()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Optional();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter, (uint64_t)&v2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, v0, (uint64_t)&v3);
}

uint64_t closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = swift_retain();
  MEMORY[0x18D75CF58](v3);
  if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

void protocol witness for Rule.value.getter in conformance NavigationDestinationModifier<A, B>.PreferenceTransform()
{
  NavigationDestinationModifier.PreferenceTransform.value.getter();
}

uint64_t sub_18701DC00(uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)();
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *v2 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationDestinationModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return static NavigationDestinationModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationDestinationModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationDestinationModifier<A, B>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t sub_18701DCC0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for NavigationDestinationsModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for NavigationDestinationsModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

void sub_18701DD20()
{
  type metadata accessor for NavigationDestinationModifier();
}

uint64_t sub_18701DD50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[10];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for NavigationDestinationModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

uint64_t sub_18701DD90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for ViewDestinationNavigationDestinationModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewDestinationNavigationDestinationModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

void sub_18701DE08()
{
  type metadata accessor for ItemBoundNavigationDestinationModifier();
}

uint64_t sub_18701DE3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[12];

  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ItemBoundNavigationDestinationModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t sub_18701DE90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for NavigationDestinationScopeModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t getEnumTagSinglePayload for NavigationDestinationsModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18701DF94 + 4 * byte_187C048A0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationDestinationsModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationDestinationsModifier<A>()
{
  return &protocol witness table for NavigationDestinationsModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationDestinationModifier<A, B>()
{
  return &protocol witness table for NavigationDestinationModifier<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationDestinationScopeModifier()
{
  return &protocol witness table for NavigationDestinationScopeModifier;
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationDestinationScopeModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance NavigationDestinationScopeModifier()
{
  return PreferenceKeys.remove<A>(_:)();
}

uint64_t static NavigationDestinationsModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *, _QWORD);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  int v73;

  v7 = *((_DWORD *)a1 + 2);
  v8 = a1[2];
  v9 = a1[5];
  v10 = a1[6];
  v11 = *((_DWORD *)a1 + 20);
  v65 = *a1;
  v66 = v7;
  v68 = *(_OWORD *)(a1 + 3);
  v67 = v8;
  v69 = v9;
  v70 = v10;
  v71 = *(_OWORD *)(a1 + 7);
  v72 = a1[9];
  v73 = v11;
  type metadata accessor for _AnyPreferenceKey<NavigationDestinationKey>();
  lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationDestinationKey> and conformance _AnyPreferenceKey<A>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  PreferencesOutputs.init()();
  v63 = v54;
  v64 = v55;
  v12 = a3;
  v44 = a4;
  type metadata accessor for NavigationDestinationsModifier(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v14 = v65;
  v15 = v8;
  v41 = v68;
  v42 = v66;
  v39 = DWORD2(v68);
  v40 = DWORD1(v68);
  v16 = v69;
  v17 = v70;
  v18 = v71;
  v19 = DWORD1(v71);
  LODWORD(a4) = DWORD2(v71);
  LODWORD(a3) = HIDWORD(v71);
  v37 = v72;
  v38 = HIDWORD(v68);
  v36 = HIDWORD(v72);
  v43 = v73;
  v54 = v65;
  v55 = v66;
  v56 = v67;
  v57 = v68;
  v58 = v69;
  v59 = v70;
  v60 = v71;
  v61 = v72;
  v62 = v73;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t))(v44 + 32))(&v48, &v54, &v63, v12);
  v54 = v14;
  v55 = v42;
  v56 = v15;
  *(_QWORD *)&v57 = __PAIR64__(v40, v41);
  *((_QWORD *)&v57 + 1) = __PAIR64__(v38, v39);
  v58 = v16;
  v59 = v17;
  *(_QWORD *)&v60 = __PAIR64__(v19, v18);
  *((_QWORD *)&v60 + 1) = __PAIR64__(a3, a4);
  v61 = __PAIR64__(v36, v37);
  v62 = v43;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  a2(&v51, v20, &v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_187BF9820;
  v22 = v52;
  *(_QWORD *)(v21 + 32) = v51;
  *(_DWORD *)(v21 + 40) = v22;
  v23 = v64;
  *(_QWORD *)(v21 + 48) = v63;
  *(_DWORD *)(v21 + 56) = v23;
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  v48 = v21;
  v49 = v54;
  v50 = v55;
  v46 = v17;
  v47 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v24 = MEMORY[0x1E0CE6550];
    v25 = MEMORY[0x1E0CE6548];
    while (1)
    {
      v26 = (void (*)(uint64_t *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v28 = *v27;
      v29 = v27[1];
      v26(&v54, 0);
      v30 = v47;
      v54 = v46;
      swift_bridgeObjectRetain();
      result = PreferenceKeys.endIndex.getter();
      if (v47 < 0 || v47 >= result)
        break;
      ++v47;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 16))(&v48, v24, v25, v28, v29);
      if (v30 + 1 == PreferenceKeys.endIndex.getter())
        goto LABEL_6;
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    v32 = v49;
    v33 = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v34 = v53;
    *(_QWORD *)a5 = v32;
    *(_DWORD *)(a5 + 8) = v33;
    *(_DWORD *)(a5 + 12) = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for NavigationDestinationsModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationDestinationsModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationDestinationsModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationDestinationsModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

void type metadata accessor for _AnyPreferenceKey<NavigationDestinationKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<NavigationDestinationKey>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<NavigationDestinationKey>);
  }
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationDestinationKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationDestinationKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationDestinationKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for _AnyPreferenceKey<NavigationDestinationKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationDestinationKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static NavigationDestinationsModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

void type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>);
  }
}

unint64_t lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys;
  if (!lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2890], MEMORY[0x1E0CE2888]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceKeys and conformance PreferenceKeys);
  }
  return result;
}

void type metadata accessor for NavigationDestinationModifier.SeededResolver()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for NavigationDestinationModifier.MakeSeededResolver()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for implicit closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)()
{
  implicit closure #1 in static NavigationDestinationModifier._makeView(modifier:inputs:body:)();
}

void type metadata accessor for NavigationDestinationModifier.PreferenceTransform()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier;
  if (!lazy protocol witness table cache variable for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationDestinationScopeModifier, &unk_1E1B047A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationDestinationScopeModifier and conformance NavigationDestinationScopeModifier);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationDestinationModifier.SeededResolver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationDestinationModifier.SeededResolver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for NavigationDestinationModifier.SeededResolver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationDestinationModifier.SeededResolver(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 12))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationDestinationModifier.SeededResolver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 12) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in NavigationDestinationModifier<A, B>.PreferenceTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in NavigationDestinationModifier<A, B>.MakeSeededResolver()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18701EB18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_18701EB3C()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter()
{
  closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter();
}

uint64_t partial apply for closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(a1, *(_QWORD **)(v1 + 48));
}

uint64_t View.writingToolsBehavior(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.writingToolsBehavior.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.writingToolsBehavior : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_18701EE14()
{
  return EnvironmentValues.writingToolsBehavior.setter();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>);
  }
}

uint64_t EnvironmentValues.writingToolsBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static WritingToolsBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static WritingToolsBehavior.complete.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static WritingToolsBehavior.limited.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static WritingToolsBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void WritingToolsBehavior.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static WritingToolsBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int WritingToolsBehavior.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.__Key_writingToolsBehavior(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.__Key_writingToolsBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t key path getter for EnvironmentValues.writingToolsBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t (*EnvironmentValues.writingToolsBehavior.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;

  *a1 = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.writingToolsBehavior.modify;
}

uint64_t EnvironmentValues.writingToolsBehavior.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type WritingToolsBehavior and conformance WritingToolsBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WritingToolsBehavior and conformance WritingToolsBehavior;
  if (!lazy protocol witness table cache variable for type WritingToolsBehavior and conformance WritingToolsBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WritingToolsBehavior, &type metadata for WritingToolsBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritingToolsBehavior and conformance WritingToolsBehavior);
  }
  return result;
}

uint64_t sub_18701F384()
{
  return EnvironmentValues.writingToolsBehavior.setter();
}

ValueMetadata *type metadata accessor for WritingToolsBehavior()
{
  return &type metadata for WritingToolsBehavior;
}

uint64_t sub_18701F3CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<WritingToolsBehavior?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>)
  {
    type metadata accessor for WritingToolsBehavior?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<WritingToolsBehavior?>);
  }
}

void type metadata accessor for WritingToolsBehavior?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WritingToolsBehavior?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritingToolsBehavior?);
  }
}

uint64_t storeEnumTagSinglePayload for WritingToolsBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_18701F540 + 4 * byte_187C04C05[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18701F574 + 4 * byte_187C04C00[v4]))();
}

uint64_t sub_18701F574(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18701F57C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18701F584);
  return result;
}

uint64_t sub_18701F590(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18701F598);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_18701F59C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18701F5A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WritingToolsBehavior.Value()
{
  return &type metadata for WritingToolsBehavior.Value;
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_writingToolsBehavior()
{
  return &type metadata for EnvironmentValues.__Key_writingToolsBehavior;
}

unint64_t lazy protocol witness table accessor for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value;
  if (!lazy protocol witness table cache variable for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WritingToolsBehavior.Value, &type metadata for WritingToolsBehavior.Value);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WritingToolsBehavior.Value and conformance WritingToolsBehavior.Value);
  }
  return result;
}

uint64_t type metadata completion function for MulticolumnSplitViewRepresentable.Coordinator()
{
  return swift_initClassMetadata2();
}

void static MulticolumnSplitView._makeView(view:inputs:)()
{
  type metadata accessor for MulticolumnSplitView();
}

void sub_18701F710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v21[11] = v19;
  v21[13] = v17;
  *(_DWORD *)(v26 - 184) = v20;
  *(_DWORD *)(v26 - 168) = v22;
  *(_DWORD *)(v26 - 164) = v23;
  v21[16] = v25;
  v21[17] = v18;
  *(_DWORD *)(v26 - 160) = v24;
  *(_DWORD *)(v26 - 156) = a17;
  *(_DWORD *)(v26 - 136) = a16;
  *(_DWORD *)(v26 - 132) = a15;
  *(_DWORD *)(v26 - 128) = a14;
  *(_DWORD *)(v26 - 124) = a13;
  *(_DWORD *)(v26 - 120) = a12;
  *(_DWORD *)(v26 - 116) = a11;
  *(_DWORD *)(v26 - 112) = a10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.environment.getter();
  type metadata accessor for MulticolumnSplitView.EnvironmentTransform();
}

void sub_18701F7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,char a25,__int16 a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v31;
  uint64_t v32;

  a29 = a1;
  a30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitView<A, B, C>.EnvironmentTransform, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E0CE3E78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&a25, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&a27, a1, MEMORY[0x1E0DEDCE8], v31, MEMORY[0x1E0DEDD18], v32);
  _ViewInputs.environment.setter();
  type metadata accessor for MulticolumnSplitView.Container();
}

void sub_18701F874()
{
  type metadata accessor for MulticolumnSplitView.Child();
}

uint64_t sub_18701F898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitView<A, B, C>.Child, a1);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v2 + 72) = *(_QWORD *)(v2 + 160);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitView<A, B, C>.Container, v1);
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void MulticolumnSplitView.Child.multicolumnSplitView.getter()
{
  type metadata accessor for MulticolumnSplitView();
}

uint64_t sub_18701F9BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void MulticolumnSplitView.Child.value.getter()
{
  type metadata accessor for MulticolumnSplitView.Configuration();
}

void sub_18701FA54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 128) = v7;
  *(_QWORD *)(v8 - 120) = v6;
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 104) = v4;
  *(_QWORD *)(v8 - 96) = v3;
  *(_QWORD *)(v8 - 88) = v2;
  type metadata accessor for MulticolumnSplitView();
}

void sub_18701FA98(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  MulticolumnSplitView.Child.multicolumnSplitView.getter();
}

void sub_18701FAE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v7, v0, v9);
  *(_QWORD *)(v10 - 128) = v6;
  *(_QWORD *)(v10 - 120) = v5;
  *(_QWORD *)(v10 - 112) = v4;
  *(_QWORD *)(v10 - 104) = v3;
  *(_QWORD *)(v10 - 96) = v2;
  *(_QWORD *)(v10 - 88) = v1;
  type metadata accessor for MulticolumnSplitView.Configuration();
}

uint64_t sub_18701FB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(*(_QWORD *)(v2 - 136), v1, a1);
}

void protocol witness for static Rule.initialValue.getter in conformance MulticolumnSplitView<A, B, C>.Child()
{
  type metadata accessor for MulticolumnSplitView.Container();
}

uint64_t sub_18701FB78(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance MulticolumnSplitView<A, B, C>.Child()
{
  MulticolumnSplitView.Child.value.getter();
}

uint64_t MulticolumnSplitView.EnvironmentTransform.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *Value;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Value = (uint64_t *)AGGraphGetValue();
  v5 = *Value;
  v6 = Value[1];
  swift_retain();
  swift_retain();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  swift_release();
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    result = swift_release();
    v4 = v6;
  }
  else
  {
    result = swift_release();
    v4 = 0;
  }
  *a1 = v5;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MulticolumnSplitView<A, B, C>.EnvironmentTransform@<X0>(_QWORD *a1@<X8>)
{
  return MulticolumnSplitView.EnvironmentTransform.value.getter(a1);
}

void MulticolumnSplitView.Container.body.getter()
{
  type metadata accessor for MulticolumnSplitView.Configuration();
}

void sub_18701FD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 - 184) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 128) = v2;
  *(_QWORD *)(v8 - 120) = v3;
  *(_QWORD *)(v8 - 112) = v4;
  *(_QWORD *)(v8 - 104) = v5;
  *(_QWORD *)(v8 - 96) = v6;
  *(_QWORD *)(v8 - 88) = v7;
  type metadata accessor for MulticolumnSplitViewRepresentable();
}

void sub_18701FDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  *(_QWORD *)(v4 - 176) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v5 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 168) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  (*(void (**)(uint64_t, _QWORD, _QWORD, double))(v3 + 16))(v2, *(_QWORD *)(v4 - 160), *(_QWORD *)(v4 - 184), v9);
  MulticolumnSplitViewRepresentable.init(configuration:)();
}

uint64_t sub_18701FEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  static Edge.Set.all.getter();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 8))(v1, v0);
  v6 = MEMORY[0x1E0CE65D8];
  *(_QWORD *)(v5 - 144) = &protocol witness table for MulticolumnSplitViewRepresentable<A, B, C>;
  *(_QWORD *)(v5 - 136) = v6;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5 - 144);
  static ViewBuilder.buildExpression<A>(_:)(v3, v2, v7);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 168) + 8);
  v8(v3, v2);
  static ViewBuilder.buildBlock<A>(_:)(v4, v2, *(_QWORD *)(v5 - 152));
  return v8(v4, v2);
}

void MulticolumnSplitViewRepresentable.init(configuration:)()
{
  type metadata accessor for MulticolumnSplitViewRepresentable();
}

void sub_18701FFC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v4 + *(int *)(a1 + 68), 1, 1, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v4, v2, v3);
  type metadata accessor for MulticolumnSplitView.Configuration();
}

uint64_t sub_18702001C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v3 + *(int *)(v4 + 72), v1 + *(int *)(a1 + 72), v2);
  v7 = v1 + *(int *)(a1 + 68);
  v8 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v5, v7, v8);
}

void protocol witness for static View._makeView(view:inputs:) in conformance MulticolumnSplitView<A, B, C>()
{
  static MulticolumnSplitView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MulticolumnSplitView<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitView<A, B, C>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MulticolumnSplitView<A, B, C>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitView<A, B, C>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance MulticolumnSplitView<A, B, C>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MulticolumnSplitView<A, B, C>, a1);
  specialized PrimitiveView.body.getter();
}

BOOL MulticolumnSplitViewRepresentable.hasSupplementary.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  _BOOL8 v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v12 - v8, v1 + *(int *)(a1 + 68), v4, v7);
  v10 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v9, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  return v10;
}

uint64_t MulticolumnSplitViewRepresentable.supplementary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a1 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v17, v3, a1, v15);
  v18 = MulticolumnSplitViewRepresentable.hasSupplementary.getter(a1);
  result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, a1);
  if (v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + *(int *)(a1 + 68), v7);
    v20 = *(_QWORD *)(v6 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v6);
    if ((_DWORD)result != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(a2, v11, v6);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void MulticolumnSplitViewRepresentable.makeUIViewController(context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;

  v3 = v2;
  v11 = *(_QWORD *)(a2 + 24);
  v10[2] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10[1] = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  if (MulticolumnSplitViewRepresentable.hasSupplementary.getter(v8))
    v9 = 2;
  else
    v9 = 1;
  objc_msgSend(objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NotifyingMulticolumnSplitViewController()), sel_initWithStyle_, v9), sel_setDelegate_, v7);
  MulticolumnSplitViewRepresentable.Coordinator.addSecondaryView(_:)(v3 + *(int *)(a2 + 72));
}

void sub_187020424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for StyleContextSplitViewNavigationController<SidebarStyleContext>, MEMORY[0x1E0CE49E8], MEMORY[0x1E0CE49D8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for StyleContextSplitViewNavigationController);
  *(_QWORD *)(v6 - 96) = v5;
  *(_QWORD *)(v6 - 88) = v4;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 40);
  v9 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(v0, 0, v6 - 96, v2, v7, v8);
}

id sub_187020498(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v25;
  id v26;
  uint64_t v27;

  if (objc_msgSend(v22, sel_style))
    objc_msgSend(v22, sel_setViewController_forColumn_, a1, 0);

  objc_msgSend(v22, sel_setPrimaryBackgroundStyle_, 1);
  v25 = objc_retain(*(id *)(v20
                          + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController));
  v26 = v22;
  if (objc_msgSend(v26, sel_style))
    objc_msgSend(v26, sel_setViewController_forColumn_, v25, 2);

  if (MulticolumnSplitViewRepresentable.hasSupplementary.getter(v21))
  {
    v27 = *(_QWORD *)(v23 - 120);
    MulticolumnSplitViewRepresentable.supplementary.getter(v21, v27);
    MulticolumnSplitViewRepresentable.Coordinator.addSupplementaryView(_:)(v27);
  }
  return v26;
}

void MulticolumnSplitViewRepresentable.updateUIViewController(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  void (*v18)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __int128 v27;

  v4 = v3;
  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v12[1];
  v14 = v12[2];
  v15 = v12[3];
  if (!objc_msgSend(v16, sel_style, v9))
  {
    __break(1u);
    goto LABEL_9;
  }
  v26 = objc_msgSend(a1, sel_viewControllerForColumn_, 0);
  if (!v26)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v23 = v11;
  v24 = v8;
  v25 = v7;
  objc_opt_self();
  if (!swift_dynamicCastObjCClass()
    || (type metadata accessor for SplitViewNavigationController(), (v17 = (_QWORD *)swift_dynamicCastClass()) == 0))
  {
LABEL_9:

    goto LABEL_10;
  }
  *(_QWORD *)&v27 = v14;
  *((_QWORD *)&v27 + 1) = v15;
  v18 = *(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x190);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(a3 + 40);
  swift_retain();
  swift_retain();
  v18(v4, &v27, v13, v19, v20);
  swift_release();
  swift_release();
  v21 = v4 + *(int *)(a3 + 72);
  *(_QWORD *)&v27 = v14;
  *((_QWORD *)&v27 + 1) = v15;
  swift_retain();
  swift_retain();
  specialized MulticolumnSplitViewRepresentable.Coordinator.updateSecondaryPlaceholder(_:for:environment:transaction:)(v21, &v27, v13);
  swift_release();
  swift_release();
  if (MulticolumnSplitViewRepresentable.hasSupplementary.getter(a3))
  {
    v22 = (uint64_t)v23;
    MulticolumnSplitViewRepresentable.supplementary.getter(a3, (uint64_t)v23);
    *(_QWORD *)&v27 = v14;
    *((_QWORD *)&v27 + 1) = v15;
    swift_retain();
    swift_retain();
    specialized MulticolumnSplitViewRepresentable.Coordinator.updateSupplementaryPlaceholder(_:for:environment:transaction:)(v22, &v27, v13);
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v25);
  }
  else
  {

  }
}

void MulticolumnSplitViewRepresentable.Coordinator.secondaryController.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController) = a1;

}

void MulticolumnSplitViewRepresentable.Coordinator.supplementaryController.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) = a1;

}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost);
}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost) = result;
  return result;
}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost);
}

uint64_t MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost) = result;
  return result;
}

void MulticolumnSplitViewRepresentable.Coordinator.addSecondaryView(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  __int128 v5;

  v2 = v1;
  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for StyleContextSplitViewNavigationController<NoStyleContext>, MEMORY[0x1E0CE2820], MEMORY[0x1E0CE2818], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for StyleContextSplitViewNavigationController);
  v5 = xmmword_187BFE310;
  specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(a1, 0, (uint64_t)&v5, 1, *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 120));
}

void sub_187020908(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController) = a1;

  v3 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_topViewController);
    if (v4)
    {
      v5 = v4;

      *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost) = v5;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void MulticolumnSplitViewRepresentable.Coordinator.addSupplementaryView(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  __int128 v5;

  v2 = v1;
  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for StyleContextSplitViewNavigationController<ContentListStyleContext>, MEMORY[0x1E0CE59D0], MEMORY[0x1E0CE59C0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for StyleContextSplitViewNavigationController);
  v5 = xmmword_187BFE310;
  specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(a1, 0, (uint64_t)&v5, 1, *(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 112));
}

void sub_1870209F8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) = a1;

  v3 = *(void **)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_topViewController);
    if (v4)
    {
      v5 = v4;

      *(_QWORD *)(v1 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost) = v5;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

UISplitViewControllerColumn __swiftcall MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:topColumnForCollapsingToProposedTopColumn:)(UISplitViewController *_, UISplitViewControllerColumn topColumnForCollapsingToProposedTopColumn)
{
  uint64_t v2;
  UIViewController *v5;
  UIViewController *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  if (-[UISplitViewController style](_, sel_style))
  {
    v5 = -[UISplitViewController viewControllerForColumn:](_, sel_viewControllerForColumn_, topColumnForCollapsingToProposedTopColumn);
    if (v5)
    {
      v6 = v5;
      objc_opt_self();
      v7 = (void *)swift_dynamicCastObjCClass();
      if (v7 && (v8 = objc_msgSend(v7, sel_topViewController)) != 0)
      {
        v9 = v8;

        v10 = *(id *)(v2 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost);
        if (v10 && v9 == v10)
          return (unint64_t)(*(_QWORD *)(v2
                                              + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) != 0);
      }
      else
      {

      }
    }
  }
  return topColumnForCollapsingToProposedTopColumn;
}

UISplitViewControllerColumn @objc MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:topColumnForCollapsingToProposedTopColumn:)(void *a1, uint64_t a2, void *a3, UISplitViewControllerColumn a4)
{
  UISplitViewController *v6;
  id v7;
  UISplitViewControllerColumn v8;

  v6 = a3;
  v7 = a1;
  v8 = MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:topColumnForCollapsingToProposedTopColumn:)(v6, a4);

  return v8;
}

uint64_t @objc MulticolumnSplitViewRepresentable.Coordinator.splitViewController(_:displayModeForExpandingToProposedDisplayMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

void MulticolumnSplitViewRepresentable.Coordinator.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController) = 0;
  *(_QWORD *)(v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController) = 0;
  *(_QWORD *)(v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost) = 0;
  *(_QWORD *)(v0 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost) = 0;
  type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator();
}

id sub_187020BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_init);
}

void @objc MulticolumnSplitViewRepresentable.Coordinator.init()()
{
  MulticolumnSplitViewRepresentable.Coordinator.init()();
}

void MulticolumnSplitViewRepresentable.Coordinator.__ivar_destroyer()
{
  uint64_t v0;

}

void MulticolumnSplitViewRepresentable.Coordinator.__deallocating_deinit()
{
  type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator();
}

id sub_187020CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_dealloc);
}

void @objc MulticolumnSplitViewRepresentable.Coordinator.__ivar_destroyer(uint64_t a1)
{

}

void type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator()
{
  JUMPOUT(0x18D75FF28);
}

void protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance MulticolumnSplitViewRepresentable<A, B, C>()
{
  specialized MulticolumnSplitViewRepresentable.makeCoordinator()();
}

uint64_t sub_187020D34(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t one-time initialization function for willShowDetailNotification()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BD5B90);
  static ColumnNavigationViewStyle.willShowDetailNotification = result;
  return result;
}

{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD00000000000002FLL, 0x8000000187BD5B90);
  static DoubleColumnNavigationViewStyle.willShowDetailNotification = result;
  return result;
}

id @objc UISplitViewController.makeDetailNavigationController(root:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, a3);
}

uint64_t NotifyingMulticolumnSplitViewController.showDetailViewController(_:sender:)(void *a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  id v6;
  uint64_t v7;
  uint64_t inited;
  id v9;
  Class isa;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  objc_super v20;
  _QWORD v21[3];
  uint64_t v22;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for willShowDetailNotification != -1)
    swift_once();
  v7 = static ColumnNavigationViewStyle.willShowDetailNotification;
  type metadata accessor for _ContiguousArrayStorage<(AnyHashable, Any)>();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  v21[0] = 0xD000000000000017;
  v21[1] = 0x8000000187BD5B70;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = type metadata accessor for UIViewController();
  *(_QWORD *)(inited + 72) = a1;
  v9 = a1;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_postNotificationName_object_userInfo_, v7, v2, isa);

  outlined init with copy of Any?(a2, (uint64_t)v21);
  v11 = v22;
  if (v22)
  {
    v12 = __swift_project_boxed_opaque_existential_1(v21, v22);
    v13 = *(_QWORD *)(v11 - 8);
    v14 = MEMORY[0x1E0C80A78](v12, v12);
    v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v13 + 16))(v16, v14);
    v17 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    v17 = 0;
  }
  v20.receiver = v2;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, sel_showDetailViewController_sender_, v9, v17);
  return swift_unknownObjectRelease();
}

void NotifyingMulticolumnSplitViewController.childForStatusBarHidden.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  if (!objc_msgSend(v0, sel_isCollapsed))
  {
    v5 = objc_msgSend(v0, sel_viewControllerForColumn_, 2);
    v6 = objc_msgSend(v5, sel_childViewControllerForStatusBarHidden);
    goto LABEL_11;
  }
  v1 = objc_msgSend(v0, sel_viewControllers);
  type metadata accessor for UIViewController();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(void **)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_4:
      if ((v2 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x18D75E3BC](0, v2);
      }
      else
      {
        if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(v2 + 32);
      }
      v3 = v4;
    }
  }
  swift_bridgeObjectRelease();
  if (!objc_msgSend(v3, sel_childViewControllerForStatusBarHidden))
    return;
  v5 = v3;
LABEL_11:

}

uint64_t SplitViewNavigationController.applyStyleContextModifier<A>(to:)(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return AnyView.init<A>(_:)();
}

void SplitViewNavigationController.replaceRoot<A>(_:environment:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  UINavigationController.updateRootHost<A>(root:environment:transaction:)(a1, (uint64_t)&v5, a3, a4, a5);
}

id SplitViewNavigationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SplitViewNavigationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SplitViewNavigationController()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for StyleContextSplitViewNavigationController()
{
  return swift_initClassMetadata2();
}

void closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  __int128 v13;
  _QWORD v14[2];

  v3 = *MEMORY[0x1E0DEEDD8] & *a1;
  v4 = (void *)specialized UIHostingController.host.getter();
  v5 = *(_QWORD *)(v3 + 80);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = v4;
  v14[0] = a2;
  v14[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v6);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v14);
  v10 = type metadata accessor for _UIHostingView(0, v5, v8, v9);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v10);
  ViewRendererHost.updateViewGraph<A>(body:)();

  if (v13 == 1)
  {
    v11 = (id)specialized UIHostingController.host.getter();
    _UIHostingView.preferencesDidChange()();
  }
  v13 = xmmword_187BFE310;
  v12 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.inheritedEnvironment.setter(&v13);

}

BOOL closure #1 in closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = GraphHost.updatePreferences()();
  *a1 = result;
  return result;
}

uint64_t StyleContextSplitViewNavigationController.applyStyleContextModifier<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = type metadata accessor for StyleContextWriter();
  v5 = type metadata accessor for ModifiedContent();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x18D75B4AC](v7);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v4);
  v10[0] = a3;
  v10[1] = v8;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v10);
  return AnyView.init<A>(_:)();
}

uint64_t StyleContextSplitViewNavigationController.replaceRoot<A>(_:environment:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  _BYTE v18[16];

  v7 = type metadata accessor for StyleContextWriter();
  v8 = type metadata accessor for ModifiedContent();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)v17 - v12;
  MEMORY[0x18D75B4AC](v11);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v7);
  v17[0] = a5;
  v17[1] = v14;
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v17);
  UINavigationController.updateRootHost<A>(root:environment:transaction:)((uint64_t)v13, (uint64_t)v18, a3, v8, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

id @objc StyleContextSplitViewNavigationController.childForStatusBarHidden.getter(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = StyleContextSplitViewNavigationController.childForStatusBarHidden.getter();

  return v2;
}

id StyleContextSplitViewNavigationController.childForStatusBarHidden.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_topViewController);
  v2 = objc_msgSend(v1, sel_childViewControllerForStatusBarHidden);

  if (!v2)
    return objc_msgSend(v0, sel_topViewController);
  return v2;
}

id @objc StyleContextSplitViewNavigationController.init(rootViewController:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = specialized StyleContextSplitViewNavigationController.init(rootViewController:)((uint64_t)a3);

  return v5;
}

id StyleContextSplitViewNavigationController.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc StyleContextSplitViewNavigationController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return StyleContextSplitViewNavigationController.init(coder:)(a3);
}

uint64_t type metadata accessor for StyleContextSplitViewNavigationController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StyleContextSplitViewNavigationController);
}

void specialized MulticolumnSplitViewRepresentable.makeCoordinator()()
{
  type metadata accessor for MulticolumnSplitViewRepresentable.Coordinator();
}

id sub_187021A0C(objc_class *a1)
{
  return objc_msgSend(objc_allocWithZone(a1), sel_init);
}

void specialized StyleContextSplitViewNavigationController.__allocating_init<A>(rootView:wantsTransparentBackground:environment:transaction:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  _QWORD v24[2];

  v22[1] = a4;
  v23 = a2;
  v9 = type metadata accessor for StyleContextWriter();
  v10 = type metadata accessor for ModifiedContent();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)v22 - v13;
  v22[0] = *(_QWORD *)(a3 + 8);
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v9, v12);
  v24[0] = a6;
  v24[1] = v15;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v24);
  v18 = type metadata accessor for UIHostingController(0, v10, v16, v17);
  MEMORY[0x18D75B4AC](v18, a5, v9, a6);
  specialized UIHostingController.__allocating_init(rootView:)((uint64_t)v14, v19, v20, v21);
}

id sub_187021B18(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t);
  unint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  v8 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v9 = *(_QWORD *)(v6 - 136);
  v8(v3, v5);
  if (v2 != 1)
  {
    if (v9 > 1)
    {
      v10 = (void *)specialized UIHostingController.host.getter();
      *(_QWORD *)(v6 - 112) = v2;
      *(_QWORD *)(v6 - 104) = 0;
      v11 = v10;
      outlined copy of Transaction?(v9);
      swift_retain();
      _UIHostingView.inheritedEnvironment.setter((_OWORD *)(v6 - 112));

      specialized UIHostingController.host.getter();
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = v4;
      *(_QWORD *)(v12 + 24) = a1;
      swift_retain();
      v13 = a1;
      default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
      GraphHost.asyncTransaction(_:id:_:)();
      outlined consume of EnvironmentValues?(v2);
      swift_release();
      swift_release();
      outlined consume of Transaction?(v9);
    }
    else
    {
      outlined consume of EnvironmentValues?(v2);
    }
  }
  v14 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.setWantsTransparentBackground(for:_:)(4, *(_DWORD *)(v6 - 124) & 1);

  v15 = objc_msgSend(objc_allocWithZone(*(Class *)(v6 - 120)), sel_initWithRootViewController_, a1);
  outlined consume of Transaction?(v9);

  return v15;
}

void specialized MulticolumnSplitViewRepresentable.Coordinator.updateSecondaryPlaceholder(_:for:environment:transaction:)(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v3;
  void *v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  id v11;
  __int128 v12;
  id v13;
  _QWORD *v14;
  __int128 v15;

  v4 = *(void **)((char *)v3 + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryController);
  if (v4)
  {
    v7 = *v3;
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v9 = *MEMORY[0x1E0DEEDD8];
    v12 = *a2;
    v14 = v4;
    v10 = objc_msgSend(v14, sel_topViewController);
    if (v10)
    {
      v11 = *(id *)((char *)v3
                  + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.secondaryPlaceholderHost);
      v13 = v10;
      if (v11 && v10 == v11)
      {
        v15 = v12;
        (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))((*v8 & *v14) + 0x190))(a1, &v15, a3, *(_QWORD *)((v9 & v7) + 0x60), *(_QWORD *)((v9 & v7) + 0x78));

      }
      else
      {

      }
    }
    else
    {

    }
  }
}

void specialized MulticolumnSplitViewRepresentable.Coordinator.updateSupplementaryPlaceholder(_:for:environment:transaction:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  void *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18[2];
  void *v19;
  __int128 v20;

  v5 = *(void **)((char *)v3
                + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController);
  if (v5)
  {
    v7 = *v3;
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v9 = *MEMORY[0x1E0DEEDD8];
    *(_OWORD *)v18 = *a2;
    v10 = objc_msgSend(v5, sel_topViewController);
    if (v10)
    {
      v11 = *(id *)((char *)v3
                  + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryPlaceholderHost);
      if (v11
        && v10 == v11
        && (v12 = *(_QWORD **)((char *)v3
                             + direct field offset for MulticolumnSplitViewRepresentable.Coordinator.supplementaryController)) != 0)
      {
        v13 = v9 & v7;
        v20 = *(_OWORD *)v18;
        v14 = *(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))((*v8 & *v12) + 0x190);
        v15 = *(_QWORD *)(v13 + 88);
        v16 = *(_QWORD *)(v13 + 112);
        v19 = v10;
        v17 = v12;
        v14(a1, &v20, a3, v15, v16);

      }
      else
      {

      }
    }
  }
}

id specialized StyleContextSplitViewNavigationController.init(rootViewController:)(uint64_t a1)
{
  void *v1;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v4, sel_initWithRootViewController_, a1);
}

void type metadata accessor for _ContiguousArrayStorage<(AnyHashable, Any)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>)
  {
    type metadata accessor for (AnyHashable, Any)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  }
}

void type metadata accessor for (AnyHashable, Any)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyHashable, Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable, Any));
  }
}

uint64_t sub_187021FB4()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)()
{
  uint64_t v0;

  closure #1 in StyleContextSplitViewNavigationController.init<A>(rootView:wantsTransparentBackground:environment:transaction:)(*(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 16));
}

void type metadata accessor for MulticolumnSplitView()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for MulticolumnSplitView.Configuration()
{
  JUMPOUT(0x18D75FF28);
}

_UNKNOWN **base witness table accessor for View in MulticolumnSplitView<A, B, C>()
{
  return &protocol witness table for MulticolumnSplitView<A, B, C>;
}

void type metadata accessor for MulticolumnSplitView.EnvironmentTransform()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for MulticolumnSplitView.Container()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for MulticolumnSplitView.Child()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata completion function for MulticolumnSplitView()
{
  type metadata accessor for MulticolumnSplitView.Configuration();
}

uint64_t associated type witness table accessor for View.Body : View in MulticolumnSplitView<A, B, C>.Container()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in MulticolumnSplitView<A, B, C>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in MulticolumnSplitView<A, B, C>.EnvironmentTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for MulticolumnSplitViewRepresentable()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for MulticolumnSplitView.Configuration()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MulticolumnSplitView(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v21;
  uint64_t v22;

  v4 = a1;
  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  if (*(_DWORD *)(v7 + 84))
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = *(_QWORD *)(v7 + 64) + 1;
  v11 = *(_QWORD *)(a3[4] - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v10 + v12;
  v14 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v6 + 80) | *(_BYTE *)(v11 + 80));
  if (v14 <= 7
    && ((v10 + v12 + (v9 & ~v8)) & ~v12) + *(_QWORD *)(v11 + 64) <= 0x18
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v11 + 80)) & 0x100000) == 0)
  {
    v18 = ~v8;
    v21 = ~v12;
    v22 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v19 = (const void *)(((unint64_t)a2 + v9) & v18);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v19, 1, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v9) & v18), v19, v10);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v18, v19, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(((unint64_t)v4 + v9) & v18, 0, 1, v5);
    }
    (*(void (**)(size_t, unint64_t, uint64_t))(v11 + 16))((v13 + (((unint64_t)v4 + v9) & v18)) & v21, ((unint64_t)v19 + v13) & v21, v22);
  }
  else
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for MulticolumnSplitView(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a2[2] - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = a2[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  v9 = *(_QWORD *)(v7 + 64) + v8;
  if (!*(_DWORD *)(v7 + 84))
    ++v9;
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v9
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

uint64_t initializeWithCopy for MulticolumnSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = a3[3];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (void *)((v10 + a1) & ~v9);
  v12 = (const void *)((v10 + a2) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v11, v12, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))(((unint64_t)v11 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v12 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithCopy for MulticolumnSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = a3[3];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (void *)((v10 + a1) & ~v9);
  v12 = (void *)((v10 + a2) & ~v9);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v14 = v13(v11, 1, v7);
  v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v11, v12, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v11, v12, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v17 = *(_QWORD *)(v8 + 64);
  else
    v17 = *(_QWORD *)(v8 + 64) + 1;
  v18 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))(((unint64_t)v11 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v12 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t initializeWithTake for MulticolumnSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = a3[3];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (void *)((v10 + a1) & ~v9);
  v12 = (const void *)((v10 + a2) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
  {
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v11, v12, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    v13 = *(_DWORD *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  v17 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 32))(((unint64_t)v11 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v12 + v16 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithTake for MulticolumnSplitView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = a3[3];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = (void *)((v10 + a1) & ~v9);
  v12 = (void *)((v10 + a2) & ~v9);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v14 = v13(v11, 1, v7);
  v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v11, v12, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v11, v12, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v11, v12, v16);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v17 = *(_QWORD *)(v8 + 64);
  else
    v17 = *(_QWORD *)(v8 + 64) + 1;
  v18 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))(((unint64_t)v11 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v12 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for MulticolumnSplitView(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  if (v8 <= v5)
    v9 = *(_DWORD *)(v4 + 84);
  else
    v9 = v8;
  v10 = *(_QWORD *)(a3[4] - 8);
  if (*(_DWORD *)(v10 + 84) > v9)
    v9 = *(_DWORD *)(v10 + 84);
  v11 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v11;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v13 = *(_QWORD *)(v4 + 64) + v12;
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v9;
  if (a2 <= v9)
    goto LABEL_30;
  v16 = ((v11 + v14 + (v13 & ~v12)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v19 < 2)
    {
LABEL_30:
      if (v9)
      {
        if (v5 == v9)
          return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v4 + 48))(a1, *(unsigned int *)(v4 + 84), a3[2]);
        v22 = (v13 + a1) & ~v12;
        if (v8 != v9)
          return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v10 + 48))((v22 + v11 + v14) & ~v14, *(unsigned int *)(v10 + 84), a3[4]);
        v23 = (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        if (v23 >= 2)
          return v23 - 1;
        else
          return 0;
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_30;
LABEL_21:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v11 + v14 + (v13 & ~(_DWORD)v12)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v9 + v20 + 1;
}

void storeEnumTagSinglePayload for MulticolumnSplitView(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0u;
  v7 = *(_QWORD *)(a4[2] - 8);
  v8 = *(_QWORD *)(a4[3] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= *(_DWORD *)(v7 + 84))
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = v10;
  v12 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v12 + 84) > v11)
    v11 = *(_DWORD *)(v12 + 84);
  if (v9)
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = *(_QWORD *)(v8 + 64) + 1;
  v14 = ((v13
        + *(unsigned __int8 *)(v12 + 80)
        + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(_QWORD *)(v12 + 64);
  v15 = a3 >= v11;
  v16 = a3 - v11;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = 1u;
      if (v11 < a2)
        goto LABEL_22;
      goto LABEL_29;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = 4u;
      if (v11 < a2)
      {
LABEL_22:
        v18 = ~v11 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_29:
      __asm { BR              X22 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v11 < a2)
    goto LABEL_22;
  goto LABEL_29;
}

void sub_187022CDC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187022CE4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_187022D08()
{
  type metadata accessor for MulticolumnSplitViewRepresentable();
}

uint64_t sub_187022D30()
{
  uint64_t v0;
  _QWORD v2[10];

  v0 = type metadata accessor for ModifiedContent();
  v2[0] = &protocol witness table for MulticolumnSplitViewRepresentable<A, B, C>;
  v2[1] = MEMORY[0x1E0CE65D8];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v2);
}

void static ForEach<>._makeToolbar(content:inputs:)()
{
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  default argument 2 of ForEach<>.PreferenceTransform.init(forEach:inputs:cache:)();
}

id sub_187022EAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(_DWORD *)(v4 - 208) = *(_DWORD *)(v4 - 344);
    *(_QWORD *)(v4 - 200) = *(_QWORD *)(v4 - 336);
    *(_DWORD *)(v4 - 192) = *(_DWORD *)(v4 - 324);
    *(_QWORD *)(v4 - 184) = v1;
    *(_QWORD *)(v4 - 176) = v5;
    *(_QWORD *)(v4 - 168) = v6;
    *(_QWORD *)(v4 - 160) = v3;
    *(_QWORD *)(v4 - 152) = v2;
    v9 = *(_DWORD *)(v4 - 308);
    *(_DWORD *)(v4 - 144) = v9;
    v10 = *(_QWORD *)(v4 - 320);
    *(_QWORD *)(v4 - 136) = v10;
    *(_DWORD *)(v4 - 128) = *(_DWORD *)(v4 - 340);
    *(_QWORD *)(v4 - 120) = result;
    *(_QWORD *)(v4 - 112) = a1;
    v11 = PreferencesOutputs.init()();
    v12 = *(_DWORD *)(v4 - 240);
    *(_QWORD *)(v4 - 232) = *(_QWORD *)(v4 - 248);
    *(_DWORD *)(v4 - 224) = v12;
    *(_QWORD *)(v4 - 216) = v10;
    *(_QWORD *)(v4 - 248) = v2;
    *(_DWORD *)(v4 - 240) = v9;
    MEMORY[0x1E0C80A78](v11, v13);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    result = (id)outlined release of ForEach<A, B, C><>.PreferenceTransform(v4 - 208);
    v14 = *(_DWORD *)(v4 - 224);
    v15 = *(_QWORD *)(v4 - 216);
    v16 = *(_QWORD *)(v4 - 264);
    *(_QWORD *)v16 = *(_QWORD *)(v4 - 232);
    *(_DWORD *)(v16 + 8) = v14;
    *(_QWORD *)(v16 + 16) = v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void default argument 2 of ForEach<>.PreferenceTransform.init(forEach:inputs:cache:)()
{
  type metadata accessor for ForEach<>.PreferenceTransform.Item();
}

uint64_t sub_187023058()
{
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

void implicit closure #1 in static ForEach<>._makeToolbar(content:inputs:)()
{
  type metadata accessor for ForEach<>.PreferenceTransform();
}

uint64_t sub_187023110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[4];
  unsigned int v8;
  _QWORD v9[22];

  v7[2] = a1;
  v7[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.PreferenceTransform, a1);
  outlined retain of ForEach<A, B, C><>.PreferenceTransform(v1);
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)v7, a1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  v5 = (void *)v9[11];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v8;
}

void partial apply for implicit closure #1 in static ForEach<>._makeToolbar(content:inputs:)()
{
  implicit closure #1 in static ForEach<>._makeToolbar(content:inputs:)();
}

uint64_t outlined release of ForEach<A, B, C><>.PreferenceTransform(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t ForEach<>.PreferenceTransform.forEach.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  v2 = type metadata accessor for ForEach();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ForEach<>.PreferenceTransform.updateValue()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v44 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v39 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v39 - v13;
  v47 = v2;
  v15 = *(void **)(v2 + 88);
  result = AGSubgraphIsValid();
  if ((_DWORD)result)
  {
    v39[1] = v6;
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = 0u;
    v18 = v17 + 16;
    *(_OWORD *)(v17 + 32) = 0u;
    v19 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = v19;
    *(_BYTE *)(v17 + 64) = 1;
    v39[2] = v17;
    *(_QWORD *)(v17 + 72) = MEMORY[0x1E0DEE9E8];
    v53 = 0;
    v20 = static Array._allocateUninitialized(_:)();
    v21 = MEMORY[0x18D75D078](v20, v4);
    v45 = v5;
    v43 = v10;
    v42 = v14;
    if (v21)
    {
      v46 = a1[6];
      v22 = specialized Set.init(_nonEmptyArrayLiteral:)(v20, v4, v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v46 = a1[6];
      v22 = MEMORY[0x1E0DEE9E8];
    }
    v51 = v39;
    v52 = v22;
    v24 = *(_QWORD *)(v47 + 8);
    v25 = *(_DWORD *)(v47 + 16);
    v26 = *(_QWORD *)(v47 + 24);
    v27 = *(_QWORD *)(v47 + 48);
    v28 = *(_QWORD *)(v47 + 56);
    v29 = *(_DWORD *)(v47 + 64);
    v30 = *(_QWORD *)(v47 + 72);
    v31 = *(_DWORD *)(v47 + 80);
    LODWORD(v54) = *(_DWORD *)v47;
    v32 = *(_QWORD *)(v47 + 96);
    v55 = v24;
    LODWORD(v56) = v25;
    v57 = v26;
    v58 = *(_OWORD *)(v47 + 32);
    v59 = v27;
    v60 = v28;
    v61 = v29;
    v62 = v30;
    v63 = v31;
    v64 = v15;
    v65 = v32;
    MEMORY[0x1E0C80A78](v24, v23);
    v50 = a1[2];
    v39[-10] = v50;
    v39[-9] = v4;
    v41 = a1[4];
    v49 = a1[5];
    v33 = v49;
    v39[-8] = v41;
    v39[-7] = v33;
    v48 = v4;
    v40 = a1[7];
    v34 = v40;
    v35 = v46;
    v39[-6] = v46;
    v39[-5] = v34;
    v39[-4] = v36;
    v39[-3] = &v53;
    v39[-2] = &v52;
    v39[-1] = v18;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = v15;
    swift_bridgeObjectRetain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.PreferenceTransform, a1);
    StatefulRule.withObservation<A>(do:)();
    v38 = v64;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v54 = v50;
    v55 = v48;
    v56 = v41;
    v57 = v49;
    *(_QWORD *)&v58 = v35;
    *((_QWORD *)&v58 + 1) = v40;
    type metadata accessor for ForEach<>.PreferenceTransform.Item();
  }
  return result;
}

void closure #1 in ForEach<>.PreferenceTransform.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  _QWORD v49[20];
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  char *v77;

  v58 = a7;
  v49[17] = a3;
  v54 = a2;
  v53 = a9;
  v60 = a10;
  v13 = *(_QWORD *)(a6 - 8);
  v50 = a6;
  v49[16] = v13;
  MEMORY[0x1E0C80A78](a1, a2);
  v49[15] = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v49[14] = (char *)v49 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v59 = (char *)v49 - v21;
  v23 = *(_QWORD *)(v22 + 8);
  v55 = v22;
  v24 = *(_QWORD *)(v23 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v49[19] = AssociatedTypeWitness;
  v56 = v26;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, AssociatedTypeWitness);
  v77 = (char *)v49 - v27;
  v28 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v28, v29);
  v52 = (char *)v49 - v30;
  v49[18] = v24;
  v31 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v31, v32);
  v49[7] = (char *)v49 - v33;
  v51 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v34, v35);
  v67 = a5;
  v68 = a6;
  v69 = v58;
  v70 = a8;
  *(_QWORD *)&v71 = a9;
  v36 = type metadata accessor for ForEach();
  MEMORY[0x1E0C80A78](v36, v37);
  v49[11] = (char *)v49 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v49[4] = v31;
  v49[6] = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v57 = swift_getAssociatedTypeWitness();
  v49[1] = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57, v41);
  v42 = *(_QWORD *)(a1 + 8);
  v43 = *(_DWORD *)(a1 + 16);
  v44 = *(_QWORD *)(a1 + 24);
  v45 = *(_DWORD *)(a1 + 64);
  v46 = *(_QWORD *)(a1 + 72);
  v47 = *(_DWORD *)(a1 + 80);
  LODWORD(v67) = *(_DWORD *)a1;
  v68 = v42;
  LODWORD(v69) = v43;
  v70 = v44;
  v48 = *(_OWORD *)(a1 + 48);
  v71 = *(_OWORD *)(a1 + 32);
  v72 = v48;
  v73 = v45;
  v74 = v46;
  v75 = v47;
  v49[5] = a1;
  v76 = *(_OWORD *)(a1 + 88);
  v61 = a5;
  v62 = v50;
  v63 = v58;
  v64 = v55;
  v65 = v53;
  v66 = v60;
  type metadata accessor for ForEach<>.PreferenceTransform();
}

uint64_t sub_187023D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  *(_QWORD *)(v9 - 256) = a1;
  ForEach<>.PreferenceTransform.forEach.getter(v8);
  ForEach.data.getter();
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v11 = *(_QWORD *)(v9 - 320);
  *(_QWORD *)(v9 - 416) = v8;
  *(_QWORD *)(v9 - 400) = v5;
  *(_QWORD *)(v9 - 424) = v10;
  v10(v8, v5);
  dispatch thunk of Collection.indices.getter();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 328) + 8);
  *(_QWORD *)(v9 - 392) = v2;
  *(_QWORD *)(v9 - 352) = v1;
  v13 = v1;
  v14 = *(_QWORD *)(v9 - 72);
  *(_QWORD *)(v9 - 432) = v12;
  v12(v2, v13);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 328) = v3;
  v16 = *(_QWORD *)(v9 - 344);
  *(_QWORD *)(v9 - 440) = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 288) + 48);
  *(_QWORD *)(v9 - 448) = v17;
  if (v17(v11, 1, v16) != 1)
  {
    *(_QWORD *)(v9 - 464) = *(_QWORD *)(*(_QWORD *)(v9 - 288) + 32);
    *(_QWORD *)(v9 - 472) = v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 - 464))(v14, v11, v16);
    v19 = *(_QWORD *)(v9 - 456);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_DWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v23 = *(_DWORD *)(v19 + 64);
    v24 = *(_QWORD *)(v19 + 72);
    v25 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v9 - 192) = *(_DWORD *)v19;
    *(_QWORD *)(v9 - 184) = v20;
    *(_DWORD *)(v9 - 176) = v21;
    *(_QWORD *)(v9 - 168) = v22;
    v26 = *(_OWORD *)(v19 + 48);
    *(_OWORD *)(v9 - 160) = *(_OWORD *)(v19 + 32);
    *(_OWORD *)(v9 - 144) = v26;
    *(_DWORD *)(v9 - 128) = v23;
    *(_QWORD *)(v9 - 120) = v24;
    *(_DWORD *)(v9 - 112) = v25;
    *(_OWORD *)(v9 - 104) = *(_OWORD *)(v19 + 88);
    v27 = *(_QWORD *)(v9 - 416);
    ForEach<>.PreferenceTransform.forEach.getter(v27);
    v28 = *(_QWORD *)(v9 - 400);
    ForEach.idGenerator.getter();
    v29 = v27;
    v30 = *(void (**)(uint64_t, uint64_t))(v9 - 424);
    v30(v29, v28);
    *(_QWORD *)(v9 - 248) = *(_QWORD *)(v9 - 240);
    v31 = *(_QWORD *)(v19 + 8);
    v32 = *(_DWORD *)(v19 + 16);
    v33 = *(_QWORD *)(v19 + 24);
    v34 = *(_DWORD *)(v19 + 64);
    v35 = *(_QWORD *)(v19 + 72);
    v36 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v9 - 192) = *(_DWORD *)v19;
    *(_QWORD *)(v9 - 184) = v31;
    *(_DWORD *)(v9 - 176) = v32;
    *(_QWORD *)(v9 - 168) = v33;
    v37 = *(_OWORD *)(v19 + 48);
    *(_OWORD *)(v9 - 160) = *(_OWORD *)(v19 + 32);
    *(_OWORD *)(v9 - 144) = v37;
    *(_DWORD *)(v9 - 128) = v34;
    *(_QWORD *)(v9 - 120) = v35;
    *(_DWORD *)(v9 - 112) = v36;
    *(_OWORD *)(v9 - 104) = *(_OWORD *)(v19 + 88);
    v38 = *(_QWORD *)(v9 - 408);
    ForEach<>.PreferenceTransform.forEach.getter(v38);
    v39 = *(_QWORD *)(v9 - 392);
    ForEach.data.getter();
    v30(v38, v28);
    v40 = *(_QWORD *)(v9 - 352);
    v41 = *(_QWORD *)(v9 - 336);
    *(_QWORD *)(v9 - 192) = v40;
    *(_QWORD *)(v9 - 184) = v41;
    v42 = *(_QWORD *)(v9 - 296);
    *(_QWORD *)(v9 - 176) = *(_QWORD *)(v9 - 272);
    *(_QWORD *)(v9 - 168) = v42;
    *(_QWORD *)(v9 - 160) = *(_QWORD *)(v9 - 312);
    type metadata accessor for ForEach.IDGenerator();
    v43 = *(_QWORD *)(v9 - 264);
    ForEach.IDGenerator.makeID(data:index:offset:)();
    (*(void (**)(uint64_t, uint64_t))(v9 - 432))(v39, v40);
    swift_release();
    v44 = *(_QWORD *)(v9 - 368);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v44 + 16))(*(_QWORD *)(v9 - 376), v43, v41);
    type metadata accessor for Set();
    v45 = *(_QWORD *)(v9 - 384);
    Set.insert(_:)();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v41);
    ForEach<>.PreferenceTransform.item(at:offset:)(*(_QWORD *)(v9 - 72), *v7, *(_QWORD **)(v9 - 256));
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 488) + 8))(*(_QWORD *)(v9 - 328), *(_QWORD *)(v9 - 280));
}

void sub_187024248()
{
  uint64_t *v0;
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;

  Value = (uint64_t *)AGGraphGetValue();
  v2 = v0[1];
  if (v2)
  {
    v3 = *v0;
  }
  else
  {
    v3 = *Value;
    v2 = swift_bridgeObjectRetain();
  }
  *v0 = v3;
  v0[1] = v2;
  if (v0[3])
    JUMPOUT(0x187023F3CLL);
  JUMPOUT(0x187023F28);
}

void ForEach<>.PreferenceTransform.item(at:offset:)(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  _QWORD v55[21];
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  int v77;
  __int128 v78;

  v4 = v3;
  v60 = a2;
  v63 = a1;
  v6 = *(_QWORD *)(a3[4] - 8);
  v66 = a3[4];
  v7 = v66;
  v55[13] = v6;
  MEMORY[0x1E0C80A78](a1, a2);
  v61 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8);
  v65 = *(_QWORD *)(v9 + 40);
  v11 = v65;
  v55[17] = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55[20] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v55[19] = (char *)v55 - v14;
  v59 = *(char **)(v12 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a3[3];
  v64 = a3[6];
  v69 = v12;
  v70 = v19;
  v71 = v7;
  v72 = v11;
  *(_QWORD *)&v73 = v64;
  v20 = type metadata accessor for ForEach();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v55 - v27;
  v58 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v55[12] = (char *)v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v62 = (char *)v55 - v34;
  v35 = *(_QWORD *)(v4 + 8);
  v36 = *(_DWORD *)(v4 + 16);
  v37 = *(_QWORD *)(v4 + 24);
  LODWORD(v34) = *(_DWORD *)(v4 + 64);
  v38 = *(_QWORD *)(v4 + 72);
  v39 = *(_DWORD *)(v4 + 80);
  LODWORD(v69) = *(_DWORD *)v4;
  v70 = v35;
  LODWORD(v71) = v36;
  v72 = v37;
  v40 = *(_OWORD *)(v4 + 48);
  v73 = *(_OWORD *)(v4 + 32);
  v74 = v40;
  v75 = v34;
  v76 = v38;
  v77 = v39;
  v78 = *(_OWORD *)(v4 + 88);
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)v28);
  ForEach.idGenerator.getter();
  v41 = *(void (**)(char *, uint64_t))(v21 + 8);
  v55[16] = v28;
  v41(v28, v20);
  v67 = v68;
  v42 = *(_QWORD *)(v4 + 8);
  v43 = *(_DWORD *)(v4 + 16);
  v44 = *(_QWORD *)(v4 + 24);
  v45 = *(_DWORD *)(v4 + 64);
  v46 = *(_QWORD *)(v4 + 72);
  v47 = *(_DWORD *)(v4 + 80);
  LODWORD(v69) = *(_DWORD *)v4;
  v70 = v42;
  LODWORD(v71) = v43;
  v72 = v44;
  v48 = *(_OWORD *)(v4 + 48);
  v73 = *(_OWORD *)(v4 + 32);
  v74 = v48;
  v75 = v45;
  v76 = v46;
  v77 = v47;
  v78 = *(_OWORD *)(v4 + 88);
  ForEach<>.PreferenceTransform.forEach.getter((uint64_t)v24);
  ForEach.data.getter();
  v55[18] = v20;
  v55[15] = v41;
  v41(v24, v20);
  v49 = v12;
  v69 = v12;
  v70 = v19;
  v51 = v65;
  v50 = v66;
  v71 = v66;
  v72 = v65;
  v52 = v64;
  *(_QWORD *)&v73 = v64;
  type metadata accessor for ForEach.IDGenerator();
  ForEach.IDGenerator.makeID(data:index:offset:)();
  v53 = (void (*)(char *, uint64_t))*((_QWORD *)v59 + 1);
  v59 = v18;
  v55[14] = v53;
  v53(v18, v49);
  swift_release();
  v60 = a3;
  v54 = a3[7];
  v57 = v49;
  v69 = v49;
  v70 = v19;
  v71 = v50;
  v72 = v51;
  *(_QWORD *)&v73 = v52;
  *((_QWORD *)&v73 + 1) = v54;
  type metadata accessor for ForEach<>.PreferenceTransform.Item();
}

uint64_t sub_187024678(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  uint64_t v11;
  id v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD);
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t result;
  int v53;
  uint64_t v54;
  uint64_t v55;

  MEMORY[0x18D75CA24](v3, v1, v4, a1, v7);
  v10 = *(id *)(v8 - 216);
  if (v10)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 328) + 8))(v3, v4);
    return (uint64_t)v10;
  }
  *(_QWORD *)(v8 - 512) = a1;
  *(_QWORD *)(v8 - 504) = v5;
  v11 = *((_QWORD *)v2 + 11);
  v12 = (id)AGSubgraphGetGraph();
  *(_QWORD *)(v8 - 424) = v4;
  v13 = *v2;
  *(_QWORD *)(v8 - 432) = *((_QWORD *)v2 + 1);
  *(_DWORD *)(v8 - 444) = v2[4];
  *(_QWORD *)(v8 - 456) = *((_QWORD *)v2 + 3);
  v14 = v2[16];
  v15 = *((_QWORD *)v2 + 9);
  v16 = v2[20];
  *(_OWORD *)(v8 - 480) = *((_OWORD *)v2 + 3);
  *(_OWORD *)(v8 - 496) = *((_OWORD *)v2 + 2);
  *(_QWORD *)(v8 - 440) = AGSubgraphCreate2();

  AGSubgraphAddChild();
  *(_DWORD *)(v8 - 192) = v13;
  *(_QWORD *)(v8 - 184) = *(_QWORD *)(v8 - 432);
  *(_DWORD *)(v8 - 176) = *(_DWORD *)(v8 - 444);
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v8 - 456);
  v17 = *(_OWORD *)(v8 - 480);
  *(_OWORD *)(v8 - 160) = *(_OWORD *)(v8 - 496);
  *(_OWORD *)(v8 - 144) = v17;
  *(_DWORD *)(v8 - 128) = v14;
  *(_QWORD *)(v8 - 120) = v15;
  *(_DWORD *)(v8 - 112) = v16;
  *(_QWORD *)(v8 - 104) = v11;
  *(_QWORD *)(v8 - 96) = v1;
  v18 = *(_QWORD *)(v8 - 384);
  ForEach<>.PreferenceTransform.forEach.getter(v18);
  v19 = *(_QWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 432) = v6;
  v20 = *(_QWORD *)(v8 - 368);
  ForEach.data.getter();
  v21 = *(void (**)(uint64_t, uint64_t))(v8 - 392);
  v21(v18, v20);
  v22 = *(_QWORD *)(v8 - 336);
  v23 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
  v24 = *(_QWORD *)(v8 - 360);
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 352) + 16))(v24);
  v23(v8 - 192, 0);
  (*(void (**)(uint64_t, uint64_t))(v8 - 400))(v19, v22);
  v25 = *((_QWORD *)v2 + 1);
  v26 = v2[4];
  v27 = *((_QWORD *)v2 + 3);
  v28 = v2[16];
  v29 = *((_QWORD *)v2 + 9);
  v30 = v2[20];
  *(_DWORD *)(v8 - 192) = *v2;
  *(_QWORD *)(v8 - 184) = v25;
  *(_DWORD *)(v8 - 176) = v26;
  *(_QWORD *)(v8 - 168) = v27;
  v31 = *((_OWORD *)v2 + 3);
  *(_OWORD *)(v8 - 160) = *((_OWORD *)v2 + 2);
  *(_OWORD *)(v8 - 144) = v31;
  *(_DWORD *)(v8 - 128) = v28;
  *(_QWORD *)(v8 - 120) = v29;
  *(_DWORD *)(v8 - 112) = v30;
  *(_OWORD *)(v8 - 104) = *(_OWORD *)(v2 + 22);
  ForEach<>.PreferenceTransform.forEach.getter(v18);
  v32 = (void (*)(uint64_t))specialized ForEach.content.getter(v20);
  swift_retain();
  v21(v18, v20);
  v32(v24);
  swift_release();
  v33 = *((_QWORD *)v2 + 1);
  v34 = v2[4];
  v35 = *((_QWORD *)v2 + 3);
  v36 = *((_QWORD *)v2 + 6);
  v37 = *((_QWORD *)v2 + 7);
  *(_QWORD *)(v8 - 272) = v36;
  v38 = v2[16];
  v39 = *((_QWORD *)v2 + 9);
  v40 = v2[20];
  *(_QWORD *)(v8 - 192) = v33;
  *(_DWORD *)(v8 - 184) = v34;
  *(_OWORD *)(v8 - 168) = *((_OWORD *)v2 + 2);
  *(_QWORD *)(v8 - 152) = v36;
  *(_QWORD *)(v8 - 144) = v37;
  *(_DWORD *)(v8 - 136) = v38;
  *(_QWORD *)(v8 - 128) = v39;
  *(_DWORD *)(v8 - 120) = v40;
  swift_beginAccess();
  LODWORD(v18) = *(_DWORD *)(v35 + 16);
  v41 = *(_QWORD *)(v35 + 24);
  *(_OWORD *)(v8 - 304) = *(_OWORD *)(v35 + 32);
  *(_OWORD *)(v8 - 320) = *(_OWORD *)(v35 + 48);
  v42 = *(_QWORD *)(v35 + 64);
  v43 = *(_QWORD *)(v35 + 72);
  v44 = *(_BYTE *)(v35 + 80);
  LOBYTE(v23) = *(_BYTE *)(v35 + 81);
  v45 = *(_QWORD *)(v35 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  v46 = swift_allocObject();
  *(_DWORD *)(v46 + 16) = v18;
  *(_QWORD *)(v46 + 24) = v41;
  v47 = *(_OWORD *)(v8 - 320);
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(v8 - 304);
  *(_OWORD *)(v46 + 48) = v47;
  *(_QWORD *)(v46 + 64) = v42;
  *(_QWORD *)(v46 + 72) = v43;
  v48 = *(void **)(v8 - 440);
  *(_BYTE *)(v46 + 80) = v44;
  *(_BYTE *)(v46 + 81) = (_BYTE)v23;
  *(_QWORD *)(v46 + 88) = v45;
  swift_retain();
  *(_QWORD *)(v8 - 176) = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v49 = *(_QWORD *)(v8 - 424);
  swift_bridgeObjectRetain();
  *(_DWORD *)(v8 - 224) = 0;
  *(_BYTE *)(v8 - 220) = 1;
  AGGraphClearUpdate();
  v50 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  v51 = *(_QWORD *)(v8 - 248);
  closure #1 in ForEach<>.PreferenceTransform.item(at:offset:)(*(_QWORD *)(v8 - 288), (uint64_t *)(v8 - 192), (_DWORD *)(v8 - 224), *(_QWORD *)(v8 - 336), v49, v51, *(_QWORD *)(v8 - 256), *(_QWORD *)(v8 - 264), *(_QWORD *)(v8 - 432));
  AGSubgraphSetCurrent();

  result = AGGraphSetUpdate();
  if ((*(_BYTE *)(v8 - 220) & 1) == 0)
  {
    v53 = *(_DWORD *)(v8 - 224);
    v54 = *(_QWORD *)(v8 - 328);
    v55 = *(_QWORD *)(v8 - 280);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v54 + 16))(*(_QWORD *)(v8 - 416), v55, v49);
    *(_QWORD *)(v8 - 240) = v48;
    *(_DWORD *)(v8 - 232) = v53;
    type metadata accessor for Dictionary();
    v10 = v48;
    Dictionary.subscript.setter();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v8 - 352) + 8))(*(_QWORD *)(v8 - 360), *(_QWORD *)(v8 - 344));
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v49);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 408) + 8))(*(_QWORD *)(v8 - 288), v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in ForEach<>.PreferenceTransform.updateValue()(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  swift_beginAccess();
  v4 = a2[4];
  v5 = a2[5];
  v6 = a2[6];
  v7 = a1[1];
  if (v7)
  {
    v8 = *a1;
  }
  else
  {
    v8 = a2[2];
    v7 = swift_bridgeObjectRetain();
  }
  *a1 = v8;
  a1[1] = v7;
  v9 = a1[3];
  if (v9)
  {
    v6 = a1[4];
    v4 = a1[2];
  }
  else
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
    v9 = v5;
  }
  a1[2] = v4;
  a1[3] = v9;
  a1[4] = v6;
  v12 = a1[5];
  v10 = swift_bridgeObjectRetain();
  result = specialized Array.append<A>(contentsOf:)(v10);
  a1[5] = v12;
  return result;
}

uint64_t closure #1 in ForEach<>.PreferenceTransform.item(at:offset:)(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t, double);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t result;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _BYTE v35[12];
  uint64_t v36;
  int v37;
  _BYTE v38[16];
  uint64_t v39;
  int v40;
  _BYTE v41[16];
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v33 = a3;
  v34 = a9;
  v51 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a6 - 8);
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v16(v15, a1, v17, v13);
  v42 = a6;
  v18 = type metadata accessor for Attribute();
  v19 = MEMORY[0x1E0DEDCE8];
  v20 = MEMORY[0x1E0DEDD18];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v41, a6, MEMORY[0x1E0DEDCE8], v18, MEMORY[0x1E0DEDD18], v21);
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v15, a6);
  LODWORD(v12) = v43;
  ((void (*)(char *, uint64_t, uint64_t))v16)(v15, a1, a6);
  v39 = a6;
  v40 = v12;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)v38, a6, v19, MEMORY[0x1E0DEAFA0], v20, v23);
  v22(v15, a6);
  _GraphValue.init(_:)();
  v24 = *((_DWORD *)a2 + 2);
  v25 = a2[2];
  v26 = *((_DWORD *)a2 + 14);
  v27 = a2[8];
  v28 = *((_DWORD *)a2 + 18);
  v43 = *a2;
  v44 = v24;
  v45 = v25;
  v46 = *(_OWORD *)(a2 + 3);
  v47 = *(_OWORD *)(a2 + 5);
  v49 = v27;
  v48 = v26;
  v50 = v28;
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t))(v34 + 32))(&v36, v35, &v43, a6);
  v43 = v36;
  v44 = v37;
  v29 = PreferencesOutputs.subscript.getter();
  result = swift_bridgeObjectRelease();
  if ((v29 & 0x100000000) != 0)
    __break(1u);
  v31 = v33;
  *v33 = v29;
  *((_BYTE *)v31 + 4) = 0;
  return result;
}

void protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <> ForEach<A, B, C>()
{
  static ForEach<>._makeToolbar(content:inputs:)();
}

uint64_t ForEach<>.init<>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  return ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

{
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[12];

  v21[2] = a2;
  v21[3] = a3;
  v21[1] = a9;
  v16 = *(_QWORD *)(a4 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v19, v17);
  v21[4] = a4;
  v21[5] = a5;
  v21[6] = a6;
  v21[7] = a7;
  v21[8] = a8;
  v21[9] = a10;
  v21[11] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
}

uint64_t sub_187024F0C()
{
  return key path getter for Identifiable.id : <A, B, C>A.Element();
}

uint64_t sub_187024F20()
{
  return 48;
}

__n128 sub_187024F2C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t ForEach<>.init(_:id:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ForEach<>.init(_:id:content:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return ForEach<>.init(_:id:content:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v15[1] = a6;
  v15[2] = a7;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v11);
  v15[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a5);
}

{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v15[1] = a6;
  v15[2] = a7;
  v10 = *(_QWORD *)(a5 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v11);
  v15[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a5);
}

double ForEach<>.init<>(_:content:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  double result;

  *(_QWORD *)&result = ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

{
  double result;

  *(_QWORD *)&result = ForEach<>.init<>(_:content:)(a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

uint64_t sub_187024F60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out C)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 32))(*a1);
}

{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 40))(*a1);
}

void type metadata accessor for Range<Int>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<Int>)
  {
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>);
  }
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    type metadata accessor for Range<Int>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Int and conformance Int();
    v4[0] = MEMORY[0x1E0DEB458];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB8B8], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    type metadata accessor for Range<Int>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type Int and conformance Int();
    v4[0] = MEMORY[0x1E0DEB458];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB8A0], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t key path getter for Identifiable.id : <A, B, C>A.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_187025288()
{
  return key path getter for Identifiable.id : <A, B, C>A.Element();
}

uint64_t sub_18702529C()
{
  return 48;
}

__n128 sub_1870252A8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

__n128 ForEach<>.init<>(_:content:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  __n128 result;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  uint64_t v15;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  result = v13;
  *(_OWORD *)a5 = v12;
  *(__n128 *)(a5 + 16) = v13;
  *(_OWORD *)(a5 + 32) = v14;
  *(_QWORD *)(a5 + 48) = v15;
  return result;
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : ToolbarContent in <> ForEach<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t instantiation function for generic protocol witness table for <> ForEach<A, B, C>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ToolbarContent.Body : CustomizableToolbarContent in <> ForEach<A, B, C>()
{
  return &protocol witness table for Never;
}

uint64_t instantiation function for generic protocol witness table for <> ForEach<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for ForEach<>.PreferenceTransform()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined retain of ForEach<A, B, C><>.PreferenceTransform(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for Attribute<(_:)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)(255, &lazy cache variable for type metadata for (_:));
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
  }
}

void type metadata accessor for ForEach<>.PreferenceTransform.Item()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t initializeBufferWithCopyOfBuffer for ForEach<>.PreferenceTransform.Item(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ForEach<>.PreferenceTransform.Item(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ForEach<>.PreferenceTransform.Item(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t destroy for ForEach<>.PreferenceTransform(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ForEach<>.PreferenceTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v5 = *(void **)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 96) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ForEach<>.PreferenceTransform(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v4 = *(void **)(a2 + 88);
  v5 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ForEach<>.PreferenceTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);

  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEach<>.PreferenceTransform(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ForEach<>.PreferenceTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in ForEach<A, B, C><>.PreferenceTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187025AA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 40))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ForEach<>.PreferenceTransform.updateValue()()
{
  uint64_t *v0;

  closure #1 in ForEach<>.PreferenceTransform.updateValue()(v0[8], v0[9], v0[10], v0[11], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

BOOL partial apply for closure #2 in ForEach<>.PreferenceTransform.updateValue()()
{
  char v0;

  swift_bridgeObjectRetain();
  v0 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return (v0 & 1) == 0;
}

uint64_t partial apply for closure #3 in ForEach<>.PreferenceTransform.updateValue()(uint64_t *a1)
{
  _QWORD *v1;

  return closure #3 in ForEach<>.PreferenceTransform.updateValue()(a1, v1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_So6CGRectVs5NeverOTg503_s7d4UI26fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_5918e812d1d562eb413ef1fedeeee4a2AhFTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  CGPoint v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v18;
    v4 = a1 + 48;
    do
    {
      v17 = result;
      swift_retain();
      if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
      {
        static LayoutComputer.defaultValue.getter();
      }
      else
      {
        AGGraphGetValue();
        swift_retain();
      }
      LayoutComputer.sizeThatFits(_:)();
      v6 = v5;
      v8 = v7;
      swift_release();
      v9 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v8, v6));
      if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
      {
        static LayoutComputer.defaultValue.getter();
      }
      else
      {
        AGGraphGetValue();
        swift_retain();
      }
      LayoutComputer.sizeThatFits(_:)();
      v11 = v10;
      v13 = v12;
      swift_release();
      swift_release();
      result = v17;
      v15 = *(_QWORD *)(v17 + 16);
      v14 = *(_QWORD *)(v17 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
        result = v17;
      }
      *(_QWORD *)(result + 16) = v15 + 1;
      v16 = result + 32 * v15;
      *(CGPoint *)(v16 + 32) = v9;
      *(_QWORD *)(v16 + 48) = v11;
      *(_QWORD *)(v16 + 56) = v13;
      v4 += 72;
      --v2;
    }
    while (v2);
  }
  return result;
}

void _ScrollableLayoutView.init(data:layout:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[8];

  v21[0] = a8;
  v21[1] = a2;
  v16 = *(_QWORD *)(a3 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))(v19, a1, v17);
  v20 = dispatch thunk of Collection.count.getter();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9, v19, a3);
  *(_QWORD *)(a9 + *(int *)(swift_getTupleTypeMetadata2() + 48)) = v20;
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a6;
  v21[6] = a7;
  v21[7] = v21[0];
  type metadata accessor for _ScrollableLayoutView();
}

uint64_t sub_1870261DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v2 + *(int *)(a1 + 68), *(_QWORD *)(v3 - 136), v1);
}

void static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[84];

  v16[9] = a7;
  v16[81] = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16[5] = (char *)v16 - v15;
  v16[70] = a1;
  v16[71] = a2;
  v16[18] = a2;
  v16[72] = a3;
  v16[73] = a4;
  v16[24] = a4;
  v16[74] = a5;
  v16[75] = a6;
  type metadata accessor for ScrollableLayoutState();
}

void sub_1870262E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[8];
  _BYTE v41[48];

  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v2 + 64) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v2 + 48) = &v41[-v11];
  *(_DWORD *)(v2 + 172) = *v4;
  v12 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v8 + 176) = *(_OWORD *)v3;
  *(_OWORD *)(v8 + 192) = v12;
  v13 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v8 + 208) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v8 + 224) = v13;
  v14 = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v8 + 240) = v14;
  *(_DWORD *)(v10 - 128) = *(_DWORD *)(v3 + 80);
  v15 = *(_QWORD *)(v10 - 208);
  *(_QWORD *)&v14 = *(_QWORD *)(v10 - 200);
  v16 = *(_QWORD *)(v10 - 192);
  v17 = *(_DWORD *)(v10 - 184);
  v18 = *(_DWORD *)(v10 - 180);
  v20 = *(_DWORD *)(v10 - 176);
  v19 = *(_DWORD *)(v10 - 172);
  *(_QWORD *)(v2 + 136) = v15;
  *(_QWORD *)(v2 + 472) = v15;
  *(_OWORD *)(v2 + 112) = v14;
  *(_DWORD *)(v2 + 480) = v14;
  *(_QWORD *)(v2 + 104) = v16;
  *(_QWORD *)(v2 + 488) = v16;
  *(_DWORD *)(v2 + 96) = v18;
  *(_DWORD *)(v2 + 100) = v17;
  *(_DWORD *)(v2 + 496) = v17;
  *(_DWORD *)(v2 + 500) = v18;
  v22 = *(_QWORD *)(v10 - 168);
  v21 = *(_QWORD *)(v10 - 160);
  *(_QWORD *)(v2 + 80) = v22;
  *(_QWORD *)(v2 + 512) = v22;
  *(_QWORD *)(v2 + 520) = v21;
  *(_DWORD *)(v2 + 528) = *(_DWORD *)(v10 - 152);
  *(_OWORD *)(v8 + 148) = *(_OWORD *)(v8 + 236);
  *(_QWORD *)(v8 + 164) = *(_QWORD *)(v8 + 252);
  *(_DWORD *)(v2 + 168) = v19;
  *(_DWORD *)(v2 + 92) = v20;
  *(_DWORD *)(v2 + 504) = v20;
  *(_DWORD *)(v2 + 508) = v19 & 0xFFFFFFFD;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
  *(_QWORD *)(v2 + 184) = v5;
  *(_QWORD *)(v2 + 320) = swift_getAssociatedTypeWitness();
  outlined retain of _ViewInputs(v10 - 208);
  v23 = type metadata accessor for External();
  v24 = MEMORY[0x1E0CFECF8];
  v25 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v25, (uint64_t)partial apply for closure #1 in Attribute.init(type:), v2 + 304, v23, MEMORY[0x1E0DEDCE8], v25, MEMORY[0x1E0DEDD18], v26);
  *(_QWORD *)(v2 + 32) = 0;
  v27 = *(_DWORD *)(v2 + 384);
  *(_DWORD *)(v2 + 384) = 0;
  v28 = MEMORY[0x1E0DEE0F8];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<UInt32>, MEMORY[0x1E0DEE0F8], (uint64_t (*)(_QWORD, uint64_t))v24);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, &lazy cache variable for type metadata for External<UInt32>, v28);
  v29 = Attribute.init<A>(body:value:flags:update:)();
  v30 = (id)AGSubgraphGetCurrent();
  if (v30)
  {
    v31 = v30;
    v32 = (id)AGSubgraphGetGraph();

    v33 = AGSubgraphCreate();
    AGGraphClearUpdate();
    v34 = (id)AGSubgraphGetCurrent();
    *(_QWORD *)(v2 + 8) = v33;
    AGSubgraphSetCurrent();
    *(_DWORD *)(v2 + 16) = v29;
    *(_DWORD *)(v2 + 20) = v27;
    v35 = *(_QWORD *)(v2 + 184);
    v36 = *(_QWORD *)(v2 + 192);
    v37 = *(_QWORD *)(v2 + 144);
    closure #1 in static _ScrollableLayoutView._makeView(view:inputs:)(v2 + 472);
    AGSubgraphSetCurrent();

    v38 = AGGraphSetUpdate();
    *(_QWORD *)(v2 + 152) = v41;
    *(_QWORD *)v2 = *(_QWORD *)(v2 + 384);
    MEMORY[0x1E0C80A78](v38, v39);
    *(_QWORD *)(v2 + 160) = v40;
    v40[2] = v35;
    v40[3] = v37;
    v40[4] = v9;
    v40[5] = v36;
    *(_DWORD *)(v2 + 256) = *(_DWORD *)(v2 + 172);
    *(_QWORD *)(v2 + 384) = v35;
    *(_QWORD *)(v2 + 392) = v37;
    *(_QWORD *)(v2 + 400) = v9;
    *(_QWORD *)(v2 + 408) = v36;
    *(_QWORD *)(v2 + 416) = v7;
    *(_QWORD *)(v2 + 424) = v6;
    type metadata accessor for _ScrollableLayoutView();
  }
  __break(1u);
  JUMPOUT(0x187026AD4);
}

void type metadata accessor for ScrollableLayoutState()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t closure #1 in static _ScrollableLayoutView._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v12 = *(_OWORD *)(v1 + 48);
  v13 = *(_OWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  v6 = *(_BYTE *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 81);
  v8 = *(_QWORD *)(v1 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = v3;
  *(_OWORD *)(v9 + 32) = v13;
  *(_OWORD *)(v9 + 48) = v12;
  *(_QWORD *)(v9 + 64) = v5;
  *(_QWORD *)(v9 + 72) = v4;
  *(_BYTE *)(v9 + 80) = v6;
  *(_BYTE *)(v9 + 81) = v7;
  *(_QWORD *)(v9 + 88) = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x1E0CE13D0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<Transaction>, MEMORY[0x1E0CE13D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<Transaction> and conformance External<A>, &lazy cache variable for type metadata for External<Transaction>, v10);
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transaction.setter();
  _ViewInputs.viewPhase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TemplateViewPhase and conformance TemplateViewPhase();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.viewPhase.setter();
  PreferenceKeys.init()();
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  _GraphValue.init(_:)();
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #2 in static _ScrollableLayoutView._makeView(view:inputs:)()
{
  type metadata accessor for _ScrollableLayoutView();
}

uint64_t sub_187026E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t TupleTypeMetadata2;
  uint64_t v7;

  v5[2] = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, TupleTypeMetadata2, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void closure #3 in static _ScrollableLayoutView._makeView(view:inputs:)()
{
  type metadata accessor for _ScrollableLayoutView();
}

uint64_t sub_187026F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = v2 + *(int *)(a1 + 68);
  v7[2] = a1;
  v8 = v1;
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v9;
}

void ScrollableLayoutState.init(data:layout:scrollView:template:state:stateSeed:proxyStorage:identifiers:placements:validSize:validRect:contentSize:)(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_DWORD *)a5 = a1;
  *(_DWORD *)(a5 + 4) = a2;
  *(_DWORD *)(a5 + 8) = a3;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)a4;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a5 + 40) = *(_QWORD *)(a4 + 24);
  type metadata accessor for ScrollableLayoutState();
}

uint64_t sub_187027030(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v16 = v2 + a1[20];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v16, v5, AssociatedTypeWitness);
  *(_DWORD *)(v2 + a1[21]) = v4;
  v19 = v2 + a1[22];
  *(_DWORD *)v19 = v3;
  *(_QWORD *)(v19 + 8) = v23;
  *(_QWORD *)(v2 + a1[23]) = v1;
  *(_QWORD *)(v2 + a1[24]) = v6;
  v20 = (_QWORD *)(v2 + a1[25]);
  *v20 = v14;
  v20[1] = v13;
  v21 = (_QWORD *)(v2 + a1[26]);
  *v21 = v12;
  v21[1] = v11;
  v21[2] = v10;
  v21[3] = v9;
  v22 = (_QWORD *)(v2 + a1[27]);
  *v22 = v8;
  v22[1] = v7;
  return result;
}

uint64_t default argument 3 of ScrollableLayoutViewAdaptor.init(dataAndCount:layout:state:items:itemsSeed:lastContentOffset:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  return Array.init()();
}

void closure #4 in static _ScrollableLayoutView._makeView(view:inputs:)()
{
  type metadata accessor for ScrollableLayoutState.Value();
}

uint64_t sub_1870271B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[16];

  v2 = v1 + *(int *)(a1 + 92);
  v8[2] = a1;
  type metadata accessor for CGSize(0);
  v4 = v3;
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3, (uint64_t)v8, v4, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[4];
}

void protocol witness for static View._makeView(view:inputs:) in conformance _ScrollableLayoutView<A, B>(uint64_t *a1@<X2>, uint64_t a2@<X8>)
{
  static _ScrollableLayoutView._makeView(view:inputs:)(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ScrollableLayoutView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ScrollableLayoutView<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _ScrollableLayoutView<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ScrollableLayoutView<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t _ScrollableLayoutView.scrollableContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t _ScrollableLayoutView.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for _ScrollableContentProvider.decelerationTarget(contentOffset:originalContentOffset:velocity:size:) in conformance _ScrollableLayoutView<A, B>(uint64_t a1)
{
  return _ScrollableLayoutView.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(a1);
}

uint64_t ScrollableLayoutViewAdaptor.dataAndCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v5);
  v7 = (char *)&v13 - v6;
  Value = AGGraphGetValue();
  v9 = *(int *)(TupleTypeMetadata2 + 48);
  v10 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v7, Value, v3);
  v11 = *(_QWORD *)(Value + v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v7, v3);
  return v11;
}

void ScrollableLayoutViewAdaptor.updatedItems()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[35];
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a1[4];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  v4 = a1[2];
  swift_getAssociatedTypeWitness();
  v23[30] = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v23[26] = (char *)v23 - v7;
  v23[28] = AssociatedTypeWitness;
  v23[25] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v23[24] = (char *)v23 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v23[23] = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v23[2] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v23[32] = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v20 = a1[5];
  v21 = a1[6];
  v23[3] = a1;
  v22 = a1[7];
  v23[34] = v4;
  v25 = v4;
  v26 = v19;
  v23[9] = v19;
  v23[6] = v2;
  v27 = v2;
  v28 = v20;
  v23[12] = v20;
  v23[5] = v21;
  v29 = v21;
  v30 = v22;
  v23[4] = v22;
  type metadata accessor for ScrollableLayoutState.Value();
}

void closure #1 in ScrollableLayoutViewAdaptor.updatedItems()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Pair();
  v10 = *(_QWORD *)(a9 + 8);
  v11[0] = MEMORY[0x1E0DEE118];
  v11[1] = v10;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6A90], v9, v11);
  type metadata accessor for AnyViewVisitor();
}

void sub_18702805C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;

  v9[3] = a1;
  *v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9[2] = (char *)&a9 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v13 - 72) = AssociatedTypeWitness;
  *(_QWORD *)(v13 - 240) = AssociatedTypeWitness;
  *(_QWORD *)(v13 - 232) = v10;
  *(_QWORD *)(v13 - 224) = v11;
  *(_QWORD *)(v13 - 216) = v12;
  v9[35] = v12;
  type metadata accessor for EquatableProxyView();
}

void sub_1870280CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9[23] = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9[22] = (char *)&a9 - v15;
  v16 = v9[52];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[24] = a1;
  v18 = AssociatedTypeWitness;
  v9[48] = AssociatedTypeWitness;
  v19 = type metadata accessor for ModifiedContent();
  v9[20] = *(_QWORD *)(v19 - 8);
  v9[21] = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v9[19] = (char *)&a9 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v9[11] = *(_QWORD *)(v22 - 8);
  v9[12] = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v9[9] = (char *)&a9 - v24;
  v9[10] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v9[8] = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[18] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v9[17] = (char *)&a9 - v30;
  v9[14] = v12;
  *(_QWORD *)(v13 - 240) = v12;
  *(_QWORD *)(v13 - 232) = v11;
  v9[41] = v11;
  *(_QWORD *)(v13 - 224) = v9[46];
  *(_QWORD *)(v13 - 216) = v16;
  *(_QWORD *)(v13 - 208) = v9[54];
  *(_QWORD *)(v13 - 200) = v10;
  v9[45] = v10;
  type metadata accessor for ScrollableLayoutState.Value();
}

void sub_187028250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  void (*v45)(_BYTE *, double);
  void (*v46)(_BYTE *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  char v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  char v73;
  uint64_t v74;
  char v75;
  __int128 v76;
  __int128 v77;
  void (*v78)(uint64_t, _BYTE *, uint64_t);
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[112];

  *(_QWORD *)(v1 + 264) = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v1 + 408) = TupleTypeMetadata2;
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v5);
  *(_QWORD *)(v1 + 56) = &v90[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v1 + 48) = &v90[-v9];
  MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v1 + 352) = &v90[-v12];
  *(_QWORD *)(v1 + 392) = v2;
  *(_QWORD *)(v1 + 272) = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v1 + 8) = &v90[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v1 + 424) = &v90[-v18];
  v19 = *(_QWORD *)(v1 + 448);
  v20 = *(_QWORD *)(v3 - 72);
  v21 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = &v90[-v23];
  v25 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  *(_QWORD *)(v1 + 40) = &v90[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v29, v30);
  *(_QWORD *)(v1 + 440) = &v90[-v31];
  v32 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  *(_QWORD *)(v1 + 240) = &v90[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = MEMORY[0x1E0C80A78](v36, v37);
  v40 = &v90[-v39];
  v42 = *(int *)(v41 + 48);
  v43 = &v24[v42];
  v44 = *(_QWORD *)(v1 + 320) + v42;
  v45 = *(void (**)(_BYTE *, double))(v32 + 16);
  *(_QWORD *)(v1 + 336) = v45;
  v45(v24, v38);
  v46 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v25 + 16);
  v47 = v44;
  v48 = *(_QWORD *)(v3 - 72);
  *(_QWORD *)(v1 + 32) = v46;
  v46(v43, v47, v48);
  *(_QWORD *)(v1 + 208) = v32;
  v49 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32);
  *(_QWORD *)(v1 + 288) = v49;
  v49(v40, v24, v19);
  *(_QWORD *)(v1 + 216) = v25;
  v50 = *(_QWORD *)(v1 + 400);
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(v25 + 32))(*(_QWORD *)(v1 + 440), v43, v48);
  v51 = *(int *)(*(_QWORD *)(v1 + 408) + 48);
  v52 = *(_QWORD *)(v1 + 264);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
  v55 = *(_QWORD *)(v1 + 352);
  *(_QWORD *)(v1 + 304) = v54;
  v54(v55, v50, v52);
  v56 = *(_BYTE *)(v50 + v51);
  *(_QWORD *)(v1 + 320) = v51;
  *(_BYTE *)(v55 + v51) = v56;
  v57 = v52;
  LODWORD(v52) = *(_DWORD *)(v55 + *(int *)(v52 + 72));
  v58 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
  v59 = v40;
  v60 = *(_QWORD *)(v1 + 424);
  *(_QWORD *)(v1 + 312) = v58;
  v58(v55, v57);
  *(_DWORD *)(v3 - 240) = v52;
  v61 = *(_QWORD *)(v1 + 240);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 336))(v61, v59, v19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEE0F8] - 8) + 32))(v60, v3 - 240);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 288);
  v63 = type metadata accessor for Pair();
  v62(v60 + *(int *)(v63 + 36), v61, v19);
  v64 = *(_QWORD *)(v1 + 384) == MEMORY[0x1E0CE1E98];
  *(_QWORD *)(v1 + 200) = v59;
  if (!v64)
  {
    v65 = *(_QWORD *)(v1 + 448);
    v66 = *(_QWORD *)(v1 + 360);
    _convertToAnyHashable<A>(_:)();
    v67 = *(_QWORD *)(v1 + 400);
    v68 = *(int *)(*(_QWORD *)(v1 + 408) + 48);
    v69 = v59;
    v70 = *(_QWORD *)(v1 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 304))(v70, v67, v57);
    *(_BYTE *)(v70 + v68) = *(_BYTE *)(v67 + *(_QWORD *)(v1 + 320));
    v71 = *(_QWORD *)(v70 + *(int *)(v57 + 84));
    swift_bridgeObjectRetain();
    (*(void (**)(uint64_t, uint64_t))(v1 + 312))(v70, v57);
    MEMORY[0x18D75CA24](v69, v71, v65, MEMORY[0x1E0CE0E28], v66);
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v3 - 176) & 1) != 0)
    {
      static UnitPoint.topLeading.getter();
      v72 = (uint64_t *)(v1 + 472);
      _Placement.init(proposedSize:anchoring:at:)();
      v73 = *(_BYTE *)(v1 + 480);
      v74 = *(_QWORD *)(v1 + 488);
      v75 = *(_BYTE *)(v1 + 496);
      v76 = *(_OWORD *)(v1 + 504);
      v77 = *(_OWORD *)(v1 + 520);
    }
    else
    {
      v76 = *(_OWORD *)(v3 - 208);
      v77 = *(_OWORD *)(v3 - 192);
      v74 = *(_QWORD *)(v3 - 224);
      v73 = *(_BYTE *)(v3 - 232) & 1;
      v75 = *(_BYTE *)(v3 - 216) & 1;
      v72 = (uint64_t *)(v3 - 240);
    }
    v85 = (_OWORD *)(v3 - 240);
    v86 = *v72;
    v87 = *(_OWORD *)(v1 + 584);
    *v85 = *(_OWORD *)(v1 + 568);
    v85[1] = v87;
    *(_QWORD *)(v3 - 208) = *(_QWORD *)(v1 + 600);
    *(_QWORD *)(v3 - 200) = v86;
    *(_BYTE *)(v3 - 192) = v73;
    *(_QWORD *)(v3 - 184) = v74;
    *(_BYTE *)(v3 - 176) = v75;
    *(_OWORD *)((char *)v85 + 72) = v76;
    *(_OWORD *)((char *)v85 + 88) = v77;
    v88 = *(_QWORD *)(v1 + 328);
    *(_QWORD *)(v1 + 472) = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 480) = v88;
    v89 = *(_QWORD *)(v1 + 416);
    *(_QWORD *)(v1 + 488) = *(_QWORD *)(v1 + 368);
    *(_QWORD *)(v1 + 496) = v89;
    *(_QWORD *)(v1 + 504) = *(_QWORD *)(v1 + 432);
    *(_QWORD *)(v1 + 512) = v66;
    type metadata accessor for ScrollableLayoutViewAdaptor();
  }
  v78 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v1 + 336);
  v79 = *(_QWORD *)(v3 - 72);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v1 + 32))(*(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 440), v79);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v80 = v59;
    v81 = *(_QWORD *)(v1 + 448);
    v78(v61, v80, v81);
    v82 = v60;
    v83 = *(_QWORD *)(v1 + 392);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 + 272) + 16))(*(_QWORD *)(v1 + 8), v82, v83);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v1 + 288))(*(_QWORD *)(v1 + 16), v61, v81);
    *(_QWORD *)(v3 - 240) = v81;
    *(_QWORD *)(v3 - 232) = v83;
    v84 = *(_QWORD *)(v1 + 280);
    *(_QWORD *)(v3 - 224) = *(_QWORD *)(v1 + 360);
    *(_QWORD *)(v3 - 216) = v84;
    type metadata accessor for AnyViewVisitor();
  }
  View.equatableProxy<A>(_:)(v60, v79, *(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 176));
}

void sub_187028B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;

  v7 = v5;
  v8 = v4;
  v9 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 448);
  specialized AnyDynamicItem.init<A, B>(_:id:)(v6, v7, v9, v10, (uint64_t)&protocol witness table for EquatableProxyView<A, B>);
  *(_QWORD *)(v0 + 432) = v11;
  v13 = v12;
  *(_DWORD *)(v0 + 416) = v14;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 184) + 8))(v6, v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 8))(v8, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 216) + 8))(v1, v2);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 200), v10);
  v15 = *(_QWORD **)(v0 + 224);
  *v15 = *(_QWORD *)(v0 + 432);
  v15[1] = v13;
  JUMPOUT(0x187028C38);
}

void ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)()
{
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for ScrollableItemIdentifier();
}

void sub_187028DF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = a1;
  *(_QWORD *)(v1 + 328) = a1;
  *(_QWORD *)(v1 + 336) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableItemIdentifier<A, B>, a1);
  v6 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 344, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, v1 + 304, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v4 - 208);
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(*(_QWORD *)(v1 + 32) + 8);
  *(_QWORD *)(v4 - 208) = v3;
  v8 = *(_DWORD *)(v1 + 136);
  v9 = *(_DWORD *)(v1 + 140);
  *(_DWORD *)(v4 - 200) = v9;
  *(_QWORD *)(v4 - 192) = *(_QWORD *)(v1 + 224);
  v10 = *(_DWORD *)(v1 + 128);
  LODWORD(v5) = *(_DWORD *)(v1 + 132);
  *(_DWORD *)(v4 - 184) = v8;
  *(_DWORD *)(v4 - 180) = v5;
  v11 = *(_DWORD *)(v1 + 156);
  *(_DWORD *)(v4 - 176) = v10;
  *(_DWORD *)(v4 - 172) = v11;
  *(_QWORD *)(v4 - 168) = v2;
  v12 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v4 - 160) = v12;
  v13 = *(_DWORD *)(v1 + 120);
  v14 = *(_DWORD *)(v1 + 124);
  *(_DWORD *)(v4 - 152) = v14;
  *(_DWORD *)(v4 - 148) = v13;
  v15 = *(_DWORD *)(v1 + 168);
  *(_DWORD *)(v4 - 144) = *(_DWORD *)(v1 + 172);
  *(_DWORD *)(v4 - 140) = v15;
  v16 = *(_DWORD *)(v1 + 160);
  *(_DWORD *)(v4 - 136) = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v4 - 132) = v16;
  *(_DWORD *)(v4 - 128) = *(_DWORD *)(v1 + 236);
  *(_DWORD *)(v1 + 8) = _ViewInputs.position.getter();
  *(_QWORD *)(v4 - 208) = *(_QWORD *)(v1 + 104);
  *(_DWORD *)(v4 - 200) = v9;
  *(_QWORD *)(v4 - 192) = *(_QWORD *)(v1 + 224);
  *(_DWORD *)(v4 - 184) = v8;
  *(_DWORD *)(v4 - 180) = v5;
  *(_DWORD *)(v4 - 176) = v10;
  *(_DWORD *)(v4 - 172) = v11;
  *(_QWORD *)(v4 - 168) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v4 - 160) = v12;
  *(_DWORD *)(v4 - 152) = v14;
  *(_DWORD *)(v4 - 148) = v13;
  v17 = *(_DWORD *)(v1 + 168);
  *(_DWORD *)(v4 - 144) = *(_DWORD *)(v1 + 172);
  *(_DWORD *)(v4 - 140) = v17;
  v18 = *(_DWORD *)(v1 + 160);
  *(_DWORD *)(v4 - 136) = *(_DWORD *)(v1 + 164);
  *(_DWORD *)(v4 - 132) = v18;
  *(_DWORD *)(v4 - 128) = *(_DWORD *)(v1 + 236);
  v19 = _ViewInputs.size.getter();
  v20 = *MEMORY[0x1E0CFED28];
  *(_DWORD *)(v1 + 344) = *(_DWORD *)(v1 + 12);
  v21 = *(_DWORD *)(v1 + 28);
  *(_DWORD *)(v1 + 348) = *(_DWORD *)(v1 + 32);
  *(_DWORD *)(v1 + 352) = v21;
  *(_DWORD *)(v1 + 356) = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 360) = v19;
  *(_DWORD *)(v1 + 364) = v20;
  v22 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v4 - 208) = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v4 - 200) = v22;
  v23 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v4 - 192) = *(_QWORD *)(v1 + 216);
  *(_QWORD *)(v4 - 184) = v23;
  v24 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v4 - 176) = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v4 - 168) = v24;
  type metadata accessor for ScrollableItemGeometry();
}

uint64_t sub_187028F70(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v1 + 288) = a1;
  *(_QWORD *)(v1 + 296) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableItemGeometry<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, MEMORY[0x1E0CE19C0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  *(_QWORD *)(v1 + 32) = a1;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 344, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, v1 + 272, a1, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  v10 = *(unsigned int *)(v6 - 208);
  v11 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v6 - 208) = *(_QWORD *)(v1 + 104);
  *(_DWORD *)(v6 - 200) = *(_DWORD *)(v1 + 140);
  *(_QWORD *)(v6 - 192) = *(_QWORD *)(v1 + 224);
  v12 = *(_DWORD *)(v1 + 132);
  *(_DWORD *)(v6 - 184) = *(_DWORD *)(v1 + 136);
  *(_DWORD *)(v6 - 180) = v12;
  v13 = *(_DWORD *)(v1 + 156);
  *(_DWORD *)(v6 - 176) = *(_DWORD *)(v1 + 128);
  *(_DWORD *)(v6 - 172) = v13;
  v14 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v6 - 168) = v11;
  *(_QWORD *)(v6 - 160) = v14;
  v15 = *(_DWORD *)(v1 + 120);
  *(_DWORD *)(v6 - 152) = *(_DWORD *)(v1 + 124);
  *(_DWORD *)(v6 - 148) = v15;
  *(_DWORD *)(v6 - 144) = v2;
  *(_DWORD *)(v6 - 140) = v3;
  *(_DWORD *)(v6 - 136) = v4;
  *(_DWORD *)(v6 - 132) = v5;
  *(_DWORD *)(v6 - 128) = *(_DWORD *)(v1 + 236);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t))(v1 + 48))(v6 - 208);
  if ((v13 & 0x20) != 0)
  {
    Attribute<A>.size()();
    _ViewInputs.size.setter();
    Attribute<A>.origin()();
    _ViewInputs.position.setter();
    v16 = *(_DWORD *)(v6 - 172) | 2;
    *(_DWORD *)(v6 - 172) = v16;
  }
  else
  {
    v16 = *(_DWORD *)(v6 - 172);
  }
  v17 = v10;
  v18 = *(_DWORD *)(v6 - 200);
  v19 = *(_QWORD *)(v6 - 192);
  v20 = *(_DWORD *)(v6 - 176);
  v21 = *(_QWORD *)(v6 - 168);
  v22 = *(_QWORD *)(v6 - 160);
  v23 = *(_DWORD *)(v6 - 128);
  *(_QWORD *)(v1 + 344) = *(_QWORD *)(v6 - 208);
  *(_DWORD *)(v1 + 352) = v18;
  *(_QWORD *)(v1 + 360) = v19;
  *(_QWORD *)(v1 + 368) = *(_QWORD *)(v6 - 184);
  *(_DWORD *)(v1 + 376) = v20;
  *(_DWORD *)(v1 + 380) = v16;
  *(_QWORD *)(v1 + 384) = v21;
  *(_QWORD *)(v1 + 392) = v22;
  *(_OWORD *)(v1 + 400) = *(_OWORD *)(v1 + 488);
  *(_QWORD *)(v1 + 416) = *(_QWORD *)(v6 - 136);
  *(_DWORD *)(v1 + 424) = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = *(_QWORD *)(v1 + 56);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableLayoutViewAdaptor<A, B>, v24);
  AnyDynamicItem.makeView<A>(uniqueId:container:inputs:adaptor:)(*(unsigned int *)(v1 + 68), *(unsigned int *)(v1 + 84), (uint64_t *)(v1 + 344), v24, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 88), *(_DWORD *)(v1 + 64) & 1, v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v26 = swift_release();
  v27 = *(_QWORD *)(v1 + 248);
  LODWORD(v21) = *(_DWORD *)(v1 + 256);
  LODWORD(v22) = *(_DWORD *)(v1 + 260);
  MEMORY[0x1E0C80A78](v26, v28);
  MEMORY[0x1E0C80A78](v29, v30);
  AGGraphMutateAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v31 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)v31 = v27;
  *(_DWORD *)(v31 + 8) = v21;
  *(_DWORD *)(v31 + 12) = v22;
  return v17;
}

void closure #1 in ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)()
{
  _ViewOutputs.layoutComputer.getter();
  type metadata accessor for ScrollableItemGeometry();
}

void sub_1870292F8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  if ((v0 & 0x100000000) != 0)
    v2 = *MEMORY[0x1E0CFED28];
  else
    v2 = v0;
  *(_DWORD *)(v1 + 20) = v2;
}

uint64_t protocol witness for static DynamicContainerAdaptor.maxUnusedItems.getter in conformance ScrollableLayoutViewAdaptor<A, B>()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

void protocol witness for DynamicContainerAdaptor.updatedItems() in conformance ScrollableLayoutViewAdaptor<A, B>(_QWORD *a1)
{
  ScrollableLayoutViewAdaptor.updatedItems()(a1);
}

uint64_t protocol witness for DynamicContainerAdaptor.foreachItem(items:_:) in conformance ScrollableLayoutViewAdaptor<A, B>(uint64_t *a1, void (*a2)(_QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4)
    return swift_bridgeObjectRelease();
  for (i = 0; ; ++i)
  {
    v6 = specialized Array.subscript.read((uint64_t (*)())v14, i, v3);
    v8 = *v7;
    v9 = v7[1];
    v10 = *((_BYTE *)v7 + 16);
    v11 = v7[3];
    swift_retain();
    result = ((uint64_t (*)(_QWORD *, _QWORD))v6)(v14, 0);
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14[0] = v8;
    v14[1] = v9;
    v15 = v10;
    v16 = v11;
    a2(v14);
    swift_release();
    if (v13 == *(_QWORD *)(v3 + 16))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static DynamicContainerAdaptor.containsItem(_:_:) in conformance ScrollableLayoutViewAdaptor<A, B>()
{
  uint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AnyDynamicItem], (uint64_t)&type metadata for AnyDynamicItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v0);
  return static DynamicContainerAdaptor<>.containsItem(_:_:)();
}

void ScrollableLayoutState.Value.init(state:stateSeed:contentSeed:scrollLayout:identifiers:placements:validRect:contentSize:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  type metadata accessor for ScrollableLayoutState.Value();
}

__n128 sub_1870295A0(int *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  _QWORD *v14;
  _QWORD *v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)(v1 + a1[17]) = v3;
  *(_DWORD *)(v1 + a1[18]) = v2;
  v12 = v1 + a1[19];
  *(_OWORD *)v12 = v20;
  *(_OWORD *)(v12 + 16) = v19;
  *(_OWORD *)(v12 + 32) = v18;
  *(_OWORD *)(v12 + 48) = v17;
  result = v16;
  *(__n128 *)(v12 + 64) = v16;
  *(_QWORD *)(v12 + 80) = v10;
  *(_QWORD *)(v12 + 88) = v11;
  *(_QWORD *)(v1 + a1[20]) = v21;
  *(_QWORD *)(v1 + a1[21]) = v22;
  v14 = (_QWORD *)(v1 + a1[22]);
  *v14 = v9;
  v14[1] = v8;
  v14[2] = v7;
  v14[3] = v6;
  v15 = (_QWORD *)(v1 + a1[23]);
  *v15 = v5;
  v15[1] = v4;
  return result;
}

void protocol witness for DynamicContainerAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:) in conformance ScrollableLayoutViewAdaptor<A, B>()
{
  ScrollableLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)();
}

uint64_t sub_187029698(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

void ScrollableLayoutState.updateValue()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[106];

  v11[104] = *MEMORY[0x1E0C80C00];
  v2 = a1[5];
  v3 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[23] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11[24] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v5);
  v11[25] = (char *)v11 - v6;
  v7 = a1[2];
  v8 = a1[4];
  v9 = a1[6];
  v10 = a1[7];
  v11[36] = a1;
  v11[84] = v7;
  v11[85] = v3;
  v11[47] = v10;
  v11[48] = v3;
  v11[86] = v8;
  v11[41] = v2;
  v11[87] = v2;
  v11[39] = v9;
  v11[88] = v9;
  v11[89] = v10;
  type metadata accessor for ScrollableLayoutState.Value();
}

uint64_t sub_18702A39C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = v3;
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ScrollableLayoutState<A, B>, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v2[27];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)_s14AttributeGraph12StatefulRulePAAE5value5ValueQzvsySPyAFGXEfU_TA_0, (uint64_t)&v10, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v8);
  (*(void (**)(uint64_t, uint64_t))(v2[26] + 8))(v4, v7);
  (*(void (**)(_QWORD, uint64_t))(v2[29] + 8))(v2[30], v5);
  return (*(uint64_t (**)(_QWORD, _QWORD))(v2[21] + 8))(v2[38], v2[22]);
}

uint64_t closure #1 in ScrollableLayoutState.updateValue()()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v2);
  v4 = (char *)&v6 - v3;
  dispatch thunk of Collection.startIndex.getter();
  Collection.formIndex(_:offsetBy:)();
  _convertToAnyHashable<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
}

void closure #2 in ScrollableLayoutState.updateValue()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11)
{
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(_QWORD *, _QWORD);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;

  v37 = a8;
  v33 = a6;
  v12 = a5;
  v30 = a4;
  v29 = a3;
  v13 = a2;
  v36 = a11;
  v35 = a10;
  v34 = a9;
  v27 = HIDWORD(a2);
  v28 = HIDWORD(a5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16 = (char *)&v27 - v15;
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v27 - v24;
  AnyHashable.base.getter();
  swift_dynamicCast();
  v49 = v13;
  v50 = v27;
  v51 = v29;
  v52 = v30;
  v53 = v12;
  v54 = v28;
  _ProposedSize.init(_:)();
  v41 = v45;
  v42 = v46;
  v43 = v47;
  v44 = v48;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v26 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v31 + 16))(v16);
  v26(v38, 0);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v38[0] = a7;
  v38[1] = v37;
  v38[2] = v34;
  v39 = v35;
  v40 = v36;
  type metadata accessor for ScrollableLayoutState.TemplateView();
}

void sub_18702A81C()
{
  ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)();
}

double sub_18702A830(double a1)
{
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
  v1(v5, v3);
  return a1;
}

void ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;

  v1 = *v0;
  v2 = (void *)v0[1];
  AGGraphClearUpdate();
  closure #1 in ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)(v1, v2);
}

double sub_18702A914()
{
  double v1;

  AGGraphSetUpdate();
  return v1;
}

void closure #1 in ScrollableLayoutState.TemplateView.sizeThatFits(_:content:)(uint64_t a1, void *a2)
{
  if (*(_DWORD *)AGGraphGetValue() != -1)
  {
    a2;
    swift_bridgeObjectRetain();
    AGGraphSetValue();
    type metadata accessor for ScrollableLayoutState.TemplateView();
  }
  __break(1u);
  JUMPOUT(0x18702AB6CLL);
}

uint64_t ScrollableItemIdentifier.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;

  Value = AGGraphGetValue();
  v3 = *(_QWORD *)(Value + 8);
  v4 = *(_QWORD *)(Value + 32);
  v5 = *(_BYTE *)(Value + 40);
  v6 = *(_DWORD *)(Value + 44);
  *(_QWORD *)a1 = *(_QWORD *)Value;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(Value + 16);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void protocol witness for static StatefulRule.initialValue.getter in conformance ScrollableLayoutState<A, B>()
{
  type metadata accessor for ScrollableLayoutState.Value();
}

uint64_t sub_18702AC10(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

uint64_t ScrollableItemIdentifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  _QWORD v11[2];

  v2 = HIDWORD(a1);
  ScrollableItemIdentifier.info.getter((uint64_t)v11);
  v4 = v11[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(v2), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    swift_bridgeObjectRelease();
    ScrollableItemIdentifier.info.getter((uint64_t)v11);
    v8 = v11[0];
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v8 & 0xC000000000000001) != 0)
    {
      MEMORY[0x18D75E3BC](v7, v8);
LABEL_7:
      swift_bridgeObjectRelease();
      type metadata accessor for ScrollableLayoutViewAdaptor();
    }
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v7 < *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  return result;
}

uint64_t ScrollableItemGeometry.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, Value, v2);
}

void ScrollableItemGeometry.state.getter()
{
  type metadata accessor for ScrollableLayoutState.Value();
}

uint64_t sub_18702AF58(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ScrollableItemIdentifier<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollableItemIdentifier<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return ScrollableItemIdentifier.value.getter(*v1, a1);
}

void ScrollableItemGeometry.value.getter()
{
  type metadata accessor for ScrollableLayoutState.Value();
}

uint64_t sub_18702B090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE v25[112];

  *(_QWORD *)(v8 - 312) = a1;
  *(_QWORD *)(v8 - 352) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 320) = &v25[-v9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  *(_QWORD *)(v8 - 408) = v11;
  *(_QWORD *)(v8 - 416) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v25[-v13];
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v25[-v18];
  *(_QWORD *)(v8 - 368) = v5;
  *(_QWORD *)(v8 - 360) = v7;
  *(_QWORD *)(v8 - 400) = v4;
  *(_QWORD *)(v8 - 392) = v6;
  *(_QWORD *)(v8 - 384) = v3;
  *(_QWORD *)(v8 - 376) = v2;
  ScrollableItemGeometry.identifier.getter((uint64_t)v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v19, v14, AssociatedTypeWitness);
    ScrollableItemGeometry.state.getter();
  }
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v8 - 416) + 8))(v14, *(_QWORD *)(v8 - 408));
  static LayoutComputer.defaultValue.getter();
  v20 = *(_QWORD *)(v8 - 288);
  v21 = *(_QWORD *)(v8 - 280);
  static ViewSize.zero.getter();
  v22 = *(_OWORD *)(v8 - 208);
  v23 = *(_OWORD *)(v8 - 192);
  *(_QWORD *)(v8 - 208) = v20;
  *(_QWORD *)(v8 - 200) = v21;
  *(_OWORD *)(v8 - 192) = v22;
  *(_OWORD *)(v8 - 176) = v23;
  return ViewGeometry.init(dimensions:)();
}

void protocol witness for Rule.value.getter in conformance ScrollableItemGeometry<A, B>()
{
  ScrollableItemGeometry.value.getter();
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance ScrollableItemLayoutComputer()
{
  type metadata accessor for CGSize(0);
  AGGraphGetValue();
  lazy protocol witness table accessor for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine();
  return StatefulRule<>.update<A>(to:)();
}

_DWORD *protocol witness for Rule.value.getter in conformance TemplateViewPhase@<X0>(_DWORD *a1@<X8>)
{
  int v2;
  _DWORD *result;

  v2 = *(_DWORD *)AGGraphGetValue();
  result = (_DWORD *)AGGraphGetValue();
  *a1 = v2 + 2 * *result;
  return result;
}

void AnyViewVisitor.visit<A>(_:)()
{
  type metadata accessor for EquatableProxyView();
}

void sub_18702B678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  View.equatableProxy<A>(_:)(v9 + *(int *)(v11 + 52), v12, v13, v10, v14, (uint64_t)&a9 - v15);
}

uint64_t sub_18702B6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  uint64_t v12;
  double *v13;
  uint64_t result;

  v5 = specialized AnyDynamicItem.init<A, B>(_:id:)(v3, v0, v2, *(_QWORD *)(v1 + 16), (uint64_t)&protocol witness table for EquatableProxyView<A, B>);
  v7 = v6;
  v9 = v8;
  v10 = v5;
  v12 = v11 & 1;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  v13 = (double *)(v0 + *(int *)(v1 + 56));
  result = swift_release();
  *(_QWORD *)v13 = v7;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = v12;
  v13[3] = v10;
  return result;
}

void protocol witness for ViewVisitor.visit<A>(_:) in conformance AnyViewVisitor<A, B>()
{
  AnyViewVisitor.visit<A>(_:)();
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v11[42];

  v3 = *(char **)(a3 + 16);
  v4 = *((_QWORD *)v3 + 2);
  if (v4)
  {
    v7 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_12;
    while (1)
    {
      v8 = 0;
      *(_QWORD *)(a3 + 16) = v3;
      for (i = 32; ; i += 336)
      {
        v3 = *(char **)(a3 + 16);
        if (v8 >= *((_QWORD *)v3 + 2))
          break;
        outlined init with copy of PlatformItem((uint64_t)&v3[i], (uint64_t)v11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v11[40] = v7;
        v11[41] = a2;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a3 + 16) = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
          *(_QWORD *)(a3 + 16) = v3;
        }
        if (v8 >= *((_QWORD *)v3 + 2))
          goto LABEL_11;
        ++v8;
        outlined assign with copy of PlatformItem((uint64_t)v11, (uint64_t)&v3[i]);
        result = outlined destroy of PlatformItem((uint64_t)v11);
        if (v4 == v8)
          return result;
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    }
  }
  return result;
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v12[240];
  _BYTE v13[104];

  v2 = *(char **)(a2 + 16);
  v3 = *((_QWORD *)v2 + 2);
  if (v3)
  {
    v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_12;
    while (1)
    {
      v6 = 0;
      *(_QWORD *)(a2 + 16) = v2;
      v2 = v13;
      v7 = 32;
      v8 = MEMORY[0x1E0DEB940];
      while (1)
      {
        v9 = *(_QWORD *)(a2 + 16);
        if (v6 >= *(_QWORD *)(v9 + 16))
          break;
        outlined init with copy of PlatformItem(v9 + v7, (uint64_t)v12);
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v13, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(_QWORD, uint64_t))v8);
        outlined init with copy of PlatformItem.SelectionContent(v5, (uint64_t)v13);
        v10 = *(char **)(a2 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a2 + 16) = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          *(_QWORD *)(a2 + 16) = v10;
        }
        if (v6 >= *((_QWORD *)v10 + 2))
          goto LABEL_11;
        ++v6;
        outlined assign with copy of PlatformItem((uint64_t)v12, (uint64_t)&v10[v7]);
        result = outlined destroy of PlatformItem((uint64_t)v12);
        v7 += 336;
        if (v3 == v6)
          return result;
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
    }
  }
  return result;
}

uint64_t specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t *v17;
  ValueMetadata *v18;
  uint64_t v19;
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _OWORD v23[2];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[40];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[240];
  _BYTE v35[16];
  uint64_t v36;
  _QWORD v37[10];

  v2 = *(char **)(a2 + 16);
  v3 = *((_QWORD *)v2 + 2);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_19;
    while (1)
    {
      v5 = 0;
      *(_QWORD *)(a2 + 16) = v2;
      v2 = v35;
      v6 = 32;
      v7 = MEMORY[0x1E0DEB940];
      while (1)
      {
        v8 = *(_QWORD *)(a2 + 16);
        if (v5 >= *(_QWORD *)(v8 + 16))
          break;
        outlined init with copy of PlatformItem(v8 + v6, (uint64_t)v34);
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)v35, (uint64_t)&v30, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(_QWORD, uint64_t))v7);
        v9 = v33;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v30, &lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(_QWORD, uint64_t))v7);
        if (v9 == 1)
        {
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
          Value = AGGraphGetValue();
          outlined init with copy of TableColumnList(Value, (uint64_t)v29);
          v11 = AGCreateWeakAttribute();
          v12 = v11;
          v13 = v3;
          v14 = HIDWORD(v11);
          v15 = AGCreateWeakAttribute();
          v24 = 0;
          memset(v23, 0, sizeof(v23));
          v32 = 0u;
          v33 = 0u;
          v31 = 0u;
          *(_QWORD *)&v30 = __PAIR64__(v14, v12);
          v3 = v13;
          *((_QWORD *)&v30 + 1) = v15;
          outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v23, (uint64_t)&v31 + 8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
          v25 = v30;
          *((_QWORD *)&v26 + 1) = *((_QWORD *)&v31 + 1);
          v27 = v32;
          v28 = v33;
          *(_QWORD *)&v26 = 8;
          outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v29, (uint64_t)&v26 + 8);
          v30 = v25;
          v31 = v26;
          v32 = v27;
          v33 = v28;
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v29, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, (uint64_t (*)(_QWORD, uint64_t))v7);
          v16 = v35;
          v17 = &lazy cache variable for type metadata for PlatformItem.SelectionContent?;
          v18 = &type metadata for PlatformItem.SelectionContent;
        }
        else
        {
          if (v37[3] == 1)
            goto LABEL_12;
          if ((v36 & 8) == 0)
            v36 |= 8uLL;
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
          v19 = AGGraphGetValue();
          outlined init with copy of TableColumnList(v19, (uint64_t)&v30);
          v16 = v37;
          v17 = &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?;
          v18 = &type metadata for PlatformItem.SelectionContent.AuxiliaryContent;
        }
        outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v30, (uint64_t)v16, v17, (uint64_t)v18);
LABEL_12:
        v20 = *(char **)(a2 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a2 + 16) = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v20 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v20);
          *(_QWORD *)(a2 + 16) = v20;
        }
        if (v5 >= *((_QWORD *)v20 + 2))
          goto LABEL_18;
        ++v5;
        outlined assign with copy of PlatformItem((uint64_t)v34, (uint64_t)&v20[v6]);
        result = outlined destroy of PlatformItem((uint64_t)v34);
        v6 += 336;
        if (v3 == v5)
          return result;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
    }
  }
  return result;
}

uint64_t specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  double v41;
  uint64_t v42;
  char v43;
  double v44;
  double v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[6];
  _QWORD v52[4];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[21];
  _BYTE v58[328];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;

  if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    return 0;
  v17 = *(_QWORD *)a4;
  v70 = *(_QWORD *)a4;
  v71 = *(_OWORD *)(a4 + 8);
  if ((static Edge.Set.vertical.getter() & a2) == 0)
    return 0;
  if ((a2 & 4) != 0)
  {
    if (*(double *)(a4 + 72) < *(double *)(a4 + 88))
      return 0;
    v56 = a6;
    v22 = *(_QWORD *)(a4 + 56);
    a6 = v22 + a5;
    if (!__OFADD__(v22, a5))
      goto LABEL_13;
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v56 = a6;
  v18 = (a5 + 1) * v17;
  if ((unsigned __int128)((a5 + 1) * (__int128)v17) >> 64 != v18 >> 63)
  {
    __break(1u);
    goto LABEL_42;
  }
  v19 = *(_QWORD *)(a4 + 48);
  a6 = v19 - v18;
  if (__OFSUB__(v19, v18))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((a6 & 0x8000000000000000) == 0 && *(double *)(a4 + 80) >= *(double *)(a4 + 64))
  {
LABEL_13:
    v68 = a6;
    v69 = MEMORY[0x1E0DEE9D8];
    v23 = *(_OWORD *)(a4 + 80);
    v64 = *(_OWORD *)(a4 + 64);
    v65 = v23;
    v24 = *(_OWORD *)(a4 + 112);
    v66 = *(_OWORD *)(a4 + 96);
    v67 = v24;
    v25 = *(_OWORD *)(a4 + 16);
    v60 = *(_OWORD *)a4;
    v61 = v25;
    v26 = *(_OWORD *)(a4 + 32);
    v27 = *(_OWORD *)(a4 + 48);
    v55 = 2 * v17;
    v62 = v26;
    v63 = v27;
    if (a5 < 1)
    {
      v33 = outlined retain of _IncrementalStack_State<LazyVStackLayout>(a4);
    }
    else
    {
      LODWORD(v17) = 0;
      outlined retain of _IncrementalStack_State<LazyVStackLayout>(a4);
      specialized IncrementalStack<>.placer(children:context:state:)(a3, (uint64_t)&v60, v56, a7, a8 & 0xFFFFFFFF00000001, (uint64_t)v57);
      if (*((_QWORD *)&v57[8] + 1))
      {
        memcpy(v58, v57, sizeof(v58));
        if ((a2 & 4) != 0)
        {
          v41 = *(double *)(a4 + 72);
          v42 = a6 - 1;
          a6 = v55;
          v43 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, *(_QWORD *)(a4 + 56), v42, 0, v41);
          v44 = *(double *)&v58[280];
          if ((AGGraphHasDeadlinePassed() & 1) == 0)
          {
            v8 = v44 - v41;
            if ((v43 & 1) != 0)
            {
              LODWORD(v17) = 1;
              goto LABEL_34;
            }
LABEL_30:
            v45 = *(double *)(a4 + 104) * 0.75;
            if (v45 < 0.0)
              goto LABEL_45;
            LODWORD(v17) = v8 >= v45 || v8 < 0.0;
LABEL_34:
            lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
              goto LABEL_39;
            if (one-time initialization token for log != -1)
              goto LABEL_46;
            while (1)
            {
              v46 = type metadata accessor for Logger();
              __swift_project_value_buffer(v46, (uint64_t)static Log.LazyLayoutPrefetch.log);
              v47 = Logger.logObject.getter();
              v48 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v47, v48))
              {
                v49 = swift_slowAlloc();
                v50 = swift_slowAlloc();
                *(_QWORD *)&v57[0] = v50;
                *(_DWORD *)v49 = 136446722;
                v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5BD0, (uint64_t *)v57);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v49 + 12) = 2048;
                v59 = *(_QWORD *)&v8;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v49 + 22) = 1024;
                LODWORD(v59) = v17;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_186E48000, v47, v48, "%{public}s prefetched length=%f, stop=%{BOOL}d", (uint8_t *)v49, 0x1Cu);
                swift_arrayDestroy();
                MEMORY[0x18D760108](v50, -1, -1);
                MEMORY[0x18D760108](v49, -1, -1);
              }

LABEL_39:
              v33 = outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v58);
              if ((_DWORD)v17)
                break;
LABEL_21:
              v17 = (uint64_t)&v54;
              MEMORY[0x1E0C80A78](v33, v34);
              v52[2] = &v69;
              v52[3] = &v70;
              v53 = 1;
              *(_QWORD *)&v57[0] = *(_QWORD *)(a1 + 104);
              v35 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v58);
              v59 = a6;
              MEMORY[0x1E0C80A78](v35, v36);
              a6 = (uint64_t)v51;
              v51[2] = a1;
              v51[3] = partial apply for specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:);
              v51[4] = v52;
              swift_bridgeObjectRetain();
              _ViewList_Node.applyNodes(from:style:transform:to:)();
              outlined destroy of _ViewList_Node((uint64_t)v58);
              swift_bridgeObjectRelease();
              a1 = v69;
              if (!*(_QWORD *)(v69 + 16))
              {
                v20 = 0;
                goto LABEL_25;
              }
              swift_bridgeObjectRetain();
              _ProposedSize.init(_:in:by:)();
              if (*(_QWORD *)(a1 + 16))
              {
                v37 = *(_QWORD *)v58;
                v38 = v58[8];
                v39 = *(_QWORD *)&v58[16];
                v40 = v58[24];
                outlined init with copy of _IncrementalLayout_Child(a1 + 32, (uint64_t)v58);
                *(_QWORD *)&v57[0] = v56;
                lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
                AlignmentGuide.fraction.getter();
                UnitPoint.init(_:in:by:)();
                LOBYTE(v57[0]) = v38;
                LOBYTE(v59) = v40;
                specialized closure #2 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)((uint64_t)v58, v37, v38, v39, v40);
                outlined destroy of _IncrementalLayout_Child((uint64_t)v58);
                swift_bridgeObjectRelease();
                v20 = 2 * (*(_QWORD *)(v69 + 16) != 0);
LABEL_25:
                *(_OWORD *)&v58[64] = v64;
                *(_OWORD *)&v58[80] = v65;
                *(_OWORD *)&v58[96] = v66;
                *(_OWORD *)&v58[112] = v67;
                *(_OWORD *)v58 = v60;
                *(_OWORD *)&v58[16] = v61;
                *(_OWORD *)&v58[32] = v62;
                *(_OWORD *)&v58[48] = v63;
                outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v58);
                swift_bridgeObjectRelease();
                return v20;
              }
LABEL_44:
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              swift_once();
            }
            v57[4] = v64;
            v57[5] = v65;
            v57[6] = v66;
            v57[7] = v67;
            v57[0] = v60;
            v57[1] = v61;
            v57[2] = v62;
            v57[3] = v63;
            outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v57);
            swift_bridgeObjectRelease();
            return 0;
          }
        }
        else
        {
          LOBYTE(v57[0]) = 0;
          v28 = a6 + 1;
          v29 = a6 + 1;
          a6 = v55;
          v30 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v29, *(_QWORD *)(a4 + 48), a1, v55, v57);
          specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v30, v28, 1, v57[0], 1, (double (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:), *(double *)(a4 + 64));
          swift_bridgeObjectRelease();
          v31 = *(double *)(a4 + 80);
          v32 = *(double *)&v58[112];
          if (!AGGraphHasDeadlinePassed())
          {
            v8 = v31 - v32;
            goto LABEL_30;
          }
        }
        outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v58);
        v57[4] = v64;
        v57[5] = v65;
        v57[6] = v66;
        v57[7] = v67;
        v57[0] = v60;
        v57[1] = v61;
        v57[2] = v62;
        v57[3] = v63;
        outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v57);
        swift_bridgeObjectRelease();
        return 1;
      }
      v33 = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)v57);
    }
    a6 = v55;
    goto LABEL_21;
  }
  return 0;
}

{
  double v8;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  double v41;
  uint64_t v42;
  char v43;
  double v44;
  double v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[6];
  _QWORD v52[4];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v57[21];
  _BYTE v58[328];
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;

  if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    return 0;
  v17 = *(_QWORD *)a4;
  v70 = *(_QWORD *)a4;
  v71 = *(_OWORD *)(a4 + 8);
  if ((static Edge.Set.horizontal.getter() & a2) == 0)
    return 0;
  if ((a2 & 8) != 0)
  {
    if (*(double *)(a4 + 72) < *(double *)(a4 + 88))
      return 0;
    v56 = a6;
    v22 = *(_QWORD *)(a4 + 56);
    a6 = v22 + a5;
    if (!__OFADD__(v22, a5))
      goto LABEL_13;
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v56 = a6;
  v18 = (a5 + 1) * v17;
  if ((unsigned __int128)((a5 + 1) * (__int128)v17) >> 64 != v18 >> 63)
  {
    __break(1u);
    goto LABEL_42;
  }
  v19 = *(_QWORD *)(a4 + 48);
  a6 = v19 - v18;
  if (__OFSUB__(v19, v18))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if ((a6 & 0x8000000000000000) == 0 && *(double *)(a4 + 80) >= *(double *)(a4 + 64))
  {
LABEL_13:
    v68 = a6;
    v69 = MEMORY[0x1E0DEE9D8];
    v23 = *(_OWORD *)(a4 + 80);
    v64 = *(_OWORD *)(a4 + 64);
    v65 = v23;
    v24 = *(_OWORD *)(a4 + 112);
    v66 = *(_OWORD *)(a4 + 96);
    v67 = v24;
    v25 = *(_OWORD *)(a4 + 16);
    v60 = *(_OWORD *)a4;
    v61 = v25;
    v26 = *(_OWORD *)(a4 + 32);
    v27 = *(_OWORD *)(a4 + 48);
    v55 = 2 * v17;
    v62 = v26;
    v63 = v27;
    if (a5 < 1)
    {
      v33 = outlined retain of _IncrementalStack_State<LazyVStackLayout>(a4);
    }
    else
    {
      LODWORD(v17) = 0;
      outlined retain of _IncrementalStack_State<LazyVStackLayout>(a4);
      specialized IncrementalStack<>.placer(children:context:state:)(a3, (uint64_t)&v60, v56, a7, a8 & 0xFFFFFFFF00000001, (uint64_t)v57);
      if (*((_QWORD *)&v57[8] + 1))
      {
        memcpy(v58, v57, sizeof(v58));
        if ((a2 & 8) != 0)
        {
          v41 = *(double *)(a4 + 72);
          v42 = a6 - 1;
          a6 = v55;
          v43 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, *(_QWORD *)(a4 + 56), v42, 0, v41);
          v44 = *(double *)&v58[280];
          if ((AGGraphHasDeadlinePassed() & 1) == 0)
          {
            v8 = v44 - v41;
            if ((v43 & 1) != 0)
            {
              LODWORD(v17) = 1;
              goto LABEL_34;
            }
LABEL_30:
            v45 = *(double *)(a4 + 104) * 0.75;
            if (v45 < 0.0)
              goto LABEL_45;
            LODWORD(v17) = v8 >= v45 || v8 < 0.0;
LABEL_34:
            lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
              goto LABEL_39;
            if (one-time initialization token for log != -1)
              goto LABEL_46;
            while (1)
            {
              v46 = type metadata accessor for Logger();
              __swift_project_value_buffer(v46, (uint64_t)static Log.LazyLayoutPrefetch.log);
              v47 = Logger.logObject.getter();
              v48 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v47, v48))
              {
                v49 = swift_slowAlloc();
                v50 = swift_slowAlloc();
                *(_QWORD *)&v57[0] = v50;
                *(_DWORD *)v49 = 136446722;
                v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000187BD5CE0, (uint64_t *)v57);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v49 + 12) = 2048;
                v59 = *(_QWORD *)&v8;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v49 + 22) = 1024;
                LODWORD(v59) = v17;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_186E48000, v47, v48, "%{public}s prefetched length=%f, stop=%{BOOL}d", (uint8_t *)v49, 0x1Cu);
                swift_arrayDestroy();
                MEMORY[0x18D760108](v50, -1, -1);
                MEMORY[0x18D760108](v49, -1, -1);
              }

LABEL_39:
              v33 = outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v58);
              if ((_DWORD)v17)
                break;
LABEL_21:
              v17 = (uint64_t)&v54;
              MEMORY[0x1E0C80A78](v33, v34);
              v52[2] = &v69;
              v52[3] = &v70;
              v53 = 0;
              *(_QWORD *)&v57[0] = *(_QWORD *)(a1 + 104);
              v35 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v58);
              v59 = a6;
              MEMORY[0x1E0C80A78](v35, v36);
              a6 = (uint64_t)v51;
              v51[2] = a1;
              v51[3] = partial apply for specialized closure #1 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:);
              v51[4] = v52;
              swift_bridgeObjectRetain();
              _ViewList_Node.applyNodes(from:style:transform:to:)();
              outlined destroy of _ViewList_Node((uint64_t)v58);
              swift_bridgeObjectRelease();
              a1 = v69;
              if (!*(_QWORD *)(v69 + 16))
              {
                v20 = 0;
                goto LABEL_25;
              }
              swift_bridgeObjectRetain();
              _ProposedSize.init(_:in:by:)();
              if (*(_QWORD *)(a1 + 16))
              {
                v37 = *(_QWORD *)v58;
                v38 = v58[8];
                v39 = *(_QWORD *)&v58[16];
                v40 = v58[24];
                outlined init with copy of _IncrementalLayout_Child(a1 + 32, (uint64_t)v58);
                *(_QWORD *)&v57[0] = v56;
                lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
                AlignmentGuide.fraction.getter();
                UnitPoint.init(_:in:by:)();
                LOBYTE(v57[0]) = v38;
                LOBYTE(v59) = v40;
                specialized closure #2 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)((uint64_t)v58, v37, v38, v39, v40, 0xD000000000000010, 0x8000000187BD5CE0);
                outlined destroy of _IncrementalLayout_Child((uint64_t)v58);
                swift_bridgeObjectRelease();
                v20 = 2 * (*(_QWORD *)(v69 + 16) != 0);
LABEL_25:
                *(_OWORD *)&v58[64] = v64;
                *(_OWORD *)&v58[80] = v65;
                *(_OWORD *)&v58[96] = v66;
                *(_OWORD *)&v58[112] = v67;
                *(_OWORD *)v58 = v60;
                *(_OWORD *)&v58[16] = v61;
                *(_OWORD *)&v58[32] = v62;
                *(_OWORD *)&v58[48] = v63;
                outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v58);
                swift_bridgeObjectRelease();
                return v20;
              }
LABEL_44:
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              swift_once();
            }
            v57[4] = v64;
            v57[5] = v65;
            v57[6] = v66;
            v57[7] = v67;
            v57[0] = v60;
            v57[1] = v61;
            v57[2] = v62;
            v57[3] = v63;
            outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v57);
            swift_bridgeObjectRelease();
            return 0;
          }
        }
        else
        {
          LOBYTE(v57[0]) = 0;
          v28 = a6 + 1;
          v29 = a6 + 1;
          a6 = v55;
          v30 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v29, *(_QWORD *)(a4 + 48), a1, v55, v57);
          specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v30, v28, 1, v57[0], 1, (double (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:), *(double *)(a4 + 64));
          swift_bridgeObjectRelease();
          v31 = *(double *)(a4 + 80);
          v32 = *(double *)&v58[112];
          if (!AGGraphHasDeadlinePassed())
          {
            v8 = v31 - v32;
            goto LABEL_30;
          }
        }
        outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v58);
        v57[4] = v64;
        v57[5] = v65;
        v57[6] = v66;
        v57[7] = v67;
        v57[0] = v60;
        v57[1] = v61;
        v57[2] = v62;
        v57[3] = v63;
        outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v57);
        swift_bridgeObjectRelease();
        return 1;
      }
      v33 = outlined destroy of StackPlacement<LazyHStackLayout>?((uint64_t)v57);
    }
    a6 = v55;
    goto LABEL_21;
  }
  return 0;
}

uint64_t specialized IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v9;
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  double v44;
  char v45;
  double v46;
  double v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56[42];
  _QWORD v57[42];
  uint64_t v58;
  _OWORD v59[7];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v10 = *(_QWORD *)(a4 + 16);
  if (!v10)
    return 0;
  v18 = *(_QWORD *)a4;
  v19 = *(_QWORD *)(a4 + 8);
  v63 = *(_QWORD *)a4;
  v64 = v19;
  v65 = v10;
  swift_bridgeObjectRetain();
  if ((static Edge.Set.horizontal.getter() & a2) == 0)
    goto LABEL_10;
  if ((a2 & 8) != 0)
  {
    if (*(double *)(a4 + 64) < *(double *)(a4 + 80))
      goto LABEL_10;
    v26 = *(_QWORD *)(a4 + 48);
    v23 = v26 + a5;
    if (!__OFADD__(v26, a5))
      goto LABEL_14;
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v20 = (a5 + 1) * v18;
  if ((unsigned __int128)((a5 + 1) * (__int128)v18) >> 64 != v20 >> 63)
  {
    __break(1u);
    goto LABEL_45;
  }
  v21 = *(_QWORD *)(a4 + 40);
  v22 = __OFSUB__(v21, v20);
  v23 = v21 - v20;
  if (v22)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v23 & 0x8000000000000000) == 0 && *(double *)(a4 + 72) >= *(double *)(a4 + 56))
  {
LABEL_14:
    v61 = v23;
    v62 = MEMORY[0x1E0DEE9D8];
    v27 = *(_OWORD *)(a4 + 80);
    v59[4] = *(_OWORD *)(a4 + 64);
    v59[5] = v27;
    v59[6] = *(_OWORD *)(a4 + 96);
    v60 = *(_QWORD *)(a4 + 112);
    v28 = *(_OWORD *)(a4 + 16);
    v59[0] = *(_OWORD *)a4;
    v59[1] = v28;
    v29 = *(_OWORD *)(a4 + 48);
    v54 = 2 * v18;
    v59[2] = *(_OWORD *)(a4 + 32);
    v59[3] = v29;
    if (a5 < 1)
    {
      v33 = outlined retain of _IncrementalStack_State<LazyHGridLayout>(a4);
    }
    else
    {
      v53 = v23;
      outlined retain of _IncrementalStack_State<LazyHGridLayout>(a4);
      specialized IncrementalStack<>.placer(children:context:state:)(a3, (uint64_t)v59, a6, a7, a8, a9 & 0xFFFFFFFF00000001, (uint64_t)v56);
      if (v56[0])
      {
        memcpy(v57, v56, sizeof(v57));
        a7 = 2 * v18;
        if ((a2 & 8) != 0)
        {
          v44 = *(double *)(a4 + 64);
          v45 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, *(_QWORD *)(a4 + 48), v53 - 1, 0, v44);
          v46 = *(double *)&v57[36];
          if ((AGGraphHasDeadlinePassed() & 1) == 0)
          {
            v9 = v46 - v44;
            if ((v45 & 1) != 0)
            {
              LODWORD(a3) = 1;
              goto LABEL_37;
            }
LABEL_33:
            v47 = *(double *)(a4 + 96) * 0.75;
            if (v47 < 0.0)
              goto LABEL_48;
            LODWORD(a3) = v9 >= v47 || v9 < 0.0;
LABEL_37:
            lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
              goto LABEL_42;
            if (one-time initialization token for log != -1)
              goto LABEL_49;
            while (1)
            {
              v48 = type metadata accessor for Logger();
              __swift_project_value_buffer(v48, (uint64_t)static Log.LazyLayoutPrefetch.log);
              v49 = Logger.logObject.getter();
              v50 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v49, v50))
              {
                v51 = swift_slowAlloc();
                v52 = swift_slowAlloc();
                v56[0] = v52;
                *(_DWORD *)v51 = 136446722;
                v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5F30, v56);
                a7 = v54;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v51 + 12) = 2048;
                v58 = *(_QWORD *)&v9;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v51 + 22) = 1024;
                LODWORD(v58) = a3;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_186E48000, v49, v50, "%{public}s prefetched length=%f, stop=%{BOOL}d", (uint8_t *)v51, 0x1Cu);
                swift_arrayDestroy();
                MEMORY[0x18D760108](v52, -1, -1);
                MEMORY[0x18D760108](v51, -1, -1);
              }

LABEL_42:
              v33 = outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v57);
              if ((_DWORD)a3)
                break;
LABEL_22:
              MEMORY[0x1E0C80A78](v33, v34);
              v56[0] = *(_QWORD *)(a1 + 104);
              v35 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v57);
              v58 = a7;
              MEMORY[0x1E0C80A78](v35, v36);
              swift_bridgeObjectRetain();
              _ViewList_Node.applyNodes(from:style:transform:to:)();
              outlined destroy of _ViewList_Node((uint64_t)v57);
              swift_bridgeObjectRelease();
              v37 = *(_QWORD *)(v62 + 16);
              if (!v37)
              {
                v24 = 0;
LABEL_28:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return v24;
              }
              if (v37 <= *(_QWORD *)(v65 + 16))
              {
                v38 = v62 + 32;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v39 = 40;
                do
                {
                  _ProposedSize.init(_:in:by:)();
                  v40 = v57[0];
                  v41 = v57[1];
                  v42 = v57[2];
                  v43 = v57[3];
                  outlined init with copy of _IncrementalLayout_Child(v38, (uint64_t)v57);
                  LOBYTE(v56[0]) = v41;
                  LOBYTE(v58) = v43;
                  specialized closure #2 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)((uint64_t)v57, v40, v41, v42, v43, 0xD000000000000036, 0x8000000187BD5F30);
                  outlined destroy of _IncrementalLayout_Child((uint64_t)v57);
                  v39 += 32;
                  v38 += 96;
                  --v37;
                }
                while (v37);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v24 = 2 * (*(_QWORD *)(v62 + 16) != 0);
                goto LABEL_28;
              }
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              swift_once();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_10;
          }
        }
        else
        {
          LOBYTE(v56[0]) = 0;
          v30 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v53 + 1, *(_QWORD *)(a4 + 40), a1, v54, v56);
          specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v30, v53 + 1, 1, v56[0], 1, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:), *(double *)(a4 + 56));
          swift_bridgeObjectRelease();
          v31 = *(double *)(a4 + 72);
          v32 = *(double *)&v57[15];
          if (!AGGraphHasDeadlinePassed())
          {
            v9 = v31 - v32;
            goto LABEL_33;
          }
        }
        outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      v33 = outlined destroy of StackPlacement<LazyHGridLayout>?((uint64_t)v56);
    }
    a7 = 2 * v18;
    goto LABEL_22;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

{
  double v9;
  uint64_t v10;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  double v44;
  char v45;
  double v46;
  double v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56[42];
  _QWORD v57[42];
  uint64_t v58;
  _OWORD v59[7];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v10 = *(_QWORD *)(a4 + 16);
  if (!v10)
    return 0;
  v18 = *(_QWORD *)a4;
  v19 = *(_QWORD *)(a4 + 8);
  v63 = *(_QWORD *)a4;
  v64 = v19;
  v65 = v10;
  swift_bridgeObjectRetain();
  if ((static Edge.Set.vertical.getter() & a2) == 0)
    goto LABEL_10;
  if ((a2 & 4) != 0)
  {
    if (*(double *)(a4 + 64) < *(double *)(a4 + 80))
      goto LABEL_10;
    v26 = *(_QWORD *)(a4 + 48);
    v23 = v26 + a5;
    if (!__OFADD__(v26, a5))
      goto LABEL_14;
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v20 = (a5 + 1) * v18;
  if ((unsigned __int128)((a5 + 1) * (__int128)v18) >> 64 != v20 >> 63)
  {
    __break(1u);
    goto LABEL_45;
  }
  v21 = *(_QWORD *)(a4 + 40);
  v22 = __OFSUB__(v21, v20);
  v23 = v21 - v20;
  if (v22)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v23 & 0x8000000000000000) == 0 && *(double *)(a4 + 72) >= *(double *)(a4 + 56))
  {
LABEL_14:
    v61 = v23;
    v62 = MEMORY[0x1E0DEE9D8];
    v27 = *(_OWORD *)(a4 + 80);
    v59[4] = *(_OWORD *)(a4 + 64);
    v59[5] = v27;
    v59[6] = *(_OWORD *)(a4 + 96);
    v60 = *(_QWORD *)(a4 + 112);
    v28 = *(_OWORD *)(a4 + 16);
    v59[0] = *(_OWORD *)a4;
    v59[1] = v28;
    v29 = *(_OWORD *)(a4 + 48);
    v54 = 2 * v18;
    v59[2] = *(_OWORD *)(a4 + 32);
    v59[3] = v29;
    if (a5 < 1)
    {
      v33 = outlined retain of _IncrementalStack_State<LazyHGridLayout>(a4);
    }
    else
    {
      v53 = v23;
      outlined retain of _IncrementalStack_State<LazyHGridLayout>(a4);
      specialized IncrementalStack<>.placer(children:context:state:)(a3, (uint64_t)v59, a6, a7, a8, a9 & 0xFFFFFFFF00000001, (uint64_t)v56);
      if (v56[0])
      {
        memcpy(v57, v56, sizeof(v57));
        a7 = 2 * v18;
        if ((a2 & 4) != 0)
        {
          v44 = *(double *)(a4 + 64);
          v45 = specialized StackPlacement.place(children:from:position:stopping:style:)(a1, *(_QWORD *)(a4 + 48), v53 - 1, 0, v44);
          v46 = *(double *)&v57[36];
          if ((AGGraphHasDeadlinePassed() & 1) == 0)
          {
            v9 = v46 - v44;
            if ((v45 & 1) != 0)
            {
              LODWORD(a3) = 1;
              goto LABEL_37;
            }
LABEL_33:
            v47 = *(double *)(a4 + 96) * 0.75;
            if (v47 < 0.0)
              goto LABEL_48;
            LODWORD(a3) = v9 >= v47 || v9 < 0.0;
LABEL_37:
            lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
            if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
              goto LABEL_42;
            if (one-time initialization token for log != -1)
              goto LABEL_49;
            while (1)
            {
              v48 = type metadata accessor for Logger();
              __swift_project_value_buffer(v48, (uint64_t)static Log.LazyLayoutPrefetch.log);
              v49 = Logger.logObject.getter();
              v50 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v49, v50))
              {
                v51 = swift_slowAlloc();
                v52 = swift_slowAlloc();
                v56[0] = v52;
                *(_DWORD *)v51 = 136446722;
                v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000036, 0x8000000187BD5FE0, v56);
                a7 = v54;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v51 + 12) = 2048;
                v58 = *(_QWORD *)&v9;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v51 + 22) = 1024;
                LODWORD(v58) = a3;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_186E48000, v49, v50, "%{public}s prefetched length=%f, stop=%{BOOL}d", (uint8_t *)v51, 0x1Cu);
                swift_arrayDestroy();
                MEMORY[0x18D760108](v52, -1, -1);
                MEMORY[0x18D760108](v51, -1, -1);
              }

LABEL_42:
              v33 = outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v57);
              if ((_DWORD)a3)
                break;
LABEL_22:
              MEMORY[0x1E0C80A78](v33, v34);
              v56[0] = *(_QWORD *)(a1 + 104);
              v35 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v57);
              v58 = a7;
              MEMORY[0x1E0C80A78](v35, v36);
              swift_bridgeObjectRetain();
              _ViewList_Node.applyNodes(from:style:transform:to:)();
              outlined destroy of _ViewList_Node((uint64_t)v57);
              swift_bridgeObjectRelease();
              a1 = v62;
              v37 = *(_QWORD *)(v62 + 16);
              if (!v37)
              {
                v24 = 0;
LABEL_28:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return v24;
              }
              if (v37 <= *(_QWORD *)(v65 + 16))
              {
                v38 = v62 + 32;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v39 = 40;
                do
                {
                  _ProposedSize.init(_:in:by:)();
                  v40 = v57[0];
                  v41 = v57[1];
                  v42 = v57[2];
                  v43 = v57[3];
                  outlined init with copy of _IncrementalLayout_Child(v38, (uint64_t)v57);
                  LOBYTE(v56[0]) = v41;
                  LOBYTE(v58) = v43;
                  specialized closure #2 in IncrementalStack<>.prefetch(children:edges:context:state:offsetPastVisible:)((uint64_t)v57, v40, v41, v42, v43, 0xD000000000000036, 0x8000000187BD5FE0);
                  outlined destroy of _IncrementalLayout_Child((uint64_t)v57);
                  v39 += 32;
                  v38 += 96;
                  --v37;
                }
                while (v37);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v24 = 2 * (*(_QWORD *)(v62 + 16) != 0);
                goto LABEL_28;
              }
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              swift_once();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_10;
          }
        }
        else
        {
          LOBYTE(v56[0]) = 0;
          v30 = specialized IncrementalStack<>.collectBackwards(from:to:children:style:atEnd:)(v53 + 1, *(_QWORD *)(a4 + 40), a1, v54, v56);
          specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v30, v53 + 1, 1, v56[0], 1, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:), *(double *)(a4 + 56));
          swift_bridgeObjectRelease();
          v31 = *(double *)(a4 + 72);
          v32 = *(double *)&v57[15];
          if (!AGGraphHasDeadlinePassed())
          {
            v9 = v31 - v32;
            goto LABEL_33;
          }
        }
        outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      v33 = outlined destroy of StackPlacement<LazyVGridLayout>?((uint64_t)v56);
    }
    a7 = 2 * v18;
    goto LABEL_22;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized IncrementalStack<>.firstIndex(children:context:state:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  _BYTE v20[392];
  _BYTE v21[328];
  _OWORD v22[8];
  _QWORD __src[41];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD __dst[25];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];

  v6 = a6;
  v11 = a3[5];
  v12 = a6 & 0xFFFFFFFF00000000;
  v33 = a3[4];
  v34 = v11;
  v13 = a3[7];
  v35 = a3[6];
  v36 = v13;
  v14 = a3[1];
  v29 = *a3;
  v30 = v14;
  v15 = a3[3];
  v31 = a3[2];
  v32 = v15;
  outlined retain of _IncrementalStack_State<LazyVStackLayout>((uint64_t)a3);
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, (uint64_t)&v29, a4, a5, v12 | v6 & 1, (uint64_t)__src);
  if (__src[17])
  {
    memcpy(__dst, __src, 0x148uLL);
    v37[0] = v24;
    v37[1] = v25;
    v37[2] = v26;
    v37[3] = v27;
    *(_OWORD *)((char *)&__dst[20] + 8) = v24;
    *(_OWORD *)((char *)&__dst[21] + 8) = v25;
    *(_OWORD *)((char *)&__dst[22] + 8) = v26;
    *(_OWORD *)((char *)&__dst[23] + 8) = v27;
    outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)v20);
    memcpy(v21, v20, sizeof(v21));
    v16 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, (uint64_t)&v29, (uint64_t)v21, (uint64_t)v37);
    v18 = v17;
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v21);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>));
    v22[4] = v33;
    v22[5] = v34;
    v22[6] = v35;
    v22[7] = v36;
    v22[0] = v29;
    v22[1] = v30;
    v22[2] = v31;
    v22[3] = v32;
    outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v22);
    if ((v18 & 1) == 0)
      return v16;
  }
  else
  {
    __dst[4] = v33;
    __dst[5] = v34;
    __dst[6] = v35;
    __dst[7] = v36;
    __dst[0] = v29;
    __dst[1] = v30;
    __dst[2] = v31;
    __dst[3] = v32;
    outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)__dst);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)?);
  }
  return 0;
}

{
  char v6;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;
  _BYTE v20[392];
  _BYTE v21[328];
  _OWORD v22[8];
  _QWORD __src[41];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD __dst[25];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];

  v6 = a6;
  v11 = a3[5];
  v12 = a6 & 0xFFFFFFFF00000000;
  v33 = a3[4];
  v34 = v11;
  v13 = a3[7];
  v35 = a3[6];
  v36 = v13;
  v14 = a3[1];
  v29 = *a3;
  v30 = v14;
  v15 = a3[3];
  v31 = a3[2];
  v32 = v15;
  outlined retain of _IncrementalStack_State<LazyVStackLayout>((uint64_t)a3);
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, (uint64_t)&v29, a4, a5, v12 | v6 & 1, (uint64_t)__src);
  if (__src[17])
  {
    memcpy(__dst, __src, 0x148uLL);
    v37[0] = v24;
    v37[1] = v25;
    v37[2] = v26;
    v37[3] = v27;
    *(_OWORD *)((char *)&__dst[20] + 8) = v24;
    *(_OWORD *)((char *)&__dst[21] + 8) = v25;
    *(_OWORD *)((char *)&__dst[22] + 8) = v26;
    *(_OWORD *)((char *)&__dst[23] + 8) = v27;
    outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)v20);
    memcpy(v21, v20, sizeof(v21));
    v16 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, (uint64_t)&v29, (uint64_t)v21, (uint64_t)v37);
    v18 = v17;
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v21);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>));
    v22[4] = v33;
    v22[5] = v34;
    v22[6] = v35;
    v22[7] = v36;
    v22[0] = v29;
    v22[1] = v30;
    v22[2] = v31;
    v22[3] = v32;
    outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v22);
    if ((v18 & 1) == 0)
      return v16;
  }
  else
  {
    __dst[4] = v33;
    __dst[5] = v34;
    __dst[6] = v35;
    __dst[7] = v36;
    __dst[0] = v29;
    __dst[1] = v30;
    __dst[2] = v31;
    __dst[3] = v32;
    outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)__dst);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)?);
  }
  return 0;
}

uint64_t specialized IncrementalStack<>.firstIndex(children:context:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v7;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  _BYTE v21[344];
  _QWORD __src[42];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE __dst[336];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[7];
  uint64_t v33;
  _OWORD v34[4];

  v7 = a7;
  v13 = *(_OWORD *)(a3 + 80);
  v32[4] = *(_OWORD *)(a3 + 64);
  v32[5] = v13;
  v14 = a7 & 0xFFFFFFFF00000000;
  v32[6] = *(_OWORD *)(a3 + 96);
  v33 = *(_QWORD *)(a3 + 112);
  v15 = *(_OWORD *)(a3 + 16);
  v32[0] = *(_OWORD *)a3;
  v32[1] = v15;
  v16 = *(_OWORD *)(a3 + 48);
  v32[2] = *(_OWORD *)(a3 + 32);
  v32[3] = v16;
  outlined retain of _IncrementalStack_State<LazyHGridLayout>(a3);
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, (uint64_t)v32, a4, a5, a6, v14 | v7 & 1, (uint64_t)__src);
  if (__src[0])
  {
    memcpy(__dst, __src, sizeof(__dst));
    v34[0] = v23;
    v34[1] = v24;
    v34[2] = v25;
    v34[3] = v26;
    v28 = v23;
    v29 = v24;
    v30 = v25;
    v31 = v26;
    outlined init with copy of StackPlacement<LazyHGridLayout>((uint64_t)__dst, (uint64_t)__src);
    memcpy(v21, __src, 0x150uLL);
    v17 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, (uint64_t)v32, (uint64_t)v21, (uint64_t)v34);
    v19 = v18;
    outlined destroy of StackPlacement<LazyHGridLayout>((uint64_t)v21);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      return v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyHGridLayout>, PlacementProperties<LazyHGridLayout>)?);
  }
  return 0;
}

{
  char v7;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  _BYTE v21[344];
  _QWORD __src[42];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE __dst[336];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[7];
  uint64_t v33;
  _OWORD v34[4];

  v7 = a7;
  v13 = *(_OWORD *)(a3 + 80);
  v32[4] = *(_OWORD *)(a3 + 64);
  v32[5] = v13;
  v14 = a7 & 0xFFFFFFFF00000000;
  v32[6] = *(_OWORD *)(a3 + 96);
  v33 = *(_QWORD *)(a3 + 112);
  v15 = *(_OWORD *)(a3 + 16);
  v32[0] = *(_OWORD *)a3;
  v32[1] = v15;
  v16 = *(_OWORD *)(a3 + 48);
  v32[2] = *(_OWORD *)(a3 + 32);
  v32[3] = v16;
  outlined retain of _IncrementalStack_State<LazyHGridLayout>(a3);
  specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(a1, a2, (uint64_t)v32, a4, a5, a6, v14 | v7 & 1, (uint64_t)__src);
  if (__src[0])
  {
    memcpy(__dst, __src, sizeof(__dst));
    v34[0] = v23;
    v34[1] = v24;
    v34[2] = v25;
    v34[3] = v26;
    v28 = v23;
    v29 = v24;
    v30 = v25;
    v31 = v26;
    outlined init with copy of StackPlacement<LazyVGridLayout>((uint64_t)__dst, (uint64_t)__src);
    memcpy(v21, __src, 0x150uLL);
    v17 = specialized IncrementalStack<>.resolveIndexAndPosition(children:context:state:placer:properties:)(a1, a2, (uint64_t)v32, (uint64_t)v21, (uint64_t)v34);
    v19 = v18;
    outlined destroy of StackPlacement<LazyVGridLayout>((uint64_t)v21);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__dst, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      return v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)__src, (uint64_t (*)(_QWORD))type metadata accessor for (StackPlacement<LazyVGridLayout>, PlacementProperties<LazyVGridLayout>)?);
  }
  return 0;
}

uint64_t specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, char a16, _QWORD *a17, double (*a18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  char *v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE *v55;
  uint64_t result;
  BOOL v57;
  char *v58;
  double (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[3];

  v19 = a4;
  v20 = a3;
  v21 = a1;
  v22 = a12;
  v23 = a11 & 0xFFFFFFFF00000000;
  v24 = a11 & 1;
  v25 = (uint64_t *)(a3 + 16);
  if ((*(_BYTE *)(a1 + 93) & 1) == 0 && (*(_BYTE *)(a1 + 94) & 1) == 0)
  {
    v59 = a18;
    v60 = a14;
    v62 = a9;
    v63 = a5;
    v64 = a8;
    v26 = (_QWORD *)(a11 & 1);
    v61 = a10;
    outlined init with copy of _IncrementalLayout_Child(a1, (uint64_t)&v75);
    swift_beginAccess();
    v21 = *v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v25 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_9;
    goto LABEL_33;
  }
  v26 = (_QWORD *)(a12 + 16);
  v64 = a11 & 1;
  LOBYTE(v75) = v24 != 0;
  v22 = a10;
  specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a6, a3, a4, a5, a7, a8, a9, a10, v23 | (v24 != 0), a12, a13, a14, a15, a18);
  swift_beginAccess();
  if ((*(_BYTE *)(a7 + 16) & 1) != 0)
  {
    swift_beginAccess();
    *(_BYTE *)(a7 + 16) = 0;
    v27 = (uint64_t *)(a12 + 16);
LABEL_15:
    if (__OFADD__(*a15, v19))
    {
      __break(1u);
    }
    else
    {
      *a15 += v19;
      if ((v19 & 0x8000000000000000) == 0)
      {
        if (v19)
        {
          swift_beginAccess();
          do
          {
            outlined init with copy of _IncrementalLayout_Child(v21, (uint64_t)&v75);
            v46 = (char *)*v25;
            v47 = swift_isUniquelyReferenced_nonNull_native();
            *v25 = (uint64_t)v46;
            if ((v47 & 1) == 0)
            {
              v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
              *v25 = (uint64_t)v46;
            }
            v49 = *((_QWORD *)v46 + 2);
            v48 = *((_QWORD *)v46 + 3);
            if (v49 >= v48 >> 1)
            {
              v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v46);
              *v25 = (uint64_t)v46;
            }
            *((_QWORD *)v46 + 2) = v49 + 1;
            v50 = &v46[96 * v49];
            v51 = v76;
            *((_OWORD *)v50 + 2) = v75;
            *((_OWORD *)v50 + 3) = v51;
            v52 = v77;
            v53 = v78;
            v54 = v79[0];
            *(_OWORD *)(v50 + 111) = *(_OWORD *)((char *)v79 + 15);
            *((_OWORD *)v50 + 5) = v53;
            *((_OWORD *)v50 + 6) = v54;
            *((_OWORD *)v50 + 4) = v52;
            --v19;
          }
          while (v19);
        }
        swift_beginAccess();
        swift_beginAccess();
        swapChildren(_:_:)(v27, v25);
        swift_endAccess();
        swift_endAccess();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  v23 = a16 & 1;
  _ProposedSize.init(_:in:by:)();
  v67 = v71;
  v68 = v72;
  v69 = v73;
  v70 = v74;
  swift_beginAccess();
  v28 = *v26;
  v27 = (uint64_t *)(a12 + 16);
  if (!*v26)
  {
    v78 = 0u;
    memset(v79, 0, 31);
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    goto LABEL_14;
  }
  if (*(_QWORD *)(v28 + 16))
  {
    outlined init with copy of _IncrementalLayout_Child(v28 + 32, (uint64_t)&v75);
LABEL_14:
    v20 = a13 + 16;
    v43 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v67, v23, (uint64_t)&v75, a10, v64);
    v45 = v44;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v75, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    swift_beginAccess();
    *(double *)(a13 + 16) = v45 + v43 + *(double *)(a13 + 16);
    goto LABEL_15;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  v21 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1, (char *)v21);
  *v25 = v21;
LABEL_9:
  v31 = *(_QWORD *)(v21 + 16);
  v30 = *(_QWORD *)(v21 + 24);
  v32 = v31 + 1;
  v33 = a6;
  v34 = v63;
  v35 = v64;
  v36 = v62;
  if (v31 >= v30 >> 1)
  {
    v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, (char *)v21);
    v32 = v31 + 1;
    v36 = v62;
    v34 = v63;
    v35 = v64;
    v37 = v26;
    v33 = a6;
    v21 = (uint64_t)v58;
    *v25 = (uint64_t)v58;
  }
  else
  {
    v37 = v26;
  }
  *(_QWORD *)(v21 + 16) = v32;
  v38 = (_OWORD *)(v21 + 96 * v31);
  v39 = v76;
  v38[2] = v75;
  v38[3] = v39;
  v40 = v77;
  v41 = v78;
  v42 = v79[0];
  *(_OWORD *)((char *)v38 + 111) = *(_OWORD *)((char *)v79 + 15);
  v38[5] = v41;
  v38[6] = v42;
  v38[4] = v40;
  if (*(_QWORD *)(*v25 + 16) == v19)
  {
    LOBYTE(v75) = v37 != 0;
    specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(v33, v20, v19, v34, a7, v35, v36, v61, v23 | (v37 != 0), v22, a13, v60, a15, v59);
LABEL_25:
    v33 = a6;
  }
  v55 = (_BYTE *)(v33 + 16);
  result = swift_beginAccess();
  v57 = (*v55 & 1) != 0 || *a15 >= *a17;
  *a2 = v57;
  return result;
}

uint64_t specialized closure #1 in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, char a16, _QWORD *a17, double (*a18)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _BYTE *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  double v44;
  double v45;
  double v46;
  char *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE *v56;
  uint64_t result;
  BOOL v58;
  char *v59;
  double (*v60)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[3];

  v20 = a4;
  v21 = a3;
  v22 = a10;
  v23 = a1;
  v24 = a12;
  v25 = a11 & 0xFFFFFFFF00000000;
  v26 = a11 & 1;
  v27 = (uint64_t *)(a3 + 16);
  v64 = v26;
  if ((*(_BYTE *)(a1 + 93) & 1) == 0 && (*(_BYTE *)(a1 + 94) & 1) == 0)
  {
    v60 = a18;
    v61 = a14;
    v62 = a13;
    v63 = a7;
    v29 = (uint64_t *)a8;
    outlined init with copy of _IncrementalLayout_Child(a1, (uint64_t)&v75);
    swift_beginAccess();
    v23 = *v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v27 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_9;
    goto LABEL_33;
  }
  v28 = (_BYTE *)(a6 + 16);
  v29 = (uint64_t *)(a12 + 16);
  LOBYTE(v75) = v26 != 0;
  v30 = v25 | (v26 != 0);
  v25 = a13;
  v63 = a8;
  specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(a5, a3, a4, a6, a7, a8, v30, a12, a10, a13, a14, a15, a18);
  swift_beginAccess();
  if ((*(_BYTE *)(a6 + 16) & 1) != 0)
  {
    swift_beginAccess();
    *v28 = 0;
LABEL_15:
    if (__OFADD__(*a15, v20))
    {
      __break(1u);
    }
    else
    {
      *a15 += v20;
      if ((v20 & 0x8000000000000000) == 0)
      {
        if (v20)
        {
          swift_beginAccess();
          do
          {
            outlined init with copy of _IncrementalLayout_Child(v23, (uint64_t)&v75);
            v47 = (char *)*v27;
            v48 = swift_isUniquelyReferenced_nonNull_native();
            *v27 = (uint64_t)v47;
            if ((v48 & 1) == 0)
            {
              v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v47 + 2) + 1, 1, v47);
              *v27 = (uint64_t)v47;
            }
            v50 = *((_QWORD *)v47 + 2);
            v49 = *((_QWORD *)v47 + 3);
            if (v50 >= v49 >> 1)
            {
              v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v47);
              *v27 = (uint64_t)v47;
            }
            *((_QWORD *)v47 + 2) = v50 + 1;
            v51 = &v47[96 * v50];
            v52 = v76;
            *((_OWORD *)v51 + 2) = v75;
            *((_OWORD *)v51 + 3) = v52;
            v53 = v77;
            v54 = v78;
            v55 = v79[0];
            *(_OWORD *)(v51 + 111) = *(_OWORD *)((char *)v79 + 15);
            *((_OWORD *)v51 + 5) = v54;
            *((_OWORD *)v51 + 6) = v55;
            *((_OWORD *)v51 + 4) = v53;
            --v20;
          }
          while (v20);
        }
        swift_beginAccess();
        swift_beginAccess();
        swapChildren(_:_:)(v29, v27);
        swift_endAccess();
        swift_endAccess();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  v21 = a16 & 1;
  _ProposedSize.init(_:in:by:)();
  v67 = v71;
  v68 = v72;
  v69 = v73;
  v70 = v74;
  swift_beginAccess();
  v31 = *v29;
  if (!*v29)
  {
    v78 = 0u;
    memset(v79, 0, 31);
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    goto LABEL_14;
  }
  if (*(_QWORD *)(v31 + 16))
  {
    outlined init with copy of _IncrementalLayout_Child(v31 + 32, (uint64_t)&v75);
LABEL_14:
    v24 = a13 + 16;
    v44 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v67, v21, (uint64_t)&v75, v63, v64);
    v46 = v45;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v75, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v22 = v46 + v44;
    swift_beginAccess();
    *(double *)(a13 + 16) = v22 + *(double *)(a13 + 16);
    goto LABEL_15;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, (char *)v23);
  *v27 = v23;
LABEL_9:
  v34 = *(_QWORD *)(v23 + 16);
  v33 = *(_QWORD *)(v23 + 24);
  v35 = v34 + 1;
  v36 = a5;
  v37 = v63;
  if (v34 >= v33 >> 1)
  {
    v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, (char *)v23);
    v35 = v34 + 1;
    v37 = v63;
    v38 = (uint64_t)v29;
    v36 = a5;
    v23 = (uint64_t)v59;
    *v27 = (uint64_t)v59;
  }
  else
  {
    v38 = (uint64_t)v29;
  }
  *(_QWORD *)(v23 + 16) = v35;
  v39 = (_OWORD *)(v23 + 96 * v34);
  v40 = v76;
  v39[2] = v75;
  v39[3] = v40;
  v41 = v77;
  v42 = v78;
  v43 = v79[0];
  *(_OWORD *)((char *)v39 + 111) = *(_OWORD *)((char *)v79 + 15);
  v39[5] = v42;
  v39[6] = v43;
  v39[4] = v41;
  if (*(_QWORD *)(*v27 + 16) == v20)
  {
    LOBYTE(v75) = v64 != 0;
    specialized flushMinorGroup #1 <A>() in IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)(v36, v21, v20, a6, v37, v38, v25 | (v64 != 0), v24, v22, v62, v61, a15, v60);
LABEL_25:
    v36 = a5;
  }
  v56 = (_BYTE *)(v36 + 16);
  result = swift_beginAccess();
  v58 = (*v56 & 1) != 0 || *a15 >= *a17;
  *a2 = v58;
  return result;
}

void specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v8;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  double v23;
  double v24;
  __int128 *Value;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  _BOOL4 v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v8 = a7;
  v16 = a7 & 0xFFFFFFFF00000000;
  specialized IncrementalStack<>.placer(children:context:state:)(a2, a3, a4, a5, a6, a7 & 0xFFFFFFFF00000001, (uint64_t)&v60);
  if (!(_QWORD)v60)
  {
    outlined destroy of StackPlacement<LazyHGridLayout>?((uint64_t)&v60);
    *(_OWORD *)(a8 + 368) = 0u;
    *(_OWORD *)(a8 + 384) = 0u;
    *(_OWORD *)(a8 + 336) = 0u;
    *(_OWORD *)(a8 + 352) = 0u;
    *(_OWORD *)(a8 + 304) = 0u;
    *(_OWORD *)(a8 + 320) = 0u;
    *(_OWORD *)(a8 + 272) = 0u;
    *(_OWORD *)(a8 + 288) = 0u;
    *(_OWORD *)(a8 + 240) = 0u;
    *(_OWORD *)(a8 + 256) = 0u;
    *(_OWORD *)(a8 + 208) = 0u;
    *(_OWORD *)(a8 + 224) = 0u;
    *(_OWORD *)(a8 + 176) = 0u;
    *(_OWORD *)(a8 + 192) = 0u;
    *(_OWORD *)(a8 + 144) = 0u;
    *(_OWORD *)(a8 + 160) = 0u;
    *(_OWORD *)(a8 + 112) = 0u;
    *(_OWORD *)(a8 + 128) = 0u;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 96) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return;
  }
  v57 = a6;
  v97 = v60;
  v98 = v61;
  v58 = *((_QWORD *)&v62 + 1);
  v99 = v62;
  v17 = v63;
  v18 = v64;
  v83 = v67;
  v84 = v68;
  v81 = v65;
  v82 = v66;
  v87 = v71;
  v88 = v72;
  v85 = v69;
  v86 = v70;
  v91 = v75;
  v92 = v76;
  v89 = v73;
  v90 = v74;
  v95 = v79;
  v96 = v80;
  v93 = v77;
  v94 = v78;
  v19 = *(_OWORD *)(a2 + 104);
  v20 = *(_OWORD *)(a2 + 136);
  v64 = *(_OWORD *)(a2 + 120);
  v65 = v20;
  v66 = *(_OWORD *)(a2 + 152);
  v21 = *(_OWORD *)(a2 + 72);
  v60 = *(_OWORD *)(a2 + 56);
  v61 = v21;
  v62 = *(_OWORD *)(a2 + 88);
  v63 = v19;
  swift_bridgeObjectRetain();
  ScrollGeometry.visibleRect.getter();
  v23 = v22;
  v24 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v26 = Value[1];
    v60 = *Value;
    v61 = v26;
    v24 = MEMORY[0x18D75BE3C]();
  }
  v28 = *(double *)(a3 + 88);
  v27 = *(double *)(a3 + 96);
  if (v28 <= 0.0 || v23 <= 0.0)
  {
    v30 = 0;
    if (v27 > 0.0 && v24 > 0.0)
LABEL_13:
      v30 = vabdd_f64(v27, v24) >= 0.01;
  }
  else
  {
    v29 = vabdd_f64(v28, v23);
    if (v27 > 0.0 && v24 > 0.0)
    {
      if (v29 >= 0.01)
        goto LABEL_19;
      goto LABEL_13;
    }
    if (v29 >= 0.01)
    {
LABEL_19:
      v31 = *(_QWORD *)(a3 + 104);
      LOBYTE(v30) = 1;
LABEL_20:
      v52 = v30;
      v54 = v8;
      v35 = *(_QWORD *)(a3 + 112);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v55 = specialized Set.init<A>(_:)(v31);
      v53 = a4;
      v36 = MEMORY[0x1E0DEE9D8];
      v37 = a5;
      v38 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 104) = v38;
      v39 = specialized Dictionary.init(dictionaryLiteral:)(v36);
      v56 = v35;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 112) = v39;
      *(_QWORD *)&v60 = 0;
      v59 = 0;
      v34 = v58;
      specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v60, &v59, v58, *((uint64_t *)&v17 + 1), a1, a3, v53, v37, *(double *)&v17, v57, v16 | v54 & 1, (v16 | v54 & 1) >> 32);
      specialized IncrementalStack<>.log(_:)(a3);
      v40 = swift_bridgeObjectRetain();
      v41 = specialized Set.init<A>(_:)(v40);
      v42 = specialized Set.isSubset(of:)(v55, v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = v42 ^ 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (((v42 ^ 1) & 1) != 0)
      {
        v33 = v52;
      }
      else
      {
        v33 = 0;
        *(_QWORD *)(a3 + 104) = v31;
        *(_QWORD *)(a3 + 112) = v56;
      }
      goto LABEL_23;
    }
    v30 = 0;
  }
  v31 = *(_QWORD *)(a3 + 104);
  if (!*(_QWORD *)(v31 + 16) || v30)
    goto LABEL_20;
  v32 = 0;
  v33 = 0;
  v34 = v58;
LABEL_23:
  *(_QWORD *)(a8 + 336) = v34;
  *(_OWORD *)(a8 + 344) = v17;
  *(_OWORD *)(a8 + 360) = v18;
  *(_BYTE *)(a8 + 376) = v33;
  *(_BYTE *)(a8 + 377) = v32 & 1;
  *(double *)(a8 + 384) = v23;
  *(double *)(a8 + 392) = v24;
  v43 = v98;
  *(_OWORD *)a8 = v97;
  *(_OWORD *)(a8 + 16) = v43;
  *(_QWORD *)(a8 + 32) = v99;
  *(_QWORD *)(a8 + 40) = v34;
  *(_OWORD *)(a8 + 48) = v17;
  *(_OWORD *)(a8 + 64) = v18;
  v44 = v94;
  *(_OWORD *)(a8 + 272) = v93;
  *(_OWORD *)(a8 + 288) = v44;
  v45 = v96;
  *(_OWORD *)(a8 + 304) = v95;
  *(_OWORD *)(a8 + 320) = v45;
  v46 = v90;
  *(_OWORD *)(a8 + 208) = v89;
  *(_OWORD *)(a8 + 224) = v46;
  v47 = v92;
  *(_OWORD *)(a8 + 240) = v91;
  *(_OWORD *)(a8 + 256) = v47;
  v48 = v86;
  *(_OWORD *)(a8 + 144) = v85;
  *(_OWORD *)(a8 + 160) = v48;
  v49 = v88;
  *(_OWORD *)(a8 + 176) = v87;
  *(_OWORD *)(a8 + 192) = v49;
  v50 = v82;
  *(_OWORD *)(a8 + 80) = v81;
  *(_OWORD *)(a8 + 96) = v50;
  v51 = v84;
  *(_OWORD *)(a8 + 112) = v83;
  *(_OWORD *)(a8 + 128) = v51;
}

void specialized IncrementalStack<>.resolvedPlacerProperties(children:context:state:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  __int128 *Value;
  __int128 v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[56];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  v7 = a6;
  v14 = a6 & 0xFFFFFFFF00000000;
  specialized IncrementalStack<>.placer(children:context:state:)(a2, a3, a4, a5, a6 & 0xFFFFFFFF00000001, (uint64_t)&v57);
  if (!(_QWORD)v63)
  {
    outlined destroy of StackPlacement<LazyHStackLayout>?((uint64_t)&v57);
    *(_QWORD *)(a7 + 384) = 0;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    return;
  }
  v91 = v57;
  v92 = v58;
  v15 = v59;
  v17 = v60;
  v16 = *(_QWORD *)v61;
  v83 = v67;
  v84 = v68;
  v85 = v69;
  v86 = v70;
  v79 = v63;
  v80 = v64;
  v81 = v65;
  v82 = v66;
  v75 = *(_OWORD *)&v61[8];
  v76 = *(_OWORD *)&v61[24];
  v77 = *(_OWORD *)&v61[40];
  v78 = v62;
  v87 = v71;
  v88 = v72;
  v89 = v73;
  v90 = v74;
  v18 = *(_OWORD *)(a2 + 104);
  v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)v61 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&v61[16] = v19;
  *(_OWORD *)&v61[32] = *(_OWORD *)(a2 + 152);
  v20 = *(_OWORD *)(a2 + 72);
  v57 = *(_OWORD *)(a2 + 56);
  v58 = v20;
  v59 = *(_OWORD *)(a2 + 88);
  v60 = v18;
  ScrollGeometry.visibleRect.getter();
  v22 = v21;
  v23 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E0CFED28])
  {
    Value = (__int128 *)AGGraphGetValue();
    v25 = Value[1];
    v57 = *Value;
    v58 = v25;
    v23 = MEMORY[0x18D75BE3C]();
  }
  v27 = *(double *)(a3 + 96);
  v26 = *(double *)(a3 + 104);
  if (v27 <= 0.0 || v22 <= 0.0)
  {
    v29 = 0;
    if (v26 > 0.0 && v23 > 0.0)
LABEL_13:
      v29 = vabdd_f64(v26, v23) >= 0.01;
  }
  else
  {
    v28 = vabdd_f64(v27, v22);
    if (v26 > 0.0 && v23 > 0.0)
    {
      if (v28 >= 0.01)
        goto LABEL_19;
      goto LABEL_13;
    }
    if (v28 >= 0.01)
    {
LABEL_19:
      v30 = *(_QWORD *)(a3 + 112);
      LOBYTE(v29) = 1;
LABEL_20:
      v51 = v29;
      v53 = v7;
      v34 = *(_QWORD *)(a3 + 120);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v54 = specialized Set.init<A>(_:)(v30);
      v52 = a5;
      v35 = MEMORY[0x1E0DEE9D8];
      v36 = a4;
      v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 112) = v37;
      v38 = specialized Dictionary.init(dictionaryLiteral:)(v35);
      v55 = v34;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 120) = v38;
      *(_QWORD *)&v57 = 0;
      v56 = 0;
      v33 = v15;
      specialized IncrementalStack<>.measureEstimates(updatingPosition:index:minor:children:state:)((double *)&v57, &v56, v15, a1, a3, v36, v52, v14 | v53 & 1, *((double *)&v15 + 1), *(double *)&v17);
      specialized IncrementalStack<>.log(_:)((_OWORD *)a3);
      v39 = swift_bridgeObjectRetain();
      v40 = specialized Set.init<A>(_:)(v39);
      v41 = specialized Set.isSubset(of:)(v54, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v41 ^ 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (((v41 ^ 1) & 1) != 0)
      {
        v32 = v51;
      }
      else
      {
        v32 = 0;
        *(_QWORD *)(a3 + 112) = v30;
        *(_QWORD *)(a3 + 120) = v55;
      }
      goto LABEL_23;
    }
    v29 = 0;
  }
  v30 = *(_QWORD *)(a3 + 112);
  if (!*(_QWORD *)(v30 + 16) || v29)
    goto LABEL_20;
  v31 = 0;
  v32 = 0;
  v33 = v15;
LABEL_23:
  *(_QWORD *)(a7 + 328) = v33;
  *(_QWORD *)(a7 + 336) = *((_QWORD *)&v15 + 1);
  *(_OWORD *)(a7 + 344) = v17;
  *(_QWORD *)(a7 + 360) = v16;
  *(_BYTE *)(a7 + 368) = v32;
  *(_BYTE *)(a7 + 369) = v31 & 1;
  *(double *)(a7 + 376) = v22;
  *(double *)(a7 + 384) = v23;
  v42 = v92;
  *(_OWORD *)a7 = v91;
  *(_OWORD *)(a7 + 16) = v42;
  *(_QWORD *)(a7 + 32) = v33;
  *(_QWORD *)(a7 + 40) = *((_QWORD *)&v15 + 1);
  *(_OWORD *)(a7 + 48) = v17;
  *(_QWORD *)(a7 + 64) = v16;
  v43 = v88;
  *(_OWORD *)(a7 + 264) = v87;
  *(_OWORD *)(a7 + 280) = v43;
  v44 = v90;
  *(_OWORD *)(a7 + 296) = v89;
  *(_OWORD *)(a7 + 312) = v44;
  v45 = v84;
  *(_OWORD *)(a7 + 200) = v83;
  *(_OWORD *)(a7 + 216) = v45;
  v46 = v86;
  *(_OWORD *)(a7 + 232) = v85;
  *(_OWORD *)(a7 + 248) = v46;
  v47 = v80;
  *(_OWORD *)(a7 + 136) = v79;
  *(_OWORD *)(a7 + 152) = v47;
  v48 = v82;
  *(_OWORD *)(a7 + 168) = v81;
  *(_OWORD *)(a7 + 184) = v48;
  v49 = v76;
  *(_OWORD *)(a7 + 72) = v75;
  *(_OWORD *)(a7 + 88) = v49;
  v50 = v78;
  *(_OWORD *)(a7 + 104) = v77;
  *(_OWORD *)(a7 + 120) = v50;
}

uint64_t specialized StackPlacement.place(children:from:position:stopping:style:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[88];
  uint64_t v22;
  uint64_t v23;

  v6 = v5;
  v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 64), *(double *)(v6 + 72));
  result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  v14 = *(_QWORD *)(v6 + 104);
  v15 = *(_QWORD *)(v6 + 40);
  v16 = __OFSUB__(v14, v15);
  v17 = v14 - v15;
  if (v17 < 0 == v16)
  {
    *(_BYTE *)(v6 + 112) = 1;
    if (v16)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)(v6 + 104) = v17;
    v14 = v17;
  }
  v23 = v14;
  MEMORY[0x1E0C80A78](result, v13);
  v22 = *(_QWORD *)(a1 + 104);
  v18 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v21);
  MEMORY[0x1E0C80A78](v18, v19);
  swift_bridgeObjectRetain();
  v20 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v21);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v20 & 1) != 0 && vabdd_f64(*(double *)(v6 + 120), *(double *)(v6 + 288)) < 0.01;
}

{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[88];
  uint64_t v22;
  uint64_t v23;

  v6 = v5;
  v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 64), *(double *)(v6 + 72));
  result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  v14 = *(_QWORD *)(v6 + 104);
  v15 = *(_QWORD *)(v6 + 40);
  v16 = __OFSUB__(v14, v15);
  v17 = v14 - v15;
  if (v17 < 0 == v16)
  {
    *(_BYTE *)(v6 + 112) = 1;
    if (v16)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)(v6 + 104) = v17;
    v14 = v17;
  }
  v23 = v14;
  MEMORY[0x1E0C80A78](result, v13);
  v22 = *(_QWORD *)(a1 + 104);
  v18 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v21);
  MEMORY[0x1E0C80A78](v18, v19);
  swift_bridgeObjectRetain();
  v20 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v21);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v20 & 1) != 0 && vabdd_f64(*(double *)(v6 + 120), *(double *)(v6 + 288)) < 0.01;
}

{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[88];
  uint64_t v22;
  uint64_t v23;

  v6 = v5;
  v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 56), *(double *)(v6 + 64));
  result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  v14 = *(_QWORD *)(v6 + 96);
  v15 = *(_QWORD *)(v6 + 32);
  v16 = __OFSUB__(v14, v15);
  v17 = v14 - v15;
  if (v17 < 0 == v16)
  {
    *(_BYTE *)(v6 + 104) = 1;
    if (v16)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)(v6 + 96) = v17;
    v14 = v17;
  }
  v23 = v14;
  MEMORY[0x1E0C80A78](result, v13);
  v22 = *(_QWORD *)(a1 + 104);
  v18 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v21);
  MEMORY[0x1E0C80A78](v18, v19);
  swift_bridgeObjectRetain();
  v20 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v21);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v20 & 1) != 0 && vabdd_f64(*(double *)(v6 + 112), *(double *)(v6 + 280)) < 0.01;
}

{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[88];
  uint64_t v22;
  uint64_t v23;

  v6 = v5;
  v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 56), *(double *)(v6 + 64));
  result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  v14 = *(_QWORD *)(v6 + 96);
  v15 = *(_QWORD *)(v6 + 32);
  v16 = __OFSUB__(v14, v15);
  v17 = v14 - v15;
  if (v17 < 0 == v16)
  {
    *(_BYTE *)(v6 + 104) = 1;
    if (v16)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)(v6 + 96) = v17;
    v14 = v17;
  }
  v23 = v14;
  MEMORY[0x1E0C80A78](result, v13);
  v22 = *(_QWORD *)(a1 + 104);
  v18 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v21);
  MEMORY[0x1E0C80A78](v18, v19);
  swift_bridgeObjectRetain();
  v20 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v21);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v20 & 1) != 0 && vabdd_f64(*(double *)(v6 + 112), *(double *)(v6 + 280)) < 0.01;
}

uint64_t specialized IncrementalStack<>.placer(children:context:state:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;

  v12 = *(_QWORD *)(a1 + 280);
  v13 = *(_QWORD *)(a1 + 288);
  v14 = *(_BYTE *)(a1 + 296);
  v15 = *(_OWORD *)(a1 + 104);
  v16 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)v32 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v32[16] = v16;
  v33 = *(_OWORD *)(a1 + 152);
  v17 = *(_OWORD *)(a1 + 72);
  v28 = *(_OWORD *)(a1 + 56);
  v29 = v17;
  v30 = *(_OWORD *)(a1 + 88);
  v31 = v15;
  if ((v14 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v13, v12));
  ScrollGeometry.visibleRect.getter();
  result = CGRect.subscript.getter();
  v21 = v20;
  if (v19 > 0.0)
    v22 = v19;
  else
    v22 = 0.0;
  if (v22 >= v20)
  {
    specialized IncrementalStack<>.log(_:)(v19, v20);
LABEL_14:
    result = specialized _IncrementalStack_State.reset()();
    *(_QWORD *)(a6 + 320) = 0;
    *(_OWORD *)(a6 + 288) = 0u;
    *(_OWORD *)(a6 + 304) = 0u;
    *(_OWORD *)(a6 + 256) = 0u;
    *(_OWORD *)(a6 + 272) = 0u;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return result;
  }
  if (v22 > v20)
  {
    __break(1u);
    return result;
  }
  v23 = *(double *)(a1 + 32);
  if (v23 <= 0.0 || *(double *)(a1 + 40) <= 0.0)
  {
    specialized IncrementalStack<>.log(_:)(v22, v20);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0
    || *(_QWORD *)a2 != 1
    || v23 != *(double *)(a2 + 8)
    || v23 != *(double *)(a2 + 16))
  {
    specialized _IncrementalStack_State.reset()();
  }
  v24 = *(_DWORD *)(a1 + 48);
  v31 = 0u;
  memset(v32, 0, 31);
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v25 = MEMORY[0x1E0DEE9D8];
  v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v27 = specialized Dictionary.init(dictionaryLiteral:)(v25);
  *(_QWORD *)a6 = a3;
  *(_QWORD *)(a6 + 8) = a4;
  *(_BYTE *)(a6 + 16) = a5 & 1;
  *(_DWORD *)(a6 + 20) = HIDWORD(a5);
  *(_QWORD *)(a6 + 32) = 1;
  *(double *)(a6 + 40) = v23;
  *(double *)(a6 + 48) = v23;
  *(_BYTE *)(a6 + 24) = 1;
  *(double *)(a6 + 56) = v22;
  *(double *)(a6 + 64) = v21;
  *(_DWORD *)(a6 + 72) = v24;
  *(_QWORD *)(a6 + 80) = 0;
  *(_BYTE *)(a6 + 88) = 1;
  *(_QWORD *)(a6 + 96) = 0;
  *(_BYTE *)(a6 + 104) = 0;
  *(_QWORD *)(a6 + 112) = 0;
  *(_QWORD *)(a6 + 120) = 0;
  *(_BYTE *)(a6 + 128) = 1;
  *(_QWORD *)(a6 + 136) = v25;
  *(_QWORD *)(a6 + 144) = 0;
  result = outlined init with take of Image.Resolved?((uint64_t)&v28, a6 + 152, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child);
  *(_QWORD *)(a6 + 248) = v25;
  *(_OWORD *)(a6 + 256) = xmmword_187C05350;
  *(_OWORD *)(a6 + 272) = xmmword_187C05360;
  *(_OWORD *)(a6 + 288) = xmmword_187C05360;
  *(_BYTE *)(a6 + 304) = 0;
  *(_QWORD *)(a6 + 312) = v26;
  *(_QWORD *)(a6 + 320) = v27;
  return result;
}

{
  unint64_t v12;
  unint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[32];
  __int128 v33;

  v12 = *(_QWORD *)(a1 + 280);
  v13 = *(_QWORD *)(a1 + 288);
  v14 = *(_BYTE *)(a1 + 296);
  v15 = *(_OWORD *)(a1 + 104);
  v16 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)v32 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v32[16] = v16;
  v33 = *(_OWORD *)(a1 + 152);
  v17 = *(_OWORD *)(a1 + 72);
  v28 = *(_OWORD *)(a1 + 56);
  v29 = v17;
  v30 = *(_OWORD *)(a1 + 88);
  v31 = v15;
  if ((v14 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v13, v12));
  ScrollGeometry.visibleRect.getter();
  result = CGRect.subscript.getter();
  v21 = v20;
  if (v19 > 0.0)
    v22 = v19;
  else
    v22 = 0.0;
  if (v22 >= v20)
  {
    specialized IncrementalStack<>.log(_:)(v19, v20);
LABEL_14:
    result = specialized _IncrementalStack_State.reset()();
    *(_QWORD *)(a6 + 320) = 0;
    *(_OWORD *)(a6 + 288) = 0u;
    *(_OWORD *)(a6 + 304) = 0u;
    *(_OWORD *)(a6 + 256) = 0u;
    *(_OWORD *)(a6 + 272) = 0u;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return result;
  }
  if (v22 > v20)
  {
    __break(1u);
    return result;
  }
  v23 = *(double *)(a1 + 40);
  if (v23 <= 0.0 || *(double *)(a1 + 32) <= 0.0)
  {
    specialized IncrementalStack<>.log(_:)(v22, v20);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0
    || *(_QWORD *)a2 != 1
    || v23 != *(double *)(a2 + 8)
    || v23 != *(double *)(a2 + 16))
  {
    specialized _IncrementalStack_State.reset()();
  }
  v24 = *(_DWORD *)(a1 + 48);
  v31 = 0u;
  memset(v32, 0, 31);
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v25 = MEMORY[0x1E0DEE9D8];
  v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v27 = specialized Dictionary.init(dictionaryLiteral:)(v25);
  *(_QWORD *)a6 = a3;
  *(_QWORD *)(a6 + 8) = a4;
  *(_BYTE *)(a6 + 16) = a5 & 1;
  *(_DWORD *)(a6 + 20) = HIDWORD(a5);
  *(_QWORD *)(a6 + 32) = 1;
  *(double *)(a6 + 40) = v23;
  *(double *)(a6 + 48) = v23;
  *(_BYTE *)(a6 + 24) = 0;
  *(double *)(a6 + 56) = v22;
  *(double *)(a6 + 64) = v21;
  *(_DWORD *)(a6 + 72) = v24;
  *(_QWORD *)(a6 + 80) = 0;
  *(_BYTE *)(a6 + 88) = 1;
  *(_QWORD *)(a6 + 96) = 0;
  *(_BYTE *)(a6 + 104) = 0;
  *(_QWORD *)(a6 + 112) = 0;
  *(_QWORD *)(a6 + 120) = 0;
  *(_BYTE *)(a6 + 128) = 1;
  *(_QWORD *)(a6 + 136) = v25;
  *(_QWORD *)(a6 + 144) = 0;
  result = outlined init with take of Image.Resolved?((uint64_t)&v28, a6 + 152, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child);
  *(_QWORD *)(a6 + 248) = v25;
  *(_OWORD *)(a6 + 256) = xmmword_187C05350;
  *(_OWORD *)(a6 + 272) = xmmword_187C05360;
  *(_OWORD *)(a6 + 288) = xmmword_187C05360;
  *(_BYTE *)(a6 + 304) = 0;
  *(_QWORD *)(a6 + 312) = v26;
  *(_QWORD *)(a6 + 320) = v27;
  return result;
}

uint64_t specialized IncrementalStack<>.placer(children:context:state:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[32];
  __int128 v42;

  v14 = *(_QWORD *)(a1 + 280);
  v15 = *(_QWORD *)(a1 + 288);
  v16 = *(_BYTE *)(a1 + 296);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)v41 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v41[16] = v18;
  v42 = *(_OWORD *)(a1 + 152);
  v19 = *(_OWORD *)(a1 + 72);
  v37 = *(_OWORD *)(a1 + 56);
  v38 = v19;
  v39 = *(_OWORD *)(a1 + 88);
  v40 = v17;
  if ((v16 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  ScrollGeometry.visibleRect.getter();
  result = CGRect.subscript.getter();
  v23 = v22;
  if (v21 > 0.0)
    v24 = v21;
  else
    v24 = 0.0;
  if (v24 >= v22)
  {
    specialized IncrementalStack<>.log(_:)(v21, v22);
LABEL_19:
    result = specialized _IncrementalStack_State.reset()();
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)a7 = 0u;
    return result;
  }
  if (v24 > v22)
  {
    __break(1u);
    return result;
  }
  v25 = *(double *)(a1 + 32);
  *(_QWORD *)&v37 = *(_QWORD *)(a1 + 40);
  v26 = specialized HVGrid.minorGeometry(updatingSize:)((double *)&v37, a3);
  v28 = v27;
  if (v26 < 1 || (v29 = v37, *(double *)&v37 <= 0.0) || v25 <= 0.0)
  {
    swift_bridgeObjectRelease();
    specialized IncrementalStack<>.log(_:)(v24, v23);
    goto LABEL_19;
  }
  v30 = v26;
  v31 = *(_QWORD *)(a2 + 16);
  if (!v31
    || v26 != *(_QWORD *)a2
    || *(double *)&v37 != *(double *)(a2 + 8)
    || (swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        v35 = specialized static Array<A>.== infix(_:_:)(v28, v31),
        swift_bridgeObjectRelease_n(),
        swift_bridgeObjectRelease(),
        (v35 & 1) == 0))
  {
    specialized _IncrementalStack_State.reset()();
  }
  v32 = *(_DWORD *)(a1 + 48);
  v40 = 0u;
  memset(v41, 0, 31);
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  v33 = MEMORY[0x1E0DEE9D8];
  v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v34 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  *(_QWORD *)a7 = a3;
  *(_QWORD *)(a7 + 8) = a4;
  *(_QWORD *)(a7 + 16) = a5;
  *(_BYTE *)(a7 + 24) = a6 & 1;
  *(_DWORD *)(a7 + 28) = HIDWORD(a6);
  *(_QWORD *)(a7 + 40) = v30;
  *(_QWORD *)(a7 + 48) = v29;
  *(_QWORD *)(a7 + 56) = v28;
  *(_BYTE *)(a7 + 32) = 0;
  *(double *)(a7 + 64) = v24;
  *(double *)(a7 + 72) = v23;
  *(_DWORD *)(a7 + 80) = v32;
  *(_QWORD *)(a7 + 88) = 0;
  *(_BYTE *)(a7 + 96) = 1;
  *(_QWORD *)(a7 + 104) = 0;
  *(_BYTE *)(a7 + 112) = 0;
  *(_QWORD *)(a7 + 120) = 0;
  *(_QWORD *)(a7 + 128) = 0;
  *(_BYTE *)(a7 + 136) = 1;
  *(_QWORD *)(a7 + 144) = v33;
  *(_QWORD *)(a7 + 152) = 0;
  outlined init with take of Image.Resolved?((uint64_t)&v37, a7 + 160, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child);
  *(_QWORD *)(a7 + 256) = v33;
  *(_QWORD *)(a7 + 264) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a7 + 272) = 0x8000000000000000;
  *(_QWORD *)(a7 + 280) = 0x7FF0000000000000;
  *(_OWORD *)(a7 + 288) = xmmword_187C05370;
  *(_QWORD *)(a7 + 304) = 0xFFF0000000000000;
  *(_BYTE *)(a7 + 312) = 0;
  *(_QWORD *)(a7 + 320) = v36;
  *(_QWORD *)(a7 + 328) = v34;
  return swift_bridgeObjectRetain();
}

{
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[32];
  __int128 v42;

  v14 = *(_QWORD *)(a1 + 280);
  v15 = *(_QWORD *)(a1 + 288);
  v16 = *(_BYTE *)(a1 + 296);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)v41 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v41[16] = v18;
  v42 = *(_OWORD *)(a1 + 152);
  v19 = *(_OWORD *)(a1 + 72);
  v37 = *(_OWORD *)(a1 + 56);
  v38 = v19;
  v39 = *(_OWORD *)(a1 + 88);
  v40 = v17;
  if ((v16 & 1) != 0)
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  ScrollGeometry.visibleRect.getter();
  result = CGRect.subscript.getter();
  v23 = v22;
  if (v21 > 0.0)
    v24 = v21;
  else
    v24 = 0.0;
  if (v24 >= v22)
  {
    specialized IncrementalStack<>.log(_:)(v21, v22);
LABEL_19:
    result = specialized _IncrementalStack_State.reset()();
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)a7 = 0u;
    return result;
  }
  if (v24 > v22)
  {
    __break(1u);
    return result;
  }
  v25 = *(double *)(a1 + 40);
  *(_QWORD *)&v37 = *(_QWORD *)(a1 + 32);
  v26 = specialized HVGrid.minorGeometry(updatingSize:)((double *)&v37, a3);
  v28 = v27;
  if (v26 < 1 || (v29 = v37, *(double *)&v37 <= 0.0) || v25 <= 0.0)
  {
    swift_bridgeObjectRelease();
    specialized IncrementalStack<>.log(_:)(v24, v23);
    goto LABEL_19;
  }
  v30 = v26;
  v31 = *(_QWORD *)(a2 + 16);
  if (!v31
    || v26 != *(_QWORD *)a2
    || *(double *)&v37 != *(double *)(a2 + 8)
    || (swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        v35 = specialized static Array<A>.== infix(_:_:)(v28, v31),
        swift_bridgeObjectRelease_n(),
        swift_bridgeObjectRelease(),
        (v35 & 1) == 0))
  {
    specialized _IncrementalStack_State.reset()();
  }
  v32 = *(_DWORD *)(a1 + 48);
  v40 = 0u;
  memset(v41, 0, 31);
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  v33 = MEMORY[0x1E0DEE9D8];
  v36 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v34 = specialized Dictionary.init(dictionaryLiteral:)(v33);
  *(_QWORD *)a7 = a3;
  *(_QWORD *)(a7 + 8) = a4;
  *(_QWORD *)(a7 + 16) = a5;
  *(_BYTE *)(a7 + 24) = a6 & 1;
  *(_DWORD *)(a7 + 28) = HIDWORD(a6);
  *(_QWORD *)(a7 + 40) = v30;
  *(_QWORD *)(a7 + 48) = v29;
  *(_QWORD *)(a7 + 56) = v28;
  *(_BYTE *)(a7 + 32) = 1;
  *(double *)(a7 + 64) = v24;
  *(double *)(a7 + 72) = v23;
  *(_DWORD *)(a7 + 80) = v32;
  *(_QWORD *)(a7 + 88) = 0;
  *(_BYTE *)(a7 + 96) = 1;
  *(_QWORD *)(a7 + 104) = 0;
  *(_BYTE *)(a7 + 112) = 0;
  *(_QWORD *)(a7 + 120) = 0;
  *(_QWORD *)(a7 + 128) = 0;
  *(_BYTE *)(a7 + 136) = 1;
  *(_QWORD *)(a7 + 144) = v33;
  *(_QWORD *)(a7 + 152) = 0;
  outlined init with take of Image.Resolved?((uint64_t)&v37, a7 + 160, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child);
  *(_QWORD *)(a7 + 256) = v33;
  *(_QWORD *)(a7 + 264) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a7 + 272) = 0x8000000000000000;
  *(_QWORD *)(a7 + 280) = 0x7FF0000000000000;
  *(_OWORD *)(a7 + 288) = xmmword_187C05370;
  *(_QWORD *)(a7 + 304) = 0xFFF0000000000000;
  *(_BYTE *)(a7 + 312) = 0;
  *(_QWORD *)(a7 + 320) = v36;
  *(_QWORD *)(a7 + 328) = v34;
  return swift_bridgeObjectRetain();
}

uint64_t specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5, double a6)
{
  return specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:), a6);
}

{
  return specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:), a6);
}

{
  return specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:), a6);
}

{
  return specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, (double (*)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:), a6);
}

uint64_t specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t a2, char a3, char a4, char a5, double (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), double a7)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int isUniquelyReferenced_nonNull_native;
  char *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v34;
  uint64_t v35;

  v35 = *(_QWORD *)(result + 16);
  if (!v35)
    return result;
  v10 = result;
  specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, 0, 1, 1, a7);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 0;
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 0;
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 0;
  v34 = (_BYTE *)(v11 + 16);
  if ((a4 & 1) != 0)
  {
    v13 = v7[5];
    v14 = v7[13];
    v15 = __OFSUB__(v14, v13);
    v16 = v14 - v13;
    if (v15)
    {
      __break(1u);
LABEL_34:
      result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v7[13] = v16;
    *(_BYTE *)(v12 + 16) = 1;
  }
  swift_bridgeObjectRetain();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v17 = 0;
  v18 = 8 * v35 + 24;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v20 = v30;
  v31 = v12;
  while (1)
  {
    v21 = v19;
    v7[18] = *(_QWORD *)(v10 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v17 == 1)
    {
      *(_BYTE *)(v20 + 16) = 1;
LABEL_20:
      specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(0, v7, v12, a5 & 1, v11, v20, a6);
LABEL_21:
      v19 = v21;
      goto LABEL_22;
    }
    if (v17)
    {
      *(_BYTE *)(v12 + 16) = 1;
      goto LABEL_20;
    }
    v22 = v7[18];
    if (v7[19])
      v23 = (_QWORD *)v7[19];
    else
      v23 = v19;
    v7[18] = (uint64_t)v23;
    v7[19] = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = (char *)v7[18];
    if (!isUniquelyReferenced_nonNull_native)
    {
      if (*((_QWORD *)v25 + 3) >= 2uLL)
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v19 = (_QWORD *)swift_allocObject();
        v29 = _swift_stdlib_malloc_size_0(v19);
        v19[2] = 0;
        v19[3] = 2 * ((uint64_t)(v29 - 32) / 96);
      }
      v7[18] = (uint64_t)v19;
      swift_bridgeObjectRelease();
      v12 = v31;
      goto LABEL_21;
    }
    v26 = *((_QWORD *)v25 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 1, v25);
    swift_arrayDestroy();
    if (v26)
    {
      v27 = v11;
      v28 = *((_QWORD *)v25 + 2) - v26;
      if (v28 < 0)
        goto LABEL_34;
      memmove(v25 + 32, &v25[96 * v26 + 32], 96 * v28);
      *((_QWORD *)v25 + 2) = v28;
      v11 = v27;
      v19 = v21;
    }
    v7[18] = (uint64_t)v25;
    v20 = v30;
    v12 = v31;
LABEL_22:
    if (*v34 == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (__OFADD__(v17, 1))
      break;
    ++v17;
    v18 -= 8;
    if (v35 == v17)
      goto LABEL_32;
  }
  __break(1u);
LABEL_32:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_BYTE *)(v20 + 16) = 1;
  swift_beginAccess();
  *(_BYTE *)(v12 + 16) = 1;
  specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a3 & 1, v7, v12, a5 & 1, v11, v20, a6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t a2, char a3, char a4, char a5, double (*a6)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double), double a7)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int isUniquelyReferenced_nonNull_native;
  char *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v34;
  uint64_t v35;

  v35 = *(_QWORD *)(result + 16);
  if (!v35)
    return result;
  v10 = result;
  specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, 0, 1, 1, a7);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 0;
  v30 = swift_allocObject();
  *(_BYTE *)(v30 + 16) = 0;
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 0;
  v34 = (_BYTE *)(v11 + 16);
  if ((a4 & 1) != 0)
  {
    v13 = v7[4];
    v14 = v7[12];
    v15 = __OFSUB__(v14, v13);
    v16 = v14 - v13;
    if (v15)
    {
      __break(1u);
LABEL_34:
      result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v7[12] = v16;
    *(_BYTE *)(v12 + 16) = 1;
  }
  swift_bridgeObjectRetain();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v17 = 0;
  v18 = 8 * v35 + 24;
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v20 = v30;
  v31 = v12;
  while (1)
  {
    v21 = v19;
    v7[17] = *(_QWORD *)(v10 + v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v17 == 1)
    {
      *(_BYTE *)(v20 + 16) = 1;
LABEL_20:
      specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(0, v7, v12, a5 & 1, v11, v20, a6);
LABEL_21:
      v19 = v21;
      goto LABEL_22;
    }
    if (v17)
    {
      *(_BYTE *)(v12 + 16) = 1;
      goto LABEL_20;
    }
    v22 = v7[17];
    if (v7[18])
      v23 = (_QWORD *)v7[18];
    else
      v23 = v19;
    v7[17] = (uint64_t)v23;
    v7[18] = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = (char *)v7[17];
    if (!isUniquelyReferenced_nonNull_native)
    {
      if (*((_QWORD *)v25 + 3) >= 2uLL)
      {
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_IncrementalLayout_Child>, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v19 = (_QWORD *)swift_allocObject();
        v29 = _swift_stdlib_malloc_size_0(v19);
        v19[2] = 0;
        v19[3] = 2 * ((uint64_t)(v29 - 32) / 96);
      }
      v7[17] = (uint64_t)v19;
      swift_bridgeObjectRelease();
      v12 = v31;
      goto LABEL_21;
    }
    v26 = *((_QWORD *)v25 + 2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 1, v25);
    swift_arrayDestroy();
    if (v26)
    {
      v27 = v11;
      v28 = *((_QWORD *)v25 + 2) - v26;
      if (v28 < 0)
        goto LABEL_34;
      memmove(v25 + 32, &v25[96 * v26 + 32], 96 * v28);
      *((_QWORD *)v25 + 2) = v28;
      v11 = v27;
      v19 = v21;
    }
    v7[17] = (uint64_t)v25;
    v20 = v30;
    v12 = v31;
LABEL_22:
    if (*v34 == 1)
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    if (__OFADD__(v17, 1))
      break;
    ++v17;
    v18 -= 8;
    if (v35 == v17)
      goto LABEL_32;
  }
  __break(1u);
LABEL_32:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_BYTE *)(v20 + 16) = 1;
  swift_beginAccess();
  *(_BYTE *)(v12 + 16) = 1;
  specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a3 & 1, v7, v12, a5 & 1, v11, v20, a6);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55[3];
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  char v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v82 = 0;
  v83 = 0;
  v81 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v71);
  v5 = v71;
  v4 = v72;
  v7 = v73;
  v6 = v74;
  v8 = v75;
  v9 = v76;
  v10 = v77;
  v11 = v80;
  if (v72)
  {
    v48 = a3;
    v12 = v74 & 1;
    v13 = v76 & 1;
    v14 = v77;
    v15 = v78;
    v16 = v79;
    v17 = v80;
    v18 = v82;
    v53 = v81;
    v19 = *(_QWORD *)(v81 + 16);
    v50 = v83;
    result = swift_bridgeObjectRetain();
    if (v18 == v19)
    {
      v51 = v5;
    }
    else
    {
      v23 = v18;
      v41 = v19;
      while (2)
      {
        v24 = 0;
        v49 = v4;
        v45 = v12;
        v46 = v8;
        v47 = v13;
        v25 = v14;
        v26 = v15;
        v27 = v16;
        v28 = v17;
        v43 = v19 - v23;
        v44 = v7;
        v42 = v19 - v23 - 1;
        v29 = 72 * v23;
        v51 = v5;
        while (1)
        {
          if (v23 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v23 + v24) >= *(_QWORD *)(v53 + 16))
            goto LABEL_19;
          if (__OFADD__(v50 + v24, 1))
            goto LABEL_20;
          v30 = v23;
          v31 = *(_QWORD *)(v53 + v29 + 32);
          v32 = *(_QWORD *)(v53 + v29 + 40);
          v33 = *(_BYTE *)(v53 + v29 + 48);
          v34 = *(_QWORD *)(v53 + v29 + 56);
          v35 = *(_BYTE *)(v53 + v29 + 64);
          v14 = *(_QWORD *)(v53 + v29 + 72);
          v15 = *(_QWORD *)(v53 + v29 + 80);
          v16 = *(_QWORD *)(v53 + v29 + 88);
          v17 = *(_QWORD *)(v53 + v29 + 96);
          v63[0] = v50 + v24;
          v63[1] = v31;
          v36 = v32;
          v63[2] = v32;
          v12 = v33;
          v64 = v33;
          v37 = v34;
          v65 = v34;
          v13 = v35;
          v66 = v35;
          v67 = v14;
          v68 = v15;
          v69 = v16;
          v70 = v17;
          v55[0] = v5;
          v55[1] = v49;
          v55[2] = v44;
          v56 = v45 & 1;
          v57 = v46;
          v58 = v47 & 1;
          v59 = v25;
          v60 = v26;
          v61 = v27;
          v62 = v28;
          v4 = v31;
          swift_retain();
          v38 = v84;
          v39 = specialized closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v63, v55, a2);
          v84 = v38;
          if (v38)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of IncrementalChildPlacements<LazyVStackLayout>(a2);
          }
          if ((v39 & 1) != 0)
            break;
          result = swift_release();
          ++v24;
          v29 += 72;
          a3 = v48;
          v5 = v51;
          v23 = v30;
          if (v43 == v24)
          {
            v4 = v49;
            v7 = v44;
            v12 = v45;
            v8 = v46;
            v13 = v47;
            v14 = v25;
            v15 = v26;
            v16 = v27;
            v17 = v28;
            goto LABEL_17;
          }
        }
        result = swift_release();
        v23 = v30 + v24 + 1;
        v5 = v50 + v24;
        v50 += v24 + 1;
        v19 = v41;
        a3 = v48;
        v40 = v37;
        v7 = v36;
        v8 = v40;
        if (v42 != v24)
          continue;
        break;
      }
      v51 = v5;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    result = outlined release of IncrementalChildPlacements<LazyVStackLayout>(a2);
    *a3 = v51;
    a3[1] = v4;
    a3[2] = v7;
    a3[3] = v12 & 1;
    a3[4] = v8;
    a3[5] = v13 & 1;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = v16;
    a3[9] = v17;
  }
  else
  {
    v21 = v71;
    v54 = v79;
    v22 = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = outlined release of IncrementalChildPlacements<LazyVStackLayout>(a2);
    *a3 = v21;
    a3[1] = 0;
    a3[2] = v7;
    a3[3] = v6;
    a3[4] = v8;
    a3[5] = v9;
    a3[6] = v10;
    a3[7] = v22;
    a3[8] = v54;
    a3[9] = v11;
  }
  return result;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, int *a4@<X3>, _DWORD *a5@<X4>, int *a6@<X5>, unint64_t *a7@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63[3];
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  char v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v90 = 0;
  v91 = 0;
  v89 = a1;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v79);
  v9 = v79;
  v8 = v80;
  v11 = v81;
  v10 = v82;
  v12 = v83;
  v13 = v84;
  v14 = v85;
  v15 = v88;
  if (v80)
  {
    v52 = a7;
    v16 = v82 & 1;
    v17 = v84 & 1;
    v18 = v85;
    v19 = v86;
    v20 = v87;
    v21 = v88;
    v22 = v90;
    v61 = v89;
    v23 = *(_QWORD *)(v89 + 16);
    v54 = v91;
    result = swift_bridgeObjectRetain();
    if (v22 == v23)
    {
      v55 = v9;
    }
    else
    {
      v27 = v22;
      v45 = v23;
      while (2)
      {
        v28 = 0;
        v53 = v8;
        v49 = v16;
        v50 = v12;
        v51 = v17;
        v29 = v18;
        v30 = v19;
        v31 = v20;
        v32 = v21;
        v47 = v23 - v27;
        v48 = v11;
        v46 = v23 - v27 - 1;
        v33 = 72 * v27;
        v55 = v9;
        while (1)
        {
          if (v27 < 0)
          {
            __break(1u);
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            return result;
          }
          if ((unint64_t)(v27 + v28) >= *(_QWORD *)(v61 + 16))
            goto LABEL_19;
          if (__OFADD__(v54 + v28, 1))
            goto LABEL_20;
          v34 = v27;
          v35 = *(_QWORD *)(v61 + v33 + 32);
          v36 = *(_QWORD *)(v61 + v33 + 40);
          v37 = *(_BYTE *)(v61 + v33 + 48);
          v38 = *(_QWORD *)(v61 + v33 + 56);
          v39 = *(_BYTE *)(v61 + v33 + 64);
          v18 = *(_QWORD *)(v61 + v33 + 72);
          v19 = *(_QWORD *)(v61 + v33 + 80);
          v20 = *(_QWORD *)(v61 + v33 + 88);
          v21 = *(_QWORD *)(v61 + v33 + 96);
          v71[0] = v54 + v28;
          v71[1] = v35;
          v40 = v36;
          v71[2] = v36;
          v16 = v37;
          v72 = v37;
          v41 = v38;
          v73 = v38;
          v17 = v39;
          v74 = v39;
          v75 = v18;
          v76 = v19;
          v77 = v20;
          v78 = v21;
          v63[0] = v9;
          v63[1] = v53;
          v63[2] = v48;
          v64 = v49 & 1;
          v65 = v50;
          v66 = v51 & 1;
          v67 = v29;
          v68 = v30;
          v69 = v31;
          v70 = v32;
          v8 = v35;
          swift_retain();
          v42 = v92;
          v43 = specialized closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v71, v63, a2, a3, a4, a5, a6);
          v92 = v42;
          if (v42)
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return outlined release of IncrementalChildPlacements<LazyVStackLayout>(a2);
          }
          if ((v43 & 1) != 0)
            break;
          result = swift_release();
          ++v28;
          v33 += 72;
          a7 = v52;
          v9 = v55;
          v27 = v34;
          if (v47 == v28)
          {
            v8 = v53;
            v11 = v48;
            v16 = v49;
            v12 = v50;
            v17 = v51;
            v18 = v29;
            v19 = v30;
            v20 = v31;
            v21 = v32;
            goto LABEL_17;
          }
        }
        result = swift_release();
        v27 = v34 + v28 + 1;
        v9 = v54 + v28;
        v54 += v28 + 1;
        v23 = v45;
        a7 = v52;
        v44 = v41;
        v11 = v40;
        v12 = v44;
        if (v46 != v28)
          continue;
        break;
      }
      v55 = v9;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    result = outlined release of IncrementalChildPlacements<LazyVStackLayout>(a2);
    *a7 = v55;
    a7[1] = v8;
    a7[2] = v11;
    a7[3] = v16 & 1;
    a7[4] = v12;
    a7[5] = v17 & 1;
    a7[6] = v18;
    a7[7] = v19;
    a7[8] = v20;
    a7[9] = v21;
  }
  else
  {
    v25 = v79;
    v62 = v87;
    v26 = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = outlined release of IncrementalChildPlacements<LazyVStackLayout>(a2);
    *a7 = v25;
    a7[1] = 0;
    a7[2] = v11;
    a7[3] = v10;
    a7[4] = v12;
    a7[5] = v13;
    a7[6] = v14;
    a7[7] = v26;
    a7[8] = v62;
    a7[9] = v15;
  }
  return result;
}

uint64_t specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  int isUniquelyReferenced_nonNull_native;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v6 = v5;
  v7 = (double *)(v5 + 144);
  *((_QWORD *)v7 - 5) = a1;
  *(v7 - 3) = a5;
  *((_BYTE *)v7 - 32) = a4;
  *((_QWORD *)v7 - 2) = a2;
  *((_BYTE *)v7 - 8) = a3 & 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v7;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(*(_QWORD *)&v9 + 16));
  }
  else
  {
    *(_QWORD *)v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(*(_QWORD *)&v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 152) = 0;
  outlined destroy of AccessibilityScrollableContext?(v6 + 160, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 239) = 0u;
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v6 + 256);
  if (v10)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v11 + 16));
  }
  else
  {
    *(_QWORD *)(v6 + 256) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v11 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v6 + 264) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v6 + 272) = 0x8000000000000000;
  *(_QWORD *)(v6 + 280) = 0x7FF0000000000000;
  *(_OWORD *)(v6 + 288) = xmmword_187C05370;
  *(_QWORD *)(v6 + 304) = 0xFFF0000000000000;
  *(_BYTE *)(v6 + 312) = 0;
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 320) = v13;
  v14 = specialized Dictionary.init(dictionaryLiteral:)(v12);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 328) = v14;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  int isUniquelyReferenced_nonNull_native;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v6 = v5;
  v7 = (double *)(v5 + 136);
  *((_QWORD *)v7 - 5) = a1;
  *(v7 - 3) = a5;
  *((_BYTE *)v7 - 32) = a4;
  *((_QWORD *)v7 - 2) = a2;
  *((_BYTE *)v7 - 8) = a3 & 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v7;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(*(_QWORD *)&v9 + 16));
  }
  else
  {
    *(_QWORD *)v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(*(_QWORD *)&v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 144) = 0;
  outlined destroy of AccessibilityScrollableContext?(v6 + 152, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 231) = 0u;
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v6 + 248);
  if (v10)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v11 + 16));
  }
  else
  {
    *(_QWORD *)(v6 + 248) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v11 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)(v6 + 256) = xmmword_187C05350;
  *(_OWORD *)(v6 + 272) = xmmword_187C05360;
  *(_OWORD *)(v6 + 288) = xmmword_187C05360;
  *(_BYTE *)(v6 + 304) = 0;
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 312) = v13;
  v14 = specialized Dictionary.init(dictionaryLiteral:)(v12);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 320) = v14;
  return result;
}

BOOL specialized closure #1 in StackPlacement.place(children:from:position:stopping:style:)(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[12];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[23];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[23];
  char v25;

  outlined init with copy of _IncrementalLayout_Children.Node(a2, (uint64_t)&v18);
  if (v25 != 1)
  {
    v15 = v22;
    v16 = v23;
    *(_OWORD *)v17 = *(_OWORD *)v24;
    *(_QWORD *)&v17[15] = *(_QWORD *)&v24[15];
    v11 = v18;
    v12 = v19;
    v13 = v20;
    v14 = v21;
    MEMORY[0x1E0C80A78](&v12, v5);
    v10[11] = *(_QWORD *)&v17[8];
    v8 = outlined init with copy of _ViewList_Node(v7, (uint64_t)v10);
    MEMORY[0x1E0C80A78](v8, v9);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v10);
    swift_bridgeObjectRelease();
    outlined destroy of _IncrementalLayout_Children((uint64_t)&v11);
    if ((*a3 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    result = 1;
    goto LABEL_6;
  }
  v11 = v18;
  v12 = v19;
  v13 = v20;
  LODWORD(v14) = v21;
  specialized StackPlacement.placeSection(_:from:)(&v11, a1);
  outlined release of _IncrementalLayout_Section((uint64_t)&v11);
  if ((*a3 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5F70);
LABEL_6:
  *a3 = result;
  return result;
}

{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[12];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[23];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[23];
  char v25;

  outlined init with copy of _IncrementalLayout_Children.Node(a2, (uint64_t)&v18);
  if (v25 != 1)
  {
    v15 = v22;
    v16 = v23;
    *(_OWORD *)v17 = *(_OWORD *)v24;
    *(_QWORD *)&v17[15] = *(_QWORD *)&v24[15];
    v11 = v18;
    v12 = v19;
    v13 = v20;
    v14 = v21;
    MEMORY[0x1E0C80A78](&v12, v5);
    v10[11] = *(_QWORD *)&v17[8];
    v8 = outlined init with copy of _ViewList_Node(v7, (uint64_t)v10);
    MEMORY[0x1E0C80A78](v8, v9);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v10);
    swift_bridgeObjectRelease();
    outlined destroy of _IncrementalLayout_Children((uint64_t)&v11);
    if ((*a3 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    result = 1;
    goto LABEL_6;
  }
  v11 = v18;
  v12 = v19;
  v13 = v20;
  LODWORD(v14) = v21;
  specialized StackPlacement.placeSection(_:from:)(&v11, a1);
  outlined release of _IncrementalLayout_Section((uint64_t)&v11);
  if ((*a3 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  result = specialized StackPlacement.shouldStop()(0x8000000187BD6020);
LABEL_6:
  *a3 = result;
  return result;
}

{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[12];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[23];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[23];
  char v25;

  outlined init with copy of _IncrementalLayout_Children.Node(a2, (uint64_t)&v18);
  if (v25 != 1)
  {
    v15 = v22;
    v16 = v23;
    *(_OWORD *)v17 = *(_OWORD *)v24;
    *(_QWORD *)&v17[15] = *(_QWORD *)&v24[15];
    v11 = v18;
    v12 = v19;
    v13 = v20;
    v14 = v21;
    MEMORY[0x1E0C80A78](&v12, v5);
    v10[11] = *(_QWORD *)&v17[8];
    v8 = outlined init with copy of _ViewList_Node(v7, (uint64_t)v10);
    MEMORY[0x1E0C80A78](v8, v9);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v10);
    swift_bridgeObjectRelease();
    outlined destroy of _IncrementalLayout_Children((uint64_t)&v11);
    if ((*a3 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    result = 1;
    goto LABEL_6;
  }
  v11 = v18;
  v12 = v19;
  v13 = v20;
  LODWORD(v14) = v21;
  specialized StackPlacement.placeSection(_:from:)(&v11, a1);
  outlined release of _IncrementalLayout_Section((uint64_t)&v11);
  if ((*a3 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5D00);
LABEL_6:
  *a3 = result;
  return result;
}

{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[12];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[23];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[23];
  char v25;

  outlined init with copy of _IncrementalLayout_Children.Node(a2, (uint64_t)&v18);
  if (v25 != 1)
  {
    v15 = v22;
    v16 = v23;
    *(_OWORD *)v17 = *(_OWORD *)v24;
    *(_QWORD *)&v17[15] = *(_QWORD *)&v24[15];
    v11 = v18;
    v12 = v19;
    v13 = v20;
    v14 = v21;
    MEMORY[0x1E0C80A78](&v12, v5);
    v10[11] = *(_QWORD *)&v17[8];
    v8 = outlined init with copy of _ViewList_Node(v7, (uint64_t)v10);
    MEMORY[0x1E0C80A78](v8, v9);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v10);
    swift_bridgeObjectRelease();
    outlined destroy of _IncrementalLayout_Children((uint64_t)&v11);
    if ((*a3 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    result = 1;
    goto LABEL_6;
  }
  v11 = v18;
  v12 = v19;
  v13 = v20;
  LODWORD(v14) = v21;
  specialized StackPlacement.placeSection(_:from:)(&v11, a1);
  outlined release of _IncrementalLayout_Section((uint64_t)&v11);
  if ((*a3 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5BF0);
LABEL_6:
  *a3 = result;
  return result;
}

uint64_t specialized StackPlacement.placeSection(_:from:)(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  _BYTE v31[16];
  _BYTE v32[88];
  uint64_t v33;
  uint64_t v34;

  outlined destroy of AccessibilityScrollableContext?(v2 + 160, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 239) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5F70);
  if ((result & 1) != 0)
    return result;
  v34 = 0;
  v6 = a1[1];
  v26 = *a1;
  v27 = v6;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v7 = _IncrementalLayout_Section.header.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v7, v8);
  v30 = v33;
  v9 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v9, v10);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5F70);
  if ((result & 1) != 0)
    return result;
  v11 = a1[1];
  v26 = *a1;
  v27 = v11;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v12 = _IncrementalLayout_Section.content.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v12, v13);
  v30 = v33;
  v14 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v14, v15);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  result = outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  v16 = *a2;
  if (*a2)
  {
    v17 = *(_QWORD *)(v2 + 40) & 0x7FFFFFFFFFFFFFFFLL;
    if (v17 != 1)
    {
      if (v17)
      {
        v18 = v16 % v17;
        v19 = __OFSUB__(v16, v18);
        v20 = v16 - v18;
        if (!v19)
        {
          *a2 = v20;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5F70);
  if ((result & 1) == 0 || *(double *)(v2 + 64) < *(double *)(v2 + 120) && (*(_BYTE *)(v2 + 80) & 2) != 0)
  {
    v30 = 0;
    v21 = a1[1];
    v26 = *a1;
    v27 = v21;
    v28 = a1[2];
    v29 = *((_DWORD *)a1 + 12);
    v22 = _IncrementalLayout_Section.footer.getter((uint64_t)v31);
    MEMORY[0x1E0C80A78](v22, v23);
    v24 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
    MEMORY[0x1E0C80A78](v24, v25);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v26);
    swift_bridgeObjectRelease();
    return outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  _BYTE v31[16];
  _BYTE v32[88];
  uint64_t v33;
  uint64_t v34;

  outlined destroy of AccessibilityScrollableContext?(v2 + 160, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 239) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD6020);
  if ((result & 1) != 0)
    return result;
  v34 = 0;
  v6 = a1[1];
  v26 = *a1;
  v27 = v6;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v7 = _IncrementalLayout_Section.header.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v7, v8);
  v30 = v33;
  v9 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v9, v10);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  result = specialized StackPlacement.shouldStop()(0x8000000187BD6020);
  if ((result & 1) != 0)
    return result;
  v11 = a1[1];
  v26 = *a1;
  v27 = v11;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v12 = _IncrementalLayout_Section.content.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v12, v13);
  v30 = v33;
  v14 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v14, v15);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  result = outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  v16 = *a2;
  if (*a2)
  {
    v17 = *(_QWORD *)(v2 + 40) & 0x7FFFFFFFFFFFFFFFLL;
    if (v17 != 1)
    {
      if (v17)
      {
        v18 = v16 % v17;
        v19 = __OFSUB__(v16, v18);
        v20 = v16 - v18;
        if (!v19)
        {
          *a2 = v20;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD6020);
  if ((result & 1) == 0 || *(double *)(v2 + 64) < *(double *)(v2 + 120) && (*(_BYTE *)(v2 + 80) & 2) != 0)
  {
    v30 = 0;
    v21 = a1[1];
    v26 = *a1;
    v27 = v21;
    v28 = a1[2];
    v29 = *((_DWORD *)a1 + 12);
    v22 = _IncrementalLayout_Section.footer.getter((uint64_t)v31);
    MEMORY[0x1E0C80A78](v22, v23);
    v24 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
    MEMORY[0x1E0C80A78](v24, v25);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v26);
    swift_bridgeObjectRelease();
    return outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  _BYTE v31[16];
  _BYTE v32[88];
  uint64_t v33;
  uint64_t v34;

  outlined destroy of AccessibilityScrollableContext?(v2 + 152, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 231) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5D00);
  if ((result & 1) != 0)
    return result;
  v34 = 0;
  v6 = a1[1];
  v26 = *a1;
  v27 = v6;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v7 = _IncrementalLayout_Section.header.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v7, v8);
  v30 = v33;
  v9 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v9, v10);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5D00);
  if ((result & 1) != 0)
    return result;
  v11 = a1[1];
  v26 = *a1;
  v27 = v11;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v12 = _IncrementalLayout_Section.content.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v12, v13);
  v30 = v33;
  v14 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v14, v15);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  result = outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  v16 = *a2;
  if (*a2)
  {
    v17 = *(_QWORD *)(v2 + 32) & 0x7FFFFFFFFFFFFFFFLL;
    if (v17 != 1)
    {
      if (v17)
      {
        v18 = v16 % v17;
        v19 = __OFSUB__(v16, v18);
        v20 = v16 - v18;
        if (!v19)
        {
          *a2 = v20;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5D00);
  if ((result & 1) == 0 || *(double *)(v2 + 56) < *(double *)(v2 + 112) && (*(_BYTE *)(v2 + 72) & 2) != 0)
  {
    v30 = 0;
    v21 = a1[1];
    v26 = *a1;
    v27 = v21;
    v28 = a1[2];
    v29 = *((_DWORD *)a1 + 12);
    v22 = _IncrementalLayout_Section.footer.getter((uint64_t)v31);
    MEMORY[0x1E0C80A78](v22, v23);
    v24 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
    MEMORY[0x1E0C80A78](v24, v25);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v26);
    swift_bridgeObjectRelease();
    return outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  _BYTE v31[16];
  _BYTE v32[88];
  uint64_t v33;
  uint64_t v34;

  outlined destroy of AccessibilityScrollableContext?(v2 + 152, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 231) = 0u;
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5BF0);
  if ((result & 1) != 0)
    return result;
  v34 = 0;
  v6 = a1[1];
  v26 = *a1;
  v27 = v6;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v7 = _IncrementalLayout_Section.header.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v7, v8);
  v30 = v33;
  v9 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v9, v10);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5BF0);
  if ((result & 1) != 0)
    return result;
  v11 = a1[1];
  v26 = *a1;
  v27 = v11;
  v28 = a1[2];
  v29 = *((_DWORD *)a1 + 12);
  v12 = _IncrementalLayout_Section.content.getter((uint64_t)v31);
  MEMORY[0x1E0C80A78](v12, v13);
  v30 = v33;
  v14 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
  MEMORY[0x1E0C80A78](v14, v15);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v26);
  swift_bridgeObjectRelease();
  result = outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  v16 = *a2;
  if (*a2)
  {
    v17 = *(_QWORD *)(v2 + 32) & 0x7FFFFFFFFFFFFFFFLL;
    if (v17 != 1)
    {
      if (v17)
      {
        v18 = v16 % v17;
        v19 = __OFSUB__(v16, v18);
        v20 = v16 - v18;
        if (!v19)
        {
          *a2 = v20;
          goto LABEL_8;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
LABEL_8:
  specialized StackPlacement.flushMinorGroup()();
  result = specialized StackPlacement.shouldStop()(0x8000000187BD5BF0);
  if ((result & 1) == 0 || *(double *)(v2 + 56) < *(double *)(v2 + 112) && (*(_BYTE *)(v2 + 72) & 2) != 0)
  {
    v30 = 0;
    v21 = a1[1];
    v26 = *a1;
    v27 = v21;
    v28 = a1[2];
    v29 = *((_DWORD *)a1 + 12);
    v22 = _IncrementalLayout_Section.footer.getter((uint64_t)v31);
    MEMORY[0x1E0C80A78](v22, v23);
    v24 = outlined init with copy of _ViewList_Node((uint64_t)v32, (uint64_t)&v26);
    MEMORY[0x1E0C80A78](v24, v25);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)&v26);
    swift_bridgeObjectRelease();
    return outlined destroy of _IncrementalLayout_Children((uint64_t)v31);
  }
  return result;
}

BOOL specialized StackPlacement.shouldStop()(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;

  v3 = v1;
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0)
  {
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Log.LazyLayoutPrefetch.log);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        v8 = swift_slowAlloc();
        v10 = v8;
        *(_DWORD *)v7 = 136446210;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000006DLL, a1, &v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_186E48000, v5, v6, "%{public}s: Stopping placement because deadline passed", v7, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v8, -1, -1);
        MEMORY[0x18D760108](v7, -1, -1);
      }

    }
    result = 1;
    *(_BYTE *)(v3 + 312) = 1;
  }
  else if ((*(_BYTE *)(v1 + 136) & 1) != 0)
  {
    return *(double *)(v1 + 72) <= *(double *)(v1 + 120);
  }
  else
  {
    return *(_QWORD *)(v1 + 128) < *(_QWORD *)(v1 + 104);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;

  v3 = v1;
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0)
  {
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
    {
      if (one-time initialization token for log != -1)
        swift_once();
      v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Log.LazyLayoutPrefetch.log);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        v8 = swift_slowAlloc();
        v10 = v8;
        *(_DWORD *)v7 = 136446210;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000047, a1, &v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_186E48000, v5, v6, "%{public}s: Stopping placement because deadline passed", v7, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v8, -1, -1);
        MEMORY[0x18D760108](v7, -1, -1);
      }

    }
    result = 1;
    *(_BYTE *)(v3 + 304) = 1;
  }
  else if ((*(_BYTE *)(v1 + 128) & 1) != 0)
  {
    return *(double *)(v1 + 64) <= *(double *)(v1 + 112);
  }
  else
  {
    return *(_QWORD *)(v1 + 120) < *(_QWORD *)(v1 + 96);
  }
  return result;
}

void specialized StackPlacement.flushMinorGroup()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 16))
  {
    if ((*(_BYTE *)(v0 + 112) & 1) != 0)
    {
      *(_BYTE *)(v0 + 112) = 0;
    }
    else
    {
      v1 = (uint64_t *)(v0 + 152);
      v2 = *(_QWORD *)(v0 + 152);
      v3 = *(_QWORD *)(v0 + 56);
      v4 = *(_QWORD *)(v0 + 8);
      v19 = *(_QWORD *)v0;
      v5 = *(_QWORD *)(v0 + 16);
      v6 = *(_BYTE *)(v0 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = swift_bridgeObjectRetain();
      specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:)(v7, v2, v3, v19, v4, v5, v6);
      v9 = v8;
      v11 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v2)
        v12 = *(_QWORD *)&v11;
      else
        v12 = 0;
      EstimationState.add(length:spacing:count:)(v12, v2 == 0, 1, *(double *)&v9);
      type metadata accessor for AGGraphRef(0);
      if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0)
      {
        *(_BYTE *)(v0 + 312) = 1;
LABEL_15:
        swapChildren(_:_:)(v1, (uint64_t *)(v0 + 144));
        return;
      }
      *(double *)(v0 + 120) = v11 + *(double *)(v0 + 120);
      if ((specialized StackPlacement.isVisible(length:)(*(double *)&v9) & 1) != 0)
      {
        specialized StackPlacement.addVisibleChild(length:spacing:)(*(double *)&v9, v11);
        specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E0CE4020], 1, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
        v13 = *(_QWORD *)(v0 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v14 = swift_bridgeObjectRetain();
        specialized HVGrid.place(children:length:minorGeometry:emit:)(v14, v9, 0, v13, v0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      *(double *)(v0 + 120) = *(double *)&v9 + *(double *)(v0 + 120);
    }
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = __OFADD__(v16, v15);
    v18 = v16 + v15;
    if (!v17)
    {
      *(_QWORD *)(v0 + 104) = v18;
      v1 = (uint64_t *)(v0 + 152);
      goto LABEL_15;
    }
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 16))
  {
    if ((*(_BYTE *)(v0 + 112) & 1) != 0)
    {
      *(_BYTE *)(v0 + 112) = 0;
    }
    else
    {
      v1 = (uint64_t *)(v0 + 152);
      v2 = *(_QWORD *)(v0 + 152);
      v3 = *(_QWORD *)(v0 + 56);
      v4 = *(_QWORD *)(v0 + 8);
      v19 = *(_QWORD *)v0;
      v5 = *(_QWORD *)(v0 + 16);
      v6 = *(_BYTE *)(v0 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = swift_bridgeObjectRetain();
      specialized HVGrid.lengthAndSpacing(children:predecessors:minorGeometry:)(v7, v2, v3, v19, v4, v5, v6);
      v9 = v8;
      v11 = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v2)
        v12 = *(_QWORD *)&v11;
      else
        v12 = 0;
      EstimationState.add(length:spacing:count:)(v12, v2 == 0, 1, *(double *)&v9);
      type metadata accessor for AGGraphRef(0);
      if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0)
      {
        *(_BYTE *)(v0 + 312) = 1;
LABEL_15:
        swapChildren(_:_:)(v1, (uint64_t *)(v0 + 144));
        return;
      }
      *(double *)(v0 + 120) = v11 + *(double *)(v0 + 120);
      if ((specialized StackPlacement.isVisible(length:)(*(double *)&v9) & 1) != 0)
      {
        specialized StackPlacement.addVisibleChild(length:spacing:)(*(double *)&v9, v11);
        specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E0CE47F8], 0, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
        v13 = *(_QWORD *)(v0 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v14 = swift_bridgeObjectRetain();
        specialized HVGrid.place(children:length:minorGeometry:emit:)(v14, v9, 0, v13, v0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      *(double *)(v0 + 120) = *(double *)&v9 + *(double *)(v0 + 120);
    }
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v0 + 104);
    v17 = __OFADD__(v16, v15);
    v18 = v16 + v15;
    if (!v17)
    {
      *(_QWORD *)(v0 + 104) = v18;
      v1 = (uint64_t *)(v0 + 152);
      goto LABEL_15;
    }
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 136);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 136) + 16))
  {
    if ((*(_BYTE *)(v0 + 104) & 1) != 0)
    {
      *(_BYTE *)(v0 + 104) = 0;
    }
    else
    {
      v3 = (uint64_t *)(v0 + 144);
      v4 = *(_QWORD *)(v0 + 144);
      v5 = *(_QWORD *)v0;
      v6 = *(_QWORD *)(v0 + 8);
      v7 = *(_BYTE *)(v0 + 16);
      swift_bridgeObjectRetain();
      v8 = swift_bridgeObjectRetain();
      specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:)(v8, v4, v5, v6, v7);
      v10 = v9;
      v12 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4)
        v13 = *(_QWORD *)&v12;
      else
        v13 = 0;
      EstimationState.add(length:spacing:count:)(v13, v4 == 0, 1, *(double *)&v10);
      type metadata accessor for AGGraphRef(0);
      if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0)
      {
        *(_BYTE *)(v0 + 304) = 1;
LABEL_15:
        swapChildren(_:_:)(v3, v2);
        return;
      }
      *(double *)(v0 + 112) = v12 + *(double *)(v0 + 112);
      if ((specialized StackPlacement.isVisible(length:)(*(double *)&v10) & 1) != 0)
      {
        specialized StackPlacement.addVisibleChild(length:spacing:)(*(double *)&v10, v12);
        specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E0CE4020], 1, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
        v14 = *(_QWORD *)v0;
        v15 = *(_QWORD *)(v1 + 8);
        v16 = *(_BYTE *)(v1 + 16);
        v17 = *(unsigned int *)(v1 + 20);
        v18 = swift_bridgeObjectRetain();
        specialized LazyHVStack<>.place(children:length:minorGeometry:emit:)(v18, v10, 0, v14, v15, v16 | (unint64_t)(v17 << 32), v1);
        swift_bridgeObjectRelease();
      }
      *(double *)(v1 + 112) = *(double *)&v10 + *(double *)(v1 + 112);
    }
    v19 = *(_QWORD *)(v1 + 32);
    v20 = *(_QWORD *)(v1 + 96);
    v21 = __OFADD__(v20, v19);
    v22 = v20 + v19;
    if (!v21)
    {
      *(_QWORD *)(v1 + 96) = v22;
      v3 = (uint64_t *)(v1 + 144);
      goto LABEL_15;
    }
    __break(1u);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v1 = v0;
  v2 = (uint64_t *)(v0 + 136);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 136) + 16))
  {
    if ((*(_BYTE *)(v0 + 104) & 1) != 0)
    {
      *(_BYTE *)(v0 + 104) = 0;
    }
    else
    {
      v3 = (uint64_t *)(v0 + 144);
      v4 = *(_QWORD *)(v0 + 144);
      v5 = *(_QWORD *)v0;
      v6 = *(_QWORD *)(v0 + 8);
      v7 = *(_BYTE *)(v0 + 16);
      swift_bridgeObjectRetain();
      v8 = swift_bridgeObjectRetain();
      specialized LazyHVStack<>.lengthAndSpacing(children:predecessors:minorGeometry:)(v8, v4, v5, v6, v7);
      v10 = v9;
      v12 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4)
        v13 = *(_QWORD *)&v12;
      else
        v13 = 0;
      EstimationState.add(length:spacing:count:)(v13, v4 == 0, 1, *(double *)&v10);
      type metadata accessor for AGGraphRef(0);
      if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0)
      {
        *(_BYTE *)(v0 + 304) = 1;
LABEL_15:
        swapChildren(_:_:)(v3, v2);
        return;
      }
      *(double *)(v0 + 112) = v12 + *(double *)(v0 + 112);
      if ((specialized StackPlacement.isVisible(length:)(*(double *)&v10) & 1) != 0)
      {
        specialized StackPlacement.addVisibleChild(length:spacing:)(*(double *)&v10, v12);
        specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E0CE47F8], 0, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
        v14 = *(_QWORD *)v0;
        v15 = *(_QWORD *)(v1 + 8);
        v16 = *(_BYTE *)(v1 + 16);
        v17 = *(unsigned int *)(v1 + 20);
        v18 = swift_bridgeObjectRetain();
        specialized LazyHVStack<>.place(children:length:minorGeometry:emit:)(v18, v10, 0, v14, v15, v16 | (unint64_t)(v17 << 32), v1);
        swift_bridgeObjectRelease();
      }
      *(double *)(v1 + 112) = *(double *)&v10 + *(double *)(v1 + 112);
    }
    v19 = *(_QWORD *)(v1 + 32);
    v20 = *(_QWORD *)(v1 + 96);
    v21 = __OFADD__(v20, v19);
    v22 = v20 + v19;
    if (!v21)
    {
      *(_QWORD *)(v1 + 96) = v22;
      v3 = (uint64_t *)(v1 + 144);
      goto LABEL_15;
    }
    __break(1u);
  }
}

void specialized StackPlacement.addVisibleChild(length:spacing:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;

  v3 = *(_QWORD *)(v2 + 104);
  v4 = *(_QWORD *)(v2 + 272);
  if (v3 >= *(_QWORD *)(v2 + 264))
    v5 = *(_QWORD *)(v2 + 264);
  else
    v5 = *(_QWORD *)(v2 + 104);
  v6 = *(_QWORD *)(v2 + 40);
  v7 = __OFADD__(v3, v6);
  v8 = v3 + v6;
  v9 = v7;
  if (v8 - 1 > v4)
    v4 = v8 - 1;
  v10 = *(double *)(v2 + 120);
  v11 = v10 - a2;
  v12 = *(double *)(v2 + 288);
  if (v11 >= *(double *)(v2 + 280))
    v11 = *(double *)(v2 + 280);
  *(_QWORD *)(v2 + 264) = v5;
  *(_QWORD *)(v2 + 272) = v4;
  v13 = v10 + a1;
  if (v12 > v13)
    v14 = v12;
  else
    v14 = v13;
  *(double *)(v2 + 280) = v11;
  *(double *)(v2 + 288) = v14;
  if ((*(_BYTE *)(v2 + 96) & 1) == 0)
  {
    if ((v9 & 1) != 0)
    {
      __break(1u);
    }
    else if (v8 >= v3)
    {
      v15 = *(_QWORD *)(v2 + 88);
      if (v15 >= v3 && v15 < v8)
      {
        v16 = *(double *)(v2 + 296);
        if (v10 < v16)
          v16 = v10;
        if (*(double *)(v2 + 304) > v13)
          v13 = *(double *)(v2 + 304);
        *(double *)(v2 + 296) = v16;
        *(double *)(v2 + 304) = v13;
      }
      return;
    }
    __break(1u);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;

  v3 = *(_QWORD *)(v2 + 96);
  v4 = *(_QWORD *)(v2 + 264);
  if (v3 >= *(_QWORD *)(v2 + 256))
    v5 = *(_QWORD *)(v2 + 256);
  else
    v5 = *(_QWORD *)(v2 + 96);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = __OFADD__(v3, v6);
  v8 = v3 + v6;
  v9 = v7;
  if (v8 - 1 > v4)
    v4 = v8 - 1;
  v10 = *(double *)(v2 + 112);
  v11 = v10 - a2;
  v12 = *(double *)(v2 + 280);
  if (v11 >= *(double *)(v2 + 272))
    v11 = *(double *)(v2 + 272);
  *(_QWORD *)(v2 + 256) = v5;
  *(_QWORD *)(v2 + 264) = v4;
  v13 = v10 + a1;
  if (v12 > v13)
    v14 = v12;
  else
    v14 = v13;
  *(double *)(v2 + 272) = v11;
  *(double *)(v2 + 280) = v14;
  if ((*(_BYTE *)(v2 + 88) & 1) == 0)
  {
    if ((v9 & 1) != 0)
    {
      __break(1u);
    }
    else if (v8 >= v3)
    {
      v15 = *(_QWORD *)(v2 + 80);
      if (v15 >= v3 && v15 < v8)
      {
        v16 = *(double *)(v2 + 288);
        if (v10 < v16)
          v16 = v10;
        if (*(double *)(v2 + 296) > v13)
          v13 = *(double *)(v2 + 296);
        *(double *)(v2 + 288) = v16;
        *(double *)(v2 + 296) = v13;
      }
      return;
    }
    __break(1u);
  }
}

uint64_t specialized StackPlacement.placeHeaderOrFooter(start:child:kind:)(uint64_t result, uint64_t a2, unsigned __int8 a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  char v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[3];

  v8 = v7;
  v11 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v12 = *(_QWORD *)(v7 + 40);
    v13 = __OFSUB__(v11, v12);
    v14 = v11 - v12;
    if (!v13)
    {
      *(_QWORD *)result = v14;
      if (a3 == 1)
      {
        v15 = v7 + 160;
        v16 = MEMORY[0x1E0DEB940];
        outlined init with copy of AccessibilityScrollableContext?(v15, (uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v17 = v59;
        result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))v16);
        if (!v17)
        {
          outlined destroy of AccessibilityScrollableContext?(v15, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          return outlined init with copy of _IncrementalLayout_Child(a2, v15);
        }
      }
      return result;
    }
    __break(1u);
    goto LABEL_50;
  }
  if ((*(_BYTE *)(v7 + 112) & 1) == 0)
  {
    v22 = *(_BYTE *)(v7 + 32);
    result = _ProposedSize.init(_:in:by:)();
    v51 = v55;
    v52 = v56;
    v53 = v57;
    v54 = v58;
    v23 = *(_QWORD *)(v8 + 152);
    if (v23)
    {
      if (!*(_QWORD *)(v23 + 16))
      {
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of _IncrementalLayout_Child(v23 + 32, (uint64_t)&v59);
    }
    else
    {
      v62 = 0u;
      memset(v63, 0, 31);
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
    }
    v24 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v51, v22, (uint64_t)&v59, *(_QWORD *)(v8 + 16), *(_BYTE *)(v8 + 24));
    v26 = v25;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (*(_QWORD *)(v8 + 152))
      v27 = *(_QWORD *)&v26;
    else
      v27 = 0;
    EstimationState.add(length:spacing:count:)(v27, *(_QWORD *)(v8 + 152) == 0, 1, v24);
    *(double *)(v8 + 120) = v26 + *(double *)(v8 + 120);
    result = specialized StackPlacement.isVisible(length:)(v24);
    if ((result & 1) != 0)
    {
      specialized StackPlacement.addVisibleChild(length:spacing:)(v24, v26);
    }
    else
    {
      if ((*(_BYTE *)(v8 + 80) & 2) == 0 || a3 != 2)
      {
        if (a3 == 1)
        {
          v37 = MEMORY[0x1E0DEB940];
          outlined init with copy of AccessibilityScrollableContext?(v8 + 160, (uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          v38 = v59;
          result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))v37);
          if (!v38)
          {
            outlined destroy of AccessibilityScrollableContext?(v8 + 160, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            result = outlined init with copy of _IncrementalLayout_Child(a2, v8 + 160);
          }
        }
        goto LABEL_36;
      }
      if (*(_QWORD *)(v8 + 264) >= *(_QWORD *)(v8 + 272))
      {
LABEL_36:
        *(double *)(v8 + 120) = v24 + *(double *)(v8 + 120);
        goto LABEL_37;
      }
    }
    specialized StackPlacement.flushPendingHeader()(a4, a5, a6, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))a7);
    if (*(_BYTE *)(v8 + 32))
      v28 = 0.0;
    else
      v28 = *(double *)(v8 + 120);
    if (*(_BYTE *)(v8 + 32))
      v29 = *(double *)(v8 + 120);
    else
      v29 = 0.0;
    v30 = _ProposedSize.init(_:in:by:)();
    v31 = v59;
    v32 = BYTE8(v60);
    v33 = a3;
    v50 = v60;
    v34 = BYTE8(v59);
    if (v33 == 1 || v33 == 2)
    {
      *(_QWORD *)&v59 = *(_QWORD *)(v8 + 8);
      a4(v30);
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
    }
    else
    {
      static UnitPoint.center.getter();
    }
    LOBYTE(v59) = v34;
    LOBYTE(v55) = v32;
    result = a7(a2, v31, v34, v50, v32, v28, v29, v35, v36);
    goto LABEL_36;
  }
  *(_BYTE *)(v7 + 112) = 0;
  if (a3 == 1)
  {
    outlined destroy of AccessibilityScrollableContext?(v7 + 160, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    result = outlined init with copy of _IncrementalLayout_Child(a2, v7 + 160);
  }
LABEL_37:
  v39 = *(_QWORD *)(v8 + 40);
  v40 = *(_QWORD *)(v8 + 104);
  v13 = __OFADD__(v40, v39);
  v41 = v40 + v39;
  if (v13)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(_QWORD *)(v8 + 104) = v41;
  if (v39 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v39)
  {
    v42 = *(char **)(v8 + 144);
    do
    {
      outlined init with copy of _IncrementalLayout_Child(a2, (uint64_t)&v59);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
      v44 = *((_QWORD *)v42 + 2);
      v43 = *((_QWORD *)v42 + 3);
      if (v44 >= v43 >> 1)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v42);
      *((_QWORD *)v42 + 2) = v44 + 1;
      v45 = &v42[96 * v44];
      v46 = v60;
      *((_OWORD *)v45 + 2) = v59;
      *((_OWORD *)v45 + 3) = v46;
      v47 = v61;
      v48 = v62;
      v49 = v63[0];
      *(_OWORD *)(v45 + 111) = *(_OWORD *)((char *)v63 + 15);
      *((_OWORD *)v45 + 5) = v48;
      *((_OWORD *)v45 + 6) = v49;
      *((_OWORD *)v45 + 4) = v47;
      --v39;
    }
    while (v39);
    *(_QWORD *)(v8 + 144) = v42;
  }
  return swapChildren(_:_:)((uint64_t *)(v8 + 152), (uint64_t *)(v8 + 144));
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  char v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[3];

  v8 = v7;
  v11 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v12 = *(_QWORD *)(v7 + 32);
    v13 = __OFSUB__(v11, v12);
    v14 = v11 - v12;
    if (!v13)
    {
      *(_QWORD *)result = v14;
      if (a3 == 1)
      {
        v15 = v7 + 152;
        v16 = MEMORY[0x1E0DEB940];
        outlined init with copy of AccessibilityScrollableContext?(v15, (uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v17 = v59;
        result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))v16);
        if (!v17)
        {
          outlined destroy of AccessibilityScrollableContext?(v15, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          return outlined init with copy of _IncrementalLayout_Child(a2, v15);
        }
      }
      return result;
    }
    __break(1u);
    goto LABEL_50;
  }
  if ((*(_BYTE *)(v7 + 104) & 1) == 0)
  {
    v22 = *(_BYTE *)(v7 + 24);
    result = _ProposedSize.init(_:in:by:)();
    v51 = v55;
    v52 = v56;
    v53 = v57;
    v54 = v58;
    v23 = *(_QWORD *)(v8 + 144);
    if (v23)
    {
      if (!*(_QWORD *)(v23 + 16))
      {
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of _IncrementalLayout_Child(v23 + 32, (uint64_t)&v59);
    }
    else
    {
      v62 = 0u;
      memset(v63, 0, 31);
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
    }
    v24 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v51, v22, (uint64_t)&v59, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
    v26 = v25;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (*(_QWORD *)(v8 + 144))
      v27 = *(_QWORD *)&v26;
    else
      v27 = 0;
    EstimationState.add(length:spacing:count:)(v27, *(_QWORD *)(v8 + 144) == 0, 1, v24);
    *(double *)(v8 + 112) = v26 + *(double *)(v8 + 112);
    result = specialized StackPlacement.isVisible(length:)(v24);
    if ((result & 1) != 0)
    {
      specialized StackPlacement.addVisibleChild(length:spacing:)(v24, v26);
    }
    else
    {
      if ((*(_BYTE *)(v8 + 72) & 2) == 0 || a3 != 2)
      {
        if (a3 == 1)
        {
          v37 = MEMORY[0x1E0DEB940];
          outlined init with copy of AccessibilityScrollableContext?(v8 + 152, (uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          v38 = v59;
          result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v59, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))v37);
          if (!v38)
          {
            outlined destroy of AccessibilityScrollableContext?(v8 + 152, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            result = outlined init with copy of _IncrementalLayout_Child(a2, v8 + 152);
          }
        }
        goto LABEL_36;
      }
      if (*(_QWORD *)(v8 + 256) >= *(_QWORD *)(v8 + 264))
      {
LABEL_36:
        *(double *)(v8 + 112) = v24 + *(double *)(v8 + 112);
        goto LABEL_37;
      }
    }
    specialized StackPlacement.flushPendingHeader()(a4, a5, a6, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))a7);
    if (*(_BYTE *)(v8 + 24))
      v28 = 0.0;
    else
      v28 = *(double *)(v8 + 112);
    if (*(_BYTE *)(v8 + 24))
      v29 = *(double *)(v8 + 112);
    else
      v29 = 0.0;
    v30 = _ProposedSize.init(_:in:by:)();
    v31 = v59;
    v32 = BYTE8(v60);
    v33 = a3;
    v50 = v60;
    v34 = BYTE8(v59);
    if (v33 == 1 || v33 == 2)
    {
      *(_QWORD *)&v59 = *(_QWORD *)v8;
      a4(v30);
      AlignmentGuide.fraction.getter();
      UnitPoint.init(_:in:by:)();
    }
    else
    {
      static UnitPoint.center.getter();
    }
    LOBYTE(v59) = v34;
    LOBYTE(v55) = v32;
    result = a7(a2, v31, v34, v50, v32, v28, v29, v35, v36);
    goto LABEL_36;
  }
  *(_BYTE *)(v7 + 104) = 0;
  if (a3 == 1)
  {
    outlined destroy of AccessibilityScrollableContext?(v7 + 152, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    result = outlined init with copy of _IncrementalLayout_Child(a2, v7 + 152);
  }
LABEL_37:
  v39 = *(_QWORD *)(v8 + 32);
  v40 = *(_QWORD *)(v8 + 96);
  v13 = __OFADD__(v40, v39);
  v41 = v40 + v39;
  if (v13)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(_QWORD *)(v8 + 96) = v41;
  if (v39 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v39)
  {
    v42 = *(char **)(v8 + 136);
    do
    {
      outlined init with copy of _IncrementalLayout_Child(a2, (uint64_t)&v59);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
      v44 = *((_QWORD *)v42 + 2);
      v43 = *((_QWORD *)v42 + 3);
      if (v44 >= v43 >> 1)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1, v42);
      *((_QWORD *)v42 + 2) = v44 + 1;
      v45 = &v42[96 * v44];
      v46 = v60;
      *((_OWORD *)v45 + 2) = v59;
      *((_OWORD *)v45 + 3) = v46;
      v47 = v61;
      v48 = v62;
      v49 = v63[0];
      *(_OWORD *)(v45 + 111) = *(_OWORD *)((char *)v63 + 15);
      *((_OWORD *)v45 + 5) = v48;
      *((_OWORD *)v45 + 6) = v49;
      *((_OWORD *)v45 + 4) = v47;
      --v39;
    }
    while (v39);
    *(_QWORD *)(v8 + 136) = v42;
  }
  return swapChildren(_:_:)((uint64_t *)(v8 + 144), (uint64_t *)(v8 + 136));
}

BOOL specialized closure #1 in closure #1 in StackPlacement.place(children:from:position:stopping:style:)(uint64_t a1, _BYTE *a2, uint64_t a3, void (*a4)(void), unint64_t a5)
{
  char *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BOOL8 result;
  _OWORD v19[4];
  _OWORD v20[2];

  outlined init with copy of _IncrementalLayout_Child(a1, (uint64_t)v19);
  v9 = *(char **)(a3 + 144);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a3 + 144) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    *(_QWORD *)(a3 + 144) = v9;
  }
  v12 = *((_QWORD *)v9 + 2);
  v11 = *((_QWORD *)v9 + 3);
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9);
    *(_QWORD *)(a3 + 144) = v9;
  }
  *((_QWORD *)v9 + 2) = v12 + 1;
  v13 = &v9[96 * v12];
  v14 = v19[1];
  *((_OWORD *)v13 + 2) = v19[0];
  *((_OWORD *)v13 + 3) = v14;
  v15 = v19[2];
  v16 = v19[3];
  v17 = v20[0];
  *(_OWORD *)(v13 + 111) = *(_OWORD *)((char *)v20 + 15);
  *((_OWORD *)v13 + 5) = v16;
  *((_OWORD *)v13 + 6) = v17;
  *((_OWORD *)v13 + 4) = v15;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 144) + 16) == *(_QWORD *)(a3 + 40))
    a4();
  result = specialized StackPlacement.shouldStop()(a5);
  *a2 = result;
  return result;
}

{
  char *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BOOL8 result;
  _OWORD v19[4];
  _OWORD v20[2];

  outlined init with copy of _IncrementalLayout_Child(a1, (uint64_t)v19);
  v9 = *(char **)(a3 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a3 + 136) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    *(_QWORD *)(a3 + 136) = v9;
  }
  v12 = *((_QWORD *)v9 + 2);
  v11 = *((_QWORD *)v9 + 3);
  if (v12 >= v11 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9);
    *(_QWORD *)(a3 + 136) = v9;
  }
  *((_QWORD *)v9 + 2) = v12 + 1;
  v13 = &v9[96 * v12];
  v14 = v19[1];
  *((_OWORD *)v13 + 2) = v19[0];
  *((_OWORD *)v13 + 3) = v14;
  v15 = v19[2];
  v16 = v19[3];
  v17 = v20[0];
  *(_OWORD *)(v13 + 111) = *(_OWORD *)((char *)v20 + 15);
  *((_OWORD *)v13 + 5) = v16;
  *((_OWORD *)v13 + 6) = v17;
  *((_OWORD *)v13 + 4) = v15;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 136) + 16) == *(_QWORD *)(a3 + 32))
    a4();
  result = specialized StackPlacement.shouldStop()(a5);
  *a2 = result;
  return result;
}

uint64_t specialized StackPlacement.isVisible(length:)(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  _BOOL4 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(v1 + 136) == 1)
  {
    v2 = *(double *)(v1 + 120);
    v3 = *(double *)(v1 + 64);
    if (v3 <= v2)
      v3 = *(double *)(v1 + 120);
    v4 = v2 + a1;
    if (v4 >= *(double *)(v1 + 72))
      v4 = *(double *)(v1 + 72);
    v5 = a1 == 0.0;
    if (v3 != v4)
      v5 = 0;
    return v3 < v4 || v5;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 104);
    v8 = *(_QWORD *)(v1 + 40) + v7;
    if (v8 < v7)
    {
      __break(1u);
    }
    else
    {
      v9 = *(_QWORD *)(v1 + 128);
      return v9 >= v7 && v9 < v8;
    }
  }
  return result;
}

{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  _BOOL4 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(v1 + 128) == 1)
  {
    v2 = *(double *)(v1 + 112);
    v3 = *(double *)(v1 + 56);
    if (v3 <= v2)
      v3 = *(double *)(v1 + 112);
    v4 = v2 + a1;
    if (v4 >= *(double *)(v1 + 64))
      v4 = *(double *)(v1 + 64);
    v5 = a1 == 0.0;
    if (v3 != v4)
      v5 = 0;
    return v3 < v4 || v5;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 96);
    v8 = *(_QWORD *)(v1 + 32) + v7;
    if (v8 < v7)
    {
      __break(1u);
    }
    else
    {
      v9 = *(_QWORD *)(v1 + 120);
      return v9 >= v7 && v9 < v8;
    }
  }
  return result;
}

uint64_t specialized StackPlacement.flushPendingHeader()(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))
{
  uint64_t v4;
  _OWORD *v7;
  char v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[4];
  _OWORD v34[3];

  v7 = (_OWORD *)(v4 + 160);
  outlined init with copy of AccessibilityScrollableContext?(v4 + 160, (uint64_t)&v28, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (!(_QWORD)v28)
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v28, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v33[2] = v30;
  v33[3] = v31;
  v34[0] = v32[0];
  *(_OWORD *)((char *)v34 + 15) = *(_OWORD *)((char *)v32 + 15);
  v33[0] = v28;
  v33[1] = v29;
  if ((*(_BYTE *)(v4 + 80) & 1) == 0 || (*(_BYTE *)(v4 + 136) & 1) == 0)
    return outlined destroy of _IncrementalLayout_Child((uint64_t)v33);
  v8 = *(_BYTE *)(v4 + 32);
  _ProposedSize.init(_:in:by:)();
  v20 = v24;
  v21 = v25;
  v22 = v26;
  v23 = v27;
  v31 = 0u;
  memset(v32, 0, 31);
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v9 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v20, v8, (uint64_t)&v28, *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v28, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (*(_BYTE *)(v4 + 32))
    v10 = 0.0;
  else
    v10 = -v9;
  if (*(_BYTE *)(v4 + 32))
    v11 = -v9;
  else
    v11 = 0.0;
  v12 = _ProposedSize.init(_:in:by:)();
  v19 = v28;
  v13 = BYTE8(v28);
  v14 = v29;
  v15 = BYTE8(v29);
  *(_QWORD *)&v28 = *(_QWORD *)(v4 + 8);
  a1(v12);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  LOBYTE(v28) = v13;
  LOBYTE(v24) = v15;
  a4(v33, v19, v13, v14, v15, v10, v11, v16, v17);
  outlined destroy of _IncrementalLayout_Child((uint64_t)v33);
  result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v7, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *v7 = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 239) = 0u;
  return result;
}

{
  uint64_t v4;
  _OWORD *v7;
  char v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  _OWORD v33[4];
  _OWORD v34[3];

  v7 = (_OWORD *)(v4 + 152);
  outlined init with copy of AccessibilityScrollableContext?(v4 + 152, (uint64_t)&v28, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (!(_QWORD)v28)
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v28, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v33[2] = v30;
  v33[3] = v31;
  v34[0] = v32[0];
  *(_OWORD *)((char *)v34 + 15) = *(_OWORD *)((char *)v32 + 15);
  v33[0] = v28;
  v33[1] = v29;
  if ((*(_BYTE *)(v4 + 72) & 1) == 0 || (*(_BYTE *)(v4 + 128) & 1) == 0)
    return outlined destroy of _IncrementalLayout_Child((uint64_t)v33);
  v8 = *(_BYTE *)(v4 + 24);
  _ProposedSize.init(_:in:by:)();
  v20 = v24;
  v21 = v25;
  v22 = v26;
  v23 = v27;
  v31 = 0u;
  memset(v32, 0, 31);
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v9 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v20, v8, (uint64_t)&v28, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v28, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (*(_BYTE *)(v4 + 24))
    v10 = 0.0;
  else
    v10 = -v9;
  if (*(_BYTE *)(v4 + 24))
    v11 = -v9;
  else
    v11 = 0.0;
  v12 = _ProposedSize.init(_:in:by:)();
  v19 = v28;
  v13 = BYTE8(v28);
  v14 = v29;
  v15 = BYTE8(v29);
  *(_QWORD *)&v28 = *(_QWORD *)v4;
  a1(v12);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  LOBYTE(v28) = v13;
  LOBYTE(v24) = v15;
  a4(v33, v19, v13, v14, v15, v10, v11, v16, v17);
  outlined destroy of _IncrementalLayout_Child((uint64_t)v33);
  result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v7, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  *v7 = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 231) = 0u;
  return result;
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _OWORD v35[6];
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  _BYTE v44[104];

  v12 = result;
  v13 = a2 + 18;
  v14 = a2[18];
  v15 = *(_QWORD *)(v14 + 16);
  if ((result & 1) != 0 || v15)
  {
    v16 = a2 + 19;
    v17 = a2[19];
    if (!v17)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v15)
    {
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(v17 + 16))
      {
LABEL_6:
        v34 = a3;
        outlined init with copy of _IncrementalLayout_Child(v17 + 32, (uint64_t)v44);
        if ((v44[93] & 1) == 0 && v44[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _IncrementalLayout_Child((uint64_t)v44);
          v21 = *a2;
          v30 = a2[2];
          v31 = a2[1];
          v32 = a6;
          v22 = *((_BYTE *)a2 + 24);
          v23 = a2[7];
          v29 = *((unsigned int *)a2 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOBYTE(v35[0]) = v22;
          v16 = a2 + 19;
          v18 = a7(v17, v14, v23, v21, v31, v30, LOBYTE(v35[0]) | (unint64_t)(v29 << 32));
          v20 = v24;
          a6 = v32;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 = v34;
          goto LABEL_16;
        }
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)v44);
        outlined init with copy of _IncrementalLayout_Child(v17 + 32, (uint64_t)v44);
        swift_bridgeObjectRelease();
        result = _ProposedSize.init(_:in:by:)();
        v36 = v40;
        v37 = v41;
        v38 = v42;
        v39 = v43;
        LOBYTE(a7) = *((_BYTE *)a2 + 32);
        if (v14)
        {
          if (!*(_QWORD *)(v14 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _IncrementalLayout_Child(v14 + 32, (uint64_t)v35);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v35, 0, 95);
        a3 = v34;
LABEL_14:
        v18 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v36, (char)a7, (uint64_t)v35, a2[2], *((_BYTE *)a2 + 24));
        v20 = v19;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v35, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of _IncrementalLayout_Child((uint64_t)v44);
LABEL_16:
        result = swift_beginAccess();
        if (*(_BYTE *)(a3 + 16) == 1)
          *((double *)a2 + 15) = *((double *)a2 + 15) - v18;
        v25 = a2[13];
        if (v25)
        {
          result = swift_beginAccess();
          if ((*(_BYTE *)(a3 + 16) & 1) != 0)
            *((double *)a2 + 15) = *((double *)a2 + 15) - v20;
        }
        if (v20 + *((double *)a2 + 15) <= *((double *)a2 + 8) && (v12 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *(_BYTE *)(a5 + 16) = 1;
          return swapChildren(_:_:)(v16, v13);
        }
        v26 = a2[5];
        v27 = __OFSUB__(v25, v26);
        v28 = v25 - v26;
        if (!v27)
        {
          swift_beginAccess();
          if (*(_BYTE *)(a6 + 16) == 1 && (v28 & 0x8000000000000000) == 0)
            a2[13] = v28;
          return swapChildren(_:_:)(v16, v13);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      v14 = 0;
      if (*(_QWORD *)(v17 + 16))
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(children:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double (*a7)(uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, double))
{
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v31[6];
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  _BYTE v40[104];

  v11 = result;
  v12 = a2 + 17;
  v13 = a2[17];
  v14 = *(_QWORD *)(v13 + 16);
  if ((result & 1) != 0 || v14)
  {
    v15 = a2 + 18;
    v16 = a2[18];
    if (!v16)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      if (*(_QWORD *)(v16 + 16))
      {
LABEL_6:
        outlined init with copy of _IncrementalLayout_Child(v16 + 32, (uint64_t)v40);
        if ((v40[93] & 1) == 0 && v40[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _IncrementalLayout_Child((uint64_t)v40);
          v20 = *(double *)a2;
          v21 = a2[1];
          v22 = *((double *)a2 + 6);
          v23 = *((unsigned int *)a2 + 5);
          LOBYTE(v31[0]) = *((_BYTE *)a2 + 16);
          v17 = a7(v16, v13, *(_QWORD *)&v20, v21, LOBYTE(v31[0]) | (unint64_t)(v23 << 32), v22);
          v19 = v24;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        swift_bridgeObjectRetain();
        outlined destroy of _IncrementalLayout_Child((uint64_t)v40);
        outlined init with copy of _IncrementalLayout_Child(v16 + 32, (uint64_t)v40);
        swift_bridgeObjectRelease();
        result = _ProposedSize.init(_:in:by:)();
        v32 = v36;
        v33 = v37;
        v34 = v38;
        v35 = v39;
        LOBYTE(a7) = *((_BYTE *)a2 + 24);
        if (v13)
        {
          if (!*(_QWORD *)(v13 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _IncrementalLayout_Child(v13 + 32, (uint64_t)v31);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v31, 0, 95);
LABEL_14:
        v17 = _IncrementalLayout_Child.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(&v32, (char)a7, (uint64_t)v31, a2[1], *((_BYTE *)a2 + 16));
        v19 = v18;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v31, &lazy cache variable for type metadata for _IncrementalLayout_Child?, (uint64_t)&type metadata for _IncrementalLayout_Child, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined destroy of _IncrementalLayout_Child((uint64_t)v40);
LABEL_16:
        result = swift_beginAccess();
        if (*(_BYTE *)(a3 + 16) == 1)
          *((double *)a2 + 14) = *((double *)a2 + 14) - v17;
        v25 = a2[12];
        if (v25)
        {
          result = swift_beginAccess();
          if ((*(_BYTE *)(a3 + 16) & 1) != 0)
            *((double *)a2 + 14) = *((double *)a2 + 14) - v19;
        }
        if (v19 + *((double *)a2 + 14) <= *((double *)a2 + 7) && (v11 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *(_BYTE *)(a5 + 16) = 1;
          return swapChildren(_:_:)(v15, v12);
        }
        v26 = a2[4];
        v27 = __OFSUB__(v25, v26);
        v28 = v25 - v26;
        if (!v27)
        {
          swift_beginAccess();
          if (*(_BYTE *)(a6 + 16) == 1 && (v28 & 0x8000000000000000) == 0)
            a2[12] = v28;
          return swapChildren(_:_:)(v15, v12);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      v13 = 0;
      if (*(_QWORD *)(v16 + 16))
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t (*v4)(void);
  uint64_t Value;
  uint64_t result;
  uint64_t Strong;
  uint64_t v8;
  Swift::UInt v9;
  Swift::UInt v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v4 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v15, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))v4);
  if (v16 != 1)
  {
    Strong = swift_weakLoadStrong();
    result = outlined destroy of NavigationAuthority((uint64_t)v15);
    if (Strong)
    {
      v8 = *(_QWORD *)(Strong + 176);
      swift_retain();
      swift_release();
      v9 = *(_QWORD *)AGGraphGetValue();
      v10 = *(_QWORD *)AGGraphGetValue();
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, type metadata accessor for NavigationSelectionHost, (uint64_t)&protocol conformance descriptor for NavigationSelectionHost);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v11 = *(_QWORD *)(v8 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      if (*(_QWORD *)(v11 + 16))
      {
        v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9, *(_BYTE *)(a1 + 8), v10);
        if ((v13 & 1) != 0)
        {
          v14 = *(_DWORD *)(*(_QWORD *)(v11 + 56) + 4 * v12);
          result = swift_bridgeObjectRelease();
LABEL_8:
          *a2 = v14;
          return result;
        }
      }
      result = swift_bridgeObjectRelease();
    }
    v14 = 0;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t specialized _NavigationSplitReader.PreparedColumn.updateValue()()
{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  _QWORD *WeakValue;
  __int128 v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t Value;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  unsigned __int8 v23;
  Swift::UInt v24;
  Swift::UInt v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  _OWORD v48[9];
  __int16 v49;
  _OWORD v50[10];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;

  v1 = v0;
  v59 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && !*((_QWORD *)v0 + 4))
  {
    WeakValue = (_QWORD *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      *(_QWORD *)&v12 = *WeakValue;
    }
    else
    {
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
    }
    v37 = v12;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v37;
    swift_release();
    *((_QWORD *)v1 + 5) = v13;
    v14 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)&v51, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))v14);
    if (*((_QWORD *)&v51 + 1) == 1)
    {
      __break(1u);
      return result;
    }
    v17 = *((_BYTE *)v1 + 8);
    v18 = *(_QWORD *)AGGraphGetValue();
    v19 = *(_QWORD *)AGGraphGetValue();
    v20 = *(_BYTE *)AGGraphGetValue();
    outlined init with take of NavigationAuthority((uint64_t)&v51, (uint64_t)v5);
    *((_QWORD *)v5 + 3) = v18;
    v5[32] = v17;
    *((_QWORD *)v5 + 5) = v19;
    v5[48] = v20;
    swift_retain();
    UUID.init()();
    *(_QWORD *)&v5[*(int *)(v2 + 32)] = v13;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    *((_QWORD *)v1 + 4) = LocationBox.init(_:)();
  }
  else
  {
    v6 = *((_QWORD *)v0 + 5);
    if (v6)
    {
      v7 = (int *)AGGraphGetWeakValue();
      if (v7)
      {
        v8 = *v7;
        v9 = v7[1];
        swift_beginAccess();
        if (*(_DWORD *)(v6 + 16) != v8 || *(_DWORD *)(v6 + 20) != v9)
        {
          *(_DWORD *)(v6 + 16) = v8;
          *(_DWORD *)(v6 + 20) = v9;
        }
      }
    }
  }
  v21 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v22 = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(v22, (uint64_t)v57, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))v21);
  if (v58 == 1)
    __break(1u);
  v23 = *((_BYTE *)v1 + 8);
  v24 = *(_QWORD *)AGGraphGetValue();
  v25 = *(_QWORD *)AGGraphGetValue();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)&v51, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v51) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      v44 = v48[6];
      v45 = v48[7];
      v46 = v48[8];
      v47 = v49;
      v40 = v48[2];
      v41 = v48[3];
      v42 = v48[4];
      v43 = v48[5];
      v38 = v48[0];
      v39 = v48[1];
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v24, v23, v25);
      outlined retain of NavigationState?((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v57);
  v27 = *((unsigned __int8 *)v1 + 8);
  *(_QWORD *)&v37 = *(_QWORD *)AGGraphGetValue();
  v36 = *(_QWORD *)AGGraphGetValue();
  KeyPath = swift_getKeyPath();
  v28 = *((_QWORD *)v1 + 4);
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = (v27 - 1) < 2;
  *(_QWORD *)(v29 + 24) = v28;
  *(_BYTE *)(v29 + 32) = Strong & 1;
  v30 = swift_getKeyPath();
  v31 = v1[1];
  v50[0] = *v1;
  v50[1] = v31;
  v33 = *v1;
  v32 = v1[1];
  v50[2] = v1[2];
  v51 = v33;
  v52 = v32;
  v53 = v1[2];
  MEMORY[0x1E0C80A78](v30, v34);
  *(&KeyPath - 2) = (uint64_t)v50;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Detail, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Detail> and conformance _NavigationSplitReader.PreparedColumn<A>();
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  *(_QWORD *)&v51 = v37;
  *((_QWORD *)&v51 + 1) = v27;
  *(_QWORD *)&v52 = v36;
  *((_QWORD *)&v52 + 1) = -1;
  *(_QWORD *)&v53 = KeyPath;
  *((_QWORD *)&v53 + 1) = partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue();
  v54 = v29;
  v55 = v30;
  v56 = v48[0];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Detail);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  _QWORD *WeakValue;
  __int128 v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t Value;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  unsigned __int8 v23;
  Swift::UInt v24;
  Swift::UInt v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  _OWORD v48[9];
  __int16 v49;
  _OWORD v50[10];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;

  v1 = v0;
  v59 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && !*((_QWORD *)v0 + 4))
  {
    WeakValue = (_QWORD *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      *(_QWORD *)&v12 = *WeakValue;
    }
    else
    {
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
    }
    v37 = v12;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v37;
    swift_release();
    *((_QWORD *)v1 + 5) = v13;
    v14 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)&v51, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))v14);
    if (*((_QWORD *)&v51 + 1) == 1)
    {
      __break(1u);
      return result;
    }
    v17 = *((_BYTE *)v1 + 8);
    v18 = *(_QWORD *)AGGraphGetValue();
    v19 = *(_QWORD *)AGGraphGetValue();
    v20 = *(_BYTE *)AGGraphGetValue();
    outlined init with take of NavigationAuthority((uint64_t)&v51, (uint64_t)v5);
    *((_QWORD *)v5 + 3) = v18;
    v5[32] = v17;
    *((_QWORD *)v5 + 5) = v19;
    v5[48] = v20;
    swift_retain();
    UUID.init()();
    *(_QWORD *)&v5[*(int *)(v2 + 32)] = v13;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    *((_QWORD *)v1 + 4) = LocationBox.init(_:)();
  }
  else
  {
    v6 = *((_QWORD *)v0 + 5);
    if (v6)
    {
      v7 = (int *)AGGraphGetWeakValue();
      if (v7)
      {
        v8 = *v7;
        v9 = v7[1];
        swift_beginAccess();
        if (*(_DWORD *)(v6 + 16) != v8 || *(_DWORD *)(v6 + 20) != v9)
        {
          *(_DWORD *)(v6 + 16) = v8;
          *(_DWORD *)(v6 + 20) = v9;
        }
      }
    }
  }
  v21 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v22 = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(v22, (uint64_t)v57, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))v21);
  if (v58 == 1)
    __break(1u);
  v23 = *((_BYTE *)v1 + 8);
  v24 = *(_QWORD *)AGGraphGetValue();
  v25 = *(_QWORD *)AGGraphGetValue();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)&v51, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v51) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      v44 = v48[6];
      v45 = v48[7];
      v46 = v48[8];
      v47 = v49;
      v40 = v48[2];
      v41 = v48[3];
      v42 = v48[4];
      v43 = v48[5];
      v38 = v48[0];
      v39 = v48[1];
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v24, v23, v25);
      outlined retain of NavigationState?((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v57);
  v27 = *((unsigned __int8 *)v1 + 8);
  *(_QWORD *)&v37 = *(_QWORD *)AGGraphGetValue();
  v36 = *(_QWORD *)AGGraphGetValue();
  KeyPath = swift_getKeyPath();
  v28 = *((_QWORD *)v1 + 4);
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = (v27 - 1) < 2;
  *(_QWORD *)(v29 + 24) = v28;
  *(_BYTE *)(v29 + 32) = Strong & 1;
  v30 = swift_getKeyPath();
  v31 = v1[1];
  v50[0] = *v1;
  v50[1] = v31;
  v33 = *v1;
  v32 = v1[1];
  v50[2] = v1[2];
  v51 = v33;
  v52 = v32;
  v53 = v1[2];
  MEMORY[0x1E0C80A78](v30, v34);
  *(&KeyPath - 2) = (uint64_t)v50;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Content, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Content> and conformance _NavigationSplitReader.PreparedColumn<A>();
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  *(_QWORD *)&v51 = v37;
  *((_QWORD *)&v51 + 1) = v27;
  *(_QWORD *)&v52 = v36;
  *((_QWORD *)&v52 + 1) = -1;
  *(_QWORD *)&v53 = KeyPath;
  *((_QWORD *)&v53 + 1) = closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()specialized partial apply;
  v54 = v29;
  v55 = v30;
  v56 = v48[0];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Content);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  _QWORD *WeakValue;
  __int128 v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t Value;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  unsigned __int8 v23;
  Swift::UInt v24;
  Swift::UInt v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  _OWORD v48[9];
  __int16 v49;
  _OWORD v50[10];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;

  v1 = v0;
  v59 = *MEMORY[0x1E0C80C00];
  v2 = type metadata accessor for _NavigationSplitReader.SplitPresentationModeLocation();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&KeyPath - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && !*((_QWORD *)v0 + 4))
  {
    WeakValue = (_QWORD *)AGGraphGetWeakValue();
    if (WeakValue)
    {
      *(_QWORD *)&v12 = *WeakValue;
    }
    else
    {
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
    }
    v37 = v12;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for MutableBox<NavigationState.Seeds>, (uint64_t)&type metadata for NavigationState.Seeds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v37;
    swift_release();
    *((_QWORD *)v1 + 5) = v13;
    v14 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)&v51, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))v14);
    if (*((_QWORD *)&v51 + 1) == 1)
    {
      __break(1u);
      return result;
    }
    v17 = *((_BYTE *)v1 + 8);
    v18 = *(_QWORD *)AGGraphGetValue();
    v19 = *(_QWORD *)AGGraphGetValue();
    v20 = *(_BYTE *)AGGraphGetValue();
    outlined init with take of NavigationAuthority((uint64_t)&v51, (uint64_t)v5);
    *((_QWORD *)v5 + 3) = v18;
    v5[32] = v17;
    *((_QWORD *)v5 + 5) = v19;
    v5[48] = v20;
    swift_retain();
    UUID.init()();
    *(_QWORD *)&v5[*(int *)(v2 + 32)] = v13;
    type metadata accessor for LocationBox<_NavigationSplitReader.SplitPresentationModeLocation>();
    swift_allocObject();
    *((_QWORD *)v1 + 4) = LocationBox.init(_:)();
  }
  else
  {
    v6 = *((_QWORD *)v0 + 5);
    if (v6)
    {
      v7 = (int *)AGGraphGetWeakValue();
      if (v7)
      {
        v8 = *v7;
        v9 = v7[1];
        swift_beginAccess();
        if (*(_DWORD *)(v6 + 16) != v8 || *(_DWORD *)(v6 + 20) != v9)
        {
          *(_DWORD *)(v6 + 16) = v8;
          *(_DWORD *)(v6 + 20) = v9;
        }
      }
    }
  }
  v21 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v22 = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(v22, (uint64_t)v57, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))v21);
  if (v58 == 1)
    __break(1u);
  v23 = *((_BYTE *)v1 + 8);
  v24 = *(_QWORD *)AGGraphGetValue();
  v25 = *(_QWORD *)AGGraphGetValue();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_beginAccess();
    outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    outlined retain of NavigationState?((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)&v51, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v51) == 1)
    {
      LOBYTE(Strong) = 0;
    }
    else
    {
      outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
      v44 = v48[6];
      v45 = v48[7];
      v46 = v48[8];
      v47 = v49;
      v40 = v48[2];
      v41 = v48[3];
      v42 = v48[4];
      v43 = v48[5];
      v38 = v48[0];
      v39 = v48[1];
      LOBYTE(Strong) = NavigationState.canDismissRoot(of:)(v24, v23, v25);
      outlined retain of NavigationState?((uint64_t)v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    }
  }
  outlined destroy of NavigationAuthority((uint64_t)v57);
  v27 = *((unsigned __int8 *)v1 + 8);
  *(_QWORD *)&v37 = *(_QWORD *)AGGraphGetValue();
  v36 = *(_QWORD *)AGGraphGetValue();
  KeyPath = swift_getKeyPath();
  v28 = *((_QWORD *)v1 + 4);
  v29 = swift_allocObject();
  *(_BYTE *)(v29 + 16) = (v27 - 1) < 2;
  *(_QWORD *)(v29 + 24) = v28;
  *(_BYTE *)(v29 + 32) = Strong & 1;
  v30 = swift_getKeyPath();
  v31 = v1[1];
  v50[0] = *v1;
  v50[1] = v31;
  v33 = *v1;
  v32 = v1[1];
  v50[2] = v1[2];
  v51 = v33;
  v52 = v32;
  v53 = v1[2];
  MEMORY[0x1E0C80A78](v30, v34);
  *(&KeyPath - 2) = (uint64_t)v50;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t)&protocol witness table for NavigationSplitViewStyleConfiguration.Sidebar, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _NavigationSplitReader.PreparedColumn);
  lazy protocol witness table accessor for type _NavigationSplitReader.PreparedColumn<NavigationSplitViewStyleConfiguration.Sidebar> and conformance _NavigationSplitReader.PreparedColumn<A>();
  swift_retain();
  StatefulRule.withObservation<A>(do:)();
  *(_QWORD *)&v51 = v37;
  *((_QWORD *)&v51 + 1) = v27;
  *(_QWORD *)&v52 = v36;
  *((_QWORD *)&v52 + 1) = -1;
  *(_QWORD *)&v53 = KeyPath;
  *((_QWORD *)&v53 + 1) = closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()specialized partial apply;
  v54 = v29;
  v55 = v30;
  v56 = v48[0];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, &lazy cache variable for type metadata for ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, (uint64_t)&type metadata for NavigationSplitViewStyleConfiguration.Sidebar);
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t specialized IncrementalChildPlacements.transaction.getter()
{
  uint64_t v0;

  AGGraphClearUpdate();
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  _ViewInputs.transaction.getter();
  v0 = *(_QWORD *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  return v0;
}

uint64_t specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter()
{
  uint64_t WeakValue;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  AGGraphClearUpdate();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  WeakValue = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, (uint64_t)&v5);
  }
  else
  {
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
  }
  AGGraphSetUpdate();
  v1 = *((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v2 = v7;
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)&v5);
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t specialized IncrementalChildPlacements.updateValue()(void (*a1)(_OWORD *__return_ptr), uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, double, double), double (*a6)(_BYTE *, __int128 *, uint64_t), _DWORD *a7, int *a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v10;
  uint64_t v17;
  uint64_t result;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t Value;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  __int128 *v44;
  __int128 v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t OutputValue;
  BOOL v71;
  CGSize v72;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  int v77;
  double MinX;
  uint64_t v79;
  double v80;
  double MaxX;
  uint64_t v82;
  double MinY;
  uint64_t v84;
  double MaxY;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  uint64_t v93;
  __int128 v94;
  unsigned int CurrentAttribute;
  unsigned int v96;
  char v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, double, double);
  _DWORD *v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  CGFloat v133;
  char v134;
  int v135;
  int v136;
  double v137;
  double v138;
  double v139;
  double v140;
  CGFloat v141;
  CGFloat v142;
  __int128 recta;
  CGFloat rect;
  CGRect v145;
  _OWORD v146[14];
  char *v147;
  __int128 v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  __int128 v154[19];
  __int128 v155;
  _OWORD v156[2];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _OWORD v163[2];
  __int128 __src[21];
  _OWORD v165[8];
  _OWORD v166[2];
  _OWORD __dst[21];
  uint64_t v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;

  v17 = v10;
  v168 = *MEMORY[0x1E0C80C00];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0),
        result = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()(),
        (result & 1) == 0))
  {
    v123 = a2;
    v124 = a3;
    v125 = a4;
    v126 = a5;
    v19 = (_OWORD *)(v10 + 152);
    v20 = *(_OWORD *)(v10 + 248);
    v21 = *(_OWORD *)(v10 + 200);
    v165[2] = *(_OWORD *)(v10 + 184);
    v165[3] = v21;
    v22 = *(_OWORD *)(v10 + 232);
    v165[4] = *(_OWORD *)(v10 + 216);
    v165[5] = v22;
    v23 = *(_OWORD *)(v10 + 168);
    v165[0] = *(_OWORD *)(v10 + 152);
    v165[1] = v23;
    v24 = *(_OWORD *)(v10 + 264);
    v25 = *(_OWORD *)(v10 + 280);
    v165[6] = v20;
    v165[7] = v24;
    v26 = *(_QWORD *)(v10 + 128);
    v27 = *(_DWORD *)(v10 + 144);
    v166[0] = v25;
    *(_OWORD *)((char *)v166 + 9) = *(_OWORD *)(v10 + 289);
    type metadata accessor for IncrementalLayoutViewCache();
    Value = AGGraphGetValue();
    v29 = *(_QWORD *)Value;
    v30 = *(_DWORD *)(*(_QWORD *)Value + 40);
    v31 = *(_QWORD *)(*(_QWORD *)Value + 48);
    v32 = *(_DWORD *)(*(_QWORD *)Value + 112);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(*(_QWORD *)Value + 32);
    DWORD2(__dst[0]) = v30;
    *(_QWORD *)&__dst[1] = v31;
    *(_OWORD *)((char *)&__dst[1] + 8) = *(_OWORD *)(v29 + 56);
    *(_OWORD *)((char *)&__dst[2] + 8) = *(_OWORD *)(v29 + 72);
    *(_OWORD *)((char *)&__dst[3] + 8) = *(_OWORD *)(v29 + 88);
    *((_QWORD *)&__dst[4] + 1) = *(_QWORD *)(v29 + 104);
    LODWORD(__dst[5]) = v32;
    _ViewInputs.viewPhase.getter();
    v33 = *(_DWORD *)AGGraphGetValue() >> 1;
    v135 = v33;
    v136 = v27;
    if (v27 == v33)
    {
      v130 = v26;
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v33;
      v34 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v10 + 96) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v10 + 112) = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)v165);
      v35 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v10 + 128) = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v10 + 136) = v35;
      v130 = v35;
      LOBYTE(__dst[0]) = 1;
      *(_BYTE *)(v10 + 152) = 0;
      *(_OWORD *)(v10 + 160) = 0u;
      *(_OWORD *)(v10 + 176) = 0u;
      *(_OWORD *)(v10 + 192) = 0u;
      *(_OWORD *)(v10 + 208) = 0u;
      *(_OWORD *)(v10 + 224) = 0u;
      *(_OWORD *)(v10 + 240) = 0u;
      *(_OWORD *)(v10 + 256) = 0u;
      *(_OWORD *)(v10 + 272) = 0u;
      *(_OWORD *)(v10 + 288) = 0u;
      *(_BYTE *)(v10 + 304) = 1;
    }
    v37 = *(_DWORD *)(v10 + 8);
    v36 = *(_DWORD *)(v10 + 12);
    v38 = AGGraphGetValue();
    v134 = v39;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
    {
      __break(1u);
      goto LABEL_47;
    }
    v128 = *MEMORY[0x1E0CFED28];
    v129 = v36;
    v127 = a7;
    v41 = *(_QWORD *)(v38 + 24);
    v40 = *(_QWORD *)(v38 + 32);
    recta = *(_OWORD *)(v38 + 8);
    v42 = *(_QWORD *)v38;
    v43 = *(_DWORD *)(v10 + 36);
    swift_retain();
    LOBYTE(__dst[0]) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    *(_QWORD *)&v146[0] = *(_QWORD *)&__dst[0];
    *((_QWORD *)&v146[0] + 1) = __PAIR64__(v43, DWORD2(__dst[0]));
    v156[0] = *(_OWORD *)AGGraphGetValue();
    v44 = (__int128 *)AGGraphGetValue();
    v45 = v44[1];
    __src[0] = *v44;
    __src[1] = v45;
    *(_QWORD *)&__dst[0] = v42;
    *(_OWORD *)((char *)__dst + 8) = recta;
    *((_QWORD *)&__dst[1] + 1) = v41;
    *(_QWORD *)&__dst[2] = v40;
    AGGraphGetValue();
    LOBYTE(v145.origin.x) = *(_BYTE *)AGGraphGetValue();
    LODWORD(v147) = 0;
    v133 = *(double *)(v10 + 96);
    rect = *(double *)(v10 + 112);
    v141 = *(double *)(v10 + 104);
    v142 = *(double *)(v10 + 120);
    AGGraphGetValue();
    v46 = *(_BYTE *)AGGraphGetValue();
    swift_retain();
    _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v146, __src, (uint64_t)__dst, (char *)&v145, (int *)&v147, v46, (uint64_t)v154);
    v146[10] = *(__int128 *)((char *)&v154[13] + 8);
    v146[11] = *(__int128 *)((char *)&v154[14] + 8);
    v146[12] = *(__int128 *)((char *)&v154[15] + 8);
    v146[13] = *(__int128 *)((char *)&v154[16] + 8);
    v146[6] = *(__int128 *)((char *)&v154[9] + 8);
    v146[7] = *(__int128 *)((char *)&v154[10] + 8);
    v146[8] = *(__int128 *)((char *)&v154[11] + 8);
    v146[9] = *(__int128 *)((char *)&v154[12] + 8);
    v146[2] = *(__int128 *)((char *)&v154[5] + 8);
    v146[3] = *(__int128 *)((char *)&v154[6] + 8);
    v146[4] = *(__int128 *)((char *)&v154[7] + 8);
    v146[5] = *(__int128 *)((char *)&v154[8] + 8);
    v146[0] = *(__int128 *)((char *)&v154[3] + 8);
    v146[1] = *(__int128 *)((char *)&v154[4] + 8);
    v47 = *((_QWORD *)&v154[17] + 1);
    v48 = *(_QWORD *)&v154[18];
    v49 = BYTE8(v154[18]);
    __dst[4] = *(__int128 *)((char *)&v154[14] + 8);
    __dst[5] = *(__int128 *)((char *)&v154[15] + 8);
    __dst[6] = *(__int128 *)((char *)&v154[16] + 8);
    __dst[0] = *(__int128 *)((char *)&v154[10] + 8);
    __dst[1] = *(__int128 *)((char *)&v154[11] + 8);
    __dst[3] = *(__int128 *)((char *)&v154[13] + 8);
    __dst[2] = *(__int128 *)((char *)&v154[12] + 8);
    ScrollGeometry.visibleRect.getter();
    v139 = v51;
    v140 = v50;
    v145.origin.x = v50;
    v145.origin.y = v51;
    v137 = v53;
    v138 = v52;
    v145.size.width = v52;
    v145.size.height = v53;
    __dst[4] = *(__int128 *)((char *)&v154[7] + 8);
    __dst[5] = *(__int128 *)((char *)&v154[8] + 8);
    __dst[6] = *(__int128 *)((char *)&v154[9] + 8);
    __dst[0] = *(__int128 *)((char *)&v154[3] + 8);
    __dst[1] = *(__int128 *)((char *)&v154[4] + 8);
    __dst[3] = *(__int128 *)((char *)&v154[6] + 8);
    __dst[2] = *(__int128 *)((char *)&v154[5] + 8);
    if ((v49 & 1) != 0)
      ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v48, v47));
    v121 = v48;
    v122 = v47;
    ScrollGeometry.visibleRect.getter();
    v55 = v54;
    v57 = v56;
    v59 = v58;
    v61 = v60;
    __dst[4] = *(__int128 *)((char *)&v154[7] + 8);
    __dst[5] = *(__int128 *)((char *)&v154[8] + 8);
    __dst[6] = *(__int128 *)((char *)&v154[9] + 8);
    __dst[0] = *(__int128 *)((char *)&v154[3] + 8);
    __dst[1] = *(__int128 *)((char *)&v154[4] + 8);
    __dst[3] = *(__int128 *)((char *)&v154[6] + 8);
    __dst[2] = *(__int128 *)((char *)&v154[5] + 8);
    ScrollGeometry.visibleRect.getter();
    v63 = v62;
    v65 = v64;
    v67 = v66;
    v69 = v68;
    OutputValue = AGGraphGetOutputValue();
    if (v136 != v135 || !OutputValue)
    {
      *(double *)(v17 + 160) = v140;
      *(double *)(v17 + 168) = v139;
      *(double *)(v17 + 176) = v138;
      *(double *)(v17 + 184) = v137;
      *(_QWORD *)(v17 + 192) = v63;
      *(_QWORD *)(v17 + 200) = v65;
      *(_QWORD *)(v17 + 208) = v67;
      *(_QWORD *)(v17 + 216) = v69;
    }
    *(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) = 0;
    if ((v134 & 1) != 0)
    {
      *(_QWORD *)(v17 + 312) = 0;
      *(_QWORD *)(v17 + 320) = 0;
      *(_BYTE *)(v17 + 328) = 1;
    }
    v182.origin.x = 0.0;
    v182.origin.y = 0.0;
    v182.size.width = 0.0;
    v182.size.height = 0.0;
    v169.origin.x = v55;
    v169.origin.y = v57;
    v169.size.width = v59;
    v169.size.height = v61;
    v71 = CGRectEqualToRect(v169, v182);
    v170.origin.x = v133;
    v170.origin.y = v141;
    v170.size.width = rect;
    v170.size.height = v142;
    if (!CGRectIsNull(v170))
    {
      *(_QWORD *)&__src[0] = __PAIR64__(v129, v37);
      if ((AGGraphAnyInputsChanged() & 1) == 0)
      {
        __dst[4] = *(__int128 *)((char *)&v154[7] + 8);
        __dst[5] = *(__int128 *)((char *)&v154[8] + 8);
        __dst[6] = *(__int128 *)((char *)&v154[9] + 8);
        __dst[0] = *(__int128 *)((char *)&v154[3] + 8);
        __dst[1] = *(__int128 *)((char *)&v154[4] + 8);
        __dst[3] = *(__int128 *)((char *)&v154[6] + 8);
        __dst[2] = *(__int128 *)((char *)&v154[5] + 8);
        if ((v49 & 1) != 0)
          ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v121, v122));
        v72 = (CGSize)v154[2];
        ScrollGeometry.visibleRect.getter();
        v183.origin.x = 0.0;
        v183.origin.y = 0.0;
        v183.size = v72;
        v172 = CGRectIntersection(v171, v183);
        x = v172.origin.x;
        y = v172.origin.y;
        width = v172.size.width;
        height = v172.size.height;
        if (CGRectIsEmpty(v172))
        {
          if (!v71)
          {
            v77 = 1;
            goto LABEL_38;
          }
          goto LABEL_35;
        }
        v173.origin.x = v133;
        v173.origin.y = v141;
        v173.size.width = rect;
        v173.size.height = v142;
        v184.origin.x = x;
        v184.origin.y = y;
        v184.size.width = width;
        v184.size.height = height;
        if (CGRectContainsRect(v173, v184))
        {
          v174.origin.x = x;
          v174.origin.y = y;
          v174.size.width = width;
          v174.size.height = height;
          MinX = CGRectGetMinX(v174);
          v175.origin.x = v133;
          v175.origin.y = v141;
          v175.size.width = rect;
          v175.size.height = v142;
          if (MinX - CGRectGetMinX(v175) < width / 3.0)
          {
            v79 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v79 + 216) & 2) == 0)
              *(_BYTE *)(*(_QWORD *)v79 + 216) |= 2u;
          }
          v80 = height / 3.0;
          v176.origin.x = v133;
          v176.origin.y = v141;
          v176.size.width = rect;
          v176.size.height = v142;
          MaxX = CGRectGetMaxX(v176);
          v177.origin.x = x;
          v177.origin.y = y;
          v177.size.width = width;
          v177.size.height = height;
          if (MaxX - CGRectGetMaxX(v177) < width / 3.0)
          {
            v82 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v82 + 216) & 8) == 0)
              *(_BYTE *)(*(_QWORD *)v82 + 216) |= 8u;
          }
          v178.origin.x = x;
          v178.origin.y = y;
          v178.size.width = width;
          v178.size.height = height;
          MinY = CGRectGetMinY(v178);
          v179.origin.x = v133;
          v179.size.height = v142;
          v179.origin.y = v141;
          v179.size.width = rect;
          if (MinY - CGRectGetMinY(v179) < v80)
          {
            v84 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v84 + 216) & 1) == 0)
              *(_BYTE *)(*(_QWORD *)v84 + 216) |= 1u;
          }
          v180.origin.x = v133;
          v180.origin.y = v141;
          v180.size.height = v142;
          v180.size.width = rect;
          MaxY = CGRectGetMaxY(v180);
          v181.origin.x = x;
          v181.origin.y = y;
          v181.size.width = width;
          v181.size.height = height;
          if (MaxY - CGRectGetMaxY(v181) < v80)
          {
            v86 = AGGraphGetValue();
            if ((*(_BYTE *)(*(_QWORD *)v86 + 216) & 4) == 0)
              *(_BYTE *)(*(_QWORD *)v86 + 216) |= 4u;
          }
          goto LABEL_35;
        }
      }
    }
    if (!v71)
    {
      v77 = 0;
LABEL_38:
      v93 = AGGraphGetValue();
      v94 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      v148 = *MEMORY[0x1E0C9D628];
      ++*(_DWORD *)(*(_QWORD *)v93 + 212);
      v147 = (char *)MEMORY[0x1E0DEE9D8];
      v149 = v94;
      v150 = 0;
      v152 = 0;
      v151 = 0;
      v153 = 0;
      if (v77)
      {
        *(_OWORD *)(v17 + 96) = 0u;
        *(_OWORD *)(v17 + 112) = 0u;
      }
      else
      {
        specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)(v154, (uint64_t *)&v147, &v145, a1, v123, v124, v125, v126, a6);
      }
      CurrentAttribute = AGGraphGetCurrentAttribute();
      if (CurrentAttribute != v128)
      {
        v96 = CurrentAttribute;
        v97 = v153;
        v98 = *(char **)(v17 + 128);
        AGGraphGetValue();
        swift_retain();
        IncrementalLayoutViewCache.commitPlacedChildren(from:to:wasCancelled:context:)(v98, &v147, v97, v96);
        swift_release();
        v99 = v147;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 128) = v99;
        v100 = swift_bridgeObjectRetain();
        v101 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30_IncrementalLayout_PlacedChildVG_So6CGRectVs5NeverOTg503_s7d4UI26fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_5918e812d1d562eb413ef1fedeeee4a2AhFTf3nnnpk_nTf1cn_n(v100);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v102 = *(_OWORD *)(v17 + 264);
        v103 = *(_OWORD *)(v17 + 232);
        v161 = *(_OWORD *)(v17 + 248);
        v162 = v102;
        v104 = *(_OWORD *)(v17 + 264);
        v163[0] = *(_OWORD *)(v17 + 280);
        *(_OWORD *)((char *)v163 + 9) = *(_OWORD *)(v17 + 289);
        v105 = *(_OWORD *)(v17 + 200);
        v106 = *(_OWORD *)(v17 + 168);
        v157 = *(_OWORD *)(v17 + 184);
        v158 = v105;
        v107 = *(_OWORD *)(v17 + 200);
        v108 = *(_OWORD *)(v17 + 232);
        v159 = *(_OWORD *)(v17 + 216);
        v160 = v108;
        v109 = *(_OWORD *)(v17 + 168);
        v156[0] = *v19;
        v156[1] = v109;
        v110 = *(_OWORD *)(v17 + 16);
        __src[0] = *(_OWORD *)v17;
        __src[1] = v110;
        *(_QWORD *)&__src[2] = *(_QWORD *)(v17 + 32);
        *(__int128 *)((char *)&__src[4] + 8) = *(_OWORD *)(v17 + 72);
        v111 = *(_OWORD *)(v17 + 112);
        __src[6] = *(_OWORD *)(v17 + 96);
        __src[7] = v111;
        v112 = *(_OWORD *)(v17 + 280);
        *(__int128 *)((char *)&__src[16] + 8) = v104;
        *(__int128 *)((char *)&__src[17] + 8) = v112;
        *(__int128 *)((char *)&__src[18] + 1) = *(_OWORD *)(v17 + 289);
        *(__int128 *)((char *)&__src[15] + 8) = v161;
        *(__int128 *)((char *)&__src[11] + 8) = v157;
        *(__int128 *)((char *)&__src[12] + 8) = v107;
        *(__int128 *)((char *)&__src[13] + 8) = v159;
        *(__int128 *)((char *)&__src[14] + 8) = v103;
        *(__int128 *)((char *)&__src[9] + 8) = v156[0];
        *(_QWORD *)(v17 + 136) = v101;
        v113 = *(_QWORD *)(v17 + 48);
        v114 = *(_DWORD *)(v17 + 56);
        v115 = *(_QWORD *)(v17 + 64);
        v116 = *(_QWORD *)(v17 + 88);
        v88 = *(_QWORD *)(v17 + 128);
        v117 = *(_DWORD *)(v17 + 144);
        v118 = *(_QWORD *)(v17 + 312);
        v119 = *(_QWORD *)(v17 + 320);
        v120 = *(_BYTE *)(v17 + 328);
        DWORD2(__src[2]) = *(_DWORD *)(v17 + 40);
        *(_QWORD *)&__src[3] = v113;
        DWORD2(__src[3]) = v114;
        *(_QWORD *)&__src[4] = v115;
        *((_QWORD *)&__src[5] + 1) = v116;
        *(_QWORD *)&__src[8] = v88;
        *((_QWORD *)&__src[8] + 1) = v101;
        LODWORD(__src[9]) = v117;
        *(__int128 *)((char *)&__src[10] + 8) = v106;
        *((_QWORD *)&__src[19] + 1) = v118;
        *(_QWORD *)&__src[20] = v119;
        BYTE8(__src[20]) = v120;
        memcpy(__dst, __src, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        specialized IncrementalChildPlacements.mainID(children:)(v88, v127, a8, a9, a10, &v155);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__src);
        outlined release of PositionState((uint64_t)v156);
        *(_OWORD *)(v17 + 272) = v155;
        goto LABEL_43;
      }
LABEL_47:
      __break(1u);
    }
LABEL_35:
    v87 = AGGraphGetOutputValue();
    v88 = v130;
    v90 = v139;
    v89 = v140;
    v92 = v137;
    v91 = v138;
    if (v87)
    {
LABEL_44:
      *(CGFloat *)(v17 + 160) = v89;
      *(CGFloat *)(v17 + 168) = v90;
      *(CGFloat *)(v17 + 176) = v91;
      *(CGFloat *)(v17 + 184) = v92;
      memcpy(__src, v154, 0x129uLL);
      PositionState.update(context:)((uint64_t)__src);
      return swift_release();
    }
LABEL_43:
    *(_QWORD *)&__src[0] = v88;
    AGGraphSetOutputValue();
    v89 = v145.origin.x;
    v90 = v145.origin.y;
    v91 = v145.size.width;
    v92 = v145.size.height;
    goto LABEL_44;
  }
  return result;
}

__n128 specialized $defer #1 <A>() in IncrementalChildPlacements.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  __int128 v21;
  __int128 v22;

  v5 = a2[1];
  *(_OWORD *)(a1 + 160) = *a2;
  *(_OWORD *)(a1 + 176) = v5;
  v22 = *(_OWORD *)(a3 + 88);
  ScrollGeometry.visibleRect.getter();
  *(_QWORD *)(a1 + 192) = v6;
  *(_QWORD *)(a1 + 200) = v7;
  *(_QWORD *)(a1 + 208) = v8;
  *(_QWORD *)(a1 + 216) = v9;
  v10 = 0;
  v11 = 0.0;
  if (*(_DWORD *)(a3 + 12) != *MEMORY[0x1E0CFED28])
  {
    Value = (_QWORD *)AGGraphGetValue();
    v11 = MEMORY[0x18D75BE3C](Value, v13, v14, v15, v16, v17, v18, v19, *Value, Value[1], Value[2], Value[3], v22, *((_QWORD *)&v22 + 1));
  }
  *(double *)(a1 + 224) = v11;
  *(_QWORD *)(a1 + 232) = v10;
  result = *(__n128 *)(a3 + 16);
  v21 = *(_OWORD *)(a3 + 32);
  *(__n128 *)(a1 + 240) = result;
  *(_OWORD *)(a1 + 256) = v21;
  return result;
}

double specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1, uint64_t *a2, CGRect *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat v18;
  int v19;
  int v20;
  __int128 v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  CGFloat v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *v31;
  void (*v32)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  Swift::Bool v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  char v39;
  int v40;
  __int128 *Value;
  __int128 v42;
  double v43;
  double v44;
  char v45;
  double v46;
  int v47;
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  _BOOL4 v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double v70;
  BOOL v71;
  CGRect *v72;
  uint64_t WeakValue;
  uint64_t v74;
  uint64_t v75;
  double *v76;
  double *v77;
  uint64_t *v78;
  uint64_t *v79;
  double result;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  _QWORD v90[6];
  CGSize v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  CGRect *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE *v103;
  CGSize v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t *v111;
  _QWORD v112[3];
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[32];
  uint64_t v116;
  __int128 v117;
  _BYTE v118[24];
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[38];
  double v154;
  __int128 v155;
  __int128 v156;
  char v157;
  double v158;
  double v159;
  char v160;
  _OWORD v161[21];
  _OWORD v162[3];
  int v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  CGSize v185;
  char v186;
  _BYTE v187[304];
  _BYTE v188[320];

  v4 = v3;
  v111 = a2;
  v7 = (_BYTE *)(v3 + 304);
  specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (uint64_t)v161);
  outlined init with take of Image.Resolved?((uint64_t)v161, (uint64_t)v187, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)v187, (uint64_t)v188, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  v97 = (char *)a1;
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v188) == 1)
  {
    v8 = *(_DWORD **)(a1 + 168);
    v109 = *(_QWORD *)(a1 + 176);
    v110 = v8;
    v9 = *(_QWORD *)(a1 + 184);
    v107 = *(_QWORD *)(a1 + 192);
    v108 = v9;
    v10 = *(_QWORD *)(a1 + 200);
    v105 = *(_QWORD *)(a1 + 208);
    v106 = v10;
    v11 = *(_QWORD *)(a1 + 224);
    v99 = *(_QWORD *)(a1 + 216);
    v12 = *(_QWORD *)(a1 + 232);
    v13 = *(_QWORD *)(a1 + 240);
    v14 = *(_QWORD *)(a1 + 248);
    v15 = *(_QWORD *)(a1 + 256);
    v16 = *(_QWORD *)(a1 + 264);
    v17 = *(_QWORD *)(a1 + 272);
    v18 = *(double *)(a1 + 288);
    v104.width = *(CGFloat *)(a1 + 280);
    v104.height = v18;
    v19 = *(_BYTE *)(a1 + 296) & 1;
    v20 = *(_DWORD *)(a1 + 48);
    v21 = *(_OWORD *)(a1 + 32);
    v101 = *(_OWORD *)(a1 + 16);
    v102 = v21;
    v100 = *(_OWORD *)a1;
    v22 = (_OWORD *)a1;
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v187, (uint64_t)v161, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    v19 = BYTE8(v161[18]);
    v104 = *(CGSize *)((char *)&v161[17] + 8);
    v109 = *(_QWORD *)&v161[11];
    v110 = (_DWORD *)*((_QWORD *)&v161[10] + 1);
    v107 = *(_QWORD *)&v161[12];
    v108 = *((_QWORD *)&v161[11] + 1);
    v105 = *(_QWORD *)&v161[13];
    v106 = *((_QWORD *)&v161[12] + 1);
    v99 = *((_QWORD *)&v161[13] + 1);
    v12 = *((_QWORD *)&v161[14] + 1);
    v11 = *(_QWORD *)&v161[14];
    v14 = *((_QWORD *)&v161[15] + 1);
    v13 = *(_QWORD *)&v161[15];
    v16 = *((_QWORD *)&v161[16] + 1);
    v15 = *(_QWORD *)&v161[16];
    v17 = *(_QWORD *)&v161[17];
    v20 = v161[3];
    v101 = v161[1];
    v102 = v161[2];
    v100 = v161[0];
    v22 = v161;
  }
  memcpy(v153, v22, 0x129uLL);
  v23 = v7[24];
  v103 = v7;
  v98 = a3;
  if ((v23 & 1) != 0)
  {
    v24 = v99;
  }
  else
  {
    v92 = v17;
    v93 = v16;
    v94 = v15;
    v95 = v14;
    v96 = v13;
    v25 = *(double *)(v4 + 320);
    v91.width = *(CGFloat *)(v4 + 312);
    v91.height = v25;
    outlined init with take of Image.Resolved?((uint64_t)v187, (uint64_t)v161, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v161) == 1)
    {
      LODWORD(v99) = v19;
      ScrollGeometry.visibleRect.getter();
      ScrollGeometry.translate(by:limit:)(v91, v104);
      ScrollGeometry.translate(by:limit:)(v91, v104);
      v24 = v153[27];
      v11 = v153[28];
      v12 = v153[29];
      v13 = v153[30];
      v14 = v153[31];
      v15 = v153[32];
      v17 = v153[34];
      v16 = v153[33];
      v109 = v153[22];
      v110 = (_DWORD *)v153[21];
      v117 = *(_OWORD *)&v153[21];
      v107 = v153[24];
      v108 = v153[23];
      *(_QWORD *)v118 = v153[23];
      *(_QWORD *)&v118[8] = v153[24];
      v105 = v153[26];
      v106 = v153[25];
      *(_QWORD *)&v118[16] = v153[25];
      v119 = v153[26];
      v120 = v153[27];
      v121 = v153[28];
      v122 = v153[29];
      v123 = v153[30];
      v124 = v153[31];
      v125 = v153[32];
      v126 = *(_OWORD *)&v153[33];
      ScrollGeometry.visibleRect.getter();
    }
    else
    {
      v24 = v99;
      v14 = v95;
      v13 = v96;
      v16 = v93;
      v15 = v94;
      v17 = v92;
    }
  }
  v162[0] = v100;
  v162[1] = v101;
  v162[2] = v102;
  v163 = v20;
  v164 = *(_OWORD *)&v153[7];
  v165 = *(_OWORD *)&v153[9];
  v166 = *(_OWORD *)&v153[11];
  v167 = *(_OWORD *)&v153[13];
  v168 = *(_OWORD *)&v153[15];
  v169 = *(_OWORD *)&v153[17];
  v170 = *(_OWORD *)&v153[19];
  v171 = v110;
  v172 = v109;
  v173 = v108;
  v174 = v107;
  v175 = v106;
  v176 = v105;
  v177 = v24;
  v178 = v11;
  v179 = v12;
  v180 = v13;
  v181 = v14;
  v182 = v15;
  v183 = v16;
  v184 = v17;
  v185 = v104;
  v186 = v19;
  type metadata accessor for IncrementalLayoutViewCache();
  v26 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
  v28 = v27;
  MEMORY[0x1E0C80A78](v27, v29);
  v90[2] = v4;
  v90[3] = v162;
  v30 = (_DWORD *)v4;
  v31 = v111;
  v90[4] = v111;
  v32 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v26 + 288);
  swift_retain();
  v32(v28, partial apply for specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:), v90, v28, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  if (*((_BYTE *)v31 + 40) == 1)
  {
    AGGraphGetValue();
    swift_retain();
    v33 = IncrementalLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v33 && v30[10] != *MEMORY[0x1E0CFED28])
    {
      v34 = AGCreateWeakAttribute();
      *(_QWORD *)(swift_allocObject() + 16) = v34;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  v110 = v30;
  memcpy(v161, v30, 0x149uLL);
  v35 = DWORD1(v161[1]);
  v36 = DWORD1(v161[0]);
  v149 = *(_OWORD *)((char *)&v161[12] + 8);
  v150 = *(_OWORD *)((char *)&v161[13] + 8);
  v151 = *(_OWORD *)((char *)&v161[14] + 8);
  v152 = *((_QWORD *)&v161[15] + 1);
  v147 = *(_OWORD *)((char *)&v161[10] + 8);
  v148 = *(_OWORD *)((char *)&v161[11] + 8);
  v37 = v161[16];
  v145 = v161[17];
  v146 = *(_OWORD *)((char *)&v161[9] + 8);
  v38 = v161[18];
  v39 = v161[19];
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v161);
  specialized IncrementalChildPlacements.transaction.getter();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v161);
  Transaction.subscript.getter();
  swift_release();
  v40 = v117;
  AGGraphGetValue();
  LODWORD(v109) = *(unsigned __int8 *)AGGraphGetValue();
  LODWORD(v107) = v36;
  Value = (__int128 *)AGGraphGetValue();
  v42 = Value[1];
  v117 = *Value;
  *(_OWORD *)v118 = v42;
  MEMORY[0x18D75BE3C]();
  v45 = v39;
  v46 = 0.0;
  LODWORD(v108) = v35;
  if ((v39 & 1) != 0)
  {
    v47 = 3;
    v52 = 0.0;
    v48 = v103;
    v49 = v111;
    v50 = *((_QWORD *)&v38 + 1);
    v51 = v38;
  }
  else
  {
    v47 = 3;
    v48 = v103;
    v49 = v111;
    v50 = *((_QWORD *)&v38 + 1);
    v51 = v38;
    if (*(double *)&v38 != 0.0 || (v52 = 0.0, *((double *)&v38 + 1) != 0.0))
    {
      v47 = v40 == 2 ? 3 : 1;
      v52 = 0.0;
      v46 = v40 == 2 ? 0.0 : *((double *)&v38 + 1);
      if (v40 != 2)
        v52 = *(double *)&v38;
    }
  }
  v53 = *((double *)v49 + 6);
  v54 = *((double *)v49 + 7);
  v55 = v53 == 0.0;
  if (v54 != 0.0)
    v55 = 0;
  if (v40 == 2)
    v55 = 1;
  if (v55)
    v56 = v47;
  else
    v56 = 0;
  if (v55)
    v57 = -0.0;
  else
    v57 = *((double *)v49 + 7);
  v58 = v46 + v57;
  if (v55)
    v59 = -0.0;
  else
    v59 = *((double *)v49 + 6);
  v60 = v52 + v59;
  if (v52 + v59 != 0.0
    || v58 != 0.0
    || v40 == 2
    || *(double *)&v37 == 0.0 && *((double *)&v37 + 1) == 0.0
    || v43 == 0.0 && v44 == 0.0
    || (v61 = vabdd_f64(v43, *(double *)&v37), v62 = vabdd_f64(v44, *((double *)&v37 + 1)), v61 < 0.01) && v62 < 0.01)
  {
    v63 = *(_QWORD *)&v161[3];
    v64 = DWORD2(v161[3]);
    v66 = *((_QWORD *)&v161[4] + 1);
    v65 = *(_QWORD *)&v161[4];
    v67 = *((_QWORD *)&v161[5] + 1);
    v68 = *(_QWORD *)&v161[5];
  }
  else
  {
    v83 = *((_BYTE *)v49 + 40);
    v84 = *((_BYTE *)v49 + 64);
    v154 = *(double *)v49;
    v155 = *(_OWORD *)(v49 + 1);
    v156 = *(_OWORD *)(v49 + 3);
    v157 = v83;
    v158 = v53;
    v159 = v54;
    v160 = v84;
    v85 = v50;
    outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v161);
    swift_bridgeObjectRetain();
    specialized IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)&v154, v97);
    v87 = v86;
    v89 = v88;
    swift_bridgeObjectRelease();
    outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v161);
    v45 = v39;
    v50 = v85;
    v49 = v111;
    v63 = *(_QWORD *)&v161[3];
    v64 = DWORD2(v161[3]);
    v66 = *((_QWORD *)&v161[4] + 1);
    v65 = *(_QWORD *)&v161[4];
    v67 = *((_QWORD *)&v161[5] + 1);
    v68 = *(_QWORD *)&v161[5];
    if (v87 != 0.0 || v89 != 0.0)
    {
      v56 = 2;
      v58 = v89;
      v60 = v87;
    }
  }
  v69 = (double *)v110;
  if ((v109 & (v60 != 0.0)) != 0)
    v70 = -v60;
  else
    v70 = v60;
  v71 = v58 == 0.0 && v70 == 0.0;
  if (!v71 && v56 != 3)
  {
    *((_QWORD *)&v117 + 1) = *((_QWORD *)&v161[0] + 1);
    *(_OWORD *)&v118[8] = *(_OWORD *)((char *)&v161[1] + 8);
    v123 = v66;
    v124 = v68;
    v126 = v161[6];
    v127 = v161[7];
    v128 = v161[8];
    v130 = v146;
    v131 = v147;
    v135 = v151;
    v134 = v150;
    *(_QWORD *)&v117 = __PAIR64__(v107, v161[0]);
    *(_DWORD *)v118 = v161[1];
    *(_DWORD *)&v118[4] = v108;
    LODWORD(v119) = DWORD2(v161[2]);
    v120 = v63;
    LODWORD(v121) = v64;
    v122 = v65;
    v125 = v67;
    v129 = v161[9];
    v136 = v152;
    v133 = v149;
    v132 = v148;
    v137 = v37;
    v138 = v145;
    v139 = v51;
    v140 = v50;
    v141 = v45;
    v142 = *((_QWORD *)&v161[19] + 1);
    v143 = *(_QWORD *)&v161[20];
    v144 = BYTE8(v161[20]);
    outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)&v117);
    specialized IncrementalChildPlacements.logTranslation(_:reason:)(v56, v70, v58);
    outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v161);
    v72 = v98;
    *v72 = CGRectOffset(*v98, v70, v58);
    v69[39] = v70;
    v69[40] = v58;
    v48[24] = 0;
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TableColumnList(WeakValue, (uint64_t)v115);
    }
    else
    {
      v116 = 0;
      memset(v115, 0, sizeof(v115));
    }
    AGGraphSetUpdate();
    outlined init with copy of ScrollableCollection?((uint64_t)v115, (uint64_t)v112, (unint64_t *)&lazy cache variable for type metadata for Scrollable?, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8]);
    v74 = v113;
    if (v113)
    {
      v75 = v114;
      __swift_project_boxed_opaque_existential_1(v112, v113);
      (*(void (**)(uint64_t, uint64_t, double, double))(v75 + 32))(v74, v75, v70, v58);
      outlined destroy of Scrollable?((uint64_t)v115);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
    }
    else
    {
      outlined destroy of Scrollable?((uint64_t)v115);
      outlined destroy of Scrollable?((uint64_t)v112);
    }
    v49 = v111;
  }
  if ((v49[8] & 1) != 0)
  {
    v76 = (double *)MEMORY[0x1E0C9D628];
    v77 = (double *)(MEMORY[0x1E0C9D628] + 24);
    v78 = (uint64_t *)(MEMORY[0x1E0C9D628] + 16);
    v79 = (uint64_t *)(MEMORY[0x1E0C9D628] + 8);
  }
  else
  {
    v76 = (double *)(v49 + 1);
    v79 = v49 + 2;
    v78 = v49 + 3;
    v77 = (double *)(v49 + 4);
  }
  result = *v77;
  v81 = *v78;
  v82 = *v79;
  v69[12] = *v76;
  *((_QWORD *)v69 + 13) = v82;
  *((_QWORD *)v69 + 14) = v81;
  v69[15] = result;
  v69[36] = 0.0;
  v69[37] = 0.0;
  *v48 = 1;
  return result;
}

double specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1, uint64_t a2, CGRect *a3)
{
  uint64_t v3;
  double *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat v18;
  char v19;
  __int128 v20;
  _OWORD *v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  int v32;
  double *v33;
  int v34;
  Swift::Bool v35;
  uint64_t v36;
  int v37;
  unsigned __int8 v38;
  _OWORD *Value;
  __int128 v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  _BYTE *v47;
  uint64_t v48;
  double v49;
  double v50;
  _BOOL4 v51;
  int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  char v58;
  char v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  BOOL v65;
  CGRect *v66;
  uint64_t WeakValue;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  double *v71;
  uint64_t *v72;
  uint64_t *v73;
  double result;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[6];
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CGRect *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  CGSize v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[32];
  uint64_t v104;
  _OWORD v105[19];
  _BYTE v106[40];
  char v107;
  double v108;
  double v109;
  char v110;
  _OWORD v111[21];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  CGSize v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD v147[2];
  _BYTE v148[24];
  double v149;
  double v150;
  char v151;
  _BYTE v152[304];
  _BYTE v153[320];

  v4 = (double *)v3;
  specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(uint64_t, unint64_t, uint64_t))specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:), (uint64_t)v111);
  outlined init with take of Image.Resolved?((uint64_t)v111, (uint64_t)v152, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v153, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v153) == 1)
  {
    v8 = *(_QWORD *)(a1 + 168);
    v97 = *(_QWORD *)(a1 + 176);
    v98 = v8;
    v9 = *(_QWORD *)(a1 + 184);
    v95 = *(_QWORD *)(a1 + 192);
    v96 = v9;
    v10 = *(_QWORD *)(a1 + 200);
    v93 = *(_QWORD *)(a1 + 208);
    v94 = v10;
    v11 = *(_QWORD *)(a1 + 224);
    v90 = *(_QWORD *)(a1 + 216);
    v12 = *(_QWORD *)(a1 + 232);
    v13 = *(_QWORD *)(a1 + 240);
    v14 = *(_QWORD *)(a1 + 248);
    v15 = *(_QWORD *)(a1 + 256);
    v16 = *(_QWORD *)(a1 + 264);
    v17 = *(_QWORD *)(a1 + 272);
    v18 = *(double *)(a1 + 288);
    v92.width = *(CGFloat *)(a1 + 280);
    v92.height = v18;
    v19 = *(_BYTE *)(a1 + 296) & 1;
    v89 = *(_DWORD *)(a1 + 48);
    v20 = *(_OWORD *)(a1 + 32);
    v87 = *(_OWORD *)(a1 + 16);
    v88 = v20;
    v86 = *(_OWORD *)a1;
    v21 = (_OWORD *)a1;
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v111, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    v19 = BYTE8(v111[18]);
    v92 = *(CGSize *)((char *)&v111[17] + 8);
    v97 = *(_QWORD *)&v111[11];
    v98 = *((_QWORD *)&v111[10] + 1);
    v95 = *(_QWORD *)&v111[12];
    v96 = *((_QWORD *)&v111[11] + 1);
    v93 = *(_QWORD *)&v111[13];
    v94 = *((_QWORD *)&v111[12] + 1);
    v90 = *((_QWORD *)&v111[13] + 1);
    v12 = *((_QWORD *)&v111[14] + 1);
    v11 = *(_QWORD *)&v111[14];
    v14 = *((_QWORD *)&v111[15] + 1);
    v13 = *(_QWORD *)&v111[15];
    v16 = *((_QWORD *)&v111[16] + 1);
    v15 = *(_QWORD *)&v111[16];
    v17 = *(_QWORD *)&v111[17];
    v89 = v111[3];
    v87 = v111[1];
    v88 = v111[2];
    v86 = v111[0];
    v21 = v111;
  }
  memcpy(v105, v21, 0x129uLL);
  v22 = *(_BYTE *)(v3 + 328);
  v99 = a2;
  v91 = (_BYTE *)(v3 + 304);
  v85 = a3;
  if ((v22 & 1) != 0)
  {
    v23 = v90;
  }
  else
  {
    v80 = v17;
    v81 = v16;
    v82 = v15;
    v83 = v14;
    v84 = v13;
    v78 = *(_QWORD *)(v3 + 320);
    v79 = v12;
    v24 = *(_QWORD *)(v3 + 312);
    outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v111, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v111) == 1)
    {
      *(_QWORD *)&v112 = v98;
      *((_QWORD *)&v112 + 1) = v97;
      *(_QWORD *)&v113 = v96;
      *((_QWORD *)&v113 + 1) = v95;
      *(_QWORD *)&v114 = v94;
      *((_QWORD *)&v114 + 1) = v93;
      v115 = v90;
      *(_QWORD *)&v116 = v11;
      *((_QWORD *)&v116 + 1) = v79;
      *(_QWORD *)&v117 = v84;
      *((_QWORD *)&v117 + 1) = v83;
      *(_QWORD *)&v118 = v82;
      *((_QWORD *)&v118 + 1) = v81;
      *(_QWORD *)&v119 = v80;
      ScrollGeometry.visibleRect.getter();
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v78, v24), v92);
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v78, v24), v92);
      v23 = *((_QWORD *)&v105[13] + 1);
      v12 = *((_QWORD *)&v105[14] + 1);
      v11 = *(_QWORD *)&v105[14];
      v14 = *((_QWORD *)&v105[15] + 1);
      v13 = *(_QWORD *)&v105[15];
      v16 = *((_QWORD *)&v105[16] + 1);
      v15 = *(_QWORD *)&v105[16];
      v17 = *(_QWORD *)&v105[17];
      v97 = *(_QWORD *)&v105[11];
      v98 = *((_QWORD *)&v105[10] + 1);
      v112 = *(_OWORD *)((char *)&v105[10] + 8);
      v95 = *(_QWORD *)&v105[12];
      v96 = *((_QWORD *)&v105[11] + 1);
      v113 = *(_OWORD *)((char *)&v105[11] + 8);
      v93 = *(_QWORD *)&v105[13];
      v94 = *((_QWORD *)&v105[12] + 1);
      v114 = *(_OWORD *)((char *)&v105[12] + 8);
      v115 = *((_QWORD *)&v105[13] + 1);
      v116 = v105[14];
      v117 = v105[15];
      v118 = v105[16];
      *(_QWORD *)&v119 = *(_QWORD *)&v105[17];
      ScrollGeometry.visibleRect.getter();
    }
    else
    {
      v23 = v90;
      v12 = v79;
      v17 = v80;
      v14 = v83;
      v13 = v84;
      v16 = v81;
      v15 = v82;
    }
  }
  v112 = v86;
  v113 = v87;
  v114 = v88;
  LODWORD(v115) = v89;
  v116 = *(_OWORD *)((char *)&v105[3] + 8);
  v117 = *(_OWORD *)((char *)&v105[4] + 8);
  v118 = *(_OWORD *)((char *)&v105[5] + 8);
  v119 = *(_OWORD *)((char *)&v105[6] + 8);
  v120 = *(_OWORD *)((char *)&v105[7] + 8);
  v121 = *(_OWORD *)((char *)&v105[8] + 8);
  v122 = *(_OWORD *)((char *)&v105[9] + 8);
  v123 = v98;
  v124 = v97;
  v125 = v96;
  v126 = v95;
  v127 = v94;
  v128 = v93;
  v129 = v23;
  v130 = v11;
  v131 = v12;
  v132 = v13;
  v133 = v14;
  v134 = v15;
  v135 = v16;
  v136 = v17;
  v137 = v92;
  v138 = v19;
  type metadata accessor for IncrementalLayoutViewCache();
  v25 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
  v27 = v26;
  MEMORY[0x1E0C80A78](v26, v28);
  v77[2] = v4;
  v77[3] = &v112;
  v29 = v4;
  v30 = v99;
  v77[4] = v99;
  v31 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v25 + 288);
  swift_retain();
  v31(v27, partial apply for specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:), v77, v27, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  v32 = *(unsigned __int8 *)(v30 + 40);
  v33 = v29;
  if (v32 == 1)
  {
    v34 = *((_DWORD *)v29 + 10);
    AGGraphGetValue();
    swift_retain();
    v35 = IncrementalLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v35 && v34 != *MEMORY[0x1E0CFED28])
    {
      v36 = AGCreateWeakAttribute();
      *(_QWORD *)(swift_allocObject() + 16) = v36;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  memcpy(v111, v29, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  v37 = v139;
  AGGraphGetValue();
  v38 = *(_BYTE *)AGGraphGetValue();
  v145 = *(_OWORD *)((char *)&v111[15] + 8);
  v146 = *(_OWORD *)((char *)&v111[16] + 8);
  v147[0] = *(_OWORD *)((char *)&v111[17] + 8);
  *(_OWORD *)((char *)v147 + 9) = *(_OWORD *)((char *)&v111[18] + 1);
  v141 = *(_OWORD *)((char *)&v111[11] + 8);
  v142 = *(_OWORD *)((char *)&v111[12] + 8);
  v143 = *(_OWORD *)((char *)&v111[13] + 8);
  v144 = *(_OWORD *)((char *)&v111[14] + 8);
  v139 = *(_OWORD *)((char *)&v111[9] + 8);
  v140 = *(_OWORD *)((char *)&v111[10] + 8);
  outlined init with take of CGSize?((uint64_t)v147 + 8, (uint64_t)v148, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  Value = (_OWORD *)AGGraphGetValue();
  v40 = Value[1];
  *(_OWORD *)v106 = *Value;
  *(_OWORD *)&v106[16] = v40;
  v41 = MEMORY[0x18D75BE3C]();
  v43 = v42;
  outlined init with take of CGSize?((uint64_t)v148, (uint64_t)&v149, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  v44 = 0.0;
  if ((v151 & 1) != 0)
  {
    v45 = 3;
    v46 = 0.0;
    v47 = v91;
    v48 = v99;
  }
  else
  {
    v45 = 3;
    v47 = v91;
    v48 = v99;
    if (v149 != 0.0 || (v46 = 0.0, v150 != 0.0))
    {
      v45 = v37 == 2 ? 3 : 1;
      v46 = 0.0;
      v44 = v37 == 2 ? 0.0 : v150;
      if (v37 != 2)
        v46 = v149;
    }
  }
  v49 = *(double *)(v48 + 48);
  v50 = *(double *)(v48 + 56);
  v51 = v49 == 0.0;
  if (v50 != 0.0)
    v51 = 0;
  if (v37 == 2)
    v51 = 1;
  if (v51)
    v52 = v45;
  else
    v52 = 0;
  if (v51)
    v53 = -0.0;
  else
    v53 = *(double *)(v48 + 56);
  v54 = v44 + v53;
  if (v51)
    v55 = -0.0;
  else
    v55 = *(double *)(v48 + 48);
  v56 = v46 + v55;
  if (v46 + v55 == 0.0
    && v54 == 0.0
    && v37 != 2
    && (*((double *)&v145 + 1) != 0.0 || *(double *)&v146 != 0.0)
    && (v41 != 0.0 || v43 != 0.0))
  {
    v57 = vabdd_f64(v43, *(double *)&v146);
    if (vabdd_f64(v41, *((double *)&v145 + 1)) >= 0.01 || v57 >= 0.01)
    {
      v58 = *(_BYTE *)(v99 + 40);
      v59 = *(_BYTE *)(v99 + 64);
      *(_QWORD *)v106 = *(_QWORD *)v99;
      *(_OWORD *)&v106[8] = *(_OWORD *)(v99 + 8);
      *(_OWORD *)&v106[24] = *(_OWORD *)(v99 + 24);
      v107 = v58;
      v108 = v49;
      v109 = v50;
      v110 = v59;
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v111);
      swift_bridgeObjectRetain();
      specialized IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)v106, (char *)a1);
      v61 = v60;
      v63 = v62;
      v48 = v99;
      swift_bridgeObjectRelease();
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v111);
      if (v61 != 0.0 || v63 != 0.0)
      {
        v52 = 2;
        v54 = v63;
        v56 = v61;
      }
    }
  }
  if ((v38 & (v56 != 0.0)) != 0)
    v64 = -v56;
  else
    v64 = v56;
  v65 = v54 == 0.0 && v64 == 0.0;
  if (!v65 && v52 != 3)
  {
    specialized IncrementalChildPlacements.logTranslation(_:reason:)(v52, v64, v54);
    v66 = v85;
    *v66 = CGRectOffset(*v85, v64, v54);
    v33[39] = v64;
    v33[40] = v54;
    v47[24] = 0;
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TableColumnList(WeakValue, (uint64_t)v103);
    }
    else
    {
      v104 = 0;
      memset(v103, 0, sizeof(v103));
    }
    AGGraphSetUpdate();
    outlined init with copy of ScrollableCollection?((uint64_t)v103, (uint64_t)v100, (unint64_t *)&lazy cache variable for type metadata for Scrollable?, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8]);
    v68 = v101;
    if (!v101)
    {
      outlined destroy of Scrollable?((uint64_t)v103);
      outlined destroy of Scrollable?((uint64_t)v100);
      if ((*(_BYTE *)(v48 + 64) & 1) != 0)
        goto LABEL_64;
LABEL_66:
      v70 = (double *)(v48 + 8);
      v73 = (uint64_t *)(v48 + 16);
      v72 = (uint64_t *)(v48 + 24);
      v71 = (double *)(v48 + 32);
      goto LABEL_67;
    }
    v69 = v102;
    __swift_project_boxed_opaque_existential_1(v100, v101);
    (*(void (**)(uint64_t, uint64_t, double, double))(v69 + 32))(v68, v69, v64, v54);
    outlined destroy of Scrollable?((uint64_t)v103);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  }
  if ((*(_BYTE *)(v48 + 64) & 1) == 0)
    goto LABEL_66;
LABEL_64:
  v70 = (double *)MEMORY[0x1E0C9D628];
  v71 = (double *)(MEMORY[0x1E0C9D628] + 24);
  v72 = (uint64_t *)(MEMORY[0x1E0C9D628] + 16);
  v73 = (uint64_t *)(MEMORY[0x1E0C9D628] + 8);
LABEL_67:
  result = *v71;
  v75 = *v72;
  v76 = *v73;
  v33[12] = *v70;
  *((_QWORD *)v33 + 13) = v76;
  *((_QWORD *)v33 + 14) = v75;
  v33[15] = result;
  v33[36] = 0.0;
  v33[37] = 0.0;
  *v47 = 1;
  return result;
}

{
  uint64_t v3;
  double *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat v18;
  char v19;
  __int128 v20;
  _OWORD *v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  int v32;
  double *v33;
  int v34;
  Swift::Bool v35;
  uint64_t v36;
  int v37;
  unsigned __int8 v38;
  _OWORD *Value;
  __int128 v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  _BYTE *v47;
  uint64_t v48;
  double v49;
  double v50;
  _BOOL4 v51;
  int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  char v58;
  char v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  BOOL v65;
  CGRect *v66;
  uint64_t WeakValue;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  double *v71;
  uint64_t *v72;
  uint64_t *v73;
  double result;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[6];
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CGRect *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  CGSize v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[32];
  uint64_t v104;
  _OWORD v105[19];
  _BYTE v106[40];
  char v107;
  double v108;
  double v109;
  char v110;
  _OWORD v111[21];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  CGSize v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD v147[2];
  _BYTE v148[24];
  double v149;
  double v150;
  char v151;
  _BYTE v152[304];
  _BYTE v153[320];

  v4 = (double *)v3;
  specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(uint64_t, unint64_t, uint64_t))specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:), (uint64_t)v111);
  outlined init with take of Image.Resolved?((uint64_t)v111, (uint64_t)v152, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v153, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v153) == 1)
  {
    v8 = *(_QWORD *)(a1 + 168);
    v97 = *(_QWORD *)(a1 + 176);
    v98 = v8;
    v9 = *(_QWORD *)(a1 + 184);
    v95 = *(_QWORD *)(a1 + 192);
    v96 = v9;
    v10 = *(_QWORD *)(a1 + 200);
    v93 = *(_QWORD *)(a1 + 208);
    v94 = v10;
    v11 = *(_QWORD *)(a1 + 224);
    v90 = *(_QWORD *)(a1 + 216);
    v12 = *(_QWORD *)(a1 + 232);
    v13 = *(_QWORD *)(a1 + 240);
    v14 = *(_QWORD *)(a1 + 248);
    v15 = *(_QWORD *)(a1 + 256);
    v16 = *(_QWORD *)(a1 + 264);
    v17 = *(_QWORD *)(a1 + 272);
    v18 = *(double *)(a1 + 288);
    v92.width = *(CGFloat *)(a1 + 280);
    v92.height = v18;
    v19 = *(_BYTE *)(a1 + 296) & 1;
    v89 = *(_DWORD *)(a1 + 48);
    v20 = *(_OWORD *)(a1 + 32);
    v87 = *(_OWORD *)(a1 + 16);
    v88 = v20;
    v86 = *(_OWORD *)a1;
    v21 = (_OWORD *)a1;
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v111, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    v19 = BYTE8(v111[18]);
    v92 = *(CGSize *)((char *)&v111[17] + 8);
    v97 = *(_QWORD *)&v111[11];
    v98 = *((_QWORD *)&v111[10] + 1);
    v95 = *(_QWORD *)&v111[12];
    v96 = *((_QWORD *)&v111[11] + 1);
    v93 = *(_QWORD *)&v111[13];
    v94 = *((_QWORD *)&v111[12] + 1);
    v90 = *((_QWORD *)&v111[13] + 1);
    v12 = *((_QWORD *)&v111[14] + 1);
    v11 = *(_QWORD *)&v111[14];
    v14 = *((_QWORD *)&v111[15] + 1);
    v13 = *(_QWORD *)&v111[15];
    v16 = *((_QWORD *)&v111[16] + 1);
    v15 = *(_QWORD *)&v111[16];
    v17 = *(_QWORD *)&v111[17];
    v89 = v111[3];
    v87 = v111[1];
    v88 = v111[2];
    v86 = v111[0];
    v21 = v111;
  }
  memcpy(v105, v21, 0x129uLL);
  v22 = *(_BYTE *)(v3 + 328);
  v99 = a2;
  v91 = (_BYTE *)(v3 + 304);
  v85 = a3;
  if ((v22 & 1) != 0)
  {
    v23 = v90;
  }
  else
  {
    v80 = v17;
    v81 = v16;
    v82 = v15;
    v83 = v14;
    v84 = v13;
    v78 = *(_QWORD *)(v3 + 320);
    v79 = v12;
    v24 = *(_QWORD *)(v3 + 312);
    outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v111, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v111) == 1)
    {
      *(_QWORD *)&v112 = v98;
      *((_QWORD *)&v112 + 1) = v97;
      *(_QWORD *)&v113 = v96;
      *((_QWORD *)&v113 + 1) = v95;
      *(_QWORD *)&v114 = v94;
      *((_QWORD *)&v114 + 1) = v93;
      v115 = v90;
      *(_QWORD *)&v116 = v11;
      *((_QWORD *)&v116 + 1) = v79;
      *(_QWORD *)&v117 = v84;
      *((_QWORD *)&v117 + 1) = v83;
      *(_QWORD *)&v118 = v82;
      *((_QWORD *)&v118 + 1) = v81;
      *(_QWORD *)&v119 = v80;
      ScrollGeometry.visibleRect.getter();
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v78, v24), v92);
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v78, v24), v92);
      v23 = *((_QWORD *)&v105[13] + 1);
      v12 = *((_QWORD *)&v105[14] + 1);
      v11 = *(_QWORD *)&v105[14];
      v14 = *((_QWORD *)&v105[15] + 1);
      v13 = *(_QWORD *)&v105[15];
      v16 = *((_QWORD *)&v105[16] + 1);
      v15 = *(_QWORD *)&v105[16];
      v17 = *(_QWORD *)&v105[17];
      v97 = *(_QWORD *)&v105[11];
      v98 = *((_QWORD *)&v105[10] + 1);
      v112 = *(_OWORD *)((char *)&v105[10] + 8);
      v95 = *(_QWORD *)&v105[12];
      v96 = *((_QWORD *)&v105[11] + 1);
      v113 = *(_OWORD *)((char *)&v105[11] + 8);
      v93 = *(_QWORD *)&v105[13];
      v94 = *((_QWORD *)&v105[12] + 1);
      v114 = *(_OWORD *)((char *)&v105[12] + 8);
      v115 = *((_QWORD *)&v105[13] + 1);
      v116 = v105[14];
      v117 = v105[15];
      v118 = v105[16];
      *(_QWORD *)&v119 = *(_QWORD *)&v105[17];
      ScrollGeometry.visibleRect.getter();
    }
    else
    {
      v23 = v90;
      v12 = v79;
      v17 = v80;
      v14 = v83;
      v13 = v84;
      v16 = v81;
      v15 = v82;
    }
  }
  v112 = v86;
  v113 = v87;
  v114 = v88;
  LODWORD(v115) = v89;
  v116 = *(_OWORD *)((char *)&v105[3] + 8);
  v117 = *(_OWORD *)((char *)&v105[4] + 8);
  v118 = *(_OWORD *)((char *)&v105[5] + 8);
  v119 = *(_OWORD *)((char *)&v105[6] + 8);
  v120 = *(_OWORD *)((char *)&v105[7] + 8);
  v121 = *(_OWORD *)((char *)&v105[8] + 8);
  v122 = *(_OWORD *)((char *)&v105[9] + 8);
  v123 = v98;
  v124 = v97;
  v125 = v96;
  v126 = v95;
  v127 = v94;
  v128 = v93;
  v129 = v23;
  v130 = v11;
  v131 = v12;
  v132 = v13;
  v133 = v14;
  v134 = v15;
  v135 = v16;
  v136 = v17;
  v137 = v92;
  v138 = v19;
  type metadata accessor for IncrementalLayoutViewCache();
  v25 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
  v27 = v26;
  MEMORY[0x1E0C80A78](v26, v28);
  v77[2] = v4;
  v77[3] = &v112;
  v29 = v4;
  v30 = v99;
  v77[4] = v99;
  v31 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v25 + 288);
  swift_retain();
  v31(v27, partial apply for specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:), v77, v27, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  v32 = *(unsigned __int8 *)(v30 + 40);
  v33 = v29;
  if (v32 == 1)
  {
    v34 = *((_DWORD *)v29 + 10);
    AGGraphGetValue();
    swift_retain();
    v35 = IncrementalLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v35 && v34 != *MEMORY[0x1E0CFED28])
    {
      v36 = AGCreateWeakAttribute();
      *(_QWORD *)(swift_allocObject() + 16) = v36;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  memcpy(v111, v29, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  v37 = v139;
  AGGraphGetValue();
  v38 = *(_BYTE *)AGGraphGetValue();
  v145 = *(_OWORD *)((char *)&v111[15] + 8);
  v146 = *(_OWORD *)((char *)&v111[16] + 8);
  v147[0] = *(_OWORD *)((char *)&v111[17] + 8);
  *(_OWORD *)((char *)v147 + 9) = *(_OWORD *)((char *)&v111[18] + 1);
  v141 = *(_OWORD *)((char *)&v111[11] + 8);
  v142 = *(_OWORD *)((char *)&v111[12] + 8);
  v143 = *(_OWORD *)((char *)&v111[13] + 8);
  v144 = *(_OWORD *)((char *)&v111[14] + 8);
  v139 = *(_OWORD *)((char *)&v111[9] + 8);
  v140 = *(_OWORD *)((char *)&v111[10] + 8);
  outlined init with take of CGSize?((uint64_t)v147 + 8, (uint64_t)v148, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  Value = (_OWORD *)AGGraphGetValue();
  v40 = Value[1];
  *(_OWORD *)v106 = *Value;
  *(_OWORD *)&v106[16] = v40;
  v41 = MEMORY[0x18D75BE3C]();
  v43 = v42;
  outlined init with take of CGSize?((uint64_t)v148, (uint64_t)&v149, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  v44 = 0.0;
  if ((v151 & 1) != 0)
  {
    v45 = 3;
    v46 = 0.0;
    v47 = v91;
    v48 = v99;
  }
  else
  {
    v45 = 3;
    v47 = v91;
    v48 = v99;
    if (v149 != 0.0 || (v46 = 0.0, v150 != 0.0))
    {
      v45 = v37 == 2 ? 3 : 1;
      v46 = 0.0;
      v44 = v37 == 2 ? 0.0 : v150;
      if (v37 != 2)
        v46 = v149;
    }
  }
  v49 = *(double *)(v48 + 48);
  v50 = *(double *)(v48 + 56);
  v51 = v49 == 0.0;
  if (v50 != 0.0)
    v51 = 0;
  if (v37 == 2)
    v51 = 1;
  if (v51)
    v52 = v45;
  else
    v52 = 0;
  if (v51)
    v53 = -0.0;
  else
    v53 = *(double *)(v48 + 56);
  v54 = v44 + v53;
  if (v51)
    v55 = -0.0;
  else
    v55 = *(double *)(v48 + 48);
  v56 = v46 + v55;
  if (v46 + v55 == 0.0
    && v54 == 0.0
    && v37 != 2
    && (*((double *)&v145 + 1) != 0.0 || *(double *)&v146 != 0.0)
    && (v41 != 0.0 || v43 != 0.0))
  {
    v57 = vabdd_f64(v43, *(double *)&v146);
    if (vabdd_f64(v41, *((double *)&v145 + 1)) >= 0.01 || v57 >= 0.01)
    {
      v58 = *(_BYTE *)(v99 + 40);
      v59 = *(_BYTE *)(v99 + 64);
      *(_QWORD *)v106 = *(_QWORD *)v99;
      *(_OWORD *)&v106[8] = *(_OWORD *)(v99 + 8);
      *(_OWORD *)&v106[24] = *(_OWORD *)(v99 + 24);
      v107 = v58;
      v108 = v49;
      v109 = v50;
      v110 = v59;
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v111);
      swift_bridgeObjectRetain();
      specialized IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)v106, (char *)a1);
      v61 = v60;
      v63 = v62;
      v48 = v99;
      swift_bridgeObjectRelease();
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v111);
      if (v61 != 0.0 || v63 != 0.0)
      {
        v52 = 2;
        v54 = v63;
        v56 = v61;
      }
    }
  }
  if ((v38 & (v56 != 0.0)) != 0)
    v64 = -v56;
  else
    v64 = v56;
  v65 = v54 == 0.0 && v64 == 0.0;
  if (!v65 && v52 != 3)
  {
    specialized IncrementalChildPlacements.logTranslation(_:reason:)(v52, v64, v54);
    v66 = v85;
    *v66 = CGRectOffset(*v85, v64, v54);
    v33[39] = v64;
    v33[40] = v54;
    v47[24] = 0;
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TableColumnList(WeakValue, (uint64_t)v103);
    }
    else
    {
      v104 = 0;
      memset(v103, 0, sizeof(v103));
    }
    AGGraphSetUpdate();
    outlined init with copy of ScrollableCollection?((uint64_t)v103, (uint64_t)v100, (unint64_t *)&lazy cache variable for type metadata for Scrollable?, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8]);
    v68 = v101;
    if (!v101)
    {
      outlined destroy of Scrollable?((uint64_t)v103);
      outlined destroy of Scrollable?((uint64_t)v100);
      if ((*(_BYTE *)(v48 + 64) & 1) != 0)
        goto LABEL_64;
LABEL_66:
      v70 = (double *)(v48 + 8);
      v73 = (uint64_t *)(v48 + 16);
      v72 = (uint64_t *)(v48 + 24);
      v71 = (double *)(v48 + 32);
      goto LABEL_67;
    }
    v69 = v102;
    __swift_project_boxed_opaque_existential_1(v100, v101);
    (*(void (**)(uint64_t, uint64_t, double, double))(v69 + 32))(v68, v69, v64, v54);
    outlined destroy of Scrollable?((uint64_t)v103);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  }
  if ((*(_BYTE *)(v48 + 64) & 1) == 0)
    goto LABEL_66;
LABEL_64:
  v70 = (double *)MEMORY[0x1E0C9D628];
  v71 = (double *)(MEMORY[0x1E0C9D628] + 24);
  v72 = (uint64_t *)(MEMORY[0x1E0C9D628] + 16);
  v73 = (uint64_t *)(MEMORY[0x1E0C9D628] + 8);
LABEL_67:
  result = *v71;
  v75 = *v72;
  v76 = *v73;
  v33[12] = *v70;
  *((_QWORD *)v33 + 13) = v76;
  *((_QWORD *)v33 + 14) = v75;
  v33[15] = result;
  v33[36] = 0.0;
  v33[37] = 0.0;
  *v47 = 1;
  return result;
}

{
  uint64_t v3;
  double *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGFloat v18;
  char v19;
  __int128 v20;
  _OWORD *v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  int v32;
  double *v33;
  int v34;
  Swift::Bool v35;
  uint64_t v36;
  int v37;
  unsigned __int8 v38;
  _OWORD *Value;
  __int128 v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  _BYTE *v47;
  uint64_t v48;
  double v49;
  double v50;
  _BOOL4 v51;
  int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  char v58;
  char v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  BOOL v65;
  CGRect *v66;
  uint64_t WeakValue;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  double *v71;
  uint64_t *v72;
  uint64_t *v73;
  double result;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[6];
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CGRect *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  CGSize v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[32];
  uint64_t v104;
  _OWORD v105[19];
  _BYTE v106[40];
  char v107;
  double v108;
  double v109;
  char v110;
  _OWORD v111[21];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  CGSize v137;
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD v147[2];
  _BYTE v148[24];
  double v149;
  double v150;
  char v151;
  _BYTE v152[304];
  _BYTE v153[320];

  v4 = (double *)v3;
  specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(uint64_t, unint64_t, uint64_t))specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:), (uint64_t)v111);
  outlined init with take of Image.Resolved?((uint64_t)v111, (uint64_t)v152, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v153, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v153) == 1)
  {
    v8 = *(_QWORD *)(a1 + 168);
    v97 = *(_QWORD *)(a1 + 176);
    v98 = v8;
    v9 = *(_QWORD *)(a1 + 184);
    v95 = *(_QWORD *)(a1 + 192);
    v96 = v9;
    v10 = *(_QWORD *)(a1 + 200);
    v93 = *(_QWORD *)(a1 + 208);
    v94 = v10;
    v11 = *(_QWORD *)(a1 + 224);
    v90 = *(_QWORD *)(a1 + 216);
    v12 = *(_QWORD *)(a1 + 232);
    v13 = *(_QWORD *)(a1 + 240);
    v14 = *(_QWORD *)(a1 + 248);
    v15 = *(_QWORD *)(a1 + 256);
    v16 = *(_QWORD *)(a1 + 264);
    v17 = *(_QWORD *)(a1 + 272);
    v18 = *(double *)(a1 + 288);
    v92.width = *(CGFloat *)(a1 + 280);
    v92.height = v18;
    v19 = *(_BYTE *)(a1 + 296) & 1;
    v89 = *(_DWORD *)(a1 + 48);
    v20 = *(_OWORD *)(a1 + 32);
    v87 = *(_OWORD *)(a1 + 16);
    v88 = v20;
    v86 = *(_OWORD *)a1;
    v21 = (_OWORD *)a1;
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v111, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    v19 = BYTE8(v111[18]);
    v92 = *(CGSize *)((char *)&v111[17] + 8);
    v97 = *(_QWORD *)&v111[11];
    v98 = *((_QWORD *)&v111[10] + 1);
    v95 = *(_QWORD *)&v111[12];
    v96 = *((_QWORD *)&v111[11] + 1);
    v93 = *(_QWORD *)&v111[13];
    v94 = *((_QWORD *)&v111[12] + 1);
    v90 = *((_QWORD *)&v111[13] + 1);
    v12 = *((_QWORD *)&v111[14] + 1);
    v11 = *(_QWORD *)&v111[14];
    v14 = *((_QWORD *)&v111[15] + 1);
    v13 = *(_QWORD *)&v111[15];
    v16 = *((_QWORD *)&v111[16] + 1);
    v15 = *(_QWORD *)&v111[16];
    v17 = *(_QWORD *)&v111[17];
    v89 = v111[3];
    v87 = v111[1];
    v88 = v111[2];
    v86 = v111[0];
    v21 = v111;
  }
  memcpy(v105, v21, 0x129uLL);
  v22 = *(_BYTE *)(v3 + 328);
  v99 = a2;
  v91 = (_BYTE *)(v3 + 304);
  v85 = a3;
  if ((v22 & 1) != 0)
  {
    v23 = v90;
  }
  else
  {
    v80 = v17;
    v81 = v16;
    v82 = v15;
    v83 = v14;
    v84 = v13;
    v78 = *(_QWORD *)(v3 + 320);
    v79 = v12;
    v24 = *(_QWORD *)(v3 + 312);
    outlined init with take of Image.Resolved?((uint64_t)v152, (uint64_t)v111, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v111) == 1)
    {
      *(_QWORD *)&v112 = v98;
      *((_QWORD *)&v112 + 1) = v97;
      *(_QWORD *)&v113 = v96;
      *((_QWORD *)&v113 + 1) = v95;
      *(_QWORD *)&v114 = v94;
      *((_QWORD *)&v114 + 1) = v93;
      v115 = v90;
      *(_QWORD *)&v116 = v11;
      *((_QWORD *)&v116 + 1) = v79;
      *(_QWORD *)&v117 = v84;
      *((_QWORD *)&v117 + 1) = v83;
      *(_QWORD *)&v118 = v82;
      *((_QWORD *)&v118 + 1) = v81;
      *(_QWORD *)&v119 = v80;
      ScrollGeometry.visibleRect.getter();
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v78, v24), v92);
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v78, v24), v92);
      v23 = *((_QWORD *)&v105[13] + 1);
      v12 = *((_QWORD *)&v105[14] + 1);
      v11 = *(_QWORD *)&v105[14];
      v14 = *((_QWORD *)&v105[15] + 1);
      v13 = *(_QWORD *)&v105[15];
      v16 = *((_QWORD *)&v105[16] + 1);
      v15 = *(_QWORD *)&v105[16];
      v17 = *(_QWORD *)&v105[17];
      v97 = *(_QWORD *)&v105[11];
      v98 = *((_QWORD *)&v105[10] + 1);
      v112 = *(_OWORD *)((char *)&v105[10] + 8);
      v95 = *(_QWORD *)&v105[12];
      v96 = *((_QWORD *)&v105[11] + 1);
      v113 = *(_OWORD *)((char *)&v105[11] + 8);
      v93 = *(_QWORD *)&v105[13];
      v94 = *((_QWORD *)&v105[12] + 1);
      v114 = *(_OWORD *)((char *)&v105[12] + 8);
      v115 = *((_QWORD *)&v105[13] + 1);
      v116 = v105[14];
      v117 = v105[15];
      v118 = v105[16];
      *(_QWORD *)&v119 = *(_QWORD *)&v105[17];
      ScrollGeometry.visibleRect.getter();
    }
    else
    {
      v23 = v90;
      v12 = v79;
      v17 = v80;
      v14 = v83;
      v13 = v84;
      v16 = v81;
      v15 = v82;
    }
  }
  v112 = v86;
  v113 = v87;
  v114 = v88;
  LODWORD(v115) = v89;
  v116 = *(_OWORD *)((char *)&v105[3] + 8);
  v117 = *(_OWORD *)((char *)&v105[4] + 8);
  v118 = *(_OWORD *)((char *)&v105[5] + 8);
  v119 = *(_OWORD *)((char *)&v105[6] + 8);
  v120 = *(_OWORD *)((char *)&v105[7] + 8);
  v121 = *(_OWORD *)((char *)&v105[8] + 8);
  v122 = *(_OWORD *)((char *)&v105[9] + 8);
  v123 = v98;
  v124 = v97;
  v125 = v96;
  v126 = v95;
  v127 = v94;
  v128 = v93;
  v129 = v23;
  v130 = v11;
  v131 = v12;
  v132 = v13;
  v133 = v14;
  v134 = v15;
  v135 = v16;
  v136 = v17;
  v137 = v92;
  v138 = v19;
  type metadata accessor for IncrementalLayoutViewCache();
  v25 = *(_QWORD *)AGGraphGetValue();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
  v27 = v26;
  MEMORY[0x1E0C80A78](v26, v28);
  v77[2] = v4;
  v77[3] = &v112;
  v29 = v4;
  v30 = v99;
  v77[4] = v99;
  v31 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v25 + 288);
  swift_retain();
  v31(v27, partial apply for specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:), v77, v27, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  v32 = *(unsigned __int8 *)(v30 + 40);
  v33 = v29;
  if (v32 == 1)
  {
    v34 = *((_DWORD *)v29 + 10);
    AGGraphGetValue();
    swift_retain();
    v35 = IncrementalLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v35 && v34 != *MEMORY[0x1E0CFED28])
    {
      v36 = AGCreateWeakAttribute();
      *(_QWORD *)(swift_allocObject() + 16) = v36;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  memcpy(v111, v29, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  v37 = v139;
  AGGraphGetValue();
  v38 = *(_BYTE *)AGGraphGetValue();
  v145 = *(_OWORD *)((char *)&v111[15] + 8);
  v146 = *(_OWORD *)((char *)&v111[16] + 8);
  v147[0] = *(_OWORD *)((char *)&v111[17] + 8);
  *(_OWORD *)((char *)v147 + 9) = *(_OWORD *)((char *)&v111[18] + 1);
  v141 = *(_OWORD *)((char *)&v111[11] + 8);
  v142 = *(_OWORD *)((char *)&v111[12] + 8);
  v143 = *(_OWORD *)((char *)&v111[13] + 8);
  v144 = *(_OWORD *)((char *)&v111[14] + 8);
  v139 = *(_OWORD *)((char *)&v111[9] + 8);
  v140 = *(_OWORD *)((char *)&v111[10] + 8);
  outlined init with take of CGSize?((uint64_t)v147 + 8, (uint64_t)v148, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  Value = (_OWORD *)AGGraphGetValue();
  v40 = Value[1];
  *(_OWORD *)v106 = *Value;
  *(_OWORD *)&v106[16] = v40;
  v41 = MEMORY[0x18D75BE3C]();
  v43 = v42;
  outlined init with take of CGSize?((uint64_t)v148, (uint64_t)&v149, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  v44 = 0.0;
  if ((v151 & 1) != 0)
  {
    v45 = 3;
    v46 = 0.0;
    v47 = v91;
    v48 = v99;
  }
  else
  {
    v45 = 3;
    v47 = v91;
    v48 = v99;
    if (v149 != 0.0 || (v46 = 0.0, v150 != 0.0))
    {
      v45 = v37 == 2 ? 3 : 1;
      v46 = 0.0;
      v44 = v37 == 2 ? 0.0 : v150;
      if (v37 != 2)
        v46 = v149;
    }
  }
  v49 = *(double *)(v48 + 48);
  v50 = *(double *)(v48 + 56);
  v51 = v49 == 0.0;
  if (v50 != 0.0)
    v51 = 0;
  if (v37 == 2)
    v51 = 1;
  if (v51)
    v52 = v45;
  else
    v52 = 0;
  if (v51)
    v53 = -0.0;
  else
    v53 = *(double *)(v48 + 56);
  v54 = v44 + v53;
  if (v51)
    v55 = -0.0;
  else
    v55 = *(double *)(v48 + 48);
  v56 = v46 + v55;
  if (v46 + v55 == 0.0
    && v54 == 0.0
    && v37 != 2
    && (*((double *)&v145 + 1) != 0.0 || *(double *)&v146 != 0.0)
    && (v41 != 0.0 || v43 != 0.0))
  {
    v57 = vabdd_f64(v43, *(double *)&v146);
    if (vabdd_f64(v41, *((double *)&v145 + 1)) >= 0.01 || v57 >= 0.01)
    {
      v58 = *(_BYTE *)(v99 + 40);
      v59 = *(_BYTE *)(v99 + 64);
      *(_QWORD *)v106 = *(_QWORD *)v99;
      *(_OWORD *)&v106[8] = *(_OWORD *)(v99 + 8);
      *(_OWORD *)&v106[24] = *(_OWORD *)(v99 + 24);
      v107 = v58;
      v108 = v49;
      v109 = v50;
      v110 = v59;
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v111);
      swift_bridgeObjectRetain();
      specialized IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)v106, (char *)a1);
      v61 = v60;
      v63 = v62;
      v48 = v99;
      swift_bridgeObjectRelease();
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v111);
      if (v61 != 0.0 || v63 != 0.0)
      {
        v52 = 2;
        v54 = v63;
        v56 = v61;
      }
    }
  }
  if ((v38 & (v56 != 0.0)) != 0)
    v64 = -v56;
  else
    v64 = v56;
  v65 = v54 == 0.0 && v64 == 0.0;
  if (!v65 && v52 != 3)
  {
    specialized IncrementalChildPlacements.logTranslation(_:reason:)(v52, v64, v54);
    v66 = v85;
    *v66 = CGRectOffset(*v85, v64, v54);
    v33[39] = v64;
    v33[40] = v54;
    v47[24] = 0;
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TableColumnList(WeakValue, (uint64_t)v103);
    }
    else
    {
      v104 = 0;
      memset(v103, 0, sizeof(v103));
    }
    AGGraphSetUpdate();
    outlined init with copy of ScrollableCollection?((uint64_t)v103, (uint64_t)v100, (unint64_t *)&lazy cache variable for type metadata for Scrollable?, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8]);
    v68 = v101;
    if (!v101)
    {
      outlined destroy of Scrollable?((uint64_t)v103);
      outlined destroy of Scrollable?((uint64_t)v100);
      if ((*(_BYTE *)(v48 + 64) & 1) != 0)
        goto LABEL_64;
LABEL_66:
      v70 = (double *)(v48 + 8);
      v73 = (uint64_t *)(v48 + 16);
      v72 = (uint64_t *)(v48 + 24);
      v71 = (double *)(v48 + 32);
      goto LABEL_67;
    }
    v69 = v102;
    __swift_project_boxed_opaque_existential_1(v100, v101);
    (*(void (**)(uint64_t, uint64_t, double, double))(v69 + 32))(v68, v69, v64, v54);
    outlined destroy of Scrollable?((uint64_t)v103);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  }
  if ((*(_BYTE *)(v48 + 64) & 1) == 0)
    goto LABEL_66;
LABEL_64:
  v70 = (double *)MEMORY[0x1E0C9D628];
  v71 = (double *)(MEMORY[0x1E0C9D628] + 24);
  v72 = (uint64_t *)(MEMORY[0x1E0C9D628] + 16);
  v73 = (uint64_t *)(MEMORY[0x1E0C9D628] + 8);
LABEL_67:
  result = *v71;
  v75 = *v72;
  v76 = *v73;
  v33[12] = *v70;
  *((_QWORD *)v33 + 13) = v76;
  *((_QWORD *)v33 + 14) = v75;
  v33[15] = result;
  v33[36] = 0.0;
  v33[37] = 0.0;
  *v47 = 1;
  return result;
}

double specialized IncrementalChildPlacements.placeChildren(placementContext:in:for:)(__int128 *a1, uint64_t *a2, CGRect *a3, void (*a4)(_OWORD *__return_ptr), uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, double, double), double (*a9)(_BYTE *, __int128 *, uint64_t))
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat v24;
  char v25;
  __int128 v26;
  _OWORD *v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *Value;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void (*v35)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  int v36;
  Swift::Bool v37;
  uint64_t v38;
  int v39;
  _OWORD *v40;
  __int128 v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unsigned int v46;
  double v47;
  _BYTE *v48;
  uint64_t *v49;
  double v50;
  double v51;
  _BOOL4 v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unsigned __int8 v60;
  double v61;
  BOOL v62;
  CGRect *v63;
  uint64_t WeakValue;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  double *v68;
  uint64_t *v69;
  uint64_t *v70;
  double result;
  uint64_t v72;
  uint64_t v73;
  double v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  _QWORD v82[7];
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, double, double);
  CGRect *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  CGSize v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD v109[3];
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[32];
  uint64_t v113;
  _OWORD v114[19];
  _BYTE v115[40];
  char v116;
  double v117;
  double v118;
  char v119;
  _OWORD v120[21];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  CGSize v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD v156[2];
  _BYTE v157[24];
  double v158;
  double v159;
  char v160;
  _BYTE v161[304];
  _BYTE v162[320];

  v90 = a6;
  v91 = a7;
  v99 = a5;
  v11 = v9;
  v108 = a2;
  a4(v120);
  outlined init with take of Image.Resolved?((uint64_t)v120, (uint64_t)v161, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)v161, (uint64_t)v162, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v162) == 1)
  {
    v14 = *((_QWORD *)a1 + 21);
    v106 = *((_QWORD *)a1 + 22);
    v107 = v14;
    v15 = *((_QWORD *)a1 + 23);
    v104 = *((_QWORD *)a1 + 24);
    v105 = v15;
    v16 = *((_QWORD *)a1 + 25);
    v102 = *((_QWORD *)a1 + 26);
    v103 = v16;
    v17 = *((_QWORD *)a1 + 28);
    v98 = *((_QWORD *)a1 + 27);
    v18 = *((_QWORD *)a1 + 29);
    v19 = *((_QWORD *)a1 + 30);
    v20 = *((_QWORD *)a1 + 31);
    v21 = *((_QWORD *)a1 + 32);
    v22 = *((_QWORD *)a1 + 33);
    v23 = *((_QWORD *)a1 + 34);
    v24 = *((double *)a1 + 36);
    v101.width = *((CGFloat *)a1 + 35);
    v101.height = v24;
    v25 = *((_BYTE *)a1 + 296) & 1;
    v97 = *((_DWORD *)a1 + 12);
    v26 = a1[2];
    v95 = a1[1];
    v96 = v26;
    v94 = *a1;
    v27 = a1;
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v161, (uint64_t)v120, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    v25 = BYTE8(v120[18]);
    v101 = *(CGSize *)((char *)&v120[17] + 8);
    v106 = *(_QWORD *)&v120[11];
    v107 = *((_QWORD *)&v120[10] + 1);
    v104 = *(_QWORD *)&v120[12];
    v105 = *((_QWORD *)&v120[11] + 1);
    v102 = *(_QWORD *)&v120[13];
    v103 = *((_QWORD *)&v120[12] + 1);
    v98 = *((_QWORD *)&v120[13] + 1);
    v18 = *((_QWORD *)&v120[14] + 1);
    v17 = *(_QWORD *)&v120[14];
    v20 = *((_QWORD *)&v120[15] + 1);
    v19 = *(_QWORD *)&v120[15];
    v22 = *((_QWORD *)&v120[16] + 1);
    v21 = *(_QWORD *)&v120[16];
    v23 = *(_QWORD *)&v120[17];
    v97 = v120[3];
    v95 = v120[1];
    v96 = v120[2];
    v94 = v120[0];
    v27 = v120;
  }
  memcpy(v114, v27, 0x129uLL);
  v28 = *(_BYTE *)(v9 + 328);
  v100 = (_BYTE *)(v9 + 304);
  v92 = a8;
  v93 = a3;
  if ((v28 & 1) != 0)
  {
    v29 = v98;
  }
  else
  {
    v85 = v23;
    v86 = v22;
    v87 = v21;
    v88 = v20;
    v89 = v19;
    v83 = *(_QWORD *)(v9 + 320);
    v84 = v18;
    v30 = *(_QWORD *)(v9 + 312);
    outlined init with take of Image.Resolved?((uint64_t)v161, (uint64_t)v120, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v120) == 1)
    {
      *(_QWORD *)&v121 = v107;
      *((_QWORD *)&v121 + 1) = v106;
      *(_QWORD *)&v122 = v105;
      *((_QWORD *)&v122 + 1) = v104;
      *(_QWORD *)&v123 = v103;
      *((_QWORD *)&v123 + 1) = v102;
      v124 = v98;
      *(_QWORD *)&v125 = v17;
      *((_QWORD *)&v125 + 1) = v84;
      *(_QWORD *)&v126 = v89;
      *((_QWORD *)&v126 + 1) = v88;
      *(_QWORD *)&v127 = v87;
      *((_QWORD *)&v127 + 1) = v86;
      *(_QWORD *)&v128 = v85;
      ScrollGeometry.visibleRect.getter();
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v83, v30), v101);
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v83, v30), v101);
      v29 = *((_QWORD *)&v114[13] + 1);
      v18 = *((_QWORD *)&v114[14] + 1);
      v17 = *(_QWORD *)&v114[14];
      v20 = *((_QWORD *)&v114[15] + 1);
      v19 = *(_QWORD *)&v114[15];
      v22 = *((_QWORD *)&v114[16] + 1);
      v21 = *(_QWORD *)&v114[16];
      v23 = *(_QWORD *)&v114[17];
      v106 = *(_QWORD *)&v114[11];
      v107 = *((_QWORD *)&v114[10] + 1);
      v121 = *(_OWORD *)((char *)&v114[10] + 8);
      v104 = *(_QWORD *)&v114[12];
      v105 = *((_QWORD *)&v114[11] + 1);
      v122 = *(_OWORD *)((char *)&v114[11] + 8);
      v102 = *(_QWORD *)&v114[13];
      v103 = *((_QWORD *)&v114[12] + 1);
      v123 = *(_OWORD *)((char *)&v114[12] + 8);
      v124 = *((_QWORD *)&v114[13] + 1);
      v125 = v114[14];
      v126 = v114[15];
      v127 = v114[16];
      *(_QWORD *)&v128 = *(_QWORD *)&v114[17];
      ScrollGeometry.visibleRect.getter();
    }
    else
    {
      v29 = v98;
      v18 = v84;
      v23 = v85;
      v20 = v88;
      v19 = v89;
      v22 = v86;
      v21 = v87;
    }
  }
  v121 = v94;
  v122 = v95;
  v123 = v96;
  LODWORD(v124) = v97;
  v125 = *(_OWORD *)((char *)&v114[3] + 8);
  v126 = *(_OWORD *)((char *)&v114[4] + 8);
  v127 = *(_OWORD *)((char *)&v114[5] + 8);
  v128 = *(_OWORD *)((char *)&v114[6] + 8);
  v129 = *(_OWORD *)((char *)&v114[7] + 8);
  v130 = *(_OWORD *)((char *)&v114[8] + 8);
  v131 = *(_OWORD *)((char *)&v114[9] + 8);
  v132 = v107;
  v133 = v106;
  v134 = v105;
  v135 = v104;
  v136 = v103;
  v137 = v102;
  v138 = v29;
  v139 = v17;
  v140 = v18;
  v141 = v19;
  v142 = v20;
  v143 = v21;
  v144 = v22;
  v145 = v23;
  v146 = v101;
  v147 = v25;
  type metadata accessor for IncrementalLayoutViewCache();
  Value = (uint64_t *)AGGraphGetValue();
  v32 = *Value;
  MEMORY[0x1E0C80A78](Value, v33);
  v82[2] = v11;
  v82[3] = &v121;
  v34 = v108;
  v82[4] = v108;
  v35 = *(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v32 + 288);
  swift_retain();
  v35(MEMORY[0x1E0DEE9C0] + 8, v99, v82, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0] + 8);
  swift_release();
  if (*((_BYTE *)v34 + 40) == 1)
  {
    v36 = *(_DWORD *)(v11 + 40);
    AGGraphGetValue();
    swift_retain();
    v37 = IncrementalLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v37 && v36 != *MEMORY[0x1E0CFED28])
    {
      v38 = AGCreateWeakAttribute();
      *(_QWORD *)(swift_allocObject() + 16) = v38;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  memcpy(v120, (const void *)v11, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  v39 = v148;
  AGGraphGetValue();
  LODWORD(v107) = *(unsigned __int8 *)AGGraphGetValue();
  v154 = *(_OWORD *)((char *)&v120[15] + 8);
  v155 = *(_OWORD *)((char *)&v120[16] + 8);
  v156[0] = *(_OWORD *)((char *)&v120[17] + 8);
  *(_OWORD *)((char *)v156 + 9) = *(_OWORD *)((char *)&v120[18] + 1);
  v150 = *(_OWORD *)((char *)&v120[11] + 8);
  v151 = *(_OWORD *)((char *)&v120[12] + 8);
  v152 = *(_OWORD *)((char *)&v120[13] + 8);
  v153 = *(_OWORD *)((char *)&v120[14] + 8);
  v148 = *(_OWORD *)((char *)&v120[9] + 8);
  v149 = *(_OWORD *)((char *)&v120[10] + 8);
  outlined init with take of CGSize?((uint64_t)v156 + 8, (uint64_t)v157, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  v40 = (_OWORD *)AGGraphGetValue();
  v41 = v40[1];
  *(_OWORD *)v115 = *v40;
  *(_OWORD *)&v115[16] = v41;
  v42 = MEMORY[0x18D75BE3C]();
  v44 = v43;
  outlined init with take of CGSize?((uint64_t)v157, (uint64_t)&v158, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  v45 = 0.0;
  if ((v160 & 1) != 0)
  {
    v46 = 3;
    v47 = 0.0;
    v48 = v100;
    v49 = v108;
  }
  else
  {
    v46 = 3;
    v48 = v100;
    v49 = v108;
    if (v158 != 0.0 || (v47 = 0.0, v159 != 0.0))
    {
      v46 = v39 == 2 ? 3 : 1;
      v47 = 0.0;
      v45 = v39 == 2 ? 0.0 : v159;
      if (v39 != 2)
        v47 = v158;
    }
  }
  v50 = *((double *)v49 + 6);
  v51 = *((double *)v49 + 7);
  v52 = v50 == 0.0;
  if (v51 != 0.0)
    v52 = 0;
  if (v39 == 2)
    v52 = 1;
  if (v52)
    v53 = v46;
  else
    v53 = 0;
  if (v52)
    v54 = -0.0;
  else
    v54 = *((double *)v49 + 7);
  v55 = v45 + v54;
  if (v52)
    v56 = -0.0;
  else
    v56 = *((double *)v49 + 6);
  v57 = v47 + v56;
  if (v47 + v56 != 0.0
    || v55 != 0.0
    || v39 == 2
    || *((double *)&v154 + 1) == 0.0 && *(double *)&v155 == 0.0
    || v42 == 0.0 && v44 == 0.0
    || (v58 = vabdd_f64(v42, *((double *)&v154 + 1)), v59 = vabdd_f64(v44, *(double *)&v155), v58 < 0.01) && v59 < 0.01)
  {
    v60 = v107;
  }
  else
  {
    v74 = *(double *)v49;
    v75 = *((_BYTE *)v49 + 40);
    if (v59 < 0.01)
      v76 = v58 >= 0.01;
    else
      v76 = (v58 >= 0.01) | 2u;
    v77 = *((_BYTE *)v108 + 64);
    *(double *)v115 = v74;
    *(_OWORD *)&v115[8] = *(_OWORD *)(v108 + 1);
    *(_OWORD *)&v115[24] = *(_OWORD *)(v108 + 3);
    v116 = v75;
    v117 = v50;
    v118 = v51;
    v119 = v77;
    outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v120);
    swift_bridgeObjectRetain();
    v78 = v76;
    v49 = v108;
    v79 = a9(v115, a1, v78);
    v81 = v80;
    swift_bridgeObjectRelease();
    outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v120);
    v60 = v107;
    if (v79 != 0.0 || v81 != 0.0)
    {
      v53 = 2;
      v55 = v81;
      v57 = v79;
    }
  }
  if ((v60 & (v57 != 0.0)) != 0)
    v61 = -v57;
  else
    v61 = v57;
  v62 = v55 == 0.0 && v61 == 0.0;
  if (!v62 && (_DWORD)v53 != 3)
  {
    v92(v53, v61, v55);
    v63 = v93;
    *v63 = CGRectOffset(*v93, v61, v55);
    *(double *)(v11 + 312) = v61;
    *(double *)(v11 + 320) = v55;
    v48[24] = 0;
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TableColumnList(WeakValue, (uint64_t)v112);
    }
    else
    {
      v113 = 0;
      memset(v112, 0, sizeof(v112));
    }
    AGGraphSetUpdate();
    outlined init with copy of ScrollableCollection?((uint64_t)v112, (uint64_t)v109, (unint64_t *)&lazy cache variable for type metadata for Scrollable?, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8]);
    v65 = v110;
    if (!v110)
    {
      outlined destroy of Scrollable?((uint64_t)v112);
      outlined destroy of Scrollable?((uint64_t)v109);
      if ((v49[8] & 1) != 0)
        goto LABEL_62;
LABEL_64:
      v67 = v49 + 1;
      v70 = v49 + 2;
      v69 = v49 + 3;
      v68 = (double *)(v49 + 4);
      goto LABEL_65;
    }
    v66 = v111;
    __swift_project_boxed_opaque_existential_1(v109, v110);
    (*(void (**)(uint64_t, uint64_t, double, double))(v66 + 32))(v65, v66, v61, v55);
    outlined destroy of Scrollable?((uint64_t)v112);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  }
  if ((v49[8] & 1) == 0)
    goto LABEL_64;
LABEL_62:
  v67 = (_QWORD *)MEMORY[0x1E0C9D628];
  v68 = (double *)(MEMORY[0x1E0C9D628] + 24);
  v69 = (uint64_t *)(MEMORY[0x1E0C9D628] + 16);
  v70 = (uint64_t *)(MEMORY[0x1E0C9D628] + 8);
LABEL_65:
  result = *v68;
  v72 = *v69;
  v73 = *v70;
  *(_QWORD *)(v11 + 96) = *v67;
  *(_QWORD *)(v11 + 104) = v73;
  *(_QWORD *)(v11 + 112) = v72;
  *(double *)(v11 + 120) = result;
  *(_QWORD *)(v11 + 288) = 0;
  *(_QWORD *)(v11 + 296) = 0;
  *v48 = 1;
  return result;
}

uint64_t specialized IncrementalChildPlacements.mainID(children:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    v6 = v3 - 1;
    if (v3 == 1)
    {
      swift_retain();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_retain();
      v7 = 0;
      v21 = v4;
      do
      {
        v9 = *(_QWORD *)(v4 + v7 + 104);
        if (*(_BYTE *)(v9 + 165) == 1 || *(_BYTE *)(v9 + 166) == 1)
        {
          swift_retain();
          v10 = INFINITY;
        }
        else
        {
          swift_retain_n();
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          v12 = v11;
          v14 = v13;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v14, v12));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          v10 = v15;
          v4 = v21;
        }
        if (*(_BYTE *)(v5 + 165) == 1 || *(_BYTE *)(v5 + 166) == 1)
        {
          v8 = INFINITY;
        }
        else
        {
          swift_retain();
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          v17 = v16;
          v19 = v18;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v19, v17));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          v4 = v21;
        }
        if (v10 < v8)
          v5 = v9;
        swift_release();
        v7 += 72;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
    v20 = *(_QWORD *)(v5 + 144);
    *a2 = *(_QWORD *)(v5 + 136);
    a2[1] = v20;
    swift_bridgeObjectRetain();
    return swift_release();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t specialized IncrementalChildPlacements.mainID(children:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, _DWORD *a4@<X3>, _DWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  double v28;
  double v29;
  double v30;
  int v31;
  char v32;
  BOOL v33;
  int v34;
  BOOL v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  double v49;
  uint64_t v50;
  _DWORD *v51;
  double v52;
  double v53;
  double v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;

  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + 32);
    v10 = v7 - 1;
    if (v7 == 1)
    {
      swift_retain();
    }
    else
    {
      v48 = a6;
      v12 = *(double *)(result + 88);
      v13 = *(double *)(result + 96);
      v57 = *(double *)(result + 80);
      v61 = *(unsigned __int8 *)(result + 64);
      v60 = *(_QWORD *)(result + 56);
      v59 = *(unsigned __int8 *)(result + 48);
      v58 = *(_QWORD *)(result + 40);
      swift_bridgeObjectRetain();
      swift_retain();
      v14 = 0;
      v50 = v8;
      v51 = a5;
      v15 = v8;
      do
      {
        v24 = *(_QWORD *)(v15 + v14 + 104);
        v23 = *(_QWORD *)(v15 + v14 + 112);
        v25 = *(unsigned __int8 *)(v15 + v14 + 120);
        v26 = *(_QWORD *)(v15 + v14 + 128);
        v27 = *(unsigned __int8 *)(v15 + v14 + 136);
        v28 = *(double *)(v15 + v14 + 152);
        v29 = *(double *)(v15 + v14 + 160);
        v30 = *(double *)(v15 + v14 + 168);
        v31 = *a3;
        if ((*a3 & ~*a2) == 0)
          LOBYTE(v31) = 0;
        v32 = v31 | *a2;
        v33 = *(_BYTE *)(v24 + 165) != 1 || (v32 & 1) == 0;
        if (v33 && ((v34 = v32 & 2, *(_BYTE *)(v24 + 166) == 1) ? (v35 = v34 == 0) : (v35 = 1), v35))
        {
          swift_retain_n();
          v52 = v12;
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          v38 = v37;
          v40 = v39;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v40, v38));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          v36 = v41;
          v15 = v50;
          a5 = v51;
          v12 = v52;
        }
        else
        {
          swift_retain();
          v36 = INFINITY;
        }
        v42 = *a5;
        if ((*a5 & ~*a4) == 0)
          LOBYTE(v42) = 0;
        if (*(_BYTE *)(v9 + 165) == 1 && ((v42 | *a4) & 1) != 0
          || *(_BYTE *)(v9 + 166) == 1 && ((v42 | *a4) & 2) != 0)
        {
          v16 = INFINITY;
        }
        else
        {
          swift_retain();
          v49 = v13;
          v53 = v12;
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          v44 = v43;
          v46 = v45;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v46, v44));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          v15 = v50;
          a5 = v51;
          v13 = v49;
          v12 = v53;
        }
        v17 = v36 < v16;
        if (v36 < v16)
          v9 = v24;
        v18 = v58;
        if (v36 < v16)
          v18 = v23;
        v58 = v18;
        v19 = v59;
        if (v36 < v16)
          v19 = v25;
        v59 = v19;
        v20 = v60;
        if (v36 < v16)
          v20 = v26;
        v60 = v20;
        v21 = v61;
        if (v36 < v16)
          v21 = v27;
        v61 = v21;
        v22 = v57;
        if (v17)
          v22 = v28;
        v57 = v22;
        if (v17)
        {
          v12 = v29;
          v13 = v30;
        }
        swift_release();
        v14 += 72;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      a6 = v48;
    }
    v47 = *(_QWORD *)(v9 + 144);
    *a6 = *(_QWORD *)(v9 + 136);
    a6[1] = v47;
    swift_bridgeObjectRetain();
    return swift_release();
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  return result;
}

uint64_t specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t Value;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  _BYTE v17[120];

  Value = AGGraphGetValue();
  v10 = *(_QWORD *)Value;
  v11 = *(_QWORD *)(Value + 8);
  v12 = *(_BYTE *)(Value + 16);
  v13 = *(unsigned int *)(Value + 20);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v15 = result;
    AGGraphGetValue();
    swift_retain();
    IncrementalLayoutViewCache.children(context:)(v15, (uint64_t)v17);
    swift_release();
    a6(v17, a3, a1, a4, v10, v11, v12 | (unint64_t)(v13 << 32));
    return outlined destroy of _IncrementalLayout_Children((uint64_t)v17);
  }
  return result;
}

uint64_t specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_BYTE *, uint64_t, uint64_t, uint64_t))
{
  uint64_t Value;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  int v14;
  _BYTE v15[120];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  Value = AGGraphGetValue();
  v11 = *(_OWORD *)(Value + 16);
  v16 = *(_OWORD *)Value;
  v12 = *(_OWORD *)(Value + 32);
  v17 = v11;
  v18 = v12;
  v19 = *(_QWORD *)(Value + 48);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v14 = result;
    AGGraphGetValue();
    swift_retain();
    IncrementalLayoutViewCache.children(context:)(v14, (uint64_t)v15);
    swift_release();
    a6(v15, a3, a1, a4);
    return outlined destroy of _IncrementalLayout_Children((uint64_t)v15);
  }
  return result;
}

uint64_t specialized closure #1 in IncrementalChildPlacements.placeChildren(placementContext:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  _BYTE v18[120];

  Value = AGGraphGetValue();
  v9 = *(_QWORD *)Value;
  v10 = *(_QWORD *)(Value + 8);
  v11 = *(_QWORD *)(Value + 16);
  v12 = *(_BYTE *)(Value + 24);
  v13 = *(unsigned int *)(Value + 28);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetCurrentAttribute();
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    v15 = result;
    AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    IncrementalLayoutViewCache.children(context:)(v15, (uint64_t)v18);
    swift_release();
    a6(v18, a3, a1, a4, v9, v10, v11, v12 | (unint64_t)(v13 << 32));
    outlined destroy of _IncrementalLayout_Children((uint64_t)v18);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  CGPoint v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  double v41;
  char *v42;
  _OWORD __dst[20];

  v3 = v2;
  memcpy(__dst, a2, 0x129uLL);
  result = _IncrementalLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0)
    return result;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v2);
  result = AGGraphSetUpdate();
  if (v7)
    return result;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
  specialized Sequence.min(by:)(v8, v3, (unint64_t *)__dst);
  result = swift_bridgeObjectRelease();
  v9 = *((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    return result;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v11)
    return swift_release();
  v40 = *(_QWORD *)&__dst[0];
  v42 = a2;
  outlined retain of [Text.Modifier](a1);
  outlined retain of [Text.Modifier](a1);
  for (i = v10 + 48; ; i += 72)
  {
    v13 = *(_QWORD *)(i - 16);
    if (*(_BYTE *)(v9 + 165) == 1 || *(_BYTE *)(v9 + 166) == 1)
      goto LABEL_6;
    v14 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(v9 + 136);
    *((_QWORD *)&__dst[0] + 1) = v14;
    swift_retain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0)
      break;
    swift_release();
LABEL_6:
    if (!--v11)
    {
      outlined release of _IncrementalLayout_Placements(a1);
      outlined release of _IncrementalLayout_Placements(a1);
      return swift_release();
    }
  }
  outlined release of _IncrementalLayout_Placements(a1);
  outlined release of _IncrementalLayout_Placements(a1);
  v15 = *(_QWORD *)(v13 + 144);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v13 + 136);
  *((_QWORD *)&__dst[0] + 1) = v15;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v16 = *(_OWORD *)(v42 + 248);
  LOBYTE(__dst[15]) = v42[296];
  v17 = *(_OWORD *)(v42 + 200);
  __dst[8] = *(_OWORD *)(v42 + 184);
  __dst[9] = v17;
  v18 = *(_OWORD *)(v42 + 232);
  __dst[10] = *(_OWORD *)(v42 + 216);
  __dst[11] = v18;
  v19 = *(_OWORD *)(v42 + 136);
  __dst[4] = *(_OWORD *)(v42 + 120);
  __dst[5] = v19;
  v20 = *(_OWORD *)(v42 + 168);
  __dst[6] = *(_OWORD *)(v42 + 152);
  __dst[7] = v20;
  v21 = *(_OWORD *)(v42 + 72);
  __dst[0] = *(_OWORD *)(v42 + 56);
  __dst[1] = v21;
  v22 = *(_OWORD *)(v42 + 104);
  __dst[2] = *(_OWORD *)(v42 + 88);
  __dst[3] = v22;
  v23 = *(_OWORD *)(v42 + 264);
  v24 = *(_OWORD *)(v42 + 280);
  __dst[12] = v16;
  __dst[13] = v23;
  __dst[14] = v24;
  result = ScrollGeometry.visibleRect.getter();
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v38 = v26;
  v39 = v25;
  v27 = *(_QWORD *)(v3 + 136);
  if (v40 >= *(_QWORD *)(v27 + 16))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v28 = v27 + 32 * v40;
  v41 = *(double *)(v28 + 40);
  v29 = *(double *)(v3 + 240);
  v36 = *(double *)(v3 + 248);
  v37 = *(double *)(v3 + 168);
  v30 = *(double *)(v28 + 32) - *(double *)(v3 + 160);
  swift_retain();
  v31 = _IncrementalLayout_PlacedChild.size.getter();
  v33 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v32, *(unint64_t *)&v31));
  _IncrementalLayout_PlacedChild.size.getter();
  swift_release();
  v34 = *((double *)v42 + 3);
  v35 = v33.x - v39 - v30 - (*((double *)v42 + 2) - v29);
  if ((Axis.Set.contains(_:)() & 1) == 0)
    v35 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    if (v35 != 0.0 || v33.y - v38 - (v41 - v37) - (v34 - v36) != 0.0)
    {
LABEL_22:
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
      specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of IncrementalChildPlacements<LazyVStackLayout>(v3);
    }
  }
  else if (v35 != 0.0)
  {
    goto LABEL_22;
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  CGPoint v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  double v41;
  char *v42;
  _OWORD __dst[20];

  v3 = v2;
  memcpy(__dst, a2, 0x129uLL);
  result = _IncrementalLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0)
    return result;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v2);
  result = AGGraphSetUpdate();
  if (v7)
    return result;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
  specialized Sequence.min(by:)(v8, v3, dword_1E1AEE9D8, &dword_1E1AEE9D8[1], dword_1E1AEE9B0, &dword_1E1AEE9B0[1], (unint64_t *)__dst);
  result = swift_bridgeObjectRelease();
  v9 = *((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    return result;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v11)
    return swift_release();
  v40 = *(_QWORD *)&__dst[0];
  v42 = a2;
  outlined retain of [Text.Modifier](a1);
  outlined retain of [Text.Modifier](a1);
  for (i = v10 + 48; ; i += 72)
  {
    v13 = *(_QWORD *)(i - 16);
    if (*(_BYTE *)(v9 + 165) == 1 || *(_BYTE *)(v9 + 166) == 1)
      goto LABEL_6;
    v14 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(v9 + 136);
    *((_QWORD *)&__dst[0] + 1) = v14;
    swift_retain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0)
      break;
    swift_release();
LABEL_6:
    if (!--v11)
    {
      outlined release of _IncrementalLayout_Placements(a1);
      outlined release of _IncrementalLayout_Placements(a1);
      return swift_release();
    }
  }
  outlined release of _IncrementalLayout_Placements(a1);
  outlined release of _IncrementalLayout_Placements(a1);
  v15 = *(_QWORD *)(v13 + 144);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v13 + 136);
  *((_QWORD *)&__dst[0] + 1) = v15;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v16 = *(_OWORD *)(v42 + 248);
  LOBYTE(__dst[15]) = v42[296];
  v17 = *(_OWORD *)(v42 + 200);
  __dst[8] = *(_OWORD *)(v42 + 184);
  __dst[9] = v17;
  v18 = *(_OWORD *)(v42 + 232);
  __dst[10] = *(_OWORD *)(v42 + 216);
  __dst[11] = v18;
  v19 = *(_OWORD *)(v42 + 136);
  __dst[4] = *(_OWORD *)(v42 + 120);
  __dst[5] = v19;
  v20 = *(_OWORD *)(v42 + 168);
  __dst[6] = *(_OWORD *)(v42 + 152);
  __dst[7] = v20;
  v21 = *(_OWORD *)(v42 + 72);
  __dst[0] = *(_OWORD *)(v42 + 56);
  __dst[1] = v21;
  v22 = *(_OWORD *)(v42 + 104);
  __dst[2] = *(_OWORD *)(v42 + 88);
  __dst[3] = v22;
  v23 = *(_OWORD *)(v42 + 264);
  v24 = *(_OWORD *)(v42 + 280);
  __dst[12] = v16;
  __dst[13] = v23;
  __dst[14] = v24;
  result = ScrollGeometry.visibleRect.getter();
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v38 = v26;
  v39 = v25;
  v27 = *(_QWORD *)(v3 + 136);
  if (v40 >= *(_QWORD *)(v27 + 16))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v28 = v27 + 32 * v40;
  v41 = *(double *)(v28 + 40);
  v29 = *(double *)(v3 + 240);
  v36 = *(double *)(v3 + 248);
  v37 = *(double *)(v3 + 168);
  v30 = *(double *)(v28 + 32) - *(double *)(v3 + 160);
  swift_retain();
  v31 = _IncrementalLayout_PlacedChild.size.getter();
  v33 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v32, *(unint64_t *)&v31));
  _IncrementalLayout_PlacedChild.size.getter();
  swift_release();
  v34 = *((double *)v42 + 3);
  v35 = v33.x - v39 - v30 - (*((double *)v42 + 2) - v29);
  if ((Axis.Set.contains(_:)() & 1) == 0)
    v35 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    if (v35 != 0.0 || v33.y - v38 - (v41 - v37) - (v34 - v36) != 0.0)
    {
LABEL_22:
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
      specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of IncrementalChildPlacements<LazyVStackLayout>(v3);
    }
  }
  else if (v35 != 0.0)
  {
    goto LABEL_22;
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  CGPoint v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  double v41;
  char *v42;
  _OWORD __dst[20];

  v3 = v2;
  memcpy(__dst, a2, 0x129uLL);
  result = _IncrementalLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0)
    return result;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v2);
  result = AGGraphSetUpdate();
  if (v7)
    return result;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
  specialized Sequence.min(by:)(v8, v3, dword_1E1AEEA78, &dword_1E1AEEA78[1], dword_1E1AEEA50, &dword_1E1AEEA50[1], (unint64_t *)__dst);
  result = swift_bridgeObjectRelease();
  v9 = *((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    return result;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v11)
    return swift_release();
  v40 = *(_QWORD *)&__dst[0];
  v42 = a2;
  outlined retain of [Text.Modifier](a1);
  outlined retain of [Text.Modifier](a1);
  for (i = v10 + 48; ; i += 72)
  {
    v13 = *(_QWORD *)(i - 16);
    if (*(_BYTE *)(v9 + 165) == 1 || *(_BYTE *)(v9 + 166) == 1)
      goto LABEL_6;
    v14 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(v9 + 136);
    *((_QWORD *)&__dst[0] + 1) = v14;
    swift_retain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0)
      break;
    swift_release();
LABEL_6:
    if (!--v11)
    {
      outlined release of _IncrementalLayout_Placements(a1);
      outlined release of _IncrementalLayout_Placements(a1);
      return swift_release();
    }
  }
  outlined release of _IncrementalLayout_Placements(a1);
  outlined release of _IncrementalLayout_Placements(a1);
  v15 = *(_QWORD *)(v13 + 144);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v13 + 136);
  *((_QWORD *)&__dst[0] + 1) = v15;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v16 = *(_OWORD *)(v42 + 248);
  LOBYTE(__dst[15]) = v42[296];
  v17 = *(_OWORD *)(v42 + 200);
  __dst[8] = *(_OWORD *)(v42 + 184);
  __dst[9] = v17;
  v18 = *(_OWORD *)(v42 + 232);
  __dst[10] = *(_OWORD *)(v42 + 216);
  __dst[11] = v18;
  v19 = *(_OWORD *)(v42 + 136);
  __dst[4] = *(_OWORD *)(v42 + 120);
  __dst[5] = v19;
  v20 = *(_OWORD *)(v42 + 168);
  __dst[6] = *(_OWORD *)(v42 + 152);
  __dst[7] = v20;
  v21 = *(_OWORD *)(v42 + 72);
  __dst[0] = *(_OWORD *)(v42 + 56);
  __dst[1] = v21;
  v22 = *(_OWORD *)(v42 + 104);
  __dst[2] = *(_OWORD *)(v42 + 88);
  __dst[3] = v22;
  v23 = *(_OWORD *)(v42 + 264);
  v24 = *(_OWORD *)(v42 + 280);
  __dst[12] = v16;
  __dst[13] = v23;
  __dst[14] = v24;
  result = ScrollGeometry.visibleRect.getter();
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v38 = v26;
  v39 = v25;
  v27 = *(_QWORD *)(v3 + 136);
  if (v40 >= *(_QWORD *)(v27 + 16))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v28 = v27 + 32 * v40;
  v41 = *(double *)(v28 + 40);
  v29 = *(double *)(v3 + 240);
  v36 = *(double *)(v3 + 248);
  v37 = *(double *)(v3 + 168);
  v30 = *(double *)(v28 + 32) - *(double *)(v3 + 160);
  swift_retain();
  v31 = _IncrementalLayout_PlacedChild.size.getter();
  v33 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v32, *(unint64_t *)&v31));
  _IncrementalLayout_PlacedChild.size.getter();
  swift_release();
  v34 = *((double *)v42 + 3);
  v35 = v33.x - v39 - v30 - (*((double *)v42 + 2) - v29);
  if ((Axis.Set.contains(_:)() & 1) == 0)
    v35 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    if (v35 != 0.0 || v33.y - v38 - (v41 - v37) - (v34 - v36) != 0.0)
    {
LABEL_22:
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
      specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of IncrementalChildPlacements<LazyVStackLayout>(v3);
    }
  }
  else if (v35 != 0.0)
  {
    goto LABEL_22;
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  CGPoint v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  double v41;
  char *v42;
  _OWORD __dst[20];

  v3 = v2;
  memcpy(__dst, a2, 0x129uLL);
  result = _IncrementalLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0)
    return result;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v2);
  result = AGGraphSetUpdate();
  if (v7)
    return result;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
  specialized Sequence.min(by:)(v8, v3, dword_1E1AEEAC8, &dword_1E1AEEAC8[1], dword_1E1AEEAA0, &dword_1E1AEEAA0[1], (unint64_t *)__dst);
  result = swift_bridgeObjectRelease();
  v9 = *((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    return result;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v11)
    return swift_release();
  v40 = *(_QWORD *)&__dst[0];
  v42 = a2;
  outlined retain of [Text.Modifier](a1);
  outlined retain of [Text.Modifier](a1);
  for (i = v10 + 48; ; i += 72)
  {
    v13 = *(_QWORD *)(i - 16);
    if (*(_BYTE *)(v9 + 165) == 1 || *(_BYTE *)(v9 + 166) == 1)
      goto LABEL_6;
    v14 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(v9 + 136);
    *((_QWORD *)&__dst[0] + 1) = v14;
    swift_retain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0)
      break;
    swift_release();
LABEL_6:
    if (!--v11)
    {
      outlined release of _IncrementalLayout_Placements(a1);
      outlined release of _IncrementalLayout_Placements(a1);
      return swift_release();
    }
  }
  outlined release of _IncrementalLayout_Placements(a1);
  outlined release of _IncrementalLayout_Placements(a1);
  v15 = *(_QWORD *)(v13 + 144);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v13 + 136);
  *((_QWORD *)&__dst[0] + 1) = v15;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v16 = *(_OWORD *)(v42 + 248);
  LOBYTE(__dst[15]) = v42[296];
  v17 = *(_OWORD *)(v42 + 200);
  __dst[8] = *(_OWORD *)(v42 + 184);
  __dst[9] = v17;
  v18 = *(_OWORD *)(v42 + 232);
  __dst[10] = *(_OWORD *)(v42 + 216);
  __dst[11] = v18;
  v19 = *(_OWORD *)(v42 + 136);
  __dst[4] = *(_OWORD *)(v42 + 120);
  __dst[5] = v19;
  v20 = *(_OWORD *)(v42 + 168);
  __dst[6] = *(_OWORD *)(v42 + 152);
  __dst[7] = v20;
  v21 = *(_OWORD *)(v42 + 72);
  __dst[0] = *(_OWORD *)(v42 + 56);
  __dst[1] = v21;
  v22 = *(_OWORD *)(v42 + 104);
  __dst[2] = *(_OWORD *)(v42 + 88);
  __dst[3] = v22;
  v23 = *(_OWORD *)(v42 + 264);
  v24 = *(_OWORD *)(v42 + 280);
  __dst[12] = v16;
  __dst[13] = v23;
  __dst[14] = v24;
  result = ScrollGeometry.visibleRect.getter();
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v38 = v26;
  v39 = v25;
  v27 = *(_QWORD *)(v3 + 136);
  if (v40 >= *(_QWORD *)(v27 + 16))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v28 = v27 + 32 * v40;
  v41 = *(double *)(v28 + 40);
  v29 = *(double *)(v3 + 240);
  v36 = *(double *)(v3 + 248);
  v37 = *(double *)(v3 + 168);
  v30 = *(double *)(v28 + 32) - *(double *)(v3 + 160);
  swift_retain();
  v31 = _IncrementalLayout_PlacedChild.size.getter();
  v33 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v32, *(unint64_t *)&v31));
  _IncrementalLayout_PlacedChild.size.getter();
  swift_release();
  v34 = *((double *)v42 + 3);
  v35 = v33.x - v39 - v30 - (*((double *)v42 + 2) - v29);
  if ((Axis.Set.contains(_:)() & 1) == 0)
    v35 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    if (v35 != 0.0 || v33.y - v38 - (v41 - v37) - (v34 - v36) != 0.0)
    {
LABEL_22:
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
      specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of IncrementalChildPlacements<LazyVStackLayout>(v3);
    }
  }
  else if (v35 != 0.0)
  {
    goto LABEL_22;
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  CGPoint v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  double v41;
  char *v42;
  _OWORD __dst[20];

  v3 = v2;
  memcpy(__dst, a2, 0x129uLL);
  result = _IncrementalLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0)
    return result;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v2);
  result = AGGraphSetUpdate();
  if (v7)
    return result;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
  specialized Sequence.min(by:)(v8, v3, dword_1E1AEEB18, &dword_1E1AEEB18[1], dword_1E1AEEAF0, &dword_1E1AEEAF0[1], (unint64_t *)__dst);
  result = swift_bridgeObjectRelease();
  v9 = *((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    return result;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v11)
    return swift_release();
  v40 = *(_QWORD *)&__dst[0];
  v42 = a2;
  outlined retain of [Text.Modifier](a1);
  outlined retain of [Text.Modifier](a1);
  for (i = v10 + 48; ; i += 72)
  {
    v13 = *(_QWORD *)(i - 16);
    if (*(_BYTE *)(v9 + 165) == 1 || *(_BYTE *)(v9 + 166) == 1)
      goto LABEL_6;
    v14 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(v9 + 136);
    *((_QWORD *)&__dst[0] + 1) = v14;
    swift_retain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0)
      break;
    swift_release();
LABEL_6:
    if (!--v11)
    {
      outlined release of _IncrementalLayout_Placements(a1);
      outlined release of _IncrementalLayout_Placements(a1);
      return swift_release();
    }
  }
  outlined release of _IncrementalLayout_Placements(a1);
  outlined release of _IncrementalLayout_Placements(a1);
  v15 = *(_QWORD *)(v13 + 144);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v13 + 136);
  *((_QWORD *)&__dst[0] + 1) = v15;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v16 = *(_OWORD *)(v42 + 248);
  LOBYTE(__dst[15]) = v42[296];
  v17 = *(_OWORD *)(v42 + 200);
  __dst[8] = *(_OWORD *)(v42 + 184);
  __dst[9] = v17;
  v18 = *(_OWORD *)(v42 + 232);
  __dst[10] = *(_OWORD *)(v42 + 216);
  __dst[11] = v18;
  v19 = *(_OWORD *)(v42 + 136);
  __dst[4] = *(_OWORD *)(v42 + 120);
  __dst[5] = v19;
  v20 = *(_OWORD *)(v42 + 168);
  __dst[6] = *(_OWORD *)(v42 + 152);
  __dst[7] = v20;
  v21 = *(_OWORD *)(v42 + 72);
  __dst[0] = *(_OWORD *)(v42 + 56);
  __dst[1] = v21;
  v22 = *(_OWORD *)(v42 + 104);
  __dst[2] = *(_OWORD *)(v42 + 88);
  __dst[3] = v22;
  v23 = *(_OWORD *)(v42 + 264);
  v24 = *(_OWORD *)(v42 + 280);
  __dst[12] = v16;
  __dst[13] = v23;
  __dst[14] = v24;
  result = ScrollGeometry.visibleRect.getter();
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v38 = v26;
  v39 = v25;
  v27 = *(_QWORD *)(v3 + 136);
  if (v40 >= *(_QWORD *)(v27 + 16))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v28 = v27 + 32 * v40;
  v41 = *(double *)(v28 + 40);
  v29 = *(double *)(v3 + 240);
  v36 = *(double *)(v3 + 248);
  v37 = *(double *)(v3 + 168);
  v30 = *(double *)(v28 + 32) - *(double *)(v3 + 160);
  swift_retain();
  v31 = _IncrementalLayout_PlacedChild.size.getter();
  v33 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v32, *(unint64_t *)&v31));
  _IncrementalLayout_PlacedChild.size.getter();
  swift_release();
  v34 = *((double *)v42 + 3);
  v35 = v33.x - v39 - v30 - (*((double *)v42 + 2) - v29);
  if ((Axis.Set.contains(_:)() & 1) == 0)
    v35 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    if (v35 != 0.0 || v33.y - v38 - (v41 - v37) - (v34 - v36) != 0.0)
    {
LABEL_22:
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
      specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of IncrementalChildPlacements<LazyVStackLayout>(v3);
    }
  }
  else if (v35 != 0.0)
  {
    goto LABEL_22;
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  CGPoint v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  double v41;
  char *v42;
  _OWORD __dst[20];

  v3 = v2;
  memcpy(__dst, a2, 0x129uLL);
  result = _IncrementalLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0)
    return result;
  AGGraphClearUpdate();
  v7 = specialized closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(v2);
  result = AGGraphSetUpdate();
  if (v7)
    return result;
  v8 = *(_QWORD *)(v2 + 128);
  swift_bridgeObjectRetain();
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
  specialized Sequence.min(by:)(v8, v3, dword_1E1AEEB68, &dword_1E1AEEB68[1], dword_1E1AEEB40, &dword_1E1AEEB40[1], (unint64_t *)__dst);
  result = swift_bridgeObjectRelease();
  v9 = *((_QWORD *)&__dst[0] + 1);
  if (!*((_QWORD *)&__dst[0] + 1))
    return result;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v11)
    return swift_release();
  v40 = *(_QWORD *)&__dst[0];
  v42 = a2;
  outlined retain of [Text.Modifier](a1);
  outlined retain of [Text.Modifier](a1);
  for (i = v10 + 48; ; i += 72)
  {
    v13 = *(_QWORD *)(i - 16);
    if (*(_BYTE *)(v9 + 165) == 1 || *(_BYTE *)(v9 + 166) == 1)
      goto LABEL_6;
    v14 = *(_QWORD *)(v9 + 144);
    *(_QWORD *)&__dst[0] = *(_QWORD *)(v9 + 136);
    *((_QWORD *)&__dst[0] + 1) = v14;
    swift_retain();
    if ((static _ViewList_ID.== infix(_:_:)() & 1) != 0)
      break;
    swift_release();
LABEL_6:
    if (!--v11)
    {
      outlined release of _IncrementalLayout_Placements(a1);
      outlined release of _IncrementalLayout_Placements(a1);
      return swift_release();
    }
  }
  outlined release of _IncrementalLayout_Placements(a1);
  outlined release of _IncrementalLayout_Placements(a1);
  v15 = *(_QWORD *)(v13 + 144);
  *(_QWORD *)&__dst[0] = *(_QWORD *)(v13 + 136);
  *((_QWORD *)&__dst[0] + 1) = v15;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v16 = *(_OWORD *)(v42 + 248);
  LOBYTE(__dst[15]) = v42[296];
  v17 = *(_OWORD *)(v42 + 200);
  __dst[8] = *(_OWORD *)(v42 + 184);
  __dst[9] = v17;
  v18 = *(_OWORD *)(v42 + 232);
  __dst[10] = *(_OWORD *)(v42 + 216);
  __dst[11] = v18;
  v19 = *(_OWORD *)(v42 + 136);
  __dst[4] = *(_OWORD *)(v42 + 120);
  __dst[5] = v19;
  v20 = *(_OWORD *)(v42 + 168);
  __dst[6] = *(_OWORD *)(v42 + 152);
  __dst[7] = v20;
  v21 = *(_OWORD *)(v42 + 72);
  __dst[0] = *(_OWORD *)(v42 + 56);
  __dst[1] = v21;
  v22 = *(_OWORD *)(v42 + 104);
  __dst[2] = *(_OWORD *)(v42 + 88);
  __dst[3] = v22;
  v23 = *(_OWORD *)(v42 + 264);
  v24 = *(_OWORD *)(v42 + 280);
  __dst[12] = v16;
  __dst[13] = v23;
  __dst[14] = v24;
  result = ScrollGeometry.visibleRect.getter();
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v38 = v26;
  v39 = v25;
  v27 = *(_QWORD *)(v3 + 136);
  if (v40 >= *(_QWORD *)(v27 + 16))
  {
LABEL_27:
    __break(1u);
    return result;
  }
  v28 = v27 + 32 * v40;
  v41 = *(double *)(v28 + 40);
  v29 = *(double *)(v3 + 240);
  v36 = *(double *)(v3 + 248);
  v37 = *(double *)(v3 + 168);
  v30 = *(double *)(v28 + 32) - *(double *)(v3 + 160);
  swift_retain();
  v31 = _IncrementalLayout_PlacedChild.size.getter();
  v33 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v32, *(unint64_t *)&v31));
  _IncrementalLayout_PlacedChild.size.getter();
  swift_release();
  v34 = *((double *)v42 + 3);
  v35 = v33.x - v39 - v30 - (*((double *)v42 + 2) - v29);
  if ((Axis.Set.contains(_:)() & 1) == 0)
    v35 = 0.0;
  if ((Axis.Set.contains(_:)() & 1) != 0)
  {
    if (v35 != 0.0 || v33.y - v38 - (v41 - v37) - (v34 - v36) != 0.0)
    {
LABEL_22:
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>(v3);
      specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of IncrementalChildPlacements<LazyVStackLayout>(v3);
    }
  }
  else if (v35 != 0.0)
  {
    goto LABEL_22;
  }
  swift_release();
  return swift_release();
}

uint64_t specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t Value;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_DWORD *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_DWORD *)(v2 + 72);
  v7 = *(_DWORD *)(v2 + 76);
  v9 = *(_DWORD *)(v2 + 80);
  v8 = *(_DWORD *)(v2 + 84);
  v10 = *(_QWORD *)(v2 + 88);
  v18 = v3;
  v19 = v4;
  v20 = v5;
  v21 = __PAIR64__(v7, v6);
  v22 = __PAIR64__(v8, v9);
  v23 = v10;
  if ((_GraphInputs.hasValueScrollPosition(kind:)() & 1) == 0)
    goto LABEL_7;
  v18 = v3;
  v19 = v4;
  v20 = v5;
  v21 = __PAIR64__(v7, v6);
  v22 = __PAIR64__(v8, v9);
  v23 = v10;
  if (_GraphInputs.scrollTargetRole.getter() == *MEMORY[0x1E0CFED28])
    goto LABEL_7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ScrollTargetRole.Role?, MEMORY[0x1E0CE33A8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v11 = *(unsigned __int8 *)AGGraphGetValue();
  if (v11 == 2 || (v11 & 1) != 0 || *(double *)(a1 + 32) == 0.0 || *(double *)(a1 + 40) == 0.0)
    goto LABEL_7;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 16))
  {
    swift_bridgeObjectRetain();
LABEL_11:
    specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(a1, a2);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)&v18);
  v14 = v21;
  v15 = v22;
  __swift_project_boxed_opaque_existential_1(&v18, v21);
  if ((*(uint64_t (**)(uint64_t, unint64_t))(v15 + 32))(v14, v15))
  {
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      dispatch thunk of _ViewList_ID_Views.subscript.getter();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
      goto LABEL_11;
    }
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
LABEL_7:
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)&v18);
  return outlined init with take of Image.Resolved?((uint64_t)&v18, a2, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
}

{
  return specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(uint64_t, unint64_t, uint64_t))specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:), a2);
}

{
  return specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(uint64_t, unint64_t, uint64_t))specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:), a2);
}

uint64_t specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, unint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Value;
  uint64_t v20;
  unint64_t v21;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_DWORD *)(v3 + 56);
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_DWORD *)(v3 + 72);
  v8 = *(_DWORD *)(v3 + 76);
  v9 = *(_DWORD *)(v3 + 80);
  v10 = *(_DWORD *)(v3 + 84);
  v11 = *(_QWORD *)(v3 + 88);
  v28 = v4;
  v29 = v5;
  v30 = v6;
  v31 = __PAIR64__(v8, v7);
  v32 = __PAIR64__(v10, v9);
  v33 = v11;
  LOBYTE(v25) = 1;
  if ((_GraphInputs.hasValueScrollPosition(kind:)() & 1) == 0)
    goto LABEL_7;
  v28 = v4;
  v29 = v5;
  v30 = v6;
  v31 = __PAIR64__(v8, v7);
  v32 = __PAIR64__(v10, v9);
  v33 = v11;
  if (_GraphInputs.scrollTargetRole.getter() == *MEMORY[0x1E0CFED28])
    goto LABEL_7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ScrollTargetRole.Role?, MEMORY[0x1E0CE33A8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v12 = *(unsigned __int8 *)AGGraphGetValue();
  if (v12 == 2 || (v12 & 1) != 0 || *(double *)(a1 + 32) == 0.0 || *(double *)(a1 + 40) == 0.0)
    goto LABEL_7;
  v14 = *(_QWORD *)(v3 + 128);
  if (*(_QWORD *)(v14 + 16))
  {
    v15 = *(_QWORD *)(v14 + 32);
    v16 = *(_DWORD *)(v15 + 136);
    v17 = *(unsigned int *)(v15 + 140);
    v18 = *(_QWORD *)(v15 + 144);
    swift_bridgeObjectRetain();
LABEL_11:
    a2(a1, v16 | (unint64_t)(v17 << 32), v18);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)&v28);
  v20 = v31;
  v21 = v32;
  __swift_project_boxed_opaque_existential_1(&v28, v31);
  if ((*(uint64_t (**)(uint64_t, unint64_t))(v21 + 32))(v20, v21))
  {
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      dispatch thunk of _ViewList_ID_Views.subscript.getter();
      swift_release();
      v16 = v25;
      v17 = v26;
      v18 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
      goto LABEL_11;
    }
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
LABEL_7:
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)&v28);
  return outlined init with take of Image.Resolved?((uint64_t)&v28, a3, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
}

uint64_t specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t Value;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CGFloat v19;
  __int128 v20;
  CGFloat v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  double v31;
  double v32;
  _OWORD *v33;
  __int128 v34;
  double v35;
  _OWORD v36[21];
  _OWORD v37[19];
  _BYTE v38[186];
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  _OWORD v47[5];
  _DWORD __dst[86];
  CGRect v49;
  CGRect v50;

  v3 = (_BYTE *)v2;
  memcpy(__dst, (const void *)v2, 0x149uLL);
  outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__dst);
  specialized IncrementalChildPlacements.transaction.getter();
  outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)__dst);
  Transaction.subscript.getter();
  swift_release();
  if (LOBYTE(v36[0]) == 2)
    goto LABEL_11;
  type metadata accessor for IncrementalLayoutViewCache();
  Value = AGGraphGetValue();
  v7 = *MEMORY[0x1E0CFED28];
  if (*(_DWORD *)(*(_QWORD *)Value + 148) == *MEMORY[0x1E0CFED28])
    goto LABEL_11;
  v8 = MEMORY[0x1E0CE29F0];
  v9 = MEMORY[0x1E0CE75A0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v10;
  v12 = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(v12, (uint64_t)v38, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  MEMORY[0x18D75B9C8](v37, v11);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v38, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  v47[2] = v37[2];
  v47[3] = v37[3];
  v47[4] = v37[4];
  v47[1] = v37[1];
  v47[0] = v37[0];
  AGGraphClearUpdate();
  LOBYTE(v11) = specialized closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(v2);
  AGGraphSetUpdate();
  if ((v11 & 1) != 0)
  {
LABEL_9:
    if ((v3[152] & 1) == 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, (uint64_t)v47);
      outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)v37, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v38, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v38) != 1)
      {
        memcpy(v36, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v36);
        specialized IncrementalChildPlacements.logDefaultPlacement(_:)(0xD000000000000011, 0x8000000187BD5CC0);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v36);
      }
      outlined init with take of Image.Resolved?((uint64_t)v37, a2, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      result = outlined destroy of ScrollPosition((uint64_t)v47);
      goto LABEL_12;
    }
    outlined destroy of ScrollPosition((uint64_t)v47);
LABEL_11:
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v36);
    result = outlined init with take of Image.Resolved?((uint64_t)v36, a2, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
LABEL_12:
    v3[152] = 1;
    return result;
  }
  v13 = *(_OWORD *)(v2 + 248);
  v14 = *(_OWORD *)(v2 + 200);
  v40 = *(_OWORD *)(v2 + 184);
  v41 = v14;
  v15 = *(_OWORD *)(v2 + 232);
  v42 = *(_OWORD *)(v2 + 216);
  v43 = v15;
  v16 = *(_OWORD *)(v2 + 168);
  v39[0] = *(_OWORD *)(v2 + 152);
  v39[1] = v16;
  v17 = *(_OWORD *)(v2 + 264);
  v18 = *(_OWORD *)(v2 + 280);
  v44 = v13;
  v45 = v17;
  v46[0] = v18;
  *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)(v2 + 289);
  v19 = *((double *)&v40 + 1);
  v20 = v41;
  v21 = *(double *)&v42;
  outlined retain of PositionState((uint64_t)v39);
  v50.origin.x = 0.0;
  v50.origin.y = 0.0;
  v50.size.width = 0.0;
  v50.size.height = 0.0;
  v49.origin.x = v19;
  *(_OWORD *)&v49.origin.y = v20;
  v49.size.height = v21;
  if (CGRectEqualToRect(v49, v50))
  {
    outlined release of PositionState((uint64_t)v39);
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 12) == v7)
  {
    outlined release of PositionState((uint64_t)v39);
    v31 = 0.0;
    v32 = 0.0;
  }
  else
  {
    v33 = (_OWORD *)AGGraphGetValue();
    v34 = v33[1];
    v36[0] = *v33;
    v36[1] = v34;
    v32 = MEMORY[0x18D75BE3C]();
    v31 = v35;
    outlined release of PositionState((uint64_t)v39);
  }
  if (vabdd_f64(*((double *)&v42 + 1), v32) < 0.1 && vabdd_f64(*(double *)&v43, v31) < 0.1)
  {
LABEL_6:
    v22 = AGGraphGetValue();
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    v25 = *(_BYTE *)(v22 + 16);
    v26 = *(unsigned int *)(v22 + 20);
    v27 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    LOBYTE(v36[0]) = v25;
    LOBYTE(v23) = specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)(a1, v23, v24, v25 | (unint64_t)(v26 << 32), v27);
    swift_release();
    if ((v23 & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, (uint64_t)v47);
      outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)v37, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v38, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v38) != 1)
      {
        memcpy(v36, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v36);
        v28 = 0x2077656E20726F66;
        v29 = 0xEF6469206E69616DLL;
LABEL_23:
        specialized IncrementalChildPlacements.logDefaultPlacement(_:)(v28, v29);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v36);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
    goto LABEL_9;
  }
  specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, (uint64_t)v47);
  outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)v37, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v38, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v38) != 1)
  {
    memcpy(v36, (const void *)v2, 0x149uLL);
    outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v36);
    v28 = 0xD000000000000014;
    v29 = 0x8000000187BD5CA0;
    goto LABEL_23;
  }
LABEL_24:
  outlined init with take of Image.Resolved?((uint64_t)v37, a2, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  result = outlined destroy of ScrollPosition((uint64_t)v47);
  v3[152] = 1;
  return result;
}

uint64_t specialized IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  BOOL v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[336];
  _OWORD v33[11];
  _OWORD v34[8];
  _OWORD v35[11];
  _OWORD v36[5];
  _DWORD __dst[86];

  v3 = v2;
  memcpy(__dst, v2, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  if (v32[0] == 2
    || (type metadata accessor for IncrementalLayoutViewCache(),
        *(_DWORD *)(*(_QWORD *)AGGraphGetValue() + 148) == *MEMORY[0x1E0CFED28]))
  {
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v32);
    v6 = a2;
    goto LABEL_4;
  }
  v31 = a2;
  v8 = MEMORY[0x1E0CE29F0];
  v9 = MEMORY[0x1E0CE75A0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v10;
  Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v34, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  MEMORY[0x18D75B9C8](v33, v11);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v34, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  v36[2] = v33[2];
  v36[3] = v33[3];
  v36[4] = v33[4];
  v36[0] = v33[0];
  v36[1] = v33[1];
  AGGraphClearUpdate();
  v13 = specialized closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v2);
  AGGraphSetUpdate();
  if (!v13)
  {
    v14 = v3 + 152;
    v15 = *(_OWORD *)(v3 + 248);
    v16 = *(_OWORD *)(v3 + 200);
    v34[2] = *(_OWORD *)(v3 + 184);
    v34[3] = v16;
    v17 = *(_OWORD *)(v3 + 232);
    v34[4] = *(_OWORD *)(v3 + 216);
    v34[5] = v17;
    v18 = *(_OWORD *)(v3 + 168);
    v34[0] = *(_OWORD *)(v3 + 152);
    v34[1] = v18;
    v19 = *(_OWORD *)(v3 + 264);
    v20 = *(_OWORD *)(v3 + 280);
    v34[6] = v15;
    v34[7] = v19;
    v35[0] = v20;
    *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)(v3 + 289);
    memcpy(v32, a1, 0x129uLL);
    if ((PositionState.dispatchContainerSizeChange(context:)((uint64_t)v32) & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v36);
      outlined init with take of Image.Resolved?((uint64_t)v32, (uint64_t)v33, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)v34, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v34) != 1)
      {
        memcpy(v32, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v32);
        v21 = 0xD000000000000014;
        v22 = 0x8000000187BD5CA0;
LABEL_14:
        specialized IncrementalChildPlacements.logDefaultPlacement(_:)(v21, v22, 0xD000000000000010, 0x8000000187BD5CE0);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v32);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v23 = AGGraphGetValue();
    v24 = *(_QWORD *)(v23 + 8);
    v30 = *(_QWORD *)v23;
    v25 = *(_BYTE *)(v23 + 16);
    v26 = *(unsigned int *)(v23 + 20);
    v27 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    v32[0] = v25;
    v28 = v25 | (unint64_t)(v26 << 32);
    v14 = v3 + 152;
    v29 = specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)((uint64_t)a1, v30, v24, v28, v27);
    swift_release();
    if ((v29 & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v36);
      outlined init with take of Image.Resolved?((uint64_t)v32, (uint64_t)v33, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)v34, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v34) != 1)
      {
        memcpy(v32, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v32);
        v21 = 0x2077656E20726F66;
        v22 = 0xEF6469206E69616DLL;
        goto LABEL_14;
      }
LABEL_15:
      outlined init with take of Image.Resolved?((uint64_t)v33, v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      result = outlined destroy of ScrollPosition((uint64_t)v36);
      *v14 = 1;
      return result;
    }
  }
  if (v3[152] != 1)
  {
    specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v36);
    outlined init with take of Image.Resolved?((uint64_t)v32, (uint64_t)v33, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)v34, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v34) != 1)
    {
      memcpy(v32, v3, 0x149uLL);
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v32);
      specialized IncrementalChildPlacements.logDefaultPlacement(_:)(0xD000000000000011, 0x8000000187BD5CC0, 0xD000000000000010, 0x8000000187BD5CE0);
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v32);
    }
    outlined init with take of Image.Resolved?((uint64_t)v33, v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    result = outlined destroy of ScrollPosition((uint64_t)v36);
    goto LABEL_5;
  }
  outlined destroy of ScrollPosition((uint64_t)v36);
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v32);
  v6 = v31;
LABEL_4:
  result = outlined init with take of Image.Resolved?((uint64_t)v32, v6, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
LABEL_5:
  v3[152] = 1;
  return result;
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BYTE v27[336];
  _OWORD v28[11];
  _OWORD v29[8];
  _OWORD v30[11];
  _OWORD v31[5];
  _OWORD v32[3];
  uint64_t v33;
  _DWORD __dst[86];

  v3 = v2;
  memcpy(__dst, v2, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  if (v27[0] == 2
    || (type metadata accessor for IncrementalLayoutViewCache(),
        *(_DWORD *)(*(_QWORD *)AGGraphGetValue() + 148) == *MEMORY[0x1E0CFED28]))
  {
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v27);
    v6 = a2;
    goto LABEL_4;
  }
  v26 = a2;
  v8 = MEMORY[0x1E0CE29F0];
  v9 = MEMORY[0x1E0CE75A0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v10;
  Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v29, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  MEMORY[0x18D75B9C8](v28, v11);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v29, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  v31[2] = v28[2];
  v31[3] = v28[3];
  v31[4] = v28[4];
  v31[0] = v28[0];
  v31[1] = v28[1];
  AGGraphClearUpdate();
  v13 = specialized closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v2);
  AGGraphSetUpdate();
  if (!v13)
  {
    v14 = *(_OWORD *)(v3 + 248);
    v15 = *(_OWORD *)(v3 + 200);
    v29[2] = *(_OWORD *)(v3 + 184);
    v29[3] = v15;
    v16 = *(_OWORD *)(v3 + 232);
    v29[4] = *(_OWORD *)(v3 + 216);
    v29[5] = v16;
    v17 = *(_OWORD *)(v3 + 168);
    v29[0] = *(_OWORD *)(v3 + 152);
    v29[1] = v17;
    v18 = *(_OWORD *)(v3 + 264);
    v19 = *(_OWORD *)(v3 + 280);
    v29[6] = v14;
    v29[7] = v18;
    v30[0] = v19;
    *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(v3 + 289);
    memcpy(v27, a1, 0x129uLL);
    if ((PositionState.dispatchContainerSizeChange(context:)((uint64_t)v27) & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v31);
      outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v29) != 1)
      {
        memcpy(v27, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
        v20 = 0xD000000000000014;
        v21 = 0x8000000187BD5CA0;
LABEL_14:
        specialized IncrementalChildPlacements.logDefaultPlacement(_:)(v20, v21, 0xD000000000000040, 0x8000000187BD5D50);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v22 = AGGraphGetValue();
    v23 = *(_OWORD *)(v22 + 16);
    v32[0] = *(_OWORD *)v22;
    v32[1] = v23;
    v32[2] = *(_OWORD *)(v22 + 32);
    v33 = *(_QWORD *)(v22 + 48);
    v24 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    v25 = specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)((uint64_t)a1, (uint64_t)v32, v24);
    swift_release();
    if ((v25 & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v31);
      outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v29) != 1)
      {
        memcpy(v27, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
        v20 = 0x2077656E20726F66;
        v21 = 0xEF6469206E69616DLL;
        goto LABEL_14;
      }
LABEL_15:
      outlined init with take of Image.Resolved?((uint64_t)v28, v26, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      result = outlined destroy of ScrollPosition((uint64_t)v31);
      v3[152] = 1;
      return result;
    }
  }
  if (v3[152] != 1)
  {
    specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v31);
    outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v29) != 1)
    {
      memcpy(v27, v3, 0x149uLL);
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
      specialized IncrementalChildPlacements.logDefaultPlacement(_:)(0xD000000000000011, 0x8000000187BD5CC0, 0xD000000000000040, 0x8000000187BD5D50);
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
    }
    outlined init with take of Image.Resolved?((uint64_t)v28, v26, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    result = outlined destroy of ScrollPosition((uint64_t)v31);
    goto LABEL_5;
  }
  outlined destroy of ScrollPosition((uint64_t)v31);
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v27);
  v6 = v26;
LABEL_4:
  result = outlined init with take of Image.Resolved?((uint64_t)v27, v6, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
LABEL_5:
  v3[152] = 1;
  return result;
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _BYTE v27[336];
  _OWORD v28[11];
  _OWORD v29[8];
  _OWORD v30[11];
  _OWORD v31[5];
  _OWORD v32[3];
  uint64_t v33;
  _DWORD __dst[86];

  v3 = v2;
  memcpy(__dst, v2, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  if (v27[0] == 2
    || (type metadata accessor for IncrementalLayoutViewCache(),
        *(_DWORD *)(*(_QWORD *)AGGraphGetValue() + 148) == *MEMORY[0x1E0CFED28]))
  {
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v27);
    v6 = a2;
    goto LABEL_4;
  }
  v26 = a2;
  v8 = MEMORY[0x1E0CE29F0];
  v9 = MEMORY[0x1E0CE75A0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v10;
  Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v29, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  MEMORY[0x18D75B9C8](v28, v11);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v29, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  v31[2] = v28[2];
  v31[3] = v28[3];
  v31[4] = v28[4];
  v31[0] = v28[0];
  v31[1] = v28[1];
  AGGraphClearUpdate();
  v13 = specialized closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v2);
  AGGraphSetUpdate();
  if (!v13)
  {
    v14 = *(_OWORD *)(v3 + 248);
    v15 = *(_OWORD *)(v3 + 200);
    v29[2] = *(_OWORD *)(v3 + 184);
    v29[3] = v15;
    v16 = *(_OWORD *)(v3 + 232);
    v29[4] = *(_OWORD *)(v3 + 216);
    v29[5] = v16;
    v17 = *(_OWORD *)(v3 + 168);
    v29[0] = *(_OWORD *)(v3 + 152);
    v29[1] = v17;
    v18 = *(_OWORD *)(v3 + 264);
    v19 = *(_OWORD *)(v3 + 280);
    v29[6] = v14;
    v29[7] = v18;
    v30[0] = v19;
    *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)(v3 + 289);
    memcpy(v27, a1, 0x129uLL);
    if ((PositionState.dispatchContainerSizeChange(context:)((uint64_t)v27) & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v31);
      outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v29) != 1)
      {
        memcpy(v27, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
        v20 = 0xD000000000000014;
        v21 = 0x8000000187BD5CA0;
LABEL_14:
        specialized IncrementalChildPlacements.logDefaultPlacement(_:)(v20, v21, 0xD000000000000040, 0x8000000187BD5E20);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v22 = AGGraphGetValue();
    v23 = *(_OWORD *)(v22 + 16);
    v32[0] = *(_OWORD *)v22;
    v32[1] = v23;
    v32[2] = *(_OWORD *)(v22 + 32);
    v33 = *(_QWORD *)(v22 + 48);
    v24 = *(_QWORD *)AGGraphGetValue();
    swift_retain();
    v25 = specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)((uint64_t)a1, (uint64_t)v32, v24);
    swift_release();
    if ((v25 & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v31);
      outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v29) != 1)
      {
        memcpy(v27, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
        v20 = 0x2077656E20726F66;
        v21 = 0xEF6469206E69616DLL;
        goto LABEL_14;
      }
LABEL_15:
      outlined init with take of Image.Resolved?((uint64_t)v28, v26, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      result = outlined destroy of ScrollPosition((uint64_t)v31);
      v3[152] = 1;
      return result;
    }
  }
  if (v3[152] != 1)
  {
    specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v31);
    outlined init with take of Image.Resolved?((uint64_t)v27, (uint64_t)v28, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    outlined init with take of Image.Resolved?((uint64_t)v28, (uint64_t)v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v29) != 1)
    {
      memcpy(v27, v3, 0x149uLL);
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
      specialized IncrementalChildPlacements.logDefaultPlacement(_:)(0xD000000000000011, 0x8000000187BD5CC0, 0xD000000000000040, 0x8000000187BD5E20);
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v27);
    }
    outlined init with take of Image.Resolved?((uint64_t)v28, v26, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    result = outlined destroy of ScrollPosition((uint64_t)v31);
    goto LABEL_5;
  }
  outlined destroy of ScrollPosition((uint64_t)v31);
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v27);
  v6 = v26;
LABEL_4:
  result = outlined init with take of Image.Resolved?((uint64_t)v27, v6, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
LABEL_5:
  v3[152] = 1;
  return result;
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[336];
  _OWORD v31[11];
  _OWORD v32[8];
  _OWORD v33[11];
  _OWORD v34[5];
  _DWORD __dst[86];

  v3 = v2;
  memcpy(__dst, v2, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  if (v30[0] == 2
    || (type metadata accessor for IncrementalLayoutViewCache(),
        *(_DWORD *)(*(_QWORD *)AGGraphGetValue() + 148) == *MEMORY[0x1E0CFED28]))
  {
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v30);
    v6 = a2;
    goto LABEL_4;
  }
  v29 = a2;
  v8 = MEMORY[0x1E0CE29F0];
  v9 = MEMORY[0x1E0CE75A0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v10;
  Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v32, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  MEMORY[0x18D75B9C8](v31, v11);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v32, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  v34[2] = v31[2];
  v34[3] = v31[3];
  v34[4] = v31[4];
  v34[0] = v31[0];
  v34[1] = v31[1];
  AGGraphClearUpdate();
  v13 = specialized closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v2);
  AGGraphSetUpdate();
  if (!v13)
  {
    v14 = *(_OWORD *)(v3 + 248);
    v15 = *(_OWORD *)(v3 + 200);
    v32[2] = *(_OWORD *)(v3 + 184);
    v32[3] = v15;
    v16 = *(_OWORD *)(v3 + 232);
    v32[4] = *(_OWORD *)(v3 + 216);
    v32[5] = v16;
    v17 = *(_OWORD *)(v3 + 168);
    v32[0] = *(_OWORD *)(v3 + 152);
    v32[1] = v17;
    v18 = *(_OWORD *)(v3 + 264);
    v19 = *(_OWORD *)(v3 + 280);
    v32[6] = v14;
    v32[7] = v18;
    v33[0] = v19;
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v3 + 289);
    memcpy(v30, a1, 0x129uLL);
    if ((PositionState.dispatchContainerSizeChange(context:)((uint64_t)v30) & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v34);
      outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v32) != 1)
      {
        memcpy(v30, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
        v20 = 0xD000000000000014;
        v21 = 0x8000000187BD5CA0;
LABEL_14:
        specialized IncrementalChildPlacements.logDefaultPlacement(_:)(v20, v21, 0xD000000000000036, 0x8000000187BD5F30);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v22 = AGGraphGetValue();
    v23 = *(_QWORD *)v22;
    v27 = *(_QWORD *)(v22 + 16);
    v28 = *(_QWORD *)(v22 + 8);
    v24 = *(_BYTE *)(v22 + 24);
    v25 = *(unsigned int *)(v22 + 28);
    v26 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    v30[0] = v24;
    LOBYTE(v25) = specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)((uint64_t)a1, v23, v28, v27, v24 | (unint64_t)(v25 << 32), v26);
    swift_bridgeObjectRelease();
    swift_release();
    if ((v25 & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v34);
      outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v32) != 1)
      {
        memcpy(v30, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
        v20 = 0x2077656E20726F66;
        v21 = 0xEF6469206E69616DLL;
        goto LABEL_14;
      }
LABEL_15:
      outlined init with take of Image.Resolved?((uint64_t)v31, v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      result = outlined destroy of ScrollPosition((uint64_t)v34);
      v3[152] = 1;
      return result;
    }
  }
  if (v3[152] != 1)
  {
    specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v34);
    outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v32) != 1)
    {
      memcpy(v30, v3, 0x149uLL);
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
      specialized IncrementalChildPlacements.logDefaultPlacement(_:)(0xD000000000000011, 0x8000000187BD5CC0, 0xD000000000000036, 0x8000000187BD5F30);
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
    }
    outlined init with take of Image.Resolved?((uint64_t)v31, v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    result = outlined destroy of ScrollPosition((uint64_t)v34);
    goto LABEL_5;
  }
  outlined destroy of ScrollPosition((uint64_t)v34);
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v30);
  v6 = v29;
LABEL_4:
  result = outlined init with take of Image.Resolved?((uint64_t)v30, v6, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
LABEL_5:
  v3[152] = 1;
  return result;
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t Value;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[336];
  _OWORD v31[11];
  _OWORD v32[8];
  _OWORD v33[11];
  _OWORD v34[5];
  _DWORD __dst[86];

  v3 = v2;
  memcpy(__dst, v2, 0x149uLL);
  specialized IncrementalChildPlacements.transaction.getter();
  Transaction.subscript.getter();
  swift_release();
  if (v30[0] == 2
    || (type metadata accessor for IncrementalLayoutViewCache(),
        *(_DWORD *)(*(_QWORD *)AGGraphGetValue() + 148) == *MEMORY[0x1E0CFED28]))
  {
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v30);
    v6 = a2;
    goto LABEL_4;
  }
  v29 = a2;
  v8 = MEMORY[0x1E0CE29F0];
  v9 = MEMORY[0x1E0CE75A0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E0CE29F0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v11 = v10;
  Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v32, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  MEMORY[0x18D75B9C8](v31, v11);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v32, &lazy cache variable for type metadata for Binding<ScrollPosition>, v8, (uint64_t (*)(_QWORD, uint64_t))v9);
  v34[2] = v31[2];
  v34[3] = v31[3];
  v34[4] = v31[4];
  v34[0] = v31[0];
  v34[1] = v31[1];
  AGGraphClearUpdate();
  v13 = specialized closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v2);
  AGGraphSetUpdate();
  if (!v13)
  {
    v14 = *(_OWORD *)(v3 + 248);
    v15 = *(_OWORD *)(v3 + 200);
    v32[2] = *(_OWORD *)(v3 + 184);
    v32[3] = v15;
    v16 = *(_OWORD *)(v3 + 232);
    v32[4] = *(_OWORD *)(v3 + 216);
    v32[5] = v16;
    v17 = *(_OWORD *)(v3 + 168);
    v32[0] = *(_OWORD *)(v3 + 152);
    v32[1] = v17;
    v18 = *(_OWORD *)(v3 + 264);
    v19 = *(_OWORD *)(v3 + 280);
    v32[6] = v14;
    v32[7] = v18;
    v33[0] = v19;
    *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)(v3 + 289);
    memcpy(v30, a1, 0x129uLL);
    if ((PositionState.dispatchContainerSizeChange(context:)((uint64_t)v30) & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v34);
      outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v32) != 1)
      {
        memcpy(v30, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
        v20 = 0xD000000000000014;
        v21 = 0x8000000187BD5CA0;
LABEL_14:
        specialized IncrementalChildPlacements.logDefaultPlacement(_:)(v20, v21, 0xD000000000000036, 0x8000000187BD5FE0);
        outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    v22 = AGGraphGetValue();
    v23 = *(_QWORD *)v22;
    v27 = *(_QWORD *)(v22 + 16);
    v28 = *(_QWORD *)(v22 + 8);
    v24 = *(_BYTE *)(v22 + 24);
    v25 = *(unsigned int *)(v22 + 28);
    v26 = *(_QWORD *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    swift_retain();
    v30[0] = v24;
    LOBYTE(v25) = specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)((uint64_t)a1, v23, v28, v27, v24 | (unint64_t)(v25 << 32), v26);
    swift_bridgeObjectRelease();
    swift_release();
    if ((v25 & 1) != 0)
    {
      specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v34);
      outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v32) != 1)
      {
        memcpy(v30, v3, 0x149uLL);
        outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
        v20 = 0x2077656E20726F66;
        v21 = 0xEF6469206E69616DLL;
        goto LABEL_14;
      }
LABEL_15:
      outlined init with take of Image.Resolved?((uint64_t)v31, v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
      result = outlined destroy of ScrollPosition((uint64_t)v34);
      v3[152] = 1;
      return result;
    }
  }
  if (v3[152] != 1)
  {
    specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)((uint64_t)a1, (uint64_t)v34);
    outlined init with take of Image.Resolved?((uint64_t)v30, (uint64_t)v31, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    outlined init with take of Image.Resolved?((uint64_t)v31, (uint64_t)v32, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    if (_s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOg((uint64_t)v32) != 1)
    {
      memcpy(v30, v3, 0x149uLL);
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
      specialized IncrementalChildPlacements.logDefaultPlacement(_:)(0xD000000000000011, 0x8000000187BD5CC0, 0xD000000000000036, 0x8000000187BD5FE0);
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v30);
    }
    outlined init with take of Image.Resolved?((uint64_t)v31, v29, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
    result = outlined destroy of ScrollPosition((uint64_t)v34);
    goto LABEL_5;
  }
  outlined destroy of ScrollPosition((uint64_t)v34);
  _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v30);
  v6 = v29;
LABEL_4:
  result = outlined init with take of Image.Resolved?((uint64_t)v30, v6, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
LABEL_5:
  v3[152] = 1;
  return result;
}

BOOL specialized closure #1 in IncrementalChildPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(uint64_t a1)
{
  char *Value;
  char v3;

  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E0CFED28])
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    Value = &v3;
    ScrollPhaseState.init(phase:velocity:)();
  }
  else
  {
    Value = (char *)AGGraphGetValue();
  }
  return *Value != 0;
}

void specialized IncrementalChildPlacements.makeDefaultPlacementContext(_:position:matchingID:)(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD v5[7];
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *(_OWORD *)(a1 + 216);
  v3 = *(_OWORD *)(a1 + 248);
  v12 = *(_OWORD *)(a1 + 232);
  v13 = v3;
  v14 = *(_OWORD *)(a1 + 264);
  v4 = *(_OWORD *)(a1 + 184);
  v8 = *(_OWORD *)(a1 + 168);
  v9 = v4;
  v10 = *(_OWORD *)(a1 + 200);
  v11 = v2;
  v7 = *(_BYTE *)(a1 + 296);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v5);
  __asm { BR              X10 }
}

{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD v5[7];
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *(_OWORD *)(a1 + 216);
  v3 = *(_OWORD *)(a1 + 248);
  v12 = *(_OWORD *)(a1 + 232);
  v13 = v3;
  v14 = *(_OWORD *)(a1 + 264);
  v4 = *(_OWORD *)(a1 + 184);
  v8 = *(_OWORD *)(a1 + 168);
  v9 = v4;
  v10 = *(_OWORD *)(a1 + 200);
  v11 = v2;
  v7 = *(_BYTE *)(a1 + 296);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v5);
  __asm { BR              X10 }
}

uint64_t sub_187043594()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t DynamicType;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char v30;
  char v31;
  double v32;
  _QWORD *v33;
  char v34;
  char v35;
  int v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[21];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unsigned __int8 v73;
  __int128 v74[23];
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[64];

  v59 = v4;
  v9 = v2[1];
  v69 = *v2;
  v70 = v9;
  v71 = v2[2];
  *(_OWORD *)(v5 + 41) = *(__int128 *)((char *)v2 + 41);
  v83[0] = v3;
  v83[1] = v0;
  v10 = _ViewList_ID.allExplicitIDs.getter();
  v11 = v10;
  v66 = *(_QWORD *)(v10 + 16);
  if (!v66)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ScrollPosition.ViewID((uint64_t)&v69);
LABEL_20:
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v83);
    v33 = v83;
    v47 = v59;
    return outlined init with take of Image.Resolved?((uint64_t)v33, v47, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  }
  v12 = 0;
  v13 = 0.0;
  v14 = 0;
  v15 = 1;
  v60 = v10;
  do
  {
    *(_QWORD *)&v68[0] = *(_QWORD *)(v11 + 8 * v14 + 32);
    swift_retain();
    AnyHashable2.anyValue.getter();
    __swift_project_boxed_opaque_existential_1(v83, v83[3]);
    v16 = *(_QWORD *)(v1 + 64);
    DynamicType = swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (v16 == MEMORY[0x1E0DEC198] || DynamicType == v16)
    {
      v19 = *((_QWORD *)&v70 + 1);
      v64 = v71;
      v20 = __swift_project_boxed_opaque_existential_1(&v69, *((uint64_t *)&v70 + 1));
      memcpy(v83, (const void *)v6, 0x149uLL);
      memcpy(v68, (const void *)v6, 0x149uLL);
      memcpy(v74, v62, 0x129uLL);
      v21 = v1;
      v22 = v6;
      v23 = *((_QWORD *)&v71 + 1);
      v24 = v72;
      v25 = v73;
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v83);
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for IncrementalChildPlacements<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
      v26 = (uint64_t)v20;
      v11 = v60;
      v27 = v23;
      v6 = v22;
      v1 = v21;
      v12 = IncrementalChildPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(v74, v26, v27, v24, v25, v28, v19, v64);
      v13 = v29;
      v31 = v30;
      swift_release();
      v15 = v31 & 1;
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v83);
    }
    else
    {
      swift_release();
    }
    ++v14;
  }
  while (v66 != v14);
  swift_bridgeObjectRelease();
  outlined destroy of ScrollPosition.ViewID((uint64_t)&v69);
  if ((v15 & 1) != 0)
    goto LABEL_20;
  v32 = v13;
  if (fabs(*(double *)&v12) >= 0.01 || fabs(v13) >= 0.01)
  {
    memcpy(v83, (const void *)v6, 0x149uLL);
    outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v83);
    v34 = specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter();
    outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v83);
    if ((v34 & 1) != 0)
    {
      v35 = v75;
      v36 = *((_DWORD *)v62 + 12);
      v65 = v62[5];
      v67 = v62[4];
      v61 = *((_OWORD *)v62 + 1);
      v68[4] = v80;
      v68[5] = v81;
      v68[6] = v82;
      v68[0] = v76;
      v68[1] = v77;
      v68[2] = v78;
      v68[3] = v79;
      v57 = v62[1];
      v58 = *v62;
      memcpy(v74, v62, 0x129uLL);
      ScrollGeometry.visibleRect.getter();
      v55 = v38;
      v56 = v37;
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v32, v12), (CGSize)__PAIR128__(v8, v7));
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v32, v12), (CGSize)__PAIR128__(v8, v7));
      v39 = *((_QWORD *)&v74[10] + 1);
      v40 = *(_QWORD *)&v74[11];
      v63 = v7;
      v41 = *((_QWORD *)&v74[11] + 1);
      v42 = v74[12];
      v43 = v74[13];
      v44 = *(_QWORD *)&v74[14];
      v53 = *(_QWORD *)&v74[15];
      v54 = *((_QWORD *)&v74[14] + 1);
      v51 = *(_QWORD *)&v74[16];
      v52 = *((_QWORD *)&v74[15] + 1);
      v49 = *(_QWORD *)&v74[17];
      v50 = *((_QWORD *)&v74[16] + 1);
      v68[0] = *(__int128 *)((char *)&v74[10] + 8);
      v68[1] = *(__int128 *)((char *)&v74[11] + 8);
      v68[2] = *(__int128 *)((char *)&v74[12] + 8);
      v68[3] = *(__int128 *)((char *)&v74[13] + 8);
      v68[4] = *(__int128 *)((char *)&v74[14] + 8);
      v68[5] = *(__int128 *)((char *)&v74[15] + 8);
      v68[6] = *(__int128 *)((char *)&v74[16] + 8);
      ScrollGeometry.visibleRect.getter();
      *(double *)(v6 + 288) = v45 - v56;
      *(double *)(v6 + 296) = v46 - v55;
      *(_BYTE *)(v6 + 304) = 0;
      *(_QWORD *)&v68[0] = v58;
      *((_QWORD *)&v68[0] + 1) = v57;
      v68[1] = v61;
      *(_QWORD *)&v68[2] = v67;
      *((_QWORD *)&v68[2] + 1) = v65;
      LODWORD(v68[3]) = v36;
      *(_OWORD *)((char *)&v68[3] + 8) = *(__int128 *)((char *)&v74[3] + 8);
      *(_OWORD *)((char *)&v68[4] + 8) = *(__int128 *)((char *)&v74[4] + 8);
      *(_OWORD *)((char *)&v68[5] + 8) = *(__int128 *)((char *)&v74[5] + 8);
      *(_OWORD *)((char *)&v68[6] + 8) = *(__int128 *)((char *)&v74[6] + 8);
      *(_OWORD *)((char *)&v68[7] + 8) = *(__int128 *)((char *)&v74[7] + 8);
      *(_OWORD *)((char *)&v68[8] + 8) = *(__int128 *)((char *)&v74[8] + 8);
      *(_OWORD *)((char *)&v68[9] + 8) = *(__int128 *)((char *)&v74[9] + 8);
      *((_QWORD *)&v68[10] + 1) = v39;
      *(_QWORD *)&v68[11] = v40;
      *((_QWORD *)&v68[11] + 1) = v41;
      v68[12] = v42;
      v68[13] = v43;
      *(_QWORD *)&v68[14] = v44;
      *((_QWORD *)&v68[14] + 1) = v54;
      *(_QWORD *)&v68[15] = v53;
      *((_QWORD *)&v68[15] + 1) = v52;
      *(_QWORD *)&v68[16] = v51;
      *((_QWORD *)&v68[16] + 1) = v50;
      *(_QWORD *)&v68[17] = v49;
      *((_QWORD *)&v68[17] + 1) = v63;
      *(_QWORD *)&v68[18] = v8;
      BYTE8(v68[18]) = v35;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v68);
    }
    else
    {
      _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v68);
    }
    v33 = v68;
  }
  else
  {
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v83);
    v33 = v83;
  }
  v47 = v59;
  return outlined init with take of Image.Resolved?((uint64_t)v33, v47, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
}

uint64_t sub_187043C68()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t DynamicType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  char v29;
  char v30;
  _QWORD *v31;
  char v32;
  int v33;
  double v34;
  double v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  unint64_t *v53;
  double v54;
  uint64_t (*v55)(void);
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[21];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 v74;
  __int128 v75[23];
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[64];

  v8 = v2[1];
  v70 = *v2;
  v71 = v8;
  v72 = v2[2];
  *(_OWORD *)(v4 + 41) = *(__int128 *)((char *)v2 + 41);
  v84[0] = v1;
  v84[1] = v0;
  v9 = _ViewList_ID.allExplicitIDs.getter();
  v65 = *(_QWORD *)(v9 + 16);
  if (!v65)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ScrollPosition.ViewID((uint64_t)&v70);
LABEL_13:
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v84);
    v31 = v84;
    return outlined init with take of Image.Resolved?((uint64_t)v31, v3, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
  }
  v51 = v3;
  v10 = 0;
  v11 = 0.0;
  v12 = 0;
  v13 = 1;
  v14 = MEMORY[0x1E0DEC198];
  do
  {
    *(_QWORD *)&v69[0] = *(_QWORD *)(v9 + 8 * v12 + 32);
    swift_retain();
    AnyHashable2.anyValue.getter();
    __swift_project_boxed_opaque_existential_1(v84, v84[3]);
    v15 = *(_QWORD *)(v67 + 64);
    DynamicType = swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
    if (v15 == v14 || DynamicType == v15)
    {
      v18 = *((_QWORD *)&v71 + 1);
      v63 = v72;
      v61 = __swift_project_boxed_opaque_existential_1(&v70, *((uint64_t *)&v71 + 1));
      memcpy(v84, (const void *)v5, 0x149uLL);
      memcpy(v69, (const void *)v5, 0x149uLL);
      memcpy(v75, v59, 0x129uLL);
      v19 = v14;
      v20 = *((_QWORD *)&v72 + 1);
      v21 = v73;
      v22 = v9;
      v23 = v5;
      v24 = v74;
      outlined retain of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v84);
      type metadata accessor for VStack<TableHeaderViewCore>(0, v53, v55, v57, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for IncrementalChildPlacements);
      v25 = v21;
      v14 = v19;
      v26 = v24;
      v5 = v23;
      v9 = v22;
      v10 = IncrementalChildPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(v75, (uint64_t)v61, v20, v25, v26, v27, v18, v63);
      v11 = v28;
      v30 = v29;
      swift_release();
      v13 = v30 & 1;
      outlined release of IncrementalChildPlacements<LazyVStackLayout>((uint64_t)v84);
    }
    else
    {
      swift_release();
    }
    ++v12;
  }
  while (v65 != v12);
  swift_bridgeObjectRelease();
  outlined destroy of ScrollPosition.ViewID((uint64_t)&v70);
  v3 = v51;
  if ((v13 & 1) != 0 || fabs(*(double *)&v10) < 0.01 && fabs(v11) < 0.01)
    goto LABEL_13;
  memcpy(v84, (const void *)v5, 0x149uLL);
  if ((specialized IncrementalChildPlacements.allowsContentOffsetAdjustments.getter() & 1) != 0)
  {
    v32 = v76;
    v33 = *((_DWORD *)v59 + 12);
    v66 = v59[5];
    v68 = v59[4];
    v64 = *((_OWORD *)v59 + 1);
    v69[4] = v81;
    v69[5] = v82;
    v69[6] = v83;
    v69[0] = v77;
    v69[1] = v78;
    v69[2] = v79;
    v69[3] = v80;
    v62 = *v59;
    v58 = v59[1];
    memcpy(v75, v59, 0x129uLL);
    ScrollGeometry.visibleRect.getter();
    v52 = v35;
    v54 = v34;
    ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v11, v10), (CGSize)__PAIR128__(v7, v6));
    ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v11, v10), (CGSize)__PAIR128__(v7, v6));
    v36 = *((_QWORD *)&v75[10] + 1);
    v37 = v75[11];
    v38 = v75[12];
    v39 = *(_QWORD *)&v75[13];
    v60 = v6;
    v40 = *((_QWORD *)&v75[13] + 1);
    v56 = v7;
    v41 = *(_QWORD *)&v75[14];
    v49 = *(_QWORD *)&v75[15];
    v50 = *((_QWORD *)&v75[14] + 1);
    v47 = *(_QWORD *)&v75[16];
    v48 = *((_QWORD *)&v75[15] + 1);
    v45 = *(_QWORD *)&v75[17];
    v46 = *((_QWORD *)&v75[16] + 1);
    v69[0] = *(__int128 *)((char *)&v75[10] + 8);
    v69[1] = *(__int128 *)((char *)&v75[11] + 8);
    v69[2] = *(__int128 *)((char *)&v75[12] + 8);
    v69[3] = *(__int128 *)((char *)&v75[13] + 8);
    v69[4] = *(__int128 *)((char *)&v75[14] + 8);
    v69[5] = *(__int128 *)((char *)&v75[15] + 8);
    v69[6] = *(__int128 *)((char *)&v75[16] + 8);
    ScrollGeometry.visibleRect.getter();
    *(double *)(v5 + 288) = v42 - v54;
    *(double *)(v5 + 296) = v43 - v52;
    *(_BYTE *)(v5 + 304) = 0;
    *(_QWORD *)&v69[0] = v62;
    *((_QWORD *)&v69[0] + 1) = v58;
    v69[1] = v64;
    *(_QWORD *)&v69[2] = v68;
    *((_QWORD *)&v69[2] + 1) = v66;
    LODWORD(v69[3]) = v33;
    *(_OWORD *)((char *)&v69[3] + 8) = *(__int128 *)((char *)&v75[3] + 8);
    *(_OWORD *)((char *)&v69[4] + 8) = *(__int128 *)((char *)&v75[4] + 8);
    *(_OWORD *)((char *)&v69[5] + 8) = *(__int128 *)((char *)&v75[5] + 8);
    *(_OWORD *)((char *)&v69[6] + 8) = *(__int128 *)((char *)&v75[6] + 8);
    *(_OWORD *)((char *)&v69[7] + 8) = *(__int128 *)((char *)&v75[7] + 8);
    *(_OWORD *)((char *)&v69[8] + 8) = *(__int128 *)((char *)&v75[8] + 8);
    *(_OWORD *)((char *)&v69[9] + 8) = *(__int128 *)((char *)&v75[9] + 8);
    *((_QWORD *)&v69[10] + 1) = v36;
    v69[11] = v37;
    v69[12] = v38;
    *(_QWORD *)&v69[13] = v39;
    *((_QWORD *)&v69[13] + 1) = v40;
    *(_QWORD *)&v69[14] = v41;
    *((_QWORD *)&v69[14] + 1) = v50;
    *(_QWORD *)&v69[15] = v49;
    *((_QWORD *)&v69[15] + 1) = v48;
    *(_QWORD *)&v69[16] = v47;
    *((_QWORD *)&v69[16] + 1) = v46;
    *(_QWORD *)&v69[17] = v45;
    *((_QWORD *)&v69[17] + 1) = v60;
    *(_QWORD *)&v69[18] = v56;
    BYTE8(v69[18]) = v32;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v69);
  }
  else
  {
    _s7SwiftUI35_IncrementalLayout_PlacementContextVSgWOi0_((uint64_t)v69);
  }
  v31 = v69;
  return outlined init with take of Image.Resolved?((uint64_t)v31, v3, &lazy cache variable for type metadata for _IncrementalLayout_PlacementContext?, (uint64_t)&type metadata for _IncrementalLayout_PlacementContext);
}

uint64_t specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(__int128 *__return_ptr, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  _QWORD v37[13];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46[9];

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  result = 0;
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(v5 + 128);
    if (!v13)
      return 0;
    v23 = *(_QWORD *)(v5 + 120);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
    v15 = v14;
    v16 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 280);
    swift_bridgeObjectRetain();
    v16(&v38, v15, v15);
    *(_QWORD *)&v46[0] = *(_QWORD *)a1;
    DWORD2(v46[0]) = *(_DWORD *)(a1 + 8);
    v17 = SizeAndSpacingContext.context.getter();
    IncrementalLayoutViewCache.children(context:)(v17, (uint64_t)v36);
    v46[4] = v42;
    v46[5] = v43;
    v46[6] = v44;
    v46[7] = v45;
    v46[0] = v38;
    v46[1] = v39;
    v46[2] = v40;
    v46[3] = v41;
    v18 = specialized IncrementalStack<>.firstIndex(children:context:state:)((uint64_t)v36, a1, v46, a2, a3, a4 & 0xFFFFFFFF00000001);
    if ((v19 & 1) != 0)
    {
      outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v46);
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v23, v13);
    }
    else
    {
      v34 = 0;
      v35 = 0;
      MEMORY[0x1E0C80A78](v18, v19);
      v33 = v37[11];
      v20 = outlined init with copy of _ViewList_Node((uint64_t)v37, (uint64_t)&v24);
      v32 = 2;
      MEMORY[0x1E0C80A78](v20, v21);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)&v24);
      swift_bridgeObjectRelease();
      if (v35)
      {
        swift_bridgeObjectRetain_n();
        v22 = static _ViewList_ID.== infix(_:_:)();
        swift_bridgeObjectRelease();
        v28 = v42;
        v29 = v43;
        v30 = v44;
        v31 = v45;
        v24 = v38;
        v25 = v39;
        v26 = v40;
        v27 = v41;
        outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)&v24);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v22 & 1) != 0)
        {
          outlined destroy of _IncrementalLayout_Children((uint64_t)v36);
          return 0;
        }
      }
      else
      {
        v28 = v42;
        v29 = v43;
        v30 = v44;
        v31 = v45;
        v24 = v38;
        v25 = v39;
        v26 = v40;
        v27 = v41;
        outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)&v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of _IncrementalLayout_Children((uint64_t)v36);
    return 1;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(__int128 *__return_ptr, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  _QWORD v37[13];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46[9];

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  result = 0;
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(v5 + 128);
    if (!v13)
      return 0;
    v23 = *(_QWORD *)(v5 + 120);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
    v15 = v14;
    v16 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a5 + 280);
    swift_bridgeObjectRetain();
    v16(&v38, v15, v15);
    *(_QWORD *)&v46[0] = *(_QWORD *)a1;
    DWORD2(v46[0]) = *(_DWORD *)(a1 + 8);
    v17 = SizeAndSpacingContext.context.getter();
    IncrementalLayoutViewCache.children(context:)(v17, (uint64_t)v36);
    v46[4] = v42;
    v46[5] = v43;
    v46[6] = v44;
    v46[7] = v45;
    v46[0] = v38;
    v46[1] = v39;
    v46[2] = v40;
    v46[3] = v41;
    v18 = specialized IncrementalStack<>.firstIndex(children:context:state:)((uint64_t)v36, a1, v46, a2, a3, a4 & 0xFFFFFFFF00000001);
    if ((v19 & 1) != 0)
    {
      outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)v46);
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v23, v13);
    }
    else
    {
      v34 = 0;
      v35 = 0;
      MEMORY[0x1E0C80A78](v18, v19);
      v33 = v37[11];
      v20 = outlined init with copy of _ViewList_Node((uint64_t)v37, (uint64_t)&v24);
      v32 = 2;
      MEMORY[0x1E0C80A78](v20, v21);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)&v24);
      swift_bridgeObjectRelease();
      if (v35)
      {
        swift_bridgeObjectRetain_n();
        v22 = static _ViewList_ID.== infix(_:_:)();
        swift_bridgeObjectRelease();
        v28 = v42;
        v29 = v43;
        v30 = v44;
        v31 = v45;
        v24 = v38;
        v25 = v39;
        v26 = v40;
        v27 = v41;
        outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)&v24);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v22 & 1) != 0)
        {
          outlined destroy of _IncrementalLayout_Children((uint64_t)v36);
          return 0;
        }
      }
      else
      {
        v28 = v42;
        v29 = v43;
        v30 = v44;
        v31 = v45;
        v24 = v38;
        v25 = v39;
        v26 = v40;
        v27 = v41;
        outlined release of _IncrementalStack_State<LazyVStackLayout>((uint64_t)&v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of _IncrementalLayout_Children((uint64_t)v36);
    return 1;
  }
  return result;
}

uint64_t specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  _QWORD v24[13];

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  result = 0;
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(v3 + 128);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v3 + 120);
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 280);
    swift_bridgeObjectRetain();
    v10(MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0] + 8);
    v17 = *(_QWORD *)a1;
    LODWORD(v18) = *(_DWORD *)(a1 + 8);
    v11 = SizeAndSpacingContext.context.getter();
    IncrementalLayoutViewCache.children(context:)(v11, (uint64_t)v23);
    specialized FixedSizeIncrementalLayout<>.firstIndex(children:context:state:)((uint64_t)v23, a1);
    if ((v13 & 1) != 0)
    {
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v9, v8);
    }
    else
    {
      v21 = 0;
      v22 = v12;
      v20 = 0;
      MEMORY[0x1E0C80A78](v12, v13);
      v19 = v24[11];
      v14 = outlined init with copy of _ViewList_Node((uint64_t)v24, (uint64_t)&v17);
      MEMORY[0x1E0C80A78](v14, v15);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)&v17);
      swift_bridgeObjectRelease();
      if (v21)
      {
        v17 = v20;
        v18 = v21;
        v20 = v9;
        v21 = v8;
        swift_bridgeObjectRetain_n();
        v16 = static _ViewList_ID.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {
          outlined destroy of _IncrementalLayout_Children((uint64_t)v23);
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of _IncrementalLayout_Children((uint64_t)v23);
    return 1;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  _QWORD v24[13];

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  result = 0;
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(v3 + 128);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v3 + 120);
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 280);
    swift_bridgeObjectRetain();
    v10(MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEE9C0] + 8);
    v17 = *(_QWORD *)a1;
    LODWORD(v18) = *(_DWORD *)(a1 + 8);
    v11 = SizeAndSpacingContext.context.getter();
    IncrementalLayoutViewCache.children(context:)(v11, (uint64_t)v23);
    v12 = specialized FixedSizeIncrementalLayout<>.firstIndex(children:context:state:)((uint64_t)v23, a1);
    if ((v13 & 1) != 0)
    {
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v9, v8);
    }
    else
    {
      v21 = 0;
      v22 = v12;
      v20 = 0;
      MEMORY[0x1E0C80A78](v12, v13);
      v19 = v24[11];
      v14 = outlined init with copy of _ViewList_Node((uint64_t)v24, (uint64_t)&v17);
      MEMORY[0x1E0C80A78](v14, v15);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)&v17);
      swift_bridgeObjectRelease();
      if (v21)
      {
        v17 = v20;
        v18 = v21;
        v20 = v9;
        v21 = v8;
        swift_bridgeObjectRetain_n();
        v16 = static _ViewList_ID.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {
          outlined destroy of _IncrementalLayout_Children((uint64_t)v23);
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of _IncrementalLayout_Children((uint64_t)v23);
    return 1;
  }
  return result;
}

uint64_t specialized PositionState.dispatchChildrenChange<A>(context:layout:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_OWORD *__return_ptr, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[12];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  _QWORD v31[13];
  _OWORD v32[7];
  uint64_t v33;
  _OWORD v34[7];
  uint64_t v35;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  result = 0;
  if ((v14 & 1) != 0)
  {
    v15 = *(_QWORD *)(v6 + 128);
    if (!v15)
      return 0;
    v25 = *(_QWORD *)(v6 + 120);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
    v17 = v16;
    v18 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a6 + 280);
    swift_bridgeObjectRetain();
    v18(v32, v17, v17);
    *(_QWORD *)&v34[0] = *(_QWORD *)a1;
    DWORD2(v34[0]) = *(_DWORD *)(a1 + 8);
    v19 = SizeAndSpacingContext.context.getter();
    IncrementalLayoutViewCache.children(context:)(v19, (uint64_t)v30);
    v34[4] = v32[4];
    v34[5] = v32[5];
    v34[6] = v32[6];
    v35 = v33;
    v34[0] = v32[0];
    v34[1] = v32[1];
    v34[2] = v32[2];
    v34[3] = v32[3];
    v20 = specialized IncrementalStack<>.firstIndex(children:context:state:)((uint64_t)v30, a1, (uint64_t)v34, a2, a3, a4, a5 & 0xFFFFFFFF00000001);
    if ((v21 & 1) != 0)
    {
      outlined release of _IncrementalStack_State<LazyHGridLayout>((uint64_t)v34);
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v25, v15);
    }
    else
    {
      v28 = 0;
      v29 = v20;
      v27 = 0;
      MEMORY[0x1E0C80A78](v20, v21);
      v26[11] = v31[11];
      v22 = outlined init with copy of _ViewList_Node((uint64_t)v31, (uint64_t)v26);
      MEMORY[0x1E0C80A78](v22, v23);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v26);
      swift_bridgeObjectRelease();
      if (v28)
      {
        v26[0] = v27;
        v26[1] = v28;
        v27 = v25;
        v28 = v15;
        swift_bridgeObjectRetain_n();
        v24 = static _ViewList_ID.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
        {
          outlined destroy of _IncrementalLayout_Children((uint64_t)v30);
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of _IncrementalLayout_Children((uint64_t)v30);
    return 1;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_OWORD *__return_ptr, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[12];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  _QWORD v31[13];
  _OWORD v32[7];
  uint64_t v33;
  _OWORD v34[7];
  uint64_t v35;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  result = 0;
  if ((v14 & 1) != 0)
  {
    v15 = *(_QWORD *)(v6 + 128);
    if (!v15)
      return 0;
    v25 = *(_QWORD *)(v6 + 120);
    type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _IncrementalStack_State<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _IncrementalStack_State);
    v17 = v16;
    v18 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a6 + 280);
    swift_bridgeObjectRetain();
    v18(v32, v17, v17);
    *(_QWORD *)&v34[0] = *(_QWORD *)a1;
    DWORD2(v34[0]) = *(_DWORD *)(a1 + 8);
    v19 = SizeAndSpacingContext.context.getter();
    IncrementalLayoutViewCache.children(context:)(v19, (uint64_t)v30);
    v34[4] = v32[4];
    v34[5] = v32[5];
    v34[6] = v32[6];
    v35 = v33;
    v34[0] = v32[0];
    v34[1] = v32[1];
    v34[2] = v32[2];
    v34[3] = v32[3];
    v20 = specialized IncrementalStack<>.firstIndex(children:context:state:)((uint64_t)v30, a1, (uint64_t)v34, a2, a3, a4, a5 & 0xFFFFFFFF00000001);
    if ((v21 & 1) != 0)
    {
      outlined release of _IncrementalStack_State<LazyHGridLayout>((uint64_t)v34);
      outlined consume of _ViewList_ID??(0, 1);
      outlined consume of _ViewList_ID??(v25, v15);
    }
    else
    {
      v28 = 0;
      v29 = v20;
      v27 = 0;
      MEMORY[0x1E0C80A78](v20, v21);
      v26[11] = v31[11];
      v22 = outlined init with copy of _ViewList_Node((uint64_t)v31, (uint64_t)v26);
      MEMORY[0x1E0C80A78](v22, v23);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)v26);
      swift_bridgeObjectRelease();
      if (v28)
      {
        v26[0] = v27;
        v26[1] = v28;
        v27 = v25;
        v28 = v15;
        swift_bridgeObjectRetain_n();
        v24 = static _ViewList_ID.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
        {
          outlined destroy of _IncrementalLayout_Children((uint64_t)v30);
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    outlined destroy of _IncrementalLayout_Children((uint64_t)v30);
    return 1;
  }
  return result;
}

BOOL specialized closure #1 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(uint64_t a1)
{
  char *Value;
  char v3;

  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E0CFED28])
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    Value = &v3;
    ScrollPhaseState.init(phase:velocity:)();
  }
  else
  {
    Value = (char *)AGGraphGetValue();
  }
  return *Value == 4;
}

_QWORD *specialized closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(_QWORD *result, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;

  v4 = result[1];
  v5 = *a2;
  v6 = a2[1];
  if (*(_BYTE *)(v4 + 165) == 1 || *(_BYTE *)(v4 + 166) == 1)
  {
    v8 = INFINITY;
    goto LABEL_7;
  }
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*result >= *(_QWORD *)(*(_QWORD *)(a3 + 136) + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = (_QWORD *)distance(_:_:)();
  v8 = v7;
LABEL_7:
  if (*(_BYTE *)(v6 + 165) == 1 || *(_BYTE *)(v6 + 166) == 1)
  {
    v9 = INFINITY;
    return (_QWORD *)(v8 < v9);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (v5 < *(_QWORD *)(*(_QWORD *)(a3 + 136) + 16))
  {
    distance(_:_:)();
    return (_QWORD *)(v8 < v9);
  }
LABEL_17:
  __break(1u);
  return result;
}

_QWORD *specialized closure #2 in IncrementalChildPlacements.makeSizeChangeTranslation(placements:context:axes:)(_QWORD *result, unint64_t *a2, uint64_t a3, _DWORD *a4, int *a5, _DWORD *a6, int *a7)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  int v16;
  double v18;
  double v19;
  int v20;
  char v21;
  BOOL v22;
  int v23;
  BOOL v24;
  double v25;

  v10 = result[1];
  v11 = *a2;
  v12 = a2[1];
  v13 = *a5;
  if ((*a5 & ~*a4) == 0)
    LOBYTE(v13) = 0;
  v14 = v13 | *a4;
  if (*(_BYTE *)(v10 + 165) != 1 || (v14 & 1) == 0)
  {
    v16 = v14 & 2;
    if (*(_BYTE *)(v10 + 166) != 1 || v16 == 0)
    {
      if ((*result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*result < *(_QWORD *)(*(_QWORD *)(a3 + 136) + 16))
      {
        result = (_QWORD *)distance(_:_:)();
        v19 = v18;
        goto LABEL_17;
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  v19 = INFINITY;
LABEL_17:
  v20 = *a7;
  if ((*a7 & ~*a6) == 0)
    LOBYTE(v20) = 0;
  v21 = v20 | *a6;
  v22 = *(_BYTE *)(v12 + 165) != 1 || (v21 & 1) == 0;
  if (!v22 || ((v23 = v21 & 2, *(_BYTE *)(v12 + 166) == 1) ? (v24 = v23 == 0) : (v24 = 1), !v24))
  {
    v25 = INFINITY;
    return (_QWORD *)(v19 < v25);
  }
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_36;
  if (v11 < *(_QWORD *)(*(_QWORD *)(a3 + 136) + 16))
  {
    distance(_:_:)();
    return (_QWORD *)(v19 < v25);
  }
LABEL_37:
  __break(1u);
  return result;
}

void specialized PropertiesTransform.updateValue()()
{
  unint64_t v0;
  unint64_t v1;
  char v2;
  int *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  int CurrentAttribute;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 *Value;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t rawValue;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  char v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  void **v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  id v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  char v87;
  int v88;
  id v89;
  char *v90;
  char v91;
  void *v92;
  void *v93;
  void *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  uint64_t OutputValue;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  char v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  id v120;
  Swift::OpaquePointer v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v1 = v0;
  v132 = *MEMORY[0x1E0C80C00];
  v131 = *(_OWORD *)AGGraphGetValue();
  v2 = EnvironmentValues.accessibilityEnabled.getter();
  v3 = (int *)MEMORY[0x1E0CFED28];
  if ((v2 & 1) == 0)
  {
    if (*(_DWORD *)(v1 + 36) != *MEMORY[0x1E0CFED28])
    {
      Value = (__int128 *)AGGraphGetValue();
      goto LABEL_11;
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_9:
      Value = &static AccessibilityNodesKey.defaultValue;
LABEL_11:
      v18 = *((_QWORD *)Value + 1);
      *(_QWORD *)&v131 = *(_QWORD *)Value;
      *((_QWORD *)&v131 + 1) = v18;
      AGGraphSetOutputValue();
      return;
    }
LABEL_83:
    swift_once();
    goto LABEL_9;
  }
  if (*(_DWORD *)(v1 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v1 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v1 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v4 = AGGraphGetValue();
  v5 = *(void **)v4;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = (unint64_t *)AGGraphGetValue();
  v9 = v8;
  v10 = *v7;
  v11 = v7[1];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v13 = *v3;
  if (CurrentAttribute == *v3)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  swift_retain();
  v120 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v124 = v131;
  v125 = BYTE8(v131);
  v114 = v9;
  if (*(_DWORD *)(v1 + 36) == v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(AGGraphGetValue() + 8);
    v16 = v19 & 1;
    v14 = swift_bridgeObjectRetain();
  }
  if (v14)
    v20 = v16;
  else
    v20 = 0;
  if (v14)
    v21 = v15;
  else
    v21 = 0;
  v109 = v21;
  if (v14)
    v22 = (void *)v14;
  else
    v22 = (void *)MEMORY[0x1E0DEE9D8];
  type metadata accessor for ViewGraph();
  v121._rawValue = v22;
  v23 = swift_bridgeObjectRetain_n();
  v24 = MEMORY[0x18D75C5F8](v23) + 200;
  swift_beginAccess();
  v25 = MEMORY[0x18D760234](v24);
  swift_release();
  v113 = v20;
  if (!v25)
    goto LABEL_31;
  swift_getObjectType();
  v26 = swift_conformsToProtocol2();
  if (v26)
    v27 = v26;
  else
    v27 = 0;
  if (v26)
    v28 = v25;
  else
    v28 = 0;
  if (!v28)
  {
    swift_unknownObjectRelease();
LABEL_31:
    v27 = 0;
  }
  v115 = v13;
  v29 = *(_QWORD *)(v1 + 64);
  v118 = v11;
  if (v29)
  {
    v30 = *(char **)(v1 + 64);
    v31 = v30;
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    v32 = swift_unknownObjectRetain();
    v31 = (char *)specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v32, v27, 0);
    swift_unknownObjectRelease();
    v30 = 0;
  }
  v33 = v30;
  objc_msgSend(v120, sel_setAccessibilityNodeForPlatformElement_, v31);
  swift_unknownObjectRelease();
  v123 = v31;
  if (v29 && v31 == (char *)v33)
  {
    swift_bridgeObjectRelease();
    if ((v114 & 1) == 0)
    {
      v34 = 0;
      goto LABEL_105;
    }
    goto LABEL_95;
  }
  rawValue = (unint64_t)v121._rawValue;
  if (AGGraphGetOutputValue())
  {
    if (v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
    if ((unint64_t)v121._rawValue >> 62)
      goto LABEL_85;
    v37 = *(_QWORD *)(((unint64_t)v121._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v37)
    {
LABEL_47:
      v38 = 0;
      v116 = v37;
      v117 = rawValue & 0xC000000000000001;
      v107 = (char *)(rawValue + 32);
      v108 = rawValue & 0xFFFFFFFFFFFFFF8;
      v105 = v6;
      v111 = v1;
      v112 = v10;
      v110 = v33;
      do
      {
        if (v117)
        {
          v39 = (char *)MEMORY[0x18D75E3BC](v38, rawValue);
          v40 = __OFADD__(v38, 1);
          v41 = v38 + 1;
          if (v40)
            goto LABEL_78;
        }
        else
        {
          if (v38 >= *(_QWORD *)(v108 + 16))
            goto LABEL_80;
          v39 = (char *)*(id *)&v107[8 * v38];
          v40 = __OFADD__(v38, 1);
          v41 = v38 + 1;
          if (v40)
            goto LABEL_78;
        }
        v42 = v6;
        v122 = v41;
        v43 = &v39[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        v44 = v39;
        swift_beginAccess();
        v45 = *(_QWORD *)v43;
        v46 = *(_QWORD *)(*(_QWORD *)v43 + 16);
        if (v46)
        {
          v119 = v44;
          swift_bridgeObjectRetain();
          v1 = 0;
          v47 = (unsigned __int8 *)(v45 + 64);
          v33 = 40;
          v48 = (unsigned __int8 *)(v45 + 64);
          while (1)
          {
            v50 = *v48;
            v48 += 40;
            v49 = v50;
            if (v50 != 255)
            {
              *(_QWORD *)&v129 = *((_QWORD *)v47 - 1);
              BYTE8(v129) = v49;
              *(_QWORD *)&v130 = v124;
              BYTE8(v130) = v125;
              if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                break;
            }
            ++v1;
            v33 += 40;
            v47 = v48;
            if (v46 == v1)
            {

              swift_bridgeObjectRelease();
              v1 = v111;
              v10 = v112;
              v31 = v123;
              v33 = v110;
              goto LABEL_49;
            }
          }
          swift_bridgeObjectRelease();
          v51 = *(_QWORD *)v43;
          v10 = *(_QWORD *)(*(_QWORD *)v43 + 16);
          if (v10 < v1)
            goto LABEL_81;
          v6 = v42;
          swift_beginAccess();
          v52 = *(_QWORD *)(*(_QWORD *)v43 + 16);
          if (v52 < v1)
            goto LABEL_82;
          swift_bridgeObjectRetain();
          specialized Array.replaceSubrange<A>(_:with:)(v1, v52);
          swift_endAccess();
          v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v54 = v10 - v1;
          if (v10 != v1)
          {
            v106 = v51;
            *(_QWORD *)&v129 = MEMORY[0x1E0DEE9D8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54 & ~(v54 >> 63), 0);
            if ((v54 & 0x8000000000000000) == 0)
            {
              v53 = (_QWORD *)v129;
              if (v10 <= v1)
                v55 = v1;
              else
                v55 = v10;
              v56 = (void **)(v106 + v33);
              while (v1 != v55)
              {
                v57 = (uint64_t)*(v56 - 1);
                v58 = *v56;
                *(_QWORD *)&v129 = v53;
                v59 = v53[2];
                v60 = v53[3];
                swift_bridgeObjectRetain();
                v61 = v58;
                if (v59 >= v60 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v59 + 1, 1);
                  v53 = (_QWORD *)v129;
                }
                v53[2] = v59 + 1;
                v62 = &v53[2 * v59];
                v62[4] = v57;
                v62[5] = v58;
                --v55;
                --v10;
                v56 += 5;
                if (v1 == v10)
                {
                  v6 = v105;
                  goto LABEL_76;
                }
              }
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            __break(1u);
LABEL_85:
            swift_bridgeObjectRetain();
            rawValue = (unint64_t)v121._rawValue;
            v37 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v37)
              break;
            goto LABEL_47;
          }
LABEL_76:
          static AccessibilityAttachment.combine(_:)(v53, (uint64_t *)&v129);
          swift_bridgeObjectRelease();
          v63 = (void *)*((_QWORD *)&v129 + 1);
          v130 = v129;
          v128 = 0uLL;
          AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v130, &v128);
          swift_bridgeObjectRelease();

          v64 = &v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v65 = *(_QWORD *)&v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v66 = *(void **)&v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
          *v64 = 0;
          v64[1] = 0;
          outlined consume of AccessibilityAttachment?(v65, v66);
          v119[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

          swift_bridgeObjectRelease();
          v1 = v111;
          v10 = v112;
          rawValue = (unint64_t)v121._rawValue;
          v31 = v123;
          v33 = v110;
        }
        else
        {

LABEL_49:
          v6 = v42;
        }
        v38 = v122;
      }
      while (v122 != v116);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v29)
    {
LABEL_43:
      v36 = v31;

      *(_QWORD *)(v1 + 64) = v31;
      if ((v114 & 1) == 0)
      {
        v34 = 1;
        goto LABEL_105;
      }
      goto LABEL_95;
    }
  }
  if ((v114 & 1) == 0)
  {
    *(_QWORD *)&v129 = v10;
    *((_QWORD *)&v129 + 1) = v118;
    v67 = one-time initialization token for configuredForPlatform;
    swift_retain_n();
    swift_retain();
    if (v67 != -1)
      swift_once();
    v68 = static EnvironmentValues.configuredForPlatform;
    if (v10)
    {
      swift_release();
      if (!v68 || v10 != v68)
        EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
    else if (static EnvironmentValues.configuredForPlatform)
    {
      swift_retain();
      EnvironmentValues.plist.setter();
    }
    v102 = *((_QWORD *)&v129 + 1);
    v103 = &v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
    *(_QWORD *)v103 = v129;
    *((_QWORD *)v103 + 1) = v102;
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
    swift_release();
    swift_release();
    v104 = v31;

    *(_QWORD *)(v1 + 64) = v31;
    goto LABEL_104;
  }
  v69 = v31;

  *(_QWORD *)(v1 + 64) = v31;
LABEL_95:
  *(_QWORD *)&v129 = v10;
  *((_QWORD *)&v129 + 1) = v118;
  v70 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v70 != -1)
    swift_once();
  v71 = static EnvironmentValues.configuredForPlatform;
  if (v10)
  {
    swift_release();
    if (!v71 || v10 != v71)
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  v72 = *((_QWORD *)&v129 + 1);
  v73 = &v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  *(_QWORD *)v73 = v129;
  *((_QWORD *)v73 + 1) = v72;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  v31[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
  swift_release();
  swift_release();
LABEL_104:
  v34 = 1;
LABEL_105:
  *(_QWORD *)&v129 = v6;
  swift_bridgeObjectRetain();
  v74 = v120;
  AccessibilityAttachment.init(properties:platformElement:)();
  swift_bridgeObjectRelease();
  if (*(_DWORD *)(v1 + 32) == v115)
    goto LABEL_114;
  v75 = AGGraphGetValue();
  v77 = *(_QWORD *)v75;
  v76 = *(void **)(v75 + 8);
  if (*(_BYTE *)(v75 + 16))
  {
    if (*(_BYTE *)(v75 + 16) != 1)
      goto LABEL_114;
    v78 = swift_bridgeObjectRetain();
    v79 = specialized Sequence.compactMap<A>(_:)(v78);
    static AccessibilityAttachment.combine(_:)(v79, (uint64_t *)&v129);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v77, v76, 1);
    v76 = (void *)*((_QWORD *)&v129 + 1);
    v77 = v129;
  }
  else
  {
    v80 = v76;
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)&v129 = v77;
  AccessibilityProperties.merge(with:)((uint64_t *)&v129);
  v129 = v130;
  v81 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v81)
  {
    *(_QWORD *)&v129 = v77;
    *((_QWORD *)&v129 + 1) = v76;
    if (AccessibilityAttachment.platformElement.getter())
      AccessibilityAttachment.platformElement.setter();
  }
  swift_bridgeObjectRelease();

LABEL_114:
  v82 = &v123[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  swift_beginAccess();
  v83 = *(_QWORD *)v82;
  v84 = *(_QWORD *)(v83 + 16);
  if (v84)
  {
    swift_bridgeObjectRetain();
    v85 = (unsigned __int8 *)(v83 + 64);
    v86 = (unsigned __int8 *)(v83 + 64);
    while (1)
    {
      v88 = *v86;
      v86 += 40;
      v87 = v88;
      if (v88 != 255)
      {
        *(_QWORD *)&v128 = *((_QWORD *)v85 - 1);
        BYTE8(v128) = v87;
        v126 = v124;
        v127 = v125;
        if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
          break;
      }
      v85 = v86;
      if (!--v84)
      {
        swift_bridgeObjectRelease();
        goto LABEL_125;
      }
    }
    swift_bridgeObjectRelease();
    v128 = v130;
    v126 = v124;
    v127 = v125;
    v89 = *((id *)&v130 + 1);
    swift_bridgeObjectRetain();
    v90 = v123;
    v91 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v128, &v126, 0);

    swift_bridgeObjectRelease();
    if ((v91 & 1) == 0)
    {
      AccessibilityNode.platformElement.getter();
      v93 = v92;

      if (!v93)
      {
        v94 = (void *)MEMORY[0x18D760234](&v123[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

        if (v94)
          v95 = v34;
        else
          v95 = 1;
        goto LABEL_127;
      }
    }
  }
  else
  {
LABEL_125:
    v128 = v130;
    v126 = v124;
    v127 = v125;
    v89 = *((id *)&v130 + 1);
    swift_bridgeObjectRetain();
    v90 = v123;
    specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v128, &v126);

    swift_bridgeObjectRelease();
  }
  v95 = 1;
LABEL_127:
  AccessibilityNode.updateChildren(_:)(v121);
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_187BFF9C0;
  *(_QWORD *)(v96 + 32) = v90;
  *(_QWORD *)&v128 = v96;
  specialized Array._endMutation()();
  v97 = v128;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v95 & 1) != 0)
  {
    DisplayList.Version.init(forUpdate:)();
    v98 = v130;
  }
  else
  {
    if (v113)
    {
      v99 = *(void **)(v1 + 64);
      if (v99)
      {
        *(_QWORD *)(swift_allocObject() + 16) = v99;
        v100 = v99;
        static Update.enqueueAction(_:)();

        swift_release();
      }
    }
    OutputValue = AGGraphGetOutputValue();
    if (OutputValue)
      v98 = *(_QWORD *)(OutputValue + 8);
    else
      v98 = v109;
  }
  *(_QWORD *)&v130 = v97;
  *((_QWORD *)&v130 + 1) = v98;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t specialized PropertiesTransform.updateValue()()
{
  uint64_t v0;
  id *v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int CurrentAttribute;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 *Value;
  uint64_t v17;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  Swift::OpaquePointer v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  uint64_t v32;
  uint64_t i;
  id v34;
  void *v35;
  id v36;
  id *v37;
  char v38;
  id *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  char v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  void **v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  id v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  id v87;
  void *v88;
  id *v89;
  char **v90;
  char *v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  char v95;
  int v96;
  __int128 v97;
  id v98;
  char v99;
  uint64_t v100;
  Swift::UInt v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  char *v109;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  id v131;
  void *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  char v138;
  int v139;
  id v140;
  char v141;
  void *v142;
  char v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  id v147;
  id v148;
  uint64_t OutputValue;
  void *v150;
  uint64_t v151;
  _QWORD *v152;
  id *v153;
  id *v154;
  char *v155;
  uint64_t v156;
  id v157;
  id *v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  char *v167;
  char v168;
  uint64_t v169;
  id *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  void *rawValue;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  int v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185[2];
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;

  v1 = (id *)v0;
  v191 = *MEMORY[0x1E0C80C00];
  v189 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    {
      if (one-time initialization token for defaultValue != -1)
        goto LABEL_90;
      goto LABEL_9;
    }
    Value = (__int128 *)AGGraphGetValue();
LABEL_11:
    v17 = *((_QWORD *)Value + 1);
    *(_QWORD *)&v189 = *(_QWORD *)Value;
    *((_QWORD *)&v189 + 1) = v17;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v0 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v2 = (unsigned __int8 *)AGGraphGetValue();
  v3 = *v2;
  v4 = *((_DWORD *)v2 + 1);
  v5 = *((_QWORD *)v2 + 1);
  v179 = *v2;
  v180 = v4;
  v181 = v5;
  v6 = (uint64_t *)AGGraphGetValue();
  v8 = v7;
  v10 = *v6;
  v9 = v6[1];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v12 = *MEMORY[0x1E0CFED28];
  if (CurrentAttribute == *MEMORY[0x1E0CFED28])
    goto LABEL_89;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v177 = v189;
  v176 = BYTE8(v189);
  v163 = v9;
  v164 = v10;
  v174 = v12;
  v168 = v8;
  if (*(_DWORD *)(v0 + 36) == v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(AGGraphGetValue() + 8);
    v15 = v19 & 1;
    v13 = swift_bridgeObjectRetain();
  }
  v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v13)
    v21 = v15;
  else
    v21 = 0;
  v162 = v21;
  LOBYTE(v186) = v3;
  if (v13)
    v22 = v14;
  else
    v22 = 0;
  v161 = v22;
  if (v13)
    v23._rawValue = (void *)v13;
  else
    v23._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  DWORD1(v186) = v4;
  *((_QWORD *)&v186 + 1) = v5;
  swift_bridgeObjectRetain_n();
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v189);
  v24 = v190;
  outlined destroy of ScrollableCollection?((uint64_t)&v189);
  rawValue = v23._rawValue;
  if (v24 && v3)
  {
    type metadata accessor for ViewGraph();
    v25 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v26 = MEMORY[0x18D760234](v25);
    swift_release();
    if (v26)
    {
      swift_getObjectType();
      v27 = swift_conformsToProtocol2();
      if (v27)
        v28 = v27;
      else
        v28 = 0;
      if (v27)
        v29 = v26;
      else
        v29 = 0;
      if (v29)
      {
LABEL_44:
        v36 = v1[8];
        v31 = (id *)v36;
        v37 = (id *)AccessibilityScrollableModifier.createOrUpdateNode(viewRendererHost:existingNode:)(v29, v28, v36);

        v30 = (uint64_t)v37;
        swift_unknownObjectRelease();
        v170 = v37;
        if (v36 && v37 == v31)
        {
          swift_bridgeObjectRelease();
          if ((v8 & 1) == 0)
          {
            v38 = 0;
            goto LABEL_190;
          }
          goto LABEL_180;
        }
        if (AGGraphGetOutputValue())
        {
          if (v36)
          {
            swift_bridgeObjectRelease();
            goto LABEL_53;
          }
          if ((unint64_t)v23._rawValue >> 62)
            goto LABEL_170;
          v40 = *(_QWORD *)(((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v40)
          {
LABEL_57:
            v41 = 0;
            v165 = (unint64_t)v23._rawValue & 0xC000000000000001;
            v155 = (char *)v23._rawValue + 32;
            v156 = (unint64_t)v23._rawValue & 0xFFFFFFFFFFFFFF8;
            v158 = v1;
            v159 = v40;
            v154 = v31;
            do
            {
              if (v165)
              {
                v42 = (char *)MEMORY[0x18D75E3BC](v41, v23._rawValue);
                v43 = __OFADD__(v41, 1);
                v44 = v41 + 1;
                if (v43)
                  goto LABEL_88;
              }
              else
              {
                if (v41 >= *(_QWORD *)(v156 + 16))
                {
                  __break(1u);
LABEL_92:
                  swift_bridgeObjectRetain();
                  v32 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v32)
                    goto LABEL_93;
LABEL_36:
                  if (v32 < 1)
                    goto LABEL_168;
                  for (i = 0; i != v32; ++i)
                  {
                    if (((unint64_t)v23._rawValue & 0xC000000000000001) != 0)
                      v34 = (id)MEMORY[0x18D75E3BC](i, v23._rawValue);
                    else
                      v34 = *((id *)v23._rawValue + i + 4);
                    v35 = v34;
                    swift_unknownObjectWeakAssign();

                  }
                  goto LABEL_93;
                }
                v42 = (char *)*(id *)&v155[8 * v41];
                v43 = __OFADD__(v41, 1);
                v44 = v41 + 1;
                if (v43)
                  goto LABEL_88;
              }
              v172 = v44;
              v45 = &v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
              v46 = v42;
              swift_beginAccess();
              v47 = *(_QWORD *)v45;
              v48 = *(_QWORD *)(*(_QWORD *)v45 + 16);
              if (v48)
              {
                v166 = v46;
                swift_bridgeObjectRetain();
                v49 = 0;
                v50 = (unsigned __int8 *)(v47 + 64);
                v30 = 40;
                v51 = (unsigned __int8 *)(v47 + 64);
                while (1)
                {
                  v53 = *v51;
                  v51 += 40;
                  v52 = v53;
                  if (v53 != 255)
                  {
                    *(_QWORD *)&v189 = *((_QWORD *)v50 - 1);
                    BYTE8(v189) = v52;
                    *(_QWORD *)&v186 = v177;
                    BYTE8(v186) = v176;
                    if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                      break;
                  }
                  ++v49;
                  v30 += 40;
                  v50 = v51;
                  if (v48 == v49)
                  {

LABEL_86:
                    swift_bridgeObjectRelease();
                    v1 = v158;
                    v40 = v159;
                    v30 = (uint64_t)v170;
                    goto LABEL_59;
                  }
                }
                swift_bridgeObjectRelease();
                v54 = *(_QWORD *)v45;
                v1 = *(id **)(*(_QWORD *)v45 + 16);
                if ((unint64_t)v1 < v49)
                {
                  __break(1u);
                }
                else
                {
                  swift_beginAccess();
                  v55 = *(_QWORD *)(*(_QWORD *)v45 + 16);
                  if (v55 >= v49)
                  {
                    swift_bridgeObjectRetain();
                    specialized Array.replaceSubrange<A>(_:with:)(v49, v55);
                    swift_endAccess();
                    v56 = v20;
                    v57 = (uint64_t)v1 - v49;
                    if (v1 == (id *)v49)
                    {
LABEL_85:
                      static AccessibilityAttachment.combine(_:)(v56, (uint64_t *)&v189);
                      swift_bridgeObjectRelease();
                      v66 = (void *)*((_QWORD *)&v189 + 1);
                      v186 = v189;
                      v185[0] = 0uLL;
                      AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v186, v185);
                      swift_bridgeObjectRelease();

                      v67 = &v166[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                      v68 = *(_QWORD *)&v166[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                      v69 = *(void **)&v166[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                      *v67 = 0;
                      v67[1] = 0;
                      outlined consume of AccessibilityAttachment?(v68, v69);
                      v166[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                      goto LABEL_86;
                    }
                    *(_QWORD *)&v189 = v20;
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57 & ~(v57 >> 63), 0);
                    if (v57 < 0)
                      goto LABEL_169;
                    v56 = (_QWORD *)v189;
                    if ((unint64_t)v1 <= v49)
                      v58 = v49;
                    else
                      v58 = (unint64_t)v1;
                    v59 = (void **)(v54 + v30);
                    while (v49 != v58)
                    {
                      v60 = (uint64_t)*(v59 - 1);
                      v61 = *v59;
                      *(_QWORD *)&v189 = v56;
                      v63 = v56[2];
                      v62 = v56[3];
                      swift_bridgeObjectRetain();
                      v64 = v61;
                      if (v63 >= v62 >> 1)
                      {
                        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1);
                        v56 = (_QWORD *)v189;
                      }
                      v56[2] = v63 + 1;
                      v65 = &v56[2 * v63];
                      v65[4] = v60;
                      v65[5] = v61;
                      --v58;
                      v1 = (id *)((char *)v1 - 1);
                      v59 += 5;
                      v23._rawValue = rawValue;
                      if ((id *)v49 == v1)
                      {
                        v31 = v154;
                        v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                        goto LABEL_85;
                      }
                    }
                    __break(1u);
LABEL_88:
                    __break(1u);
LABEL_89:
                    __break(1u);
LABEL_90:
                    swift_once();
LABEL_9:
                    Value = &static AccessibilityNodesKey.defaultValue;
                    goto LABEL_11;
                  }
                }
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                swift_bridgeObjectRetain();
                v40 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v40)
                  break;
                goto LABEL_57;
              }

LABEL_59:
              v41 = v172;
            }
            while (v172 != v40);
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          if (v36)
          {
LABEL_53:
            v39 = v37;

            v1[8] = v39;
            if ((v8 & 1) == 0)
            {
LABEL_189:
              v38 = 1;
LABEL_190:
              LOBYTE(v185[0]) = v179;
              DWORD1(v185[0]) = v180;
              *((_QWORD *)&v185[0] + 1) = v181;
              AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v186);
              if (v187)
              {
                outlined init with take of OptionalBinaryInteger(&v186, (uint64_t)&v189);
                *(_QWORD *)&v188 = v181;
                outlined init with copy of TableColumnList((uint64_t)&v189, (uint64_t)&v186);
                outlined init with copy of ScrollableCollection?((uint64_t)&v186, (uint64_t)v185, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E0CE4E20]);
                swift_bridgeObjectRetain();
                specialized AccessibilityProperties.subscript.setter((uint64_t)v185);
                outlined destroy of ScrollableCollection?((uint64_t)&v186);
                type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E0CE58F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                v124 = swift_allocObject();
                static AccessibilityVisibility.containerElement.getter();
                v125 = *(_DWORD *)(v124 + 32);
                swift_setDeallocating();
                swift_deallocClassInstance();
                LODWORD(v186) = v125;
                DWORD1(v186) = v125;
                AccessibilityProperties.visibility.setter();
                *(_QWORD *)&v185[0] = v188;
                static AccessibilityAttachment.properties(_:)();
                swift_bridgeObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
              }
              else
              {
                outlined destroy of ScrollableCollection?((uint64_t)&v186);
                *(_QWORD *)&v189 = v181;
                static AccessibilityAttachment.properties(_:)();
              }
              swift_bridgeObjectRelease();
              if (*((_DWORD *)v1 + 8) != v174)
              {
                v126 = AGGraphGetValue();
                v128 = *(_QWORD *)v126;
                v127 = *(void **)(v126 + 8);
                if (*(_BYTE *)(v126 + 16))
                {
                  if (*(_BYTE *)(v126 + 16) != 1)
                    goto LABEL_202;
                  v129 = swift_bridgeObjectRetain();
                  v130 = specialized Sequence.compactMap<A>(_:)(v129);
                  static AccessibilityAttachment.combine(_:)(v130, (uint64_t *)&v189);
                  swift_bridgeObjectRelease();
                  outlined consume of AccessibilityAttachment.Tree(v128, v127, 1);
                  v127 = (void *)*((_QWORD *)&v189 + 1);
                  v128 = v189;
                }
                else
                {
                  v131 = v127;
                  swift_bridgeObjectRetain();
                }
                *(_QWORD *)&v189 = v128;
                AccessibilityProperties.merge(with:)((uint64_t *)&v189);
                v189 = v186;
                v132 = (void *)AccessibilityAttachment.platformElement.getter();

                if (!v132)
                {
                  *(_QWORD *)&v189 = v128;
                  *((_QWORD *)&v189 + 1) = v127;
                  if (AccessibilityAttachment.platformElement.getter())
                    AccessibilityAttachment.platformElement.setter();
                }
                swift_bridgeObjectRelease();

              }
LABEL_202:
              v133 = (uint64_t *)((char *)v170 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
              swift_beginAccess();
              v134 = *v133;
              v135 = *(_QWORD *)(v134 + 16);
              if (v135)
              {
                swift_bridgeObjectRetain();
                v136 = (unsigned __int8 *)(v134 + 64);
                v137 = (unsigned __int8 *)(v134 + 64);
                while (1)
                {
                  v139 = *v137;
                  v137 += 40;
                  v138 = v139;
                  if (v139 != 255)
                  {
                    *(_QWORD *)&v185[0] = *((_QWORD *)v136 - 1);
                    BYTE8(v185[0]) = v138;
                    *(_QWORD *)&v188 = v177;
                    BYTE8(v188) = v176;
                    if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                      break;
                  }
                  v136 = v137;
                  if (!--v135)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_211;
                  }
                }
                swift_bridgeObjectRelease();
                v185[0] = v186;
                *(_QWORD *)&v188 = v177;
                BYTE8(v188) = v176;
                v140 = *((id *)&v186 + 1);
                swift_bridgeObjectRetain();
                v141 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)v185, (uint64_t *)&v188, 0);

                swift_bridgeObjectRelease();
                if ((v141 & 1) != 0)
                  goto LABEL_212;
                AccessibilityNode.platformElement.getter();
                if (v142)
                {

                  goto LABEL_212;
                }
                v150 = (void *)MEMORY[0x18D760234]((char *)v170 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);

                if (v150)
                  v143 = v38;
                else
                  v143 = 1;
              }
              else
              {
LABEL_211:
                v185[0] = v186;
                *(_QWORD *)&v188 = v177;
                BYTE8(v188) = v176;
                v140 = *((id *)&v186 + 1);
                swift_bridgeObjectRetain();
                specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)v185, (uint64_t *)&v188);

                swift_bridgeObjectRelease();
LABEL_212:
                v143 = 1;
              }
              AccessibilityNode.updateChildren(_:)(v23);
              swift_bridgeObjectRelease();
              type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
              v144 = swift_allocObject();
              *(_OWORD *)(v144 + 16) = xmmword_187BFF9C0;
              *(_QWORD *)(v144 + 32) = v170;
              *(_QWORD *)&v185[0] = v144;
              specialized Array._endMutation()();
              v145 = *(void **)&v185[0];

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v23._rawValue = v145;
              if ((v143 & 1) == 0)
                goto LABEL_215;
LABEL_214:
              DisplayList.Version.init(forUpdate:)();
              v146 = v186;
              goto LABEL_221;
            }
LABEL_180:
            *(_QWORD *)&v189 = v164;
            *((_QWORD *)&v189 + 1) = v163;
            v120 = one-time initialization token for configuredForPlatform;
            swift_retain_n();
            swift_retain();
            if (v120 != -1)
              swift_once();
            v121 = static EnvironmentValues.configuredForPlatform;
            if (v164)
            {
              swift_release();
              if (!v121 || v164 != v121)
                EnvironmentValues._configureForPlatform(traitCollection:)(0);
            }
            else if (static EnvironmentValues.configuredForPlatform)
            {
              swift_retain();
              EnvironmentValues.plist.setter();
            }
            v122 = *((_QWORD *)&v189 + 1);
            v123 = (_QWORD *)(v30 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
            *v123 = v189;
            v123[1] = v122;
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            *((_BYTE *)v170 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
            swift_release();
            swift_release();
            goto LABEL_189;
          }
        }
        if ((v168 & 1) == 0)
        {
          *(_QWORD *)&v189 = v164;
          *((_QWORD *)&v189 + 1) = v163;
          v117 = one-time initialization token for configuredForPlatform;
          swift_retain_n();
          swift_retain();
          if (v117 != -1)
            swift_once();
          v118 = static EnvironmentValues.configuredForPlatform;
          if (v164)
          {
            swift_release();
            if (!v118 || v164 != v118)
              EnvironmentValues._configureForPlatform(traitCollection:)(0);
          }
          else if (static EnvironmentValues.configuredForPlatform)
          {
            swift_retain();
            EnvironmentValues.plist.setter();
          }
          v151 = *((_QWORD *)&v189 + 1);
          v152 = (_QWORD *)(v30 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
          *v152 = v189;
          v152[1] = v151;
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          *((_BYTE *)v170 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
          swift_release();
          swift_release();
          v153 = v170;

          v1[8] = v153;
          goto LABEL_189;
        }
        v119 = (id)v30;

        v1[8] = v119;
        goto LABEL_180;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      v29 = 0;
    }
    v28 = 0;
    goto LABEL_44;
  }
  v30 = (unint64_t)v23._rawValue >> 62;
  if (v1[8])
  {
    v31 = v1;
    if (v30)
      goto LABEL_92;
    v32 = *(_QWORD *)(((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v32)
      goto LABEL_36;
LABEL_93:
    swift_bridgeObjectRelease();
    v1 = v31;

    v31[8] = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (v30)
  {
LABEL_163:
    swift_bridgeObjectRetain();
    v70 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v70)
      goto LABEL_96;
LABEL_164:
    swift_bridgeObjectRelease_n();
    if ((v162 & 1) == 0)
      goto LABEL_218;
    goto LABEL_214;
  }
  v70 = *(_QWORD *)(((unint64_t)v23._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v70)
    goto LABEL_164;
LABEL_96:
  v173 = (unint64_t)v23._rawValue & 0xC000000000000001;
  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v71 = 0;
  v167 = (char *)v23._rawValue + 32;
  v169 = (unint64_t)v23._rawValue & 0xFFFFFFFFFFFFFF8;
  v160 = v162;
  v171 = v70;
  do
  {
    while (1)
    {
      if (v173)
      {
        v72 = (_BYTE *)MEMORY[0x18D75E3BC](v71, v23._rawValue);
      }
      else
      {
        if (v71 >= *(_QWORD *)(v169 + 16))
          goto LABEL_162;
        v72 = *(id *)&v167[8 * v71];
      }
      v73 = v72;
      v43 = __OFADD__(v71++, 1);
      if (v43)
      {
        __break(1u);
LABEL_162:
        __break(1u);
        goto LABEL_163;
      }
      v74 = AGGraphGetValue();
      if (!*(_QWORD *)(*(_QWORD *)v74 + 16))
      {
        swift_bridgeObjectRetain();
LABEL_110:
        *(_QWORD *)&v189 = v181;
        static AccessibilityAttachment.properties(_:)();
        goto LABEL_118;
      }
      outlined init with copy of TableColumnList(*(_QWORD *)v74 + 32, (uint64_t)v185);
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
      v75 = MEMORY[0x1E0CE4E20];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      swift_bridgeObjectRetain();
      if ((swift_dynamicCast() & 1) == 0)
      {
        v184 = 0;
        v182 = 0u;
        v183 = 0u;
        outlined destroy of ScrollableCollection?((uint64_t)&v182);
        goto LABEL_110;
      }
      outlined init with take of OptionalBinaryInteger(&v182, (uint64_t)&v186);
      outlined init with take of OptionalBinaryInteger(&v186, (uint64_t)&v189);
      v178 = v181;
      outlined init with copy of TableColumnList((uint64_t)&v189, (uint64_t)&v186);
      outlined init with copy of ScrollableCollection?((uint64_t)&v186, (uint64_t)v185, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v75);
      outlined init with copy of ScrollableCollection?((uint64_t)v185, (uint64_t)&v182, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v75);
      if (*((_QWORD *)&v183 + 1))
      {
        swift_bridgeObjectRetain();
        outlined destroy of ScrollableCollection?((uint64_t)&v182);
        type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>();
        *((_QWORD *)&v183 + 1) = v76;
        v184 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<ScrollableCollection?>, MEMORY[0x1E0CE6310]);
        *(_QWORD *)&v182 = swift_allocObject();
        outlined init with copy of ScrollableCollection?((uint64_t)v185, v182 + 16, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v75);
        specialized Dictionary.subscript.setter((uint64_t)&v182, (uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        outlined destroy of ScrollableCollection?((uint64_t)v185);
      }
      else
      {
        v77 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
        if ((v78 & 1) != 0)
        {
          v79 = v77;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized _NativeDictionary.copy()();
          outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v181 + 56) + 40 * v79), (uint64_t)&v182);
          specialized _NativeDictionary._delete(at:)(v79, v181);
          v178 = v181;
          swift_bridgeObjectRelease();
        }
        else
        {
          v184 = 0;
          v182 = 0u;
          v183 = 0u;
          swift_bridgeObjectRetain();
        }
        outlined destroy of ScrollableCollection?((uint64_t)v185);
        outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v182);
      }
      outlined destroy of ScrollableCollection?((uint64_t)&v186);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E0CE58F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = xmmword_187BF9830;
      static AccessibilityVisibility.containerElement.getter();
      v81 = *(_DWORD *)(v80 + 32);
      swift_bridgeObjectRelease();
      LODWORD(v186) = v81;
      DWORD1(v186) = v81;
      AccessibilityProperties.visibility.setter();
      *(_QWORD *)&v186 = v178;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
LABEL_118:
      swift_bridgeObjectRelease();
      if (*((_DWORD *)v1 + 8) == v174)
        goto LABEL_127;
      v82 = AGGraphGetValue();
      v84 = *(_QWORD *)v82;
      v83 = *(void **)(v82 + 8);
      if (*(_BYTE *)(v82 + 16))
      {
        if (*(_BYTE *)(v82 + 16) != 1)
          goto LABEL_127;
        v85 = swift_bridgeObjectRetain();
        v86 = specialized Sequence.compactMap<A>(_:)(v85);
        static AccessibilityAttachment.combine(_:)(v86, (uint64_t *)&v189);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v84, v83, 1);
        v83 = (void *)*((_QWORD *)&v189 + 1);
        v84 = v189;
      }
      else
      {
        v87 = v83;
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)&v189 = v84;
      AccessibilityProperties.merge(with:)((uint64_t *)&v189);
      v189 = v188;
      v88 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v88)
      {
        *(_QWORD *)&v189 = v84;
        *((_QWORD *)&v189 + 1) = v83;
        if (AccessibilityAttachment.platformElement.getter())
          AccessibilityAttachment.platformElement.setter();
      }
      swift_bridgeObjectRelease();

LABEL_127:
      v89 = v1;
      v90 = (char **)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      v91 = *v90;
      v92 = *((_QWORD *)*v90 + 2);
      if (v92)
      {
        swift_bridgeObjectRetain();
        v93 = (unsigned __int8 *)(v91 + 64);
        v94 = (unsigned __int8 *)(v91 + 64);
        while (1)
        {
          v96 = *v94;
          v94 += 40;
          v95 = v96;
          if (v96 != 255)
          {
            *(_QWORD *)&v189 = *((_QWORD *)v93 - 1);
            BYTE8(v189) = v95;
            *(_QWORD *)&v186 = v177;
            BYTE8(v186) = v176;
            if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
              break;
          }
          v93 = v94;
          if (!--v92)
            goto LABEL_133;
        }
        LOBYTE(v92) = 1;
LABEL_133:
        swift_bridgeObjectRelease();
      }
      v97 = v188;
      v189 = v188;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
      {
        if ((v92 & 1) == 0)
          goto LABEL_97;
      }
      else if ((v92 & 1) == 0)
      {
        AccessibilityNode.traits.getter((uint64_t *)&v189);
        if ((v189 & 0x80000) == 0)
        {
          v100 = *(_QWORD *)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
          if (!v100)
            goto LABEL_151;
          v101 = *(_QWORD *)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
          swift_beginAccess();
          v102 = *(_QWORD *)(v100 + 32);
          if (*(_QWORD *)(v102 + 16)
            && (v103 = specialized __RawDictionaryStorage.find<A>(_:)(v101, 0), (v104 & 1) != 0))
          {
            v105 = *(_QWORD *)(*(_QWORD *)(v102 + 56) + 8 * v103);
            swift_endAccess();
            swift_retain();
            swift_bridgeObjectRetain();
            v106 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v105, v100, 1u);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_endAccess();
            swift_retain();
            v106 = MEMORY[0x1E0DEE9D8];
          }
          if (v106 >> 62)
          {
            swift_bridgeObjectRetain();
            v107 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v107 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_release();
          }
          swift_bridgeObjectRelease();
          if (!v107)
            goto LABEL_151;
        }
        *(_QWORD *)&v186 = v97;
        AccessibilityProperties.traits.getter();
        if ((BYTE2(v189) & 8) == 0 && (BYTE10(v189) & 8) != 0)
        {
LABEL_151:
          v189 = v97;
          v108 = *((id *)&v97 + 1);
          swift_bridgeObjectRetain();
          AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v189);
          v109 = *v90;
          swift_bridgeObjectRetain_n();
          v157 = v108;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v90 = v109;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v109 + 2) + 1, 1, v109);
            *v90 = v109;
          }
          v112 = *((_QWORD *)v109 + 2);
          v111 = *((_QWORD *)v109 + 3);
          if (v112 >= v111 >> 1)
          {
            v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v111 > 1), v112 + 1, 1, v109);
            *v90 = v109;
          }
          *((_QWORD *)v109 + 2) = v112 + 1;
          v113 = &v109[40 * v112];
          *((_OWORD *)v113 + 2) = v97;
          *((_QWORD *)v113 + 6) = 0;
          *((_QWORD *)v113 + 7) = v177;
          v113[64] = v176;
          v114 = &v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v115 = *(_QWORD *)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          v116 = *(void **)&v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
          *v114 = 0;
          v114[1] = 0;
          outlined consume of AccessibilityAttachment?(v115, v116);
          v160 = 1;
          v73[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

          swift_bridgeObjectRelease_n();
          goto LABEL_156;
        }
LABEL_97:
        swift_bridgeObjectRelease();

        break;
      }
      v189 = v97;
      *(_QWORD *)&v186 = v177;
      BYTE8(v186) = v176;
      v98 = *((id *)&v97 + 1);
      swift_bridgeObjectRetain();
      v99 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v189, (uint64_t *)&v186, 0);

      swift_bridgeObjectRelease_n();
      if ((v99 & 1) == 0)
        break;
      v160 = 1;
LABEL_156:
      v1 = v89;
      v23._rawValue = rawValue;
      if (v71 == v171)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_214;
      }
    }
    v1 = v89;
    v23._rawValue = rawValue;
  }
  while (v71 != v171);
  swift_bridgeObjectRelease_n();
  if ((v160 & 1) != 0)
    goto LABEL_214;
LABEL_215:
  if (v162)
  {
    v147 = v1[8];
    if (v147)
    {
      *(_QWORD *)(swift_allocObject() + 16) = v147;
      v148 = v147;
      static Update.enqueueAction(_:)();

      swift_release();
    }
  }
LABEL_218:
  OutputValue = AGGraphGetOutputValue();
  if (OutputValue)
    v146 = *(_QWORD *)(OutputValue + 8);
  else
    v146 = v161;
LABEL_221:
  *(Swift::OpaquePointer *)&v186 = v23;
  *((_QWORD *)&v186 + 1) = v146;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  unsigned __int8 *v0;
  uint64_t *v1;
  __int128 *v2;
  uint64_t v3;
  __int128 *v4;
  char v5;
  uint64_t *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int CurrentAttribute;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 *Value;
  uint64_t v19;
  char v21;
  int v22;
  uint64_t v23;
  Swift::OpaquePointer v24;
  uint64_t (*v25)(void *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t i;
  id v35;
  void *v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  void **p_storeEnumTagSinglePayload;
  __int128 *v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  BOOL v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  char v53;
  int v54;
  char *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  void **v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  id v65;
  _QWORD *v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  id v74;
  char v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  __int128 v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  id v91;
  void *v92;
  char **v93;
  char *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  char v98;
  int v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  Swift::UInt v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  id v110;
  char *v111;
  id v112;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  id v132;
  void *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  char v139;
  int v140;
  id v141;
  char v142;
  void *v143;
  char v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  void *v148;
  id v149;
  uint64_t OutputValue;
  void *v151;
  uint64_t v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  char *v155;
  char v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  __int128 *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  void *rawValue;
  unint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  __int128 *v172;
  unint64_t v173;
  int v174;
  char v175;
  unint64_t v176;
  __int128 *v177;
  char *v178;
  void *v179;
  char v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 *v189;
  char v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v187 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    if (*((_DWORD *)v0 + 9) != *MEMORY[0x1E0CFED28])
    {
      Value = (__int128 *)AGGraphGetValue();
      goto LABEL_11;
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_9:
      Value = &static AccessibilityNodesKey.defaultValue;
LABEL_11:
      v19 = *((_QWORD *)Value + 1);
      *(_QWORD *)&v187 = *(_QWORD *)Value;
      *((_QWORD *)&v187 + 1) = v19;
      return AGGraphSetOutputValue();
    }
LABEL_95:
    swift_once();
    goto LABEL_9;
  }
  if (*((_DWORD *)v0 + 20) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *((_QWORD *)v0 + 8) = 0;
    swift_unknownObjectWeakAssign();
    *((_DWORD *)v0 + 20) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v1 = (uint64_t *)AGGraphGetValue();
  v2 = (__int128 *)v0;
  v3 = *v1;
  v4 = (__int128 *)v1[1];
  v188 = *v1;
  v189 = v4;
  v190 = v5 & 1;
  v6 = (uint64_t *)AGGraphGetValue();
  v8 = v7;
  v9 = *v6;
  v10 = v6[1];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  LODWORD(v12) = *MEMORY[0x1E0CFED28];
  if (CurrentAttribute == *MEMORY[0x1E0CFED28])
  {
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v159 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  v160 = v9;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v13 = v187;
  LOBYTE(v14) = BYTE8(v187);
  v161 = v2;
  v175 = v8;
  if (*((_DWORD *)v2 + 9) == (_DWORD)v12)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(AGGraphGetValue() + 8);
    v17 = v21 & 1;
    v15 = swift_bridgeObjectRetain();
  }
  if (v15)
    v22 = v17;
  else
    v22 = 0;
  v158 = v22;
  if (v15)
    v23 = v16;
  else
    v23 = 0;
  v157 = v23;
  if (v15)
    v24._rawValue = (void *)v15;
  else
    v24._rawValue = (void *)MEMORY[0x1E0DEE9D8];
  rawValue = v24._rawValue;
  v180 = BYTE8(v187);
  v181 = v187;
  v174 = v12;
  if (v4)
  {
    v25 = *(uint64_t (**)(void *))(*(_QWORD *)v4 + 80);
    swift_bridgeObjectRetain_n();
    swift_retain();
    LOBYTE(v25) = v25(v24._rawValue);
    swift_release();
    if ((v25 & 1) != 0)
      goto LABEL_24;
  }
  else
  {
    if ((unint64_t)v24._rawValue >> 62)
    {
      swift_bridgeObjectRetain_n();
      v4 = (__int128 *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4)
        goto LABEL_36;
    }
    else
    {
      v4 = *(__int128 **)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v4)
        goto LABEL_36;
    }
    swift_beginAccess();
    v31 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)&v187 = *(_QWORD *)(v3 + 16);
    *((_QWORD *)&v187 + 1) = v31;
    v4 = &v187;
    if ((AccessibilityAttachment.isEmpty.getter() & 1) == 0)
    {
LABEL_24:
      type metadata accessor for ViewGraph();
      v26 = MEMORY[0x18D75C5F8]() + 200;
      swift_beginAccess();
      v27 = MEMORY[0x18D760234](v26);
      swift_release();
      if (v27)
      {
        swift_getObjectType();
        v28 = swift_conformsToProtocol2();
        if (v28)
          v29 = v28;
        else
          v29 = 0;
        if (v28)
          v30 = v27;
        else
          v30 = 0;
        if (v30)
        {
LABEL_47:
          v37 = *((_QWORD *)v2 + 8);
          if (v37)
          {
            v38 = (__int128 *)*((_QWORD *)v2 + 8);
            v2 = v38;
          }
          else
          {
            objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
            v39 = swift_unknownObjectRetain();
            v2 = (__int128 *)specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v39, v29, 0);
            swift_unknownObjectRelease();
            v38 = 0;
          }
          v4 = v38;
          swift_unknownObjectRelease();
          p_storeEnumTagSinglePayload = &value witness table for ButtonAction.storeEnumTagSinglePayload;
          if (v37 && v2 == v4)
          {
            swift_bridgeObjectRelease();
            v41 = v161;
            if ((v175 & 1) == 0)
            {
              v42 = 0;
              goto LABEL_196;
            }
            goto LABEL_187;
          }
          v172 = v4;
          if (AGGraphGetOutputValue())
          {
            if (v37)
            {
              swift_bridgeObjectRelease();
              goto LABEL_58;
            }
            if ((unint64_t)v24._rawValue >> 62)
              goto LABEL_177;
            v44 = *(_QWORD *)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v44)
            {
              while (1)
              {
                v45 = 0;
                v168 = (unint64_t)v24._rawValue & 0xC000000000000001;
                v162 = (unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8;
                v164 = v44;
                v155 = (char *)v24._rawValue + 32;
                v166 = v2;
                while (1)
                {
                  if (v168)
                  {
                    v46 = (id)MEMORY[0x18D75E3BC](v45, v24._rawValue);
                    v47 = __OFADD__(v45, 1);
                    v48 = v45 + 1;
                    if (v47)
                      goto LABEL_94;
                  }
                  else
                  {
                    if (v45 >= *(_QWORD *)(v162 + 16))
                    {
                      __break(1u);
                      goto LABEL_173;
                    }
                    v46 = *(id *)&v155[8 * v45];
                    v47 = __OFADD__(v45, 1);
                    v48 = v45 + 1;
                    if (v47)
                      goto LABEL_94;
                  }
                  v176 = v48;
                  v4 = (__int128 *)((char *)p_storeEnumTagSinglePayload[479] + (_QWORD)v46);
                  v49 = v46;
                  swift_beginAccess();
                  v24._rawValue = *(void **)v4;
                  v50 = *(_QWORD *)(*(_QWORD *)v4 + 16);
                  if (v50)
                    break;

                  v24._rawValue = rawValue;
LABEL_64:
                  v45 = v176;
                  v4 = v172;
                  if (v176 == v44)
                    goto LABEL_178;
                }
                v170 = v49;
                swift_bridgeObjectRetain();
                v12 = 0;
                v51 = (__int128 *)((char *)v24._rawValue + 64);
                v52 = 40;
                v2 = (__int128 *)((char *)v24._rawValue + 64);
                while (1)
                {
                  v54 = *(unsigned __int8 *)v2;
                  v2 = (__int128 *)((char *)v2 + 40);
                  v53 = v54;
                  if (v54 != 255)
                  {
                    *(_QWORD *)&v185 = *((_QWORD *)v51 - 1);
                    BYTE8(v185) = v53;
                    *(_QWORD *)&v186 = v13;
                    BYTE8(v186) = v14;
                    if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                      break;
                  }
                  ++v12;
                  v52 += 40;
                  v51 = v2;
                  if (v50 == v12)
                  {

                    swift_bridgeObjectRelease();
                    v2 = v166;
                    v24._rawValue = rawValue;
                    LODWORD(v12) = v174;
LABEL_91:
                    v44 = v164;
                    goto LABEL_64;
                  }
                }
                swift_bridgeObjectRelease();
                v55 = *(char **)v4;
                v14 = *(_QWORD *)(*(_QWORD *)v4 + 16);
                if (v14 < v12)
                  goto LABEL_174;
                swift_beginAccess();
                v56 = *(_QWORD *)(*(_QWORD *)v4 + 16);
                v2 = v166;
                v24._rawValue = rawValue;
                if (v56 >= v12)
                  break;
LABEL_175:
                __break(1u);
LABEL_176:
                __break(1u);
LABEL_177:
                swift_bridgeObjectRetain();
                p_storeEnumTagSinglePayload = (void **)(&value witness table for ButtonAction + 56);
                v44 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v44)
                  goto LABEL_178;
              }
              swift_bridgeObjectRetain();
              specialized Array.replaceSubrange<A>(_:with:)(v12, v56);
              swift_endAccess();
              v57 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v58 = v14 - v12;
              if (v14 == v12)
              {
LABEL_90:
                static AccessibilityAttachment.combine(_:)(v57, (uint64_t *)&v185);
                swift_bridgeObjectRelease();
                v67 = (void *)*((_QWORD *)&v185 + 1);
                v186 = v185;
                v183 = 0uLL;
                AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v186, &v183);
                swift_bridgeObjectRelease();

                v68 = &v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                v69 = *(_QWORD *)&v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                v70 = *(void **)&v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                *v68 = 0;
                v68[1] = 0;
                outlined consume of AccessibilityAttachment?(v69, v70);
                v170[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                swift_bridgeObjectRelease();
                LOBYTE(v14) = v180;
                LODWORD(v12) = v174;
                p_storeEnumTagSinglePayload = (void **)(&value witness table for ButtonAction + 56);
                goto LABEL_91;
              }
              *(_QWORD *)&v185 = MEMORY[0x1E0DEE9D8];
              v4 = &v185;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58 & ~(v58 >> 63), 0);
              if (v58 < 0)
                goto LABEL_176;
              v57 = (_QWORD *)v185;
              if (v14 <= v12)
                v59 = v12;
              else
                v59 = v14;
              v60 = (void **)&v55[v52];
              while (v12 != v59)
              {
                v61 = (uint64_t)*(v60 - 1);
                v62 = *v60;
                *(_QWORD *)&v185 = v57;
                v63 = v57[2];
                v64 = v57[3];
                swift_bridgeObjectRetain();
                v65 = v62;
                if (v63 >= v64 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v63 + 1, 1);
                  v57 = (_QWORD *)v185;
                }
                v57[2] = v63 + 1;
                v66 = &v57[2 * v63];
                v66[4] = v61;
                v66[5] = v62;
                --v59;
                --v14;
                v60 += 5;
                v24._rawValue = rawValue;
                if (v12 == v14)
                {
                  v13 = v181;
                  v2 = v166;
                  goto LABEL_90;
                }
              }
              __break(1u);
              goto LABEL_93;
            }
LABEL_178:
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v37)
            {
LABEL_58:
              v43 = v2;

              *((_QWORD *)v161 + 8) = v43;
              v41 = v161;
              if ((v175 & 1) == 0)
              {
                v42 = 1;
                goto LABEL_196;
              }
              goto LABEL_187;
            }
          }
          if ((v175 & 1) == 0)
          {
            *(_QWORD *)&v185 = v160;
            *((_QWORD *)&v185 + 1) = v159;
            v120 = one-time initialization token for configuredForPlatform;
            swift_retain_n();
            swift_retain();
            if (v120 != -1)
              swift_once();
            v121 = static EnvironmentValues.configuredForPlatform;
            if (v160)
            {
              swift_release();
              if (!v121 || v160 != v121)
                EnvironmentValues._configureForPlatform(traitCollection:)(0);
            }
            else if (static EnvironmentValues.configuredForPlatform)
            {
              swift_retain();
              EnvironmentValues.plist.setter();
            }
            v152 = *((_QWORD *)&v185 + 1);
            v153 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment;
            *(_QWORD *)v153 = v185;
            *((_QWORD *)v153 + 1) = v152;
            swift_retain();
            swift_retain();
            swift_release();
            swift_release();
            *((_BYTE *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
            swift_release();
            swift_release();
            v154 = v2;

            *((_QWORD *)v161 + 8) = v154;
            v41 = v161;
            v42 = 1;
LABEL_196:
            AccessibilityAttachmentModifier.initialAttachment(for:)((uint64_t)v24._rawValue, (uint64_t *)&v186);
            swift_bridgeObjectRelease();
            if (*((_DWORD *)v41 + 8) != (_DWORD)v12)
            {
              v127 = AGGraphGetValue();
              v129 = *(_QWORD *)v127;
              v128 = *(void **)(v127 + 8);
              if (!*(_BYTE *)(v127 + 16))
              {
                v132 = v128;
                swift_bridgeObjectRetain();
LABEL_201:
                *(_QWORD *)&v185 = v129;
                AccessibilityProperties.merge(with:)((uint64_t *)&v185);
                v185 = v186;
                v133 = (void *)AccessibilityAttachment.platformElement.getter();

                if (!v133)
                {
                  *(_QWORD *)&v185 = v129;
                  *((_QWORD *)&v185 + 1) = v128;
                  if (AccessibilityAttachment.platformElement.getter())
                    AccessibilityAttachment.platformElement.setter();
                }
                swift_bridgeObjectRelease();

                goto LABEL_205;
              }
              if (*(_BYTE *)(v127 + 16) == 1)
              {
                v130 = swift_bridgeObjectRetain();
                v131 = specialized Sequence.compactMap<A>(_:)(v130);
                static AccessibilityAttachment.combine(_:)(v131, (uint64_t *)&v185);
                swift_bridgeObjectRelease();
                outlined consume of AccessibilityAttachment.Tree(v129, v128, 1);
                v128 = (void *)*((_QWORD *)&v185 + 1);
                v129 = v185;
                goto LABEL_201;
              }
            }
LABEL_205:
            v134 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
            swift_beginAccess();
            v135 = *(_QWORD *)v134;
            v136 = *(_QWORD *)(v135 + 16);
            if (v136)
            {
              swift_bridgeObjectRetain();
              v137 = (unsigned __int8 *)(v135 + 64);
              v138 = (unsigned __int8 *)(v135 + 64);
              while (1)
              {
                v140 = *v138;
                v138 += 40;
                v139 = v140;
                if (v140 != 255)
                {
                  *(_QWORD *)&v183 = *((_QWORD *)v137 - 1);
                  BYTE8(v183) = v139;
                  *(_QWORD *)&v182 = v13;
                  BYTE8(v182) = v14;
                  if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                    break;
                }
                v137 = v138;
                if (!--v136)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_214;
                }
              }
              swift_bridgeObjectRelease();
              v183 = v186;
              *(_QWORD *)&v182 = v13;
              BYTE8(v182) = v14;
              v141 = *((id *)&v186 + 1);
              swift_bridgeObjectRetain();
              v142 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v183, (uint64_t *)&v182, 0);

              swift_bridgeObjectRelease();
              if ((v142 & 1) != 0)
                goto LABEL_215;
              AccessibilityNode.platformElement.getter();
              if (v143)
              {

                goto LABEL_215;
              }
              v151 = (void *)MEMORY[0x18D760234]((char *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);

              if (v151)
                v144 = v42;
              else
                v144 = 1;
            }
            else
            {
LABEL_214:
              v183 = v186;
              *(_QWORD *)&v182 = v13;
              BYTE8(v182) = v14;
              v141 = *((id *)&v186 + 1);
              swift_bridgeObjectRetain();
              specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v183, (uint64_t *)&v182);

              swift_bridgeObjectRelease();
LABEL_215:
              v144 = 1;
            }
            AccessibilityNode.updateChildren(_:)(v24);
            swift_bridgeObjectRelease();
            type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v145 = swift_allocObject();
            *(_OWORD *)(v145 + 16) = xmmword_187BFF9C0;
            *(_QWORD *)(v145 + 32) = v2;
            *(_QWORD *)&v183 = v145;
            specialized Array._endMutation()();
            v146 = (void *)v183;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v24._rawValue = v146;
            if ((v144 & 1) != 0)
              goto LABEL_217;
LABEL_218:
            if (v158)
            {
              v148 = (void *)*((_QWORD *)v161 + 8);
              if (v148)
              {
                *(_QWORD *)(swift_allocObject() + 16) = v148;
                v149 = v148;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_221:
            OutputValue = AGGraphGetOutputValue();
            if (OutputValue)
              v147 = *(_QWORD *)(OutputValue + 8);
            else
              v147 = v157;
            goto LABEL_223;
          }
          v122 = v2;

          *((_QWORD *)v161 + 8) = v122;
LABEL_187:
          *(_QWORD *)&v185 = v160;
          *((_QWORD *)&v185 + 1) = v159;
          v123 = one-time initialization token for configuredForPlatform;
          swift_retain_n();
          swift_retain();
          if (v123 != -1)
            swift_once();
          v124 = static EnvironmentValues.configuredForPlatform;
          if (v160)
          {
            swift_release();
            if (!v124 || v160 != v124)
              EnvironmentValues._configureForPlatform(traitCollection:)(0);
          }
          else if (static EnvironmentValues.configuredForPlatform)
          {
            swift_retain();
            EnvironmentValues.plist.setter();
          }
          v125 = *((_QWORD *)&v185 + 1);
          v126 = (unsigned __int8 *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment;
          *(_QWORD *)v126 = v185;
          *((_QWORD *)v126 + 1) = v125;
          swift_retain();
          swift_retain();
          swift_release();
          swift_release();
          *((_BYTE *)v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
          swift_release();
          swift_release();
          v42 = 1;
          v41 = v161;
          goto LABEL_196;
        }
        swift_unknownObjectRelease();
      }
      v29 = 0;
      goto LABEL_47;
    }
  }
LABEL_36:
  v32 = v2;
  if (!*((_QWORD *)v2 + 8))
  {
    swift_bridgeObjectRelease();
    goto LABEL_98;
  }
  if ((unint64_t)v24._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v33)
      goto LABEL_39;
  }
  else
  {
    v33 = *(_QWORD *)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v33)
    {
LABEL_39:
      if (v33 < 1)
      {
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
        goto LABEL_175;
      }
      for (i = 0; i != v33; ++i)
      {
        if (((unint64_t)v24._rawValue & 0xC000000000000001) != 0)
          v35 = (id)MEMORY[0x18D75E3BC](i, v24._rawValue);
        else
          v35 = *((id *)v24._rawValue + i + 4);
        v36 = v35;
        swift_unknownObjectWeakAssign();

      }
    }
  }
  swift_bridgeObjectRelease();
  v32 = v2;

  *((_QWORD *)v2 + 8) = 0;
LABEL_98:
  if ((unint64_t)v24._rawValue >> 62)
    goto LABEL_167;
  v71 = *(_QWORD *)(((unint64_t)v24._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v71)
  {
    v173 = (unint64_t)v24._rawValue & 0xC000000000000001;
    v177 = v189;
    v72 = *((_DWORD *)v32 + 8);
    v169 = v188;
    swift_beginAccess();
    v73 = 0;
    v165 = (unint64_t)v24._rawValue & 0xFFFFFFFFFFFFFF8;
    v163 = (char *)v24._rawValue + 32;
    v156 = v158;
    v171 = v71;
    while (1)
    {
      if (v173)
      {
        v76 = (char *)MEMORY[0x18D75E3BC](v73, v24._rawValue);
        v77 = v73 + 1;
        if (__OFADD__(v73, 1))
          break;
        goto LABEL_109;
      }
      if (v73 >= *(_QWORD *)(v165 + 16))
        goto LABEL_166;
      v76 = (char *)*(id *)&v163[8 * v73];
      v77 = v73 + 1;
      if (__OFADD__(v73, 1))
        break;
LABEL_109:
      v178 = v76;
      v78 = *(_QWORD *)(v169 + 16);
      v79 = *(void **)(v169 + 24);
      *(_QWORD *)&v184 = v78;
      *((_QWORD *)&v184 + 1) = v79;
      if (v177)
      {
        *(_QWORD *)&v182 = v181;
        BYTE8(v182) = v14;
        v80 = v79;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        AccessibilityContainerModifier.updatedAttachment(for:nodes:atIndex:)((uint64_t *)&v182, (unint64_t)v24._rawValue);
        v81 = v183;
        *(_QWORD *)&v182 = v183;
        AccessibilityProperties.merge(with:)((uint64_t *)&v182);
        v79 = (void *)*((_QWORD *)&v184 + 1);
        v78 = v184;
        v182 = v184;
        v82 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v82 || (v182 = v81, !AccessibilityAttachment.platformElement.getter()))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();

        }
        else
        {
          AccessibilityAttachment.platformElement.setter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release_n();

          v79 = (void *)*((_QWORD *)&v184 + 1);
          v78 = v184;
        }
        LOBYTE(v14) = v180;
      }
      else
      {
        v83 = v79;
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)&v186 = v78;
      *((_QWORD *)&v186 + 1) = v79;
      if (v72 == (_DWORD)v12)
      {
        v84 = v181;
      }
      else
      {
        v85 = AGGraphGetValue();
        v87 = *(_QWORD *)v85;
        v86 = *(void **)(v85 + 8);
        if (!*(_BYTE *)(v85 + 16))
        {
          v91 = v86;
          swift_bridgeObjectRetain();
          v84 = v181;
LABEL_123:
          v90 = v178;
          *(_QWORD *)&v184 = v87;
          AccessibilityProperties.merge(with:)((uint64_t *)&v184);
          v184 = v186;
          v92 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v92)
          {
            *(_QWORD *)&v184 = v87;
            *((_QWORD *)&v184 + 1) = v86;
            if (AccessibilityAttachment.platformElement.getter())
              AccessibilityAttachment.platformElement.setter();
          }
          swift_bridgeObjectRelease();

          goto LABEL_127;
        }
        v84 = v181;
        if (*(_BYTE *)(v85 + 16) == 1)
        {
          v88 = swift_bridgeObjectRetain();
          v89 = specialized Sequence.compactMap<A>(_:)(v88);
          static AccessibilityAttachment.combine(_:)(v89, (uint64_t *)&v184);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v87, v86, 1);
          v86 = (void *)*((_QWORD *)&v184 + 1);
          v87 = v184;
          goto LABEL_123;
        }
      }
      v90 = v178;
LABEL_127:
      v93 = (char **)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      v94 = *v93;
      v95 = *((_QWORD *)*v93 + 2);
      if (v95)
      {
        swift_bridgeObjectRetain();
        v96 = (unsigned __int8 *)(v94 + 64);
        v97 = (unsigned __int8 *)(v94 + 64);
        do
        {
          v99 = *v97;
          v97 += 40;
          v98 = v99;
          if (v99 != 255)
          {
            *(_QWORD *)&v184 = *((_QWORD *)v96 - 1);
            BYTE8(v184) = v98;
            *(_QWORD *)&v183 = v84;
            BYTE8(v183) = v14;
            if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
            {
              v100 = 1;
              goto LABEL_134;
            }
          }
          v96 = v97;
          --v95;
        }
        while (v95);
        v100 = 0;
LABEL_134:
        swift_bridgeObjectRelease();
      }
      else
      {
        v100 = 0;
      }
      v73 = v77;
      v101 = v186;
      v184 = v186;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
      {
        if ((v100 & 1) == 0)
        {
          swift_bridgeObjectRelease();

          goto LABEL_102;
        }
LABEL_101:
        v184 = v101;
        *(_QWORD *)&v183 = v181;
        BYTE8(v183) = v180;
        v74 = *((id *)&v101 + 1);
        swift_bridgeObjectRetain();
        v75 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v184, (uint64_t *)&v183, 0);

        swift_bridgeObjectRelease_n();
        if ((v75 & 1) != 0)
        {
          v156 = 1;
          LOBYTE(v14) = v180;
          LODWORD(v12) = v174;
          if (v77 == v171)
            goto LABEL_164;
        }
        else
        {
LABEL_102:
          LODWORD(v12) = v174;
          LOBYTE(v14) = v180;
          if (v77 == v171)
          {
            swift_bridgeObjectRelease_n();
            if ((v156 & 1) != 0)
              goto LABEL_217;
            goto LABEL_218;
          }
        }
      }
      else
      {
        if ((v100 & 1) != 0)
          goto LABEL_101;
        AccessibilityNode.traits.getter((uint64_t *)&v184);
        if ((v184 & 0x80000) != 0)
          goto LABEL_151;
        v102 = *(_QWORD *)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
        if (v102)
        {
          v103 = *(_QWORD *)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
          swift_beginAccess();
          v104 = *(_QWORD *)(v102 + 32);
          if (*(_QWORD *)(v104 + 16)
            && (v105 = specialized __RawDictionaryStorage.find<A>(_:)(v103, 0), (v106 & 1) != 0))
          {
            v107 = *(_QWORD *)(*(_QWORD *)(v104 + 56) + 8 * v105);
            swift_endAccess();
            swift_retain();
            swift_bridgeObjectRetain();
            v108 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v107, v102, 1u);
            v90 = v178;
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_endAccess();
            swift_retain();
            v108 = MEMORY[0x1E0DEE9D8];
          }
          if (v108 >> 62)
          {
            swift_bridgeObjectRetain();
            v109 = _CocoaArrayWrapper.endIndex.getter();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v109 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_release();
          }
          swift_bridgeObjectRelease();
          if (v109)
          {
LABEL_151:
            *(_QWORD *)&v183 = v101;
            AccessibilityProperties.traits.getter();
            if ((BYTE2(v184) & 8) != 0 || (BYTE10(v184) & 8) == 0)
            {
              swift_bridgeObjectRelease();

              v24._rawValue = rawValue;
              goto LABEL_102;
            }
          }
        }
        v184 = v101;
        v110 = *((id *)&v101 + 1);
        swift_bridgeObjectRetain();
        AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v184);
        v111 = *v93;
        swift_bridgeObjectRetain_n();
        v112 = v110;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v93 = v111;
        v179 = v112;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v111 + 2) + 1, 1, v111);
          *v93 = v111;
        }
        v115 = *((_QWORD *)v111 + 2);
        v114 = *((_QWORD *)v111 + 3);
        if (v115 >= v114 >> 1)
        {
          v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v114 > 1), v115 + 1, 1, v111);
          *v93 = v111;
        }
        LODWORD(v12) = v174;
        *((_QWORD *)v111 + 2) = v115 + 1;
        v116 = &v111[40 * v115];
        *((_OWORD *)v116 + 2) = v101;
        *((_QWORD *)v116 + 6) = 0;
        *((_QWORD *)v116 + 7) = v181;
        LOBYTE(v14) = v180;
        v116[64] = v180;
        v117 = &v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        v118 = *(_QWORD *)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        v119 = *(void **)&v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        *(_QWORD *)v117 = 0;
        *((_QWORD *)v117 + 1) = 0;
        outlined consume of AccessibilityAttachment?(v118, v119);
        v156 = 1;
        v90[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

        swift_bridgeObjectRelease_n();
        v24._rawValue = rawValue;
        if (v77 == v171)
        {
LABEL_164:
          swift_bridgeObjectRelease_n();
          goto LABEL_217;
        }
      }
    }
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    swift_bridgeObjectRetain();
    v32 = v161;
    v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();
  if ((v158 & 1) == 0)
    goto LABEL_221;
LABEL_217:
  DisplayList.Version.init(forUpdate:)();
  v147 = v186;
LABEL_223:
  *(Swift::OpaquePointer *)&v186 = v24;
  *((_QWORD *)&v186 + 1) = v147;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char *v4;
  char **v5;
  char *v6;
  char *v7;
  int CurrentAttribute;
  int v9;
  char **v10;
  char v11;
  char v12;
  char *v13;
  __int128 *Value;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  void *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char v40;
  int v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  BOOL v46;
  uint64_t v47;
  Swift::UInt v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id v64;
  char *v65;
  char *v66;
  uint64_t OutputValue;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  int v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  int v78;
  char *v79;
  char *v80;
  char *v81;
  char v82;
  char *v83;
  char *v84;
  __int128 v85;
  char *v86;
  char *v87;
  uint64_t v88;

  v2 = v0;
  v88 = *MEMORY[0x1E0C80C00];
  v85 = *(_OWORD *)AGGraphGetValue();
  v3 = EnvironmentValues.accessibilityEnabled.getter();
  v4 = (char *)MEMORY[0x1E0CFED28];
  if ((v3 & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      Value = (__int128 *)AGGraphGetValue();
    }
    v19 = *((_QWORD *)Value + 1);
    *(_QWORD *)&v85 = *(_QWORD *)Value;
    *((_QWORD *)&v85 + 1) = v19;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v0 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v5 = (char **)AGGraphGetValue();
  v7 = *v5;
  v6 = v5[1];
  AGGraphGetValue();
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v9 = *(_DWORD *)v4;
  if (CurrentAttribute == *(_DWORD *)v4)
  {
    __break(1u);
    goto LABEL_28;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v79 = v6;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v4 = (char *)v85;
  v1 = BYTE8(v85);
  v74 = v0;
  v77 = v6;
  if (*(_DWORD *)(v0 + 36) == v9
    || (v10 = (char **)AGGraphGetValue(),
        v12 = v11,
        v13 = *v10,
        v70 = v10[1],
        swift_bridgeObjectRetain(),
        (v80 = v13) == 0))
  {
    v70 = 0;
    v80 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else if ((v12 & 1) != 0)
  {
    v72 = 1;
    goto LABEL_15;
  }
  v72 = 0;
LABEL_15:
  v6 = (char *)((unint64_t)v80 >> 62);
  v78 = v9;
  if (*(_QWORD *)(v2 + 64))
  {
    if (!v6)
    {
      v15 = *(_QWORD *)(((unint64_t)v80 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v15)
      {
LABEL_18:
        if (v15 < 1)
          __break(1u);
        for (i = 0; i != v15; ++i)
        {
          if (((unint64_t)v80 & 0xC000000000000001) != 0)
            v17 = (id)MEMORY[0x18D75E3BC](i, v80);
          else
            v17 = *(id *)&v80[8 * i + 32];
          v18 = v17;
          swift_unknownObjectWeakAssign();

        }
      }
LABEL_29:
      swift_bridgeObjectRelease();

      *(_QWORD *)(v74 + 64) = 0;
      v9 = v78;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15)
      goto LABEL_18;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v6)
  {
LABEL_89:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_32;
  }
  else
  {
    v21 = *(_QWORD *)(((unint64_t)v80 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
    {
LABEL_32:
      v22 = 0;
      v76 = v21;
      v23 = *(_DWORD *)(v74 + 32);
      v71 = v72;
      v75 = v23;
      v73 = v7;
      while (1)
      {
        if (((unint64_t)v80 & 0xC000000000000001) != 0)
        {
          v24 = (char *)MEMORY[0x18D75E3BC](v22, v80);
        }
        else
        {
          if (v22 >= *(_QWORD *)(((unint64_t)v80 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_88;
          v24 = (char *)*(id *)&v80[8 * v22 + 32];
        }
        v25 = v24;
        if (__OFADD__(v22++, 1))
        {
          __break(1u);
LABEL_88:
          __break(1u);
          goto LABEL_89;
        }
        v86 = v7;
        v87 = v77;
        if (v23 != v9)
        {
          v27 = AGGraphGetValue();
          v29 = *(char **)v27;
          v28 = *(void **)(v27 + 8);
          if (!*(_BYTE *)(v27 + 16))
          {
            swift_bridgeObjectRetain();
            v33 = v79;
            outlined copy of AccessibilityAttachment.Tree((uint64_t)v29, v28, 0);
LABEL_46:
            v83 = v29;
            AccessibilityProperties.merge(with:)((uint64_t *)&v83);
            v83 = v86;
            v84 = v87;
            v34 = (void *)AccessibilityAttachment.platformElement.getter();

            if (!v34)
            {
              v83 = v29;
              v84 = (char *)v28;
              if (AccessibilityAttachment.platformElement.getter())
                AccessibilityAttachment.platformElement.setter();
            }
            swift_bridgeObjectRelease();

            goto LABEL_50;
          }
          if (*(_BYTE *)(v27 + 16) == 1)
          {
            swift_bridgeObjectRetain();
            v30 = v79;
            outlined copy of AccessibilityAttachment.Tree((uint64_t)v29, v28, 1);
            v31 = specialized Sequence.compactMap<A>(_:)((uint64_t)v29);
            static AccessibilityAttachment.combine(_:)(v31, (uint64_t *)&v83);
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree((uint64_t)v29, v28, 1);
            v29 = v83;
            v28 = v84;
            goto LABEL_46;
          }
        }
        swift_bridgeObjectRetain();
        v32 = v79;
LABEL_50:
        v35 = (char **)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v36 = *v35;
        v37 = *((_QWORD *)*v35 + 2);
        if (v37)
        {
          swift_bridgeObjectRetain();
          v38 = (unsigned __int8 *)(v36 + 64);
          v39 = (unsigned __int8 *)(v36 + 64);
          while (1)
          {
            v41 = *v39;
            v39 += 40;
            v40 = v41;
            if (v41 != 255)
            {
              v83 = (char *)*((_QWORD *)v38 - 1);
              LOBYTE(v84) = v40;
              v81 = v4;
              v82 = v1;
              if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                break;
            }
            v38 = v39;
            if (!--v37)
              goto LABEL_56;
          }
          LOBYTE(v37) = 1;
LABEL_56:
          swift_bridgeObjectRelease();
        }
        v43 = v86;
        v42 = v87;
        v83 = v86;
        v84 = v87;
        if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
        {
          if ((v37 & 1) == 0)
            goto LABEL_33;
LABEL_61:
          v83 = v43;
          v84 = v42;
          v81 = v4;
          v82 = v1;
          v44 = v42;
          swift_bridgeObjectRetain();
          v45 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v83, (uint64_t *)&v81, 0);

          swift_bridgeObjectRelease_n();
          if ((v45 & 1) == 0)
            goto LABEL_34;
          v71 = 1;
          v46 = v22 == v76;
          v9 = v78;
LABEL_79:
          v23 = v75;
          if (v46)
          {
            v65 = v80;
            swift_bridgeObjectRelease_n();
            goto LABEL_91;
          }
        }
        else
        {
          if ((v37 & 1) != 0)
            goto LABEL_61;
          AccessibilityNode.traits.getter((uint64_t *)&v83);
          if ((v83 & 0x80000) == 0)
          {
            v47 = *(_QWORD *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
            if (!v47)
              goto LABEL_74;
            v48 = *(_QWORD *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
            swift_beginAccess();
            v49 = *(_QWORD *)(v47 + 32);
            if (*(_QWORD *)(v49 + 16) && (v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, 0), (v51 & 1) != 0))
            {
              v68 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v50);
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              v52 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v68, v47, 1u);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              v52 = MEMORY[0x1E0DEE9D8];
            }
            if (v52 >> 62)
            {
              swift_bridgeObjectRetain();
              v53 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            v7 = v73;
            if (!v53)
              goto LABEL_74;
          }
          v81 = v43;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v83) & 8) == 0 && (BYTE2(v84) & 8) != 0)
          {
LABEL_74:
            v83 = v43;
            v84 = v42;
            v54 = v42;
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v83);
            v55 = *v35;
            swift_bridgeObjectRetain_n();
            v69 = v54;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v35 = v55;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v55 + 2) + 1, 1, v55);
              *v35 = v55;
            }
            v58 = *((_QWORD *)v55 + 2);
            v57 = *((_QWORD *)v55 + 3);
            if (v58 >= v57 >> 1)
            {
              v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v55);
              *v35 = v55;
            }
            v9 = v78;
            *((_QWORD *)v55 + 2) = v58 + 1;
            v59 = &v55[40 * v58];
            *((_QWORD *)v59 + 4) = v43;
            *((_QWORD *)v59 + 5) = v42;
            *((_QWORD *)v59 + 6) = 0;
            *((_QWORD *)v59 + 7) = v4;
            v59[64] = v1;
            v60 = &v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            v61 = *(_QWORD *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            v62 = *(void **)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
            *(_QWORD *)v60 = 0;
            *((_QWORD *)v60 + 1) = 0;
            outlined consume of AccessibilityAttachment?(v61, v62);
            v71 = 1;
            v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

            swift_bridgeObjectRelease_n();
            v46 = v22 == v76;
            v7 = v73;
            goto LABEL_79;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          v9 = v78;
          v23 = v75;
          if (v22 == v76)
          {
            v65 = v80;
            swift_bridgeObjectRelease_n();
            if ((v71 & 1) != 0)
              goto LABEL_91;
            if (v72)
            {
              v63 = *(void **)(v74 + 64);
              if (v63)
              {
                *(_QWORD *)(swift_allocObject() + 16) = v63;
                v64 = v63;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_92:
            OutputValue = AGGraphGetOutputValue();
            v66 = v70;
            if (OutputValue)
              v66 = *(char **)(OutputValue + 8);
            goto LABEL_94;
          }
        }
      }
    }
  }
  v65 = v80;
  swift_bridgeObjectRelease_n();
  if ((v72 & 1) == 0)
    goto LABEL_92;
LABEL_91:
  DisplayList.Version.init(forUpdate:)();
  v66 = v83;
LABEL_94:
  v83 = v65;
  v84 = v66;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int *v6;
  int CurrentAttribute;
  int v8;
  unint64_t *v9;
  char v10;
  char v11;
  unint64_t v12;
  __int128 *Value;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  id v33;
  void *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char v40;
  int v41;
  char v42;
  char *v43;
  char *v44;
  char *v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  Swift::UInt v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  id v65;
  char *v66;
  uint64_t OutputValue;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  char *v84;
  char *v85;
  __int128 v86;
  char *v87;
  char *v88;
  uint64_t v89;

  v4 = v0;
  v89 = *MEMORY[0x1E0C80C00];
  v86 = *(_OWORD *)AGGraphGetValue();
  v5 = EnvironmentValues.accessibilityEnabled.getter();
  v6 = (int *)MEMORY[0x1E0CFED28];
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 36) == *MEMORY[0x1E0CFED28])
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      Value = (__int128 *)AGGraphGetValue();
    }
    v18 = *((_QWORD *)Value + 1);
    *(_QWORD *)&v86 = *(_QWORD *)Value;
    *((_QWORD *)&v86 + 1) = v18;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v4 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v4 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v4 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v74 = *(_DWORD *)AGGraphGetValue();
  AGGraphGetValue();
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v8 = *v6;
  if (CurrentAttribute == v8)
  {
    __break(1u);
    goto LABEL_28;
  }
  swift_retain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v3 = v86;
  v2 = BYTE8(v86);
  v73 = v4;
  v80 = v8;
  if (*(_DWORD *)(v4 + 36) == v8
    || (v9 = (unint64_t *)AGGraphGetValue(),
        v11 = v10,
        v12 = *v9,
        v70 = (char *)v9[1],
        swift_bridgeObjectRetain(),
        !v12))
  {
    v70 = 0;
    v12 = MEMORY[0x1E0DEE9D8];
  }
  else if ((v11 & 1) != 0)
  {
    v72 = 1;
    goto LABEL_15;
  }
  v72 = 0;
LABEL_15:
  v1 = v12 >> 62;
  v81 = v12;
  if (*(_QWORD *)(v4 + 64))
  {
    if (!v1)
    {
      v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v14)
      {
LABEL_18:
        if (v14 < 1)
          __break(1u);
        for (i = 0; i != v14; ++i)
        {
          if ((v81 & 0xC000000000000001) != 0)
            v16 = (id)MEMORY[0x18D75E3BC](i, v81);
          else
            v16 = *(id *)(v81 + 8 * i + 32);
          v17 = v16;
          swift_unknownObjectWeakAssign();

        }
      }
LABEL_29:
      v12 = v81;
      swift_bridgeObjectRelease();

      *(_QWORD *)(v73 + 64) = 0;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14)
      goto LABEL_18;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v1)
  {
LABEL_97:
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
      goto LABEL_32;
  }
  else
  {
    v20 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
    {
LABEL_32:
      v21 = 0;
      v78 = v20;
      v79 = v12 & 0xC000000000000001;
      v22 = *(_DWORD *)(v73 + 32);
      v76 = v12 & 0xFFFFFFFFFFFFFF8;
      v75 = v12 + 32;
      v71 = v72;
      v77 = v22;
      while (1)
      {
        if (v79)
        {
          v23 = MEMORY[0x18D75E3BC](v21, v12);
          if (__OFADD__(v21, 1))
          {
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          v24 = (char *)v23;
          swift_bridgeObjectRetain();
          v25 = (void *)MEMORY[0x18D75E3BC](v21++, v12);
        }
        else
        {
          if ((v21 & 0x8000000000000000) != 0)
            goto LABEL_95;
          if (v21 >= *(_QWORD *)(v76 + 16))
            goto LABEL_96;
          v26 = *(void **)(v75 + 8 * v21++);
          v27 = v26;
          swift_bridgeObjectRetain();
          v24 = (char *)v27;
          v25 = v24;
        }
        AccessibilityNode.visibility.getter((int *)&v84);

        if ((v84 & 4) != 0 || (v84 & 8) != 0 && (BYTE4(v84) & 4) == 0)
          AccessibilityAttachment.init()();
        else
          AccessibilityGestureModifier.initialAttachment(for:)(v12, v74);
        swift_bridgeObjectRelease();
        if (v22 == v80)
          goto LABEL_55;
        v28 = AGGraphGetValue();
        v30 = *(char **)v28;
        v29 = *(void **)(v28 + 8);
        if (!*(_BYTE *)(v28 + 16))
          break;
        if (*(_BYTE *)(v28 + 16) == 1)
        {
          v31 = swift_bridgeObjectRetain();
          v32 = specialized Sequence.compactMap<A>(_:)(v31);
          static AccessibilityAttachment.combine(_:)(v32, (uint64_t *)&v84);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree((uint64_t)v30, v29, 1);
          v30 = v84;
          v29 = v85;
          goto LABEL_51;
        }
LABEL_55:
        v35 = (char **)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v36 = *v35;
        v37 = *((_QWORD *)*v35 + 2);
        if (v37)
        {
          swift_bridgeObjectRetain();
          v38 = (unsigned __int8 *)(v36 + 64);
          v39 = (unsigned __int8 *)(v36 + 64);
          do
          {
            v41 = *v39;
            v39 += 40;
            v40 = v41;
            if (v41 != 255)
            {
              v84 = (char *)*((_QWORD *)v38 - 1);
              LOBYTE(v85) = v40;
              v82 = v3;
              v83 = v2;
              if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
              {
                v42 = 1;
                goto LABEL_62;
              }
            }
            v38 = v39;
            --v37;
          }
          while (v37);
          v42 = 0;
LABEL_62:
          swift_bridgeObjectRelease();
        }
        else
        {
          v42 = 0;
        }
        v43 = v87;
        v44 = v88;
        v84 = v87;
        v85 = v88;
        if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
        {
          if ((v42 & 1) == 0)
            goto LABEL_33;
LABEL_68:
          v84 = v43;
          v85 = v44;
          v82 = v3;
          v83 = v2;
          v45 = v44;
          swift_bridgeObjectRetain();
          v46 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v84, &v82, 0);

          swift_bridgeObjectRelease_n();
          if ((v46 & 1) == 0)
            goto LABEL_34;
          v71 = 1;
          v47 = v21 == v78;
          v12 = v81;
LABEL_86:
          v22 = v77;
          if (v47)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_99;
          }
        }
        else
        {
          if ((v42 & 1) != 0)
            goto LABEL_68;
          AccessibilityNode.traits.getter((uint64_t *)&v84);
          if ((v84 & 0x80000) == 0)
          {
            v48 = *(_QWORD *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
            if (!v48)
              goto LABEL_81;
            v49 = *(_QWORD *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
            swift_beginAccess();
            v50 = *(_QWORD *)(v48 + 32);
            if (*(_QWORD *)(v50 + 16) && (v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, 0), (v52 & 1) != 0))
            {
              v68 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v51);
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              v53 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v68, v48, 1u);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              v53 = MEMORY[0x1E0DEE9D8];
            }
            if (v53 >> 62)
            {
              swift_bridgeObjectRetain();
              v54 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            if (!v54)
              goto LABEL_81;
          }
          v82 = (uint64_t)v43;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v84) & 8) == 0 && (BYTE2(v85) & 8) != 0)
          {
LABEL_81:
            v84 = v43;
            v85 = v44;
            v55 = v44;
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v84);
            v56 = *v35;
            swift_bridgeObjectRetain_n();
            v69 = v55;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *v35 = v56;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v56 + 2) + 1, 1, v56);
              *v35 = v56;
            }
            v59 = *((_QWORD *)v56 + 2);
            v58 = *((_QWORD *)v56 + 3);
            if (v59 >= v58 >> 1)
            {
              v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v56);
              *v35 = v56;
            }
            v12 = v81;
            *((_QWORD *)v56 + 2) = v59 + 1;
            v60 = &v56[40 * v59];
            *((_QWORD *)v60 + 4) = v43;
            *((_QWORD *)v60 + 5) = v44;
            *((_QWORD *)v60 + 6) = 0;
            *((_QWORD *)v60 + 7) = v3;
            v60[64] = v2;
            v61 = &v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            v62 = *(_QWORD *)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            v63 = *(void **)&v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
            *(_QWORD *)v61 = 0;
            *((_QWORD *)v61 + 1) = 0;
            outlined consume of AccessibilityAttachment?(v62, v63);
            v71 = 1;
            v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

            swift_bridgeObjectRelease_n();
            v47 = v21 == v78;
            goto LABEL_86;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          v12 = v81;
          v22 = v77;
          if (v21 == v78)
          {
            swift_bridgeObjectRelease_n();
            if ((v71 & 1) != 0)
              goto LABEL_99;
            if (v72)
            {
              v64 = *(void **)(v73 + 64);
              if (v64)
              {
                *(_QWORD *)(swift_allocObject() + 16) = v64;
                v65 = v64;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_100:
            OutputValue = AGGraphGetOutputValue();
            v66 = v70;
            if (OutputValue)
              v66 = *(char **)(OutputValue + 8);
            goto LABEL_102;
          }
        }
      }
      v33 = v29;
      swift_bridgeObjectRetain();
LABEL_51:
      v84 = v30;
      AccessibilityProperties.merge(with:)((uint64_t *)&v84);
      v84 = v87;
      v85 = v88;
      v34 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v34)
      {
        v84 = v30;
        v85 = (char *)v29;
        if (AccessibilityAttachment.platformElement.getter())
          AccessibilityAttachment.platformElement.setter();
      }
      swift_bridgeObjectRelease();

      goto LABEL_55;
    }
  }
  swift_bridgeObjectRelease_n();
  if ((v72 & 1) == 0)
    goto LABEL_100;
LABEL_99:
  DisplayList.Version.init(forUpdate:)();
  v66 = v84;
LABEL_102:
  v84 = (char *)v12;
  v85 = v66;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease_n();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  id *v3;
  uint64_t v4;
  char v5;
  int *v6;
  double v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int CurrentAttribute;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 *Value;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  id *v26;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  double v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  void *v44;
  char **v45;
  char *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  char v50;
  int v51;
  __int128 v52;
  id v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  Swift::UInt v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t OutputValue;
  uint64_t v79;
  id v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  id *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;

  v4 = v0;
  v102 = *MEMORY[0x1E0C80C00];
  v98 = *(_OWORD *)AGGraphGetValue();
  v5 = EnvironmentValues.accessibilityEnabled.getter();
  v6 = (int *)MEMORY[0x1E0CFED28];
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v4 + 36) == *MEMORY[0x1E0CFED28])
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      Value = (__int128 *)AGGraphGetValue();
    }
    v22 = *((_QWORD *)Value + 1);
    *(_QWORD *)&v98 = *(_QWORD *)Value;
    *((_QWORD *)&v98 + 1) = v22;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v4 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v4 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v4 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v7 = *(double *)AGGraphGetValue();
  v8 = (uint64_t *)AGGraphGetValue();
  v9 = *v8;
  v10 = v8[1];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v12 = *v6;
  if (CurrentAttribute == v12)
  {
    __break(1u);
    goto LABEL_28;
  }
  v83 = v10;
  swift_retain();
  v84 = v9;
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v1 = v98;
  v2 = BYTE8(v98);
  v13 = *(_DWORD *)(v4 + 36);
  v92 = v12;
  if (v13 == v12
    || (v14 = AGGraphGetValue(), v16 = v15,
                                 v3 = *(id **)v14,
                                 v81 = *(_QWORD *)(v14 + 8),
                                 swift_bridgeObjectRetain(),
                                 !v3))
  {
    v81 = 0;
    v3 = (id *)MEMORY[0x1E0DEE9D8];
  }
  else if ((v16 & 1) != 0)
  {
    v85 = 1;
    goto LABEL_15;
  }
  v85 = 0;
LABEL_15:
  v10 = (unint64_t)v3 >> 62;
  if (*(_QWORD *)(v4 + 64))
  {
    if (!v10)
    {
      v18 = *(_QWORD *)(((unint64_t)v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v18)
      {
LABEL_18:
        if (v18 < 1)
          __break(1u);
        for (i = 0; i != v18; ++i)
        {
          if (((unint64_t)v3 & 0xC000000000000001) != 0)
            v20 = (id)MEMORY[0x18D75E3BC](i, v3);
          else
            v20 = v3[i + 4];
          v21 = v20;
          swift_unknownObjectWeakAssign();

        }
      }
LABEL_29:
      swift_bridgeObjectRelease();

      *(_QWORD *)(v4 + 64) = 0;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18)
      goto LABEL_18;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v10)
  {
LABEL_91:
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24)
      goto LABEL_32;
  }
  else
  {
    v24 = *(_QWORD *)(((unint64_t)v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v24)
    {
LABEL_32:
      v25 = 0;
      v89 = 0;
      v91 = (unint64_t)v3 & 0xC000000000000001;
      v88 = (unint64_t)v3 & 0xFFFFFFFFFFFFFF8;
      v87 = (char *)(v3 + 4);
      v82 = v85;
      v93 = v3;
      v90 = v24;
      v86 = v4;
      while (1)
      {
        if (v91)
        {
          v26 = (id *)MEMORY[0x18D75E3BC](v25, v3);
        }
        else
        {
          if (v25 >= *(_QWORD *)(v88 + 16))
            goto LABEL_90;
          v26 = (id *)*(id *)&v87[8 * v25];
        }
        v3 = v26;
        if (__OFADD__(v25++, 1))
        {
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
        if (v7 >= 0.001)
        {
          AccessibilityAttachment.init()();
        }
        else
        {
          type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
          swift_bridgeObjectRetain();
          v28 = Dictionary.init(minimumCapacity:)();
          type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
          v99 = v29;
          v100 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, MEMORY[0x1E0CE6310]);
          *(_QWORD *)&v98 = 8;
          outlined init with take of OptionalBinaryInteger(&v98, (uint64_t)&v95);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v94 = v28;
          v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v95, v97);
          v32 = MEMORY[0x1E0C80A78](v31, v31);
          v34 = (unint64_t *)((char *)&v79 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(unint64_t *, double))(v35 + 16))(v34, v32);
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(*v34, MEMORY[0x1E0CE5728], isUniquelyReferenced_nonNull_native, &v94);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v95);
          v36 = v94;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v98 = v36;
          static AccessibilityAttachment.properties(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(_DWORD *)(v4 + 32) == v92)
          goto LABEL_52;
        v37 = AGGraphGetValue();
        v39 = *(_QWORD *)v37;
        v38 = *(void **)(v37 + 8);
        if (!*(_BYTE *)(v37 + 16))
          break;
        if (*(_BYTE *)(v37 + 16) == 1)
        {
          v40 = swift_bridgeObjectRetain();
          v41 = v89;
          v42 = specialized Sequence.compactMap<A>(_:)(v40);
          v89 = v41;
          static AccessibilityAttachment.combine(_:)(v42, (uint64_t *)&v98);
          swift_bridgeObjectRelease();
          outlined consume of AccessibilityAttachment.Tree(v39, v38, 1);
          v38 = (void *)*((_QWORD *)&v98 + 1);
          v39 = v98;
          goto LABEL_48;
        }
LABEL_52:
        v45 = (char **)((char *)v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
        swift_beginAccess();
        v46 = *v45;
        v47 = *((_QWORD *)*v45 + 2);
        if (v47)
        {
          swift_bridgeObjectRetain();
          v48 = (unsigned __int8 *)(v46 + 64);
          v49 = (unsigned __int8 *)(v46 + 64);
          while (1)
          {
            v51 = *v49;
            v49 += 40;
            v50 = v51;
            if (v51 != 255)
            {
              *(_QWORD *)&v98 = *((_QWORD *)v48 - 1);
              BYTE8(v98) = v50;
              v95 = v1;
              v96 = v2;
              if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                break;
            }
            v48 = v49;
            if (!--v47)
              goto LABEL_58;
          }
          LOBYTE(v47) = 1;
LABEL_58:
          swift_bridgeObjectRelease();
        }
        v52 = v101;
        v98 = v101;
        if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
        {
          if ((v47 & 1) == 0)
            goto LABEL_33;
LABEL_63:
          v98 = v52;
          v95 = v1;
          v96 = v2;
          v53 = *((id *)&v52 + 1);
          swift_bridgeObjectRetain();
          v54 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v98, &v95, 0);

          swift_bridgeObjectRelease_n();
          if ((v54 & 1) == 0)
            goto LABEL_34;
          v82 = 1;
          v55 = v25 == v90;
LABEL_81:
          v3 = v93;
          if (v55)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_93;
          }
        }
        else
        {
          if ((v47 & 1) != 0)
            goto LABEL_63;
          AccessibilityNode.traits.getter((uint64_t *)&v98);
          if ((v98 & 0x80000) == 0)
          {
            v56 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope);
            if (!v56)
              goto LABEL_76;
            v57 = *(Swift::UInt *)((char *)v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id);
            swift_beginAccess();
            v58 = *(_QWORD *)(v56 + 32);
            if (*(_QWORD *)(v58 + 16) && (v59 = specialized __RawDictionaryStorage.find<A>(_:)(v57, 0), (v60 & 1) != 0))
            {
              v61 = *(void **)(*(_QWORD *)(v58 + 56) + 8 * v59);
              v80 = v61;
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              v62 = v89;
              v63 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], (uint64_t)v61, v56, 1u);
              v89 = v62;
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              v63 = MEMORY[0x1E0DEE9D8];
            }
            if (v63 >> 62)
            {
              swift_bridgeObjectRetain();
              v64 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            v4 = v86;
            if (!v64)
              goto LABEL_76;
          }
          v95 = v52;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v98) & 8) == 0 && (BYTE10(v98) & 8) != 0)
          {
LABEL_76:
            v98 = v52;
            v65 = *((id *)&v52 + 1);
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v98);
            v66 = *v45;
            swift_bridgeObjectRetain_n();
            v80 = v65;
            v67 = swift_isUniquelyReferenced_nonNull_native();
            *v45 = v66;
            if ((v67 & 1) == 0)
            {
              v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v66 + 2) + 1, 1, v66);
              *v45 = v66;
            }
            v69 = *((_QWORD *)v66 + 2);
            v68 = *((_QWORD *)v66 + 3);
            if (v69 >= v68 >> 1)
            {
              v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v66);
              *v45 = v66;
            }
            *((_QWORD *)v66 + 2) = v69 + 1;
            v70 = &v66[40 * v69];
            *((_OWORD *)v70 + 2) = v52;
            *((_QWORD *)v70 + 6) = 0;
            *((_QWORD *)v70 + 7) = v1;
            v70[64] = v2;
            v71 = (id *)((char *)v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
            v72 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
            v73 = *(id *)((char *)v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
            *v71 = 0;
            v71[1] = 0;
            outlined consume of AccessibilityAttachment?(v72, v73);
            v82 = 1;
            *((_BYTE *)v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;

            v74 = v80;
            swift_bridgeObjectRelease_n();
            v55 = v25 == v90;
            v4 = v86;
            goto LABEL_81;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          v3 = v93;
          if (v25 == v90)
          {
            swift_bridgeObjectRelease_n();
            if ((v82 & 1) != 0)
              goto LABEL_93;
            if (v85)
            {
              v75 = *(void **)(v4 + 64);
              if (v75)
              {
                *(_QWORD *)(swift_allocObject() + 16) = v75;
                v76 = v75;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_94:
            OutputValue = AGGraphGetOutputValue();
            v77 = v81;
            if (OutputValue)
              v77 = *(_QWORD *)(OutputValue + 8);
            goto LABEL_96;
          }
        }
      }
      v43 = v38;
      swift_bridgeObjectRetain();
LABEL_48:
      *(_QWORD *)&v98 = v39;
      AccessibilityProperties.merge(with:)((uint64_t *)&v98);
      v98 = v101;
      v44 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v44)
      {
        *(_QWORD *)&v98 = v39;
        *((_QWORD *)&v98 + 1) = v38;
        if (AccessibilityAttachment.platformElement.getter())
          AccessibilityAttachment.platformElement.setter();
      }
      swift_bridgeObjectRelease();

      goto LABEL_52;
    }
  }
  swift_bridgeObjectRelease_n();
  if ((v85 & 1) == 0)
    goto LABEL_94;
LABEL_93:
  DisplayList.Version.init(forUpdate:)();
  v77 = v98;
LABEL_96:
  *(_QWORD *)&v98 = v3;
  *((_QWORD *)&v98 + 1) = v77;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease_n();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char v3;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int CurrentAttribute;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 *Value;
  uint64_t v17;
  uint64_t result;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *rawValue;
  uint64_t v31;
  uint64_t i;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  BOOL v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char v49;
  int v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  void **v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void (*v71)(__int128 *__return_ptr, void *);
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  id v77;
  void *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  char v84;
  int v85;
  id v86;
  char v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  id v94;
  uint64_t v95;
  char *v96;
  char *v97;
  void (*v98)(uint64_t *__return_ptr, __int128 *, uint64_t);
  char *v99;
  char v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  id v106;
  void *v107;
  char **v108;
  char *v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  char v113;
  int v114;
  char v115;
  __int128 v116;
  id v117;
  char v118;
  void *v119;
  uint64_t v120;
  Swift::UInt v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  char *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  id v134;
  char *v135;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  void *v144;
  char *v145;
  id v146;
  char *v147;
  uint64_t v148;
  void *v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t OutputValue;
  _BYTE *v154;
  uint64_t v155;
  id v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  char v166;
  id *v167;
  uint64_t v168;
  void *v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  Swift::OpaquePointer v175;
  unsigned int v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  char v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;

  v2 = v0;
  v184 = *MEMORY[0x1E0C80C00];
  v182 = *(_OWORD *)AGGraphGetValue();
  v3 = EnvironmentValues.accessibilityEnabled.getter();
  v4 = (int *)MEMORY[0x1E0CFED28];
  if ((v3 & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 36) != *MEMORY[0x1E0CFED28])
    {
      Value = (__int128 *)AGGraphGetValue();
      goto LABEL_11;
    }
    if (one-time initialization token for defaultValue == -1)
    {
LABEL_9:
      Value = &static AccessibilityNodesKey.defaultValue;
LABEL_11:
      v17 = *((_QWORD *)Value + 1);
      *(_QWORD *)&v182 = *(_QWORD *)Value;
      *((_QWORD *)&v182 + 1) = v17;
      return AGGraphSetOutputValue();
    }
LABEL_135:
    swift_once();
    goto LABEL_9;
  }
  if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v0 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v5 = *(_QWORD *)AGGraphGetValue();
  v6 = (uint64_t *)AGGraphGetValue();
  v8 = v7;
  v9 = *v6;
  v10 = v6[1];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v12 = *v4;
  if (CurrentAttribute == v12)
  {
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v177 = v182;
  v176 = BYTE8(v182);
  v172 = v12;
  if (*(_DWORD *)(v0 + 36) == v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(AGGraphGetValue() + 8);
    v15 = v19 & 1;
    v13 = swift_bridgeObjectRetain();
  }
  if (v13)
    v20 = v15;
  else
    v20 = 0;
  v160 = v20;
  if (v13)
    v21 = v14;
  else
    v21 = 0;
  v159 = v21;
  if (v13)
    v22 = v13;
  else
    v22 = MEMORY[0x1E0DEE9D8];
  v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80);
  swift_bridgeObjectRetain_n();
  swift_retain();
  v24 = v23(v22);
  swift_release();
  v161 = v10;
  v162 = v9;
  v168 = v2;
  v175._rawValue = (void *)v22;
  if ((v24 & 1) != 0)
  {
    type metadata accessor for ViewGraph();
    v25 = MEMORY[0x18D75C5F8]() + 200;
    swift_beginAccess();
    v26 = MEMORY[0x18D760234](v25);
    swift_release();
    if (v26)
    {
      swift_getObjectType();
      v27 = swift_conformsToProtocol2();
      if (v27)
        v28 = v27;
      else
        v28 = 0;
      if (v27)
        v29 = v26;
      else
        v29 = 0;
      if (v29)
      {
LABEL_42:
        v166 = v8;
        v35 = *(_QWORD *)(v2 + 64);
        if (v35)
        {
          v36 = *(void **)(v2 + 64);
          v1 = (unint64_t)v36;
        }
        else
        {
          objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
          v37 = swift_unknownObjectRetain();
          v1 = (unint64_t)specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v37, v28, 0);
          swift_unknownObjectRelease();
          v36 = 0;
        }
        v22 = v36;
        swift_unknownObjectRelease();
        if (v35 && v1 == v22)
        {
          swift_bridgeObjectRelease();
          if ((v8 & 1) != 0)
            goto LABEL_96;
          v38 = 0;
          goto LABEL_105;
        }
        v164 = (void *)v22;
        if (AGGraphGetOutputValue())
        {
          if (!v35)
          {
            rawValue = (char *)v175._rawValue;
            if ((unint64_t)v175._rawValue >> 62)
              goto LABEL_237;
            v40 = *(_QWORD *)(((unint64_t)v175._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v40)
              goto LABEL_87;
LABEL_58:
            v41 = 0;
            v170 = v1;
            v163 = v5;
            v155 = v40;
            while (1)
            {
              if (((unint64_t)v175._rawValue & 0xC000000000000001) != 0)
              {
                v42 = (char *)MEMORY[0x18D75E3BC](v41, v175._rawValue);
                v9 = v176;
                v43 = __OFADD__(v41++, 1);
                if (v43)
                  goto LABEL_133;
              }
              else
              {
                v9 = v176;
                if (v41 >= *(_QWORD *)(((unint64_t)v175._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_137:
                  swift_bridgeObjectRetain();
                  v31 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v31)
                    goto LABEL_138;
LABEL_35:
                  if (v31 >= 1)
                  {
                    for (i = 0; i != v31; ++i)
                    {
                      if ((v10 & 0xC000000000000001) != 0)
                        v33 = (id)MEMORY[0x18D75E3BC](i, v10);
                      else
                        v33 = *(id *)(v10 + 8 * i + 32);
                      v34 = v33;
                      swift_unknownObjectWeakAssign();

                    }
                    goto LABEL_138;
                  }
                  __break(1u);
LABEL_236:
                  __break(1u);
LABEL_237:
                  swift_bridgeObjectRetain();
                  v40 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v40)
                    goto LABEL_87;
                  goto LABEL_58;
                }
                v42 = (char *)*((id *)v175._rawValue + v41 + 4);
                v43 = __OFADD__(v41++, 1);
                if (v43)
                {
LABEL_133:
                  __break(1u);
                  goto LABEL_134;
                }
              }
              v44 = &v42[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
              swift_beginAccess();
              v1 = *(_QWORD *)v44;
              rawValue = *(char **)(*(_QWORD *)v44 + 16);
              if (rawValue)
              {
                v173 = v41;
                swift_bridgeObjectRetain();
                v45 = 0;
                v46 = (char *)(v1 + 64);
                v47 = 40;
                v48 = (char *)(v1 + 64);
                while (1)
                {
                  v50 = *v48;
                  v48 += 40;
                  v49 = v50;
                  if (v50 != 255)
                  {
                    *(_QWORD *)&v181 = *((_QWORD *)v46 - 1);
                    BYTE8(v181) = v49;
                    *(_QWORD *)&v178 = v177;
                    BYTE8(v178) = v9;
                    if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                      break;
                  }
                  ++v45;
                  v47 += 40;
                  v46 = v48;
                  if (rawValue == (char *)v45)
                  {

                    swift_bridgeObjectRelease();
                    v10 = v161;
                    v9 = v162;
                    v1 = v170;
                    goto LABEL_86;
                  }
                }
                v154 = v42;
                swift_bridgeObjectRelease();
                v157 = *(_QWORD *)v44;
                rawValue = *(char **)(*(_QWORD *)v44 + 16);
                if ((unint64_t)rawValue < v45)
                  goto LABEL_232;
                swift_beginAccess();
                v51 = *(_QWORD *)(*(_QWORD *)v44 + 16);
                v10 = v161;
                v9 = v162;
                v1 = v170;
                if (v51 < v45)
                  goto LABEL_233;
                swift_bridgeObjectRetain();
                specialized Array.replaceSubrange<A>(_:with:)(v45, v51);
                swift_endAccess();
                v52 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                v22 = (uint64_t)&rawValue[-v45];
                if (rawValue != (char *)v45)
                {
                  *(_QWORD *)&v181 = MEMORY[0x1E0DEE9D8];
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22 & ~(v22 >> 63), 0);
                  if (v22 < 0)
                    goto LABEL_236;
                  v52 = (_QWORD *)v181;
                  if ((unint64_t)rawValue <= v45)
                    v53 = (char *)v45;
                  else
                    v53 = rawValue;
                  v54 = (void **)(v157 + v47);
                  while ((char *)v45 != v53)
                  {
                    v55 = (uint64_t)*(v54 - 1);
                    v56 = *v54;
                    *(_QWORD *)&v181 = v52;
                    v57 = v52[2];
                    v58 = v52[3];
                    swift_bridgeObjectRetain();
                    v59 = v56;
                    if (v57 >= v58 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v57 + 1, 1);
                      v52 = (_QWORD *)v181;
                    }
                    v52[2] = v57 + 1;
                    v60 = &v52[2 * v57];
                    v60[4] = v55;
                    v60[5] = v56;
                    --v53;
                    --rawValue;
                    v54 += 5;
                    v5 = v163;
                    v2 = v168;
                    if ((char *)v45 == rawValue)
                    {
                      v10 = v161;
                      v9 = v162;
                      v1 = v170;
                      goto LABEL_85;
                    }
                  }
                  __break(1u);
                  goto LABEL_133;
                }
LABEL_85:
                static AccessibilityAttachment.combine(_:)(v52, (uint64_t *)&v181);
                swift_bridgeObjectRelease();
                rawValue = (char *)*((_QWORD *)&v181 + 1);
                v178 = v181;
                v183 = 0uLL;
                AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)((uint64_t *)&v178, &v183);
                swift_bridgeObjectRelease();

                v61 = &v154[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                v62 = *(_QWORD *)&v154[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                v63 = *(void **)&v154[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                *v61 = 0;
                v61[1] = 0;
                outlined consume of AccessibilityAttachment?(v62, v63);
                v154[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

                swift_bridgeObjectRelease();
LABEL_86:
                v22 = (uint64_t)v164;
                v40 = v155;
                v41 = v173;
                if (v173 != v155)
                  continue;
LABEL_87:
                swift_bridgeObjectRelease();
LABEL_88:
                if ((v166 & 1) == 0)
                {
                  *(_QWORD *)&v181 = v9;
                  *((_QWORD *)&v181 + 1) = v10;
                  v64 = one-time initialization token for configuredForPlatform;
                  swift_retain_n();
                  swift_retain();
                  if (v64 != -1)
                    swift_once();
                  v65 = static EnvironmentValues.configuredForPlatform;
                  if (v9)
                  {
                    swift_release();
                    if (!v65 || v9 != v65)
                      EnvironmentValues._configureForPlatform(traitCollection:)(0);
                  }
                  else if (static EnvironmentValues.configuredForPlatform)
                  {
                    swift_retain();
                    EnvironmentValues.plist.setter();
                  }
                  v92 = *((_QWORD *)&v181 + 1);
                  v93 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
                  *v93 = v181;
                  v93[1] = v92;
                  swift_retain();
                  swift_retain();
                  swift_release();
                  swift_release();
                  *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
                  swift_release();
                  swift_release();
                  v94 = (id)v1;

                  *(_QWORD *)(v2 + 64) = v94;
                  goto LABEL_104;
                }
                v66 = (id)v1;

                *(_QWORD *)(v2 + 64) = v66;
LABEL_96:
                *(_QWORD *)&v181 = v9;
                *((_QWORD *)&v181 + 1) = v10;
                v67 = one-time initialization token for configuredForPlatform;
                swift_retain_n();
                swift_retain();
                if (v67 != -1)
LABEL_234:
                  swift_once();
                v68 = static EnvironmentValues.configuredForPlatform;
                if (v9)
                {
                  swift_release();
                  if (!v68 || v9 != v68)
                    EnvironmentValues._configureForPlatform(traitCollection:)(0);
                }
                else if (static EnvironmentValues.configuredForPlatform)
                {
                  swift_retain();
                  EnvironmentValues.plist.setter();
                }
                v69 = *((_QWORD *)&v181 + 1);
                v70 = (_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
                *v70 = v181;
                v70[1] = v69;
                swift_retain();
                swift_retain();
                swift_release();
                swift_release();
                *(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
                swift_release();
                swift_release();
LABEL_104:
                v38 = 1;
LABEL_105:
                v71 = *(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v5 + 88);
                swift_retain();
                v71(&v178, v175._rawValue);
                swift_bridgeObjectRelease();
                swift_release();
                if (*(_DWORD *)(v2 + 32) != v172)
                {
                  v72 = AGGraphGetValue();
                  v74 = *(_QWORD *)v72;
                  v73 = *(void **)(v72 + 8);
                  if (!*(_BYTE *)(v72 + 16))
                  {
                    v77 = v73;
                    swift_bridgeObjectRetain();
                    goto LABEL_110;
                  }
                  if (*(_BYTE *)(v72 + 16) == 1)
                  {
                    v75 = swift_bridgeObjectRetain();
                    v76 = specialized Sequence.compactMap<A>(_:)(v75);
                    static AccessibilityAttachment.combine(_:)(v76, (uint64_t *)&v181);
                    swift_bridgeObjectRelease();
                    outlined consume of AccessibilityAttachment.Tree(v74, v73, 1);
                    v73 = (void *)*((_QWORD *)&v181 + 1);
                    v74 = v181;
LABEL_110:
                    *(_QWORD *)&v181 = v74;
                    AccessibilityProperties.merge(with:)((uint64_t *)&v181);
                    v181 = v178;
                    v78 = (void *)AccessibilityAttachment.platformElement.getter();

                    if (!v78)
                    {
                      *(_QWORD *)&v181 = v74;
                      *((_QWORD *)&v181 + 1) = v73;
                      if (AccessibilityAttachment.platformElement.getter())
                        AccessibilityAttachment.platformElement.setter();
                    }
                    swift_bridgeObjectRelease();

                  }
                }
                v79 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
                swift_beginAccess();
                v80 = *v79;
                v81 = *(_QWORD *)(v80 + 16);
                if (v81)
                {
                  swift_bridgeObjectRetain();
                  v82 = (unsigned __int8 *)(v80 + 64);
                  v83 = (unsigned __int8 *)(v80 + 64);
                  while (1)
                  {
                    v85 = *v83;
                    v83 += 40;
                    v84 = v85;
                    if (v85 != 255)
                    {
                      *(_QWORD *)&v183 = *((_QWORD *)v82 - 1);
                      BYTE8(v183) = v84;
                      v179 = v177;
                      v180 = v176;
                      if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                        break;
                    }
                    v82 = v83;
                    if (!--v81)
                    {
                      swift_bridgeObjectRelease();
                      goto LABEL_123;
                    }
                  }
                  swift_bridgeObjectRelease();
                  v183 = v178;
                  v179 = v177;
                  v180 = v176;
                  v86 = *((id *)&v178 + 1);
                  swift_bridgeObjectRetain();
                  v87 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v183, &v179, 0);

                  swift_bridgeObjectRelease();
                  if ((v87 & 1) != 0)
                    goto LABEL_124;
                  AccessibilityNode.platformElement.getter();
                  if (v88)
                  {

                    goto LABEL_124;
                  }
                  v91 = (void *)MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);

                  if (!v91)
                    v38 = 1;
                }
                else
                {
LABEL_123:
                  v183 = v178;
                  v179 = v177;
                  v180 = v176;
                  v86 = *((id *)&v178 + 1);
                  swift_bridgeObjectRetain();
                  specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)((uint64_t *)&v183, &v179);

                  swift_bridgeObjectRelease();
LABEL_124:
                  v38 = 1;
                }
                AccessibilityNode.updateChildren(_:)(v175);
                swift_bridgeObjectRelease();
                type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                v89 = swift_allocObject();
                *(_OWORD *)(v89 + 16) = xmmword_187BFF9C0;
                *(_QWORD *)(v89 + 32) = v1;
                *(_QWORD *)&v183 = v89;
                specialized Array._endMutation()();
                v90 = (void *)v183;

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v175._rawValue = v90;
                if ((v38 & 1) != 0)
                {
LABEL_226:
                  DisplayList.Version.init(forUpdate:)();
                  v152 = v183;
LABEL_230:
                  *(Swift::OpaquePointer *)&v183 = v175;
                  *((_QWORD *)&v183 + 1) = v152;
                  swift_bridgeObjectRetain();
                  AGGraphSetOutputValue();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  return swift_release();
                }
LABEL_215:
                if (v160)
                {
                  v149 = *(void **)(v2 + 64);
                  if (v149)
                  {
                    *(_QWORD *)(swift_allocObject() + 16) = v149;
                    v150 = v149;
                    static Update.enqueueAction(_:)();

                    swift_release();
                  }
                }
LABEL_227:
                OutputValue = AGGraphGetOutputValue();
                if (OutputValue)
                  v152 = *(_QWORD *)(OutputValue + 8);
                else
                  v152 = v159;
                goto LABEL_230;
              }

              v10 = v161;
              v9 = v162;
              v1 = v170;
              if (v41 == v40)
                goto LABEL_87;
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          if (!v35)
            goto LABEL_88;
        }
        v39 = (id)v1;

        *(_QWORD *)(v2 + 64) = v39;
        if ((v8 & 1) == 0)
          goto LABEL_104;
        goto LABEL_96;
      }
      swift_unknownObjectRelease();
    }
    v28 = 0;
    goto LABEL_42;
  }
  rawValue = (char *)((unint64_t)v22 >> 62);
  v10 = v22;
  if (*(_QWORD *)(v2 + 64))
  {
    if (rawValue)
      goto LABEL_137;
    v31 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v31)
      goto LABEL_35;
LABEL_138:
    swift_bridgeObjectRelease();

    *(_QWORD *)(v2 + 64) = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v95 = v10 & 0xFFFFFFFFFFFFFF8;
  if (rawValue)
  {
LABEL_223:
    swift_bridgeObjectRetain();
    v151 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v169 = (void *)v151;
    if (v151)
    {
      swift_bridgeObjectRetain();
      v171 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_141;
    }
LABEL_225:
    swift_bridgeObjectRelease_n();
    if ((v160 & 1) != 0)
      goto LABEL_226;
    goto LABEL_227;
  }
  v169 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v171 = (uint64_t)v169;
  if (!v169)
    goto LABEL_225;
LABEL_141:
  v165 = v95;
  v1 = 0;
  v95 = 0;
  v174 = v10 & 0xC000000000000001;
  v167 = (id *)(v10 + 32);
  v158 = v160;
  while (1)
  {
    if (v174)
    {
      v96 = (char *)MEMORY[0x18D75E3BC](v1, v10);
    }
    else
    {
      if (v1 >= *(_QWORD *)(v165 + 16))
        goto LABEL_221;
      v96 = (char *)v167[v1];
    }
    v97 = v96;
    v43 = __OFADD__(v1++, 1);
    if (v43)
    {
      __break(1u);
LABEL_221:
      __break(1u);
LABEL_222:
      __break(1u);
      goto LABEL_223;
    }
    if (v171 != 1)
    {
      swift_bridgeObjectRetain();
LABEL_154:
      AccessibilityAttachment.init()();
      v100 = v176;
      goto LABEL_155;
    }
    *(_QWORD *)&v181 = v177;
    BYTE8(v181) = v176;
    v98 = *(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(_QWORD *)v5 + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    v98(&v179, &v181, v10);
    swift_release();
    if ((v179 & 0x40) != 0)
      goto LABEL_154;
    if (v174)
    {
      v99 = (char *)MEMORY[0x18D75E3BC](0, v10);
    }
    else
    {
      if (!*(_QWORD *)(v165 + 16))
        goto LABEL_222;
      v99 = (char *)*v167;
    }
    v127 = v99;
    v128 = &v99[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    v9 = *(_QWORD *)v128;
    v129 = *(_QWORD *)(*(_QWORD *)v128 + 16);
    if (v129)
      break;
    swift_bridgeObjectRetain();
LABEL_209:

    swift_bridgeObjectRelease();
    if (v174)
    {
      swift_retain();
      v145 = (char *)MEMORY[0x18D75E3BC](0, v175._rawValue);
    }
    else
    {
      v146 = *v167;
      swift_retain();
      v145 = (char *)v146;
    }
    v100 = v176;
    v147 = &v145[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
    swift_beginAccess();
    v148 = *(_QWORD *)v147;
    swift_bridgeObjectRetain();

    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v5 + 88))(&v183, v148);
    swift_bridgeObjectRelease();
    swift_release();
LABEL_155:
    swift_bridgeObjectRelease();
    if (*(_DWORD *)(v2 + 32) != v172)
    {
      v101 = AGGraphGetValue();
      v103 = *(_QWORD *)v101;
      v102 = *(void **)(v101 + 8);
      if (!*(_BYTE *)(v101 + 16))
      {
        v106 = v102;
        swift_bridgeObjectRetain();
LABEL_160:
        *(_QWORD *)&v181 = v103;
        AccessibilityProperties.merge(with:)((uint64_t *)&v181);
        v181 = v183;
        v107 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v107)
        {
          *(_QWORD *)&v181 = v103;
          *((_QWORD *)&v181 + 1) = v102;
          if (AccessibilityAttachment.platformElement.getter())
            AccessibilityAttachment.platformElement.setter();
        }
        swift_bridgeObjectRelease();

        goto LABEL_164;
      }
      if (*(_BYTE *)(v101 + 16) == 1)
      {
        v104 = swift_bridgeObjectRetain();
        v105 = specialized Sequence.compactMap<A>(_:)(v104);
        static AccessibilityAttachment.combine(_:)(v105, (uint64_t *)&v181);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v103, v102, 1);
        v102 = (void *)*((_QWORD *)&v181 + 1);
        v103 = v181;
        goto LABEL_160;
      }
    }
LABEL_164:
    v108 = (char **)&v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    v109 = *v108;
    v110 = *((_QWORD *)*v108 + 2);
    if (v110)
    {
      swift_bridgeObjectRetain();
      v111 = (unsigned __int8 *)(v109 + 64);
      v112 = (unsigned __int8 *)(v109 + 64);
      do
      {
        v114 = *v112;
        v112 += 40;
        v113 = v114;
        if (v114 != 255)
        {
          *(_QWORD *)&v181 = *((_QWORD *)v111 - 1);
          BYTE8(v181) = v113;
          v179 = v177;
          v180 = v100;
          if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
          {
            v115 = 1;
            goto LABEL_171;
          }
        }
        v111 = v112;
        --v110;
      }
      while (v110);
      v115 = 0;
LABEL_171:
      swift_bridgeObjectRelease();
    }
    else
    {
      v115 = 0;
    }
    v116 = v183;
    v181 = v183;
    if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
    {
      if ((v115 & 1) == 0)
        goto LABEL_142;
LABEL_177:
      v181 = v116;
      v179 = v177;
      v180 = v176;
      v117 = *((id *)&v116 + 1);
      swift_bridgeObjectRetain();
      v118 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)&v181, &v179, 0);

      swift_bridgeObjectRelease_n();
      if ((v118 & 1) == 0)
        goto LABEL_143;
      v158 = 1;
      v119 = v169;
LABEL_204:
      v10 = (uint64_t)v175._rawValue;
      if ((void *)v1 == v119)
      {
LABEL_219:
        swift_bridgeObjectRelease_n();
        goto LABEL_226;
      }
    }
    else
    {
      if ((v115 & 1) != 0)
        goto LABEL_177;
      AccessibilityNode.traits.getter((uint64_t *)&v181);
      if ((v181 & 0x80000) == 0)
      {
        v120 = *(_QWORD *)&v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
        if (!v120)
          goto LABEL_199;
        v121 = *(_QWORD *)&v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
        swift_beginAccess();
        v122 = *(_QWORD *)(v120 + 32);
        if (*(_QWORD *)(v122 + 16) && (v123 = specialized __RawDictionaryStorage.find<A>(_:)(v121, 0), (v124 & 1) != 0))
        {
          v125 = *(_QWORD *)(*(_QWORD *)(v122 + 56) + 8 * v123);
          swift_endAccess();
          swift_retain();
          swift_bridgeObjectRetain();
          v126 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v125, v120, 1u);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
          swift_retain();
          v126 = MEMORY[0x1E0DEE9D8];
        }
        if (v126 >> 62)
        {
          swift_bridgeObjectRetain();
          v133 = _CocoaArrayWrapper.endIndex.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v133 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_release();
        }
        swift_bridgeObjectRelease();
        v2 = v168;
        if (!v133)
          goto LABEL_199;
      }
      v179 = v116;
      AccessibilityProperties.traits.getter();
      if ((BYTE2(v181) & 8) == 0 && (BYTE10(v181) & 8) != 0)
      {
LABEL_199:
        v181 = v116;
        v134 = *((id *)&v116 + 1);
        swift_bridgeObjectRetain();
        AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v181);
        v135 = *v108;
        swift_bridgeObjectRetain_n();
        v156 = v134;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v108 = v135;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v135 + 2) + 1, 1, v135);
          *v108 = v135;
        }
        v138 = *((_QWORD *)v135 + 2);
        v137 = *((_QWORD *)v135 + 3);
        if (v138 >= v137 >> 1)
        {
          v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v137 > 1), v138 + 1, 1, v135);
          *v108 = v135;
        }
        *((_QWORD *)v135 + 2) = v138 + 1;
        v139 = &v135[40 * v138];
        *((_OWORD *)v139 + 2) = v116;
        *((_QWORD *)v139 + 6) = 0;
        *((_QWORD *)v139 + 7) = v177;
        v139[64] = v176;
        v140 = &v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        v141 = *(_QWORD *)&v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
        v142 = *(void **)&v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
        *(_QWORD *)v140 = 0;
        *((_QWORD *)v140 + 1) = 0;
        outlined consume of AccessibilityAttachment?(v141, v142);
        v158 = 1;
        v97[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

        swift_bridgeObjectRelease_n();
        v2 = v168;
        v119 = v169;
        goto LABEL_204;
      }
LABEL_142:
      swift_bridgeObjectRelease();

LABEL_143:
      v10 = (uint64_t)v175._rawValue;
      if ((void *)v1 == v169)
      {
        swift_bridgeObjectRelease_n();
        if ((v158 & 1) != 0)
          goto LABEL_226;
        goto LABEL_215;
      }
    }
  }
  swift_bridgeObjectRetain();
  v130 = (uint64_t *)(v9 + 40 * v129);
  while (1)
  {
    if (v129 > *(_QWORD *)(v9 + 16))
    {
      __break(1u);
      goto LABEL_219;
    }
    v131 = *v130;
    *(_QWORD *)&v181 = *(v130 - 1);
    *((_QWORD *)&v181 + 1) = v131;
    v132 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v132)
      break;
    v130 -= 5;
    if (!--v129)
      goto LABEL_209;
  }
  if (v129 > *(_QWORD *)(v9 + 16))
  {
    __break(1u);
LABEL_232:
    __break(1u);
LABEL_233:
    __break(1u);
    goto LABEL_234;
  }
  v143 = *v130;
  *(_QWORD *)&v181 = *(v130 - 1);
  *((_QWORD *)&v181 + 1) = v143;
  result = AccessibilityAttachment.platformElement.getter();
  if (result)
  {
    v144 = (void *)result;

    swift_bridgeObjectRelease();
    goto LABEL_154;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  char **v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  int CurrentAttribute;
  int v10;
  int v11;
  unint64_t *v12;
  char v13;
  char v14;
  __int128 *Value;
  char *v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  BOOL v26;
  unint64_t v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  void *v71;
  char **v72;
  char *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  char v77;
  int v78;
  char *v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  Swift::UInt v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t OutputValue;
  char *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int v117;
  char *v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  unint64_t v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130[5];
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  _OWORD v138[4];
  char v139;
  uint64_t v140;

  v2 = (char **)v0;
  v140 = *MEMORY[0x1E0C80C00];
  v138[0] = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    if (*(_DWORD *)(v0 + 36) == *MEMORY[0x1E0CFED28])
    {
      if (one-time initialization token for defaultValue != -1)
        swift_once();
      Value = &static AccessibilityNodesKey.defaultValue;
    }
    else
    {
      Value = (__int128 *)AGGraphGetValue();
    }
    v21 = *((_QWORD *)Value + 1);
    *(_QWORD *)&v138[0] = *(_QWORD *)Value;
    *((_QWORD *)&v138[0] + 1) = v21;
    return AGGraphSetOutputValue();
  }
  if (*(_DWORD *)(v0 + 80) != *(_DWORD *)AGGraphGetValue() >> 1)
  {

    *(_QWORD *)(v0 + 64) = 0;
    swift_unknownObjectWeakAssign();
    *(_DWORD *)(v0 + 80) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  v3 = AGGraphGetValue();
  v5 = v4;
  outlined init with copy of AccessibilityScrollableContextModifier(v3, (uint64_t)v138);
  v139 = v5 & 1;
  v6 = (uint64_t *)AGGraphGetValue();
  v7 = *v6;
  v8 = v6[1];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v10 = *MEMORY[0x1E0CFED28];
  if (CurrentAttribute == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
    goto LABEL_28;
  }
  v109 = v8;
  swift_retain();
  swift_retain();
  AccessibilityAttachmentToken.init<A>(_:)();
  v118 = v134;
  v119 = v135;
  v11 = *((_DWORD *)v2 + 9);
  v117 = v10;
  if (v11 == v10
    || (v12 = (unint64_t *)AGGraphGetValue(),
        v14 = v13,
        v1 = *v12,
        v107 = (char *)v12[1],
        swift_bridgeObjectRetain(),
        !v1))
  {
    v107 = 0;
    v1 = MEMORY[0x1E0DEE9D8];
  }
  else if ((v14 & 1) != 0)
  {
    v111 = 1;
    goto LABEL_15;
  }
  v111 = 0;
LABEL_15:
  v16 = v2[8];
  v8 = v1 >> 62;
  v110 = v7;
  if (v16)
  {
    if (!v8)
    {
      v17 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v17)
      {
LABEL_18:
        if (v17 < 1)
          __break(1u);
        for (i = 0; i != v17; ++i)
        {
          if ((v1 & 0xC000000000000001) != 0)
            v19 = (id)MEMORY[0x18D75E3BC](i, v1);
          else
            v19 = *(id *)(v1 + 8 * i + 32);
          v20 = v19;
          swift_unknownObjectWeakAssign();

        }
      }
LABEL_29:
      swift_bridgeObjectRelease();

      v2[8] = 0;
      goto LABEL_30;
    }
LABEL_28:
    swift_bridgeObjectRetain_n();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17)
      goto LABEL_18;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain_n();
LABEL_30:
  if (v8)
  {
LABEL_102:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23)
      goto LABEL_32;
  }
  else
  {
    v23 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
    {
LABEL_32:
      v24 = 0;
      v115 = v23;
      v116 = v1 & 0xC000000000000001;
      v113 = v1 & 0xFFFFFFFFFFFFFF8;
      v114 = 0;
      v112 = v1 + 32;
      v108 = v111;
      v121 = v1;
      while (1)
      {
        if (v116)
        {
          v25 = (char *)MEMORY[0x18D75E3BC](v24, v1);
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
            goto LABEL_98;
        }
        else
        {
          if (v24 >= *(_QWORD *)(v113 + 16))
            goto LABEL_101;
          v25 = (char *)*(id *)(v112 + 8 * v24);
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
          {
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
            goto LABEL_102;
          }
        }
        v122 = v25;
        v120 = v27;
        v28 = v2;
        outlined init with copy of AccessibilityScrollableContext((uint64_t)v138, (uint64_t)&v134);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
        swift_bridgeObjectRetain();
        v29 = Dictionary.init(minimumCapacity:)();
        type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
        v31 = v30;
        v132 = v30;
        v1 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>, MEMORY[0x1E0CE6310]);
        v133 = v1;
        *(_QWORD *)&v131 = swift_allocObject();
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v134, v131 + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        outlined init with take of OptionalBinaryInteger(&v131, (uint64_t)v130);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v123 = v29;
        v33 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v130, v130[3]);
        v2 = &v107;
        v34 = MEMORY[0x1E0C80A78](v33, v33);
        v36 = (char *)&v107 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v37 + 16))(v36, v34);
        v128 = v31;
        v129 = v1;
        v38 = swift_allocObject();
        *(_QWORD *)&v127 = v38;
        v39 = *((_OWORD *)v36 + 3);
        *(_OWORD *)(v38 + 48) = *((_OWORD *)v36 + 2);
        *(_OWORD *)(v38 + 64) = v39;
        *(_QWORD *)(v38 + 79) = *(_QWORD *)(v36 + 63);
        v40 = *((_OWORD *)v36 + 1);
        *(_OWORD *)(v38 + 16) = *(_OWORD *)v36;
        *(_OWORD *)(v38 + 32) = v40;
        v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
        v43 = *(_QWORD *)(v29 + 16);
        v44 = (v41 & 1) == 0;
        v45 = v43 + v44;
        if (__OFADD__(v43, v44))
          goto LABEL_99;
        v46 = v41;
        if (*(_QWORD *)(v29 + 24) >= v45)
        {
          v49 = v122;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v50 = v123;
            if ((v41 & 1) != 0)
              goto LABEL_49;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v50 = v123;
            if ((v46 & 1) != 0)
              goto LABEL_49;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
          v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
          v49 = v122;
          if ((v46 & 1) != (v48 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v42 = v47;
          v50 = v123;
          if ((v46 & 1) != 0)
          {
LABEL_49:
            v61 = *(_QWORD *)(v50 + 56) + 40 * v42;
            __swift_destroy_boxed_opaque_existential_1(v61);
            outlined init with take of OptionalBinaryInteger(&v127, v61);
            goto LABEL_50;
          }
        }
        v51 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v127, v128);
        v52 = MEMORY[0x1E0C80A78](v51, v51);
        v54 = (char *)&v107 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, double))(v55 + 16))(v54, v52);
        v125 = v31;
        v126 = v1;
        v56 = swift_allocObject();
        *(_QWORD *)&v124 = v56;
        *(_QWORD *)(v56 + 79) = *(_QWORD *)(v54 + 63);
        v57 = *((_OWORD *)v54 + 3);
        *(_OWORD *)(v56 + 48) = *((_OWORD *)v54 + 2);
        *(_OWORD *)(v56 + 64) = v57;
        v58 = *((_OWORD *)v54 + 1);
        *(_OWORD *)(v56 + 16) = *(_OWORD *)v54;
        *(_OWORD *)(v56 + 32) = v58;
        *(_QWORD *)(v50 + 8 * (v42 >> 6) + 64) |= 1 << v42;
        *(_QWORD *)(*(_QWORD *)(v50 + 48) + 8 * v42) = &type metadata for AccessibilityProperties.ScrollableContextKey;
        outlined init with take of OptionalBinaryInteger(&v124, *(_QWORD *)(v50 + 56) + 40 * v42);
        v59 = *(_QWORD *)(v50 + 16);
        v26 = __OFADD__(v59, 1);
        v60 = v59 + 1;
        if (v26)
          goto LABEL_100;
        *(_QWORD *)(v50 + 16) = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v127);
        v49 = v122;
LABEL_50:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
        swift_bridgeObjectRelease();
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v134, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v134 = (char *)v50;
        static AccessibilityAttachment.properties(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v28;
        v62 = v119;
        if (*((_DWORD *)v28 + 8) != v117)
        {
          v63 = AGGraphGetValue();
          v65 = *(char **)v63;
          v64 = *(void **)(v63 + 8);
          if (!*(_BYTE *)(v63 + 16))
          {
            v70 = v64;
            swift_bridgeObjectRetain();
LABEL_56:
            v134 = v65;
            AccessibilityProperties.merge(with:)((uint64_t *)&v134);
            v134 = v136;
            v135 = v137;
            v71 = (void *)AccessibilityAttachment.platformElement.getter();

            v69 = v118;
            if (!v71)
            {
              v134 = v65;
              v135 = (char *)v64;
              if (AccessibilityAttachment.platformElement.getter())
                AccessibilityAttachment.platformElement.setter();
            }
            swift_bridgeObjectRelease();

            goto LABEL_60;
          }
          if (*(_BYTE *)(v63 + 16) == 1)
          {
            v66 = swift_bridgeObjectRetain();
            v67 = v114;
            v68 = specialized Sequence.compactMap<A>(_:)(v66);
            v114 = v67;
            static AccessibilityAttachment.combine(_:)(v68, (uint64_t *)&v134);
            swift_bridgeObjectRelease();
            outlined consume of AccessibilityAttachment.Tree((uint64_t)v65, v64, 1);
            v65 = v134;
            v64 = v135;
            goto LABEL_56;
          }
        }
        v69 = v118;
LABEL_60:
        v72 = (char **)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        v73 = *v72;
        v74 = *((_QWORD *)*v72 + 2);
        if (v74)
        {
          swift_bridgeObjectRetain();
          v75 = (unsigned __int8 *)(v73 + 64);
          v76 = (unsigned __int8 *)(v73 + 64);
          while (1)
          {
            v78 = *v76;
            v76 += 40;
            v77 = v78;
            if (v78 != 255)
            {
              v134 = (char *)*((_QWORD *)v75 - 1);
              LOBYTE(v135) = v77;
              *(_QWORD *)&v131 = v69;
              BYTE8(v131) = v62;
              if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                break;
            }
            v75 = v76;
            if (!--v74)
              goto LABEL_66;
          }
          LOBYTE(v74) = 1;
LABEL_66:
          swift_bridgeObjectRelease();
        }
        v80 = v136;
        v79 = v137;
        v134 = v136;
        v135 = v137;
        if ((AccessibilityAttachment.isEmpty.getter() & 1) != 0)
        {
          if ((v74 & 1) == 0)
            goto LABEL_33;
LABEL_71:
          v134 = v80;
          v135 = v79;
          *(_QWORD *)&v131 = v69;
          BYTE8(v131) = v119;
          v81 = v79;
          swift_bridgeObjectRetain();
          v82 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(&v134, (uint64_t *)&v131, 0);

          swift_bridgeObjectRelease_n();
          if ((v82 & 1) == 0)
            goto LABEL_34;
          v108 = 1;
LABEL_89:
          v24 = v120;
          v1 = v121;
          if (v120 == v115)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_104;
          }
        }
        else
        {
          if ((v74 & 1) != 0)
            goto LABEL_71;
          AccessibilityNode.traits.getter((uint64_t *)&v134);
          if ((v134 & 0x80000) == 0)
          {
            v83 = *(_QWORD *)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
            if (!v83)
              goto LABEL_84;
            v84 = *(_QWORD *)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
            swift_beginAccess();
            v85 = *(_QWORD *)(v83 + 32);
            if (*(_QWORD *)(v85 + 16) && (v86 = specialized __RawDictionaryStorage.find<A>(_:)(v84, 0), (v87 & 1) != 0))
            {
              v88 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v86);
              swift_endAccess();
              swift_retain();
              swift_bridgeObjectRetain();
              v89 = v114;
              v90 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v88, v83, 1u);
              v114 = v89;
              v69 = v118;
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_endAccess();
              swift_retain();
              v90 = MEMORY[0x1E0DEE9D8];
            }
            if (v90 >> 62)
            {
              swift_bridgeObjectRetain();
              v91 = _CocoaArrayWrapper.endIndex.getter();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              v91 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_release();
            }
            swift_bridgeObjectRelease();
            if (!v91)
              goto LABEL_84;
          }
          *(_QWORD *)&v131 = v80;
          AccessibilityProperties.traits.getter();
          if ((BYTE2(v134) & 8) == 0 && (BYTE2(v135) & 8) != 0)
          {
LABEL_84:
            v134 = v80;
            v135 = v79;
            v92 = v79;
            swift_bridgeObjectRetain();
            AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(&v134);
            v93 = *v72;
            swift_bridgeObjectRetain_n();
            v94 = v92;
            v95 = swift_isUniquelyReferenced_nonNull_native();
            *v72 = v93;
            if ((v95 & 1) == 0)
            {
              v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v93 + 2) + 1, 1, v93);
              *v72 = v93;
            }
            v97 = *((_QWORD *)v93 + 2);
            v96 = *((_QWORD *)v93 + 3);
            if (v97 >= v96 >> 1)
            {
              v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v96 > 1), v97 + 1, 1, v93);
              *v72 = v93;
            }
            *((_QWORD *)v93 + 2) = v97 + 1;
            v98 = &v93[40 * v97];
            *((_QWORD *)v98 + 4) = v80;
            *((_QWORD *)v98 + 5) = v79;
            *((_QWORD *)v98 + 6) = 0;
            *((_QWORD *)v98 + 7) = v69;
            v98[64] = v119;
            v99 = v122;
            v100 = &v122[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            v101 = *(_QWORD *)&v122[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
            v102 = *(void **)&v122[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
            *(_QWORD *)v100 = 0;
            *((_QWORD *)v100 + 1) = 0;
            outlined consume of AccessibilityAttachment?(v101, v102);
            v108 = 1;
            v99[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

            swift_bridgeObjectRelease_n();
            goto LABEL_89;
          }
LABEL_33:
          swift_bridgeObjectRelease();

LABEL_34:
          v24 = v120;
          v1 = v121;
          if (v120 == v115)
          {
            swift_bridgeObjectRelease_n();
            if ((v108 & 1) != 0)
              goto LABEL_104;
            if (v111)
            {
              v103 = v2[8];
              if (v103)
              {
                *(_QWORD *)(swift_allocObject() + 16) = v103;
                v104 = v103;
                static Update.enqueueAction(_:)();

                swift_release();
              }
            }
LABEL_105:
            OutputValue = AGGraphGetOutputValue();
            v105 = v107;
            if (OutputValue)
              v105 = *(char **)(OutputValue + 8);
            goto LABEL_107;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease_n();
  if ((v111 & 1) == 0)
    goto LABEL_105;
LABEL_104:
  DisplayList.Version.init(forUpdate:)();
  v105 = v134;
LABEL_107:
  v134 = (char *)v1;
  v135 = v105;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v138, (uint64_t (*)(_QWORD))type metadata accessor for (value: AccessibilityScrollableContextModifier, changed: Bool));
  return swift_bridgeObjectRelease();
}

